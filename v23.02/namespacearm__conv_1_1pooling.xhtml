<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_conv::pooling Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('namespacearm__conv_1_1pooling.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">arm_conv::pooling Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1pooling_1_1a64__fp32__nhwc__avg__3x3__s1__output2x2__depthfirst.xhtml">a64_fp32_nhwc_avg_3x3_s1_output2x2_depthfirst</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1pooling_1_1a64__fp32__nhwc__max__2x2__s1__output2x2__depthfirst.xhtml">a64_fp32_nhwc_max_2x2_s1_output2x2_depthfirst</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1pooling_1_1a64__s8__nhwc__max__2x2__s1__output2x2__depthfirst.xhtml">a64_s8_nhwc_max_2x2_s1_output2x2_depthfirst</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1pooling_1_1a64__u8__nhwc__max__2x2__s1__output2x2__depthfirst.xhtml">a64_u8_nhwc_max_2x2_s1_output2x2_depthfirst</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1pooling_1_1cpp__nhwc__1x1__stride__any__depthfirst.xhtml">cpp_nhwc_1x1_stride_any_depthfirst</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1pooling_1_1_depthfirst_driver.xhtml">DepthfirstDriver</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1pooling_1_1_depthfirst_strategy.xhtml">DepthfirstStrategy</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1pooling_1_1_generic_depthfirst_wrapper.xhtml">GenericDepthfirstWrapper</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1pooling_1_1_i_depthfirst_strategy.xhtml">IDepthfirstStrategy</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1pooling_1_1_i_generic_depthfirst_strategy.xhtml">IGenericDepthfirstStrategy</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1pooling_1_1_i_generic_depthfirst_strategy_3_01_t_input_00_01_t_output_00_01_nothing_01_4.xhtml">IGenericDepthfirstStrategy&lt; TInput, TOutput, Nothing &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1pooling_1_1_i_generic_depthfirst_strategy_3_01_t_input_00_01_t_output_00_01_requantize32_01_4.xhtml">IGenericDepthfirstStrategy&lt; TInput, TOutput, Requantize32 &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1pooling_1_1_invoker.xhtml">Invoker</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1pooling_1_1_invoker_3_01_t_input_00_01_t_output_00_01_nothing_01_4.xhtml">Invoker&lt; TInput, TOutput, Nothing &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1pooling_1_1_invoker_3_01_t_input_00_01_t_output_00_01_requantize32_01_4.xhtml">Invoker&lt; TInput, TOutput, Requantize32 &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1pooling_1_1_pooling_depthfirst.xhtml">PoolingDepthfirst</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_cache_oblivious.xhtml">PoolingDepthfirstCacheOblivious</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_generic.xhtml">PoolingDepthfirstGeneric</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1pooling_1_1_pooling_depthfirst_generic_quantized.xhtml">PoolingDepthfirstGenericQuantized</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1pooling_1_1_pooling_implementation.xhtml">PoolingImplementation</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1pooling_1_1sme__fp16__nhwc__avg__3x3__s1__output2x2__depthfirst.xhtml">sme_fp16_nhwc_avg_3x3_s1_output2x2_depthfirst</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1pooling_1_1sme__fp16__nhwc__avg__generic__depthfirst.xhtml">sme_fp16_nhwc_avg_generic_depthfirst</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1pooling_1_1sme__fp16__nhwc__max__2x2__s1__output2x2__depthfirst.xhtml">sme_fp16_nhwc_max_2x2_s1_output2x2_depthfirst</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1pooling_1_1sme__fp16__nhwc__max__generic__depthfirst.xhtml">sme_fp16_nhwc_max_generic_depthfirst</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1pooling_1_1sme__fp32__nhwc__avg__3x3__s1__output2x2__depthfirst.xhtml">sme_fp32_nhwc_avg_3x3_s1_output2x2_depthfirst</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1pooling_1_1sme__fp32__nhwc__avg__generic__depthfirst.xhtml">sme_fp32_nhwc_avg_generic_depthfirst</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1pooling_1_1sme__fp32__nhwc__max__2x2__s1__output2x2__depthfirst.xhtml">sme_fp32_nhwc_max_2x2_s1_output2x2_depthfirst</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1pooling_1_1sme__fp32__nhwc__max__generic__depthfirst.xhtml">sme_fp32_nhwc_max_generic_depthfirst</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1pooling_1_1sme__s8__nhwc__avg__generic__depthfirst.xhtml">sme_s8_nhwc_avg_generic_depthfirst</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1pooling_1_1sme__s8__nhwc__max__2x2__s1__output2x2__depthfirst.xhtml">sme_s8_nhwc_max_2x2_s1_output2x2_depthfirst</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1pooling_1_1sme__s8__nhwc__max__generic__depthfirst.xhtml">sme_s8_nhwc_max_generic_depthfirst</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1pooling_1_1sme__s8q__nhwc__avg__generic__depthfirst.xhtml">sme_s8q_nhwc_avg_generic_depthfirst</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1pooling_1_1sme__s8q__nhwc__max__generic__depthfirst.xhtml">sme_s8q_nhwc_max_generic_depthfirst</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1pooling_1_1sme__u8__nhwc__avg__generic__depthfirst.xhtml">sme_u8_nhwc_avg_generic_depthfirst</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1pooling_1_1sme__u8__nhwc__max__2x2__s1__output2x2__depthfirst.xhtml">sme_u8_nhwc_max_2x2_s1_output2x2_depthfirst</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1pooling_1_1sme__u8__nhwc__max__generic__depthfirst.xhtml">sme_u8_nhwc_max_generic_depthfirst</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1pooling_1_1sme__u8q__nhwc__avg__generic__depthfirst.xhtml">sme_u8q_nhwc_avg_generic_depthfirst</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1pooling_1_1sme__u8q__nhwc__max__generic__depthfirst.xhtml">sme_u8q_nhwc_max_generic_depthfirst</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1pooling_1_1_tensor_spec.xhtml">TensorSpec</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1pooling_1_1_working_space.xhtml">WorkingSpace</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:abb371690a768b0abb8f2aa9b9e7e2d94"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1pooling.xhtml#abb371690a768b0abb8f2aa9b9e7e2d94">a64_fp32_nhwc_avg_3x3_s1_output2x2_depthfirst_impl</a> (unsigned int, const float *const *const, float *const *const, bool, unsigned int, unsigned int, unsigned int, unsigned int)</td></tr>
<tr class="separator:abb371690a768b0abb8f2aa9b9e7e2d94"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1343e57b0e7c6a0f15cf9a9d46b46e58"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1pooling.xhtml#a1343e57b0e7c6a0f15cf9a9d46b46e58">a64_fp32_nhwc_max_2x2_s1_output2x2_depthfirst_impl</a> (unsigned int, const float *const *const, float *const *const, bool, unsigned int, unsigned int, unsigned int, unsigned int)</td></tr>
<tr class="separator:a1343e57b0e7c6a0f15cf9a9d46b46e58"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae36a8f494ef3276c9f802ebb47bcee96"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1pooling.xhtml#ae36a8f494ef3276c9f802ebb47bcee96">a64_s8_nhwc_max_2x2_s1_output2x2_depthfirst_impl</a> (unsigned int, const int8_t *const *const, int8_t *const *const, bool, unsigned int, unsigned int, unsigned int, unsigned int)</td></tr>
<tr class="separator:ae36a8f494ef3276c9f802ebb47bcee96"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2793f1a93be4574ec05c5f892850d712"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1pooling.xhtml#a2793f1a93be4574ec05c5f892850d712">a64_u8_nhwc_max_2x2_s1_output2x2_depthfirst_impl</a> (unsigned int, const uint8_t *const *const, uint8_t *const *const, bool, unsigned int, unsigned int, unsigned int, unsigned int)</td></tr>
<tr class="separator:a2793f1a93be4574ec05c5f892850d712"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aabc3b75050cf75332af4b31216401f69"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:aabc3b75050cf75332af4b31216401f69"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1pooling.xhtml#aabc3b75050cf75332af4b31216401f69">cpp_nhwc_1x1_stride_any_depthfirst_impl</a> (uint64_t, uint64_t, const uint64_t n_channels, const T *const *const inptrs, T *outptr)</td></tr>
<tr class="separator:aabc3b75050cf75332af4b31216401f69"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab34fd1116040e1c221224b283b749c23"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1pooling.xhtml#ab34fd1116040e1c221224b283b749c23">cpp_nhwc_1x1_stride_any_depthfirst_impl</a> (uint64_t, uint64_t, uint64_t, const float *const *, float *)</td></tr>
<tr class="separator:ab34fd1116040e1c221224b283b749c23"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a943a41657d5c7f9e3c03ae5e677c77d9"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1pooling.xhtml#a943a41657d5c7f9e3c03ae5e677c77d9">cpp_nhwc_1x1_stride_any_depthfirst_impl</a> (uint64_t, uint64_t, uint64_t, const int8_t *const *, int8_t *)</td></tr>
<tr class="separator:a943a41657d5c7f9e3c03ae5e677c77d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2852ee376fbccfca9126d4d0891c9def"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1pooling.xhtml#a2852ee376fbccfca9126d4d0891c9def">cpp_nhwc_1x1_stride_any_depthfirst_impl</a> (uint64_t, uint64_t, uint64_t, const uint8_t *const *, uint8_t *)</td></tr>
<tr class="separator:a2852ee376fbccfca9126d4d0891c9def"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa0bc443f0193559d5ae6dcfbb20e0a59"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1pooling.xhtml#aa0bc443f0193559d5ae6dcfbb20e0a59">sme_fp16_nhwc_avg_3x3_s1_output2x2_depthfirst_impl</a> (unsigned int, const __fp16 *const *const, __fp16 *const *const, bool, unsigned int, unsigned int, unsigned int, unsigned int)</td></tr>
<tr class="separator:aa0bc443f0193559d5ae6dcfbb20e0a59"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c1f1f830be75e8ecf9b8d0b16a74a09"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1pooling.xhtml#a1c1f1f830be75e8ecf9b8d0b16a74a09">sme_fp16_nhwc_avg_generic_depthfirst_impl</a> (const uint64_t window_cells, const uint64_t n_valid_cells, uint64_t n_channels, const __fp16 *const *const inptrs, __fp16 *outptr)</td></tr>
<tr class="separator:a1c1f1f830be75e8ecf9b8d0b16a74a09"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe5433516fcc059344bbe642ba4f9148"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1pooling.xhtml#abe5433516fcc059344bbe642ba4f9148">sme_fp16_nhwc_max_2x2_s1_output2x2_depthfirst_impl</a> (unsigned int, const __fp16 *const *const, __fp16 *const *const, bool, unsigned int, unsigned int, unsigned int, unsigned int)</td></tr>
<tr class="separator:abe5433516fcc059344bbe642ba4f9148"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb87799512900e807ed389e64b2b0424"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1pooling.xhtml#afb87799512900e807ed389e64b2b0424">sme_fp16_nhwc_max_generic_depthfirst_impl</a> (const uint64_t, const uint64_t n_valid_cells, uint64_t n_channels, const __fp16 *const *const inptrs, __fp16 *outptr)</td></tr>
<tr class="separator:afb87799512900e807ed389e64b2b0424"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa1cf8ba32121170682b1fb90ccdb34f8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1pooling.xhtml#aa1cf8ba32121170682b1fb90ccdb34f8">sme_fp32_nhwc_avg_3x3_s1_output2x2_depthfirst_impl</a> (unsigned int, const float *const *const, float *const *const, bool, unsigned int, unsigned int, unsigned int, unsigned int)</td></tr>
<tr class="separator:aa1cf8ba32121170682b1fb90ccdb34f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3476ee00dd98b8e800e31a1477f378ee"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1pooling.xhtml#a3476ee00dd98b8e800e31a1477f378ee">sme_fp32_nhwc_avg_generic_depthfirst_impl</a> (const uint64_t window_cells, const uint64_t n_valid_cells, uint64_t n_channels, const float *const *const inptrs, float *outptr)</td></tr>
<tr class="separator:a3476ee00dd98b8e800e31a1477f378ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e044fdd0241ce65ebf93ed9788daade"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1pooling.xhtml#a4e044fdd0241ce65ebf93ed9788daade">sme_fp32_nhwc_max_2x2_s1_output2x2_depthfirst_impl</a> (unsigned int, const float *const *const, float *const *const, bool, unsigned int, unsigned int, unsigned int, unsigned int)</td></tr>
<tr class="separator:a4e044fdd0241ce65ebf93ed9788daade"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d6ae9a88f2ebba9983cec311b059601"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1pooling.xhtml#a1d6ae9a88f2ebba9983cec311b059601">sme_fp32_nhwc_max_generic_depthfirst_impl</a> (const uint64_t, const uint64_t n_valid_cells, uint64_t n_channels, const float *const *const inptrs, float *outptr)</td></tr>
<tr class="separator:a1d6ae9a88f2ebba9983cec311b059601"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6785007f9d47d5c4c694da52d3fbcb8c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1pooling.xhtml#a6785007f9d47d5c4c694da52d3fbcb8c">sme_s8_nhwc_avg_generic_depthfirst_impl</a> (const uint64_t window_cells, const uint64_t n_valid_cells, uint64_t n_channels, const int8_t *const *const inptrs, int8_t *outptr)</td></tr>
<tr class="separator:a6785007f9d47d5c4c694da52d3fbcb8c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f9e93e8a78d6e09f22f2b0c90c2ce8c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1pooling.xhtml#a0f9e93e8a78d6e09f22f2b0c90c2ce8c">sme_s8_nhwc_max_2x2_s1_output2x2_depthfirst_impl</a> (unsigned int, const int8_t *const *const, int8_t *const *const, bool, unsigned int, unsigned int, unsigned int, unsigned int)</td></tr>
<tr class="separator:a0f9e93e8a78d6e09f22f2b0c90c2ce8c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4969345f4519f8d572ba9b030cc398be"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1pooling.xhtml#a4969345f4519f8d572ba9b030cc398be">sme_s8_nhwc_max_generic_depthfirst_impl</a> (const uint64_t, const uint64_t n_valid_cells, uint64_t n_channels, const int8_t *const *const inptrs, int8_t *outptr)</td></tr>
<tr class="separator:a4969345f4519f8d572ba9b030cc398be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7c80c556f82abbef04bd964d7fcc26b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1pooling.xhtml#ad7c80c556f82abbef04bd964d7fcc26b">sme_s8q_nhwc_avg_generic_depthfirst_impl</a> (const uint64_t window_cells, const uint64_t n_valid_cells, uint64_t n_channels, const int8_t *const *const inptrs, int8_t *outptr, const Requantize32 &amp;qp)</td></tr>
<tr class="separator:ad7c80c556f82abbef04bd964d7fcc26b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8095adb672c08700b57080ef4a9c2bc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1pooling.xhtml#af8095adb672c08700b57080ef4a9c2bc">sme_s8q_nhwc_max_generic_depthfirst_impl</a> (const uint64_t, const uint64_t n_valid_cells, uint64_t n_channels, const int8_t *const *const inptrs, int8_t *outptr, const Requantize32 &amp;qp)</td></tr>
<tr class="separator:af8095adb672c08700b57080ef4a9c2bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e514d19895c32764d7d0848a599667d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1pooling.xhtml#a6e514d19895c32764d7d0848a599667d">sme_u8_nhwc_avg_generic_depthfirst_impl</a> (const uint64_t window_cells, const uint64_t n_valid_cells, uint64_t n_channels, const uint8_t *const *const inptrs, uint8_t *outptr)</td></tr>
<tr class="separator:a6e514d19895c32764d7d0848a599667d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f8aebbcf2ec2bfc5d6a4d415800c60d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1pooling.xhtml#a2f8aebbcf2ec2bfc5d6a4d415800c60d">sme_u8_nhwc_max_2x2_s1_output2x2_depthfirst_impl</a> (unsigned int, const uint8_t *const *const, uint8_t *const *const, bool, unsigned int, unsigned int, unsigned int, unsigned int)</td></tr>
<tr class="separator:a2f8aebbcf2ec2bfc5d6a4d415800c60d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab95b88e8c4c8a1631954c4f50c8fb35d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1pooling.xhtml#ab95b88e8c4c8a1631954c4f50c8fb35d">sme_u8_nhwc_max_generic_depthfirst_impl</a> (const uint64_t, const uint64_t n_valid_cells, uint64_t n_channels, const uint8_t *const *const inptrs, uint8_t *outptr)</td></tr>
<tr class="separator:ab95b88e8c4c8a1631954c4f50c8fb35d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f56671b8ee1181c7d26100901a53835"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1pooling.xhtml#a8f56671b8ee1181c7d26100901a53835">sme_u8q_nhwc_avg_generic_depthfirst_impl</a> (const uint64_t window_cells, const uint64_t n_valid_cells, uint64_t n_channels, const uint8_t *const *const inptrs, uint8_t *outptr, const Requantize32 &amp;qp)</td></tr>
<tr class="separator:a8f56671b8ee1181c7d26100901a53835"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa6b7adf5f52f531b64f49c9ea3c26c35"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1pooling.xhtml#aa6b7adf5f52f531b64f49c9ea3c26c35">sme_u8q_nhwc_max_generic_depthfirst_impl</a> (const uint64_t, const uint64_t n_valid_cells, uint64_t n_channels, const uint8_t *const *const inptrs, uint8_t *outptr, const Requantize32 &amp;qp)</td></tr>
<tr class="separator:aa6b7adf5f52f531b64f49c9ea3c26c35"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c9bf60a0c8879f8d417aa59041b398d"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a4c9bf60a0c8879f8d417aa59041b398d"><td class="memTemplItemLeft" align="right" valign="top">const <a class="el" href="structarm__conv_1_1pooling_1_1_pooling_implementation.xhtml">PoolingImplementation</a>&lt; float, float &gt; *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1pooling.xhtml#a4c9bf60a0c8879f8d417aa59041b398d">pooling_implementation_list</a> ()</td></tr>
<tr class="separator:a4c9bf60a0c8879f8d417aa59041b398d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2dbb9d67088387c8cb61b8d7d063afd1"><td class="memItemLeft" align="right" valign="top">template UniquePoolingCommon&lt; float, float &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1pooling.xhtml#a2dbb9d67088387c8cb61b8d7d063afd1">pooling</a> (const PoolingArgs &amp;, const Nothing &amp;)</td></tr>
<tr class="separator:a2dbb9d67088387c8cb61b8d7d063afd1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8eab7e5b5329fa3cd319f7f1647d3bd1"><td class="memTemplParams" colspan="2">template&lt;typename TInput , typename TOutput , class OutputStage  = Nothing&gt; </td></tr>
<tr class="memitem:a8eab7e5b5329fa3cd319f7f1647d3bd1"><td class="memTemplItemLeft" align="right" valign="top">const <a class="el" href="structarm__conv_1_1pooling_1_1_pooling_implementation.xhtml">PoolingImplementation</a>&lt; TInput, TOutput, OutputStage &gt; *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1pooling.xhtml#a8eab7e5b5329fa3cd319f7f1647d3bd1">pooling_implementation_list</a> ()</td></tr>
<tr class="separator:a8eab7e5b5329fa3cd319f7f1647d3bd1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf2b1fe16f2ef298d0a2129d2952d44c"><td class="memTemplParams" colspan="2">template&lt;typename TInput , typename TOutput , class OutputStage  = Nothing&gt; </td></tr>
<tr class="memitem:aaf2b1fe16f2ef298d0a2129d2952d44c"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1pooling.xhtml#aaf2b1fe16f2ef298d0a2129d2952d44c">find_implementation</a> (const PoolingArgs &amp;args, const OutputStage &amp;os, const <a class="el" href="structarm__conv_1_1pooling_1_1_pooling_implementation.xhtml">PoolingImplementation</a>&lt; TInput, TOutput, OutputStage &gt; *&amp;selected)</td></tr>
<tr class="separator:aaf2b1fe16f2ef298d0a2129d2952d44c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac661fff440c857b78a8d3d618b2572f3"><td class="memTemplParams" colspan="2">template&lt;typename TInput , typename TOutput , class OutputStage &gt; </td></tr>
<tr class="memitem:ac661fff440c857b78a8d3d618b2572f3"><td class="memTemplItemLeft" align="right" valign="top">UniquePoolingCommon&lt; TInput, TOutput &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1pooling.xhtml#ac661fff440c857b78a8d3d618b2572f3">pooling</a> (const PoolingArgs &amp;args, const OutputStage &amp;os)</td></tr>
<tr class="separator:ac661fff440c857b78a8d3d618b2572f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6b83db4cc0278aff2e41048195fea7c4"><td class="memTemplParams" colspan="2">template&lt;class Strategy &gt; </td></tr>
<tr class="memitem:a6b83db4cc0278aff2e41048195fea7c4"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1pooling.xhtml#a6b83db4cc0278aff2e41048195fea7c4">is_supported</a> (const PoolingArgs &amp;args, const Nothing &amp;)</td></tr>
<tr class="separator:a6b83db4cc0278aff2e41048195fea7c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d48fc2e894ccf10d2a3894f412f3ed0"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a6d48fc2e894ccf10d2a3894f412f3ed0"><td class="memTemplItemLeft" align="right" valign="top">const <a class="el" href="structarm__conv_1_1pooling_1_1_pooling_implementation.xhtml">PoolingImplementation</a>&lt; int8_t, int8_t &gt; *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1pooling.xhtml#a6d48fc2e894ccf10d2a3894f412f3ed0">pooling_implementation_list</a> ()</td></tr>
<tr class="separator:a6d48fc2e894ccf10d2a3894f412f3ed0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa188e0b5766fd9c2cd882866d4a493ad"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:aa188e0b5766fd9c2cd882866d4a493ad"><td class="memTemplItemLeft" align="right" valign="top">const <a class="el" href="structarm__conv_1_1pooling_1_1_pooling_implementation.xhtml">PoolingImplementation</a>&lt; int8_t, int8_t, Requantize32 &gt; *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1pooling.xhtml#aa188e0b5766fd9c2cd882866d4a493ad">pooling_implementation_list</a> ()</td></tr>
<tr class="separator:aa188e0b5766fd9c2cd882866d4a493ad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4ef34cba320eadcd578b7c2d2e7ec9a8"><td class="memItemLeft" align="right" valign="top">template UniquePoolingCommon&lt; int8_t, int8_t &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1pooling.xhtml#a4ef34cba320eadcd578b7c2d2e7ec9a8">pooling</a> (const PoolingArgs &amp;, const Requantize32 &amp;)</td></tr>
<tr class="separator:a4ef34cba320eadcd578b7c2d2e7ec9a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2cacb9706db5850728e9c5134e237d96"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a2cacb9706db5850728e9c5134e237d96"><td class="memTemplItemLeft" align="right" valign="top">const <a class="el" href="structarm__conv_1_1pooling_1_1_pooling_implementation.xhtml">PoolingImplementation</a>&lt; uint8_t, uint8_t &gt; *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1pooling.xhtml#a2cacb9706db5850728e9c5134e237d96">pooling_implementation_list</a> ()</td></tr>
<tr class="separator:a2cacb9706db5850728e9c5134e237d96"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ba142211e436f397fe2f926ef188315"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a9ba142211e436f397fe2f926ef188315"><td class="memTemplItemLeft" align="right" valign="top">const <a class="el" href="structarm__conv_1_1pooling_1_1_pooling_implementation.xhtml">PoolingImplementation</a>&lt; uint8_t, uint8_t, Requantize32 &gt; *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1pooling.xhtml#a9ba142211e436f397fe2f926ef188315">pooling_implementation_list</a> ()</td></tr>
<tr class="separator:a9ba142211e436f397fe2f926ef188315"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="abb371690a768b0abb8f2aa9b9e7e2d94"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abb371690a768b0abb8f2aa9b9e7e2d94">&#9670;&nbsp;</a></span>a64_fp32_nhwc_avg_3x3_s1_output2x2_depthfirst_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::pooling::a64_fp32_nhwc_avg_3x3_s1_output2x2_depthfirst_impl </td>
          <td>(</td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *const *&#160;</td>
          <td class="paramname"><em>const</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *const *&#160;</td>
          <td class="paramname"><em>const</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="a64__fp32__nhwc__avg__3x3__s1__output2x2__depthfirst_8hpp_source.xhtml#l00043">a64_fp32_nhwc_avg_3x3_s1_output2x2_depthfirst::get_kernel()</a>.</p>

</div>
</div>
<a id="a1343e57b0e7c6a0f15cf9a9d46b46e58"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1343e57b0e7c6a0f15cf9a9d46b46e58">&#9670;&nbsp;</a></span>a64_fp32_nhwc_max_2x2_s1_output2x2_depthfirst_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::pooling::a64_fp32_nhwc_max_2x2_s1_output2x2_depthfirst_impl </td>
          <td>(</td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *const *&#160;</td>
          <td class="paramname"><em>const</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *const *&#160;</td>
          <td class="paramname"><em>const</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="a64__fp32__nhwc__max__2x2__s1__output2x2__depthfirst_8hpp_source.xhtml#l00043">a64_fp32_nhwc_max_2x2_s1_output2x2_depthfirst::get_kernel()</a>.</p>

</div>
</div>
<a id="ae36a8f494ef3276c9f802ebb47bcee96"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae36a8f494ef3276c9f802ebb47bcee96">&#9670;&nbsp;</a></span>a64_s8_nhwc_max_2x2_s1_output2x2_depthfirst_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::pooling::a64_s8_nhwc_max_2x2_s1_output2x2_depthfirst_impl </td>
          <td>(</td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int8_t *const *&#160;</td>
          <td class="paramname"><em>const</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int8_t *const *&#160;</td>
          <td class="paramname"><em>const</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="a64__s8__nhwc__max__2x2__s1__output2x2__depthfirst_8hpp_source.xhtml#l00043">a64_s8_nhwc_max_2x2_s1_output2x2_depthfirst::get_kernel()</a>.</p>

</div>
</div>
<a id="a2793f1a93be4574ec05c5f892850d712"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2793f1a93be4574ec05c5f892850d712">&#9670;&nbsp;</a></span>a64_u8_nhwc_max_2x2_s1_output2x2_depthfirst_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::pooling::a64_u8_nhwc_max_2x2_s1_output2x2_depthfirst_impl </td>
          <td>(</td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *const *&#160;</td>
          <td class="paramname"><em>const</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *const *&#160;</td>
          <td class="paramname"><em>const</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="a64__u8__nhwc__max__2x2__s1__output2x2__depthfirst_8hpp_source.xhtml#l00043">a64_u8_nhwc_max_2x2_s1_output2x2_depthfirst::get_kernel()</a>.</p>

</div>
</div>
<a id="aabc3b75050cf75332af4b31216401f69"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aabc3b75050cf75332af4b31216401f69">&#9670;&nbsp;</a></span>cpp_nhwc_1x1_stride_any_depthfirst_impl() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void cpp_nhwc_1x1_stride_any_depthfirst_impl </td>
          <td>(</td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint64_t&#160;</td>
          <td class="paramname"><em>n_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *const *const&#160;</td>
          <td class="paramname"><em>inptrs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T *&#160;</td>
          <td class="paramname"><em>outptr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="arm__conv_2pooling_2kernels_2cpp__nhwc__1x1__stride__any__depthfirst_2generic_8cpp_source.xhtml#l00032">32</a> of file <a class="el" href="arm__conv_2pooling_2kernels_2cpp__nhwc__1x1__stride__any__depthfirst_2generic_8cpp_source.xhtml">generic.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;  std::memcpy(outptr, inptrs[0], n_channels * <span class="keyword">sizeof</span>(T));</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ab34fd1116040e1c221224b283b749c23"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab34fd1116040e1c221224b283b749c23">&#9670;&nbsp;</a></span>cpp_nhwc_1x1_stride_any_depthfirst_impl() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void arm_conv::pooling::cpp_nhwc_1x1_stride_any_depthfirst_impl </td>
          <td>(</td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *const *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a943a41657d5c7f9e3c03ae5e677c77d9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a943a41657d5c7f9e3c03ae5e677c77d9">&#9670;&nbsp;</a></span>cpp_nhwc_1x1_stride_any_depthfirst_impl() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void arm_conv::pooling::cpp_nhwc_1x1_stride_any_depthfirst_impl </td>
          <td>(</td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int8_t *const *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int8_t *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a2852ee376fbccfca9126d4d0891c9def"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2852ee376fbccfca9126d4d0891c9def">&#9670;&nbsp;</a></span>cpp_nhwc_1x1_stride_any_depthfirst_impl() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void arm_conv::pooling::cpp_nhwc_1x1_stride_any_depthfirst_impl </td>
          <td>(</td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *const *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aaf2b1fe16f2ef298d0a2129d2952d44c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaf2b1fe16f2ef298d0a2129d2952d44c">&#9670;&nbsp;</a></span>find_implementation()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_conv::pooling::find_implementation </td>
          <td>(</td>
          <td class="paramtype">const PoolingArgs &amp;&#160;</td>
          <td class="paramname"><em>args</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const OutputStage &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__conv_1_1pooling_1_1_pooling_implementation.xhtml">PoolingImplementation</a>&lt; TInput, TOutput, OutputStage &gt; *&amp;&#160;</td>
          <td class="paramname"><em>selected</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="pooling__implementation_8hpp_source.xhtml#l00064">64</a> of file <a class="el" href="pooling__implementation_8hpp_source.xhtml">pooling_implementation.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;{</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;  <span class="comment">// For now, return the first valid implementation</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;  <span class="keyword">const</span> <span class="keyword">auto</span> *impl = pooling_implementation_list&lt;TInput, TOutput, OutputStage&gt;();</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;  <span class="keywordflow">for</span> (; impl-&gt;method != PoolingMethod::DEFAULT; impl++)</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;  {</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>.config != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    {</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;      <span class="comment">// Apply filters provided by the configuration</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;      <span class="keyword">const</span> <span class="keyword">auto</span> cfg = <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>.config;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;      <span class="keywordflow">if</span> (cfg-&gt;filter != <span class="stringliteral">&quot;&quot;</span> &amp;&amp; !std::strstr(impl-&gt;name, cfg-&gt;filter.c_str()))</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;      {</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;      }</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    }</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keywordflow">if</span> (impl-&gt;get_is_supported(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>, os))</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    {</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;      selected = impl;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    }</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;  }</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;}</div><div class="ttc" id="namespace_gemm_tuner_xhtml_a8187411843a6284ffb964ef3fb9fcab3"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">GemmTuner.args</a></div><div class="ttdeci">args</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner.py:679</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a6b83db4cc0278aff2e41048195fea7c4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6b83db4cc0278aff2e41048195fea7c4">&#9670;&nbsp;</a></span>is_supported()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_conv::pooling::is_supported </td>
          <td>(</td>
          <td class="paramtype">const PoolingArgs &amp;&#160;</td>
          <td class="paramname"><em>args</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Nothing &amp;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="pooling__implementation_8hpp_source.xhtml#l00103">103</a> of file <a class="el" href="pooling__implementation_8hpp_source.xhtml">pooling_implementation.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;{</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;  <span class="keywordflow">return</span> ((<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>.pool_type == Strategy::pooling_type) &amp;&amp;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;          (<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>.pool_window.rows == Strategy::pool_rows) &amp;&amp;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;          (<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>.pool_window.cols == Strategy::pool_cols) &amp;&amp;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;          (<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>.pool_stride.rows == Strategy::stride_rows) &amp;&amp;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;          (<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>.pool_stride.cols == Strategy::stride_cols));</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;}</div><div class="ttc" id="namespace_gemm_tuner_xhtml_a8187411843a6284ffb964ef3fb9fcab3"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">GemmTuner.args</a></div><div class="ttdeci">args</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner.py:679</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac661fff440c857b78a8d3d618b2572f3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac661fff440c857b78a8d3d618b2572f3">&#9670;&nbsp;</a></span>pooling() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">UniquePoolingCommon&lt;TInput, TOutput&gt; arm_conv::pooling::pooling </td>
          <td>(</td>
          <td class="paramtype">const PoolingArgs &amp;&#160;</td>
          <td class="paramname"><em>args</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const OutputStage &amp;&#160;</td>
          <td class="paramname"><em>os</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="pooling__implementation_8hpp_source.xhtml#l00095">95</a> of file <a class="el" href="pooling__implementation_8hpp_source.xhtml">pooling_implementation.hpp</a>.</p>

<p class="reference">References <a class="el" href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner::args</a>, and <a class="el" href="pooling__implementation_8hpp_source.xhtml#l00054">PoolingImplementation&lt; TInput, TOutput, OutputStage &gt;::get_instance()</a>.</p>
<div class="fragment"><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;{</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;  <span class="keyword">const</span> PoolingImplementation&lt;TInput, TOutput, OutputStage&gt; *impl = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">bool</span> success = find_implementation&lt;TInput, TOutput, OutputStage&gt;(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>, os, impl);</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;  <span class="keywordflow">return</span> UniquePoolingCommon&lt;TInput, TOutput&gt;(success ? impl-&gt;get_instance(args, os) : <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;}</div><div class="ttc" id="namespace_gemm_tuner_xhtml_a8187411843a6284ffb964ef3fb9fcab3"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">GemmTuner.args</a></div><div class="ttdeci">args</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner.py:679</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a4ef34cba320eadcd578b7c2d2e7ec9a8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4ef34cba320eadcd578b7c2d2e7ec9a8">&#9670;&nbsp;</a></span>pooling() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template UniquePoolingCommon&lt; uint8_t, uint8_t &gt; pooling </td>
          <td>(</td>
          <td class="paramtype">const PoolingArgs &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Requantize32 &amp;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a2dbb9d67088387c8cb61b8d7d063afd1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2dbb9d67088387c8cb61b8d7d063afd1">&#9670;&nbsp;</a></span>pooling() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template UniquePoolingCommon&lt; uint8_t, uint8_t &gt; pooling </td>
          <td>(</td>
          <td class="paramtype">const PoolingArgs &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Nothing &amp;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="pooling__fp32_8cpp_source.xhtml#l00217">pooling_implementation_list()</a>.</p>

</div>
</div>
<a id="a8eab7e5b5329fa3cd319f7f1647d3bd1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8eab7e5b5329fa3cd319f7f1647d3bd1">&#9670;&nbsp;</a></span>pooling_implementation_list() <span class="overload">[1/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="structarm__conv_1_1pooling_1_1_pooling_implementation.xhtml">PoolingImplementation</a>&lt;TInput, TOutput, OutputStage&gt;* arm_conv::pooling::pooling_implementation_list </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="pooling__fp32_8cpp_source.xhtml#l00217">217</a> of file <a class="el" href="pooling__fp32_8cpp_source.xhtml">pooling_fp32.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearm__conv_1_1pooling.xhtml#a2dbb9d67088387c8cb61b8d7d063afd1">pooling()</a>.</p>

<p class="reference">Referenced by <a class="el" href="pooling__implementation_8hpp_source.xhtml#l00054">PoolingImplementation&lt; TInput, TOutput, OutputStage &gt;::get_instance()</a>.</p>
<div class="fragment"><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;{</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;  <span class="keywordflow">return</span> pooling_fp32_methods;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a9ba142211e436f397fe2f926ef188315"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9ba142211e436f397fe2f926ef188315">&#9670;&nbsp;</a></span>pooling_implementation_list() <span class="overload">[2/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="structarm__conv_1_1pooling_1_1_pooling_implementation.xhtml">PoolingImplementation</a>&lt;uint8_t, uint8_t, Requantize32&gt;* arm_conv::pooling::pooling_implementation_list </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="pooling__u8q_8cpp_source.xhtml#l00129">129</a> of file <a class="el" href="pooling__u8q_8cpp_source.xhtml">pooling_u8q.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearm__conv_1_1pooling.xhtml#a2dbb9d67088387c8cb61b8d7d063afd1">pooling()</a>.</p>
<div class="fragment"><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;{</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;  <span class="keywordflow">return</span> pooling_u8q_methods;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aa188e0b5766fd9c2cd882866d4a493ad"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa188e0b5766fd9c2cd882866d4a493ad">&#9670;&nbsp;</a></span>pooling_implementation_list() <span class="overload">[3/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="structarm__conv_1_1pooling_1_1_pooling_implementation.xhtml">PoolingImplementation</a>&lt;int8_t, int8_t, Requantize32&gt;* arm_conv::pooling::pooling_implementation_list </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="pooling__s8q_8cpp_source.xhtml#l00129">129</a> of file <a class="el" href="pooling__s8q_8cpp_source.xhtml">pooling_s8q.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearm__conv_1_1pooling.xhtml#a2dbb9d67088387c8cb61b8d7d063afd1">pooling()</a>.</p>
<div class="fragment"><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;{</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;  <span class="keywordflow">return</span> pooling_s8q_methods;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a6d48fc2e894ccf10d2a3894f412f3ed0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6d48fc2e894ccf10d2a3894f412f3ed0">&#9670;&nbsp;</a></span>pooling_implementation_list() <span class="overload">[4/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="structarm__conv_1_1pooling_1_1_pooling_implementation.xhtml">PoolingImplementation</a>&lt;int8_t, int8_t&gt;* arm_conv::pooling::pooling_implementation_list </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="pooling__s8_8cpp_source.xhtml#l00180">180</a> of file <a class="el" href="pooling__s8_8cpp_source.xhtml">pooling_s8.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearm__conv_1_1pooling.xhtml#a2dbb9d67088387c8cb61b8d7d063afd1">pooling()</a>.</p>
<div class="fragment"><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;{</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;  <span class="keywordflow">return</span> pooling_s8_methods;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a2cacb9706db5850728e9c5134e237d96"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2cacb9706db5850728e9c5134e237d96">&#9670;&nbsp;</a></span>pooling_implementation_list() <span class="overload">[5/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="structarm__conv_1_1pooling_1_1_pooling_implementation.xhtml">PoolingImplementation</a>&lt;uint8_t, uint8_t&gt;* arm_conv::pooling::pooling_implementation_list </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="pooling__u8_8cpp_source.xhtml#l00202">202</a> of file <a class="el" href="pooling__u8_8cpp_source.xhtml">pooling_u8.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearm__conv_1_1pooling.xhtml#a2dbb9d67088387c8cb61b8d7d063afd1">pooling()</a>.</p>
<div class="fragment"><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;{</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;  <span class="keywordflow">return</span> pooling_u8_methods;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a4c9bf60a0c8879f8d417aa59041b398d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4c9bf60a0c8879f8d417aa59041b398d">&#9670;&nbsp;</a></span>pooling_implementation_list() <span class="overload">[6/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="structarm__conv_1_1pooling_1_1_pooling_implementation.xhtml">PoolingImplementation</a>&lt;float, float&gt;* arm_conv::pooling::pooling_implementation_list </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="pooling__fp32_8cpp_source.xhtml#l00217">217</a> of file <a class="el" href="pooling__fp32_8cpp_source.xhtml">pooling_fp32.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="pooling__implementation_8hpp_source.xhtml#l00054">PoolingImplementation&lt; TInput, TOutput, OutputStage &gt;::get_instance()</a>.</p>
<div class="fragment"><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;{</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;  <span class="keywordflow">return</span> pooling_fp32_methods;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aa0bc443f0193559d5ae6dcfbb20e0a59"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa0bc443f0193559d5ae6dcfbb20e0a59">&#9670;&nbsp;</a></span>sme_fp16_nhwc_avg_3x3_s1_output2x2_depthfirst_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::pooling::sme_fp16_nhwc_avg_3x3_s1_output2x2_depthfirst_impl </td>
          <td>(</td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const __fp16 *const *&#160;</td>
          <td class="paramname"><em>const</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__fp16 *const *&#160;</td>
          <td class="paramname"><em>const</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="sme__fp16__nhwc__avg__3x3__s1__output2x2__depthfirst_8hpp_source.xhtml#l00043">sme_fp16_nhwc_avg_3x3_s1_output2x2_depthfirst::get_kernel()</a>.</p>

</div>
</div>
<a id="a1c1f1f830be75e8ecf9b8d0b16a74a09"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1c1f1f830be75e8ecf9b8d0b16a74a09">&#9670;&nbsp;</a></span>sme_fp16_nhwc_avg_generic_depthfirst_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::pooling::sme_fp16_nhwc_avg_generic_depthfirst_impl </td>
          <td>(</td>
          <td class="paramtype">const uint64_t&#160;</td>
          <td class="paramname"><em>window_cells</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint64_t&#160;</td>
          <td class="paramname"><em>n_valid_cells</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname"><em>n_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const __fp16 *const *const&#160;</td>
          <td class="paramname"><em>inptrs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__fp16 *&#160;</td>
          <td class="paramname"><em>outptr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="sme__fp16__nhwc__avg__generic__depthfirst_8hpp_source.xhtml#l00038">sme_fp16_nhwc_avg_generic_depthfirst::get_kernel()</a>.</p>

</div>
</div>
<a id="abe5433516fcc059344bbe642ba4f9148"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abe5433516fcc059344bbe642ba4f9148">&#9670;&nbsp;</a></span>sme_fp16_nhwc_max_2x2_s1_output2x2_depthfirst_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::pooling::sme_fp16_nhwc_max_2x2_s1_output2x2_depthfirst_impl </td>
          <td>(</td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const __fp16 *const *&#160;</td>
          <td class="paramname"><em>const</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__fp16 *const *&#160;</td>
          <td class="paramname"><em>const</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="sme__fp16__nhwc__max__2x2__s1__output2x2__depthfirst_8hpp_source.xhtml#l00043">sme_fp16_nhwc_max_2x2_s1_output2x2_depthfirst::get_kernel()</a>.</p>

</div>
</div>
<a id="afb87799512900e807ed389e64b2b0424"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afb87799512900e807ed389e64b2b0424">&#9670;&nbsp;</a></span>sme_fp16_nhwc_max_generic_depthfirst_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::pooling::sme_fp16_nhwc_max_generic_depthfirst_impl </td>
          <td>(</td>
          <td class="paramtype">const uint64_t&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint64_t&#160;</td>
          <td class="paramname"><em>n_valid_cells</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname"><em>n_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const __fp16 *const *const&#160;</td>
          <td class="paramname"><em>inptrs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__fp16 *&#160;</td>
          <td class="paramname"><em>outptr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="sme__fp16__nhwc__max__generic__depthfirst_8hpp_source.xhtml#l00038">sme_fp16_nhwc_max_generic_depthfirst::get_kernel()</a>.</p>

</div>
</div>
<a id="aa1cf8ba32121170682b1fb90ccdb34f8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa1cf8ba32121170682b1fb90ccdb34f8">&#9670;&nbsp;</a></span>sme_fp32_nhwc_avg_3x3_s1_output2x2_depthfirst_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::pooling::sme_fp32_nhwc_avg_3x3_s1_output2x2_depthfirst_impl </td>
          <td>(</td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *const *&#160;</td>
          <td class="paramname"><em>const</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *const *&#160;</td>
          <td class="paramname"><em>const</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="sme__fp32__nhwc__avg__3x3__s1__output2x2__depthfirst_8hpp_source.xhtml#l00043">sme_fp32_nhwc_avg_3x3_s1_output2x2_depthfirst::get_kernel()</a>.</p>

</div>
</div>
<a id="a3476ee00dd98b8e800e31a1477f378ee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3476ee00dd98b8e800e31a1477f378ee">&#9670;&nbsp;</a></span>sme_fp32_nhwc_avg_generic_depthfirst_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::pooling::sme_fp32_nhwc_avg_generic_depthfirst_impl </td>
          <td>(</td>
          <td class="paramtype">const uint64_t&#160;</td>
          <td class="paramname"><em>window_cells</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint64_t&#160;</td>
          <td class="paramname"><em>n_valid_cells</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname"><em>n_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *const *const&#160;</td>
          <td class="paramname"><em>inptrs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>outptr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="sme__fp32__nhwc__avg__generic__depthfirst_8hpp_source.xhtml#l00038">sme_fp32_nhwc_avg_generic_depthfirst::get_kernel()</a>.</p>

</div>
</div>
<a id="a4e044fdd0241ce65ebf93ed9788daade"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4e044fdd0241ce65ebf93ed9788daade">&#9670;&nbsp;</a></span>sme_fp32_nhwc_max_2x2_s1_output2x2_depthfirst_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::pooling::sme_fp32_nhwc_max_2x2_s1_output2x2_depthfirst_impl </td>
          <td>(</td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *const *&#160;</td>
          <td class="paramname"><em>const</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *const *&#160;</td>
          <td class="paramname"><em>const</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="sme__fp32__nhwc__max__2x2__s1__output2x2__depthfirst_8hpp_source.xhtml#l00043">sme_fp32_nhwc_max_2x2_s1_output2x2_depthfirst::get_kernel()</a>.</p>

</div>
</div>
<a id="a1d6ae9a88f2ebba9983cec311b059601"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1d6ae9a88f2ebba9983cec311b059601">&#9670;&nbsp;</a></span>sme_fp32_nhwc_max_generic_depthfirst_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::pooling::sme_fp32_nhwc_max_generic_depthfirst_impl </td>
          <td>(</td>
          <td class="paramtype">const uint64_t&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint64_t&#160;</td>
          <td class="paramname"><em>n_valid_cells</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname"><em>n_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *const *const&#160;</td>
          <td class="paramname"><em>inptrs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>outptr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="sme__fp32__nhwc__max__generic__depthfirst_8hpp_source.xhtml#l00038">sme_fp32_nhwc_max_generic_depthfirst::get_kernel()</a>.</p>

</div>
</div>
<a id="a6785007f9d47d5c4c694da52d3fbcb8c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6785007f9d47d5c4c694da52d3fbcb8c">&#9670;&nbsp;</a></span>sme_s8_nhwc_avg_generic_depthfirst_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::pooling::sme_s8_nhwc_avg_generic_depthfirst_impl </td>
          <td>(</td>
          <td class="paramtype">const uint64_t&#160;</td>
          <td class="paramname"><em>window_cells</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint64_t&#160;</td>
          <td class="paramname"><em>n_valid_cells</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname"><em>n_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int8_t *const *const&#160;</td>
          <td class="paramname"><em>inptrs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int8_t *&#160;</td>
          <td class="paramname"><em>outptr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="sme__s8__nhwc__avg__generic__depthfirst_8hpp_source.xhtml#l00038">sme_s8_nhwc_avg_generic_depthfirst::get_kernel()</a>.</p>

</div>
</div>
<a id="a0f9e93e8a78d6e09f22f2b0c90c2ce8c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0f9e93e8a78d6e09f22f2b0c90c2ce8c">&#9670;&nbsp;</a></span>sme_s8_nhwc_max_2x2_s1_output2x2_depthfirst_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::pooling::sme_s8_nhwc_max_2x2_s1_output2x2_depthfirst_impl </td>
          <td>(</td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int8_t *const *&#160;</td>
          <td class="paramname"><em>const</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int8_t *const *&#160;</td>
          <td class="paramname"><em>const</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="sme__s8__nhwc__max__2x2__s1__output2x2__depthfirst_8hpp_source.xhtml#l00043">sme_s8_nhwc_max_2x2_s1_output2x2_depthfirst::get_kernel()</a>.</p>

</div>
</div>
<a id="a4969345f4519f8d572ba9b030cc398be"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4969345f4519f8d572ba9b030cc398be">&#9670;&nbsp;</a></span>sme_s8_nhwc_max_generic_depthfirst_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::pooling::sme_s8_nhwc_max_generic_depthfirst_impl </td>
          <td>(</td>
          <td class="paramtype">const uint64_t&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint64_t&#160;</td>
          <td class="paramname"><em>n_valid_cells</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname"><em>n_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int8_t *const *const&#160;</td>
          <td class="paramname"><em>inptrs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int8_t *&#160;</td>
          <td class="paramname"><em>outptr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="sme__s8__nhwc__max__generic__depthfirst_8hpp_source.xhtml#l00038">sme_s8_nhwc_max_generic_depthfirst::get_kernel()</a>.</p>

</div>
</div>
<a id="ad7c80c556f82abbef04bd964d7fcc26b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad7c80c556f82abbef04bd964d7fcc26b">&#9670;&nbsp;</a></span>sme_s8q_nhwc_avg_generic_depthfirst_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::pooling::sme_s8q_nhwc_avg_generic_depthfirst_impl </td>
          <td>(</td>
          <td class="paramtype">const uint64_t&#160;</td>
          <td class="paramname"><em>window_cells</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint64_t&#160;</td>
          <td class="paramname"><em>n_valid_cells</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname"><em>n_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int8_t *const *const&#160;</td>
          <td class="paramname"><em>inptrs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int8_t *&#160;</td>
          <td class="paramname"><em>outptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Requantize32 &amp;&#160;</td>
          <td class="paramname"><em>qp</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="sme__s8q__nhwc__avg__generic__depthfirst_8hpp_source.xhtml#l00038">sme_s8q_nhwc_avg_generic_depthfirst::get_kernel()</a>.</p>

</div>
</div>
<a id="af8095adb672c08700b57080ef4a9c2bc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af8095adb672c08700b57080ef4a9c2bc">&#9670;&nbsp;</a></span>sme_s8q_nhwc_max_generic_depthfirst_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::pooling::sme_s8q_nhwc_max_generic_depthfirst_impl </td>
          <td>(</td>
          <td class="paramtype">const uint64_t&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint64_t&#160;</td>
          <td class="paramname"><em>n_valid_cells</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname"><em>n_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int8_t *const *const&#160;</td>
          <td class="paramname"><em>inptrs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int8_t *&#160;</td>
          <td class="paramname"><em>outptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Requantize32 &amp;&#160;</td>
          <td class="paramname"><em>qp</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="sme__s8q__nhwc__max__generic__depthfirst_8hpp_source.xhtml#l00038">sme_s8q_nhwc_max_generic_depthfirst::get_kernel()</a>.</p>

</div>
</div>
<a id="a6e514d19895c32764d7d0848a599667d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6e514d19895c32764d7d0848a599667d">&#9670;&nbsp;</a></span>sme_u8_nhwc_avg_generic_depthfirst_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::pooling::sme_u8_nhwc_avg_generic_depthfirst_impl </td>
          <td>(</td>
          <td class="paramtype">const uint64_t&#160;</td>
          <td class="paramname"><em>window_cells</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint64_t&#160;</td>
          <td class="paramname"><em>n_valid_cells</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname"><em>n_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *const *const&#160;</td>
          <td class="paramname"><em>inptrs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>outptr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="sme__u8__nhwc__avg__generic__depthfirst_8hpp_source.xhtml#l00038">sme_u8_nhwc_avg_generic_depthfirst::get_kernel()</a>.</p>

</div>
</div>
<a id="a2f8aebbcf2ec2bfc5d6a4d415800c60d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2f8aebbcf2ec2bfc5d6a4d415800c60d">&#9670;&nbsp;</a></span>sme_u8_nhwc_max_2x2_s1_output2x2_depthfirst_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::pooling::sme_u8_nhwc_max_2x2_s1_output2x2_depthfirst_impl </td>
          <td>(</td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *const *&#160;</td>
          <td class="paramname"><em>const</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *const *&#160;</td>
          <td class="paramname"><em>const</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="sme__u8__nhwc__max__2x2__s1__output2x2__depthfirst_8hpp_source.xhtml#l00043">sme_u8_nhwc_max_2x2_s1_output2x2_depthfirst::get_kernel()</a>.</p>

</div>
</div>
<a id="ab95b88e8c4c8a1631954c4f50c8fb35d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab95b88e8c4c8a1631954c4f50c8fb35d">&#9670;&nbsp;</a></span>sme_u8_nhwc_max_generic_depthfirst_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::pooling::sme_u8_nhwc_max_generic_depthfirst_impl </td>
          <td>(</td>
          <td class="paramtype">const uint64_t&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint64_t&#160;</td>
          <td class="paramname"><em>n_valid_cells</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname"><em>n_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *const *const&#160;</td>
          <td class="paramname"><em>inptrs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>outptr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="sme__u8__nhwc__max__generic__depthfirst_8hpp_source.xhtml#l00038">sme_u8_nhwc_max_generic_depthfirst::get_kernel()</a>.</p>

</div>
</div>
<a id="a8f56671b8ee1181c7d26100901a53835"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8f56671b8ee1181c7d26100901a53835">&#9670;&nbsp;</a></span>sme_u8q_nhwc_avg_generic_depthfirst_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::pooling::sme_u8q_nhwc_avg_generic_depthfirst_impl </td>
          <td>(</td>
          <td class="paramtype">const uint64_t&#160;</td>
          <td class="paramname"><em>window_cells</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint64_t&#160;</td>
          <td class="paramname"><em>n_valid_cells</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname"><em>n_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *const *const&#160;</td>
          <td class="paramname"><em>inptrs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>outptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Requantize32 &amp;&#160;</td>
          <td class="paramname"><em>qp</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="sme__u8q__nhwc__avg__generic__depthfirst_8hpp_source.xhtml#l00038">sme_u8q_nhwc_avg_generic_depthfirst::get_kernel()</a>.</p>

</div>
</div>
<a id="aa6b7adf5f52f531b64f49c9ea3c26c35"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa6b7adf5f52f531b64f49c9ea3c26c35">&#9670;&nbsp;</a></span>sme_u8q_nhwc_max_generic_depthfirst_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::pooling::sme_u8q_nhwc_max_generic_depthfirst_impl </td>
          <td>(</td>
          <td class="paramtype">const uint64_t&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint64_t&#160;</td>
          <td class="paramname"><em>n_valid_cells</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint64_t&#160;</td>
          <td class="paramname"><em>n_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *const *const&#160;</td>
          <td class="paramname"><em>inptrs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>outptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Requantize32 &amp;&#160;</td>
          <td class="paramname"><em>qp</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="sme__u8q__nhwc__max__generic__depthfirst_8hpp_source.xhtml#l00038">sme_u8q_nhwc_max_generic_depthfirst::get_kernel()</a>.</p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__conv.xhtml">arm_conv</a></li><li class="navelem"><a class="el" href="namespacearm__conv_1_1pooling.xhtml">pooling</a></li>
    <li class="footer">Generated on Thu Feb 16 2023 15:45:59 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
