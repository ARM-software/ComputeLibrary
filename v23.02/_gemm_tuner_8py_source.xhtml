<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: examples/gemm_tuner/GemmTuner.py Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_gemm_tuner_8py_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">GemmTuner.py</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_gemm_tuner_8py.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno"><a class="line" href="namespace_gemm_tuner.xhtml">    1</a></span>&#160;<span class="comment"># Copyright (c) 2019-2020 Arm Limited.</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">#</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"># SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">#</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"># Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"># of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"># deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"># rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"># sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"># furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">#</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"># The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"># copies or substantial portions of the Software.</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">#</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"># THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"># IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"># FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"># AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"># LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"># OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"># SOFTWARE.</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">#!/usr/bin/python3</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="keyword">import</span> argparse</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keyword">import</span> csv</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="keyword">import</span> json</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keyword">import</span> logging</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="keyword">import</span> math</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keyword">import</span> os</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">from</span> collections <span class="keyword">import</span> Counter, defaultdict, deque, namedtuple</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">from</span> enum <span class="keyword">import</span> Enum</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">from</span> typing <span class="keyword">import</span> Deque, Dict, Generator, List, NamedTuple, Set, Tuple, Union</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment">################################################################################</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment"># Types</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">################################################################################</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment"># Gemm strategy</span></div><div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="namespace_gemm_tuner.xhtml#acf7192c608527efb8f8dedf0a3f2e706">   41</a></span>&#160;Strategy = Enum(<span class="stringliteral">&quot;Strategy&quot;</span>, [<span class="stringliteral">&quot;Native&quot;</span>, <span class="stringliteral">&quot;ReshapedOnlyRHS&quot;</span>, <span class="stringliteral">&quot;Reshaped&quot;</span>])</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment"># Gemm parameter</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno"><a class="line" href="class_gemm_tuner_1_1_g_e_m_m_param.xhtml">   46</a></span>&#160;<span class="keyword">class </span><a class="code" href="class_gemm_tuner_1_1_g_e_m_m_param.xhtml">GEMMParam</a>(NamedTuple):</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    M: int  <span class="comment"># Number of lhs matrix rows</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    N: int  <span class="comment"># Number of rhs matrix columns</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    K: int  <span class="comment"># Number of lhs matrix columns/rhs matrix rows</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    B: int  <span class="comment"># Batch size</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    data_type: str  <span class="comment"># Data type</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    @classmethod</div><div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="class_gemm_tuner_1_1_g_e_m_m_param.xhtml#af4aae23ad8b2c9e870c4fa7083d70b19">   54</a></span>&#160;    <span class="keyword">def </span><a class="code" href="class_gemm_tuner_1_1_g_e_m_m_param.xhtml#af4aae23ad8b2c9e870c4fa7083d70b19">parse_from_strs</a>(cls, *M_N_K_B, data_type):</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <span class="keywordflow">return</span> cls(*<a class="code" href="namespacearm__compute_1_1utils.xhtml#a9c3303817ba653b5d1e78efb88d02bcf">map</a>(int, M_N_K_B), <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>(data_type))</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno"><a class="line" href="class_gemm_tuner_1_1_g_e_m_m_param.xhtml#a23e8041ce1015febe4fdace3225714f9">   57</a></span>&#160;    <span class="keyword">def </span><a class="code" href="class_gemm_tuner_1_1_g_e_m_m_param.xhtml#a23e8041ce1015febe4fdace3225714f9">__str__</a>(self):</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        <span class="keywordflow">return</span> <span class="stringliteral">&quot;,&quot;</span>.<a class="code" href="namespacearm__compute_1_1test.xhtml#aa18932675cbb5eb9c9dbf8ff4d7106c7">join</a>(<a class="code" href="namespacearm__compute_1_1utils.xhtml#a9c3303817ba653b5d1e78efb88d02bcf">map</a>(str, self))</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment"># Gemm configuration for strategy Native</span></div><div class="line"><a name="l00062"></a><span class="lineno"><a class="line" href="class_gemm_tuner_1_1_native_g_e_m_m_config.xhtml">   62</a></span>&#160;<span class="keyword">class </span><a class="code" href="class_gemm_tuner_1_1_native_g_e_m_m_config.xhtml">NativeGEMMConfig</a>(NamedTuple):</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    m0: int  <span class="comment"># Number of rows processed by the matrix multiplication</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    n0: int  <span class="comment"># Number of columns processed by the matrix multiplication</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    k0: int  <span class="comment"># Number of partial accumulations performed by the matrix multiplication</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    @classmethod</div><div class="line"><a name="l00068"></a><span class="lineno"><a class="line" href="class_gemm_tuner_1_1_native_g_e_m_m_config.xhtml#a11177ae1fd35e2a24cc8eeaab41f2c68">   68</a></span>&#160;    <span class="keyword">def </span><a class="code" href="class_gemm_tuner_1_1_native_g_e_m_m_config.xhtml#a11177ae1fd35e2a24cc8eeaab41f2c68">parse_from_strs</a>(cls, *args):</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        (*mnk,) = <a class="code" href="namespacearm__compute_1_1utils.xhtml#a9c3303817ba653b5d1e78efb88d02bcf">map</a>(int, args)</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="keywordflow">return</span> cls(*mnk)</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno"><a class="line" href="class_gemm_tuner_1_1_native_g_e_m_m_config.xhtml#a23e8041ce1015febe4fdace3225714f9">   72</a></span>&#160;    <span class="keyword">def </span><a class="code" href="class_gemm_tuner_1_1_native_g_e_m_m_config.xhtml#a23e8041ce1015febe4fdace3225714f9">__str__</a>(self):</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="keywordflow">return</span> <span class="stringliteral">&quot;,&quot;</span>.<a class="code" href="namespacearm__compute_1_1test.xhtml#aa18932675cbb5eb9c9dbf8ff4d7106c7">join</a>(<a class="code" href="namespacearm__compute_1_1utils.xhtml#a9c3303817ba653b5d1e78efb88d02bcf">map</a>(str, self))</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment"># Gemm configuration for strategy Reshaped Only RHS</span></div><div class="line"><a name="l00077"></a><span class="lineno"><a class="line" href="class_gemm_tuner_1_1_reshaped_only_r_h_s_g_e_m_m_config.xhtml">   77</a></span>&#160;<span class="keyword">class </span><a class="code" href="class_gemm_tuner_1_1_reshaped_only_r_h_s_g_e_m_m_config.xhtml">ReshapedOnlyRHSGEMMConfig</a>(NamedTuple):</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    m0: int  <span class="comment"># Number of rows processed by the matrix multiplication</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    n0: int  <span class="comment"># Number of columns processed by the matrix multiplication</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    k0: int  <span class="comment"># Number of partial accumulations performed by the matrix multiplication</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="comment"># Number of horizontal blocks of size (k0xn0) stored on the same output row</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    h0: int</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="comment"># Interleave rhs matrix (1) / Do not interleave rhs matrix (0)</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    interleave_rhs: bool</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="comment"># Transpose rhs matrix but not lhs matrix (1) / Do not transpose rhs matrix but do transpose lhs matrix (0)</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    transpose_rhs: bool</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="comment"># Export rhs matrix to cl_image (1) / Do not export rhs matrix to cl_image (0)</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    export_to_cl_image_rhs: bool</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    @classmethod</div><div class="line"><a name="l00091"></a><span class="lineno"><a class="line" href="class_gemm_tuner_1_1_reshaped_only_r_h_s_g_e_m_m_config.xhtml#a11177ae1fd35e2a24cc8eeaab41f2c68">   91</a></span>&#160;    <span class="keyword">def </span><a class="code" href="class_gemm_tuner_1_1_reshaped_only_r_h_s_g_e_m_m_config.xhtml#a11177ae1fd35e2a24cc8eeaab41f2c68">parse_from_strs</a>(cls, *args):</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        (*mnkh, interleave_rhs, transpose_rhs, export_to_cl_image_rhs,) = <a class="code" href="namespacearm__compute_1_1utils.xhtml#a9c3303817ba653b5d1e78efb88d02bcf">map</a>(int, args)</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        interleave_rhs = interleave_rhs == 1</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        transpose_rhs = transpose_rhs == 1</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        export_to_cl_image_rhs = export_to_cl_image_rhs == 1</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <span class="keywordflow">return</span> cls(*mnkh, interleave_rhs, transpose_rhs, export_to_cl_image_rhs)</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno"><a class="line" href="class_gemm_tuner_1_1_reshaped_only_r_h_s_g_e_m_m_config.xhtml#a23e8041ce1015febe4fdace3225714f9">   98</a></span>&#160;    <span class="keyword">def </span><a class="code" href="class_gemm_tuner_1_1_reshaped_only_r_h_s_g_e_m_m_config.xhtml#a23e8041ce1015febe4fdace3225714f9">__str__</a>(self):</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        <span class="keywordflow">return</span> <span class="stringliteral">&quot;,&quot;</span>.<a class="code" href="namespacearm__compute_1_1test.xhtml#aa18932675cbb5eb9c9dbf8ff4d7106c7">join</a>(<a class="code" href="namespacearm__compute_1_1utils.xhtml#a9c3303817ba653b5d1e78efb88d02bcf">map</a>(str, self))</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment"># Gemm configuration for strategy Reshaped</span></div><div class="line"><a name="l00103"></a><span class="lineno"><a class="line" href="class_gemm_tuner_1_1_reshaped_g_e_m_m_config.xhtml">  103</a></span>&#160;<span class="keyword">class </span><a class="code" href="class_gemm_tuner_1_1_reshaped_g_e_m_m_config.xhtml">ReshapedGEMMConfig</a>(NamedTuple):</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    m0: int  <span class="comment"># Number of rows processed by the matrix multiplication</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    n0: int  <span class="comment"># Number of columns processed by the matrix multiplication</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    k0: int  <span class="comment"># Number of partial accumulations performed by the matrix multiplication</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="comment"># Number of vertical blocks of size (m0xk0) stored on the same output row</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    v0: int</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="comment"># Number of horizontal blocks of size (k0xn0) stored on the same output row</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    h0: int</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="comment"># Interleave lhs matrix (1) / Do not interleave lhs matrix (0)</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    interleave_lhs: bool</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="comment"># Interleave rhs matrix (1) / Do not interleave rhs matrix (0)</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    interleave_rhs: bool</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="comment"># Transpose rhs matrix but not lhs matrix (1) / Do not transpose rhs matrix but do transpose lhs matrix (0)</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    transpose_rhs: bool</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="comment"># Export rhs matrix to cl_image (1) / Do not export rhs matrix to cl_image (0)</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    export_to_cl_image_rhs: bool</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    @classmethod</div><div class="line"><a name="l00121"></a><span class="lineno"><a class="line" href="class_gemm_tuner_1_1_reshaped_g_e_m_m_config.xhtml#a11177ae1fd35e2a24cc8eeaab41f2c68">  121</a></span>&#160;    <span class="keyword">def </span><a class="code" href="class_gemm_tuner_1_1_reshaped_g_e_m_m_config.xhtml#a11177ae1fd35e2a24cc8eeaab41f2c68">parse_from_strs</a>(cls, *args):</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        (*mnkvh, interleave_lhs, interleave_rhs, transpose_rhs, export_to_cl_image_rhs,) = <a class="code" href="namespacearm__compute_1_1utils.xhtml#a9c3303817ba653b5d1e78efb88d02bcf">map</a>(int, args)</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        interleave_lhs = interleave_lhs == 1</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        interleave_rhs = interleave_rhs == 1</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        transpose_rhs = transpose_rhs == 1</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        export_to_cl_image_rhs = export_to_cl_image_rhs == 1</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        <span class="keywordflow">return</span> cls(*mnkvh, interleave_lhs, interleave_rhs, transpose_rhs, export_to_cl_image_rhs)</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno"><a class="line" href="class_gemm_tuner_1_1_reshaped_g_e_m_m_config.xhtml#a23e8041ce1015febe4fdace3225714f9">  129</a></span>&#160;    <span class="keyword">def </span><a class="code" href="class_gemm_tuner_1_1_reshaped_g_e_m_m_config.xhtml#a23e8041ce1015febe4fdace3225714f9">__str__</a>(self):</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        <span class="keywordflow">return</span> <span class="stringliteral">&quot;,&quot;</span>.<a class="code" href="namespacearm__compute_1_1test.xhtml#aa18932675cbb5eb9c9dbf8ff4d7106c7">join</a>(<a class="code" href="namespacearm__compute_1_1utils.xhtml#a9c3303817ba653b5d1e78efb88d02bcf">map</a>(str, self))</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment"># Measurement we take from the benchmark result.</span></div><div class="line"><a name="l00134"></a><span class="lineno"><a class="line" href="class_gemm_tuner_1_1_measurement.xhtml">  134</a></span>&#160;<span class="keyword">class </span><a class="code" href="class_gemm_tuner_1_1_measurement.xhtml">Measurement</a>(NamedTuple):</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    opencl_timer_ms_reshape: float</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    opencl_timer_ms_kernel: float</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno"><a class="line" href="class_gemm_tuner_1_1_measurement.xhtml#a788bb7b352dd906758009ffd3d838f57">  138</a></span>&#160;    <span class="keyword">def </span><a class="code" href="class_gemm_tuner_1_1_measurement.xhtml#a788bb7b352dd906758009ffd3d838f57">get_total_ms</a>(self):</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="keywordflow">return</span> self.opencl_timer_ms_reshape + self.opencl_timer_ms_kernel</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno"><a class="line" href="class_gemm_tuner_1_1_measurement.xhtml#afb997abfddc10d3bf54412297c00471c">  141</a></span>&#160;    <span class="keyword">def </span><a class="code" href="class_gemm_tuner_1_1_measurement.xhtml#afb997abfddc10d3bf54412297c00471c">is_close_to</a>(self, other, tol):</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        <span class="keywordflow">return</span> math.fabs(self.<a class="code" href="class_gemm_tuner_1_1_measurement.xhtml#a788bb7b352dd906758009ffd3d838f57">get_total_ms</a>() - other.get_total_ms()) &lt; tol</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno"><a class="line" href="class_gemm_tuner_1_1_measurement.xhtml#a3e423795fdaa270fe18bccfba052f789">  144</a></span>&#160;    <span class="keyword">def </span><a class="code" href="class_gemm_tuner_1_1_measurement.xhtml#a3e423795fdaa270fe18bccfba052f789">is_better_than</a>(self, other, tol):</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        <span class="keywordflow">return</span> self.<a class="code" href="class_gemm_tuner_1_1_measurement.xhtml#a788bb7b352dd906758009ffd3d838f57">get_total_ms</a>() &lt; other.get_total_ms() <span class="keywordflow">and</span> <span class="keywordflow">not</span> self.<a class="code" href="class_gemm_tuner_1_1_measurement.xhtml#afb997abfddc10d3bf54412297c00471c">is_close_to</a>(</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            other</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        )</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno"><a class="line" href="class_gemm_tuner_1_1_measurement.xhtml#a547cf97e438ebc6734fd6d1ea2b21b6d">  149</a></span>&#160;    <span class="keyword">def </span><a class="code" href="class_gemm_tuner_1_1_measurement.xhtml#a547cf97e438ebc6734fd6d1ea2b21b6d">__add__</a>(self, other):</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="class_gemm_tuner_1_1_measurement.xhtml">Measurement</a>(</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            self.opencl_timer_ms_reshape + other.opencl_timer_ms_reshape,</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            self.opencl_timer_ms_kernel + other.opencl_timer_ms_kernel,</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        )</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno"><a class="line" href="class_gemm_tuner_1_1_measurement.xhtml#ae03b88268c88fb1edfdb3f5353478d7b">  155</a></span>&#160;    <span class="keyword">def </span><a class="code" href="class_gemm_tuner_1_1_measurement.xhtml#ae03b88268c88fb1edfdb3f5353478d7b">__sub__</a>(self, other):</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="class_gemm_tuner_1_1_measurement.xhtml">Measurement</a>(</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            self.opencl_timer_ms_reshape - other.opencl_timer_ms_reshape,</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            self.opencl_timer_ms_kernel - other.opencl_timer_ms_kernel,</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        )</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;</div><div class="line"><a name="l00161"></a><span class="lineno"><a class="line" href="class_gemm_tuner_1_1_measurement.xhtml#a96fd98a8997501189d60829abc0257cb">  161</a></span>&#160;    <span class="keyword">def </span><a class="code" href="class_gemm_tuner_1_1_measurement.xhtml#a96fd98a8997501189d60829abc0257cb">__mul__</a>(self, other):</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="class_gemm_tuner_1_1_measurement.xhtml">Measurement</a>(</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            self.opencl_timer_ms_reshape * other.opencl_timer_ms_reshape,</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            self.opencl_timer_ms_kernel * other.opencl_timer_ms_kernel,</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        )</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno"><a class="line" href="class_gemm_tuner_1_1_measurement.xhtml#a5855279dfdcb183a472784ad7afeed88">  167</a></span>&#160;    <span class="keyword">def </span><a class="code" href="class_gemm_tuner_1_1_measurement.xhtml#a5855279dfdcb183a472784ad7afeed88">__floordiv__</a>(self, other):</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="class_gemm_tuner_1_1_measurement.xhtml">Measurement</a>(</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            self.opencl_timer_ms_reshape // other.opencl_timer_ms_reshape,</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            self.opencl_timer_ms_kernel // other.opencl_timer_ms_kernel,</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        )</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno"><a class="line" href="class_gemm_tuner_1_1_measurement.xhtml#ad6e2319d03d3d5e39f9808eda9eecabf">  173</a></span>&#160;    <span class="keyword">def </span><a class="code" href="class_gemm_tuner_1_1_measurement.xhtml#ad6e2319d03d3d5e39f9808eda9eecabf">__truediv__</a>(self, other):</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="class_gemm_tuner_1_1_measurement.xhtml">Measurement</a>(</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            self.opencl_timer_ms_reshape / other.opencl_timer_ms_reshape,</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            self.opencl_timer_ms_kernel / other.opencl_timer_ms_kernel,</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        )</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno"><a class="line" href="class_gemm_tuner_1_1_measurement.xhtml#a480eef30c37e527051d12029c15c70d3">  179</a></span>&#160;    <span class="keyword">def </span><a class="code" href="class_gemm_tuner_1_1_measurement.xhtml#a480eef30c37e527051d12029c15c70d3">__pow__</a>(self, power):</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="class_gemm_tuner_1_1_measurement.xhtml">Measurement</a>(</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            self.opencl_timer_ms_reshape ** power, self.opencl_timer_ms_kernel ** power</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        )</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div><div class="line"><a name="l00184"></a><span class="lineno"><a class="line" href="class_gemm_tuner_1_1_measurement.xhtml#a23e8041ce1015febe4fdace3225714f9">  184</a></span>&#160;    <span class="keyword">def </span><a class="code" href="class_gemm_tuner_1_1_measurement.xhtml#a23e8041ce1015febe4fdace3225714f9">__str__</a>(self):</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        <span class="keywordflow">return</span> <span class="stringliteral">&quot;,&quot;</span>.<a class="code" href="namespacearm__compute_1_1test.xhtml#aa18932675cbb5eb9c9dbf8ff4d7106c7">join</a>(<a class="code" href="namespacearm__compute_1_1utils.xhtml#a9c3303817ba653b5d1e78efb88d02bcf">map</a>(str, self))</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment"># GEMMConfig Type</span></div><div class="line"><a name="l00189"></a><span class="lineno"><a class="line" href="namespace_gemm_tuner.xhtml#a696b6940cef01d03e1fc064d8be3727b">  189</a></span>&#160;GEMMConfigT = Union[NativeGEMMConfig,</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                    ReshapedOnlyRHSGEMMConfig, ReshapedGEMMConfig]</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment"># Representation of the benchmark result from a single experiment</span></div><div class="line"><a name="l00194"></a><span class="lineno"><a class="line" href="class_gemm_tuner_1_1_benchmark_result.xhtml">  194</a></span>&#160;<span class="keyword">class </span><a class="code" href="class_gemm_tuner_1_1_benchmark_result.xhtml">BenchmarkResult</a>(NamedTuple):</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    gemm_param: GEMMParam</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    strategy: Strategy</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    gemm_config: GEMMConfigT</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    measurement: Measurement</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno"><a class="line" href="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder.xhtml">  201</a></span>&#160;<span class="keyword">class </span><a class="code" href="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder.xhtml">GEMMBenchmarkResultRecorder</a>:</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="stringliteral">&quot;&quot;&quot; A recorder that records and organises GEMM Benchmark results, and produces various reports on the record.</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="stringliteral">    &quot;&quot;&quot;</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div><div class="line"><a name="l00205"></a><span class="lineno"><a class="line" href="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder.xhtml#a1d13ba4c90b1f13f78abc54d6c18bde4">  205</a></span>&#160;    SummaryLevel = Enum(<span class="stringliteral">&quot;SummaryLevel&quot;</span>, [<span class="stringliteral">&quot;Short&quot;</span>, <span class="stringliteral">&quot;Detailed&quot;</span>])</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno"><a class="line" href="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder.xhtml#ae625b46930454abeb72e1526955462b6">  207</a></span>&#160;    <span class="keyword">def </span><a class="code" href="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder.xhtml#ae625b46930454abeb72e1526955462b6">__init__</a>(self, tol=0.01):</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        <span class="stringliteral">&quot;&quot;&quot; Initializer</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        self._benchmark_result_record: List[BenchmarkResult] = []</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        <span class="comment"># Strategies recorded</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        self.<a class="code" href="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder.xhtml#ada6a9c2772e9a7c52e7674d4b73e5684">_strategies</a> = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1ec8dd7ea96aec0e4068497f0b5e17b2">set</a>()</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        self.<a class="code" href="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder.xhtml#a954df8e12fad5db41f9960775e74ad34">_tol</a> = tol</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div><div class="line"><a name="l00215"></a><span class="lineno"><a class="line" href="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder.xhtml#a66aa7c8063db6217a0a0061f8b7ba206">  215</a></span>&#160;    <span class="keyword">def </span><a class="code" href="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder.xhtml#a66aa7c8063db6217a0a0061f8b7ba206">add</a>(self, benchmark_result: BenchmarkResult):</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        <span class="stringliteral">&quot;&quot;&quot; Add a benchmark result to the record.</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        gemm_param, strategy, gemm_config, measurement = benchmark_result</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        <span class="comment"># Update strategies encoutnered</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        self.<a class="code" href="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder.xhtml#ada6a9c2772e9a7c52e7674d4b73e5684">_strategies</a>.<a class="code" href="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder.xhtml#a66aa7c8063db6217a0a0061f8b7ba206">add</a>(strategy)</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        self._benchmark_result_record.append(benchmark_result)</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div><div class="line"><a name="l00224"></a><span class="lineno"><a class="line" href="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder.xhtml#ad8d3abe352c45d2b9613442e899a55db">  224</a></span>&#160;    <span class="keyword">def </span><a class="code" href="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder.xhtml#ad8d3abe352c45d2b9613442e899a55db">get_record</a>(self) -&gt; Generator[BenchmarkResult, None, None]:</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        <span class="stringliteral">&quot;&quot;&quot; Return an iterator that iterates over the record.</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        <span class="keywordflow">yield</span> <span class="keyword">from</span> self._benchmark_result_record</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div><div class="line"><a name="l00229"></a><span class="lineno"><a class="line" href="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder.xhtml#a84ff0c9fbd56a0f9308d138de4f99354">  229</a></span>&#160;    <span class="keyword">def </span><a class="code" href="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder.xhtml#a84ff0c9fbd56a0f9308d138de4f99354">get_best_gemm_configs</a>(self):</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        <span class="stringliteral">&quot;&quot;&quot; Get the best GEMMConfig set per GEMMParam per Strategy</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        best_gc_sets: Dict[</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;            Tuple[GEMMParam, Strategy], List[Tuple[GEMMConfig, Measurement]]</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        ] = defaultdict(list)</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        <span class="keywordflow">for</span> gemm_param, strategy, gemm_config, measurement <span class="keywordflow">in</span> self.<a class="code" href="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder.xhtml#ad8d3abe352c45d2b9613442e899a55db">get_record</a>():</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;            best_gc_set = best_gc_sets.setdefault((gemm_param, strategy), [])</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;            best_gc_set.append((gemm_config, measurement))</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;            <span class="comment"># Sort the best config set (list)</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;            best_gc_set = sorted(</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                best_gc_set, key=<span class="keyword">lambda</span> gc_and_m: gc_and_m[1].get_total_ms()</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;            )</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;            <span class="comment"># Filter out configs that are beyond tolerance to the best GEMMConfig&#39;s measurement</span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;            best_gc, best_m = best_gc_set[0]</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;            best_gc_set_new = [</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                (gemm_config, measurement)</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                <span class="keywordflow">for</span> gemm_config, measurement <span class="keywordflow">in</span> best_gc_set[1:]</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                <span class="keywordflow">if</span> measurement.is_close_to(best_m, self.<a class="code" href="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder.xhtml#a954df8e12fad5db41f9960775e74ad34">_tol</a>)</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;            ]</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;            <span class="comment"># Add back the best config</span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;            best_gc_set_new.insert(0, (best_gc, best_m))</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;            best_gc_sets[(gemm_param, strategy)] = best_gc_set_new</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        <span class="keywordflow">return</span> best_gc_sets</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;</div><div class="line"><a name="l00255"></a><span class="lineno"><a class="line" href="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder.xhtml#a8c938fde12c1d2d34553c608c776ba77">  255</a></span>&#160;    <span class="keyword">def </span><a class="code" href="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder.xhtml#a8c938fde12c1d2d34553c608c776ba77">get_best_gemm_configs_as_sequence</a>(self):</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        <span class="stringliteral">&quot;&quot;&quot; Get the best GEMMConfig set per GEMMParam per Strategy, and flatten the result into a sequence</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="stringliteral">        of BenchmarkResults</span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        <span class="keywordflow">for</span> (</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;            (gemm_param, strategy),</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;            best_gc_sets,</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        ) <span class="keywordflow">in</span> self.<a class="code" href="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder.xhtml#a84ff0c9fbd56a0f9308d138de4f99354">get_best_gemm_configs</a>().items():</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;            <span class="keywordflow">for</span> best_gemm_config, best_measurement <span class="keywordflow">in</span> best_gc_sets:</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                <span class="keywordflow">yield</span> <a class="code" href="class_gemm_tuner_1_1_benchmark_result.xhtml">BenchmarkResult</a>(</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                    gemm_param, strategy, best_gemm_config, best_measurement</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                )</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;</div><div class="line"><a name="l00268"></a><span class="lineno"><a class="line" href="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder.xhtml#a0ea49ac2ac7d7a33761dc5905cab3711">  268</a></span>&#160;    <span class="keyword">def </span><a class="code" href="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder.xhtml#a0ea49ac2ac7d7a33761dc5905cab3711">get_config_distributions</a>(self):</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        <span class="stringliteral">&quot;&quot;&quot; Return GEMMConfigDistribution for each strategy</span></div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        gemm_config_distributions: Dict[Strategy, GEMMConfigDistribution] = defaultdict(</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;            GEMMConfigDistribution</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        )</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        <span class="keywordflow">for</span> benchmark_result <span class="keywordflow">in</span> self.<a class="code" href="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder.xhtml#a8c938fde12c1d2d34553c608c776ba77">get_best_gemm_configs_as_sequence</a>():</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;            _, strategy, _, _ = benchmark_result</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;            gemm_config_distributions[strategy].<a class="code" href="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder.xhtml#a66aa7c8063db6217a0a0061f8b7ba206">add</a>(benchmark_result)</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        <span class="keywordflow">return</span> gemm_config_distributions</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;</div><div class="line"><a name="l00280"></a><span class="lineno"><a class="line" href="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder.xhtml#a65177c090b4c592e4260ce9f5b2963bd">  280</a></span>&#160;    <span class="keyword">def </span><a class="code" href="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder.xhtml#a65177c090b4c592e4260ce9f5b2963bd">get_best_gemm_strategies</a>(self):</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        <span class="stringliteral">&quot;&quot;&quot; Get the best Stratey per GEMMParam</span></div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        all_results: Dict[GEMMParam, List[Tuple[Strategy, Measurement]]] = defaultdict(</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;            list</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        )</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        best_strategies: Dict[GEMMParam, Strategy] = {}</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;        <span class="keywordflow">for</span> gemm_param, strategy, gemm_config, measurement <span class="keywordflow">in</span> self.<a class="code" href="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder.xhtml#ad8d3abe352c45d2b9613442e899a55db">get_record</a>():</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;            all_results[gemm_param].append((strategy, measurement))</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;        <span class="keywordflow">for</span> gemm_param, results_set <span class="keywordflow">in</span> all_results.items():</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;            <span class="comment"># Sort the best results set (list)</span></div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;            results_set = sorted(</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                results_set, key=<span class="keyword">lambda</span> s_and_m: s_and_m[1].get_total_ms()</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;            )</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;            <span class="comment"># Select best Strategy</span></div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;            best_s, best_m = results_set[0]</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;            best_strategies[gemm_param] = best_s</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        <span class="keywordflow">return</span> best_strategies</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;</div><div class="line"><a name="l00303"></a><span class="lineno"><a class="line" href="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder.xhtml#a31ba40892c26b3f1734705e4f865c0f1">  303</a></span>&#160;    <span class="keyword">def </span><a class="code" href="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder.xhtml#a31ba40892c26b3f1734705e4f865c0f1">save_to_jsons</a>(self, out_dir, only_best_config=True):</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        <span class="stringliteral">&quot;&quot;&quot; Save records to an output directory of JSON files.</span></div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="stringliteral">        The directory is organized such that each strategy gets its own JSON file.</span></div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<span class="stringliteral">        The directory also includes a JSON file to define the best strategy per GEMM Param.</span></div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> os.path.exists(out_dir):</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;            logging.info(</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                <span class="stringliteral">&quot;Output directory {} does not exist. Creating...&quot;</span>.format(</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                    out_dir)</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;            )</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;            os.mkdir(out_dir)</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        out_json_path = os.path.join(out_dir, <span class="stringliteral">&quot;gemm_type_selection.json&quot;</span>)</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        <span class="keywordflow">if</span> <a class="code" href="namespace_gemm_tuner.xhtml#a118d1a9756d5cb110204180506ed8c99">check_out_path</a>(out_json_path):</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;            results = self.<a class="code" href="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder.xhtml#a65177c090b4c592e4260ce9f5b2963bd">get_best_gemm_strategies</a>()</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;            results = {<a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>(key): value.name <span class="keywordflow">for</span> key, value <span class="keywordflow">in</span> results.items()}</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;            <a class="code" href="namespace_gemm_tuner.xhtml#a70ce377ea8b5202ced8079196c6841ed">dump_json</a>(out_json_path, results)</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        <span class="keywordflow">for</span> strategy <span class="keywordflow">in</span> self.<a class="code" href="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder.xhtml#ada6a9c2772e9a7c52e7674d4b73e5684">_strategies</a>:</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;            out_json_path = os.path.join(</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;                out_dir, (<span class="stringliteral">&quot;gemm_config_&quot;</span> + strategy.name.lower() + <span class="stringliteral">&quot;.json&quot;</span>)</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;            )</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;            <span class="keywordflow">if</span> <a class="code" href="namespace_gemm_tuner.xhtml#a118d1a9756d5cb110204180506ed8c99">check_out_path</a>(out_json_path):</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;                record = (</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                    self.<a class="code" href="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder.xhtml#a8c938fde12c1d2d34553c608c776ba77">get_best_gemm_configs_as_sequence</a>()</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;                    <span class="keywordflow">if</span> only_best_config</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;                    <span class="keywordflow">else</span> self.<a class="code" href="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder.xhtml#ad8d3abe352c45d2b9613442e899a55db">get_record</a>()</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                )</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                results = defaultdict(list)</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                <span class="keywordflow">for</span> res <span class="keywordflow">in</span> record:</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                    <span class="keywordflow">if</span> res.strategy == strategy:</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                        results[<a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>(res.gemm_param)].append(</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;                            {</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                                <span class="stringliteral">&quot;GEMMConfig&quot;</span>: <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>(res.gemm_config),</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                                <span class="stringliteral">&quot;OpenCL_Timer_ms_reshape&quot;</span>: <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>(</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                                    res.measurement.opencl_timer_ms_reshape</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                                ),</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                                <span class="stringliteral">&quot;OpenCL_Timer_ms_kernel&quot;</span>: <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>(</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                                    res.measurement.opencl_timer_ms_kernel</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                                ),</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                            }</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                        )</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                <a class="code" href="namespace_gemm_tuner.xhtml#a70ce377ea8b5202ced8079196c6841ed">dump_json</a>(out_json_path, results)</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;</div><div class="line"><a name="l00347"></a><span class="lineno"><a class="line" href="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder.xhtml#adc0ecf20ebe230b07f49bed19a7fb0f5">  347</a></span>&#160;    <span class="keyword">def </span><a class="code" href="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder.xhtml#adc0ecf20ebe230b07f49bed19a7fb0f5">summary</a>(self, sum_level=SummaryLevel.Short):</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        <span class="stringliteral">&quot;&quot;&quot; Return the summary string of the record</span></div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        num_raw_records = sum(1 <span class="keywordflow">for</span> _ <span class="keywordflow">in</span> self.<a class="code" href="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder.xhtml#ad8d3abe352c45d2b9613442e899a55db">get_record</a>())</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        gemm_params_per_strategy = defaultdict(list)</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;        <span class="keywordflow">for</span> gemm_param, strategy <span class="keywordflow">in</span> self.<a class="code" href="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder.xhtml#a84ff0c9fbd56a0f9308d138de4f99354">get_best_gemm_configs</a>().keys():</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;            gemm_params_per_strategy[strategy].append(gemm_param)</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;        global_summary = f<span class="stringliteral">&quot;&quot;&quot;</span></div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="stringliteral">=== {self.__class__.__name__} Summary ===</span></div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;<span class="stringliteral">[Global]</span></div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;<span class="stringliteral">Strategies recorded: {&quot;, &quot;.join(map(lambda s: s.name, self._strategies))}</span></div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;<span class="stringliteral">Total number of results recorded: {num_raw_records}</span></div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;<span class="stringliteral">[Per strategy]</span></div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        strategy_summaries = []</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;        <span class="keywordflow">for</span> strategy <span class="keywordflow">in</span> gemm_params_per_strategy:</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;            summary = f<span class="stringliteral">&quot;&quot;&quot;</span></div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;<span class="stringliteral">Strategy {strategy.name}:</span></div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;<span class="stringliteral">GEMM parameters:</span></div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;<span class="stringliteral">    Number of: {len(gemm_params_per_strategy[strategy])}</span></div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;<span class="stringliteral">            &quot;&quot;&quot;</span></div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;            <span class="keywordflow">if</span> sum_level == self.__class__.SummaryLevel.Detailed:</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                summary += f<span class="stringliteral">&quot;&quot;&quot;</span></div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;<span class="stringliteral">    Content: {gemm_params_per_strategy[strategy]}</span></div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;<span class="stringliteral">                &quot;&quot;&quot;</span></div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;            strategy_summaries.append(summary)</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;        <span class="keywordflow">return</span> global_summary + <span class="stringliteral">&quot;&quot;</span>.<a class="code" href="namespacearm__compute_1_1test.xhtml#aa18932675cbb5eb9c9dbf8ff4d7106c7">join</a>(strategy_summaries)</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;</div><div class="line"><a name="l00377"></a><span class="lineno"><a class="line" href="class_gemm_tuner_1_1_g_e_m_m_config_distribution.xhtml">  377</a></span>&#160;<span class="keyword">class </span><a class="code" href="class_gemm_tuner_1_1_g_e_m_m_config_distribution.xhtml">GEMMConfigDistribution</a>:</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    <span class="stringliteral">&quot;&quot;&quot; A representation of the GEMM Configuration distribution produced by the GEMMBenchmarkResultRecorder.</span></div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;<span class="stringliteral">    &quot;&quot;&quot;</span></div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;</div><div class="line"><a name="l00381"></a><span class="lineno"><a class="line" href="class_gemm_tuner_1_1_g_e_m_m_config_distribution.xhtml#ae64f0875afe3067b97ba370b354b9213">  381</a></span>&#160;    <span class="keyword">def </span><a class="code" href="class_gemm_tuner_1_1_g_e_m_m_config_distribution.xhtml#ae64f0875afe3067b97ba370b354b9213">__init__</a>(self):</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;        <span class="stringliteral">&quot;&quot;&quot; Initializer</span></div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;        self._gemm_config_dist: Dict[</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;            GEMMConfig, List[Tuple[GEMMParam, Measurement]]</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;        ] = defaultdict(list)</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;        self.<a class="code" href="class_gemm_tuner_1_1_g_e_m_m_config_distribution.xhtml#a3cb4012dd6cf5644710bc17df6346f42">_gemm_config_freq</a> = Counter()</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;</div><div class="line"><a name="l00389"></a><span class="lineno"><a class="line" href="class_gemm_tuner_1_1_g_e_m_m_config_distribution.xhtml#a66aa7c8063db6217a0a0061f8b7ba206">  389</a></span>&#160;    <span class="keyword">def </span><a class="code" href="class_gemm_tuner_1_1_g_e_m_m_config_distribution.xhtml#a66aa7c8063db6217a0a0061f8b7ba206">add</a>(self, benchmark_result: BenchmarkResult):</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;        <span class="stringliteral">&quot;&quot;&quot; Add a benchmark result to the distribution</span></div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;        gemm_param, _, gemm_config, measurement = benchmark_result</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;        self._gemm_config_dist[gemm_config].append((gemm_param, measurement))</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;        self.<a class="code" href="class_gemm_tuner_1_1_g_e_m_m_config_distribution.xhtml#a3cb4012dd6cf5644710bc17df6346f42">_gemm_config_freq</a>[gemm_config] += 1</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;</div><div class="line"><a name="l00396"></a><span class="lineno"><a class="line" href="class_gemm_tuner_1_1_g_e_m_m_config_distribution.xhtml#a0bcb25e557abee63ef4a75e0d639fdb0">  396</a></span>&#160;    <span class="keyword">def </span><a class="code" href="class_gemm_tuner_1_1_g_e_m_m_config_distribution.xhtml#a0bcb25e557abee63ef4a75e0d639fdb0">distribution</a>(self):</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;        <span class="keywordflow">return</span> self._gemm_config_dist</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;</div><div class="line"><a name="l00399"></a><span class="lineno"><a class="line" href="class_gemm_tuner_1_1_g_e_m_m_config_distribution.xhtml#abc89734bc6dee426b61a6463ecba9dbc">  399</a></span>&#160;    <span class="keyword">def </span><a class="code" href="class_gemm_tuner_1_1_g_e_m_m_config_distribution.xhtml#abc89734bc6dee426b61a6463ecba9dbc">frequency</a>(self):</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;        <span class="stringliteral">&quot;&quot;&quot; Get the frequency of each (best) gemm config recorded</span></div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;        <span class="keywordflow">return</span> self.<a class="code" href="class_gemm_tuner_1_1_g_e_m_m_config_distribution.xhtml#a3cb4012dd6cf5644710bc17df6346f42">_gemm_config_freq</a>.most_common()</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;</div><div class="line"><a name="l00404"></a><span class="lineno"><a class="line" href="class_gemm_tuner_1_1_g_e_m_m_config_distribution.xhtml#a020784aee63b0ba66ddaa5b1f2d888cb">  404</a></span>&#160;    <span class="keyword">def </span><a class="code" href="class_gemm_tuner_1_1_g_e_m_m_config_distribution.xhtml#a020784aee63b0ba66ddaa5b1f2d888cb">best_config</a>(self):</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;        <span class="stringliteral">&quot;&quot;&quot; Get the overall best config, as voted by all benchmark results.</span></div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;        <span class="keywordflow">return</span> self.<a class="code" href="class_gemm_tuner_1_1_g_e_m_m_config_distribution.xhtml#a3cb4012dd6cf5644710bc17df6346f42">_gemm_config_freq</a>.most_common(1)</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;</div><div class="line"><a name="l00409"></a><span class="lineno"><a class="line" href="class_gemm_tuner_1_1_g_e_m_m_config_distribution.xhtml#ad7bd8ed6c31eef061780288c095728f0">  409</a></span>&#160;    <span class="keyword">def </span><a class="code" href="class_gemm_tuner_1_1_g_e_m_m_config_distribution.xhtml#ad7bd8ed6c31eef061780288c095728f0">std</a>(self):</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;        <span class="stringliteral">&quot;&quot;&quot; Get the standard deviation as a measure of dispersion of the distribution. We should aim for higher values</span></div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;<span class="stringliteral">        as they indicate there is high variation in the distribution. Thus the evidence of the best config is stronger.</span></div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        freqs = self.<a class="code" href="class_gemm_tuner_1_1_g_e_m_m_config_distribution.xhtml#a3cb4012dd6cf5644710bc17df6346f42">_gemm_config_freq</a>.values()</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;        <span class="keywordflow">if</span> len(freqs) == 0:</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;            <span class="keywordflow">return</span> 0</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;        mean_freq = sum(freqs) / len(freqs)</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;        <span class="keywordflow">return</span> math.sqrt(sum((freq - mean_freq) ** 2 <span class="keywordflow">for</span> freq <span class="keywordflow">in</span> freqs) / len(freqs))</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;<span class="comment">################################################################################</span></div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;<span class="comment"># Globals</span></div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;<span class="comment">################################################################################</span></div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;<span class="comment"># Gemm config type factory</span></div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;<span class="comment"># Produces a GEMMConfig type specific to a Strategy</span></div><div class="line"><a name="l00426"></a><span class="lineno"><a class="line" href="namespace_gemm_tuner.xhtml#a3c0f164b66e196f940f4b9e206d586d5">  426</a></span>&#160;GEMM_CONFIG_FACTORY = {</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    Strategy.Native: NativeGEMMConfig,</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    Strategy.ReshapedOnlyRHS: ReshapedOnlyRHSGEMMConfig,</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    Strategy.Reshaped: ReshapedGEMMConfig,</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;}</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;<span class="comment"># Mapping from example binary name to Strategy</span></div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;<span class="comment"># Assume 1-to-1 mapping</span></div><div class="line"><a name="l00434"></a><span class="lineno"><a class="line" href="namespace_gemm_tuner.xhtml#ae8424a0c14384f40c0a9c89289e90262">  434</a></span>&#160;EXAMPLE_FILE_2_STRATEGY = {</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    <span class="stringliteral">&quot;benchmark_cl_gemm_native&quot;</span>: Strategy.Native,</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    <span class="stringliteral">&quot;benchmark_cl_gemm_reshaped_rhs_only&quot;</span>: Strategy.ReshapedOnlyRHS,</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    <span class="stringliteral">&quot;benchmark_cl_gemm_reshaped&quot;</span>: Strategy.Reshaped,</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;}</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;<span class="comment"># Gemm example arguments type factory</span></div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;<span class="comment"># Produces a Gemm_Example_Args type specific to a Strategy</span></div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;<span class="comment"># Gemm example arguments consist of:</span></div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;<span class="comment">#           GEMMParam + GEMMConfig</span></div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;<span class="comment">#   in that order.</span></div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;<span class="comment"># For example, the example args of running a reshaped rhs only example could be:</span></div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;<span class="comment">#   100,100,100,1, 4, 4, 4, 1,             1,            1,                     0</span></div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;<span class="comment">#   M  ,N  ,K,  B,m0,n0,k0,h0,interleave_rhs,transpose_rhs,export_to_cl_image_rhs</span></div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;<span class="comment">#   &lt;-GEMMParam-&gt;&lt;-------------GEMMConfig---------------------------------------&gt;</span></div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;<span class="comment"># Note that the test strategy_name == strategy.name is in place to avoid unwanted enum aliases</span></div><div class="line"><a name="l00450"></a><span class="lineno"><a class="line" href="namespace_gemm_tuner.xhtml#abfd6c8b5e818f3a2a5dac6717b853018">  450</a></span>&#160;GEMM_EXAMPLE_ARGS_FACTORY = {</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    <span class="comment"># We ignore the data type field from GEMMParam as that is extracted separately</span></div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    strategy: namedtuple(</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;        <span class="stringliteral">&quot;{}_Gemm_Example_Args&quot;</span>.format(strategy_name),</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;        GEMMParam._fields[:-1] + GEMM_CONFIG_FACTORY[strategy]._fields,</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    )</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    <span class="keywordflow">for</span> strategy_name, strategy <span class="keywordflow">in</span> Strategy.__members__.items()</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    <span class="keywordflow">if</span> strategy_name == strategy.name</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;}</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;<span class="comment"># File extension used for benchmark result json files</span></div><div class="line"><a name="l00461"></a><span class="lineno"><a class="line" href="namespace_gemm_tuner.xhtml#a2f8b815490a02d3feccad7c5472ba4e2">  461</a></span>&#160;BENCHMARK_RESULT_JSON_EXTENSION = <span class="stringliteral">&quot;gemmtuner_benchmark&quot;</span></div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;<span class="comment">################################################################################</span></div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;<span class="comment"># Functions</span></div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;<span class="comment">################################################################################</span></div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;</div><div class="line"><a name="l00468"></a><span class="lineno"><a class="line" href="namespace_gemm_tuner.xhtml#a5fade9d93b441c6310d4b07270ea5cae">  468</a></span>&#160;<span class="keyword">def </span><a class="code" href="namespace_gemm_tuner.xhtml#a5fade9d93b441c6310d4b07270ea5cae">parse_benchmark_commandline</a>(commandline: str) -&gt; Dict[str, str]:</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    <span class="stringliteral">&quot;&quot;&quot; Parse the benchmark example command-line string into a dictionary of command-line arguments</span></div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;<span class="stringliteral">    &quot;&quot;&quot;</span></div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    <span class="comment"># Separate the data type option from the example_args portion of the string</span></div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    commandline = commandline.replace(<span class="stringliteral">&quot;,--type=&quot;</span>, <span class="stringliteral">&quot; --type=&quot;</span>)</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    args = commandline.split()</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    <span class="comment"># Discard program name</span></div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    args = args[1:]</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;    <span class="comment"># Split into a list of (argument name, argument value)</span></div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;    args = <a class="code" href="namespacearm__compute_1_1utils.xhtml#a9c3303817ba653b5d1e78efb88d02bcf">map</a>(<span class="keyword">lambda</span> arg: arg.split(<span class="stringliteral">&quot;=&quot;</span>), args)</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    <span class="keyword">def </span>transform(_name):</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;        <span class="comment"># Strip &#39;-&#39;/&quot;--&quot; if it exists</span></div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;        _name = _name.lstrip(<span class="stringliteral">&quot;-&quot;</span>)</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;        <span class="keywordflow">return</span> _name</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    <span class="keywordflow">return</span> {transform(name): val <span class="keywordflow">for</span> name, val <span class="keywordflow">in</span> args}</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;<span class="keyword">def </span><a class="code" href="namespace_gemm_tuner.xhtml#a589aa428a4dbe7e13cebf0189f41e0c8">extract_benchmark_results</a>(</div><div class="line"><a name="l00489"></a><span class="lineno"><a class="line" href="namespace_gemm_tuner.xhtml#a589aa428a4dbe7e13cebf0189f41e0c8">  489</a></span>&#160;    json_results: Dict, measurement_method=<span class="stringliteral">&quot;avg&quot;</span></div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;) -&gt; Generator[BenchmarkResult, <span class="keywordtype">None</span>, <span class="keywordtype">None</span>]:</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    <span class="stringliteral">&quot;&quot;&quot; Parse the benchmark result and extract relevant information, namely:</span></div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;<span class="stringliteral">        GEMM param,</span></div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;<span class="stringliteral">        Strategy,</span></div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;<span class="stringliteral">        GEMM config,</span></div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;<span class="stringliteral">        Measurements</span></div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;<span class="stringliteral">    &quot;&quot;&quot;</span></div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;    <span class="keywordflow">for</span> json_res <span class="keywordflow">in</span> json_results:</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;        <span class="comment"># Get example test and test data.</span></div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;        <span class="comment"># There should only be 1 test per run</span></div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;        example_tests = list(json_res[<span class="stringliteral">&quot;tests&quot;</span>].items())</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;        <span class="keyword">assert</span> len(example_tests) == 1</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;        example_fn, example_test_data = example_tests[0]</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;        <span class="comment"># Process example file name</span></div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;        example_fn = example_fn.split(os.path.sep)[-1]</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;        <span class="comment"># Get strategy</span></div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;        strategy = EXAMPLE_FILE_2_STRATEGY[example_fn]</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;        <span class="comment"># Get gemm params + gemm configs from example args</span></div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;        benchmark_args = <a class="code" href="namespace_gemm_tuner.xhtml#a5fade9d93b441c6310d4b07270ea5cae">parse_benchmark_commandline</a>(json_res[<span class="stringliteral">&quot;CommandLine&quot;</span>])</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;        Gemm_Example_Args_T = GEMM_EXAMPLE_ARGS_FACTORY[strategy]</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;        example_args = Gemm_Example_Args_T(</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;            *(benchmark_args[<span class="stringliteral">&quot;example_args&quot;</span>].split(<span class="stringliteral">&quot;,&quot;</span>)))</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;        <span class="comment"># Gemm_Example_Arg consists of GEMMParam first and then GEMMConfig (in that order)</span></div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;        <span class="comment"># However data type option is parsed separately from end of options, hence -1 is applied to fields length</span></div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;        gemm_param_fields_len = len(GEMMParam._fields) - 1</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;        gemm_param = GEMMParam.parse_from_strs(</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;            *example_args[:gemm_param_fields_len],</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;            data_type = benchmark_args[<span class="stringliteral">&quot;type&quot;</span>])</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;        GEMMConfig = GEMM_CONFIG_FACTORY[strategy]</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;        gemm_config = GEMMConfig.parse_from_strs(</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;            *example_args[gemm_param_fields_len:])</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;        <span class="comment"># Get OpenCL_Time_Ms stats</span></div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;        measurements = list(example_test_data[<span class="stringliteral">&quot;measurements&quot;</span>].items())</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;        <span class="comment"># For reshaped RHS only we have two measurements (one also for the reshape kernel)</span></div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;        <span class="comment"># Hence we must parse and sum them</span></div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;        measurement_ms_reshape = 0</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;        measurement_ms_kernel = 0</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;        <span class="keywordflow">for</span> single_measurement <span class="keywordflow">in</span> measurements:</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;            measurement_instrument, data = single_measurement</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;            <span class="comment"># Get instrument name and assert that it is the one we expect</span></div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;            measurement_instrument_name = measurement_instrument.split(<span class="stringliteral">&quot;/&quot;</span>)[0]</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;            <span class="keyword">assert</span> measurement_instrument_name == <span class="stringliteral">&quot;OpenCLTimer&quot;</span></div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;            <span class="comment"># Take either the minimum or the average of the raw data as the measurement value</span></div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;            <span class="keywordflow">if</span> measurement_method == <span class="stringliteral">&quot;min&quot;</span>:</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;                measurement_val = min(data[<span class="stringliteral">&quot;raw&quot;</span>])</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;            <span class="keywordflow">elif</span> measurement_method == <span class="stringliteral">&quot;avg&quot;</span>:</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;                measurement_val = sum(data[<span class="stringliteral">&quot;raw&quot;</span>]) / len(data[<span class="stringliteral">&quot;raw&quot;</span>])</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;            <span class="keywordflow">else</span>:</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;                <span class="keywordflow">raise</span> ValueError(</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;                    <span class="stringliteral">&quot;Invalid measurement method: {}&quot;</span>.format(measurement_method)</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;                )</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;            measurement_type = measurement_instrument.split(<span class="stringliteral">&quot;/&quot;</span>)[1]</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;            <span class="keywordflow">if</span> <span class="stringliteral">&quot;reshape&quot;</span> <span class="keywordflow">in</span> measurement_type.split(<span class="stringliteral">&quot;_&quot;</span>):</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;                measurement_ms_reshape = measurement_val</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;            <span class="keywordflow">else</span>:</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;                measurement_ms_kernel = measurement_val</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;        measurement = <a class="code" href="class_gemm_tuner_1_1_measurement.xhtml">Measurement</a>(</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;            measurement_ms_reshape, measurement_ms_kernel)</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;        <span class="keywordflow">yield</span> <a class="code" href="class_gemm_tuner_1_1_benchmark_result.xhtml">BenchmarkResult</a>(gemm_param, strategy, gemm_config, measurement)</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;</div><div class="line"><a name="l00558"></a><span class="lineno"><a class="line" href="namespace_gemm_tuner.xhtml#ab9bf6647cc58e534561aa91a422229e4">  558</a></span>&#160;<span class="keyword">def </span><a class="code" href="namespace_gemm_tuner.xhtml#ab9bf6647cc58e534561aa91a422229e4">parse_json</a>(dir_name):</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;    <span class="stringliteral">&quot;&quot;&quot; Glob all benchmark result json files and parse them into json objects (dicts).</span></div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;<span class="stringliteral">    &quot;&quot;&quot;</span></div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;    <span class="keywordflow">for</span> res_fn <span class="keywordflow">in</span> Path(dir_name).rglob(<span class="stringliteral">&quot;*.{}&quot;</span>.format(BENCHMARK_RESULT_JSON_EXTENSION)):</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;        with open(res_fn) <span class="keyword">as</span> res_fp:</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;            <span class="keywordflow">yield</span> json.load(res_fp)</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;</div><div class="line"><a name="l00566"></a><span class="lineno"><a class="line" href="namespace_gemm_tuner.xhtml#a118d1a9756d5cb110204180506ed8c99">  566</a></span>&#160;<span class="keyword">def </span><a class="code" href="namespace_gemm_tuner.xhtml#a118d1a9756d5cb110204180506ed8c99">check_out_path</a>(out_path):</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;    <span class="keywordflow">if</span> os.path.exists(out_path):</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;        overwrite = (</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>(</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;                <span class="stringliteral">&quot;Output JSON {} already exists. Overwrite? [Y/N]: &quot;</span>.format(</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;                    out_path)</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;            ).lower()</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;            == <span class="stringliteral">&quot;y&quot;</span></div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;        )</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> overwrite:</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;            logging.info(<span class="stringliteral">&quot;Skipping {}&quot;</span>.format(out_path))</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">False</span></div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;    logging.info(<span class="stringliteral">&quot;Saving JSON file to {}&quot;</span>.format(out_path))</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">True</span></div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;</div><div class="line"><a name="l00582"></a><span class="lineno"><a class="line" href="namespace_gemm_tuner.xhtml#a70ce377ea8b5202ced8079196c6841ed">  582</a></span>&#160;<span class="keyword">def </span><a class="code" href="namespace_gemm_tuner.xhtml#a70ce377ea8b5202ced8079196c6841ed">dump_json</a>(out_path, dict):</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;    with open(out_path, <span class="stringliteral">&quot;w&quot;</span>) <span class="keyword">as</span> f:</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;        json.dump(dict, f)</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;    logging.info(<span class="stringliteral">&quot;Saved&quot;</span>)</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;<span class="comment">################################################################################</span></div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;<span class="comment"># Main</span></div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;<span class="comment">################################################################################</span></div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;</div><div class="line"><a name="l00593"></a><span class="lineno"><a class="line" href="namespace_gemm_tuner.xhtml#a2b19960927373ea2b5afd6a4ccb654ac">  593</a></span>&#160;<span class="keyword">def </span><a class="code" href="namespace_gemm_tuner.xhtml#a2b19960927373ea2b5afd6a4ccb654ac">main</a>(args):</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    logging.info(</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;        <span class="stringliteral">&quot;Searching best gemm configurations from {}&quot;</span>.format(</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;            args.benchmark_results_dir)</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;    )</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;    benchmark_results = <a class="code" href="namespace_gemm_tuner.xhtml#a589aa428a4dbe7e13cebf0189f41e0c8">extract_benchmark_results</a>(</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;        <a class="code" href="namespace_gemm_tuner.xhtml#ab9bf6647cc58e534561aa91a422229e4">parse_json</a>(args.benchmark_results_dir)</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;    )</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;    <span class="comment"># Add all benchmark results to the recorder</span></div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;    benchmark_result_recorder = <a class="code" href="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder.xhtml">GEMMBenchmarkResultRecorder</a>(tol=args.tolerance)</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;    <span class="keywordflow">for</span> benchmark_result <span class="keywordflow">in</span> benchmark_results:</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;        benchmark_result_recorder.add(benchmark_result)</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;    <span class="keywordflow">if</span> args.debug:</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;        recorder_sum_level = GEMMBenchmarkResultRecorder.SummaryLevel.Detailed</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;    <span class="keywordflow">else</span>:</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;        recorder_sum_level = GEMMBenchmarkResultRecorder.SummaryLevel.Short</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;    <span class="comment"># Print overall summary of the recorded results</span></div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;    logging.info(benchmark_result_recorder.summary(</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;        sum_level=recorder_sum_level))</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;    <span class="comment"># Get GEMM configuration distributions for each strategy</span></div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    all_config_dists = benchmark_result_recorder.get_config_distributions()</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;    logging.info(<span class="stringliteral">&quot;=== Result ===&quot;</span>)</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;    <span class="keywordflow">for</span> strategy, config_dist <span class="keywordflow">in</span> all_config_dists.items():</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;        logging.info(<span class="stringliteral">&quot;Strategy: {}&quot;</span>.format(strategy.name))</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;        logging.debug(<span class="stringliteral">&quot;GEMM Config, Votes&quot;</span>)</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;        <span class="keywordflow">for</span> config, freq <span class="keywordflow">in</span> config_dist.frequency():</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;            logging.debug(<span class="stringliteral">&quot;{}, {}&quot;</span>.format(config, freq))</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;        logging.info(</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;            <span class="stringliteral">&quot;Best GEMM Config: {} with std: {}&quot;</span>.format(</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;                config_dist.best_config(), config_dist.std()</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;            )</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;        )</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;    <span class="comment"># Save the recorded results to JSON files in output directory</span></div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    <span class="keywordflow">if</span> args.output_dir <span class="keywordflow">is</span> <span class="keywordflow">not</span> <span class="keywordtype">None</span>:</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;        benchmark_result_recorder.save_to_jsons(</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;            args.output_dir, only_best_config=(<span class="keywordflow">not</span> args.debug)</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;        )</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;<span class="keywordflow">if</span> __name__ == <span class="stringliteral">&quot;__main__&quot;</span>:</div><div class="line"><a name="l00640"></a><span class="lineno"><a class="line" href="namespace_gemm_tuner.xhtml#a90eee7a4677ca8b1ed116364a24367f9">  640</a></span>&#160;    parser = argparse.ArgumentParser(description=<span class="stringliteral">&quot;CL GEMM Tuner&quot;</span>)</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;    parser.add_argument(</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;        <span class="stringliteral">&quot;-b&quot;</span>,</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;        <span class="stringliteral">&quot;--benchmark_results&quot;</span>,</div><div class="line"><a name="l00644"></a><span class="lineno"><a class="line" href="namespace_gemm_tuner.xhtml#ab0bede79c5f4cbed9c2cd932a0ace201">  644</a></span>&#160;        dest=<span class="stringliteral">&quot;benchmark_results_dir&quot;</span>,</div><div class="line"><a name="l00645"></a><span class="lineno"><a class="line" href="namespace_gemm_tuner.xhtml#a6d8a64ff78fc562acbd80da81ed531b2">  645</a></span>&#160;        metavar=<span class="stringliteral">&quot;PATH&quot;</span>,</div><div class="line"><a name="l00646"></a><span class="lineno"><a class="line" href="namespace_gemm_tuner.xhtml#a2f4ab7bf743142dae2e459aa18f9f1d4">  646</a></span>&#160;        action=<span class="stringliteral">&quot;store&quot;</span>,</div><div class="line"><a name="l00647"></a><span class="lineno"><a class="line" href="namespace_gemm_tuner.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">  647</a></span>&#160;        type=str,</div><div class="line"><a name="l00648"></a><span class="lineno"><a class="line" href="namespace_gemm_tuner.xhtml#a81ae9faedaa69e3e28e2960a0548df8d">  648</a></span>&#160;        help=<span class="stringliteral">&quot;Path to benchmark result directory, where benchmark result json files have a file \</span></div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;<span class="stringliteral">                                extension of &#39;{}&#39;&quot;</span>.format(</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;            BENCHMARK_RESULT_JSON_EXTENSION</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;        ),</div><div class="line"><a name="l00652"></a><span class="lineno"><a class="line" href="namespace_gemm_tuner.xhtml#ae81948490ddf54e80a22593640178350">  652</a></span>&#160;        required=<span class="keyword">True</span>,</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;    )</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;    parser.add_argument(</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;        <span class="stringliteral">&quot;-o&quot;</span>,</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;        <span class="stringliteral">&quot;--output_dir&quot;</span>,</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;        dest=<span class="stringliteral">&quot;output_dir&quot;</span>,</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;        metavar=<span class="stringliteral">&quot;PATH&quot;</span>,</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;        action=<span class="stringliteral">&quot;store&quot;</span>,</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;        type=str,</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;        help=<span class="stringliteral">&quot;Path to directory that holds output JSON files. One for strategy selection and one per strategy for GEMM config selection&quot;</span>,</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;    )</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;    parser.add_argument(</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;        <span class="stringliteral">&quot;-t&quot;</span>,</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;        <span class="stringliteral">&quot;--tolerance&quot;</span>,</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;        action=<span class="stringliteral">&quot;store&quot;</span>,</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;        type=float,</div><div class="line"><a name="l00668"></a><span class="lineno"><a class="line" href="namespace_gemm_tuner.xhtml#affb1327b18bf08a379d19eef89cf1ed1">  668</a></span>&#160;        default=0.01,</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;        help=<span class="stringliteral">&quot;For testing if two GEMMConfigs are equivalent in terms of performance. The tolerance is OpenCL timer in\</span></div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;<span class="stringliteral">        milliseconds. Recommended value: &lt;= 0.1 ms&quot;</span>,</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;    )</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;    parser.add_argument(</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;        <span class="stringliteral">&quot;-D&quot;</span>,</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;        <span class="stringliteral">&quot;--debug&quot;</span>,</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;        dest=<span class="stringliteral">&quot;debug&quot;</span>,</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;        action=<span class="stringliteral">&quot;store_true&quot;</span>,</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;        help=<span class="stringliteral">&quot;Enable script debugging output&quot;</span>,</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;    )</div><div class="line"><a name="l00679"></a><span class="lineno"><a class="line" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">  679</a></span>&#160;    args = parser.parse_args()</div><div class="line"><a name="l00680"></a><span class="lineno"><a class="line" href="namespace_gemm_tuner.xhtml#a05b240734aa0ab5756d163cc6b03d6e1">  680</a></span>&#160;    logging_level = logging.DEBUG <span class="keywordflow">if</span> args.debug <span class="keywordflow">else</span> logging.INFO</div><div class="line"><a name="l00681"></a><span class="lineno"><a class="line" href="namespace_gemm_tuner.xhtml#afde8e18a788ccc92fc61cab298bca7e3">  681</a></span>&#160;    logging.basicConfig(level=logging_level)</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;    logging.debug(<span class="stringliteral">&quot;Arguments: {}&quot;</span>.format(args))</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;    <a class="code" href="namespace_gemm_tuner.xhtml#a2b19960927373ea2b5afd6a4ccb654ac">main</a>(args)</div><div class="ttc" id="class_gemm_tuner_1_1_g_e_m_m_param_xhtml_a23e8041ce1015febe4fdace3225714f9"><div class="ttname"><a href="class_gemm_tuner_1_1_g_e_m_m_param.xhtml#a23e8041ce1015febe4fdace3225714f9">GemmTuner.GEMMParam.__str__</a></div><div class="ttdeci">def __str__(self)</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00057">GemmTuner.py:57</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_aa18932675cbb5eb9c9dbf8ff4d7106c7"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#aa18932675cbb5eb9c9dbf8ff4d7106c7">arm_compute::test::join</a></div><div class="ttdeci">std::string join(T first, T last, const std::string &amp;separator)</div><div class="ttdoc">Helper function to concatenate multiple strings. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2framework_2_utils_8h_source.xhtml#l00093">Utils.h:93</a></div></div>
<div class="ttc" id="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder_xhtml_a66aa7c8063db6217a0a0061f8b7ba206"><div class="ttname"><a href="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder.xhtml#a66aa7c8063db6217a0a0061f8b7ba206">GemmTuner.GEMMBenchmarkResultRecorder.add</a></div><div class="ttdeci">def add</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00215">GemmTuner.py:215</a></div></div>
<div class="ttc" id="class_gemm_tuner_1_1_measurement_xhtml_ad6e2319d03d3d5e39f9808eda9eecabf"><div class="ttname"><a href="class_gemm_tuner_1_1_measurement.xhtml#ad6e2319d03d3d5e39f9808eda9eecabf">GemmTuner.Measurement.__truediv__</a></div><div class="ttdeci">def __truediv__(self, other)</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00173">GemmTuner.py:173</a></div></div>
<div class="ttc" id="class_gemm_tuner_1_1_g_e_m_m_config_distribution_xhtml"><div class="ttname"><a href="class_gemm_tuner_1_1_g_e_m_m_config_distribution.xhtml">GemmTuner.GEMMConfigDistribution</a></div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00377">GemmTuner.py:377</a></div></div>
<div class="ttc" id="class_gemm_tuner_1_1_measurement_xhtml_a547cf97e438ebc6734fd6d1ea2b21b6d"><div class="ttname"><a href="class_gemm_tuner_1_1_measurement.xhtml#a547cf97e438ebc6734fd6d1ea2b21b6d">GemmTuner.Measurement.__add__</a></div><div class="ttdeci">def __add__(self, other)</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00149">GemmTuner.py:149</a></div></div>
<div class="ttc" id="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder_xhtml_a954df8e12fad5db41f9960775e74ad34"><div class="ttname"><a href="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder.xhtml#a954df8e12fad5db41f9960775e74ad34">GemmTuner.GEMMBenchmarkResultRecorder._tol</a></div><div class="ttdeci">_tol</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00213">GemmTuner.py:213</a></div></div>
<div class="ttc" id="class_gemm_tuner_1_1_g_e_m_m_param_xhtml_af4aae23ad8b2c9e870c4fa7083d70b19"><div class="ttname"><a href="class_gemm_tuner_1_1_g_e_m_m_param.xhtml#af4aae23ad8b2c9e870c4fa7083d70b19">GemmTuner.GEMMParam.parse_from_strs</a></div><div class="ttdeci">def parse_from_strs(cls, M_N_K_B, data_type)</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00054">GemmTuner.py:54</a></div></div>
<div class="ttc" id="namespacecaffe__mnist__image__extractor_xhtml_a4b99ff73a8a869319570237b5c57ab03"><div class="ttname"><a href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">caffe_mnist_image_extractor.str</a></div><div class="ttdeci">str</div><div class="ttdef"><b>Definition:</b> <a href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor.py:21</a></div></div>
<div class="ttc" id="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder_xhtml_a84ff0c9fbd56a0f9308d138de4f99354"><div class="ttname"><a href="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder.xhtml#a84ff0c9fbd56a0f9308d138de4f99354">GemmTuner.GEMMBenchmarkResultRecorder.get_best_gemm_configs</a></div><div class="ttdeci">def get_best_gemm_configs(self)</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00229">GemmTuner.py:229</a></div></div>
<div class="ttc" id="class_gemm_tuner_1_1_reshaped_only_r_h_s_g_e_m_m_config_xhtml"><div class="ttname"><a href="class_gemm_tuner_1_1_reshaped_only_r_h_s_g_e_m_m_config.xhtml">GemmTuner.ReshapedOnlyRHSGEMMConfig</a></div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00077">GemmTuner.py:77</a></div></div>
<div class="ttc" id="class_gemm_tuner_1_1_benchmark_result_xhtml"><div class="ttname"><a href="class_gemm_tuner_1_1_benchmark_result.xhtml">GemmTuner.BenchmarkResult</a></div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00194">GemmTuner.py:194</a></div></div>
<div class="ttc" id="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder_xhtml_ad8d3abe352c45d2b9613442e899a55db"><div class="ttname"><a href="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder.xhtml#ad8d3abe352c45d2b9613442e899a55db">GemmTuner.GEMMBenchmarkResultRecorder.get_record</a></div><div class="ttdeci">def get_record(self)</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00224">GemmTuner.py:224</a></div></div>
<div class="ttc" id="class_gemm_tuner_1_1_native_g_e_m_m_config_xhtml_a11177ae1fd35e2a24cc8eeaab41f2c68"><div class="ttname"><a href="class_gemm_tuner_1_1_native_g_e_m_m_config.xhtml#a11177ae1fd35e2a24cc8eeaab41f2c68">GemmTuner.NativeGEMMConfig.parse_from_strs</a></div><div class="ttdeci">def parse_from_strs(cls, args)</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00068">GemmTuner.py:68</a></div></div>
<div class="ttc" id="namespace_gemm_tuner_xhtml_a118d1a9756d5cb110204180506ed8c99"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a118d1a9756d5cb110204180506ed8c99">GemmTuner.check_out_path</a></div><div class="ttdeci">def check_out_path(out_path)</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00566">GemmTuner.py:566</a></div></div>
<div class="ttc" id="class_gemm_tuner_1_1_reshaped_only_r_h_s_g_e_m_m_config_xhtml_a11177ae1fd35e2a24cc8eeaab41f2c68"><div class="ttname"><a href="class_gemm_tuner_1_1_reshaped_only_r_h_s_g_e_m_m_config.xhtml#a11177ae1fd35e2a24cc8eeaab41f2c68">GemmTuner.ReshapedOnlyRHSGEMMConfig.parse_from_strs</a></div><div class="ttdeci">def parse_from_strs(cls, args)</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00091">GemmTuner.py:91</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">LSTMLayerQuantized.cpp:486</a></div></div>
<div class="ttc" id="class_gemm_tuner_1_1_native_g_e_m_m_config_xhtml"><div class="ttname"><a href="class_gemm_tuner_1_1_native_g_e_m_m_config.xhtml">GemmTuner.NativeGEMMConfig</a></div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00062">GemmTuner.py:62</a></div></div>
<div class="ttc" id="class_gemm_tuner_1_1_g_e_m_m_config_distribution_xhtml_ae64f0875afe3067b97ba370b354b9213"><div class="ttname"><a href="class_gemm_tuner_1_1_g_e_m_m_config_distribution.xhtml#ae64f0875afe3067b97ba370b354b9213">GemmTuner.GEMMConfigDistribution.__init__</a></div><div class="ttdeci">def __init__(self)</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00381">GemmTuner.py:381</a></div></div>
<div class="ttc" id="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder_xhtml_a8c938fde12c1d2d34553c608c776ba77"><div class="ttname"><a href="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder.xhtml#a8c938fde12c1d2d34553c608c776ba77">GemmTuner.GEMMBenchmarkResultRecorder.get_best_gemm_configs_as_sequence</a></div><div class="ttdeci">def get_best_gemm_configs_as_sequence(self)</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00255">GemmTuner.py:255</a></div></div>
<div class="ttc" id="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder_xhtml_ae625b46930454abeb72e1526955462b6"><div class="ttname"><a href="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder.xhtml#ae625b46930454abeb72e1526955462b6">GemmTuner.GEMMBenchmarkResultRecorder.__init__</a></div><div class="ttdeci">def __init__(self, tol=0.01)</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00207">GemmTuner.py:207</a></div></div>
<div class="ttc" id="class_gemm_tuner_1_1_g_e_m_m_config_distribution_xhtml_a66aa7c8063db6217a0a0061f8b7ba206"><div class="ttname"><a href="class_gemm_tuner_1_1_g_e_m_m_config_distribution.xhtml#a66aa7c8063db6217a0a0061f8b7ba206">GemmTuner.GEMMConfigDistribution.add</a></div><div class="ttdeci">def add</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00389">GemmTuner.py:389</a></div></div>
<div class="ttc" id="class_gemm_tuner_1_1_native_g_e_m_m_config_xhtml_a23e8041ce1015febe4fdace3225714f9"><div class="ttname"><a href="class_gemm_tuner_1_1_native_g_e_m_m_config.xhtml#a23e8041ce1015febe4fdace3225714f9">GemmTuner.NativeGEMMConfig.__str__</a></div><div class="ttdeci">def __str__(self)</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00072">GemmTuner.py:72</a></div></div>
<div class="ttc" id="class_gemm_tuner_1_1_reshaped_only_r_h_s_g_e_m_m_config_xhtml_a23e8041ce1015febe4fdace3225714f9"><div class="ttname"><a href="class_gemm_tuner_1_1_reshaped_only_r_h_s_g_e_m_m_config.xhtml#a23e8041ce1015febe4fdace3225714f9">GemmTuner.ReshapedOnlyRHSGEMMConfig.__str__</a></div><div class="ttdeci">def __str__(self)</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00098">GemmTuner.py:98</a></div></div>
<div class="ttc" id="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder_xhtml_a65177c090b4c592e4260ce9f5b2963bd"><div class="ttname"><a href="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder.xhtml#a65177c090b4c592e4260ce9f5b2963bd">GemmTuner.GEMMBenchmarkResultRecorder.get_best_gemm_strategies</a></div><div class="ttdeci">def get_best_gemm_strategies(self)</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00280">GemmTuner.py:280</a></div></div>
<div class="ttc" id="class_gemm_tuner_1_1_measurement_xhtml_a480eef30c37e527051d12029c15c70d3"><div class="ttname"><a href="class_gemm_tuner_1_1_measurement.xhtml#a480eef30c37e527051d12029c15c70d3">GemmTuner.Measurement.__pow__</a></div><div class="ttdeci">def __pow__(self, power)</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00179">GemmTuner.py:179</a></div></div>
<div class="ttc" id="namespace_gemm_tuner_xhtml_a589aa428a4dbe7e13cebf0189f41e0c8"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a589aa428a4dbe7e13cebf0189f41e0c8">GemmTuner.extract_benchmark_results</a></div><div class="ttdeci">def extract_benchmark_results</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00489">GemmTuner.py:489</a></div></div>
<div class="ttc" id="class_gemm_tuner_1_1_g_e_m_m_param_xhtml"><div class="ttname"><a href="class_gemm_tuner_1_1_g_e_m_m_param.xhtml">GemmTuner.GEMMParam</a></div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00046">GemmTuner.py:46</a></div></div>
<div class="ttc" id="class_gemm_tuner_1_1_measurement_xhtml_a96fd98a8997501189d60829abc0257cb"><div class="ttname"><a href="class_gemm_tuner_1_1_measurement.xhtml#a96fd98a8997501189d60829abc0257cb">GemmTuner.Measurement.__mul__</a></div><div class="ttdeci">def __mul__(self, other)</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00161">GemmTuner.py:161</a></div></div>
<div class="ttc" id="namespace_gemm_tuner_xhtml_ab9bf6647cc58e534561aa91a422229e4"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#ab9bf6647cc58e534561aa91a422229e4">GemmTuner.parse_json</a></div><div class="ttdeci">def parse_json(dir_name)</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00558">GemmTuner.py:558</a></div></div>
<div class="ttc" id="class_gemm_tuner_1_1_g_e_m_m_config_distribution_xhtml_a020784aee63b0ba66ddaa5b1f2d888cb"><div class="ttname"><a href="class_gemm_tuner_1_1_g_e_m_m_config_distribution.xhtml#a020784aee63b0ba66ddaa5b1f2d888cb">GemmTuner.GEMMConfigDistribution.best_config</a></div><div class="ttdeci">def best_config(self)</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00404">GemmTuner.py:404</a></div></div>
<div class="ttc" id="class_gemm_tuner_1_1_measurement_xhtml_a788bb7b352dd906758009ffd3d838f57"><div class="ttname"><a href="class_gemm_tuner_1_1_measurement.xhtml#a788bb7b352dd906758009ffd3d838f57">GemmTuner.Measurement.get_total_ms</a></div><div class="ttdeci">def get_total_ms(self)</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00138">GemmTuner.py:138</a></div></div>
<div class="ttc" id="class_gemm_tuner_1_1_measurement_xhtml_afb997abfddc10d3bf54412297c00471c"><div class="ttname"><a href="class_gemm_tuner_1_1_measurement.xhtml#afb997abfddc10d3bf54412297c00471c">GemmTuner.Measurement.is_close_to</a></div><div class="ttdeci">def is_close_to(self, other, tol)</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00141">GemmTuner.py:141</a></div></div>
<div class="ttc" id="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder_xhtml_a0ea49ac2ac7d7a33761dc5905cab3711"><div class="ttname"><a href="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder.xhtml#a0ea49ac2ac7d7a33761dc5905cab3711">GemmTuner.GEMMBenchmarkResultRecorder.get_config_distributions</a></div><div class="ttdeci">def get_config_distributions(self)</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00268">GemmTuner.py:268</a></div></div>
<div class="ttc" id="class_gemm_tuner_1_1_g_e_m_m_config_distribution_xhtml_ad7bd8ed6c31eef061780288c095728f0"><div class="ttname"><a href="class_gemm_tuner_1_1_g_e_m_m_config_distribution.xhtml#ad7bd8ed6c31eef061780288c095728f0">GemmTuner.GEMMConfigDistribution.std</a></div><div class="ttdeci">def std(self)</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00409">GemmTuner.py:409</a></div></div>
<div class="ttc" id="class_gemm_tuner_1_1_measurement_xhtml_a3e423795fdaa270fe18bccfba052f789"><div class="ttname"><a href="class_gemm_tuner_1_1_measurement.xhtml#a3e423795fdaa270fe18bccfba052f789">GemmTuner.Measurement.is_better_than</a></div><div class="ttdeci">def is_better_than(self, other, tol)</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00144">GemmTuner.py:144</a></div></div>
<div class="ttc" id="namespace_gemm_tuner_xhtml_a70ce377ea8b5202ced8079196c6841ed"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a70ce377ea8b5202ced8079196c6841ed">GemmTuner.dump_json</a></div><div class="ttdeci">def dump_json(out_path, dict)</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00582">GemmTuner.py:582</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_xhtml_a9c3303817ba653b5d1e78efb88d02bcf"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a9c3303817ba653b5d1e78efb88d02bcf">arm_compute::utils::map</a></div><div class="ttdeci">void map(T &amp;tensor, bool blocking)</div><div class="ttdoc">Maps a tensor if needed. </div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00212">Utils.h:212</a></div></div>
<div class="ttc" id="class_gemm_tuner_1_1_g_e_m_m_config_distribution_xhtml_a0bcb25e557abee63ef4a75e0d639fdb0"><div class="ttname"><a href="class_gemm_tuner_1_1_g_e_m_m_config_distribution.xhtml#a0bcb25e557abee63ef4a75e0d639fdb0">GemmTuner.GEMMConfigDistribution.distribution</a></div><div class="ttdeci">def distribution(self)</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00396">GemmTuner.py:396</a></div></div>
<div class="ttc" id="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder_xhtml"><div class="ttname"><a href="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder.xhtml">GemmTuner.GEMMBenchmarkResultRecorder</a></div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00201">GemmTuner.py:201</a></div></div>
<div class="ttc" id="class_gemm_tuner_1_1_g_e_m_m_config_distribution_xhtml_abc89734bc6dee426b61a6463ecba9dbc"><div class="ttname"><a href="class_gemm_tuner_1_1_g_e_m_m_config_distribution.xhtml#abc89734bc6dee426b61a6463ecba9dbc">GemmTuner.GEMMConfigDistribution.frequency</a></div><div class="ttdeci">def frequency(self)</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00399">GemmTuner.py:399</a></div></div>
<div class="ttc" id="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder_xhtml_adc0ecf20ebe230b07f49bed19a7fb0f5"><div class="ttname"><a href="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder.xhtml#adc0ecf20ebe230b07f49bed19a7fb0f5">GemmTuner.GEMMBenchmarkResultRecorder.summary</a></div><div class="ttdeci">def summary(self, sum_level=SummaryLevel.Short)</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00347">GemmTuner.py:347</a></div></div>
<div class="ttc" id="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder_xhtml_a31ba40892c26b3f1734705e4f865c0f1"><div class="ttname"><a href="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder.xhtml#a31ba40892c26b3f1734705e4f865c0f1">GemmTuner.GEMMBenchmarkResultRecorder.save_to_jsons</a></div><div class="ttdeci">def save_to_jsons(self, out_dir, only_best_config=True)</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00303">GemmTuner.py:303</a></div></div>
<div class="ttc" id="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder_xhtml_ada6a9c2772e9a7c52e7674d4b73e5684"><div class="ttname"><a href="class_gemm_tuner_1_1_g_e_m_m_benchmark_result_recorder.xhtml#ada6a9c2772e9a7c52e7674d4b73e5684">GemmTuner.GEMMBenchmarkResultRecorder._strategies</a></div><div class="ttdeci">_strategies</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00212">GemmTuner.py:212</a></div></div>
<div class="ttc" id="class_gemm_tuner_1_1_measurement_xhtml_a23e8041ce1015febe4fdace3225714f9"><div class="ttname"><a href="class_gemm_tuner_1_1_measurement.xhtml#a23e8041ce1015febe4fdace3225714f9">GemmTuner.Measurement.__str__</a></div><div class="ttdeci">def __str__(self)</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00184">GemmTuner.py:184</a></div></div>
<div class="ttc" id="class_gemm_tuner_1_1_reshaped_g_e_m_m_config_xhtml"><div class="ttname"><a href="class_gemm_tuner_1_1_reshaped_g_e_m_m_config.xhtml">GemmTuner.ReshapedGEMMConfig</a></div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00103">GemmTuner.py:103</a></div></div>
<div class="ttc" id="class_gemm_tuner_1_1_reshaped_g_e_m_m_config_xhtml_a23e8041ce1015febe4fdace3225714f9"><div class="ttname"><a href="class_gemm_tuner_1_1_reshaped_g_e_m_m_config.xhtml#a23e8041ce1015febe4fdace3225714f9">GemmTuner.ReshapedGEMMConfig.__str__</a></div><div class="ttdeci">def __str__(self)</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00129">GemmTuner.py:129</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a1ec8dd7ea96aec0e4068497f0b5e17b2"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1ec8dd7ea96aec0e4068497f0b5e17b2">arm_compute::test::validation::set</a></div><div class="ttdeci">dst_shape set(0, output_wh.first)</div></div>
<div class="ttc" id="namespace_gemm_tuner_xhtml_a2b19960927373ea2b5afd6a4ccb654ac"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a2b19960927373ea2b5afd6a4ccb654ac">GemmTuner.main</a></div><div class="ttdeci">def main(args)</div><div class="ttdoc">Main. </div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00593">GemmTuner.py:593</a></div></div>
<div class="ttc" id="class_gemm_tuner_1_1_reshaped_g_e_m_m_config_xhtml_a11177ae1fd35e2a24cc8eeaab41f2c68"><div class="ttname"><a href="class_gemm_tuner_1_1_reshaped_g_e_m_m_config.xhtml#a11177ae1fd35e2a24cc8eeaab41f2c68">GemmTuner.ReshapedGEMMConfig.parse_from_strs</a></div><div class="ttdeci">def parse_from_strs(cls, args)</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00121">GemmTuner.py:121</a></div></div>
<div class="ttc" id="class_gemm_tuner_1_1_measurement_xhtml_ae03b88268c88fb1edfdb3f5353478d7b"><div class="ttname"><a href="class_gemm_tuner_1_1_measurement.xhtml#ae03b88268c88fb1edfdb3f5353478d7b">GemmTuner.Measurement.__sub__</a></div><div class="ttdeci">def __sub__(self, other)</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00155">GemmTuner.py:155</a></div></div>
<div class="ttc" id="class_gemm_tuner_1_1_measurement_xhtml_a5855279dfdcb183a472784ad7afeed88"><div class="ttname"><a href="class_gemm_tuner_1_1_measurement.xhtml#a5855279dfdcb183a472784ad7afeed88">GemmTuner.Measurement.__floordiv__</a></div><div class="ttdeci">def __floordiv__(self, other)</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00167">GemmTuner.py:167</a></div></div>
<div class="ttc" id="namespace_gemm_tuner_xhtml_a5fade9d93b441c6310d4b07270ea5cae"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a5fade9d93b441c6310d4b07270ea5cae">GemmTuner.parse_benchmark_commandline</a></div><div class="ttdeci">def parse_benchmark_commandline</div><div class="ttdoc">Functions. </div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00468">GemmTuner.py:468</a></div></div>
<div class="ttc" id="class_gemm_tuner_1_1_g_e_m_m_config_distribution_xhtml_a3cb4012dd6cf5644710bc17df6346f42"><div class="ttname"><a href="class_gemm_tuner_1_1_g_e_m_m_config_distribution.xhtml#a3cb4012dd6cf5644710bc17df6346f42">GemmTuner.GEMMConfigDistribution._gemm_config_freq</a></div><div class="ttdeci">_gemm_config_freq</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00387">GemmTuner.py:387</a></div></div>
<div class="ttc" id="class_gemm_tuner_1_1_measurement_xhtml"><div class="ttname"><a href="class_gemm_tuner_1_1_measurement.xhtml">GemmTuner.Measurement</a></div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00134">GemmTuner.py:134</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_d28a4824dc47e487b107a5db32ef43c4.xhtml">examples</a></li><li class="navelem"><a class="el" href="dir_9a60f706a5aff86a468215c27fa011b2.xhtml">gemm_tuner</a></li><li class="navelem"><a class="el" href="_gemm_tuner_8py.xhtml">GemmTuner.py</a></li>
    <li class="footer">Generated on Thu Feb 16 2023 15:45:38 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
