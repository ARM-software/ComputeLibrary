<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: tests/framework/instruments/SchedulerTimer.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_scheduler_timer_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">SchedulerTimer.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_scheduler_timer_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017-2021 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_scheduler_timer_8h.xhtml">SchedulerTimer.h</a>&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_instruments_8h.xhtml">Instruments.h</a>&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_wall_clock_timer_8h.xhtml">WallClockTimer.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_c_p_p_kernel_8h.xhtml">arm_compute/core/CPP/ICPPKernel.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_data_layer_visitor_8h.xhtml">arm_compute/graph/DataLayerVisitor.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_node_8h.xhtml">arm_compute/graph/INode.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_cast_8h.xhtml">support/Cast.h</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">namespace </span>test</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">namespace </span>framework</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">bool</span> output_timestamps&gt;</div><div class="line"><a name="l00040"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml#a501ef37fef441a0a6a8ea8b8e30a7181">   40</a></span>&#160;std::string    <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml#a501ef37fef441a0a6a8ea8b8e30a7181">SchedulerClock&lt;output_timestamps&gt;::id</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keywordflow">if</span>(output_timestamps)</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    {</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <span class="keywordflow">return</span> <span class="stringliteral">&quot;SchedulerTimestamps&quot;</span>;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    }</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    {</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <span class="keywordflow">return</span> <span class="stringliteral">&quot;SchedulerTimer&quot;</span>;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    }</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;}</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">bool</span>    output_timestamps&gt;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="keyword">class </span>Interceptor final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1_i_scheduler.xhtml">IScheduler</a></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;{</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment">    /** Default constructor. */</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    Interceptor(std::list&lt;<span class="keyword">struct</span> <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_scheduler_clock_1_1kernel__info.xhtml">SchedulerClock&lt;output_timestamps&gt;::kernel_info</a>&gt; &amp;kernels,</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;                std::map&lt;std::string, SchedulerTimer::LayerData&gt; &amp;layers, <a class="code" href="classarm__compute_1_1_i_scheduler.xhtml">IScheduler</a> &amp;real_scheduler,</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#a3a01a70ad3a22d8b80c413e8a5977100">ScaleFactor</a> scale_factor)</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        : _kernels(kernels), _layer_data_map(layers), _real_scheduler(real_scheduler), _timer(scale_factor), _prefix()</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    {</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    }</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keywordtype">void</span> set_num_threads(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_threads)<span class="keyword"> override</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        _real_scheduler.set_num_threads(num_threads);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    }</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordtype">void</span> set_num_threads_with_affinity(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_threads, BindFunc func)<span class="keyword"> override</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        _real_scheduler.set_num_threads_with_affinity(num_threads, func);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    }</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_threads()<span class="keyword"> const override</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <span class="keywordflow">return</span> _real_scheduler.num_threads();</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    }</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordtype">void</span> set_prefix(<span class="keyword">const</span> std::string &amp;prefix)</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    {</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        _prefix = prefix;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    }</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keywordtype">void</span> schedule(<a class="code" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml">ICPPKernel</a> *kernel, <span class="keyword">const</span> Hints &amp;hints)<span class="keyword"> override</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        _timer.start();</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        _real_scheduler.schedule(kernel, hints);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        _timer.stop();</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="keyword">typename</span> <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_scheduler_clock_1_1kernel__info.xhtml">SchedulerClock&lt;output_timestamps&gt;::kernel_info</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        info.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_scheduler_clock_1_1kernel__info.xhtml#a9b45b3e13bd9167aab02e17e08916231">name</a>         = kernel-&gt;<a class="code" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml#a1a30ad8f276a2310571c36239554831a">name</a>();</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        info.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_scheduler_clock_1_1kernel__info.xhtml#a78fb15511f687fe7fdb8e3ba9613648b">prefix</a>       = _prefix;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        info.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_scheduler_clock_1_1kernel__info.xhtml#a5f061b503cb1681c0b047c04d645e24e">measurements</a> = _timer.measurements();</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        _kernels.push_back(std::move(info));</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    }</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keywordtype">void</span> schedule_op(<a class="code" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml">ICPPKernel</a> *kernel, <span class="keyword">const</span> Hints &amp;hints, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> &amp;tensors)<span class="keyword"> override</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        _timer.start();</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        _real_scheduler.schedule_op(kernel, hints, window, tensors);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        _timer.stop();</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="keyword">typename</span> <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_scheduler_clock_1_1kernel__info.xhtml">SchedulerClock&lt;output_timestamps&gt;::kernel_info</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        info.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_scheduler_clock_1_1kernel__info.xhtml#a9b45b3e13bd9167aab02e17e08916231">name</a>         = kernel-&gt;<a class="code" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml#a1a30ad8f276a2310571c36239554831a">name</a>();</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        info.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_scheduler_clock_1_1kernel__info.xhtml#a78fb15511f687fe7fdb8e3ba9613648b">prefix</a>       = _prefix;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        info.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_scheduler_clock_1_1kernel__info.xhtml#a5f061b503cb1681c0b047c04d645e24e">measurements</a> = _timer.measurements();</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        _kernels.push_back(std::move(info));</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    }</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keywordtype">void</span> run_tagged_workloads(std::vector&lt;Workload&gt; &amp;workloads, <span class="keyword">const</span> <span class="keywordtype">char</span> *tag)<span class="keyword"> override</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        _timer.start();</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        _real_scheduler.run_tagged_workloads(workloads, tag);</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        _timer.stop();</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        <span class="keyword">typename</span> <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_scheduler_clock_1_1kernel__info.xhtml">SchedulerClock&lt;output_timestamps&gt;::kernel_info</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        info.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_scheduler_clock_1_1kernel__info.xhtml#a9b45b3e13bd9167aab02e17e08916231">name</a>         = tag != <span class="keyword">nullptr</span> ? tag : <span class="stringliteral">&quot;Unknown&quot;</span>;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        info.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_scheduler_clock_1_1kernel__info.xhtml#a78fb15511f687fe7fdb8e3ba9613648b">prefix</a>       = _prefix;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        info.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_scheduler_clock_1_1kernel__info.xhtml#a5f061b503cb1681c0b047c04d645e24e">measurements</a> = _timer.measurements();</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        _kernels.push_back(std::move(info));</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    }</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="keyword">protected</span>:</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keywordtype">void</span> run_workloads(std::vector&lt;Workload&gt; &amp;workloads)<span class="keyword"> override</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(workloads);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Can&#39;t be reached&quot;</span>);</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    }</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    std::list&lt;struct SchedulerClock&lt;output_timestamps&gt;::kernel_info&gt; &amp;_kernels;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    std::map&lt;std::string, SchedulerTimer::LayerData&gt; &amp;_layer_data_map;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <a class="code" href="classarm__compute_1_1_i_scheduler.xhtml">IScheduler</a>                  &amp;_real_scheduler;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_wall_clock.xhtml">WallClock&lt;output_timestamps&gt;</a> _timer;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    std::string                  _prefix;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;};</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">bool</span> output_timestamps&gt;</div><div class="line"><a name="l00139"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml#a71e1ffcc1aad7de2a9a44276ca2fcbd1">  139</a></span>&#160;<a class="code" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml#a71e1ffcc1aad7de2a9a44276ca2fcbd1">SchedulerClock&lt;output_timestamps&gt;::SchedulerClock</a>(<a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#a3a01a70ad3a22d8b80c413e8a5977100">ScaleFactor</a> scale_factor)</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    : _kernels(),</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;      _layer_data_map(),</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;      _real_scheduler(nullptr),</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;      _real_scheduler_type(),</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;#ifdef ARM_COMPUTE_GRAPH_ENABLED</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;      _real_graph_function(nullptr),</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;#endif <span class="comment">/* ARM_COMPUTE_GRAPH_ENABLED */</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;      _scale_factor(scale_factor),</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;      _interceptor(nullptr),</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;      _scheduler_users()</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;{</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#adeaa0a402395806e538066d09bcd668b">instruments_info</a> != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    {</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        _scheduler_users = <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#adeaa0a402395806e538066d09bcd668b">instruments_info</a>-&gt;_scheduler_users;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    }</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;}</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">bool</span> output_timestamps&gt;</div><div class="line"><a name="l00158"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml#ad94b6b2e29abc159c9624278938badb3">  158</a></span>&#160;<span class="keywordtype">void</span>           <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml#ad94b6b2e29abc159c9624278938badb3">SchedulerClock&lt;output_timestamps&gt;::test_start</a>()</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;{</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="preprocessor">#ifdef ARM_COMPUTE_GRAPH_ENABLED</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="comment">// Start intercepting tasks:</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_real_graph_function != <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    _real_graph_function  = <a class="code" href="classarm__compute_1_1graph_1_1_task_executor.xhtml#a8814816f2d2940dbbc2817277eff42db">graph::TaskExecutor::get</a>().<a class="code" href="classarm__compute_1_1graph_1_1_task_executor.xhtml#af356b3757a26ca474239624e161fb49c">execute_function</a>;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keyword">auto</span> task_interceptor = [<span class="keyword">this</span>](<a class="code" href="structarm__compute_1_1graph_1_1_execution_task.xhtml">graph::ExecutionTask</a> &amp; task)</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    {</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        Interceptor&lt;output_timestamps&gt; *scheduler = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <span class="keywordflow">if</span>(<span class="keyword">dynamic_cast&lt;</span>Interceptor&lt;output_timestamps&gt; *<span class="keyword">&gt;</span>(this-&gt;_interceptor.get()) != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        {</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            scheduler = arm_compute::utils::cast::polymorphic_downcast&lt;Interceptor&lt;output_timestamps&gt; *&gt;(_interceptor.get());</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            <span class="keywordflow">if</span>(task.node != <span class="keyword">nullptr</span> &amp;&amp; !task.node-&gt;name().empty())</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            {</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                scheduler-&gt;set_prefix(task.node-&gt;name() + <span class="stringliteral">&quot;/&quot;</span>);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                <span class="keywordflow">if</span>(_layer_data_map.find(task.node-&gt;name()) == _layer_data_map.end())</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                {</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                    <a class="code" href="classarm__compute_1_1graph_1_1_data_layer_visitor.xhtml">arm_compute::graph::DataLayerVisitor</a> dlv = {};</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                    task.node-&gt;accept(dlv);</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                    _layer_data_map[task.node-&gt;name()] = dlv.<a class="code" href="classarm__compute_1_1graph_1_1_data_layer_visitor.xhtml#aa75047a3bc7c8d442c8adf116c948d10">layer_data</a>();</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                }</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            }</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;            {</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                scheduler-&gt;set_prefix(<span class="stringliteral">&quot;&quot;</span>);</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            }</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        }</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        this-&gt;_real_graph_function(task);</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        <span class="keywordflow">if</span>(scheduler != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        {</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            scheduler-&gt;set_prefix(<span class="stringliteral">&quot;&quot;</span>);</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        }</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    };</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_GRAPH_ENABLED */</span><span class="preprocessor"></span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_real_scheduler != <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    _real_scheduler_type = <a class="code" href="classarm__compute_1_1_scheduler.xhtml#a3f9e730c935124966325cd7c794d3153">Scheduler::get_type</a>();</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="comment">//Note: We can&#39;t currently replace a custom scheduler</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="keywordflow">if</span>(_real_scheduler_type != <a class="code" href="classarm__compute_1_1_scheduler.xhtml#a1d1cfd8ffb84e947f82999c682b666a7a72baef04098f035e8a320b03ad197818">Scheduler::Type::CUSTOM</a>)</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    {</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        _real_scheduler = &amp;<a class="code" href="classarm__compute_1_1_scheduler.xhtml#a0d63ca713bab377aabcfb63c192b8429">Scheduler::get</a>();</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        _interceptor    = std::make_shared&lt;Interceptor&lt;output_timestamps&gt;&gt;(_kernels, _layer_data_map, *_real_scheduler, _scale_factor);</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        <a class="code" href="classarm__compute_1_1_scheduler.xhtml#ad2fc671b2772dd9e28b81cf0e2514e85">Scheduler::set</a>(std::static_pointer_cast&lt;IScheduler&gt;(_interceptor));</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="preprocessor">#ifdef ARM_COMPUTE_GRAPH_ENABLED</span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        <a class="code" href="classarm__compute_1_1graph_1_1_task_executor.xhtml#a8814816f2d2940dbbc2817277eff42db">graph::TaskExecutor::get</a>().<a class="code" href="classarm__compute_1_1graph_1_1_task_executor.xhtml#af356b3757a26ca474239624e161fb49c">execute_function</a> = task_interceptor;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_GRAPH_ENABLED */</span><span class="preprocessor"></span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        <span class="comment">// Create an interceptor for each scheduler</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        <span class="comment">// TODO(COMPID-2638) : Allow multiple schedulers, now it assumes the same scheduler is used.</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        <a class="code" href="namespacearm__compute_1_1utility.xhtml#a067ebd28103d827b6ec17032e2344064">std::for_each</a>(std::begin(_scheduler_users), <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">std::end</a>(_scheduler_users),</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                      [&amp;](<a class="code" href="classarm__compute_1_1test_1_1framework_1_1_i_scheduler_user.xhtml">ISchedulerUser</a> * user)</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        {</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;            <span class="keywordflow">if</span>(user != <span class="keyword">nullptr</span> &amp;&amp; user-&gt;<a class="code" href="classarm__compute_1_1test_1_1framework_1_1_i_scheduler_user.xhtml#a5a8c9bfdfbdcdddc697f438ba2244620">scheduler</a>() != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            {</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                user-&gt;<a class="code" href="classarm__compute_1_1test_1_1framework_1_1_i_scheduler_user.xhtml#a4843c7dfdf88d463275133d3278df03a">intercept_scheduler</a>(std::make_unique&lt;Interceptor&lt;output_timestamps&gt;&gt;(_kernels, _layer_data_map, *user-&gt;<a class="code" href="classarm__compute_1_1test_1_1framework_1_1_i_scheduler_user.xhtml#a5a8c9bfdfbdcdddc697f438ba2244620">scheduler</a>(), _scale_factor));</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;            }</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        });</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    }</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;}</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">bool</span> output_timestamps&gt;</div><div class="line"><a name="l00222"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml#a5d5d9ebd12cd3a7d268bc98a3fc7bf97">  222</a></span>&#160;<span class="keywordtype">void</span>           <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml#a5d5d9ebd12cd3a7d268bc98a3fc7bf97">SchedulerClock&lt;output_timestamps&gt;::start</a>()</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;{</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    _kernels.clear();</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;}</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">bool</span> output_timestamps&gt;</div><div class="line"><a name="l00228"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml#a84eed1102b2ad191e3659dd7c49705bc">  228</a></span>&#160;<span class="keywordtype">void</span>           <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml#a84eed1102b2ad191e3659dd7c49705bc">SchedulerClock&lt;output_timestamps&gt;::test_stop</a>()</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;{</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="comment">// Restore real scheduler</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <a class="code" href="classarm__compute_1_1_scheduler.xhtml#ad2fc671b2772dd9e28b81cf0e2514e85">Scheduler::set</a>(_real_scheduler_type);</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    _real_scheduler = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    _interceptor    = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="preprocessor">#ifdef ARM_COMPUTE_GRAPH_ENABLED</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1_task_executor.xhtml#a8814816f2d2940dbbc2817277eff42db">graph::TaskExecutor::get</a>().<a class="code" href="classarm__compute_1_1graph_1_1_task_executor.xhtml#af356b3757a26ca474239624e161fb49c">execute_function</a> = _real_graph_function;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    _real_graph_function                        = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_GRAPH_ENABLED */</span><span class="preprocessor"></span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="comment">// Restore schedulers</span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <a class="code" href="namespacearm__compute_1_1utility.xhtml#a067ebd28103d827b6ec17032e2344064">std::for_each</a>(std::begin(_scheduler_users), <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">std::end</a>(_scheduler_users),</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                  [&amp;](<a class="code" href="classarm__compute_1_1test_1_1framework_1_1_i_scheduler_user.xhtml">ISchedulerUser</a> * user)</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    {</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        <span class="keywordflow">if</span>(user != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        {</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;            user-&gt;<a class="code" href="classarm__compute_1_1test_1_1framework_1_1_i_scheduler_user.xhtml#a82cd5cd76f2e24a56b7f0f502d218d5d">restore_scheduler</a>();</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        }</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    });</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;}</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">bool</span>              output_timestamps&gt;</div><div class="line"><a name="l00251"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml#a73cabccc9d4406bf48f1db033dc35005">  251</a></span>&#160;<a class="code" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#afc7df496e6026b91c3f48da6821c86a9">Instrument::MeasurementsMap</a> <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml#a73cabccc9d4406bf48f1db033dc35005">SchedulerClock&lt;output_timestamps&gt;::measurements</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#afc7df496e6026b91c3f48da6821c86a9">MeasurementsMap</a> <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml#a73cabccc9d4406bf48f1db033dc35005">measurements</a>;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>    kernel_number = 0;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> kernel : _kernels)</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    {</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        std::string <a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a> = kernel.prefix + kernel.name + <span class="stringliteral">&quot; #&quot;</span> + <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">support::cpp11::to_string</a>(kernel_number++);</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        <span class="keywordflow">if</span>(output_timestamps)</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        {</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;            <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(kernel.measurements.size() != 2);</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;            <span class="keywordflow">for</span>(<span class="keyword">auto</span> <span class="keyword">const</span> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a> : kernel.measurements)</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;            {</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a>.first.find(<span class="stringliteral">&quot;[start]&quot;</span>) != std::string::npos)</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                {</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                    measurements.emplace(<span class="stringliteral">&quot;[start]&quot;</span> + name, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a>.second);</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                }</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a>.first.find(<span class="stringliteral">&quot;[end]&quot;</span>) != std::string::npos)</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                {</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                    measurements.emplace(<span class="stringliteral">&quot;[end]&quot;</span> + name, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a>.second);</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                }</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                <span class="keywordflow">else</span></div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                {</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                    <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Measurement not handled&quot;</span>);</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                }</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;            }</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        }</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        {</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;            measurements.emplace(name, kernel.measurements.begin()-&gt;second);</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        }</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    }</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml#a73cabccc9d4406bf48f1db033dc35005">measurements</a>;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;}</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">bool</span> output_timestamps&gt;</div><div class="line"><a name="l00287"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml#ae790f29ef2dea44808bc598865f04b9b">  287</a></span>&#160;std::string    <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml#ae790f29ef2dea44808bc598865f04b9b">SchedulerClock&lt;output_timestamps&gt;::instrument_header</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    std::string output{ <span class="stringliteral">&quot;&quot;</span> };</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    output += R<span class="stringliteral">&quot;(&quot;layer_data&quot; : {)&quot;;</span></div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="stringliteral">    </span><span class="keywordflow">for</span>(<span class="keyword">auto</span> i_it = _layer_data_map.cbegin(), i_end = _layer_data_map.cend(); i_it != i_end; ++i_it)</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    {</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        output += <span class="stringliteral">&quot;\&quot;&quot;</span> + i_it-&gt;first + <span class="stringliteral">&quot;\&quot; : {&quot;</span>;</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        <span class="keywordflow">if</span>(i_it-&gt;second.size() != 0)</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        {</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;            <span class="comment">// Print for each entry in layer</span></div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;            <span class="keywordflow">for</span>(<span class="keyword">auto</span> entry_it = i_it-&gt;second.cbegin(), entry_end = i_it-&gt;second.cend(); entry_it != entry_end; ++entry_it)</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;            {</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                output += <span class="stringliteral">&quot;\&quot;&quot;</span> + entry_it-&gt;first + <span class="stringliteral">&quot;\&quot; : \&quot;&quot;</span> + entry_it-&gt;second + <span class="stringliteral">&quot;\&quot;&quot;</span>;</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                <span class="keywordflow">if</span>(std::next(entry_it) != entry_end)</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                {</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                    output += <span class="stringliteral">&quot;,&quot;</span>;</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                }</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;            }</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        }</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        output += <span class="stringliteral">&quot;}&quot;</span>;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        <span class="keywordflow">if</span>(std::next(i_it) != i_end)</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        {</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;            output += <span class="stringliteral">&quot;,&quot;</span>;</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        }</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    }</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    output += <span class="stringliteral">&quot;}&quot;</span>;</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    <span class="keywordflow">return</span> output;</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;}</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;} <span class="comment">// namespace framework</span></div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;} <span class="comment">// namespace test</span></div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;<span class="keyword">template</span> <span class="keyword">class </span><a class="code" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml">arm_compute::test::framework::SchedulerClock&lt;true&gt;</a>;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="keyword">template</span> <span class="keyword">class </span><a class="code" href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml">arm_compute::test::framework::SchedulerClock&lt;false&gt;</a>;</div><div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_i_scheduler_user_xhtml_a5a8c9bfdfbdcdddc697f438ba2244620"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_i_scheduler_user.xhtml#a5a8c9bfdfbdcdddc697f438ba2244620">arm_compute::test::framework::ISchedulerUser::scheduler</a></div><div class="ttdeci">virtual IScheduler * scheduler()=0</div><div class="ttdoc">Real scheduler accessor. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_data_layer_visitor_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_data_layer_visitor.xhtml">arm_compute::graph::DataLayerVisitor</a></div><div class="ttdoc">Graph printer visitor. </div><div class="ttdef"><b>Definition:</b> <a href="_data_layer_visitor_8h_source.xhtml#l00036">DataLayerVisitor.h:36</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock_xhtml_ae790f29ef2dea44808bc598865f04b9b"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml#ae790f29ef2dea44808bc598865f04b9b">arm_compute::test::framework::SchedulerClock::instrument_header</a></div><div class="ttdeci">std::string instrument_header() const override</div><div class="ttdoc">Return JSON formatted instrument header string. </div><div class="ttdef"><b>Definition:</b> <a href="_scheduler_timer_8cpp_source.xhtml#l00287">SchedulerTimer.cpp:287</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_p_p_kernel_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_c_p_p_kernel.xhtml">arm_compute::ICPPKernel</a></div><div class="ttdoc">Common interface for all kernels implemented in C++. </div><div class="ttdef"><b>Definition:</b> <a href="_i_c_p_p_kernel_8h_source.xhtml#l00038">ICPPKernel.h:38</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_acc5dddee1cbe93a4eaf0a9f74ee96bb7"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">arm_compute::support::cpp11::to_string</a></div><div class="ttdeci">std::string to_string(T &amp;&amp;value)</div><div class="ttdoc">Convert integer and float values to string. </div><div class="ttdef"><b>Definition:</b> <a href="_string_support_8h_source.xhtml#l00168">StringSupport.h:168</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_scheduler_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml">arm_compute::IScheduler</a></div><div class="ttdoc">Scheduler interface to run kernels. </div><div class="ttdef"><b>Definition:</b> <a href="_i_scheduler_8h_source.xhtml#l00041">IScheduler.h:41</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1framework_1_1_scheduler_clock_1_1kernel__info_xhtml_a5f061b503cb1681c0b047c04d645e24e"><div class="ttname"><a href="structarm__compute_1_1test_1_1framework_1_1_scheduler_clock_1_1kernel__info.xhtml#a5f061b503cb1681c0b047c04d645e24e">arm_compute::test::framework::SchedulerClock::kernel_info::measurements</a></div><div class="ttdeci">Instrument::MeasurementsMap measurements</div><div class="ttdoc">Time it took the kernel to run. </div><div class="ttdef"><b>Definition:</b> <a href="_scheduler_timer_8h_source.xhtml#l00094">SchedulerTimer.h:94</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_data_layer_visitor_xhtml_aa75047a3bc7c8d442c8adf116c948d10"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_data_layer_visitor.xhtml#aa75047a3bc7c8d442c8adf116c948d10">arm_compute::graph::DataLayerVisitor::layer_data</a></div><div class="ttdeci">const LayerData &amp; layer_data() const</div><div class="ttdef"><b>Definition:</b> <a href="_data_layer_visitor_8cpp_source.xhtml#l00161">DataLayerVisitor.cpp:161</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_adeaa0a402395806e538066d09bcd668b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#adeaa0a402395806e538066d09bcd668b">arm_compute::test::framework::instruments_info</a></div><div class="ttdeci">std::unique_ptr&lt; InstrumentsInfo &gt; instruments_info</div><div class="ttdef"><b>Definition:</b> <a href="_framework_8cpp_source.xhtml#l00050">Framework.cpp:50</a></div></div>
<div class="ttc" id="classarm__compute_1_1_scheduler_xhtml_ad2fc671b2772dd9e28b81cf0e2514e85"><div class="ttname"><a href="classarm__compute_1_1_scheduler.xhtml#ad2fc671b2772dd9e28b81cf0e2514e85">arm_compute::Scheduler::set</a></div><div class="ttdeci">static void set(std::shared_ptr&lt; IScheduler &gt; scheduler)</div><div class="ttdoc">Sets the user defined scheduler and makes it the active scheduler. </div><div class="ttdef"><b>Definition:</b> <a href="_scheduler_8cpp_source.xhtml#l00126">Scheduler.cpp:126</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="_wall_clock_timer_8h_xhtml"><div class="ttname"><a href="_wall_clock_timer_8h.xhtml">WallClockTimer.h</a></div></div>
<div class="ttc" id="_i_node_8h_xhtml"><div class="ttname"><a href="_i_node_8h.xhtml">INode.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock_xhtml_a73cabccc9d4406bf48f1db033dc35005"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml#a73cabccc9d4406bf48f1db033dc35005">arm_compute::test::framework::SchedulerClock::measurements</a></div><div class="ttdeci">Instrument::MeasurementsMap measurements() const override</div><div class="ttdoc">Return the latest measurements. </div><div class="ttdef"><b>Definition:</b> <a href="_scheduler_timer_8cpp_source.xhtml#l00251">SchedulerTimer.cpp:251</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_wall_clock_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_wall_clock.xhtml">arm_compute::test::framework::WallClock</a></div><div class="ttdoc">Implementation of an instrument to measure elapsed wall-clock time in milliseconds. </div><div class="ttdef"><b>Definition:</b> <a href="_wall_clock_timer_8h_source.xhtml#l00039">WallClockTimer.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2023 Arm Limited. </div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="_i_c_p_p_kernel_8h_xhtml"><div class="ttname"><a href="_i_c_p_p_kernel_8h.xhtml">ICPPKernel.h</a></div></div>
<div class="ttc" id="_cast_8h_xhtml"><div class="ttname"><a href="_cast_8h.xhtml">Cast.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock_xhtml_a71e1ffcc1aad7de2a9a44276ca2fcbd1"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml#a71e1ffcc1aad7de2a9a44276ca2fcbd1">arm_compute::test::framework::SchedulerClock::SchedulerClock</a></div><div class="ttdeci">SchedulerClock(ScaleFactor scale_factor)</div><div class="ttdoc">Construct a Scheduler timer. </div><div class="ttdef"><b>Definition:</b> <a href="_scheduler_timer_8cpp_source.xhtml#l00139">SchedulerTimer.cpp:139</a></div></div>
<div class="ttc" id="_scheduler_timer_8h_xhtml"><div class="ttname"><a href="_scheduler_timer_8h.xhtml">SchedulerTimer.h</a></div></div>
<div class="ttc" id="_data_layer_visitor_8h_xhtml"><div class="ttname"><a href="_data_layer_visitor_8h.xhtml">DataLayerVisitor.h</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock_xhtml_a5d5d9ebd12cd3a7d268bc98a3fc7bf97"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml#a5d5d9ebd12cd3a7d268bc98a3fc7bf97">arm_compute::test::framework::SchedulerClock::start</a></div><div class="ttdeci">void start() override</div><div class="ttdoc">Start measuring. </div><div class="ttdef"><b>Definition:</b> <a href="_scheduler_timer_8cpp_source.xhtml#l00222">SchedulerTimer.cpp:222</a></div></div>
<div class="ttc" id="_instruments_8h_xhtml"><div class="ttname"><a href="_instruments_8h.xhtml">Instruments.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock_xhtml_a501ef37fef441a0a6a8ea8b8e30a7181"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml#a501ef37fef441a0a6a8ea8b8e30a7181">arm_compute::test::framework::SchedulerClock::id</a></div><div class="ttdeci">std::string id() const override</div><div class="ttdoc">Identifier for the instrument. </div><div class="ttdef"><b>Definition:</b> <a href="_scheduler_timer_8cpp_source.xhtml#l00040">SchedulerTimer.cpp:40</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_i_scheduler_user_xhtml_a82cd5cd76f2e24a56b7f0f502d218d5d"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_i_scheduler_user.xhtml#a82cd5cd76f2e24a56b7f0f502d218d5d">arm_compute::test::framework::ISchedulerUser::restore_scheduler</a></div><div class="ttdeci">virtual void restore_scheduler()=0</div><div class="ttdoc">Restore the original scheduler. </div></div>
<div class="ttc" id="namespacearm__compute_1_1mlgo_1_1parser_xhtml_a9fe67a1da3e2628bade473115ecbb5be"><div class="ttname"><a href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">arm_compute::mlgo::parser::end</a></div><div class="ttdeci">void end(TokenStream &amp;in, bool &amp;valid)</div><div class="ttdef"><b>Definition:</b> <a href="_m_l_g_o_parser_8cpp_source.xhtml#l00290">MLGOParser.cpp:290</a></div></div>
<div class="ttc" id="_n_e_batch_normalization_layer_kernel_8cpp_xhtml_a8f8f80d37794cde9472343e4487ba3eb"><div class="ttname"><a href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a></div><div class="ttdeci">const char * name</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00060">NEBatchNormalizationLayerKernel.cpp:60</a></div></div>
<div class="ttc" id="classarm__compute_1_1_scheduler_xhtml_a1d1cfd8ffb84e947f82999c682b666a7a72baef04098f035e8a320b03ad197818"><div class="ttname"><a href="classarm__compute_1_1_scheduler.xhtml#a1d1cfd8ffb84e947f82999c682b666a7a72baef04098f035e8a320b03ad197818">arm_compute::Scheduler::Type::CUSTOM</a></div><div class="ttdoc">Provided by the user. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_task_executor_xhtml_a8814816f2d2940dbbc2817277eff42db"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_task_executor.xhtml#a8814816f2d2940dbbc2817277eff42db">arm_compute::graph::TaskExecutor::get</a></div><div class="ttdeci">static TaskExecutor &amp; get()</div><div class="ttdoc">Task executor accessor. </div><div class="ttdef"><b>Definition:</b> <a href="_workload_8cpp_source.xhtml#l00075">Workload.cpp:75</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1framework_1_1_scheduler_clock_1_1kernel__info_xhtml_a9b45b3e13bd9167aab02e17e08916231"><div class="ttname"><a href="structarm__compute_1_1test_1_1framework_1_1_scheduler_clock_1_1kernel__info.xhtml#a9b45b3e13bd9167aab02e17e08916231">arm_compute::test::framework::SchedulerClock::kernel_info::name</a></div><div class="ttdeci">std::string name</div><div class="ttdoc">Kernel name. </div><div class="ttdef"><b>Definition:</b> <a href="_scheduler_timer_8h_source.xhtml#l00095">SchedulerTimer.h:95</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_i_scheduler_user_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_i_scheduler_user.xhtml">arm_compute::test::framework::ISchedulerUser</a></div><div class="ttdoc">Scheduler user interface. </div><div class="ttdef"><b>Definition:</b> <a href="_scheduler_timer_8h_source.xhtml#l00042">SchedulerTimer.h:42</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utility_xhtml_a067ebd28103d827b6ec17032e2344064"><div class="ttname"><a href="namespacearm__compute_1_1utility.xhtml#a067ebd28103d827b6ec17032e2344064">arm_compute::utility::for_each</a></div><div class="ttdeci">void for_each(F &amp;&amp;)</div><div class="ttdoc">Base case of for_each. </div><div class="ttdef"><b>Definition:</b> <a href="_utility_8h_source.xhtml#l00110">Utility.h:110</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock_xhtml_a84eed1102b2ad191e3659dd7c49705bc"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml#a84eed1102b2ad191e3659dd7c49705bc">arm_compute::test::framework::SchedulerClock::test_stop</a></div><div class="ttdeci">void test_stop() override</div><div class="ttdoc">End of the test. </div><div class="ttdef"><b>Definition:</b> <a href="_scheduler_timer_8cpp_source.xhtml#l00228">SchedulerTimer.cpp:228</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ac57b92957968088a392021cac1d2076b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a></div><div class="ttdeci">ScaleKernelInfo info(interpolation_policy, default_border_mode, PixelValue(), sampling_policy, false)</div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1framework_1_1_scheduler_clock_1_1kernel__info_xhtml_a78fb15511f687fe7fdb8e3ba9613648b"><div class="ttname"><a href="structarm__compute_1_1test_1_1framework_1_1_scheduler_clock_1_1kernel__info.xhtml#a78fb15511f687fe7fdb8e3ba9613648b">arm_compute::test::framework::SchedulerClock::kernel_info::prefix</a></div><div class="ttdeci">std::string prefix</div><div class="ttdoc">Kernel prefix. </div><div class="ttdef"><b>Definition:</b> <a href="_scheduler_timer_8h_source.xhtml#l00096">SchedulerTimer.h:96</a></div></div>
<div class="ttc" id="classarm__compute_1_1_scheduler_xhtml_a3f9e730c935124966325cd7c794d3153"><div class="ttname"><a href="classarm__compute_1_1_scheduler.xhtml#a3f9e730c935124966325cd7c794d3153">arm_compute::Scheduler::get_type</a></div><div class="ttdeci">static Type get_type()</div><div class="ttdoc">Returns the type of the active scheduler. </div><div class="ttdef"><b>Definition:</b> <a href="_scheduler_8cpp_source.xhtml#l00089">Scheduler.cpp:89</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_pack_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_pack.xhtml">arm_compute::ITensorPack</a></div><div class="ttdoc">Tensor packing service. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_pack_8h_source.xhtml#l00039">ITensorPack.h:39</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_instrument_xhtml_afc7df496e6026b91c3f48da6821c86a9"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#afc7df496e6026b91c3f48da6821c86a9">arm_compute::test::framework::Instrument::MeasurementsMap</a></div><div class="ttdeci">std::map&lt; std::string, Measurement &gt; MeasurementsMap</div><div class="ttdoc">Map of measurements. </div><div class="ttdef"><b>Definition:</b> <a href="_instrument_8h_source.xhtml#l00109">Instrument.h:109</a></div></div>
<div class="ttc" id="structarm__compute_1_1graph_1_1_execution_task_xhtml"><div class="ttname"><a href="structarm__compute_1_1graph_1_1_execution_task.xhtml">arm_compute::graph::ExecutionTask</a></div><div class="ttdoc">Execution task. </div><div class="ttdef"><b>Definition:</b> <a href="_workload_8h_source.xhtml#l00070">Workload.h:70</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock_xhtml_ad94b6b2e29abc159c9624278938badb3"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml#ad94b6b2e29abc159c9624278938badb3">arm_compute::test::framework::SchedulerClock::test_start</a></div><div class="ttdeci">void test_start() override</div><div class="ttdoc">Start of the test. </div><div class="ttdef"><b>Definition:</b> <a href="_scheduler_timer_8cpp_source.xhtml#l00158">SchedulerTimer.cpp:158</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_i_scheduler_user_xhtml_a4843c7dfdf88d463275133d3278df03a"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_i_scheduler_user.xhtml#a4843c7dfdf88d463275133d3278df03a">arm_compute::test::framework::ISchedulerUser::intercept_scheduler</a></div><div class="ttdeci">virtual void intercept_scheduler(std::unique_ptr&lt; IScheduler &gt; interceptor)=0</div><div class="ttdoc">Intercept the scheduler used by. </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_a3a01a70ad3a22d8b80c413e8a5977100"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#a3a01a70ad3a22d8b80c413e8a5977100">arm_compute::test::framework::ScaleFactor</a></div><div class="ttdeci">ScaleFactor</div><div class="ttdef"><b>Definition:</b> <a href="_instrument_8h_source.xhtml#l00040">Instrument.h:40</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a545be126d77ec11a9824249de111def9"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">arm_compute::test::validation::m</a></div><div class="ttdeci">const unsigned int m</div><div class="ttdef"><b>Definition:</b> <a href="_g_e_m_m_matrix_multiply_native_8cpp_source.xhtml#l00359">GEMMMatrixMultiplyNative.cpp:359</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml">arm_compute::Window</a></div><div class="ttdoc">Describe a multidimensional execution window. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00039">Window.h:39</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_p_p_kernel_xhtml_a1a30ad8f276a2310571c36239554831a"><div class="ttname"><a href="classarm__compute_1_1_i_c_p_p_kernel.xhtml#a1a30ad8f276a2310571c36239554831a">arm_compute::ICPPKernel::name</a></div><div class="ttdeci">virtual const char * name() const =0</div><div class="ttdoc">Name of the kernel. </div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1framework_1_1_scheduler_clock_1_1kernel__info_xhtml"><div class="ttname"><a href="structarm__compute_1_1test_1_1framework_1_1_scheduler_clock_1_1kernel__info.xhtml">arm_compute::test::framework::SchedulerClock::kernel_info</a></div><div class="ttdoc">Kernel information. </div><div class="ttdef"><b>Definition:</b> <a href="_scheduler_timer_8h_source.xhtml#l00092">SchedulerTimer.h:92</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_task_executor_xhtml_af356b3757a26ca474239624e161fb49c"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_task_executor.xhtml#af356b3757a26ca474239624e161fb49c">arm_compute::graph::TaskExecutor::execute_function</a></div><div class="ttdeci">std::function&lt; decltype(execute_task)&gt; execute_function</div><div class="ttdoc">Function that is responsible for executing tasks. </div><div class="ttdef"><b>Definition:</b> <a href="_workload_8h_source.xhtml#l00063">Workload.h:63</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_scheduler_clock.xhtml">arm_compute::test::framework::SchedulerClock</a></div><div class="ttdoc">Instrument creating measurements based on the information returned by clGetEventProfilingInfo for eac...</div><div class="ttdef"><b>Definition:</b> <a href="_scheduler_timer_8h_source.xhtml#l00063">SchedulerTimer.h:63</a></div></div>
<div class="ttc" id="classarm__compute_1_1_scheduler_xhtml_a0d63ca713bab377aabcfb63c192b8429"><div class="ttname"><a href="classarm__compute_1_1_scheduler.xhtml#a0d63ca713bab377aabcfb63c192b8429">arm_compute::Scheduler::get</a></div><div class="ttdeci">static IScheduler &amp; get()</div><div class="ttdoc">Access the scheduler singleton. </div><div class="ttdef"><b>Definition:</b> <a href="_scheduler_8cpp_source.xhtml#l00094">Scheduler.cpp:94</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="dir_9e71e2da941d3cafc4d98a9f6ae3de4f.xhtml">framework</a></li><li class="navelem"><a class="el" href="dir_4efd0ee2ecda32567e74991b08d544ea.xhtml">instruments</a></li><li class="navelem"><a class="el" href="_scheduler_timer_8cpp.xhtml">SchedulerTimer.cpp</a></li>
    <li class="footer">Generated on Thu Feb 16 2023 15:45:45 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
