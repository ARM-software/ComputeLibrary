<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: utils/TypePrinter.h File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.05.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('utils_2_type_printer_8h.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#namespaces">Namespaces</a> &#124;
<a href="#define-members">Macros</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">TypePrinter.h File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="_dimensions_8h_source.xhtml">arm_compute/core/Dimensions.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_error_8h_source.xhtml">arm_compute/core/Error.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_g_p_u_target_8h_source.xhtml">arm_compute/core/GPUTarget.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_kernel_descriptors_8h_source.xhtml">arm_compute/core/KernelDescriptors.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_size2_d_8h_source.xhtml">arm_compute/core/Size2D.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_strides_8h_source.xhtml">arm_compute/core/Strides.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_tensor_info_8h_source.xhtml">arm_compute/core/TensorInfo.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">arm_compute/core/Types.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_i_post_op_8h_source.xhtml">arm_compute/core/experimental/IPostOp.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="arm__compute_2core_2experimental_2_post_ops_8h_source.xhtml">arm_compute/core/experimental/PostOps.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_cast_attributes_8h_source.xhtml">arm_compute/dynamic_fusion/sketch/attributes/CastAttributes.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_clamp_attributes_8h_source.xhtml">arm_compute/dynamic_fusion/sketch/attributes/ClampAttributes.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_conv2d_attributes_8h_source.xhtml">arm_compute/dynamic_fusion/sketch/attributes/Conv2dAttributes.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_depthwise_conv2d_attributes_8h_source.xhtml">arm_compute/dynamic_fusion/sketch/attributes/DepthwiseConv2dAttributes.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_pool2d_attributes_8h_source.xhtml">arm_compute/dynamic_fusion/sketch/attributes/Pool2dAttributes.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_resize_attributes_8h_source.xhtml">arm_compute/dynamic_fusion/sketch/attributes/ResizeAttributes.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_softmax_attributes_8h_source.xhtml">arm_compute/dynamic_fusion/sketch/attributes/SoftmaxAttributes.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_gpu_pool2d_8h_source.xhtml">arm_compute/dynamic_fusion/sketch/gpu/operators/GpuPool2d.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_c_l_tuner_types_8h_source.xhtml">arm_compute/runtime/CL/CLTunerTypes.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="runtime_2_c_l_2_c_l_types_8h_source.xhtml">arm_compute/runtime/CL/CLTypes.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_function_descriptors_8h_source.xhtml">arm_compute/runtime/FunctionDescriptors.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_n_e_mat_mul_8h_source.xhtml">arm_compute/runtime/NEON/functions/NEMatMul.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_l_s_t_m_params_8h_source.xhtml">arm_compute/runtime/common/LSTMParams.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_cast_8h_source.xhtml">support/Cast.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_string_support_8h_source.xhtml">support/StringSupport.h</a>&quot;</code><br />
<code>#include &lt;ostream&gt;</code><br />
<code>#include &lt;sstream&gt;</code><br />
<code>#include &lt;string&gt;</code><br />
</div>
<p><a href="utils_2_type_printer_8h_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:namespacearm__compute"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></td></tr>
<tr class="memdesc:namespacearm__compute"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copyright (c) 2017-2023 Arm Limited. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="define-members"></a>
Macros</h2></td></tr>
<tr class="memitem:ab300564c32cc9f62fb5f79854b4368b6"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="utils_2_type_printer_8h.xhtml#ab300564c32cc9f62fb5f79854b4368b6">__CASE_WEIGHT_FORMAT</a>(wf)</td></tr>
<tr class="separator:ab300564c32cc9f62fb5f79854b4368b6"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ad023d4ca1d3facf3975c941fd728a6f4"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ad023d4ca1d3facf3975c941fd728a6f4"><td class="memTemplItemLeft" align="right" valign="top">std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ad023d4ca1d3facf3975c941fd728a6f4">to_string_if_not_null</a> (T *arg)</td></tr>
<tr class="memdesc:ad023d4ca1d3facf3975c941fd728a6f4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output if arg is not null.  <a href="namespacearm__compute.xhtml#ad023d4ca1d3facf3975c941fd728a6f4">More...</a><br /></td></tr>
<tr class="separator:ad023d4ca1d3facf3975c941fd728a6f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d8c24abe3cf6edd704d126d1d2a5420"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a1d8c24abe3cf6edd704d126d1d2a5420"><td class="memTemplItemLeft" align="right" valign="top">std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a1d8c24abe3cf6edd704d126d1d2a5420">to_string</a> (const T &amp;val)</td></tr>
<tr class="memdesc:a1d8c24abe3cf6edd704d126d1d2a5420"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fallback method: try to use std::to_string:  <a href="namespacearm__compute.xhtml#a1d8c24abe3cf6edd704d126d1d2a5420">More...</a><br /></td></tr>
<tr class="separator:a1d8c24abe3cf6edd704d126d1d2a5420"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a248960645748af1bfddffa5ed711530a"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a248960645748af1bfddffa5ed711530a"><td class="memTemplItemLeft" align="right" valign="top">::std::ostream &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a248960645748af1bfddffa5ed711530a">operator&lt;&lt;</a> (::std::ostream &amp;os, const std::vector&lt; T &gt; &amp;args)</td></tr>
<tr class="memdesc:a248960645748af1bfddffa5ed711530a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of a vector of objects.  <a href="namespacearm__compute.xhtml#a248960645748af1bfddffa5ed711530a">More...</a><br /></td></tr>
<tr class="separator:a248960645748af1bfddffa5ed711530a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6411da4e87e64e8859f8b725645ee9aa"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a6411da4e87e64e8859f8b725645ee9aa"><td class="memTemplItemLeft" align="right" valign="top">std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a6411da4e87e64e8859f8b725645ee9aa">to_string</a> (const std::vector&lt; T &gt; &amp;args)</td></tr>
<tr class="memdesc:a6411da4e87e64e8859f8b725645ee9aa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of a vector of objects.  <a href="namespacearm__compute.xhtml#a6411da4e87e64e8859f8b725645ee9aa">More...</a><br /></td></tr>
<tr class="separator:a6411da4e87e64e8859f8b725645ee9aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a18d43401e8f84ed020429b41ec4e99f5"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a18d43401e8f84ed020429b41ec4e99f5"><td class="memTemplItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a18d43401e8f84ed020429b41ec4e99f5">operator&lt;&lt;</a> (::std::ostream &amp;os, const Dimensions&lt; T &gt; &amp;dimensions)</td></tr>
<tr class="memdesc:a18d43401e8f84ed020429b41ec4e99f5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_dimensions.xhtml" title="Dimensions with dimensionality.">Dimensions</a> type.  <a href="namespacearm__compute.xhtml#a18d43401e8f84ed020429b41ec4e99f5">More...</a><br /></td></tr>
<tr class="separator:a18d43401e8f84ed020429b41ec4e99f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a295edc9f8caf95838db2c5e251153514"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a295edc9f8caf95838db2c5e251153514">operator&lt;&lt;</a> (::std::ostream &amp;os, const RoundingPolicy &amp;rounding_policy)</td></tr>
<tr class="memdesc:a295edc9f8caf95838db2c5e251153514"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the RoundingPolicy type.  <a href="namespacearm__compute.xhtml#a295edc9f8caf95838db2c5e251153514">More...</a><br /></td></tr>
<tr class="separator:a295edc9f8caf95838db2c5e251153514"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5972c7131d378f567af9c2961f088a0b"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a5972c7131d378f567af9c2961f088a0b">operator&lt;&lt;</a> (::std::ostream &amp;os, const WeightsInfo &amp;weights_info)</td></tr>
<tr class="memdesc:a5972c7131d378f567af9c2961f088a0b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_weights_info.xhtml" title="Convolution Layer Weights Information class.">WeightsInfo</a> type.  <a href="namespacearm__compute.xhtml#a5972c7131d378f567af9c2961f088a0b">More...</a><br /></td></tr>
<tr class="separator:a5972c7131d378f567af9c2961f088a0b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a352b805b77fde4f32f44af271580677b"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a352b805b77fde4f32f44af271580677b">operator&lt;&lt;</a> (::std::ostream &amp;os, const ROIPoolingLayerInfo &amp;pool_info)</td></tr>
<tr class="memdesc:a352b805b77fde4f32f44af271580677b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the ROIPoolingInfo type.  <a href="namespacearm__compute.xhtml#a352b805b77fde4f32f44af271580677b">More...</a><br /></td></tr>
<tr class="separator:a352b805b77fde4f32f44af271580677b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7e5dca61375f7583860ab07d951a323"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ac7e5dca61375f7583860ab07d951a323">to_string</a> (const ROIPoolingLayerInfo &amp;pool_info)</td></tr>
<tr class="memdesc:ac7e5dca61375f7583860ab07d951a323"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the ROIPoolingInfo type.  <a href="namespacearm__compute.xhtml#ac7e5dca61375f7583860ab07d951a323">More...</a><br /></td></tr>
<tr class="separator:ac7e5dca61375f7583860ab07d951a323"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4e600333948efa503cd2e2e7fb6d854"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ad4e600333948efa503cd2e2e7fb6d854">operator&lt;&lt;</a> (::std::ostream &amp;os, const GEMMKernelInfo &amp;gemm_info)</td></tr>
<tr class="memdesc:ad4e600333948efa503cd2e2e7fb6d854"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_g_e_m_m_kernel_info.xhtml" title="Descriptor used by the GEMM kernels.">GEMMKernelInfo</a> type.  <a href="namespacearm__compute.xhtml#ad4e600333948efa503cd2e2e7fb6d854">More...</a><br /></td></tr>
<tr class="separator:ad4e600333948efa503cd2e2e7fb6d854"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b2f9b5a23de7a67759cb0c25f7fe0ff"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a8b2f9b5a23de7a67759cb0c25f7fe0ff">operator&lt;&lt;</a> (::std::ostream &amp;os, const GEMMLHSMatrixInfo &amp;gemm_info)</td></tr>
<tr class="memdesc:a8b2f9b5a23de7a67759cb0c25f7fe0ff"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_g_e_m_m_l_h_s_matrix_info.xhtml" title="GEMM LHS (Left Hand Side) matrix information.">GEMMLHSMatrixInfo</a> type.  <a href="namespacearm__compute.xhtml#a8b2f9b5a23de7a67759cb0c25f7fe0ff">More...</a><br /></td></tr>
<tr class="separator:a8b2f9b5a23de7a67759cb0c25f7fe0ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:addc5504e0a275f050cc051811518be0a"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#addc5504e0a275f050cc051811518be0a">operator&lt;&lt;</a> (::std::ostream &amp;os, const GEMMRHSMatrixInfo &amp;gemm_info)</td></tr>
<tr class="memdesc:addc5504e0a275f050cc051811518be0a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_g_e_m_m_r_h_s_matrix_info.xhtml" title="GEMM RHS (Right Hand Side) matrix information.">GEMMRHSMatrixInfo</a> type.  <a href="namespacearm__compute.xhtml#addc5504e0a275f050cc051811518be0a">More...</a><br /></td></tr>
<tr class="separator:addc5504e0a275f050cc051811518be0a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a80389fddfab744d5439957c739fd1d0d"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a80389fddfab744d5439957c739fd1d0d">to_string</a> (const GEMMRHSMatrixInfo &amp;gemm_info)</td></tr>
<tr class="memdesc:a80389fddfab744d5439957c739fd1d0d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_g_e_m_m_r_h_s_matrix_info.xhtml" title="GEMM RHS (Right Hand Side) matrix information.">GEMMRHSMatrixInfo</a> type.  <a href="namespacearm__compute.xhtml#a80389fddfab744d5439957c739fd1d0d">More...</a><br /></td></tr>
<tr class="separator:a80389fddfab744d5439957c739fd1d0d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a410b2c68c54cd633b4ed926bdea4a6d6"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a410b2c68c54cd633b4ed926bdea4a6d6">to_string</a> (const GEMMLHSMatrixInfo &amp;gemm_info)</td></tr>
<tr class="memdesc:a410b2c68c54cd633b4ed926bdea4a6d6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_g_e_m_m_l_h_s_matrix_info.xhtml" title="GEMM LHS (Left Hand Side) matrix information.">GEMMLHSMatrixInfo</a> type.  <a href="namespacearm__compute.xhtml#a410b2c68c54cd633b4ed926bdea4a6d6">More...</a><br /></td></tr>
<tr class="separator:a410b2c68c54cd633b4ed926bdea4a6d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c7e41ebd7bc09e91ba0fdb11315fc19"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a3c7e41ebd7bc09e91ba0fdb11315fc19">to_string</a> (const GEMMKernelInfo &amp;gemm_info)</td></tr>
<tr class="memdesc:a3c7e41ebd7bc09e91ba0fdb11315fc19"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_g_e_m_m_kernel_info.xhtml" title="Descriptor used by the GEMM kernels.">GEMMKernelInfo</a> type.  <a href="namespacearm__compute.xhtml#a3c7e41ebd7bc09e91ba0fdb11315fc19">More...</a><br /></td></tr>
<tr class="separator:a3c7e41ebd7bc09e91ba0fdb11315fc19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af81bb4f87d418311c7ca43a28c74bf03"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#af81bb4f87d418311c7ca43a28c74bf03">operator&lt;&lt;</a> (::std::ostream &amp;os, const BoundingBoxTransformInfo &amp;bbox_info)</td></tr>
<tr class="memdesc:af81bb4f87d418311c7ca43a28c74bf03"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_bounding_box_transform_info.xhtml" title="Bounding Box Transform information class.">BoundingBoxTransformInfo</a> type.  <a href="namespacearm__compute.xhtml#af81bb4f87d418311c7ca43a28c74bf03">More...</a><br /></td></tr>
<tr class="separator:af81bb4f87d418311c7ca43a28c74bf03"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aadd27b86f0ff4fbb03ed673a549e91a8"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aadd27b86f0ff4fbb03ed673a549e91a8">to_string</a> (const BoundingBoxTransformInfo &amp;bbox_info)</td></tr>
<tr class="memdesc:aadd27b86f0ff4fbb03ed673a549e91a8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_bounding_box_transform_info.xhtml" title="Bounding Box Transform information class.">BoundingBoxTransformInfo</a> type.  <a href="namespacearm__compute.xhtml#aadd27b86f0ff4fbb03ed673a549e91a8">More...</a><br /></td></tr>
<tr class="separator:aadd27b86f0ff4fbb03ed673a549e91a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a59ea8b6694897a281eb3105f5c99f28f"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a59ea8b6694897a281eb3105f5c99f28f">operator&lt;&lt;</a> (::std::ostream &amp;os, const ComputeAnchorsInfo &amp;anchors_info)</td></tr>
<tr class="memdesc:a59ea8b6694897a281eb3105f5c99f28f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_compute_anchors_info.xhtml" title="ComputeAnchors information class.">ComputeAnchorsInfo</a> type.  <a href="namespacearm__compute.xhtml#a59ea8b6694897a281eb3105f5c99f28f">More...</a><br /></td></tr>
<tr class="separator:a59ea8b6694897a281eb3105f5c99f28f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a24bc4de5c636b56f9b59533fead920c2"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a24bc4de5c636b56f9b59533fead920c2">to_string</a> (const ComputeAnchorsInfo &amp;anchors_info)</td></tr>
<tr class="memdesc:a24bc4de5c636b56f9b59533fead920c2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_compute_anchors_info.xhtml" title="ComputeAnchors information class.">ComputeAnchorsInfo</a> type.  <a href="namespacearm__compute.xhtml#a24bc4de5c636b56f9b59533fead920c2">More...</a><br /></td></tr>
<tr class="separator:a24bc4de5c636b56f9b59533fead920c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1a54a883f8acc0664accdae9bed93494"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a1a54a883f8acc0664accdae9bed93494">operator&lt;&lt;</a> (::std::ostream &amp;os, const GenerateProposalsInfo &amp;proposals_info)</td></tr>
<tr class="memdesc:a1a54a883f8acc0664accdae9bed93494"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_generate_proposals_info.xhtml" title="Generate Proposals Information class.">GenerateProposalsInfo</a> type.  <a href="namespacearm__compute.xhtml#a1a54a883f8acc0664accdae9bed93494">More...</a><br /></td></tr>
<tr class="separator:a1a54a883f8acc0664accdae9bed93494"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa597016c0aaa2990ed31b8aaa6f2ccc3"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aa597016c0aaa2990ed31b8aaa6f2ccc3">to_string</a> (const GenerateProposalsInfo &amp;proposals_info)</td></tr>
<tr class="memdesc:aa597016c0aaa2990ed31b8aaa6f2ccc3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_generate_proposals_info.xhtml" title="Generate Proposals Information class.">GenerateProposalsInfo</a> type.  <a href="namespacearm__compute.xhtml#aa597016c0aaa2990ed31b8aaa6f2ccc3">More...</a><br /></td></tr>
<tr class="separator:aa597016c0aaa2990ed31b8aaa6f2ccc3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a759d06440ed4adc531dd10c8c76e3b88"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a759d06440ed4adc531dd10c8c76e3b88">operator&lt;&lt;</a> (::std::ostream &amp;os, const QuantizationInfo &amp;qinfo)</td></tr>
<tr class="memdesc:a759d06440ed4adc531dd10c8c76e3b88"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_quantization_info.xhtml" title="Quantization information.">QuantizationInfo</a> type.  <a href="namespacearm__compute.xhtml#a759d06440ed4adc531dd10c8c76e3b88">More...</a><br /></td></tr>
<tr class="separator:a759d06440ed4adc531dd10c8c76e3b88"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9fd48b3c01116b217a684aaeaf8b24f"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ad9fd48b3c01116b217a684aaeaf8b24f">to_string</a> (const QuantizationInfo &amp;quantization_info)</td></tr>
<tr class="memdesc:ad9fd48b3c01116b217a684aaeaf8b24f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_quantization_info.xhtml" title="Quantization information.">QuantizationInfo</a> type.  <a href="namespacearm__compute.xhtml#ad9fd48b3c01116b217a684aaeaf8b24f">More...</a><br /></td></tr>
<tr class="separator:ad9fd48b3c01116b217a684aaeaf8b24f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d79efe2673aeb3f9a9160b6a78de50c"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a9d79efe2673aeb3f9a9160b6a78de50c">operator&lt;&lt;</a> (::std::ostream &amp;os, const ActivationLayerInfo::ActivationFunction &amp;act_function)</td></tr>
<tr class="memdesc:a9d79efe2673aeb3f9a9160b6a78de50c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the activation function type.  <a href="namespacearm__compute.xhtml#a9d79efe2673aeb3f9a9160b6a78de50c">More...</a><br /></td></tr>
<tr class="separator:a9d79efe2673aeb3f9a9160b6a78de50c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72626d2cca3922127c41526e37e9e623"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a72626d2cca3922127c41526e37e9e623">to_string</a> (const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">arm_compute::ActivationLayerInfo</a> &amp;info)</td></tr>
<tr class="memdesc:a72626d2cca3922127c41526e37e9e623"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the activation function info type.  <a href="namespacearm__compute.xhtml#a72626d2cca3922127c41526e37e9e623">More...</a><br /></td></tr>
<tr class="separator:a72626d2cca3922127c41526e37e9e623"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a266046e37c7ebb4436ddd9322afa3c97"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a266046e37c7ebb4436ddd9322afa3c97">operator&lt;&lt;</a> (::std::ostream &amp;os, const ActivationLayerInfo *info)</td></tr>
<tr class="memdesc:a266046e37c7ebb4436ddd9322afa3c97"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the activation function info.  <a href="namespacearm__compute.xhtml#a266046e37c7ebb4436ddd9322afa3c97">More...</a><br /></td></tr>
<tr class="separator:a266046e37c7ebb4436ddd9322afa3c97"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a18c453150ab547c1add44b3ed3bc56"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a8a18c453150ab547c1add44b3ed3bc56">to_string</a> (const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9ea">arm_compute::ActivationLayerInfo::ActivationFunction</a> &amp;function)</td></tr>
<tr class="memdesc:a8a18c453150ab547c1add44b3ed3bc56"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the activation function type.  <a href="namespacearm__compute.xhtml#a8a18c453150ab547c1add44b3ed3bc56">More...</a><br /></td></tr>
<tr class="separator:a8a18c453150ab547c1add44b3ed3bc56"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ab7370aab6e5698990c50c8871fa6fb"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a2ab7370aab6e5698990c50c8871fa6fb">operator&lt;&lt;</a> (::std::ostream &amp;os, const NormType &amp;norm_type)</td></tr>
<tr class="memdesc:a2ab7370aab6e5698990c50c8871fa6fb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the NormType type.  <a href="namespacearm__compute.xhtml#a2ab7370aab6e5698990c50c8871fa6fb">More...</a><br /></td></tr>
<tr class="separator:a2ab7370aab6e5698990c50c8871fa6fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45dd771bdecbafb975fd267c2ae320a7"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a45dd771bdecbafb975fd267c2ae320a7">to_string</a> (const <a class="el" href="classarm__compute_1_1_normalization_layer_info.xhtml">arm_compute::NormalizationLayerInfo</a> &amp;info)</td></tr>
<tr class="memdesc:a45dd771bdecbafb975fd267c2ae320a7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of <a class="el" href="classarm__compute_1_1_normalization_layer_info.xhtml">NormalizationLayerInfo</a>.  <a href="namespacearm__compute.xhtml#a45dd771bdecbafb975fd267c2ae320a7">More...</a><br /></td></tr>
<tr class="separator:a45dd771bdecbafb975fd267c2ae320a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e422c610c91f611590173cd595c94c5"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a6e422c610c91f611590173cd595c94c5">operator&lt;&lt;</a> (::std::ostream &amp;os, const NormalizationLayerInfo &amp;info)</td></tr>
<tr class="memdesc:a6e422c610c91f611590173cd595c94c5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of <a class="el" href="classarm__compute_1_1_normalization_layer_info.xhtml">NormalizationLayerInfo</a>.  <a href="namespacearm__compute.xhtml#a6e422c610c91f611590173cd595c94c5">More...</a><br /></td></tr>
<tr class="separator:a6e422c610c91f611590173cd595c94c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a336cf1e870f467e44c184587a13feeec"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a336cf1e870f467e44c184587a13feeec">operator&lt;&lt;</a> (::std::ostream &amp;os, const PoolingType &amp;pool_type)</td></tr>
<tr class="memdesc:a336cf1e870f467e44c184587a13feeec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the PoolingType type.  <a href="namespacearm__compute.xhtml#a336cf1e870f467e44c184587a13feeec">More...</a><br /></td></tr>
<tr class="separator:a336cf1e870f467e44c184587a13feeec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae72a61a2ca5c962ab1d37065e5598060"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ae72a61a2ca5c962ab1d37065e5598060">operator&lt;&lt;</a> (::std::ostream &amp;os, const PoolingLayerInfo &amp;info)</td></tr>
<tr class="memdesc:ae72a61a2ca5c962ab1d37065e5598060"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of <a class="el" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a>.  <a href="namespacearm__compute.xhtml#ae72a61a2ca5c962ab1d37065e5598060">More...</a><br /></td></tr>
<tr class="separator:ae72a61a2ca5c962ab1d37065e5598060"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a25dac68b6321b9e53027e79222a0eb7f"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a25dac68b6321b9e53027e79222a0eb7f">to_string</a> (const RoundingPolicy &amp;rounding_policy)</td></tr>
<tr class="memdesc:a25dac68b6321b9e53027e79222a0eb7f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of <a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a>.  <a href="namespacearm__compute.xhtml#a25dac68b6321b9e53027e79222a0eb7f">More...</a><br /></td></tr>
<tr class="separator:a25dac68b6321b9e53027e79222a0eb7f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1698cb24508a2bc45962bc887f18a8d0"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a1698cb24508a2bc45962bc887f18a8d0">operator&lt;&lt;</a> (::std::ostream &amp;os, const DataLayout &amp;data_layout)</td></tr>
<tr class="memdesc:a1698cb24508a2bc45962bc887f18a8d0"><td class="mdescLeft">&#160;</td><td class="mdescRight">[Print DataLayout type]  <a href="namespacearm__compute.xhtml#a1698cb24508a2bc45962bc887f18a8d0">More...</a><br /></td></tr>
<tr class="separator:a1698cb24508a2bc45962bc887f18a8d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae1240e4698e8a901179e519102b5e033"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ae1240e4698e8a901179e519102b5e033">to_string</a> (const <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">arm_compute::DataLayout</a> &amp;data_layout)</td></tr>
<tr class="memdesc:ae1240e4698e8a901179e519102b5e033"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the DataLayout type.  <a href="namespacearm__compute.xhtml#ae1240e4698e8a901179e519102b5e033">More...</a><br /></td></tr>
<tr class="separator:ae1240e4698e8a901179e519102b5e033"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adec19acb64bfca26fa53ef76f03b79ef"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#adec19acb64bfca26fa53ef76f03b79ef">operator&lt;&lt;</a> (::std::ostream &amp;os, const DataLayoutDimension &amp;data_layout_dim)</td></tr>
<tr class="memdesc:adec19acb64bfca26fa53ef76f03b79ef"><td class="mdescLeft">&#160;</td><td class="mdescRight">[Print DataLayout type]  <a href="namespacearm__compute.xhtml#adec19acb64bfca26fa53ef76f03b79ef">More...</a><br /></td></tr>
<tr class="separator:adec19acb64bfca26fa53ef76f03b79ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a685af15532d70b8682bcc52f06f034f9"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a685af15532d70b8682bcc52f06f034f9">operator&lt;&lt;</a> (::std::ostream &amp;os, const DataType &amp;data_type)</td></tr>
<tr class="memdesc:a685af15532d70b8682bcc52f06f034f9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the DataType type.  <a href="namespacearm__compute.xhtml#a685af15532d70b8682bcc52f06f034f9">More...</a><br /></td></tr>
<tr class="separator:a685af15532d70b8682bcc52f06f034f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a96b47511b549b48d2ead05b5c757ccc9"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a96b47511b549b48d2ead05b5c757ccc9">to_string</a> (const <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">arm_compute::DataType</a> &amp;data_type)</td></tr>
<tr class="memdesc:a96b47511b549b48d2ead05b5c757ccc9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the DataType type.  <a href="namespacearm__compute.xhtml#a96b47511b549b48d2ead05b5c757ccc9">More...</a><br /></td></tr>
<tr class="separator:a96b47511b549b48d2ead05b5c757ccc9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b22e54b0ac0204c3b89aebcd695fa03"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a3b22e54b0ac0204c3b89aebcd695fa03">operator&lt;&lt;</a> (::std::ostream &amp;os, const Format &amp;format)</td></tr>
<tr class="memdesc:a3b22e54b0ac0204c3b89aebcd695fa03"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the Format type.  <a href="namespacearm__compute.xhtml#a3b22e54b0ac0204c3b89aebcd695fa03">More...</a><br /></td></tr>
<tr class="separator:a3b22e54b0ac0204c3b89aebcd695fa03"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab0e6381843dc9901bb59285ec846dc5d"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ab0e6381843dc9901bb59285ec846dc5d">to_string</a> (const Format &amp;format)</td></tr>
<tr class="memdesc:ab0e6381843dc9901bb59285ec846dc5d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the Format type.  <a href="namespacearm__compute.xhtml#ab0e6381843dc9901bb59285ec846dc5d">More...</a><br /></td></tr>
<tr class="separator:ab0e6381843dc9901bb59285ec846dc5d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa66be15c012986ebd4c1934b97e08a36"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aa66be15c012986ebd4c1934b97e08a36">operator&lt;&lt;</a> (::std::ostream &amp;os, const Channel &amp;channel)</td></tr>
<tr class="memdesc:aa66be15c012986ebd4c1934b97e08a36"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the Channel type.  <a href="namespacearm__compute.xhtml#aa66be15c012986ebd4c1934b97e08a36">More...</a><br /></td></tr>
<tr class="separator:aa66be15c012986ebd4c1934b97e08a36"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a813e71cd70c2bbcbf0743fa83a3608b9"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a813e71cd70c2bbcbf0743fa83a3608b9">to_string</a> (const Channel &amp;channel)</td></tr>
<tr class="memdesc:a813e71cd70c2bbcbf0743fa83a3608b9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the Channel type.  <a href="namespacearm__compute.xhtml#a813e71cd70c2bbcbf0743fa83a3608b9">More...</a><br /></td></tr>
<tr class="separator:a813e71cd70c2bbcbf0743fa83a3608b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7929032d41d5f23cd1778a70508d0219"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a7929032d41d5f23cd1778a70508d0219">operator&lt;&lt;</a> (::std::ostream &amp;os, const BorderMode &amp;mode)</td></tr>
<tr class="memdesc:a7929032d41d5f23cd1778a70508d0219"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the BorderMode type.  <a href="namespacearm__compute.xhtml#a7929032d41d5f23cd1778a70508d0219">More...</a><br /></td></tr>
<tr class="separator:a7929032d41d5f23cd1778a70508d0219"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af32c4c5cdd0efde09774eb803bc8a0bd"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#af32c4c5cdd0efde09774eb803bc8a0bd">operator&lt;&lt;</a> (::std::ostream &amp;os, const BorderSize &amp;border)</td></tr>
<tr class="memdesc:af32c4c5cdd0efde09774eb803bc8a0bd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_border_size.xhtml" title="Container for 2D border size.">BorderSize</a> type.  <a href="namespacearm__compute.xhtml#af32c4c5cdd0efde09774eb803bc8a0bd">More...</a><br /></td></tr>
<tr class="separator:af32c4c5cdd0efde09774eb803bc8a0bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af15a06b73e1fde15f0809ce07bf1ab7d"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#af15a06b73e1fde15f0809ce07bf1ab7d">operator&lt;&lt;</a> (::std::ostream &amp;os, const PaddingList &amp;padding)</td></tr>
<tr class="memdesc:af15a06b73e1fde15f0809ce07bf1ab7d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the PaddingList type.  <a href="namespacearm__compute.xhtml#af15a06b73e1fde15f0809ce07bf1ab7d">More...</a><br /></td></tr>
<tr class="separator:af15a06b73e1fde15f0809ce07bf1ab7d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9caac285297030f50a972095e767aff9"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a9caac285297030f50a972095e767aff9">operator&lt;&lt;</a> (::std::ostream &amp;os, const Multiples &amp;multiples)</td></tr>
<tr class="memdesc:a9caac285297030f50a972095e767aff9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the Multiples type.  <a href="namespacearm__compute.xhtml#a9caac285297030f50a972095e767aff9">More...</a><br /></td></tr>
<tr class="separator:a9caac285297030f50a972095e767aff9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a509047aefc691398f1bb60b1f967a98b"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a509047aefc691398f1bb60b1f967a98b">operator&lt;&lt;</a> (::std::ostream &amp;os, const InterpolationPolicy &amp;policy)</td></tr>
<tr class="memdesc:a509047aefc691398f1bb60b1f967a98b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the InterpolationPolicy type.  <a href="namespacearm__compute.xhtml#a509047aefc691398f1bb60b1f967a98b">More...</a><br /></td></tr>
<tr class="separator:a509047aefc691398f1bb60b1f967a98b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab8eb6dc1ba89bb8a69f1c3845988a2b"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aab8eb6dc1ba89bb8a69f1c3845988a2b">operator&lt;&lt;</a> (::std::ostream &amp;os, const SamplingPolicy &amp;policy)</td></tr>
<tr class="memdesc:aab8eb6dc1ba89bb8a69f1c3845988a2b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the SamplingPolicy type.  <a href="namespacearm__compute.xhtml#aab8eb6dc1ba89bb8a69f1c3845988a2b">More...</a><br /></td></tr>
<tr class="separator:aab8eb6dc1ba89bb8a69f1c3845988a2b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2a85ebd528f100a15183253aa819cc2b"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a2a85ebd528f100a15183253aa819cc2b">operator&lt;&lt;</a> (std::ostream &amp;os, const ITensorInfo *info)</td></tr>
<tr class="memdesc:a2a85ebd528f100a15183253aa819cc2b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">ITensorInfo</a> type.  <a href="namespacearm__compute.xhtml#a2a85ebd528f100a15183253aa819cc2b">More...</a><br /></td></tr>
<tr class="separator:a2a85ebd528f100a15183253aa819cc2b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab398837465010958bfccff032ad1ee51"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ab398837465010958bfccff032ad1ee51">operator&lt;&lt;</a> (::std::ostream &amp;os, const TensorInfo &amp;info)</td></tr>
<tr class="memdesc:ab398837465010958bfccff032ad1ee51"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the const <a class="el" href="classarm__compute_1_1_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">TensorInfo</a>&amp; type.  <a href="namespacearm__compute.xhtml#ab398837465010958bfccff032ad1ee51">More...</a><br /></td></tr>
<tr class="separator:ab398837465010958bfccff032ad1ee51"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48fd5e28bdb4975c141841f0b96f8707"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a48fd5e28bdb4975c141841f0b96f8707">to_string</a> (const TensorInfo &amp;info)</td></tr>
<tr class="memdesc:a48fd5e28bdb4975c141841f0b96f8707"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the const <a class="el" href="classarm__compute_1_1_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">TensorInfo</a>&amp; type.  <a href="namespacearm__compute.xhtml#a48fd5e28bdb4975c141841f0b96f8707">More...</a><br /></td></tr>
<tr class="separator:a48fd5e28bdb4975c141841f0b96f8707"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac2f0244b78d1f23b9a3265770df5be71"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ac2f0244b78d1f23b9a3265770df5be71">to_string</a> (const ITensorInfo &amp;info)</td></tr>
<tr class="memdesc:ac2f0244b78d1f23b9a3265770df5be71"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">ITensorInfo</a>&amp; type.  <a href="namespacearm__compute.xhtml#ac2f0244b78d1f23b9a3265770df5be71">More...</a><br /></td></tr>
<tr class="separator:ac2f0244b78d1f23b9a3265770df5be71"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b1d64a183e573398d79f2db7ee3378f"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a3b1d64a183e573398d79f2db7ee3378f">to_string</a> (const ITensorInfo *info)</td></tr>
<tr class="memdesc:a3b1d64a183e573398d79f2db7ee3378f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the const ITensorInfo* type.  <a href="namespacearm__compute.xhtml#a3b1d64a183e573398d79f2db7ee3378f">More...</a><br /></td></tr>
<tr class="separator:a3b1d64a183e573398d79f2db7ee3378f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b2e4a41ed5fd096ac0c8b57153677e5"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a8b2e4a41ed5fd096ac0c8b57153677e5">to_string</a> (ITensorInfo *info)</td></tr>
<tr class="memdesc:a8b2e4a41ed5fd096ac0c8b57153677e5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the ITensorInfo* type.  <a href="namespacearm__compute.xhtml#a8b2e4a41ed5fd096ac0c8b57153677e5">More...</a><br /></td></tr>
<tr class="separator:a8b2e4a41ed5fd096ac0c8b57153677e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab56ca10105475a301db13c3e40fe4617"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ab56ca10105475a301db13c3e40fe4617">to_string</a> (const ITensor *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)</td></tr>
<tr class="memdesc:ab56ca10105475a301db13c3e40fe4617"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">ITensorInfo</a> type obtained from const ITensor* type.  <a href="namespacearm__compute.xhtml#ab56ca10105475a301db13c3e40fe4617">More...</a><br /></td></tr>
<tr class="separator:ab56ca10105475a301db13c3e40fe4617"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38419ff7319ef64c2c84c2e9a3cdfb18"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a38419ff7319ef64c2c84c2e9a3cdfb18">to_string</a> (ITensor *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)</td></tr>
<tr class="memdesc:a38419ff7319ef64c2c84c2e9a3cdfb18"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">ITensorInfo</a> type obtained from the ITensor* type.  <a href="namespacearm__compute.xhtml#a38419ff7319ef64c2c84c2e9a3cdfb18">More...</a><br /></td></tr>
<tr class="separator:a38419ff7319ef64c2c84c2e9a3cdfb18"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a300e12f3b8d36f3108956d8c692ce98d"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a300e12f3b8d36f3108956d8c692ce98d">to_string</a> (ITensor &amp;<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)</td></tr>
<tr class="memdesc:a300e12f3b8d36f3108956d8c692ce98d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">ITensorInfo</a> type obtained from the <a class="el" href="classarm__compute_1_1_i_tensor.xhtml" title="Interface for CPU tensor.">ITensor</a>&amp; type.  <a href="namespacearm__compute.xhtml#a300e12f3b8d36f3108956d8c692ce98d">More...</a><br /></td></tr>
<tr class="separator:a300e12f3b8d36f3108956d8c692ce98d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa32488ee1dd78e0464ed23e8cc2b6e49"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:aa32488ee1dd78e0464ed23e8cc2b6e49"><td class="memTemplItemLeft" align="right" valign="top">std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aa32488ee1dd78e0464ed23e8cc2b6e49">to_string</a> (const Dimensions&lt; T &gt; &amp;dimensions)</td></tr>
<tr class="memdesc:aa32488ee1dd78e0464ed23e8cc2b6e49"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_dimensions.xhtml" title="Dimensions with dimensionality.">Dimensions</a> type.  <a href="namespacearm__compute.xhtml#aa32488ee1dd78e0464ed23e8cc2b6e49">More...</a><br /></td></tr>
<tr class="separator:aa32488ee1dd78e0464ed23e8cc2b6e49"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c4486f45128be7156e38e6dea345a16"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a1c4486f45128be7156e38e6dea345a16">to_string</a> (const Strides &amp;stride)</td></tr>
<tr class="memdesc:a1c4486f45128be7156e38e6dea345a16"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_strides.xhtml" title="Strides of an item in bytes.">Strides</a> type.  <a href="namespacearm__compute.xhtml#a1c4486f45128be7156e38e6dea345a16">More...</a><br /></td></tr>
<tr class="separator:a1c4486f45128be7156e38e6dea345a16"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d9b56d1b106b79fc5c5411372222d0f"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a9d9b56d1b106b79fc5c5411372222d0f">to_string</a> (const TensorShape &amp;shape)</td></tr>
<tr class="memdesc:a9d9b56d1b106b79fc5c5411372222d0f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml" title="Shape of a tensor.">TensorShape</a> type.  <a href="namespacearm__compute.xhtml#a9d9b56d1b106b79fc5c5411372222d0f">More...</a><br /></td></tr>
<tr class="separator:a9d9b56d1b106b79fc5c5411372222d0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a805a74997e303d29108845956a674387"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a805a74997e303d29108845956a674387">to_string</a> (const Coordinates &amp;coord)</td></tr>
<tr class="memdesc:a805a74997e303d29108845956a674387"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_coordinates.xhtml" title="Coordinates of an item.">Coordinates</a> type.  <a href="namespacearm__compute.xhtml#a805a74997e303d29108845956a674387">More...</a><br /></td></tr>
<tr class="separator:a805a74997e303d29108845956a674387"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0fc75dce8064a37effa5e71344b6a5d2"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a0fc75dce8064a37effa5e71344b6a5d2">operator&lt;&lt;</a> (::std::ostream &amp;os, const GEMMReshapeInfo &amp;info)</td></tr>
<tr class="memdesc:a0fc75dce8064a37effa5e71344b6a5d2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml" title="GEMM reshape information class.">GEMMReshapeInfo</a> type.  <a href="namespacearm__compute.xhtml#a0fc75dce8064a37effa5e71344b6a5d2">More...</a><br /></td></tr>
<tr class="separator:a0fc75dce8064a37effa5e71344b6a5d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5fdae5de2d2cf2e7957f0299d17ce5ec"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a5fdae5de2d2cf2e7957f0299d17ce5ec">operator&lt;&lt;</a> (::std::ostream &amp;os, const GEMMInfo &amp;info)</td></tr>
<tr class="memdesc:a5fdae5de2d2cf2e7957f0299d17ce5ec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_g_e_m_m_info.xhtml" title="GEMM information class.">GEMMInfo</a> type.  <a href="namespacearm__compute.xhtml#a5fdae5de2d2cf2e7957f0299d17ce5ec">More...</a><br /></td></tr>
<tr class="separator:a5fdae5de2d2cf2e7957f0299d17ce5ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ed8dc0f587448d14a1a33cbd5fc4f70"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a6ed8dc0f587448d14a1a33cbd5fc4f70">operator&lt;&lt;</a> (::std::ostream &amp;os, const Window::Dimension &amp;dim)</td></tr>
<tr class="memdesc:a6ed8dc0f587448d14a1a33cbd5fc4f70"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_window_1_1_dimension.xhtml" title="Describe one of the image&#39;s dimensions with a start, end and step.">Window::Dimension</a> type.  <a href="namespacearm__compute.xhtml#a6ed8dc0f587448d14a1a33cbd5fc4f70">More...</a><br /></td></tr>
<tr class="separator:a6ed8dc0f587448d14a1a33cbd5fc4f70"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afc6e49991e36423027a467eab1e405b2"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#afc6e49991e36423027a467eab1e405b2">operator&lt;&lt;</a> (::std::ostream &amp;os, const Window &amp;win)</td></tr>
<tr class="memdesc:afc6e49991e36423027a467eab1e405b2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window.">Window</a> type.  <a href="namespacearm__compute.xhtml#afc6e49991e36423027a467eab1e405b2">More...</a><br /></td></tr>
<tr class="separator:afc6e49991e36423027a467eab1e405b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26a595cd5522bae4fa1c4f2fb9b8f4d5"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a26a595cd5522bae4fa1c4f2fb9b8f4d5">to_string</a> (const WeightsInfo &amp;info)</td></tr>
<tr class="memdesc:a26a595cd5522bae4fa1c4f2fb9b8f4d5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_weights_info.xhtml" title="Convolution Layer Weights Information class.">WeightsInfo</a> type.  <a href="namespacearm__compute.xhtml#a26a595cd5522bae4fa1c4f2fb9b8f4d5">More...</a><br /></td></tr>
<tr class="separator:a26a595cd5522bae4fa1c4f2fb9b8f4d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adac3c1908846c6361e664a353ad1c3cf"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#adac3c1908846c6361e664a353ad1c3cf">to_string</a> (const GEMMReshapeInfo &amp;info)</td></tr>
<tr class="memdesc:adac3c1908846c6361e664a353ad1c3cf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_g_e_m_m_reshape_info.xhtml" title="GEMM reshape information class.">GEMMReshapeInfo</a> type.  <a href="namespacearm__compute.xhtml#adac3c1908846c6361e664a353ad1c3cf">More...</a><br /></td></tr>
<tr class="separator:adac3c1908846c6361e664a353ad1c3cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ac2dfdfad6db71a5cf2ecee6b70f722"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a8ac2dfdfad6db71a5cf2ecee6b70f722">to_string</a> (const GEMMInfo &amp;info)</td></tr>
<tr class="memdesc:a8ac2dfdfad6db71a5cf2ecee6b70f722"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_g_e_m_m_info.xhtml" title="GEMM information class.">GEMMInfo</a> type.  <a href="namespacearm__compute.xhtml#a8ac2dfdfad6db71a5cf2ecee6b70f722">More...</a><br /></td></tr>
<tr class="separator:a8ac2dfdfad6db71a5cf2ecee6b70f722"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab6ea50ec0a98c2180e6530cfcb5eb366"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ab6ea50ec0a98c2180e6530cfcb5eb366">to_string</a> (const Window::Dimension &amp;dim)</td></tr>
<tr class="memdesc:ab6ea50ec0a98c2180e6530cfcb5eb366"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_window_1_1_dimension.xhtml" title="Describe one of the image&#39;s dimensions with a start, end and step.">Window::Dimension</a> type.  <a href="namespacearm__compute.xhtml#ab6ea50ec0a98c2180e6530cfcb5eb366">More...</a><br /></td></tr>
<tr class="separator:ab6ea50ec0a98c2180e6530cfcb5eb366"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a99aba2774f142d36c6a286cbfe027772"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a99aba2774f142d36c6a286cbfe027772">to_string</a> (const Window &amp;win)</td></tr>
<tr class="memdesc:a99aba2774f142d36c6a286cbfe027772"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window.">Window</a>&amp; type.  <a href="namespacearm__compute.xhtml#a99aba2774f142d36c6a286cbfe027772">More...</a><br /></td></tr>
<tr class="separator:a99aba2774f142d36c6a286cbfe027772"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a329c465ec53776c2336d51c447117812"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a329c465ec53776c2336d51c447117812">to_string</a> (Window *win)</td></tr>
<tr class="memdesc:a329c465ec53776c2336d51c447117812"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the Window* type.  <a href="namespacearm__compute.xhtml#a329c465ec53776c2336d51c447117812">More...</a><br /></td></tr>
<tr class="separator:a329c465ec53776c2336d51c447117812"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a17881750c427aedd95deba46a4366ace"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a17881750c427aedd95deba46a4366ace">operator&lt;&lt;</a> (::std::ostream &amp;os, const Rectangle &amp;rect)</td></tr>
<tr class="memdesc:a17881750c427aedd95deba46a4366ace"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_rectangle.xhtml" title="Rectangle type.">Rectangle</a> type.  <a href="namespacearm__compute.xhtml#a17881750c427aedd95deba46a4366ace">More...</a><br /></td></tr>
<tr class="separator:a17881750c427aedd95deba46a4366ace"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a23cde8eb733fe42667cd5b2c79141dba"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a23cde8eb733fe42667cd5b2c79141dba">operator&lt;&lt;</a> (::std::ostream &amp;os, const PaddingMode &amp;mode)</td></tr>
<tr class="memdesc:a23cde8eb733fe42667cd5b2c79141dba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the PaddingMode type.  <a href="namespacearm__compute.xhtml#a23cde8eb733fe42667cd5b2c79141dba">More...</a><br /></td></tr>
<tr class="separator:a23cde8eb733fe42667cd5b2c79141dba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a58c3c62a56ede81c516f987a263bc95a"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a58c3c62a56ede81c516f987a263bc95a">to_string</a> (const PaddingMode &amp;mode)</td></tr>
<tr class="memdesc:a58c3c62a56ede81c516f987a263bc95a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the PaddingMode type.  <a href="namespacearm__compute.xhtml#a58c3c62a56ede81c516f987a263bc95a">More...</a><br /></td></tr>
<tr class="separator:a58c3c62a56ede81c516f987a263bc95a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8af36ae3a3613112c3a95e57f606359a"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a8af36ae3a3613112c3a95e57f606359a">operator&lt;&lt;</a> (::std::ostream &amp;os, const PadStrideInfo &amp;pad_stride_info)</td></tr>
<tr class="memdesc:a8af36ae3a3613112c3a95e57f606359a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml" title="Padding and stride information class.">PadStrideInfo</a> type.  <a href="namespacearm__compute.xhtml#a8af36ae3a3613112c3a95e57f606359a">More...</a><br /></td></tr>
<tr class="separator:a8af36ae3a3613112c3a95e57f606359a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2c0e6c1c4cf10da25e7a7362ba151ba2"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a2c0e6c1c4cf10da25e7a7362ba151ba2">to_string</a> (const PadStrideInfo &amp;pad_stride_info)</td></tr>
<tr class="memdesc:a2c0e6c1c4cf10da25e7a7362ba151ba2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml" title="Padding and stride information class.">PadStrideInfo</a> type.  <a href="namespacearm__compute.xhtml#a2c0e6c1c4cf10da25e7a7362ba151ba2">More...</a><br /></td></tr>
<tr class="separator:a2c0e6c1c4cf10da25e7a7362ba151ba2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0604106dd269acd58152a81ba87cc265"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a0604106dd269acd58152a81ba87cc265">to_string</a> (const BorderMode &amp;mode)</td></tr>
<tr class="memdesc:a0604106dd269acd58152a81ba87cc265"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the BorderMode type.  <a href="namespacearm__compute.xhtml#a0604106dd269acd58152a81ba87cc265">More...</a><br /></td></tr>
<tr class="separator:a0604106dd269acd58152a81ba87cc265"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c9cde9144eaeceaf086377b9bc5a5be"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a5c9cde9144eaeceaf086377b9bc5a5be">to_string</a> (const BorderSize &amp;border)</td></tr>
<tr class="memdesc:a5c9cde9144eaeceaf086377b9bc5a5be"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_border_size.xhtml" title="Container for 2D border size.">BorderSize</a> type.  <a href="namespacearm__compute.xhtml#a5c9cde9144eaeceaf086377b9bc5a5be">More...</a><br /></td></tr>
<tr class="separator:a5c9cde9144eaeceaf086377b9bc5a5be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a09b674dcee4a1b59f9c7c51ecaae40a6"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a09b674dcee4a1b59f9c7c51ecaae40a6">to_string</a> (const PaddingList &amp;padding)</td></tr>
<tr class="memdesc:a09b674dcee4a1b59f9c7c51ecaae40a6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the PaddingList type.  <a href="namespacearm__compute.xhtml#a09b674dcee4a1b59f9c7c51ecaae40a6">More...</a><br /></td></tr>
<tr class="separator:a09b674dcee4a1b59f9c7c51ecaae40a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad710fdad147ab4ab21e14a7c49b3516a"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ad710fdad147ab4ab21e14a7c49b3516a">to_string</a> (const Multiples &amp;multiples)</td></tr>
<tr class="memdesc:ad710fdad147ab4ab21e14a7c49b3516a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the Multiples type.  <a href="namespacearm__compute.xhtml#ad710fdad147ab4ab21e14a7c49b3516a">More...</a><br /></td></tr>
<tr class="separator:ad710fdad147ab4ab21e14a7c49b3516a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94bd78942b683c05cba85048537d3ee7"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a94bd78942b683c05cba85048537d3ee7">to_string</a> (const InterpolationPolicy &amp;policy)</td></tr>
<tr class="memdesc:a94bd78942b683c05cba85048537d3ee7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the InterpolationPolicy type.  <a href="namespacearm__compute.xhtml#a94bd78942b683c05cba85048537d3ee7">More...</a><br /></td></tr>
<tr class="separator:a94bd78942b683c05cba85048537d3ee7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5b8e815072ae54278cb1c91e254be4d3"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a5b8e815072ae54278cb1c91e254be4d3">to_string</a> (const SamplingPolicy &amp;policy)</td></tr>
<tr class="memdesc:a5b8e815072ae54278cb1c91e254be4d3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the SamplingPolicy type.  <a href="namespacearm__compute.xhtml#a5b8e815072ae54278cb1c91e254be4d3">More...</a><br /></td></tr>
<tr class="separator:a5b8e815072ae54278cb1c91e254be4d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4287c6842a60e5f6bf309e55f8813527"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a4287c6842a60e5f6bf309e55f8813527">operator&lt;&lt;</a> (::std::ostream &amp;os, const ConvertPolicy &amp;policy)</td></tr>
<tr class="memdesc:a4287c6842a60e5f6bf309e55f8813527"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the ConvertPolicy type.  <a href="namespacearm__compute.xhtml#a4287c6842a60e5f6bf309e55f8813527">More...</a><br /></td></tr>
<tr class="separator:a4287c6842a60e5f6bf309e55f8813527"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adcc7e107e7dbd2ffac02189089c33e4f"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#adcc7e107e7dbd2ffac02189089c33e4f">to_string</a> (const ConvertPolicy &amp;policy)</td></tr>
<tr class="separator:adcc7e107e7dbd2ffac02189089c33e4f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b94aeca99a5d6b1a5723014a01faac0"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a7b94aeca99a5d6b1a5723014a01faac0">operator&lt;&lt;</a> (::std::ostream &amp;os, const ArithmeticOperation &amp;op)</td></tr>
<tr class="memdesc:a7b94aeca99a5d6b1a5723014a01faac0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the ArithmeticOperation type.  <a href="namespacearm__compute.xhtml#a7b94aeca99a5d6b1a5723014a01faac0">More...</a><br /></td></tr>
<tr class="separator:a7b94aeca99a5d6b1a5723014a01faac0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca516517d47534e06d4c57e7bc706b2a"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aca516517d47534e06d4c57e7bc706b2a">to_string</a> (const ArithmeticOperation &amp;op)</td></tr>
<tr class="memdesc:aca516517d47534e06d4c57e7bc706b2a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the Arithmetic Operation.  <a href="namespacearm__compute.xhtml#aca516517d47534e06d4c57e7bc706b2a">More...</a><br /></td></tr>
<tr class="separator:aca516517d47534e06d4c57e7bc706b2a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a292505a0ec686541cfe0dcfd1d651ec5"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a292505a0ec686541cfe0dcfd1d651ec5">operator&lt;&lt;</a> (::std::ostream &amp;os, const ReductionOperation &amp;op)</td></tr>
<tr class="memdesc:a292505a0ec686541cfe0dcfd1d651ec5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the Reduction Operations.  <a href="namespacearm__compute.xhtml#a292505a0ec686541cfe0dcfd1d651ec5">More...</a><br /></td></tr>
<tr class="separator:a292505a0ec686541cfe0dcfd1d651ec5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae534105c7ea67999ccbb34a0ed567cd"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aae534105c7ea67999ccbb34a0ed567cd">to_string</a> (const ReductionOperation &amp;op)</td></tr>
<tr class="memdesc:aae534105c7ea67999ccbb34a0ed567cd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the Reduction Operations.  <a href="namespacearm__compute.xhtml#aae534105c7ea67999ccbb34a0ed567cd">More...</a><br /></td></tr>
<tr class="separator:aae534105c7ea67999ccbb34a0ed567cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac34f5e54ad35f26328f8706b3d28b43"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aac34f5e54ad35f26328f8706b3d28b43">operator&lt;&lt;</a> (::std::ostream &amp;os, const ComparisonOperation &amp;op)</td></tr>
<tr class="memdesc:aac34f5e54ad35f26328f8706b3d28b43"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the Comparison Operations.  <a href="namespacearm__compute.xhtml#aac34f5e54ad35f26328f8706b3d28b43">More...</a><br /></td></tr>
<tr class="separator:aac34f5e54ad35f26328f8706b3d28b43"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:accfc6f2e5fb354e1fb19a7067b6efdec"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#accfc6f2e5fb354e1fb19a7067b6efdec">operator&lt;&lt;</a> (::std::ostream &amp;os, const ElementWiseUnary &amp;op)</td></tr>
<tr class="memdesc:accfc6f2e5fb354e1fb19a7067b6efdec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the Elementwise unary Operations.  <a href="namespacearm__compute.xhtml#accfc6f2e5fb354e1fb19a7067b6efdec">More...</a><br /></td></tr>
<tr class="separator:accfc6f2e5fb354e1fb19a7067b6efdec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a77007283b591963074b8398202e90f5a"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a77007283b591963074b8398202e90f5a">to_string</a> (const ComparisonOperation &amp;op)</td></tr>
<tr class="memdesc:a77007283b591963074b8398202e90f5a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the Comparison Operations.  <a href="namespacearm__compute.xhtml#a77007283b591963074b8398202e90f5a">More...</a><br /></td></tr>
<tr class="separator:a77007283b591963074b8398202e90f5a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab76157462925ad1b13149317ded2e404"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ab76157462925ad1b13149317ded2e404">to_string</a> (const ElementWiseUnary &amp;op)</td></tr>
<tr class="memdesc:ab76157462925ad1b13149317ded2e404"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the Elementwise unary Operations.  <a href="namespacearm__compute.xhtml#ab76157462925ad1b13149317ded2e404">More...</a><br /></td></tr>
<tr class="separator:ab76157462925ad1b13149317ded2e404"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad8b676c38d9b8d9d9bde7caec5720bd9"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ad8b676c38d9b8d9d9bde7caec5720bd9">to_string</a> (const NormType &amp;<a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a>)</td></tr>
<tr class="memdesc:ad8b676c38d9b8d9d9bde7caec5720bd9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the Norm Type.  <a href="namespacearm__compute.xhtml#ad8b676c38d9b8d9d9bde7caec5720bd9">More...</a><br /></td></tr>
<tr class="separator:ad8b676c38d9b8d9d9bde7caec5720bd9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2872d19dd10dc3117813d291c08e0383"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a2872d19dd10dc3117813d291c08e0383">to_string</a> (const PoolingType &amp;<a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a>)</td></tr>
<tr class="memdesc:a2872d19dd10dc3117813d291c08e0383"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the Pooling Type.  <a href="namespacearm__compute.xhtml#a2872d19dd10dc3117813d291c08e0383">More...</a><br /></td></tr>
<tr class="separator:a2872d19dd10dc3117813d291c08e0383"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acef515348c5f7f73c89aa4b8a47a02bc"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#acef515348c5f7f73c89aa4b8a47a02bc">to_string</a> (const PoolingLayerInfo &amp;info)</td></tr>
<tr class="memdesc:acef515348c5f7f73c89aa4b8a47a02bc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the Pooling Layer Info.  <a href="namespacearm__compute.xhtml#acef515348c5f7f73c89aa4b8a47a02bc">More...</a><br /></td></tr>
<tr class="separator:acef515348c5f7f73c89aa4b8a47a02bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1f3a48143de769a09a4f668ea16413c"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#af1f3a48143de769a09a4f668ea16413c">operator&lt;&lt;</a> (::std::ostream &amp;os, const Size3D &amp;size)</td></tr>
<tr class="memdesc:af1f3a48143de769a09a4f668ea16413c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_size3_d.xhtml" title="Class for specifying the size of a 3D shape or object.">Size3D</a> type.  <a href="namespacearm__compute.xhtml#af1f3a48143de769a09a4f668ea16413c">More...</a><br /></td></tr>
<tr class="separator:af1f3a48143de769a09a4f668ea16413c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4700eba8503b6b8b26ab0f50590108ae"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a4700eba8503b6b8b26ab0f50590108ae">to_string</a> (const Size3D &amp;<a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a>)</td></tr>
<tr class="memdesc:a4700eba8503b6b8b26ab0f50590108ae"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_size3_d.xhtml" title="Class for specifying the size of a 3D shape or object.">Size3D</a> type.  <a href="namespacearm__compute.xhtml#a4700eba8503b6b8b26ab0f50590108ae">More...</a><br /></td></tr>
<tr class="separator:a4700eba8503b6b8b26ab0f50590108ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7d2b4539f3cc7b82c76c60a4b6a7f37"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ad7d2b4539f3cc7b82c76c60a4b6a7f37">operator&lt;&lt;</a> (::std::ostream &amp;os, const Padding3D &amp;padding3d)</td></tr>
<tr class="memdesc:ad7d2b4539f3cc7b82c76c60a4b6a7f37"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_padding3_d.xhtml" title="Padding information for 3D operations like Conv3d.">Padding3D</a> type.  <a href="namespacearm__compute.xhtml#ad7d2b4539f3cc7b82c76c60a4b6a7f37">More...</a><br /></td></tr>
<tr class="separator:ad7d2b4539f3cc7b82c76c60a4b6a7f37"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaaafb0628b4052ead4fc866f92056420"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aaaafb0628b4052ead4fc866f92056420">to_string</a> (const Padding3D &amp;padding3d)</td></tr>
<tr class="memdesc:aaaafb0628b4052ead4fc866f92056420"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a <a class="el" href="structarm__compute_1_1_padding3_d.xhtml">Padding3D</a> to string.  <a href="namespacearm__compute.xhtml#aaaafb0628b4052ead4fc866f92056420">More...</a><br /></td></tr>
<tr class="separator:aaaafb0628b4052ead4fc866f92056420"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a31a16fbea569d74c328824a60f07f626"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a31a16fbea569d74c328824a60f07f626">operator&lt;&lt;</a> (::std::ostream &amp;os, const DimensionRoundingType &amp;rounding_type)</td></tr>
<tr class="memdesc:a31a16fbea569d74c328824a60f07f626"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the DimensionRoundingType type.  <a href="namespacearm__compute.xhtml#a31a16fbea569d74c328824a60f07f626">More...</a><br /></td></tr>
<tr class="separator:a31a16fbea569d74c328824a60f07f626"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac5ed11fc52a25ba597243567bbd8793d"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ac5ed11fc52a25ba597243567bbd8793d">operator&lt;&lt;</a> (::std::ostream &amp;os, const Pooling3dLayerInfo &amp;info)</td></tr>
<tr class="memdesc:ac5ed11fc52a25ba597243567bbd8793d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the Pooling 3d Layer Info.  <a href="namespacearm__compute.xhtml#ac5ed11fc52a25ba597243567bbd8793d">More...</a><br /></td></tr>
<tr class="separator:ac5ed11fc52a25ba597243567bbd8793d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae816bdec63b59d4dd7a1e1097beb9718"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ae816bdec63b59d4dd7a1e1097beb9718">to_string</a> (const Pooling3dLayerInfo &amp;info)</td></tr>
<tr class="memdesc:ae816bdec63b59d4dd7a1e1097beb9718"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the Pooling 3d Layer Info.  <a href="namespacearm__compute.xhtml#ae816bdec63b59d4dd7a1e1097beb9718">More...</a><br /></td></tr>
<tr class="separator:ae816bdec63b59d4dd7a1e1097beb9718"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae62747a5179626328bf7e67c709d5fcf"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ae62747a5179626328bf7e67c709d5fcf">to_string</a> (const PriorBoxLayerInfo &amp;info)</td></tr>
<tr class="memdesc:ae62747a5179626328bf7e67c709d5fcf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_prior_box_layer_info.xhtml" title="PriorBox layer info.">PriorBoxLayerInfo</a>.  <a href="namespacearm__compute.xhtml#ae62747a5179626328bf7e67c709d5fcf">More...</a><br /></td></tr>
<tr class="separator:ae62747a5179626328bf7e67c709d5fcf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab91d110e020f6ed987e05e82df3e350b"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ab91d110e020f6ed987e05e82df3e350b">operator&lt;&lt;</a> (::std::ostream &amp;os, const Size2D &amp;size)</td></tr>
<tr class="memdesc:ab91d110e020f6ed987e05e82df3e350b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_size2_d.xhtml" title="Class for specifying the size of an image or rectangle.">Size2D</a> type.  <a href="namespacearm__compute.xhtml#ab91d110e020f6ed987e05e82df3e350b">More...</a><br /></td></tr>
<tr class="separator:ab91d110e020f6ed987e05e82df3e350b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee88a2c259879eb9dc18cb5965e87c29"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aee88a2c259879eb9dc18cb5965e87c29">to_string</a> (const Size2D &amp;<a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a>)</td></tr>
<tr class="memdesc:aee88a2c259879eb9dc18cb5965e87c29"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_size2_d.xhtml" title="Class for specifying the size of an image or rectangle.">Size2D</a> type.  <a href="namespacearm__compute.xhtml#aee88a2c259879eb9dc18cb5965e87c29">More...</a><br /></td></tr>
<tr class="separator:aee88a2c259879eb9dc18cb5965e87c29"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd35c1c3fb716078b1f4a25981defac4"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#abd35c1c3fb716078b1f4a25981defac4">operator&lt;&lt;</a> (::std::ostream &amp;os, const ConvolutionMethod &amp;conv_method)</td></tr>
<tr class="memdesc:abd35c1c3fb716078b1f4a25981defac4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the ConvolutionMethod type.  <a href="namespacearm__compute.xhtml#abd35c1c3fb716078b1f4a25981defac4">More...</a><br /></td></tr>
<tr class="separator:abd35c1c3fb716078b1f4a25981defac4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a853d44a32a328fb4455f6200a11c4785"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a853d44a32a328fb4455f6200a11c4785">to_string</a> (const ConvolutionMethod &amp;conv_method)</td></tr>
<tr class="memdesc:a853d44a32a328fb4455f6200a11c4785"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the ConvolutionMethod type.  <a href="namespacearm__compute.xhtml#a853d44a32a328fb4455f6200a11c4785">More...</a><br /></td></tr>
<tr class="separator:a853d44a32a328fb4455f6200a11c4785"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f4d95d65a62a085e929ab0a1a77add2"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a1f4d95d65a62a085e929ab0a1a77add2">operator&lt;&lt;</a> (::std::ostream &amp;os, const GPUTarget &amp;gpu_target)</td></tr>
<tr class="memdesc:a1f4d95d65a62a085e929ab0a1a77add2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the GPUTarget type.  <a href="namespacearm__compute.xhtml#a1f4d95d65a62a085e929ab0a1a77add2">More...</a><br /></td></tr>
<tr class="separator:a1f4d95d65a62a085e929ab0a1a77add2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee29ccfc095313663fc954f581ddf40a"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aee29ccfc095313663fc954f581ddf40a">to_string</a> (const GPUTarget &amp;gpu_target)</td></tr>
<tr class="memdesc:aee29ccfc095313663fc954f581ddf40a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the GPUTarget type.  <a href="namespacearm__compute.xhtml#aee29ccfc095313663fc954f581ddf40a">More...</a><br /></td></tr>
<tr class="separator:aee29ccfc095313663fc954f581ddf40a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a907c93ba5daaabf6af7095f20340d024"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a907c93ba5daaabf6af7095f20340d024">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="struct_detection_window.xhtml">DetectionWindow</a> &amp;detection_window)</td></tr>
<tr class="memdesc:a907c93ba5daaabf6af7095f20340d024"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_detection_window.xhtml" title="Detection window used for the object detection.">DetectionWindow</a> type.  <a href="namespacearm__compute.xhtml#a907c93ba5daaabf6af7095f20340d024">More...</a><br /></td></tr>
<tr class="separator:a907c93ba5daaabf6af7095f20340d024"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a28634df052522fe60e15a0128ba924cc"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a28634df052522fe60e15a0128ba924cc">operator&lt;&lt;</a> (::std::ostream &amp;os, const DetectionOutputLayerCodeType &amp;detection_code)</td></tr>
<tr class="memdesc:a28634df052522fe60e15a0128ba924cc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the DetectionOutputLayerCodeType type.  <a href="namespacearm__compute.xhtml#a28634df052522fe60e15a0128ba924cc">More...</a><br /></td></tr>
<tr class="separator:a28634df052522fe60e15a0128ba924cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41c7dc2aa88c4e30effb2e3f550de481"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a41c7dc2aa88c4e30effb2e3f550de481">to_string</a> (const DetectionOutputLayerCodeType &amp;detection_code)</td></tr>
<tr class="memdesc:a41c7dc2aa88c4e30effb2e3f550de481"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the DetectionOutputLayerCodeType type.  <a href="namespacearm__compute.xhtml#a41c7dc2aa88c4e30effb2e3f550de481">More...</a><br /></td></tr>
<tr class="separator:a41c7dc2aa88c4e30effb2e3f550de481"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22b40e983993e76ab39ce878fb111b9b"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a22b40e983993e76ab39ce878fb111b9b">operator&lt;&lt;</a> (::std::ostream &amp;os, const DetectionOutputLayerInfo &amp;detection_info)</td></tr>
<tr class="memdesc:a22b40e983993e76ab39ce878fb111b9b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_detection_output_layer_info.xhtml" title="Detection Output layer info.">DetectionOutputLayerInfo</a> type.  <a href="namespacearm__compute.xhtml#a22b40e983993e76ab39ce878fb111b9b">More...</a><br /></td></tr>
<tr class="separator:a22b40e983993e76ab39ce878fb111b9b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4084858fda1caec39457dd70322e6bd6"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a4084858fda1caec39457dd70322e6bd6">to_string</a> (const DetectionOutputLayerInfo &amp;detection_info)</td></tr>
<tr class="memdesc:a4084858fda1caec39457dd70322e6bd6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_detection_output_layer_info.xhtml" title="Detection Output layer info.">DetectionOutputLayerInfo</a> type.  <a href="namespacearm__compute.xhtml#a4084858fda1caec39457dd70322e6bd6">More...</a><br /></td></tr>
<tr class="separator:a4084858fda1caec39457dd70322e6bd6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94809adf238fe4a002701316c27b9bec"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a94809adf238fe4a002701316c27b9bec">operator&lt;&lt;</a> (::std::ostream &amp;os, const DetectionPostProcessLayerInfo &amp;detection_info)</td></tr>
<tr class="memdesc:a94809adf238fe4a002701316c27b9bec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml" title="Detection Output layer info.">DetectionPostProcessLayerInfo</a> type.  <a href="namespacearm__compute.xhtml#a94809adf238fe4a002701316c27b9bec">More...</a><br /></td></tr>
<tr class="separator:a94809adf238fe4a002701316c27b9bec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca72973a9a95755e65d17de30f4232e8"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aca72973a9a95755e65d17de30f4232e8">to_string</a> (const DetectionPostProcessLayerInfo &amp;detection_info)</td></tr>
<tr class="memdesc:aca72973a9a95755e65d17de30f4232e8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml" title="Detection Output layer info.">DetectionPostProcessLayerInfo</a> type.  <a href="namespacearm__compute.xhtml#aca72973a9a95755e65d17de30f4232e8">More...</a><br /></td></tr>
<tr class="separator:aca72973a9a95755e65d17de30f4232e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a905d7ec8787e8c4b7e88b0a2faaccd1f"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a905d7ec8787e8c4b7e88b0a2faaccd1f">to_string</a> (const <a class="el" href="struct_detection_window.xhtml">DetectionWindow</a> &amp;detection_window)</td></tr>
<tr class="memdesc:a905d7ec8787e8c4b7e88b0a2faaccd1f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_detection_window.xhtml" title="Detection window used for the object detection.">DetectionWindow</a> type.  <a href="namespacearm__compute.xhtml#a905d7ec8787e8c4b7e88b0a2faaccd1f">More...</a><br /></td></tr>
<tr class="separator:a905d7ec8787e8c4b7e88b0a2faaccd1f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7393414bb7b814bf70e0399f2347847"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ae7393414bb7b814bf70e0399f2347847">operator&lt;&lt;</a> (::std::ostream &amp;os, const PriorBoxLayerInfo &amp;info)</td></tr>
<tr class="memdesc:ae7393414bb7b814bf70e0399f2347847"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of <a class="el" href="classarm__compute_1_1_prior_box_layer_info.xhtml">PriorBoxLayerInfo</a>.  <a href="namespacearm__compute.xhtml#ae7393414bb7b814bf70e0399f2347847">More...</a><br /></td></tr>
<tr class="separator:ae7393414bb7b814bf70e0399f2347847"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af3cba8a4493cee4c431d128eed565ffe"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#af3cba8a4493cee4c431d128eed565ffe">operator&lt;&lt;</a> (::std::ostream &amp;os, const WinogradInfo &amp;info)</td></tr>
<tr class="memdesc:af3cba8a4493cee4c431d128eed565ffe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_winograd_info.xhtml" title="Winograd information.">WinogradInfo</a> type.  <a href="namespacearm__compute.xhtml#af3cba8a4493cee4c431d128eed565ffe">More...</a><br /></td></tr>
<tr class="separator:af3cba8a4493cee4c431d128eed565ffe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37cc282b0852aab04b13a6e6566adda7"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a37cc282b0852aab04b13a6e6566adda7">to_string</a> (const WinogradInfo &amp;<a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a>)</td></tr>
<tr class="separator:a37cc282b0852aab04b13a6e6566adda7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad87338ac39245d071b66a4f55cb06a16"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ad87338ac39245d071b66a4f55cb06a16">to_string</a> (const CLTunerMode val)</td></tr>
<tr class="memdesc:ad87338ac39245d071b66a4f55cb06a16"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a CLTunerMode value to a string.  <a href="namespacearm__compute.xhtml#ad87338ac39245d071b66a4f55cb06a16">More...</a><br /></td></tr>
<tr class="separator:ad87338ac39245d071b66a4f55cb06a16"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95b050d661e688bf8ae07bdcc2a32c9a"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a95b050d661e688bf8ae07bdcc2a32c9a">to_string</a> (CLGEMMKernelType val)</td></tr>
<tr class="memdesc:a95b050d661e688bf8ae07bdcc2a32c9a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a <a class="el" href="namespacearm__compute.xhtml#a6f7d2fe6b41e36d408375ad6bf9a612a">CLGEMMKernelType</a> to string.  <a href="namespacearm__compute.xhtml#a95b050d661e688bf8ae07bdcc2a32c9a">More...</a><br /></td></tr>
<tr class="separator:a95b050d661e688bf8ae07bdcc2a32c9a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac470b79f272c53fc4da4910370a69f24"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ac470b79f272c53fc4da4910370a69f24">operator&lt;&lt;</a> (::std::ostream &amp;os, const CLTunerMode &amp;val)</td></tr>
<tr class="memdesc:ac470b79f272c53fc4da4910370a69f24"><td class="mdescLeft">&#160;</td><td class="mdescRight">[Print CLTunerMode type]  <a href="namespacearm__compute.xhtml#ac470b79f272c53fc4da4910370a69f24">More...</a><br /></td></tr>
<tr class="separator:ac470b79f272c53fc4da4910370a69f24"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ee5b5cbe61f0862d907d9db15c3d9d6"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a1ee5b5cbe61f0862d907d9db15c3d9d6">operator&lt;&lt;</a> (::std::ostream &amp;os, const ConvolutionInfo &amp;conv_info)</td></tr>
<tr class="memdesc:a1ee5b5cbe61f0862d907d9db15c3d9d6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_convolution_info.xhtml">ConvolutionInfo</a> type.  <a href="namespacearm__compute.xhtml#a1ee5b5cbe61f0862d907d9db15c3d9d6">More...</a><br /></td></tr>
<tr class="separator:a1ee5b5cbe61f0862d907d9db15c3d9d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7c300f4790452fc1c97b9f6927f41234"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a7c300f4790452fc1c97b9f6927f41234">to_string</a> (const ConvolutionInfo &amp;info)</td></tr>
<tr class="memdesc:a7c300f4790452fc1c97b9f6927f41234"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a <a class="el" href="structarm__compute_1_1_convolution_info.xhtml">ConvolutionInfo</a> to string.  <a href="namespacearm__compute.xhtml#a7c300f4790452fc1c97b9f6927f41234">More...</a><br /></td></tr>
<tr class="separator:a7c300f4790452fc1c97b9f6927f41234"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:affa98488160f8bcb0edfc5b610ce3ff4"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#affa98488160f8bcb0edfc5b610ce3ff4">operator&lt;&lt;</a> (::std::ostream &amp;os, const FullyConnectedLayerInfo &amp;layer_info)</td></tr>
<tr class="memdesc:affa98488160f8bcb0edfc5b610ce3ff4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_fully_connected_layer_info.xhtml" title="Fully connected layer info.">FullyConnectedLayerInfo</a> type.  <a href="namespacearm__compute.xhtml#affa98488160f8bcb0edfc5b610ce3ff4">More...</a><br /></td></tr>
<tr class="separator:affa98488160f8bcb0edfc5b610ce3ff4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74a21df79a71f282054cf00135e682c9"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a74a21df79a71f282054cf00135e682c9">to_string</a> (const FullyConnectedLayerInfo &amp;info)</td></tr>
<tr class="memdesc:a74a21df79a71f282054cf00135e682c9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a <a class="el" href="structarm__compute_1_1_fully_connected_layer_info.xhtml">FullyConnectedLayerInfo</a> to string.  <a href="namespacearm__compute.xhtml#a74a21df79a71f282054cf00135e682c9">More...</a><br /></td></tr>
<tr class="separator:a74a21df79a71f282054cf00135e682c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae66eb1f2c65e413518cb5b5ea4a31bd3"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ae66eb1f2c65e413518cb5b5ea4a31bd3">operator&lt;&lt;</a> (::std::ostream &amp;os, const GEMMLowpOutputStageType &amp;gemm_type)</td></tr>
<tr class="memdesc:ae66eb1f2c65e413518cb5b5ea4a31bd3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the GEMMLowpOutputStageType type.  <a href="namespacearm__compute.xhtml#ae66eb1f2c65e413518cb5b5ea4a31bd3">More...</a><br /></td></tr>
<tr class="separator:ae66eb1f2c65e413518cb5b5ea4a31bd3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abed5f21c42d975c4f1c6fac1c0e97ce6"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#abed5f21c42d975c4f1c6fac1c0e97ce6">to_string</a> (const GEMMLowpOutputStageType &amp;gemm_type)</td></tr>
<tr class="memdesc:abed5f21c42d975c4f1c6fac1c0e97ce6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a <a class="el" href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864">GEMMLowpOutputStageType</a> to string.  <a href="namespacearm__compute.xhtml#abed5f21c42d975c4f1c6fac1c0e97ce6">More...</a><br /></td></tr>
<tr class="separator:abed5f21c42d975c4f1c6fac1c0e97ce6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4898872476b3f7f30adeaaea9128b585"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a4898872476b3f7f30adeaaea9128b585">operator&lt;&lt;</a> (::std::ostream &amp;os, const GEMMLowpOutputStageInfo &amp;gemm_info)</td></tr>
<tr class="memdesc:a4898872476b3f7f30adeaaea9128b585"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_g_e_m_m_lowp_output_stage_info.xhtml" title="GEMMLowp output stage info.">GEMMLowpOutputStageInfo</a> type.  <a href="namespacearm__compute.xhtml#a4898872476b3f7f30adeaaea9128b585">More...</a><br /></td></tr>
<tr class="separator:a4898872476b3f7f30adeaaea9128b585"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1304e887f59012f78e2caf39627b2e4"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#af1304e887f59012f78e2caf39627b2e4">to_string</a> (const GEMMLowpOutputStageInfo &amp;gemm_info)</td></tr>
<tr class="memdesc:af1304e887f59012f78e2caf39627b2e4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a <a class="el" href="structarm__compute_1_1_g_e_m_m_lowp_output_stage_info.xhtml">GEMMLowpOutputStageInfo</a> to string.  <a href="namespacearm__compute.xhtml#af1304e887f59012f78e2caf39627b2e4">More...</a><br /></td></tr>
<tr class="separator:af1304e887f59012f78e2caf39627b2e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ce1b6b7e66e67553c49eb9c76229ce1"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a8ce1b6b7e66e67553c49eb9c76229ce1">operator&lt;&lt;</a> (::std::ostream &amp;os, const Conv2dInfo &amp;conv_info)</td></tr>
<tr class="memdesc:a8ce1b6b7e66e67553c49eb9c76229ce1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_conv2d_info.xhtml" title="Descriptor used by the 2d Convolution function.">Conv2dInfo</a> type.  <a href="namespacearm__compute.xhtml#a8ce1b6b7e66e67553c49eb9c76229ce1">More...</a><br /></td></tr>
<tr class="separator:a8ce1b6b7e66e67553c49eb9c76229ce1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a25786a77392aab8dc06fd9847cfadb21"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a25786a77392aab8dc06fd9847cfadb21">to_string</a> (const Conv2dInfo &amp;conv_info)</td></tr>
<tr class="memdesc:a25786a77392aab8dc06fd9847cfadb21"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a <a class="el" href="structarm__compute_1_1_conv2d_info.xhtml">Conv2dInfo</a> to string.  <a href="namespacearm__compute.xhtml#a25786a77392aab8dc06fd9847cfadb21">More...</a><br /></td></tr>
<tr class="separator:a25786a77392aab8dc06fd9847cfadb21"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac5826d71db3a92e827e7651bb1e6a15a"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ac5826d71db3a92e827e7651bb1e6a15a">operator&lt;&lt;</a> (::std::ostream &amp;os, const PixelValue &amp;pixel_value)</td></tr>
<tr class="memdesc:ac5826d71db3a92e827e7651bb1e6a15a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_pixel_value.xhtml" title="Class describing the value of a pixel for any image format.">PixelValue</a> type.  <a href="namespacearm__compute.xhtml#ac5826d71db3a92e827e7651bb1e6a15a">More...</a><br /></td></tr>
<tr class="separator:ac5826d71db3a92e827e7651bb1e6a15a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab397a8d78a6c41e737d0d5b170107541"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ab397a8d78a6c41e737d0d5b170107541">to_string</a> (const PixelValue &amp;pixel_value)</td></tr>
<tr class="memdesc:ab397a8d78a6c41e737d0d5b170107541"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a <a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> to string.  <a href="namespacearm__compute.xhtml#ab397a8d78a6c41e737d0d5b170107541">More...</a><br /></td></tr>
<tr class="separator:ab397a8d78a6c41e737d0d5b170107541"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b3427257089fd801e6208bfbf89873a"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a8b3427257089fd801e6208bfbf89873a">operator&lt;&lt;</a> (::std::ostream &amp;os, const ScaleKernelInfo &amp;scale_info)</td></tr>
<tr class="memdesc:a8b3427257089fd801e6208bfbf89873a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_scale_kernel_info.xhtml">ScaleKernelInfo</a> type.  <a href="namespacearm__compute.xhtml#a8b3427257089fd801e6208bfbf89873a">More...</a><br /></td></tr>
<tr class="separator:a8b3427257089fd801e6208bfbf89873a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade0cbc862083452e8102afd18f639621"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ade0cbc862083452e8102afd18f639621">to_string</a> (const ScaleKernelInfo &amp;scale_info)</td></tr>
<tr class="memdesc:ade0cbc862083452e8102afd18f639621"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a <a class="el" href="structarm__compute_1_1_scale_kernel_info.xhtml">ScaleKernelInfo</a> to string.  <a href="namespacearm__compute.xhtml#ade0cbc862083452e8102afd18f639621">More...</a><br /></td></tr>
<tr class="separator:ade0cbc862083452e8102afd18f639621"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94349811cc9fac558f49c221830565c1"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a94349811cc9fac558f49c221830565c1">operator&lt;&lt;</a> (::std::ostream &amp;os, const FFTDirection &amp;fft_dir)</td></tr>
<tr class="memdesc:a94349811cc9fac558f49c221830565c1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the FFTDirection type.  <a href="namespacearm__compute.xhtml#a94349811cc9fac558f49c221830565c1">More...</a><br /></td></tr>
<tr class="separator:a94349811cc9fac558f49c221830565c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f3b9f93958bbf939d6889d96c0fc043"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a1f3b9f93958bbf939d6889d96c0fc043">to_string</a> (const FFTDirection &amp;fft_dir)</td></tr>
<tr class="memdesc:a1f3b9f93958bbf939d6889d96c0fc043"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a <a class="el" href="structarm__compute_1_1_f_f_t1_d_info.xhtml">FFT1DInfo</a> to string.  <a href="namespacearm__compute.xhtml#a1f3b9f93958bbf939d6889d96c0fc043">More...</a><br /></td></tr>
<tr class="separator:a1f3b9f93958bbf939d6889d96c0fc043"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a99d2d5ca692cb82f43e17e51ab1bb356"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a99d2d5ca692cb82f43e17e51ab1bb356">operator&lt;&lt;</a> (::std::ostream &amp;os, const FFT1DInfo &amp;fft1d_info)</td></tr>
<tr class="memdesc:a99d2d5ca692cb82f43e17e51ab1bb356"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_f_f_t1_d_info.xhtml" title="Descriptor used by the FFT1D function.">FFT1DInfo</a> type.  <a href="namespacearm__compute.xhtml#a99d2d5ca692cb82f43e17e51ab1bb356">More...</a><br /></td></tr>
<tr class="separator:a99d2d5ca692cb82f43e17e51ab1bb356"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac86a72b6e929345c7273112de096b0d"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aac86a72b6e929345c7273112de096b0d">to_string</a> (const FFT1DInfo &amp;fft1d_info)</td></tr>
<tr class="memdesc:aac86a72b6e929345c7273112de096b0d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a <a class="el" href="structarm__compute_1_1_f_f_t1_d_info.xhtml">FFT1DInfo</a> to string.  <a href="namespacearm__compute.xhtml#aac86a72b6e929345c7273112de096b0d">More...</a><br /></td></tr>
<tr class="separator:aac86a72b6e929345c7273112de096b0d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7aabe11f72f8994b26e2a2fd66860738"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a7aabe11f72f8994b26e2a2fd66860738">operator&lt;&lt;</a> (::std::ostream &amp;os, const FFT2DInfo &amp;fft2d_info)</td></tr>
<tr class="memdesc:a7aabe11f72f8994b26e2a2fd66860738"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_f_f_t2_d_info.xhtml" title="Descriptor used by the FFT2D function.">FFT2DInfo</a> type.  <a href="namespacearm__compute.xhtml#a7aabe11f72f8994b26e2a2fd66860738">More...</a><br /></td></tr>
<tr class="separator:a7aabe11f72f8994b26e2a2fd66860738"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a10596a1cbbcc6afefb9ee52a38375250"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a10596a1cbbcc6afefb9ee52a38375250">to_string</a> (const FFT2DInfo &amp;fft2d_info)</td></tr>
<tr class="memdesc:a10596a1cbbcc6afefb9ee52a38375250"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a <a class="el" href="structarm__compute_1_1_f_f_t2_d_info.xhtml">FFT2DInfo</a> to string.  <a href="namespacearm__compute.xhtml#a10596a1cbbcc6afefb9ee52a38375250">More...</a><br /></td></tr>
<tr class="separator:a10596a1cbbcc6afefb9ee52a38375250"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a55c00b11e26573f0151cc26a99589a6f"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a55c00b11e26573f0151cc26a99589a6f">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="struct_coordinates2_d.xhtml">Coordinates2D</a> &amp;coord_2d)</td></tr>
<tr class="memdesc:a55c00b11e26573f0151cc26a99589a6f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_coordinates2_d.xhtml" title="Coordinate type.">Coordinates2D</a> type.  <a href="namespacearm__compute.xhtml#a55c00b11e26573f0151cc26a99589a6f">More...</a><br /></td></tr>
<tr class="separator:a55c00b11e26573f0151cc26a99589a6f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb61ef573b258dcd5334042e4d35b0d8"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#abb61ef573b258dcd5334042e4d35b0d8">to_string</a> (const <a class="el" href="struct_coordinates2_d.xhtml">Coordinates2D</a> &amp;coord_2d)</td></tr>
<tr class="memdesc:abb61ef573b258dcd5334042e4d35b0d8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a <a class="el" href="struct_coordinates2_d.xhtml">Coordinates2D</a> to string.  <a href="namespacearm__compute.xhtml#abb61ef573b258dcd5334042e4d35b0d8">More...</a><br /></td></tr>
<tr class="separator:abb61ef573b258dcd5334042e4d35b0d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afce06ffb37193572ef548fa9c3511014"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#afce06ffb37193572ef548fa9c3511014">operator&lt;&lt;</a> (::std::ostream &amp;os, const FuseBatchNormalizationType &amp;fuse_type)</td></tr>
<tr class="memdesc:afce06ffb37193572ef548fa9c3511014"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the FuseBatchNormalizationType type.  <a href="namespacearm__compute.xhtml#afce06ffb37193572ef548fa9c3511014">More...</a><br /></td></tr>
<tr class="separator:afce06ffb37193572ef548fa9c3511014"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d9c6ce35d2c94dd2ec505ae59bae2c0"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a6d9c6ce35d2c94dd2ec505ae59bae2c0">to_string</a> (const FuseBatchNormalizationType &amp;fuse_type)</td></tr>
<tr class="memdesc:a6d9c6ce35d2c94dd2ec505ae59bae2c0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a <a class="el" href="namespacearm__compute.xhtml#afb7e3dd8a833840aaaf618bd43ead0ca">FuseBatchNormalizationType</a> to string.  <a href="namespacearm__compute.xhtml#a6d9c6ce35d2c94dd2ec505ae59bae2c0">More...</a><br /></td></tr>
<tr class="separator:a6d9c6ce35d2c94dd2ec505ae59bae2c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae80c7006c1bbf755a18e5d26eb4b141c"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ae80c7006c1bbf755a18e5d26eb4b141c">operator&lt;&lt;</a> (::std::ostream &amp;os, const SoftmaxKernelInfo &amp;info)</td></tr>
<tr class="memdesc:ae80c7006c1bbf755a18e5d26eb4b141c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_softmax_kernel_info.xhtml" title="Descriptor used by the softmax kernels.">SoftmaxKernelInfo</a> type.  <a href="namespacearm__compute.xhtml#ae80c7006c1bbf755a18e5d26eb4b141c">More...</a><br /></td></tr>
<tr class="separator:ae80c7006c1bbf755a18e5d26eb4b141c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79c3f4124e52a42fbd87b5208a37d4e3"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a79c3f4124e52a42fbd87b5208a37d4e3">to_string</a> (const SoftmaxKernelInfo &amp;info)</td></tr>
<tr class="memdesc:a79c3f4124e52a42fbd87b5208a37d4e3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a <a class="el" href="structarm__compute_1_1_softmax_kernel_info.xhtml">SoftmaxKernelInfo</a> to string.  <a href="namespacearm__compute.xhtml#a79c3f4124e52a42fbd87b5208a37d4e3">More...</a><br /></td></tr>
<tr class="separator:a79c3f4124e52a42fbd87b5208a37d4e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3495dbac674f6aa93c41efc92f1d3143"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a3495dbac674f6aa93c41efc92f1d3143"><td class="memTemplItemLeft" align="right" valign="top">::std::ostream &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a3495dbac674f6aa93c41efc92f1d3143">operator&lt;&lt;</a> (::std::ostream &amp;os, const LSTMParams&lt; T &gt; &amp;lstm_params)</td></tr>
<tr class="memdesc:a3495dbac674f6aa93c41efc92f1d3143"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_scale_kernel_info.xhtml">ScaleKernelInfo</a> type.  <a href="namespacearm__compute.xhtml#a3495dbac674f6aa93c41efc92f1d3143">More...</a><br /></td></tr>
<tr class="separator:a3495dbac674f6aa93c41efc92f1d3143"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a08200627f52a255db721b79aff58ac04"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a08200627f52a255db721b79aff58ac04"><td class="memTemplItemLeft" align="right" valign="top">std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a08200627f52a255db721b79aff58ac04">to_string</a> (const LSTMParams&lt; T &gt; &amp;lstm_params)</td></tr>
<tr class="memdesc:a08200627f52a255db721b79aff58ac04"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a <a class="el" href="classarm__compute_1_1_l_s_t_m_params.xhtml">LSTMParams</a> to string.  <a href="namespacearm__compute.xhtml#a08200627f52a255db721b79aff58ac04">More...</a><br /></td></tr>
<tr class="separator:a08200627f52a255db721b79aff58ac04"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca07e8e6fa2966cfdeb9fdd77d2f02bc"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aca07e8e6fa2966cfdeb9fdd77d2f02bc">to_string</a> (const uint8_t num)</td></tr>
<tr class="memdesc:aca07e8e6fa2966cfdeb9fdd77d2f02bc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a <a class="el" href="classarm__compute_1_1_l_s_t_m_params.xhtml">LSTMParams</a> to string.  <a href="namespacearm__compute.xhtml#aca07e8e6fa2966cfdeb9fdd77d2f02bc">More...</a><br /></td></tr>
<tr class="separator:aca07e8e6fa2966cfdeb9fdd77d2f02bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6b383b77aea31f502c2712a034f6286c"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a6b383b77aea31f502c2712a034f6286c">operator&lt;&lt;</a> (::std::ostream &amp;os, const NMSType &amp;nms_type)</td></tr>
<tr class="memdesc:a6b383b77aea31f502c2712a034f6286c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Available non maxima suppression types.  <a href="namespacearm__compute.xhtml#a6b383b77aea31f502c2712a034f6286c">More...</a><br /></td></tr>
<tr class="separator:a6b383b77aea31f502c2712a034f6286c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5285db5b7a825c241e6fdf99e489e35f"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a5285db5b7a825c241e6fdf99e489e35f">to_string</a> (const NMSType nms_type)</td></tr>
<tr class="memdesc:a5285db5b7a825c241e6fdf99e489e35f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a <a class="el" href="namespacearm__compute.xhtml#a201391f6e13e2a1ac203256a77792718">NMSType</a> to string.  <a href="namespacearm__compute.xhtml#a5285db5b7a825c241e6fdf99e489e35f">More...</a><br /></td></tr>
<tr class="separator:a5285db5b7a825c241e6fdf99e489e35f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8052968d0b455bc9378c0df27e8e4ba"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ab8052968d0b455bc9378c0df27e8e4ba">operator&lt;&lt;</a> (::std::ostream &amp;os, const BoxNMSLimitInfo &amp;info)</td></tr>
<tr class="memdesc:ab8052968d0b455bc9378c0df27e8e4ba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml" title="BoxWithNonMaximaSuppressionLimit Information class.">BoxNMSLimitInfo</a> type.  <a href="namespacearm__compute.xhtml#ab8052968d0b455bc9378c0df27e8e4ba">More...</a><br /></td></tr>
<tr class="separator:ab8052968d0b455bc9378c0df27e8e4ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a360e44a0287cbeb449768ec22a78828b"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a360e44a0287cbeb449768ec22a78828b">to_string</a> (const BoxNMSLimitInfo &amp;info)</td></tr>
<tr class="memdesc:a360e44a0287cbeb449768ec22a78828b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a <a class="el" href="classarm__compute_1_1_box_n_m_s_limit_info.xhtml">BoxNMSLimitInfo</a> to string.  <a href="namespacearm__compute.xhtml#a360e44a0287cbeb449768ec22a78828b">More...</a><br /></td></tr>
<tr class="separator:a360e44a0287cbeb449768ec22a78828b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a71f3cd5e5f519ddbac447c2f76b5b258"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a71f3cd5e5f519ddbac447c2f76b5b258">to_string</a> (const DimensionRoundingType &amp;rounding_type)</td></tr>
<tr class="memdesc:a71f3cd5e5f519ddbac447c2f76b5b258"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a <a class="el" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849a">DimensionRoundingType</a> to string.  <a href="namespacearm__compute.xhtml#a71f3cd5e5f519ddbac447c2f76b5b258">More...</a><br /></td></tr>
<tr class="separator:a71f3cd5e5f519ddbac447c2f76b5b258"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a139447eca91a24ca2849e6d9b00cdc49"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a139447eca91a24ca2849e6d9b00cdc49">operator&lt;&lt;</a> (::std::ostream &amp;os, const Conv3dInfo &amp;conv3d_info)</td></tr>
<tr class="memdesc:a139447eca91a24ca2849e6d9b00cdc49"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_conv3d_info.xhtml" title="Descriptor used by the 3d Convolution function.">Conv3dInfo</a> type.  <a href="namespacearm__compute.xhtml#a139447eca91a24ca2849e6d9b00cdc49">More...</a><br /></td></tr>
<tr class="separator:a139447eca91a24ca2849e6d9b00cdc49"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a01c3f2109ee2d0889187eb59ac23d47a"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a01c3f2109ee2d0889187eb59ac23d47a">to_string</a> (const Conv3dInfo &amp;conv3d_info)</td></tr>
<tr class="memdesc:a01c3f2109ee2d0889187eb59ac23d47a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_conv3d_info.xhtml" title="Descriptor used by the 3d Convolution function.">Conv3dInfo</a> type.  <a href="namespacearm__compute.xhtml#a01c3f2109ee2d0889187eb59ac23d47a">More...</a><br /></td></tr>
<tr class="separator:a01c3f2109ee2d0889187eb59ac23d47a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45d9cdf2b9e92d2ca49ce90e5ee85d35"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a45d9cdf2b9e92d2ca49ce90e5ee85d35">to_string</a> (const WeightFormat wf)</td></tr>
<tr class="memdesc:a45d9cdf2b9e92d2ca49ce90e5ee85d35"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5" title="Memory layouts for the weights tensor.">arm_compute::WeightFormat</a> type.  <a href="namespacearm__compute.xhtml#a45d9cdf2b9e92d2ca49ce90e5ee85d35">More...</a><br /></td></tr>
<tr class="separator:a45d9cdf2b9e92d2ca49ce90e5ee85d35"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acfae87a8a1f4a5af347d08f093e11b85"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#acfae87a8a1f4a5af347d08f093e11b85">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5">arm_compute::WeightFormat</a> &amp;wf)</td></tr>
<tr class="memdesc:acfae87a8a1f4a5af347d08f093e11b85"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5" title="Memory layouts for the weights tensor.">arm_compute::WeightFormat</a> type.  <a href="namespacearm__compute.xhtml#acfae87a8a1f4a5af347d08f093e11b85">More...</a><br /></td></tr>
<tr class="separator:acfae87a8a1f4a5af347d08f093e11b85"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae40f748b95cd9329be96b501914f5892"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ae40f748b95cd9329be96b501914f5892">to_string</a> (const std::tuple&lt; TensorShape, TensorShape, <a class="el" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5">arm_compute::WeightFormat</a> &gt; values)</td></tr>
<tr class="memdesc:ae40f748b95cd9329be96b501914f5892"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the std::tuple&lt;TensorShape, TensorShape, arm_compute::WeightFormat&gt; tuple.  <a href="namespacearm__compute.xhtml#ae40f748b95cd9329be96b501914f5892">More...</a><br /></td></tr>
<tr class="separator:ae40f748b95cd9329be96b501914f5892"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a6ce866fff96872b6eb71278693450f"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a5a6ce866fff96872b6eb71278693450f">operator&lt;&lt;</a> (::std::ostream &amp;os, const Padding2D &amp;padding2d)</td></tr>
<tr class="memdesc:a5a6ce866fff96872b6eb71278693450f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_padding2_d.xhtml" title="Padding information for 2D operations like Conv2d.">Padding2D</a> type.  <a href="namespacearm__compute.xhtml#a5a6ce866fff96872b6eb71278693450f">More...</a><br /></td></tr>
<tr class="separator:a5a6ce866fff96872b6eb71278693450f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a64c9ee3d9a92a9dabdad6c97230485a6"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a64c9ee3d9a92a9dabdad6c97230485a6">to_string</a> (const Padding2D &amp;padding2d)</td></tr>
<tr class="memdesc:a64c9ee3d9a92a9dabdad6c97230485a6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a <a class="el" href="structarm__compute_1_1_padding2_d.xhtml">Padding2D</a> to string.  <a href="namespacearm__compute.xhtml#a64c9ee3d9a92a9dabdad6c97230485a6">More...</a><br /></td></tr>
<tr class="separator:a64c9ee3d9a92a9dabdad6c97230485a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d01286647492c788a246fd80f7c2ee1"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a9d01286647492c788a246fd80f7c2ee1">operator&lt;&lt;</a> (::std::ostream &amp;os, const experimental::dynamic_fusion::Pool2dAttributes &amp;pool2d_attr)</td></tr>
<tr class="memdesc:a9d01286647492c788a246fd80f7c2ee1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_pool2d_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::Pool2dAttributes</a> type.  <a href="namespacearm__compute.xhtml#a9d01286647492c788a246fd80f7c2ee1">More...</a><br /></td></tr>
<tr class="separator:a9d01286647492c788a246fd80f7c2ee1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5ccd21b142c0e9201326219b4a51abb"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aa5ccd21b142c0e9201326219b4a51abb">to_string</a> (const experimental::dynamic_fusion::Pool2dAttributes &amp;pool2d_attr)</td></tr>
<tr class="memdesc:aa5ccd21b142c0e9201326219b4a51abb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_pool2d_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::Pool2dAttributes</a> type.  <a href="namespacearm__compute.xhtml#aa5ccd21b142c0e9201326219b4a51abb">More...</a><br /></td></tr>
<tr class="separator:aa5ccd21b142c0e9201326219b4a51abb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0faf30fb6d5ef627a4c2cb3cc83d65d"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ad0faf30fb6d5ef627a4c2cb3cc83d65d">operator&lt;&lt;</a> (::std::ostream &amp;os, const experimental::dynamic_fusion::GpuPool2dSettings &amp;settings)</td></tr>
<tr class="memdesc:ad0faf30fb6d5ef627a4c2cb3cc83d65d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_pool2d_settings.xhtml" title="Operator backend specific settings.">arm_compute::experimental::dynamic_fusion::GpuPool2dSettings</a> type.  <a href="namespacearm__compute.xhtml#ad0faf30fb6d5ef627a4c2cb3cc83d65d">More...</a><br /></td></tr>
<tr class="separator:ad0faf30fb6d5ef627a4c2cb3cc83d65d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa3dd55fc4d0f9f2a1334f6e120ddab57"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aa3dd55fc4d0f9f2a1334f6e120ddab57">to_string</a> (const experimental::dynamic_fusion::GpuPool2dSettings &amp;settings)</td></tr>
<tr class="memdesc:aa3dd55fc4d0f9f2a1334f6e120ddab57"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_pool2d_settings.xhtml" title="Operator backend specific settings.">arm_compute::experimental::dynamic_fusion::GpuPool2dSettings</a> type.  <a href="namespacearm__compute.xhtml#aa3dd55fc4d0f9f2a1334f6e120ddab57">More...</a><br /></td></tr>
<tr class="separator:aa3dd55fc4d0f9f2a1334f6e120ddab57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a40d7bf1a197d4186a5b59a6f98b3d208"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a40d7bf1a197d4186a5b59a6f98b3d208">operator&lt;&lt;</a> (::std::ostream &amp;os, const experimental::dynamic_fusion::Conv2dAttributes &amp;conv2d_attr)</td></tr>
<tr class="memdesc:a40d7bf1a197d4186a5b59a6f98b3d208"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::Conv2dAttributes</a> type.  <a href="namespacearm__compute.xhtml#a40d7bf1a197d4186a5b59a6f98b3d208">More...</a><br /></td></tr>
<tr class="separator:a40d7bf1a197d4186a5b59a6f98b3d208"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a47e27ac5cf25542aef7d049c2cac9598"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a47e27ac5cf25542aef7d049c2cac9598">to_string</a> (const experimental::dynamic_fusion::Conv2dAttributes &amp;conv2d_attr)</td></tr>
<tr class="memdesc:a47e27ac5cf25542aef7d049c2cac9598"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::Conv2dAttributes</a> type.  <a href="namespacearm__compute.xhtml#a47e27ac5cf25542aef7d049c2cac9598">More...</a><br /></td></tr>
<tr class="separator:a47e27ac5cf25542aef7d049c2cac9598"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a80d092dd1ae944fbc9182991800c8551"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a80d092dd1ae944fbc9182991800c8551">operator&lt;&lt;</a> (::std::ostream &amp;os, const experimental::dynamic_fusion::CastAttributes &amp;cast_attr)</td></tr>
<tr class="memdesc:a80d092dd1ae944fbc9182991800c8551"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cast_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::CastAttributes</a> type.  <a href="namespacearm__compute.xhtml#a80d092dd1ae944fbc9182991800c8551">More...</a><br /></td></tr>
<tr class="separator:a80d092dd1ae944fbc9182991800c8551"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af15737dcaf9b02187583ad8b176abab3"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#af15737dcaf9b02187583ad8b176abab3">to_string</a> (const experimental::dynamic_fusion::CastAttributes &amp;cast_attr)</td></tr>
<tr class="memdesc:af15737dcaf9b02187583ad8b176abab3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cast_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::CastAttributes</a> type.  <a href="namespacearm__compute.xhtml#af15737dcaf9b02187583ad8b176abab3">More...</a><br /></td></tr>
<tr class="separator:af15737dcaf9b02187583ad8b176abab3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae4738bfbf645429b3778372170d8fe55"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ae4738bfbf645429b3778372170d8fe55">operator&lt;&lt;</a> (::std::ostream &amp;os, const experimental::dynamic_fusion::DepthwiseConv2dAttributes &amp;dw_conv2d_attr)</td></tr>
<tr class="memdesc:ae4738bfbf645429b3778372170d8fe55"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_depthwise_conv2d_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::DepthwiseConv2dAttributes</a> type.  <a href="namespacearm__compute.xhtml#ae4738bfbf645429b3778372170d8fe55">More...</a><br /></td></tr>
<tr class="separator:ae4738bfbf645429b3778372170d8fe55"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae8bf8d114b9a0276f72b3743ef010330"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ae8bf8d114b9a0276f72b3743ef010330">to_string</a> (const experimental::dynamic_fusion::DepthwiseConv2dAttributes &amp;dw_conv2d_attr)</td></tr>
<tr class="memdesc:ae8bf8d114b9a0276f72b3743ef010330"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_depthwise_conv2d_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::DepthwiseConv2dAttributes</a> type.  <a href="namespacearm__compute.xhtml#ae8bf8d114b9a0276f72b3743ef010330">More...</a><br /></td></tr>
<tr class="separator:ae8bf8d114b9a0276f72b3743ef010330"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae14eb3d3a4bb8abdedd18cd791bbe16a"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ae14eb3d3a4bb8abdedd18cd791bbe16a">operator&lt;&lt;</a> (::std::ostream &amp;os, const experimental::dynamic_fusion::ClampAttributes &amp;clamp_attr)</td></tr>
<tr class="memdesc:ae14eb3d3a4bb8abdedd18cd791bbe16a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_clamp_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::ClampAttributes</a> type.  <a href="namespacearm__compute.xhtml#ae14eb3d3a4bb8abdedd18cd791bbe16a">More...</a><br /></td></tr>
<tr class="separator:ae14eb3d3a4bb8abdedd18cd791bbe16a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2044c973d96829e0470cbc4f156fac76"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a2044c973d96829e0470cbc4f156fac76">to_string</a> (const experimental::dynamic_fusion::ClampAttributes &amp;clamp_attr)</td></tr>
<tr class="memdesc:a2044c973d96829e0470cbc4f156fac76"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_clamp_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::ClampAttributes</a> type.  <a href="namespacearm__compute.xhtml#a2044c973d96829e0470cbc4f156fac76">More...</a><br /></td></tr>
<tr class="separator:a2044c973d96829e0470cbc4f156fac76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0a8318afa53a36694c053b8bdebf8cbb"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a0a8318afa53a36694c053b8bdebf8cbb">operator&lt;&lt;</a> (::std::ostream &amp;os, const experimental::dynamic_fusion::ResizeAttributes &amp;resize_attr)</td></tr>
<tr class="memdesc:a0a8318afa53a36694c053b8bdebf8cbb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_resize_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::ResizeAttributes</a> type.  <a href="namespacearm__compute.xhtml#a0a8318afa53a36694c053b8bdebf8cbb">More...</a><br /></td></tr>
<tr class="separator:a0a8318afa53a36694c053b8bdebf8cbb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae76ceb28247fb86fed30541afadcc52"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aae76ceb28247fb86fed30541afadcc52">to_string</a> (const experimental::dynamic_fusion::ResizeAttributes &amp;resize_attr)</td></tr>
<tr class="memdesc:aae76ceb28247fb86fed30541afadcc52"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_resize_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::ResizeAttributes</a> type.  <a href="namespacearm__compute.xhtml#aae76ceb28247fb86fed30541afadcc52">More...</a><br /></td></tr>
<tr class="separator:aae76ceb28247fb86fed30541afadcc52"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa832ab6a5089acbf50950aeffc6437b5"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aa832ab6a5089acbf50950aeffc6437b5">operator&lt;&lt;</a> (::std::ostream &amp;os, const experimental::dynamic_fusion::SoftmaxAttributes &amp;softmax_attr)</td></tr>
<tr class="memdesc:aa832ab6a5089acbf50950aeffc6437b5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_softmax_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::SoftmaxAttributes</a> type.  <a href="namespacearm__compute.xhtml#aa832ab6a5089acbf50950aeffc6437b5">More...</a><br /></td></tr>
<tr class="separator:aa832ab6a5089acbf50950aeffc6437b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2bde8c082c06332c18ca6593009b695d"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a2bde8c082c06332c18ca6593009b695d">to_string</a> (const experimental::dynamic_fusion::SoftmaxAttributes &amp;softmax_attr)</td></tr>
<tr class="memdesc:a2bde8c082c06332c18ca6593009b695d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_softmax_attributes.xhtml" title="Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.">arm_compute::experimental::dynamic_fusion::SoftmaxAttributes</a> type.  <a href="namespacearm__compute.xhtml#a2bde8c082c06332c18ca6593009b695d">More...</a><br /></td></tr>
<tr class="separator:a2bde8c082c06332c18ca6593009b695d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a23c4340b819fbed22ec80a797910cc9d"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a23c4340b819fbed22ec80a797910cc9d">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="classarm__compute_1_1_mat_mul_info.xhtml">arm_compute::MatMulInfo</a> &amp;matmul_info)</td></tr>
<tr class="memdesc:a23c4340b819fbed22ec80a797910cc9d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_mat_mul_info.xhtml" title="Class for holding information related to matrix multiplication function.">arm_compute::MatMulInfo</a> type.  <a href="namespacearm__compute.xhtml#a23c4340b819fbed22ec80a797910cc9d">More...</a><br /></td></tr>
<tr class="separator:a23c4340b819fbed22ec80a797910cc9d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa44e2a2940e20b68d7a31851a1da2ae9"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aa44e2a2940e20b68d7a31851a1da2ae9">to_string</a> (const <a class="el" href="classarm__compute_1_1_mat_mul_info.xhtml">arm_compute::MatMulInfo</a> &amp;matmul_info)</td></tr>
<tr class="memdesc:aa44e2a2940e20b68d7a31851a1da2ae9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_mat_mul_info.xhtml" title="Class for holding information related to matrix multiplication function.">arm_compute::MatMulInfo</a> type.  <a href="namespacearm__compute.xhtml#aa44e2a2940e20b68d7a31851a1da2ae9">More...</a><br /></td></tr>
<tr class="separator:aa44e2a2940e20b68d7a31851a1da2ae9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a341b658424c1295b77b78789593459af"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a341b658424c1295b77b78789593459af">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="structarm__compute_1_1_mat_mul_kernel_info.xhtml">arm_compute::MatMulKernelInfo</a> &amp;matmul_info)</td></tr>
<tr class="memdesc:a341b658424c1295b77b78789593459af"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_mat_mul_kernel_info.xhtml">arm_compute::MatMulKernelInfo</a> type.  <a href="namespacearm__compute.xhtml#a341b658424c1295b77b78789593459af">More...</a><br /></td></tr>
<tr class="separator:a341b658424c1295b77b78789593459af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aecd4f91cf0333a946a296f1388259fe0"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aecd4f91cf0333a946a296f1388259fe0">to_string</a> (const <a class="el" href="structarm__compute_1_1_mat_mul_kernel_info.xhtml">arm_compute::MatMulKernelInfo</a> &amp;matmul_info)</td></tr>
<tr class="memdesc:aecd4f91cf0333a946a296f1388259fe0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1_mat_mul_kernel_info.xhtml">arm_compute::MatMulKernelInfo</a> type.  <a href="namespacearm__compute.xhtml#aecd4f91cf0333a946a296f1388259fe0">More...</a><br /></td></tr>
<tr class="separator:aecd4f91cf0333a946a296f1388259fe0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a9e70bf9fa34a00e747e36997ab90b2"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a5a9e70bf9fa34a00e747e36997ab90b2">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="classarm__compute_1_1_cpu_mat_mul_settings.xhtml">arm_compute::CpuMatMulSettings</a> &amp;settings)</td></tr>
<tr class="memdesc:a5a9e70bf9fa34a00e747e36997ab90b2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_cpu_mat_mul_settings.xhtml" title="Settings for MatMul Cpu implementation.">arm_compute::CpuMatMulSettings</a> type.  <a href="namespacearm__compute.xhtml#a5a9e70bf9fa34a00e747e36997ab90b2">More...</a><br /></td></tr>
<tr class="separator:a5a9e70bf9fa34a00e747e36997ab90b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a20d8490daa1cc6388fb00fd4d8a021d4"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a20d8490daa1cc6388fb00fd4d8a021d4">to_string</a> (const <a class="el" href="classarm__compute_1_1_cpu_mat_mul_settings.xhtml">arm_compute::CpuMatMulSettings</a> &amp;settings)</td></tr>
<tr class="memdesc:a20d8490daa1cc6388fb00fd4d8a021d4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1_cpu_mat_mul_settings.xhtml" title="Settings for MatMul Cpu implementation.">arm_compute::CpuMatMulSettings</a> type.  <a href="namespacearm__compute.xhtml#a20d8490daa1cc6388fb00fd4d8a021d4">More...</a><br /></td></tr>
<tr class="separator:a20d8490daa1cc6388fb00fd4d8a021d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">(EXPERIMENTAL_POST_OPS)</div></td></tr>
<tr class="memitem:ae840d90b4559e722b05b2ae72921d06b"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ae840d90b4559e722b05b2ae72921d06b">operator&lt;&lt;</a> (::std::ostream &amp;os, experimental::PostOpType post_op_type)</td></tr>
<tr class="memdesc:ae840d90b4559e722b05b2ae72921d06b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formmated output of the <a class="el" href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425ea">experimental::PostOpType</a> type.  <a href="namespacearm__compute.xhtml#ae840d90b4559e722b05b2ae72921d06b">More...</a><br /></td></tr>
<tr class="separator:ae840d90b4559e722b05b2ae72921d06b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a05ed0c517f067e8893e766693d9301cd"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a05ed0c517f067e8893e766693d9301cd">to_string</a> (experimental::PostOpType post_op_type)</td></tr>
<tr class="memdesc:a05ed0c517f067e8893e766693d9301cd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a <a class="el" href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425ea">experimental::PostOpType</a> to string.  <a href="namespacearm__compute.xhtml#a05ed0c517f067e8893e766693d9301cd">More...</a><br /></td></tr>
<tr class="separator:a05ed0c517f067e8893e766693d9301cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a279d18fdb51aeda01ae373372c30d1f0"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a279d18fdb51aeda01ae373372c30d1f0"><td class="memTemplItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a279d18fdb51aeda01ae373372c30d1f0">operator&lt;&lt;</a> (::std::ostream &amp;os, const experimental::IPostOp&lt; T &gt; &amp;post_op)</td></tr>
<tr class="memdesc:a279d18fdb51aeda01ae373372c30d1f0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1experimental_1_1_i_post_op.xhtml">experimental::IPostOp</a> type.  <a href="namespacearm__compute.xhtml#a279d18fdb51aeda01ae373372c30d1f0">More...</a><br /></td></tr>
<tr class="separator:a279d18fdb51aeda01ae373372c30d1f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a36eb9e231f951302fc30a67f14582013"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a36eb9e231f951302fc30a67f14582013"><td class="memTemplItemLeft" align="right" valign="top">std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a36eb9e231f951302fc30a67f14582013">to_string</a> (const experimental::IPostOp&lt; T &gt; &amp;post_op)</td></tr>
<tr class="memdesc:a36eb9e231f951302fc30a67f14582013"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts an <a class="el" href="structarm__compute_1_1experimental_1_1_i_post_op.xhtml">experimental::IPostOp</a> to string.  <a href="namespacearm__compute.xhtml#a36eb9e231f951302fc30a67f14582013">More...</a><br /></td></tr>
<tr class="separator:a36eb9e231f951302fc30a67f14582013"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a52da64a91bc1bc78b978014df1d77dba"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a52da64a91bc1bc78b978014df1d77dba"><td class="memTemplItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a52da64a91bc1bc78b978014df1d77dba">operator&lt;&lt;</a> (::std::ostream &amp;os, const experimental::PostOpList&lt; T &gt; &amp;post_ops)</td></tr>
<tr class="memdesc:a52da64a91bc1bc78b978014df1d77dba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml">experimental::PostOpList</a> type.  <a href="namespacearm__compute.xhtml#a52da64a91bc1bc78b978014df1d77dba">More...</a><br /></td></tr>
<tr class="separator:a52da64a91bc1bc78b978014df1d77dba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3fc8e7a7dfab3904b33935bbc62a89b3"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a3fc8e7a7dfab3904b33935bbc62a89b3"><td class="memTemplItemLeft" align="right" valign="top">std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a3fc8e7a7dfab3904b33935bbc62a89b3">to_string</a> (const experimental::PostOpList&lt; T &gt; &amp;post_ops)</td></tr>
<tr class="memdesc:a3fc8e7a7dfab3904b33935bbc62a89b3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a <a class="el" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml">experimental::PostOpList</a> to string.  <a href="namespacearm__compute.xhtml#a3fc8e7a7dfab3904b33935bbc62a89b3">More...</a><br /></td></tr>
<tr class="separator:a3fc8e7a7dfab3904b33935bbc62a89b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">(EXPERIMENTAL_POST_OPS)</div></td></tr>
<tr class="memitem:ae840d90b4559e722b05b2ae72921d06b"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ae840d90b4559e722b05b2ae72921d06b">operator&lt;&lt;</a> (::std::ostream &amp;os, experimental::PostOpType post_op_type)</td></tr>
<tr class="memdesc:ae840d90b4559e722b05b2ae72921d06b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formmated output of the <a class="el" href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425ea">experimental::PostOpType</a> type.  <a href="namespacearm__compute.xhtml#ae840d90b4559e722b05b2ae72921d06b">More...</a><br /></td></tr>
<tr class="separator:ae840d90b4559e722b05b2ae72921d06b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a05ed0c517f067e8893e766693d9301cd"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a05ed0c517f067e8893e766693d9301cd">to_string</a> (experimental::PostOpType post_op_type)</td></tr>
<tr class="memdesc:a05ed0c517f067e8893e766693d9301cd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a <a class="el" href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425ea">experimental::PostOpType</a> to string.  <a href="namespacearm__compute.xhtml#a05ed0c517f067e8893e766693d9301cd">More...</a><br /></td></tr>
<tr class="separator:a05ed0c517f067e8893e766693d9301cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a279d18fdb51aeda01ae373372c30d1f0"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a279d18fdb51aeda01ae373372c30d1f0"><td class="memTemplItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a279d18fdb51aeda01ae373372c30d1f0">operator&lt;&lt;</a> (::std::ostream &amp;os, const experimental::IPostOp&lt; T &gt; &amp;post_op)</td></tr>
<tr class="memdesc:a279d18fdb51aeda01ae373372c30d1f0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1experimental_1_1_i_post_op.xhtml">experimental::IPostOp</a> type.  <a href="namespacearm__compute.xhtml#a279d18fdb51aeda01ae373372c30d1f0">More...</a><br /></td></tr>
<tr class="separator:a279d18fdb51aeda01ae373372c30d1f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a36eb9e231f951302fc30a67f14582013"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a36eb9e231f951302fc30a67f14582013"><td class="memTemplItemLeft" align="right" valign="top">std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a36eb9e231f951302fc30a67f14582013">to_string</a> (const experimental::IPostOp&lt; T &gt; &amp;post_op)</td></tr>
<tr class="memdesc:a36eb9e231f951302fc30a67f14582013"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts an <a class="el" href="structarm__compute_1_1experimental_1_1_i_post_op.xhtml">experimental::IPostOp</a> to string.  <a href="namespacearm__compute.xhtml#a36eb9e231f951302fc30a67f14582013">More...</a><br /></td></tr>
<tr class="separator:a36eb9e231f951302fc30a67f14582013"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a52da64a91bc1bc78b978014df1d77dba"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a52da64a91bc1bc78b978014df1d77dba"><td class="memTemplItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a52da64a91bc1bc78b978014df1d77dba">operator&lt;&lt;</a> (::std::ostream &amp;os, const experimental::PostOpList&lt; T &gt; &amp;post_ops)</td></tr>
<tr class="memdesc:a52da64a91bc1bc78b978014df1d77dba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml">experimental::PostOpList</a> type.  <a href="namespacearm__compute.xhtml#a52da64a91bc1bc78b978014df1d77dba">More...</a><br /></td></tr>
<tr class="separator:a52da64a91bc1bc78b978014df1d77dba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3fc8e7a7dfab3904b33935bbc62a89b3"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a3fc8e7a7dfab3904b33935bbc62a89b3"><td class="memTemplItemLeft" align="right" valign="top">std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a3fc8e7a7dfab3904b33935bbc62a89b3">to_string</a> (const experimental::PostOpList&lt; T &gt; &amp;post_ops)</td></tr>
<tr class="memdesc:a3fc8e7a7dfab3904b33935bbc62a89b3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a <a class="el" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml">experimental::PostOpList</a> to string.  <a href="namespacearm__compute.xhtml#a3fc8e7a7dfab3904b33935bbc62a89b3">More...</a><br /></td></tr>
<tr class="separator:a3fc8e7a7dfab3904b33935bbc62a89b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Macro Definition Documentation</h2>
<a id="ab300564c32cc9f62fb5f79854b4368b6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab300564c32cc9f62fb5f79854b4368b6">&#9670;&nbsp;</a></span>__CASE_WEIGHT_FORMAT</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define __CASE_WEIGHT_FORMAT</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">wf</td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Value:</b><div class="fragment"><div class="line"><span class="keywordflow">case</span> WeightFormat::wf:       \</div>
<div class="line">    return #wf;</div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_cbdb8362360e11eafe2fa3bc74cf0ffd.xhtml">utils</a></li><li class="navelem"><a class="el" href="utils_2_type_printer_8h.xhtml">TypePrinter.h</a></li>
    <li class="footer">Generated on Wed Jul 5 2023 11:29:21 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
