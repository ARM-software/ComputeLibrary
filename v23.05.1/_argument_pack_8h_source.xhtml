<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/dynamic_fusion/sketch/ArgumentPack.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.05.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_argument_pack_8h_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">ArgumentPack.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_argument_pack_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2022 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef SRC_DYNAMIC_FUSION_SKETCH_ARGUMENTPACK</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define SRC_DYNAMIC_FUSION_SKETCH_ARGUMENTPACK</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160; </div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2experimental_2_types_8h.xhtml">arm_compute/core/experimental/Types.h</a>&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;unordered_map&gt;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160; </div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;{</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">namespace </span>experimental</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">namespace </span>dynamic_fusion</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{<span class="comment"></span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">/** This is a generic class that packs the arguments of an operator. For now, it is only used for tensor-related types</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment"> * Examples of &quot;tensor-related types&quot;: @ref ITensorInfo, @ref ITensor, @ref ICLTensor</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment"> * The argument id is the position of the argument within the pack, and is represented by @ref TensorType</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment"> * @tparam T Tensor-related type</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml">   45</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml">ArgumentPack</a></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">    /** @ref TensorType encodes the position of a tensor argument within the pack */</span></div>
<div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a10f9c7c6dfba722b1e9dbd22e141ae05">   49</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">Id</a> = <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TensorType</a>;<span class="comment"></span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">    /** A single argument element within the pack</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment">     * It contains either a const pointer or a non-const pointer to the Tensor-related type T, but never at the same time</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00053"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element.xhtml">   53</a></span>&#160;    <span class="keyword">struct </span><a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element.xhtml">PackElement</a></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    {</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element.xhtml#a65c1d3cd4d74eb93098e55e92d14dbee">PackElement</a>()                        = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element.xhtml#a65c1d3cd4d74eb93098e55e92d14dbee">PackElement</a>(<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element.xhtml">PackElement</a> &amp;elem) = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element.xhtml">PackElement</a> &amp;<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element.xhtml#aeb4a62c11cd7ffdce6e7e9791526adb9">operator=</a>(<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element.xhtml">PackElement</a> &amp;elem) = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element.xhtml#a65c1d3cd4d74eb93098e55e92d14dbee">PackElement</a>(<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element.xhtml">PackElement</a> &amp;&amp;elem)                 = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element.xhtml">PackElement</a> &amp;<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element.xhtml#aeb4a62c11cd7ffdce6e7e9791526adb9">operator=</a>(<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element.xhtml">PackElement</a> &amp;&amp;elem) = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00060"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element.xhtml#a7427b040a7162cd7d48e44c19de8dc4e">   60</a></span>&#160;        <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element.xhtml#a7427b040a7162cd7d48e44c19de8dc4e">PackElement</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">Id</a> <span class="keywordtype">id</span>, T *<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element.xhtml#ad6634830e90a4c02dc4d1a76f4e65eeb">tensor</a>)</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;            : <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element.xhtml#a150a709e86e7134d17cd063de6810b6c">id</a>(<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element.xhtml#a150a709e86e7134d17cd063de6810b6c">id</a>), <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element.xhtml#ad6634830e90a4c02dc4d1a76f4e65eeb">tensor</a>(<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element.xhtml#ad6634830e90a4c02dc4d1a76f4e65eeb">tensor</a>), <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element.xhtml#a3c969ca5493e6ed7a5227ee353a9edec">ctensor</a>(nullptr)</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        {</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        }</div>
<div class="line"><a name="l00064"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element.xhtml#a1c5369b8483ff3b0c7701d85ebf38d22">   64</a></span>&#160;        <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element.xhtml#a1c5369b8483ff3b0c7701d85ebf38d22">PackElement</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">Id</a> <span class="keywordtype">id</span>, <span class="keyword">const</span> T *<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element.xhtml#a3c969ca5493e6ed7a5227ee353a9edec">ctensor</a>)</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            : <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element.xhtml#a150a709e86e7134d17cd063de6810b6c">id</a>(<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element.xhtml#a150a709e86e7134d17cd063de6810b6c">id</a>), <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element.xhtml#ad6634830e90a4c02dc4d1a76f4e65eeb">tensor</a>(nullptr), <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element.xhtml#a3c969ca5493e6ed7a5227ee353a9edec">ctensor</a>(<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element.xhtml#a3c969ca5493e6ed7a5227ee353a9edec">ctensor</a>)</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        {</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        }</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160; </div>
<div class="line"><a name="l00069"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element.xhtml#a150a709e86e7134d17cd063de6810b6c">   69</a></span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">Id</a>       <span class="keywordtype">id</span>{ <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a357fa03be669f637e7d03372efca13a2">ACL_UNKNOWN</a> }; <span class="comment">/**&lt; Argument id within the pack */</span></div>
<div class="line"><a name="l00070"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element.xhtml#ad6634830e90a4c02dc4d1a76f4e65eeb">   70</a></span>&#160;        T       *<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element.xhtml#ad6634830e90a4c02dc4d1a76f4e65eeb">tensor</a>{ <span class="keyword">nullptr</span> }; <span class="comment">/**&lt; Non-const pointer to tensor-related object */</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keyword">const</span> T *<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element.xhtml#a3c969ca5493e6ed7a5227ee353a9edec">ctensor</a></div>
<div class="line"><a name="l00072"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element.xhtml#a3c969ca5493e6ed7a5227ee353a9edec">   72</a></span>&#160;        {</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            <span class="keyword">nullptr</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        }; <span class="comment">/**&lt; Const pointer to tensor-related object */</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    };</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160; </div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">    /** Default constructor */</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a61bf45ebe0672e2a8438434521436c36">ArgumentPack</a>() = <span class="keywordflow">default</span>;<span class="comment"></span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment">    /** Destructor */</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a1b59cf7829dbda76975496804c6035ac">~ArgumentPack</a>() = <span class="keywordflow">default</span>;<span class="comment"></span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment">    /** Allow instances of this class to be copy constructed */</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml">ArgumentPack&lt;T&gt;</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml">ArgumentPack&lt;T&gt;</a> &amp;other) = <span class="keywordflow">default</span>;<span class="comment"></span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment">    /** Allow instances of this class to be copied */</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml">ArgumentPack&lt;T&gt;</a> &amp;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a89274036665beb68bbaf3949a315fb04">operator=</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml">ArgumentPack&lt;T&gt;</a> &amp;other) = <span class="keywordflow">default</span>;<span class="comment"></span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment">    /** Allow instances of this class to be move constructed */</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml">ArgumentPack&lt;T&gt;</a>(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml">ArgumentPack&lt;T&gt;</a> &amp;&amp;other) = <span class="keywordflow">default</span>;<span class="comment"></span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment">    /** Allow instances of this class to be moved */</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml">ArgumentPack&lt;T&gt;</a> &amp;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a89274036665beb68bbaf3949a315fb04">operator=</a>(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml">ArgumentPack&lt;T&gt;</a> &amp;&amp;other) = <span class="keywordflow">default</span>;<span class="comment"></span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment">    /** Initializer list Constructor */</span></div>
<div class="line"><a name="l00091"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a88b8d9bbd989cabb3a326c05e45aa8fa">   91</a></span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a88b8d9bbd989cabb3a326c05e45aa8fa">ArgumentPack</a>(<span class="keyword">const</span> std::initializer_list&lt;PackElement&gt; &amp;l)</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        : _pack{}</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    {</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;e : l)</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        {</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            _pack[e.id] = e;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        }</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    }<span class="comment"></span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment">    /** Add tensor to the pack</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment">     * @param[in] id     ID of the tensor to add</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment">     * @param[in] tensor Tensor to add</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00104"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a0cc4d50143adce1cc5d438be07b8780a">  104</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a0cc4d50143adce1cc5d438be07b8780a">add_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">Id</a> <span class="keywordtype">id</span>, T *<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    {</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        _pack[id] = PackElement(<span class="keywordtype">id</span>, <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    }<span class="comment"></span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment">    /** Add const tensor to the pack</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">     * @param[in] id     ID of the tensor to add</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment">     * @param[in] tensor Tensor to add</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00113"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#ae723b570d1c3caab0ff080c117fa15cf">  113</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#ae723b570d1c3caab0ff080c117fa15cf">add_const_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">Id</a> <span class="keywordtype">id</span>, <span class="keyword">const</span> T *<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    {</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        _pack[id] = PackElement(<span class="keywordtype">id</span>, <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    }<span class="comment"></span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">    /** Get tensor of a given id from the pack</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment">     * @param[in] id ID of tensor to extract</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment">     * @return The pointer to the tensor if exist and is non-const else nullptr</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00123"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a143340085c13e43abc32b6753f2bb826">  123</a></span>&#160;    T *<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a143340085c13e43abc32b6753f2bb826">get_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">Id</a> <span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    {</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <span class="keyword">auto</span> it = _pack.find(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        <span class="keywordflow">return</span> it != _pack.end() ? it-&gt;second.tensor : <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    }<span class="comment"></span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">    /** Get constant tensor of a given id</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">     * @param[in] id ID of tensor to extract</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment">     * @return The pointer to the tensor (const or not) if exist else nullptr</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00134"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#ad73626614be041dfc0ca202b149fdd19">  134</a></span>&#160;    <span class="keyword">const</span> T *<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#ad73626614be041dfc0ca202b149fdd19">get_const_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">Id</a> <span class="keywordtype">id</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        <span class="keyword">auto</span> it = _pack.find(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="keywordflow">if</span>(it != _pack.end())</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        {</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            <span class="keywordflow">return</span> it-&gt;second.ctensor != <span class="keyword">nullptr</span> ? it-&gt;second.ctensor : it-&gt;second.tensor;</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        }</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    }<span class="comment"></span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment">    /** Remove the tensor stored with the given id</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment">     * @param[in] id ID of tensor to remove</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00147"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a9d6084ee3875b08560752a92417378bb">  147</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a9d6084ee3875b08560752a92417378bb">remove_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">Id</a> <span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    {</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        _pack.erase(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    }<span class="comment"></span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment">    /** Pack size accessor</span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment">     * @return Number of tensors registered to the pack</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00155"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a259cb5a711406a8c3e5d937eb9350cca">  155</a></span>&#160;    <span class="keywordtype">size_t</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a259cb5a711406a8c3e5d937eb9350cca">size</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <span class="keywordflow">return</span> _pack.size();</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    }<span class="comment"></span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment">    /** Checks if pack is empty</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="comment">     * @return True if empty else false</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00163"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a644718bb2fb240de962dc3c9a1fdf0dc">  163</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a644718bb2fb240de962dc3c9a1fdf0dc">empty</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <span class="keywordflow">return</span> _pack.empty();</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    }<span class="comment"></span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment">    /** Get the ACL_SRC_* tensors</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment">     * @return std::vector&lt;T *&gt;</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00171"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a06d2e567a50372dc427f27654f9f8eb8">  171</a></span>&#160;    std::vector&lt;T *&gt; <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a06d2e567a50372dc427f27654f9f8eb8">get_src_tensors</a>()</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    {</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        std::vector&lt;T *&gt; src_tensors{};</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> <span class="keywordtype">id</span> = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828ae1a1ae3e3415cb95b96aa11edbdbbb69">TensorType::ACL_SRC</a>); id &lt;= static_cast&lt;int&gt;(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a94a384e3d37fd4f398fc4d61d7bd70f4">TensorType::ACL_SRC_END</a>); ++id)</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        {</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            <span class="keyword">auto</span> <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> = <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a143340085c13e43abc32b6753f2bb826">get_tensor</a>(<span class="keyword">static_cast&lt;</span><a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TensorType</a><span class="keyword">&gt;</span>(<span class="keywordtype">id</span>));</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            <span class="keywordflow">if</span>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            {</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                src_tensors.push_back(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            }</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        }</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        <span class="keywordflow">return</span> src_tensors;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    }<span class="comment"></span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="comment">    /** Get the const ACL_SRC_* tensors</span></div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment">     * @return std::vector&lt;const T *&gt;</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00188"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#af51575e50393ea37d24c67383fd61d09">  188</a></span>&#160;    std::vector&lt;const T *&gt; <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#af51575e50393ea37d24c67383fd61d09">get_const_src_tensors</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        std::vector&lt;const T *&gt; src_tensors{};</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> <span class="keywordtype">id</span> = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828ae1a1ae3e3415cb95b96aa11edbdbbb69">TensorType::ACL_SRC</a>); id &lt;= static_cast&lt;int&gt;(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a94a384e3d37fd4f398fc4d61d7bd70f4">TensorType::ACL_SRC_END</a>); ++id)</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        {</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            <span class="keyword">auto</span> <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> = <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#ad73626614be041dfc0ca202b149fdd19">get_const_tensor</a>(<span class="keyword">static_cast&lt;</span><a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TensorType</a><span class="keyword">&gt;</span>(<span class="keywordtype">id</span>));</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            <span class="keywordflow">if</span>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            {</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                src_tensors.push_back(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            }</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        }</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        <span class="keywordflow">return</span> src_tensors;</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    }<span class="comment"></span></div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="comment">    /** Get the ACL_DST_* tensors</span></div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="comment">     * @return std::vector&lt;T *&gt;</span></div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00205"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a4d9b6a0c26ec8f3fd4854ac4e219f2fa">  205</a></span>&#160;    std::vector&lt;T *&gt; <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a4d9b6a0c26ec8f3fd4854ac4e219f2fa">get_dst_tensors</a>()</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    {</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        std::vector&lt;T *&gt; dst_tensors{};</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> <span class="keywordtype">id</span> = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2">TensorType::ACL_DST</a>); id &lt;= static_cast&lt;int&gt;(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a3fb1122062a8d6eac28c9fe0dc2aba3d">TensorType::ACL_DST_END</a>); ++id)</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        {</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            <span class="keyword">auto</span> <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> = <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a143340085c13e43abc32b6753f2bb826">get_tensor</a>(<span class="keyword">static_cast&lt;</span><a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TensorType</a><span class="keyword">&gt;</span>(<span class="keywordtype">id</span>));</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            <span class="keywordflow">if</span>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            {</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                dst_tensors.push_back(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            }</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        }</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        <span class="keywordflow">return</span> dst_tensors;</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    }<span class="comment"></span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="comment">    /** Get the const ACL_DST_* tensors</span></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="comment">     * @return std::vector&lt;const T *&gt;</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00222"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a95d4dfcd1d28cd4461e3bee6d1f472d5">  222</a></span>&#160;    std::vector&lt;const T *&gt; <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a95d4dfcd1d28cd4461e3bee6d1f472d5">get_const_dst_tensors</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        std::vector&lt;const T *&gt; dst_tensors{};</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> <span class="keywordtype">id</span> = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2">TensorType::ACL_DST</a>); id &lt;= static_cast&lt;int&gt;(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a3fb1122062a8d6eac28c9fe0dc2aba3d">TensorType::ACL_DST_END</a>); ++id)</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        {</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;            <span class="keyword">auto</span> <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> = <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#ad73626614be041dfc0ca202b149fdd19">get_const_tensor</a>(<span class="keyword">static_cast&lt;</span><a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TensorType</a><span class="keyword">&gt;</span>(<span class="keywordtype">id</span>));</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;            <span class="keywordflow">if</span>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;            {</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                dst_tensors.push_back(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;            }</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        }</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        <span class="keywordflow">return</span> dst_tensors;</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    }</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160; </div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    std::unordered_map&lt;int, PackElement&gt; _pack{}; <span class="comment">/**&lt; Container with the packed tensors */</span></div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;};</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;} <span class="comment">// namespace dynamic_fusion</span></div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;} <span class="comment">// namespace experimental</span></div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;} <span class="comment">// namespace arm_compute</span></div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* SRC_DYNAMIC_FUSION_SKETCH_ARGUMENTPACK */</span><span class="preprocessor"></span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_xhtml_ad73626614be041dfc0ca202b149fdd19"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#ad73626614be041dfc0ca202b149fdd19">arm_compute::experimental::dynamic_fusion::ArgumentPack::get_const_tensor</a></div><div class="ttdeci">const T * get_const_tensor(Id id) const</div><div class="ttdoc">Get constant tensor of a given id.</div><div class="ttdef"><b>Definition:</b> <a href="_argument_pack_8h_source.xhtml#l00134">ArgumentPack.h:134</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a3fb1122062a8d6eac28c9fe0dc2aba3d"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a3fb1122062a8d6eac28c9fe0dc2aba3d">arm_compute::ACL_DST_END</a></div><div class="ttdeci">@ ACL_DST_END</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00059">Types.h:59</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_xhtml_a644718bb2fb240de962dc3c9a1fdf0dc"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a644718bb2fb240de962dc3c9a1fdf0dc">arm_compute::experimental::dynamic_fusion::ArgumentPack::empty</a></div><div class="ttdeci">bool empty() const</div><div class="ttdoc">Checks if pack is empty.</div><div class="ttdef"><b>Definition:</b> <a href="_argument_pack_8h_source.xhtml#l00163">ArgumentPack.h:163</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a357fa03be669f637e7d03372efca13a2"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a357fa03be669f637e7d03372efca13a2">arm_compute::ACL_UNKNOWN</a></div><div class="ttdeci">@ ACL_UNKNOWN</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00040">Types.h:40</a></div></div>
<div class="ttc" id="astructarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element_xhtml_a65c1d3cd4d74eb93098e55e92d14dbee"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element.xhtml#a65c1d3cd4d74eb93098e55e92d14dbee">arm_compute::experimental::dynamic_fusion::ArgumentPack::PackElement::PackElement</a></div><div class="ttdeci">PackElement()=default</div></div>
<div class="ttc" id="astructarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element_xhtml_a1c5369b8483ff3b0c7701d85ebf38d22"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element.xhtml#a1c5369b8483ff3b0c7701d85ebf38d22">arm_compute::experimental::dynamic_fusion::ArgumentPack::PackElement::PackElement</a></div><div class="ttdeci">PackElement(Id id, const T *ctensor)</div><div class="ttdef"><b>Definition:</b> <a href="_argument_pack_8h_source.xhtml#l00064">ArgumentPack.h:64</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_xhtml_a06d2e567a50372dc427f27654f9f8eb8"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a06d2e567a50372dc427f27654f9f8eb8">arm_compute::experimental::dynamic_fusion::ArgumentPack::get_src_tensors</a></div><div class="ttdeci">std::vector&lt; T * &gt; get_src_tensors()</div><div class="ttdoc">Get the ACL_SRC_* tensors.</div><div class="ttdef"><b>Definition:</b> <a href="_argument_pack_8h_source.xhtml#l00171">ArgumentPack.h:171</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">arm_compute::TensorType</a></div><div class="ttdeci">TensorType</div><div class="ttdoc">Memory type.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00038">Types.h:38</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_xhtml_a4d9b6a0c26ec8f3fd4854ac4e219f2fa"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a4d9b6a0c26ec8f3fd4854ac4e219f2fa">arm_compute::experimental::dynamic_fusion::ArgumentPack::get_dst_tensors</a></div><div class="ttdeci">std::vector&lt; T * &gt; get_dst_tensors()</div><div class="ttdoc">Get the ACL_DST_* tensors.</div><div class="ttdef"><b>Definition:</b> <a href="_argument_pack_8h_source.xhtml#l00205">ArgumentPack.h:205</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_xhtml"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml">arm_compute::experimental::dynamic_fusion::ArgumentPack</a></div><div class="ttdoc">This is a generic class that packs the arguments of an operator.</div><div class="ttdef"><b>Definition:</b> <a href="_argument_pack_8h_source.xhtml#l00045">ArgumentPack.h:45</a></div></div>
<div class="ttc" id="astructarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element_xhtml"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element.xhtml">arm_compute::experimental::dynamic_fusion::ArgumentPack::PackElement</a></div><div class="ttdoc">A single argument element within the pack It contains either a const pointer or a non-const pointer t...</div><div class="ttdef"><b>Definition:</b> <a href="_argument_pack_8h_source.xhtml#l00053">ArgumentPack.h:53</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a94a384e3d37fd4f398fc4d61d7bd70f4"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a94a384e3d37fd4f398fc4d61d7bd70f4">arm_compute::ACL_SRC_END</a></div><div class="ttdeci">@ ACL_SRC_END</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00052">Types.h:52</a></div></div>
<div class="ttc" id="aarm__compute_2core_2experimental_2_types_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2experimental_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2">arm_compute::ACL_DST</a></div><div class="ttdeci">@ ACL_DST</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00055">Types.h:55</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_xhtml_ae723b570d1c3caab0ff080c117fa15cf"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#ae723b570d1c3caab0ff080c117fa15cf">arm_compute::experimental::dynamic_fusion::ArgumentPack::add_const_tensor</a></div><div class="ttdeci">void add_const_tensor(Id id, const T *tensor)</div><div class="ttdoc">Add const tensor to the pack.</div><div class="ttdef"><b>Definition:</b> <a href="_argument_pack_8h_source.xhtml#l00113">ArgumentPack.h:113</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_xhtml_a61bf45ebe0672e2a8438434521436c36"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a61bf45ebe0672e2a8438434521436c36">arm_compute::experimental::dynamic_fusion::ArgumentPack::ArgumentPack</a></div><div class="ttdeci">ArgumentPack()=default</div><div class="ttdoc">Default constructor.</div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_xhtml_a143340085c13e43abc32b6753f2bb826"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a143340085c13e43abc32b6753f2bb826">arm_compute::experimental::dynamic_fusion::ArgumentPack::get_tensor</a></div><div class="ttdeci">T * get_tensor(Id id)</div><div class="ttdoc">Get tensor of a given id from the pack.</div><div class="ttdef"><b>Definition:</b> <a href="_argument_pack_8h_source.xhtml#l00123">ArgumentPack.h:123</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_xhtml_a259cb5a711406a8c3e5d937eb9350cca"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a259cb5a711406a8c3e5d937eb9350cca">arm_compute::experimental::dynamic_fusion::ArgumentPack::size</a></div><div class="ttdeci">size_t size() const</div><div class="ttdoc">Pack size accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_argument_pack_8h_source.xhtml#l00155">ArgumentPack.h:155</a></div></div>
<div class="ttc" id="astructarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element_xhtml_ad6634830e90a4c02dc4d1a76f4e65eeb"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element.xhtml#ad6634830e90a4c02dc4d1a76f4e65eeb">arm_compute::experimental::dynamic_fusion::ArgumentPack::PackElement::tensor</a></div><div class="ttdeci">T * tensor</div><div class="ttdoc">Non-const pointer to tensor-related object.</div><div class="ttdef"><b>Definition:</b> <a href="_argument_pack_8h_source.xhtml#l00070">ArgumentPack.h:70</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_xhtml_a0cc4d50143adce1cc5d438be07b8780a"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a0cc4d50143adce1cc5d438be07b8780a">arm_compute::experimental::dynamic_fusion::ArgumentPack::add_tensor</a></div><div class="ttdeci">void add_tensor(Id id, T *tensor)</div><div class="ttdoc">Add tensor to the pack.</div><div class="ttdef"><b>Definition:</b> <a href="_argument_pack_8h_source.xhtml#l00104">ArgumentPack.h:104</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_xhtml_a89274036665beb68bbaf3949a315fb04"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a89274036665beb68bbaf3949a315fb04">arm_compute::experimental::dynamic_fusion::ArgumentPack::operator=</a></div><div class="ttdeci">ArgumentPack&lt; T &gt; &amp; operator=(const ArgumentPack&lt; T &gt; &amp;other)=default</div><div class="ttdoc">Allow instances of this class to be copied.</div></div>
<div class="ttc" id="astructarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element_xhtml_a7427b040a7162cd7d48e44c19de8dc4e"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element.xhtml#a7427b040a7162cd7d48e44c19de8dc4e">arm_compute::experimental::dynamic_fusion::ArgumentPack::PackElement::PackElement</a></div><div class="ttdeci">PackElement(Id id, T *tensor)</div><div class="ttdef"><b>Definition:</b> <a href="_argument_pack_8h_source.xhtml#l00060">ArgumentPack.h:60</a></div></div>
<div class="ttc" id="astructarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element_xhtml_aeb4a62c11cd7ffdce6e7e9791526adb9"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element.xhtml#aeb4a62c11cd7ffdce6e7e9791526adb9">arm_compute::experimental::dynamic_fusion::ArgumentPack::PackElement::operator=</a></div><div class="ttdeci">PackElement &amp; operator=(const PackElement &amp;elem)=default</div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_xhtml_a1b59cf7829dbda76975496804c6035ac"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a1b59cf7829dbda76975496804c6035ac">arm_compute::experimental::dynamic_fusion::ArgumentPack::~ArgumentPack</a></div><div class="ttdeci">~ArgumentPack()=default</div><div class="ttdoc">Destructor.</div></div>
<div class="ttc" id="a_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00066">ClWorkloadRuntime.cpp:66</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_xhtml_a95d4dfcd1d28cd4461e3bee6d1f472d5"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a95d4dfcd1d28cd4461e3bee6d1f472d5">arm_compute::experimental::dynamic_fusion::ArgumentPack::get_const_dst_tensors</a></div><div class="ttdeci">std::vector&lt; const T * &gt; get_const_dst_tensors() const</div><div class="ttdoc">Get the const ACL_DST_* tensors.</div><div class="ttdef"><b>Definition:</b> <a href="_argument_pack_8h_source.xhtml#l00222">ArgumentPack.h:222</a></div></div>
<div class="ttc" id="astructarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element_xhtml_a3c969ca5493e6ed7a5227ee353a9edec"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element.xhtml#a3c969ca5493e6ed7a5227ee353a9edec">arm_compute::experimental::dynamic_fusion::ArgumentPack::PackElement::ctensor</a></div><div class="ttdeci">const T * ctensor</div><div class="ttdoc">Const pointer to tensor-related object.</div><div class="ttdef"><b>Definition:</b> <a href="_argument_pack_8h_source.xhtml#l00072">ArgumentPack.h:72</a></div></div>
<div class="ttc" id="astructarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element_xhtml_a150a709e86e7134d17cd063de6810b6c"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element.xhtml#a150a709e86e7134d17cd063de6810b6c">arm_compute::experimental::dynamic_fusion::ArgumentPack::PackElement::id</a></div><div class="ttdeci">Id id</div><div class="ttdoc">Argument id within the pack.</div><div class="ttdef"><b>Definition:</b> <a href="_argument_pack_8h_source.xhtml#l00069">ArgumentPack.h:69</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_xhtml_a9d6084ee3875b08560752a92417378bb"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a9d6084ee3875b08560752a92417378bb">arm_compute::experimental::dynamic_fusion::ArgumentPack::remove_tensor</a></div><div class="ttdeci">void remove_tensor(Id id)</div><div class="ttdoc">Remove the tensor stored with the given id.</div><div class="ttdef"><b>Definition:</b> <a href="_argument_pack_8h_source.xhtml#l00147">ArgumentPack.h:147</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2023 Arm Limited.</div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_xhtml_af51575e50393ea37d24c67383fd61d09"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#af51575e50393ea37d24c67383fd61d09">arm_compute::experimental::dynamic_fusion::ArgumentPack::get_const_src_tensors</a></div><div class="ttdeci">std::vector&lt; const T * &gt; get_const_src_tensors() const</div><div class="ttdoc">Get the const ACL_SRC_* tensors.</div><div class="ttdef"><b>Definition:</b> <a href="_argument_pack_8h_source.xhtml#l00188">ArgumentPack.h:188</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_xhtml_a88b8d9bbd989cabb3a326c05e45aa8fa"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a88b8d9bbd989cabb3a326c05e45aa8fa">arm_compute::experimental::dynamic_fusion::ArgumentPack::ArgumentPack</a></div><div class="ttdeci">ArgumentPack(const std::initializer_list&lt; PackElement &gt; &amp;l)</div><div class="ttdoc">Initializer list Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_argument_pack_8h_source.xhtml#l00091">ArgumentPack.h:91</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828ae1a1ae3e3415cb95b96aa11edbdbbb69"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828ae1a1ae3e3415cb95b96aa11edbdbbb69">arm_compute::ACL_SRC</a></div><div class="ttdeci">@ ACL_SRC</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00044">Types.h:44</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_5ff8356557e4f59c6a20c3735e8d2267.xhtml">dynamic_fusion</a></li><li class="navelem"><a class="el" href="dir_729ca8b25cabcdcb8b11b571ea7b237a.xhtml">sketch</a></li><li class="navelem"><a class="el" href="_argument_pack_8h.xhtml">ArgumentPack.h</a></li>
    <li class="footer">Generated on Wed Jul 5 2023 11:29:15 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
