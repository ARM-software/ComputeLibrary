<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: Gemm Tuner</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.05.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('md_examples_gemm_tuner__r_e_a_d_m_e.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="PageDoc"><div class="header">
  <div class="headertitle">
<div class="title">Gemm Tuner </div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><h1><a class="anchor" id="autotoc_md1"></a>
Introduction</h1>
<p>This is a set of tools for tuning the performance of OpenCL GEMM kernels. Specifically, we tune 3 GEMM kernels, each has a different implementation <b>strategy</b> of the GEMM operation: <b>native</b>, <b>reshaped</b>, <b>reshaped only rhs</b>. The details of these strategies can be found in the documentations of the corresponding kernels: <b>CLGEMMMatrixMultiplyNativeKernel</b>, <b>CLGEMMMatrixMultiplyReshapedKernel</b> and <b>CLGEMMMatrixMultiplyReshapedOnlyRHSKernel</b>.</p>
<p>The Tuner consists of 2 scripts and 3 binaries:</p><ul>
<li>cl_gemm_benchmark and <a class="el" href="_gemm_tuner_8py.xhtml">GemmTuner.py</a> under examples/gemm_tuner, and</li>
<li>benchmark_cl_gemm_native, benchmark_cl_gemm_reshaped_rhs_only and benchmark_cl_gemm_reshaped under build/tests/gemm_tuner (you'll need to build the library first)</li>
</ul>
<p>The inputs to the Tuner are a list of 4 valued tuples we call <b>GEMM shape</b> or <b>GEMMParam</b> (M, N, K, B, and possibly data type). They define the "shape" and other parameters (eg. data type) of a GEMM operation: </p><div class="fragment"><div class="line">LHS x RHS = DST</div>
</div><!-- fragment --><p>Where LHS is of shape MxK, RHS is of shape KxN and DST is of shape MxN, and B is the batch size.</p>
<p>The outputs of the tuning process are 4 json files:</p><ol type="1">
<li>gemm_type_selection.json: selects which kernel type is the best for each GEMMParam</li>
<li>gemm_config_native.json: selects a list of best <b>GEMMConfigs</b> of the native kernel for each GEMMParam</li>
<li>gemm_config_reshapedonlyrhs.json: selects a list of best GEMMConfigs of the reshaped_only_rhs kernel for each GEMMParam</li>
<li>gemm_config_reshaped.json: selects a list of best GEMMConfigs of the reshaped kernel for each GEMMParam</li>
</ol>
<p>These 4 files are the current representations we use for what we call the <b>heuristics</b> of a GEMM op: given a GEMMParam, what kernel and subsequently what configurations for that kernels are the most performant.</p>
<h1><a class="anchor" id="autotoc_md2"></a>
Step-by-step example</h1>
<h2><a class="anchor" id="autotoc_md3"></a>
Step1: Prepare the shape and configs files</h2>
<ol type="1">
<li>We first need to identify the shapes that we are interested in and store them in a csv file, say <em>gemm_shapes.csv</em>.</li>
<li><p class="startli">Then we need to specify a set of good GEMMConfig candidates for each kernel in 3 separate csv files (this requires some prior heuristics, but can be provided by the Compute Library developers upon requests, based on your target device).</p>
<p class="startli">Say we have *gemm_configs_native.csv", "gemm_configs_reshaped.csv" and "gemm_configs_reshaped_only_rhs.csv".</p>
<p class="startli">Please refer to the Prerequisite section for more details</p>
</li>
</ol>
<h2><a class="anchor" id="autotoc_md4"></a>
Step2: Push relevant files to the target device</h2>
<p>All the files that need to be present on the target device are:</p><ul>
<li>benchmark script: &lt;ComputeLibrary&gt;/examples/gemm_tuner/cl_gemm_benchmark</li>
<li>shapes and configs csv files: gemm_shapes.csv, gemm_configs_native.csv, gemm_configs_reshaped_only_rhs.csv, gemm_configs_reshaped.csv</li>
<li>Example benchmark binaries: &lt;ComputeLibrary&gt;/build/tests/gemm_tuner/benchmark_cl_gemm*</li>
</ul>
<h2><a class="anchor" id="autotoc_md5"></a>
Step3: Collect benchmark data</h2>
<p>With these files on device, we can collect benchmark data using the script. Assume all the example binaries are pushed to a folder called <em><a class="el" href="namespacegemm__tuner.xhtml">gemm_tuner</a></em>. While logged onto our device: </p><div class="fragment"><div class="line"># Native</div>
<div class="line">./cl_gemm_benchmark -s native -e ./gemm_tuner -g ./gemm_shapes.csv -c ./gemm_configs_native.csv -o results/native</div>
<div class="line"># Reshaped Only RHS</div>
<div class="line">./cl_gemm_benchmark -s reshaped_rhs_only -e ./gemm_tuner -g ./gemm_shapes.csv -c ./gemm_configs_reshaped_only_rhs.csv -o results/reshaped_only_rhs</div>
<div class="line"># Reshaped</div>
<div class="line">./cl_gemm_benchmark -s reshaped -e ./gemm_tuner -g ./gemm_shapes.csv -c ./gemm_configs_reshaped.csv -o results/reshaped</div>
</div><!-- fragment --><p>You can repeat the 3 commands above to have a bit redundancy in your benchmark data (as you can imagine, measurement is noisy), but you may need to change the output folder for each repeat</p>
<p>It is also possible to split the benchmark phase among different platforms using the <b>-i</b> and <b>-n</b> options to specificy the starting experiment and the number of benchmark to run.</p>
<h1><a class="anchor" id="autotoc_md6"></a>
Reshaped benchmark on 3 different platforms</h1>
<h2><a class="anchor" id="autotoc_md7"></a>
Platform 1</h2>
<p>./cl_gemm_benchmark -s reshaped -e ./gemm_tuner -g ./gemm_shapes.csv -c ./gemm_configs_reshaped.csv -o results/reshaped -i 0 -n 8 </p>
<h2><a class="anchor" id="autotoc_md8"></a>
Platform 2</h2>
<p>./cl_gemm_benchmark -s reshaped -e ./gemm_tuner -g ./gemm_shapes.csv -c ./gemm_configs_reshaped.csv -o results/reshaped -i 8 -n 8 </p>
<h2><a class="anchor" id="autotoc_md9"></a>
Platform 3</h2>
<p>./cl_gemm_benchmark -s reshaped -e ./gemm_tuner -g ./gemm_shapes.csv -c ./gemm_configs_reshaped.csv -o results/reshaped -i 16 -n 8</p>
<h3><a class="anchor" id="autotoc_md10"></a>
Step4: Generate the heuristics</h3>
<ol type="1">
<li>After benchmarking, we pull the benchmark data, the <em>results</em> folder, from the target device to our host machine</li>
<li><p class="startli">We use the <a class="el" href="_gemm_tuner_8py.xhtml">GemmTuner.py</a> script to give us the heuristics </p><div class="fragment"><div class="line">python3 &lt;ComputeLibrary&gt;/examples/gemm_tuner/GemmTuner.py -b ./results -o heuristics</div>
</div><!-- fragment --><p class="startli">When it's finished, there should be 4 json files in the <em>heuristics</em> folder</p>
</li>
</ol>
<p>One thing to notice is that the config heuristics might give more than 1 recommendations for each GEMMParam, because we accept all good GEMMConfigs with a tolerance. If you want fewer recommendations, you can decrease the tolerance by passing a lower value to <em>-t &lt;tolerance&gt;</em> to the <a class="el" href="_gemm_tuner_8py.xhtml">GemmTuner.py</a> script.</p>
<h2><a class="anchor" id="autotoc_md11"></a>
Prerequisite</h2>
<ul>
<li>A target device to be tuned, plus the following on the device:<ul>
<li>Android or Linux OS</li>
<li>Bash shell</li>
<li>Built Compute Library with benchmark examples binaries</li>
<li>cl_gemm_benchmark script</li>
<li><p class="startli">gemm shape file</p>
<p class="startli">A csv file containing the <b>GEMMParam search list</b>. This is the list of GEMMParams/gemm shapes that we're interested in (For more details see Approach section). The default list is prepared by Compute Library developers in advance and can be provided on request.</p>
<p class="startli">The format is described as:</p>
<p class="startli">A headerless csv file with fields separated by commas.</p>
<p class="startli">A gemm shape is a list of 4 positive integers &lt;M, N, K, B&gt; describing the shapes of the two matrices (LHS and RHS) with:</p>
<p class="startli">M - Number of lhs matrix rows <br  />
 N - Number of rhs matrix columns <br  />
 K - Number of lhs matrix columns/rhs matrix rows <br  />
 B - Batch size <br  />
</p>
<p class="startli">An example gemm shape file looks like: </p><div class="fragment"><div class="line">100,100,30,1</div>
<div class="line">100,100,30,3</div>
<div class="line">...</div>
</div><!-- fragment --> <pre class="fragment">* gemm config file  
  A csv file containing the **GEMMConfig search list**. This is the list of candidate GEMMConfigs among which we
  search for the optimal one. **Note that we have a different list for each strategy.**
  The default lists are prepared by Compute Library developers in advance and can be provided on request.

  The format of the file for each strategy is the same:  

  A headerless csv file with fields separated by commas.

  However the fields of GEMMConfig differ for each strategy:

  * Strategy **native**:
    A gemm config is a list of 3 positive integers \&lt;m0, n0, k0\&gt;, with:

    m0 - Number of rows processed by the matrix multiplication  
    n0 - Number of columns processed by the matrix multiplication  
    k0 - Number of partial accumulations performed by the matrix multiplication

    Only the following configurations of M0, N0 and K0 are currently supported:

    M0 = 1, 2, 3, 4, 5, 6, 7, 8  
    N0 = 2, 3, 4, 8, 16  
    K0 = 2, 3, 4, 8, 16  

    An example gemm config file looks like:
</pre> <div class="fragment"><div class="line">1,4,4</div>
<div class="line">2,3,8</div>
<div class="line">...</div>
</div><!-- fragment --> <pre class="fragment">  * Strategy **reshaped_rhs_only**:
    A gemm config is a list of 4 positive integers &lt;m0, n0, k0, h0&gt; and 3 boolean values:

    m0 - Number of rows processed by the matrix multiplication  
    n0 - Number of columns processed by the matrix multiplication  
    k0 - Number of partial accumulations performed by the matrix multiplication  
    h0 - Number of horizontal blocks of size (k0xn0) stored on the same output row  
    interleave_rhs - Interleave rhs matrix (1) / Do not interleave rhs matrix (0)  
    transpose_rhs - Transpose rhs matrix (1) / Do not transpose rhs matrix (0)  
    export_to_cl_image_rhs - Export rhs matrix to cl_image (1) / Do not export rhs matrix to cl_image (0). Can only be true
                            with certain combinations of the GEMMParams and other configs. Please refer to CLGEMMReshapeRHSMatrixKernel
                            for more details

    Only the following configurations of M0, N0 and K0 are currently supported:

    M0 = 1, 2, 3, 4, 5, 6, 7, 8  
    N0 = 2, 3, 4, 8, 16  
    K0 = 2, 3, 4, 8, 16  
    H0 &gt;= 1  

    An example gemm config file looks like:
</pre> <div class="fragment"><div class="line">4,4,4,1,1,1,0</div>
<div class="line">4,4,4,3,1,0,1</div>
<div class="line">...</div>
</div><!-- fragment --> <pre class="fragment">  * Strategy **reshaped**:
    A gemm config is a list of 5 positive integers &lt;m0, n0, k0, v0, h0&gt; and 4 boolean values:

    m0 - Number of rows processed by the matrix multiplication  
    n0 - Number of columns processed by the matrix multiplication  
    k0 - Number of partial accumulations performed by the matrix multiplication  
    v0 - Number of vertical blocks of size (m0xk0) stored on the same output row  
    h0 - Number of horizontal blocks of size (k0xn0) stored on the same output row  
    interleave_lhs - Interleave lhs matrix (1) / Do not interleave lhs matrix (0)  
    interleave_rhs - Interleave rhs matrix (1) / Do not interleave rhs matrix (0)  
    transpose_rhs - Transpose rhs matrix but not lhs matrix (1) / Do not transpose rhs matrix but do transpose lhs matrix (0)  
    export_to_cl_image_rhs - Export rhs matrix to cl_image (1) / Do not export rhs matrix to cl_image (0). Can only be true
                            with certain combinations of the GEMMParams and other configs. Please refer to CLGEMMReshapeRHSMatrixKernel
                            for more details

    If rhs matrix is transposed only the following configurations are currently supported:

    M0 = 2, 3, 4, 5, 6, 7, 8  
    N0 = 2, 3, 4, 8, 16  
    K0 = 2, 3, 4, 8, 16  
    V0 &gt;= 1  
    H0 &gt;= 1  

    If lhs matrix is transposed only the following configurations are currently supported:

    M0 = 2, 3, 4, 8  
    N0 = 2, 3, 4, 8, 16  
    K0 = 2, 3, 4, 8, 16  
    V0 &gt;= 1  
    H0 &gt;= 1  

    An example gemm config file looks like:
</pre> <div class="fragment"><div class="line">4,4,4,1,3,1,1,1,0</div>
<div class="line">4,4,4,3,3,1,1,0,1</div>
<div class="line">...</div>
</div><!-- fragment --></li>
</ul>
</li>
<li>A host machine, plus these on the machine:<ul>
<li>python &gt;= 3.6</li>
<li><a class="el" href="_gemm_tuner_8py.xhtml">GemmTuner.py</a> script</li>
</ul>
</li>
</ul>
<h2><a class="anchor" id="autotoc_md12"></a>
Usage</h2>
<p>The usage of the 2 scripts:</p>
<ol type="1">
<li><p class="startli">cl_gemm_benchmark</p>
<p class="startli">Run the shell script (<b>cl_gemm_benchmark</b>) on your <b>target device</b>. Note that all the built benchmark examples: build/tests/gemm_tuner/benchmark_cl_gemm*, have to be present on your target device prior to running. The benchmark results will be saved to json files in an output directory. </p><div class="fragment"><div class="line">Usage: cl_gemm_benchmark [-h] -s &lt;strategy&gt; -e &lt;example_binary_dir&gt; -g &lt;gemm_shape_file&gt;</div>
<div class="line">-c &lt;gemm_config_file&gt; [-d &lt;data_type&gt;] [-o &lt;out_dir&gt;]</div>
<div class="line"> </div>
<div class="line">Options:</div>
<div class="line">        -h</div>
<div class="line">        Print help messages. If a strategy is specified with -s &lt;strategy&gt;, then only display messages relevant to that</div>
<div class="line">        strategy. Otherwise if no strategy is specified, display messages for all available strategies.</div>
<div class="line"> </div>
<div class="line">        -s &lt;strategy&gt;</div>
<div class="line">        Strategy option.</div>
<div class="line">        Options: ${ALL_STRATEGY_OPTIONS[@]}.</div>
<div class="line"> </div>
<div class="line">        -e &lt;example_binary_dir&gt;</div>
<div class="line">        Path to directory that holds all example binaries</div>
<div class="line"> </div>
<div class="line">        -g &lt;gemm_shape_file&gt;</div>
<div class="line">        Path to gemm shape csv file</div>
<div class="line"> </div>
<div class="line">        -c &lt;gemm_config_file&gt;</div>
<div class="line">        Path to gemm config csv file</div>
<div class="line"> </div>
<div class="line">        -d &lt;data_type&gt;</div>
<div class="line">        Data type option with which to run benchmark examples</div>
<div class="line">        Default: ${DEFAULT_DATA_TYPE}</div>
<div class="line">        Supported options:</div>
<div class="line">        Strategy            :    Data Types</div>
<div class="line">        Native              :    F32</div>
<div class="line">        Reshaped            :    F16, F32</div>
<div class="line">        Reshaped RHS Only   :    F16, F32</div>
<div class="line"> </div>
<div class="line">        -o &lt;out_dir&gt;</div>
<div class="line">        Path to output directory that holds output json files</div>
<div class="line">        Default: ${DEFAULT_OUT_DIR}</div>
</div><!-- fragment --></li>
<li><p class="startli"><a class="el" href="_gemm_tuner_8py.xhtml">GemmTuner.py</a>:</p>
<p class="startli">Run the python script (<b><a class="el" href="_gemm_tuner_8py.xhtml">GemmTuner.py</a></b>) on your <b>host machine</b>. You'll need to transfer all the benchmark result json files generated from the previous step to your host machine beforehand. The script will output the best kernel and gemm configurations for each gemm param in the 4 output json files </p><div class="fragment"><div class="line">Usage: GemmTuner.py [-h] -b PATH [-o PATH] [-t TOLERANCE] [-D]</div>
<div class="line"> </div>
<div class="line">CL GEMM Tuner</div>
<div class="line">optional arguments:</div>
<div class="line">  -h, --help            show this help message and exit</div>
<div class="line">  -b PATH, --benchmark_results PATH</div>
<div class="line">                        Path to benchmark result directory, where benchmark</div>
<div class="line">                        result json files have a file extension of</div>
<div class="line">                        &#39;gemmtuner_benchmark&#39;</div>
<div class="line">  -o PATH, --output_dir PATH</div>
<div class="line">                        Path to directory that holds output json files.</div>
<div class="line">  -t TOLERANCE, --tolerance TOLERANCE</div>
<div class="line">                        For testing if two GEMMConfigs are equivalent in terms</div>
<div class="line">                        of performance. The tolerance is OpenCL timer in</div>
<div class="line">                        milliseconds. Recommended value: &lt;= 0.1 ms</div>
<div class="line">  -D, --debug           Enable script debugging output</div>
</div><!-- fragment --> </li>
</ol>
</div></div><!-- contents -->
</div><!-- PageDoc -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="footer">Generated on Wed Jul 5 2023 11:29:23 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
