<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/NEON/NEAsymm.inl Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.05.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_n_e_asymm_8inl_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">NEAsymm.inl</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_n_e_asymm_8inl.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017-2020, 2023 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160; </div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_rounding_8h.xhtml">arm_compute/core/Rounding.h</a>&quot;</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160; </div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;{</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="keyword">template</span> &lt;RoundingPolicy round_policy&gt;</div>
<div class="line"><a name="l00030"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#ac7efaafdf526cf144e7f1f24521074d1">   30</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="namespacearm__compute.xhtml#ac7e1832b8c58f07a98fc8d390b16ac27">qasymm8x16_t</a> <a class="code" href="namespacearm__compute.xhtml#ac7efaafdf526cf144e7f1f24521074d1">vmlaq_qasymm8</a>(<a class="code" href="namespacearm__compute.xhtml#ac7e1832b8c58f07a98fc8d390b16ac27">qasymm8x16_t</a> vd, float32x4_t vs, float32x4_t vo)</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;{</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <span class="comment">// Convert uint8 vectors to uint16 vectors</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <span class="keyword">const</span> uint8x8_t vd_low        = vget_low_u8(vd);</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="keyword">const</span> uint8x8_t vd_high       = vget_high_u8(vd);</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    uint16x8_t      vd_low_u16x8  = vmovl_u8(vd_low);</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    uint16x8_t      vd_high_u16x8 = vmovl_u8(vd_high);</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="comment">// Convert uint16 vectors to uint32 vectors</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    uint32x4_t A_u32x4 = vmovl_u16(vget_low_u16(vd_low_u16x8));</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    uint32x4_t B_u32x4 = vmovl_u16(vget_high_u16(vd_low_u16x8));</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    uint32x4_t C_u32x4 = vmovl_u16(vget_low_u16(vd_high_u16x8));</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    uint32x4_t D_u32x4 = vmovl_u16(vget_high_u16(vd_high_u16x8));</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="comment">// Convert uint32 vectors to float32 vectors</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    float32x4_t A_f32x4 = vcvtq_f32_u32(A_u32x4);</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    float32x4_t B_f32x4 = vcvtq_f32_u32(B_u32x4);</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    float32x4_t C_f32x4 = vcvtq_f32_u32(C_u32x4);</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    float32x4_t D_f32x4 = vcvtq_f32_u32(D_u32x4);</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="comment">// vd = vd*vs + vo</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    A_f32x4 = vmlaq_f32(vo, A_f32x4, vs);</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    B_f32x4 = vmlaq_f32(vo, B_f32x4, vs);</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    C_f32x4 = vmlaq_f32(vo, C_f32x4, vs);</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    D_f32x4 = vmlaq_f32(vo, D_f32x4, vs);</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="comment">// Convert float32 vectors to uint32 vectors</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="preprocessor">#if __aarch64__</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keywordflow">if</span>(round_policy == <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">RoundingPolicy::TO_NEAREST_EVEN</a>)</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    {</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        A_u32x4 = vcvtnq_u32_f32(A_f32x4);</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        B_u32x4 = vcvtnq_u32_f32(B_f32x4);</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        C_u32x4 = vcvtnq_u32_f32(C_f32x4);</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        D_u32x4 = vcvtnq_u32_f32(D_f32x4);</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    }</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(round_policy == <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea8c0084566b290fa9e5e429f4ae241f95">RoundingPolicy::TO_NEAREST_UP</a>)</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    {</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        A_u32x4 = vcvtaq_u32_f32(A_f32x4);</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        B_u32x4 = vcvtaq_u32_f32(B_f32x4);</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        C_u32x4 = vcvtaq_u32_f32(C_f32x4);</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        D_u32x4 = vcvtaq_u32_f32(D_f32x4);</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    }</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    {</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        A_u32x4 = vcvtq_u32_f32(A_f32x4);</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        B_u32x4 = vcvtq_u32_f32(B_f32x4);</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        C_u32x4 = vcvtq_u32_f32(C_f32x4);</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        D_u32x4 = vcvtq_u32_f32(D_f32x4);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    }</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="preprocessor">#else  // #if __aarch64__</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="comment">// rounding mode only supported in aarch64</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    A_u32x4 = vcvtq_u32_f32(A_f32x4);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    B_u32x4 = vcvtq_u32_f32(B_f32x4);</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    C_u32x4 = vcvtq_u32_f32(C_f32x4);</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    D_u32x4 = vcvtq_u32_f32(D_f32x4);</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="preprocessor">#endif // #if __aarch64__</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="comment">// Convert uint32 vectors to uint16 vectors (with saturation)</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    vd_low_u16x8  = vcombine_u16(vqmovn_u32(A_u32x4), vqmovn_u32(B_u32x4));</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    vd_high_u16x8 = vcombine_u16(vqmovn_u32(C_u32x4), vqmovn_u32(D_u32x4));</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="comment">// convert uint16 vectors to uint8 vectors (with saturation)</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keywordflow">return</span> vcombine_u8(vqmovn_u16(vd_low_u16x8), vqmovn_u16(vd_high_u16x8));</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;}</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160; </div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="keyword">template</span> &lt;RoundingPolicy   round_policy&gt;</div>
<div class="line"><a name="l00090"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#aa34bc4940191b8b940b77fe0e27c7c7b">   90</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="namespacearm__compute.xhtml#adc8234d074c193f521029e81cda80bb2">qasymm8x16_signed_t</a> <a class="code" href="namespacearm__compute.xhtml#aa34bc4940191b8b940b77fe0e27c7c7b">vmlaq_qasymm8_signed</a>(<a class="code" href="namespacearm__compute.xhtml#adc8234d074c193f521029e81cda80bb2">qasymm8x16_signed_t</a> vd, float32x4_t vs, float32x4_t vo)</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;{</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="comment">// Convert uint8 vectors to int16 vectors</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keyword">const</span> int8x8_t vd_low        = vget_low_s8(vd);</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keyword">const</span> int8x8_t vd_high       = vget_high_s8(vd);</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    int16x8_t      vd_low_s16x8  = vmovl_s8(vd_low);</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    int16x8_t      vd_high_s16x8 = vmovl_s8(vd_high);</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="comment">// Convert int16 vectors to int32 vectors</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    int32x4_t A_s32x4 = vmovl_s16(vget_low_s16(vd_low_s16x8));</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    int32x4_t B_s32x4 = vmovl_s16(vget_high_s16(vd_low_s16x8));</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    int32x4_t C_s32x4 = vmovl_s16(vget_low_s16(vd_high_s16x8));</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    int32x4_t D_s32x4 = vmovl_s16(vget_high_s16(vd_high_s16x8));</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="comment">// Convert int32 vectors to float32 vectors</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    float32x4_t A_f32x4 = vcvtq_f32_s32(A_s32x4);</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    float32x4_t B_f32x4 = vcvtq_f32_s32(B_s32x4);</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    float32x4_t C_f32x4 = vcvtq_f32_s32(C_s32x4);</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    float32x4_t D_f32x4 = vcvtq_f32_s32(D_s32x4);</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="comment">// vd = vd*vs + vo</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    A_f32x4 = vmlaq_f32(vo, A_f32x4, vs);</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    B_f32x4 = vmlaq_f32(vo, B_f32x4, vs);</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    C_f32x4 = vmlaq_f32(vo, C_f32x4, vs);</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    D_f32x4 = vmlaq_f32(vo, D_f32x4, vs);</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="preprocessor">#if __aarch64__</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keywordflow">if</span>(round_policy == <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">RoundingPolicy::TO_NEAREST_EVEN</a>)</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    {</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        A_s32x4 = vcvtnq_s32_f32(A_f32x4);</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        B_s32x4 = vcvtnq_s32_f32(B_f32x4);</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        C_s32x4 = vcvtnq_s32_f32(C_f32x4);</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        D_s32x4 = vcvtnq_s32_f32(D_f32x4);</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    }</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(round_policy == <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea8c0084566b290fa9e5e429f4ae241f95">RoundingPolicy::TO_NEAREST_UP</a>)</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    {</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        A_s32x4 = vcvtaq_s32_f32(A_f32x4);</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        B_s32x4 = vcvtaq_s32_f32(B_f32x4);</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        C_s32x4 = vcvtaq_s32_f32(C_f32x4);</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        D_s32x4 = vcvtaq_s32_f32(D_f32x4);</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    }</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    {</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        A_s32x4 = vcvtq_s32_f32(A_f32x4);</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        B_s32x4 = vcvtq_s32_f32(B_f32x4);</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        C_s32x4 = vcvtq_s32_f32(C_f32x4);</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        D_s32x4 = vcvtq_s32_f32(D_f32x4);</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    }</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="preprocessor">#else  // #if __aarch64__</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="comment">// rounding mode only supported in aarch64</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    A_s32x4 = vcvtq_s32_f32(A_f32x4);</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    B_s32x4 = vcvtq_s32_f32(B_f32x4);</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    C_s32x4 = vcvtq_s32_f32(C_f32x4);</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    D_s32x4 = vcvtq_s32_f32(D_f32x4);</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="preprocessor">#endif // #if __aarch64__</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160; </div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="comment">// Convert int32 vectors to int16 vectors (with saturation)</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    vd_low_s16x8  = vcombine_s16(vqmovn_s32(A_s32x4), vqmovn_s32(B_s32x4));</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    vd_high_s16x8 = vcombine_s16(vqmovn_s32(C_s32x4), vqmovn_s32(D_s32x4));</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="comment">// convert int16 vectors to int8 vectors (with saturation)</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keywordflow">return</span> vcombine_s8(vqmovn_s16(vd_low_s16x8), vqmovn_s16(vd_high_s16x8));</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;}</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;} <span class="comment">// namespace arm_compute</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="anamespacearm__compute_xhtml_ac7e1832b8c58f07a98fc8d390b16ac27"><div class="ttname"><a href="namespacearm__compute.xhtml#ac7e1832b8c58f07a98fc8d390b16ac27">arm_compute::qasymm8x16_t</a></div><div class="ttdeci">uint8x16_t qasymm8x16_t</div><div class="ttdoc">8 bit quantized asymmetric vector with 16 elements</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00037">NEAsymm.h:37</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150"><div class="ttname"><a href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">arm_compute::RoundingPolicy::TO_NEAREST_EVEN</a></div><div class="ttdeci">@ TO_NEAREST_EVEN</div><div class="ttdoc">Rounds to nearest value; half rounds to nearest even.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_add6426cbf2e057a195846d4ba09a50bea8c0084566b290fa9e5e429f4ae241f95"><div class="ttname"><a href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea8c0084566b290fa9e5e429f4ae241f95">arm_compute::RoundingPolicy::TO_NEAREST_UP</a></div><div class="ttdeci">@ TO_NEAREST_UP</div><div class="ttdoc">Rounds to nearest value; half rounds away from zero.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ac7efaafdf526cf144e7f1f24521074d1"><div class="ttname"><a href="namespacearm__compute.xhtml#ac7efaafdf526cf144e7f1f24521074d1">arm_compute::vmlaq_qasymm8</a></div><div class="ttdeci">qasymm8x16_t vmlaq_qasymm8(qasymm8x16_t vd, float32x4_t vs, float32x4_t vo)</div><div class="ttdoc">Perform a multiply-accumulate on all 16 components of a QASYMM8 vector.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8inl_source.xhtml#l00030">NEAsymm.inl:30</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_rounding_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_rounding_8h.xhtml">Rounding.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_aa34bc4940191b8b940b77fe0e27c7c7b"><div class="ttname"><a href="namespacearm__compute.xhtml#aa34bc4940191b8b940b77fe0e27c7c7b">arm_compute::vmlaq_qasymm8_signed</a></div><div class="ttdeci">qasymm8x16_signed_t vmlaq_qasymm8_signed(qasymm8x16_signed_t vd, float32x4_t vs, float32x4_t vo)</div><div class="ttdoc">Perform a multiply-accumulate on all 16 components of a QASYMM8_SIGNED vector.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8inl_source.xhtml#l00090">NEAsymm.inl:90</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2023 Arm Limited.</div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_adc8234d074c193f521029e81cda80bb2"><div class="ttname"><a href="namespacearm__compute.xhtml#adc8234d074c193f521029e81cda80bb2">arm_compute::qasymm8x16_signed_t</a></div><div class="ttdeci">int8x16_t qasymm8x16_signed_t</div><div class="ttdoc">8 bit quantized signed asymmetric vector with 16 elements</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00043">NEAsymm.h:43</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_d91e1966cc57df4f49d1e07be7697713.xhtml">NEON</a></li><li class="navelem"><a class="el" href="_n_e_asymm_8inl.xhtml">NEAsymm.inl</a></li>
    <li class="footer">Generated on Wed Jul 5 2023 11:29:13 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
