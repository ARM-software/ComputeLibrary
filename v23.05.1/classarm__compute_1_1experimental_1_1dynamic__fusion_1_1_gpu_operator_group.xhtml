<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: GpuOperatorGroup Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.05.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_operator_group.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-attribs">Static Public Attributes</a>  </div>
  <div class="headertitle">
<div class="title">GpuOperatorGroup Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>A linear sequence of operators to be fused in a workload For the time being, this class is only used for validating operator fusion INVARIANTS:  
 <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_operator_group.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_gpu_operator_group_8h_source.xhtml">GpuOperatorGroup.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:aaafd71070c18da8190d445b43de84c22"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_operator_group.xhtml#aaafd71070c18da8190d445b43de84c22">try_add_operator</a> (const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml">Operator</a> &amp;op, bool is_output=false) const</td></tr>
<tr class="memdesc:aaafd71070c18da8190d445b43de84c22"><td class="mdescLeft">&#160;</td><td class="mdescRight">Try adding (without actually adding) an operator to the group.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_operator_group.xhtml#aaafd71070c18da8190d445b43de84c22">More...</a><br /></td></tr>
<tr class="separator:aaafd71070c18da8190d445b43de84c22"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2395670f670bd1cad21fba418566f4d0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_operator_group.xhtml#a2395670f670bd1cad21fba418566f4d0">add_operator</a> (const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml">Operator</a> &amp;op, bool is_output=false)</td></tr>
<tr class="memdesc:a2395670f670bd1cad21fba418566f4d0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add an operator to the group.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_operator_group.xhtml#a2395670f670bd1cad21fba418566f4d0">More...</a><br /></td></tr>
<tr class="separator:a2395670f670bd1cad21fba418566f4d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac3be1f04870ebf4c5fa052d5f77e0920"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml">Operator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_operator_group.xhtml#ac3be1f04870ebf4c5fa052d5f77e0920">new_operator</a> (const <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17730d14d0e88d5aed17a12e872c4efe">GpuOperatorType</a> &amp;operator_type, const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml">ArgumentPack</a>&lt; <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &gt; &amp;tensors) const</td></tr>
<tr class="memdesc:ac3be1f04870ebf4c5fa052d5f77e0920"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a new operator.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_operator_group.xhtml#ac3be1f04870ebf4c5fa052d5f77e0920">More...</a><br /></td></tr>
<tr class="separator:ac3be1f04870ebf4c5fa052d5f77e0920"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3813ea808aff30bba9bd90e9b95ef07e"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml">Operator</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_operator_group.xhtml#a3813ea808aff30bba9bd90e9b95ef07e">get_root_operator</a> () const</td></tr>
<tr class="memdesc:a3813ea808aff30bba9bd90e9b95ef07e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the "root operator" of the group, which is the first operator in a linear sequence.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_operator_group.xhtml#a3813ea808aff30bba9bd90e9b95ef07e">More...</a><br /></td></tr>
<tr class="separator:a3813ea808aff30bba9bd90e9b95ef07e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-attribs"></a>
Static Public Attributes</h2></td></tr>
<tr class="memitem:aaa5a7433018d9afeec13382e948b2d15"><td class="memItemLeft" align="right" valign="top">static constexpr size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_operator_group.xhtml#aaa5a7433018d9afeec13382e948b2d15">max_fused_operators</a> = 32</td></tr>
<tr class="separator:aaa5a7433018d9afeec13382e948b2d15"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>A linear sequence of operators to be fused in a workload For the time being, this class is only used for validating operator fusion INVARIANTS: </p>
<dl class="section note"><dt>Note</dt><dd>These invariants are exactly the same as operator fusion constraints<ol type="1">
<li>Fusion is limited to a linear sequence of operators</li>
<li>Max number of operators that can be fused is <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_operator_group.xhtml#aaa5a7433018d9afeec13382e948b2d15">GpuOperatorGroup::max_fused_operators</a></li>
<li>The fusion is subject to the pattern: Complex + Simple * | Simple + Simple * | Un-fusable</li>
<li>All operator but unfusable, have exactly 1 dst tensor</li>
<li>All fused operators share the same dst tensor shape</li>
<li>All fused operators' tensors share the same <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> </li>
</ol>
</dd></dl>

<p class="definition">Definition at line <a class="el" href="_gpu_operator_group_8h_source.xhtml#l00074">74</a> of file <a class="el" href="_gpu_operator_group_8h_source.xhtml">GpuOperatorGroup.h</a>.</p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="a2395670f670bd1cad21fba418566f4d0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2395670f670bd1cad21fba418566f4d0">&#9670;&nbsp;</a></span>add_operator()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void add_operator </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml">Operator</a> &amp;&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>is_output</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add an operator to the group. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">op</td><td><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="An operator for the sole purpose of validating fusion.">Operator</a> to be added </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">is_output</td><td>Whether this operator is the output operator. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_gpu_operator_group_8cpp_source.xhtml#l00146">146</a> of file <a class="el" href="_gpu_operator_group_8cpp_source.xhtml">GpuOperatorGroup.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;{</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_operator_group.xhtml#aaafd71070c18da8190d445b43de84c22">try_add_operator</a>(op, is_output));</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> src_tensor_ids = get_tensor_ids(op.tensors().get_const_src_tensors());</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> dst_tensor_ids = get_tensor_ids(op.tensors().get_const_dst_tensors());</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    _graph.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aad93356944397e10e5c315723914019a">add_operator_as_linear</a>(op.id(), src_tensor_ids, dst_tensor_ids, is_output);</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    _operators[op.id()] = op;</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_dependency_graph_8h_source.xhtml#l00171">DependencyGraph::add_operator_as_linear()</a>, <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_gpu_operator_group_8cpp_source.xhtml#l00056">Operator::id()</a>, <a class="el" href="_gpu_operator_group_8cpp_source.xhtml#l00066">Operator::tensors()</a>, and <a class="el" href="_gpu_operator_group_8cpp_source.xhtml#l00071">GpuOperatorGroup::try_add_operator()</a>.</p>

</div>
</div>
<a id="a3813ea808aff30bba9bd90e9b95ef07e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3813ea808aff30bba9bd90e9b95ef07e">&#9670;&nbsp;</a></span>get_root_operator()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml">Operator</a> * get_root_operator </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the "root operator" of the group, which is the first operator in a linear sequence. </p>
<dl class="section return"><dt>Returns</dt><dd>const Operator* Pointer to the root operator </dd></dl>

<p class="definition">Definition at line <a class="el" href="_gpu_operator_group_8cpp_source.xhtml#l00159">159</a> of file <a class="el" href="_gpu_operator_group_8cpp_source.xhtml">GpuOperatorGroup.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;{</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> roots = _graph.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a63be0889f78146e9a728676958cab98e">get_root_ops</a>();</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(roots.size() &gt; 1);</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keywordflow">if</span>(roots.empty())</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    {</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    }</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="keywordflow">return</span> &amp;_operators.at(roots[0]);</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, and <a class="el" href="_dependency_graph_8h_source.xhtml#l00352">DependencyGraph::get_root_ops()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_gpu_operator_group_8cpp_source.xhtml#l00071">GpuOperatorGroup::try_add_operator()</a>.</p>

</div>
</div>
<a id="ac3be1f04870ebf4c5fa052d5f77e0920"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac3be1f04870ebf4c5fa052d5f77e0920">&#9670;&nbsp;</a></span>new_operator()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml">Operator</a> new_operator </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17730d14d0e88d5aed17a12e872c4efe">GpuOperatorType</a> &amp;&#160;</td>
          <td class="paramname"><em>operator_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml">ArgumentPack</a>&lt; <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>tensors</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a new operator. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">operator_type</td><td><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17730d14d0e88d5aed17a12e872c4efe">GpuOperatorType</a> of the new operator </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensors</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> arguments to the new operator</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="An operator for the sole purpose of validating fusion.">Operator</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="_gpu_operator_group_8cpp_source.xhtml#l00154">154</a> of file <a class="el" href="_gpu_operator_group_8cpp_source.xhtml">GpuOperatorGroup.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;{</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="keyword">auto</span> new_id = <span class="keyword">static_cast&lt;</span><a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a7c53fb0e6cdb59d291688a586922ae57">OperatorId</a><span class="keyword">&gt;</span>(_operators.size());</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#a2c0ee4eb5bed32d6fb8358d113995aa4ae1b3ec89ead7f83a9245ed5c9cacfdbf">Operator</a>{ new_id, operator_type, tensors };</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="aaafd71070c18da8190d445b43de84c22"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaafd71070c18da8190d445b43de84c22">&#9670;&nbsp;</a></span>try_add_operator()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool try_add_operator </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml">Operator</a> &amp;&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>is_output</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Try adding (without actually adding) an operator to the group. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">op</td><td><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="An operator for the sole purpose of validating fusion.">Operator</a> to be added </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">is_output</td><td>Whether this operator is the output operator.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true If <code>op</code> can be added while maintaining the invariants </dd>
<dd>
false Otherwise </dd></dl>

<p class="definition">Definition at line <a class="el" href="_gpu_operator_group_8cpp_source.xhtml#l00071">71</a> of file <a class="el" href="_gpu_operator_group_8cpp_source.xhtml">GpuOperatorGroup.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;{</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> src_tensor_ids = get_tensor_ids(op.tensors().get_const_src_tensors());</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> dst_tensor_ids = get_tensor_ids(op.tensors().get_const_dst_tensors());</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="comment">// Constraint 1</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordflow">if</span>(!_graph.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#af4040a979c2f3bf8d4006b5c990f21db">try_add_operator_as_linear</a>(op.id(), src_tensor_ids, dst_tensor_ids, is_output))</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    {</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    }</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="comment">// Constraint 2</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordflow">if</span>(_operators.size() &gt;= <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_operator_group.xhtml#aaa5a7433018d9afeec13382e948b2d15">max_fused_operators</a>)</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    {</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    }</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="comment">// Constraint 3.1: Pattern: (Unfusable)</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keywordflow">if</span>(_operators.size() &gt; 0 &amp;&amp; <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_operator_group.xhtml#a3813ea808aff30bba9bd90e9b95ef07e">get_root_operator</a>()-&gt;operator_type() == <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17730d14d0e88d5aed17a12e872c4efeae157cdc2ee225c7a081c7bae83f17b0c">GpuOperatorType::Unfusable</a>)</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    {</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    }</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="comment">// Constraint 3.2</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keywordflow">if</span>(_operators.size() &gt; 0 &amp;&amp; (op.operator_type() != <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17730d14d0e88d5aed17a12e872c4efea1fbb1e3943c2c6c560247ac8f9289780">GpuOperatorType::Simple</a>))</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    {</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    }</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="comment">// Constraint 4</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keywordflow">if</span>(op.operator_type() != <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17730d14d0e88d5aed17a12e872c4efeae157cdc2ee225c7a081c7bae83f17b0c">GpuOperatorType::Unfusable</a> &amp;&amp; op.tensors().get_const_dst_tensors().size() != 1U)</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    {</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    }</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="comment">// Constraint 5</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keywordflow">if</span>(_operators.size() &gt; 0)</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    {</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> root_dst_tensors = <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_operator_group.xhtml#a3813ea808aff30bba9bd90e9b95ef07e">get_root_operator</a>()-&gt;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml#a4749b98f551a7ec56649d34bd4de0da0">tensors</a>().get_const_dst_tensors();</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(root_dst_tensors.empty());</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> first_dst_tensor = root_dst_tensors[0];</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> dst_tensors      = op.tensors().get_const_dst_tensors();</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;<a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a> : root_dst_tensors)</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        {</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1detail.xhtml#a45d610a8bc262f7007c934293361e888">detail::have_different_dimensions</a>(<a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a>-&gt;tensor_shape(), first_dst_tensor-&gt;tensor_shape(), 0))</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            {</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            }</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        }</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;<a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a> : dst_tensors)</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        {</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1detail.xhtml#a45d610a8bc262f7007c934293361e888">detail::have_different_dimensions</a>(<a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a>-&gt;tensor_shape(), first_dst_tensor-&gt;tensor_shape(), 0))</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            {</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            }</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        }</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    }</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="comment">// Constraint 6</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keywordflow">if</span>(_operators.size() &gt; 0)</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    {</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> root_dst_tensors = <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_operator_group.xhtml#a3813ea808aff30bba9bd90e9b95ef07e">get_root_operator</a>()-&gt;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml#a4749b98f551a7ec56649d34bd4de0da0">tensors</a>().get_const_dst_tensors();</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(root_dst_tensors.empty());</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> first_dst_tensor_layout = root_dst_tensors[0]-&gt;data_layout();</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> dst_tensors             = op.tensors().get_const_dst_tensors();</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;<a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a> : root_dst_tensors)</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        {</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            <span class="keywordflow">if</span>(<a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a>-&gt;data_layout() != first_dst_tensor_layout)</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            {</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            }</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        }</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;<a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a> : dst_tensors)</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        {</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            <span class="keywordflow">if</span>(<a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a>-&gt;data_layout() != first_dst_tensor_layout)</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            {</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            }</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        }</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    }</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_gpu_operator_group_8cpp_source.xhtml#l00159">GpuOperatorGroup::get_root_operator()</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00047">arm_compute::detail::have_different_dimensions()</a>, <a class="el" href="_gpu_operator_group_8cpp_source.xhtml#l00056">Operator::id()</a>, <a class="el" href="_gpu_operator_group_8h_source.xhtml#l00077">GpuOperatorGroup::max_fused_operators</a>, <a class="el" href="_gpu_operator_group_8cpp_source.xhtml#l00061">Operator::operator_type()</a>, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17730d14d0e88d5aed17a12e872c4efea1fbb1e3943c2c6c560247ac8f9289780">arm_compute::experimental::dynamic_fusion::Simple</a>, <a class="el" href="tf__frozen__model__extractor_8py_source.xhtml#l00049">tf_frozen_model_extractor::t</a>, <a class="el" href="_gpu_operator_group_8cpp_source.xhtml#l00066">Operator::tensors()</a>, <a class="el" href="_dependency_graph_8h_source.xhtml#l00098">DependencyGraph::try_add_operator_as_linear()</a>, <a class="el" href="_saturate_cast_8h_source.xhtml#l00064">arm_compute::utils::cast::U</a>, and <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17730d14d0e88d5aed17a12e872c4efeae157cdc2ee225c7a081c7bae83f17b0c">arm_compute::experimental::dynamic_fusion::Unfusable</a>.</p>

<p class="reference">Referenced by <a class="el" href="_gpu_operator_group_8cpp_source.xhtml#l00146">GpuOperatorGroup::add_operator()</a>.</p>

</div>
</div>
<h2 class="groupheader">Field Documentation</h2>
<a id="aaa5a7433018d9afeec13382e948b2d15"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaa5a7433018d9afeec13382e948b2d15">&#9670;&nbsp;</a></span>max_fused_operators</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr size_t max_fused_operators = 32</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_gpu_operator_group_8h_source.xhtml#l00077">77</a> of file <a class="el" href="_gpu_operator_group_8h_source.xhtml">GpuOperatorGroup.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="_gpu_operator_group_8cpp_source.xhtml#l00071">GpuOperatorGroup::try_add_operator()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/dynamic_fusion/sketch/gpu/<a class="el" href="_gpu_operator_group_8h_source.xhtml">GpuOperatorGroup.h</a></li>
<li>src/dynamic_fusion/sketch/gpu/<a class="el" href="_gpu_operator_group_8cpp_source.xhtml">GpuOperatorGroup.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="anamespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a17730d14d0e88d5aed17a12e872c4efeae157cdc2ee225c7a081c7bae83f17b0c"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17730d14d0e88d5aed17a12e872c4efeae157cdc2ee225c7a081c7bae83f17b0c">arm_compute::experimental::dynamic_fusion::GpuOperatorType::Unfusable</a></div><div class="ttdeci">@ Unfusable</div><div class="ttdoc">Unfusable operators are operators that cannot be fused with any other types of operators.</div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_af4040a979c2f3bf8d4006b5c990f21db"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#af4040a979c2f3bf8d4006b5c990f21db">arm_compute::experimental::dynamic_fusion::DependencyGraph::try_add_operator_as_linear</a></div><div class="ttdeci">bool try_add_operator_as_linear(OperatorId op, const std::vector&lt; TensorId &gt; &amp;inputs, const std::vector&lt; TensorId &gt; &amp;outputs, bool is_output=false) const</div><div class="ttdoc">Try adding an operator (without actually adding it), while keeping the graph as a &quot;linear sequence&quot; /...</div><div class="ttdef"><b>Definition:</b> <a href="_dependency_graph_8h_source.xhtml#l00098">DependencyGraph.h:98</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_a63be0889f78146e9a728676958cab98e"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a63be0889f78146e9a728676958cab98e">arm_compute::experimental::dynamic_fusion::DependencyGraph::get_root_ops</a></div><div class="ttdeci">std::vector&lt; OperatorId &gt; get_root_ops() const</div><div class="ttdoc">Get all root ops.</div><div class="ttdef"><b>Definition:</b> <a href="_dependency_graph_8h_source.xhtml#l00352">DependencyGraph.h:352</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_xhtml_a4749b98f551a7ec56649d34bd4de0da0"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml#a4749b98f551a7ec56649d34bd4de0da0">arm_compute::experimental::dynamic_fusion::Operator::tensors</a></div><div class="ttdeci">ArgumentPack&lt; ITensorInfo &gt; tensors() const</div><div class="ttdoc">Get tensor arguments.</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_operator_group_8cpp_source.xhtml#l00066">GpuOperatorGroup.cpp:66</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a17730d14d0e88d5aed17a12e872c4efea1fbb1e3943c2c6c560247ac8f9289780"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17730d14d0e88d5aed17a12e872c4efea1fbb1e3943c2c6c560247ac8f9289780">arm_compute::experimental::dynamic_fusion::GpuOperatorType::Simple</a></div><div class="ttdeci">@ Simple</div><div class="ttdoc">Simple operators are operators that:</div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_operator_group_xhtml_aaafd71070c18da8190d445b43de84c22"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_operator_group.xhtml#aaafd71070c18da8190d445b43de84c22">arm_compute::experimental::dynamic_fusion::GpuOperatorGroup::try_add_operator</a></div><div class="ttdeci">bool try_add_operator(const Operator &amp;op, bool is_output=false) const</div><div class="ttdoc">Try adding (without actually adding) an operator to the group.</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_operator_group_8cpp_source.xhtml#l00071">GpuOperatorGroup.cpp:71</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_aad93356944397e10e5c315723914019a"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aad93356944397e10e5c315723914019a">arm_compute::experimental::dynamic_fusion::DependencyGraph::add_operator_as_linear</a></div><div class="ttdeci">void add_operator_as_linear(OperatorId op, const std::vector&lt; TensorId &gt; &amp;inputs, const std::vector&lt; TensorId &gt; &amp;outputs, bool is_output=false)</div><div class="ttdoc">Add an operator, while keeping the graph as a &quot;linear sequence&quot;.</div><div class="ttdef"><b>Definition:</b> <a href="_dependency_graph_8h_source.xhtml#l00171">DependencyGraph.h:171</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_operator_group_xhtml_a3813ea808aff30bba9bd90e9b95ef07e"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_operator_group.xhtml#a3813ea808aff30bba9bd90e9b95ef07e">arm_compute::experimental::dynamic_fusion::GpuOperatorGroup::get_root_operator</a></div><div class="ttdeci">const Operator * get_root_operator() const</div><div class="ttdoc">Get the &quot;root operator&quot; of the group, which is the first operator in a linear sequence.</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_operator_group_8cpp_source.xhtml#l00159">GpuOperatorGroup.cpp:159</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1detail_xhtml_a45d610a8bc262f7007c934293361e888"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#a45d610a8bc262f7007c934293361e888">arm_compute::detail::have_different_dimensions</a></div><div class="ttdeci">bool have_different_dimensions(const Dimensions&lt; T &gt; &amp;dim1, const Dimensions&lt; T &gt; &amp;dim2, unsigned int upper_dim)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00047">Validate.h:47</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a7c53fb0e6cdb59d291688a586922ae57"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a7c53fb0e6cdb59d291688a586922ae57">arm_compute::experimental::dynamic_fusion::OperatorId</a></div><div class="ttdeci">DependencyGraph::OperatorId OperatorId</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_operator_group_8h_source.xhtml#l00039">GpuOperatorGroup.h:39</a></div></div>
<div class="ttc" id="anamespacetf__frozen__model__extractor_xhtml_aaccc9105df5383111407fd5b41255e23"><div class="ttname"><a href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">tf_frozen_model_extractor.t</a></div><div class="ttdeci">t</div><div class="ttdef"><b>Definition:</b> <a href="tf__frozen__model__extractor_8py_source.xhtml#l00049">tf_frozen_model_extractor.py:49</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_operator_group_xhtml_aaa5a7433018d9afeec13382e948b2d15"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_operator_group.xhtml#aaa5a7433018d9afeec13382e948b2d15">arm_compute::experimental::dynamic_fusion::GpuOperatorGroup::max_fused_operators</a></div><div class="ttdeci">static constexpr size_t max_fused_operators</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_operator_group_8h_source.xhtml#l00077">GpuOperatorGroup.h:77</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1detail_xhtml_a2c0ee4eb5bed32d6fb8358d113995aa4ae1b3ec89ead7f83a9245ed5c9cacfdbf"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#a2c0ee4eb5bed32d6fb8358d113995aa4ae1b3ec89ead7f83a9245ed5c9cacfdbf">arm_compute::detail::ObjectType::Operator</a></div><div class="ttdeci">@ Operator</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1experimental.xhtml">experimental</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml">dynamic_fusion</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_operator_group.xhtml">GpuOperatorGroup</a></li>
    <li class="footer">Generated on Wed Jul 5 2023 11:29:29 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
