<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute::experimental Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.05.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('namespacearm__compute_1_1experimental.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#namespaces">Namespaces</a> &#124;
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">arm_compute::experimental Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:namespacearm__compute_1_1experimental_1_1dynamic__fusion"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml">dynamic_fusion</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1_c_l_logical_and.xhtml">CLLogicalAnd</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1_c_l_logical_or.xhtml">CLLogicalOr</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1_c_l_slice.xhtml">CLSlice</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to perform tensor slicing.  <a href="classarm__compute_1_1experimental_1_1_c_l_slice.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1_c_l_strided_slice.xhtml">CLStridedSlice</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_strided_slice_kernel.xhtml">CLStridedSliceKernel</a>.  <a href="classarm__compute_1_1experimental_1_1_c_l_strided_slice.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1_i_c_l_operator.xhtml">ICLOperator</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic interface for functions which have a single async CL kernel.  <a href="classarm__compute_1_1experimental_1_1_i_c_l_operator.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1_i_n_e_operator.xhtml">INEOperator</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic interface for functions which have a single async CPU kernel.  <a href="classarm__compute_1_1experimental_1_1_i_n_e_operator.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1_i_operator.xhtml">IOperator</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Base class for all async functions.  <a href="classarm__compute_1_1experimental_1_1_i_operator.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1_i_post_op.xhtml">IPostOp</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">An elementwise n-ary operation that can be appended to and fused with (at kernel-level) other operators It contains:  <a href="structarm__compute_1_1experimental_1_1_i_post_op.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1_memory_info.xhtml">MemoryInfo</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1_n_e_slice.xhtml">NESlice</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to perform tensor slicing.  <a href="classarm__compute_1_1experimental_1_1_n_e_slice.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1_n_e_strided_slice.xhtml">NEStridedSlice</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_strided_slice_kernel.xhtml">NEStridedSliceKernel</a>.  <a href="classarm__compute_1_1experimental_1_1_n_e_strided_slice.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1_operator_tensor.xhtml">OperatorTensor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic implementation of the tensor interface.  <a href="classarm__compute_1_1experimental_1_1_operator_tensor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml">PostOpAct</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">(EXPERIMENTAL_POST_OPS) Implementation of specific IPostOps  <a href="structarm__compute_1_1experimental_1_1_post_op_act.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1_post_op_c_l_kernel_utils.xhtml">PostOpCLKernelUtils</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Manage validation, building and configurations of PostOp CL kernels.  <a href="classarm__compute_1_1experimental_1_1_post_op_c_l_kernel_utils.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_add.xhtml">PostOpEltwiseAdd</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1_post_op_eltwise_p_relu.xhtml">PostOpEltwisePRelu</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml">PostOpList</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A sequence of PostOps that can be appended to the end of other operators.  <a href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:a51c75906c46ed4b65a031a361e9786f7"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental.xhtml#a51c75906c46ed4b65a031a361e9786f7">PostOpTypeSequence</a> = std::vector&lt; <a class="el" href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425ea">PostOpType</a> &gt;</td></tr>
<tr class="memdesc:a51c75906c46ed4b65a031a361e9786f7"><td class="mdescLeft">&#160;</td><td class="mdescRight">An ordered sequence of type of Post Ops.  <a href="namespacearm__compute_1_1experimental.xhtml#a51c75906c46ed4b65a031a361e9786f7">More...</a><br /></td></tr>
<tr class="separator:a51c75906c46ed4b65a031a361e9786f7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa93a4d93eb22ef5445cd567ef22ca67c"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental.xhtml#aa93a4d93eb22ef5445cd567ef22ca67c">MemoryRequirements</a> = std::vector&lt; <a class="el" href="structarm__compute_1_1experimental_1_1_memory_info.xhtml">MemoryInfo</a> &gt;</td></tr>
<tr class="separator:aa93a4d93eb22ef5445cd567ef22ca67c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:a3411c74a9d92ff2e88330fce49a425ea"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425ea">PostOpType</a> { <a class="el" href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425eaaa9a62e70841c4d06dd16306a85700d36">Activation</a>, 
<a class="el" href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425eaa6416e8534b0dc047508a56ab36d45130">Eltwise_Add</a>, 
<a class="el" href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425eaa56ce6a9123158f9f5836a8d8f854bb21">Eltwise_PRelu</a>
 }</td></tr>
<tr class="memdesc:a3411c74a9d92ff2e88330fce49a425ea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of Post Op.  <a href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425ea">More...</a><br /></td></tr>
<tr class="separator:a3411c74a9d92ff2e88330fce49a425ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a90cbc7f3fa8bbc097dfd0429b31efb83"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental.xhtml#a90cbc7f3fa8bbc097dfd0429b31efb83">MemoryLifetime</a> { <a class="el" href="namespacearm__compute_1_1experimental.xhtml#a90cbc7f3fa8bbc097dfd0429b31efb83a10d85d7664a911bcaec89732098c269a">Temporary</a> = 0, 
<a class="el" href="namespacearm__compute_1_1experimental.xhtml#a90cbc7f3fa8bbc097dfd0429b31efb83a5fe7b9358c9cb1b9eaa8d5aec000def4">Persistent</a> = 1, 
<a class="el" href="namespacearm__compute_1_1experimental.xhtml#a90cbc7f3fa8bbc097dfd0429b31efb83af8199556cf6a62ca9268aa50c99b34a1">Prepare</a> = 2
 }</td></tr>
<tr class="separator:a90cbc7f3fa8bbc097dfd0429b31efb83"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a462bfa9dfea81692463ecb192183dd01"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental.xhtml#a462bfa9dfea81692463ecb192183dd01">MemoryType</a> { <a class="el" href="namespacearm__compute_1_1experimental.xhtml#a462bfa9dfea81692463ecb192183dd01a2b55387dd066c5bac646ac61543d152d">CPU</a>, 
<a class="el" href="namespacearm__compute_1_1experimental.xhtml#a462bfa9dfea81692463ecb192183dd01a5bc574a47246f122016869b32a6aa6f0">CL</a>
 }</td></tr>
<tr class="memdesc:a462bfa9dfea81692463ecb192183dd01"><td class="mdescLeft">&#160;</td><td class="mdescRight">Memory type.  <a href="namespacearm__compute_1_1experimental.xhtml#a462bfa9dfea81692463ecb192183dd01">More...</a><br /></td></tr>
<tr class="separator:a462bfa9dfea81692463ecb192183dd01"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ad576060443e0e20b7c4a637d80aa94b6"><td class="memTemplParams" colspan="2">template&lt;typename FromTensorT , typename ToTensorT &gt; </td></tr>
<tr class="memitem:ad576060443e0e20b7c4a637d80aa94b6"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml">PostOpList</a>&lt; ToTensorT &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental.xhtml#ad576060443e0e20b7c4a637d80aa94b6">transform_post_op_list_arguments</a> (const <a class="el" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml">PostOpList</a>&lt; FromTensorT &gt; &amp;post_ops, std::function&lt; ToTensorT(FromTensorT)&gt; transform_arg)</td></tr>
<tr class="memdesc:ad576060443e0e20b7c4a637d80aa94b6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transform a <a class="el" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml" title="A sequence of PostOps that can be appended to the end of other operators.">PostOpList</a> of type FromTensorT to one of type ToTensorT.  <a href="namespacearm__compute_1_1experimental.xhtml#ad576060443e0e20b7c4a637d80aa94b6">More...</a><br /></td></tr>
<tr class="separator:ad576060443e0e20b7c4a637d80aa94b6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e876ad78a0a85e931913b8efe3f918e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TensorType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental.xhtml#a2e876ad78a0a85e931913b8efe3f918e">get_post_op_arg_type</a> (size_t index)</td></tr>
<tr class="memdesc:a2e876ad78a0a85e931913b8efe3f918e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get post op argument TensorType from post op argument index in a flattened, ordered post op argument list.  <a href="namespacearm__compute_1_1experimental.xhtml#a2e876ad78a0a85e931913b8efe3f918e">More...</a><br /></td></tr>
<tr class="separator:a2e876ad78a0a85e931913b8efe3f918e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22525cfde930b77c53f9b6f5e98f2eae"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a22525cfde930b77c53f9b6f5e98f2eae"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute_1_1experimental.xhtml#a51c75906c46ed4b65a031a361e9786f7">PostOpTypeSequence</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental.xhtml#a22525cfde930b77c53f9b6f5e98f2eae">get_post_op_sequence</a> (const <a class="el" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml">PostOpList</a>&lt; T &gt; &amp;post_ops)</td></tr>
<tr class="memdesc:a22525cfde930b77c53f9b6f5e98f2eae"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a sequence of PostOp Types from <a class="el" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml" title="A sequence of PostOps that can be appended to the end of other operators.">PostOpList</a>.  <a href="namespacearm__compute_1_1experimental.xhtml#a22525cfde930b77c53f9b6f5e98f2eae">More...</a><br /></td></tr>
<tr class="separator:a22525cfde930b77c53f9b6f5e98f2eae"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Typedef Documentation</h2>
<a id="aa93a4d93eb22ef5445cd567ef22ca67c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa93a4d93eb22ef5445cd567ef22ca67c">&#9670;&nbsp;</a></span>MemoryRequirements</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1experimental.xhtml#aa93a4d93eb22ef5445cd567ef22ca67c">MemoryRequirements</a> =  std::vector&lt;<a class="el" href="structarm__compute_1_1experimental_1_1_memory_info.xhtml">MemoryInfo</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00134">134</a> of file <a class="el" href="arm__compute_2core_2experimental_2_types_8h_source.xhtml">Types.h</a>.</p>

</div>
</div>
<a id="a51c75906c46ed4b65a031a361e9786f7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a51c75906c46ed4b65a031a361e9786f7">&#9670;&nbsp;</a></span>PostOpTypeSequence</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1experimental.xhtml#a51c75906c46ed4b65a031a361e9786f7">PostOpTypeSequence</a> =  std::vector&lt;<a class="el" href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425ea">PostOpType</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>An ordered sequence of type of Post Ops. </p>

<p class="definition">Definition at line <a class="el" href="_i_post_op_8h_source.xhtml#l00043">43</a> of file <a class="el" href="_i_post_op_8h_source.xhtml">IPostOp.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Enumeration Type Documentation</h2>
<a id="a90cbc7f3fa8bbc097dfd0429b31efb83"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a90cbc7f3fa8bbc097dfd0429b31efb83">&#9670;&nbsp;</a></span>MemoryLifetime</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute_1_1experimental.xhtml#a90cbc7f3fa8bbc097dfd0429b31efb83">MemoryLifetime</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a90cbc7f3fa8bbc097dfd0429b31efb83a10d85d7664a911bcaec89732098c269a"></a>Temporary&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a90cbc7f3fa8bbc097dfd0429b31efb83a5fe7b9358c9cb1b9eaa8d5aec000def4"></a>Persistent&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a90cbc7f3fa8bbc097dfd0429b31efb83af8199556cf6a62ca9268aa50c99b34a1"></a>Prepare&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00090">90</a> of file <a class="el" href="arm__compute_2core_2experimental_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;{</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental.xhtml#a90cbc7f3fa8bbc097dfd0429b31efb83a10d85d7664a911bcaec89732098c269a">Temporary</a>  = 0,</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental.xhtml#a90cbc7f3fa8bbc097dfd0429b31efb83a5fe7b9358c9cb1b9eaa8d5aec000def4">Persistent</a> = 1,</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental.xhtml#a90cbc7f3fa8bbc097dfd0429b31efb83af8199556cf6a62ca9268aa50c99b34a1">Prepare</a>    = 2,</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a462bfa9dfea81692463ecb192183dd01"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a462bfa9dfea81692463ecb192183dd01">&#9670;&nbsp;</a></span>MemoryType</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute_1_1experimental.xhtml#a462bfa9dfea81692463ecb192183dd01">MemoryType</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p><a class="el" href="classarm__compute_1_1_memory.xhtml" title="CPU implementation of memory object.">Memory</a> type. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a462bfa9dfea81692463ecb192183dd01a2b55387dd066c5bac646ac61543d152d"></a>CPU&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a462bfa9dfea81692463ecb192183dd01a5bc574a47246f122016869b32a6aa6f0"></a>CL&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="arm__compute_2runtime_2experimental_2_types_8h_source.xhtml#l00034">34</a> of file <a class="el" href="arm__compute_2runtime_2experimental_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental.xhtml#a462bfa9dfea81692463ecb192183dd01a2b55387dd066c5bac646ac61543d152d">CPU</a>,</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad258d4c51629346fceac4679b3209ad9a5bc574a47246f122016869b32a6aa6f0">CL</a>,</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a3411c74a9d92ff2e88330fce49a425ea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3411c74a9d92ff2e88330fce49a425ea">&#9670;&nbsp;</a></span>PostOpType</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425ea">PostOpType</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Type of Post Op. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a3411c74a9d92ff2e88330fce49a425eaaa9a62e70841c4d06dd16306a85700d36"></a>Activation&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a3411c74a9d92ff2e88330fce49a425eaa6416e8534b0dc047508a56ab36d45130"></a>Eltwise_Add&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a3411c74a9d92ff2e88330fce49a425eaa56ce6a9123158f9f5836a8d8f854bb21"></a>Eltwise_PRelu&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_i_post_op_8h_source.xhtml#l00036">36</a> of file <a class="el" href="_i_post_op_8h_source.xhtml">IPostOp.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a5f9016ea3e28a033b7cc216bdda912be">Activation</a>,</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425eaa6416e8534b0dc047508a56ab36d45130">Eltwise_Add</a>,</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425eaa56ce6a9123158f9f5836a8d8f854bb21">Eltwise_PRelu</a></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="a2e876ad78a0a85e931913b8efe3f918e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2e876ad78a0a85e931913b8efe3f918e">&#9670;&nbsp;</a></span>get_post_op_arg_type()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TensorType</a> arm_compute::experimental::get_post_op_arg_type </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get post op argument TensorType from post op argument index in a flattened, ordered post op argument list. </p>

<p class="definition">Definition at line <a class="el" href="_post_op_utils_8h_source.xhtml#l00077">77</a> of file <a class="el" href="_post_op_utils_8h_source.xhtml">PostOpUtils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;{</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(<span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(index) &gt; <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a76d9a53376c80cf706722db037ddb46a">EXPERIMENTAL_ACL_POST_OP_ARG_LAST</a> - <a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a5a0c600c3e778e9a9a0ed14661980f48">EXPERIMENTAL_ACL_POST_OP_ARG_FIRST</a>, <span class="stringliteral">&quot;Post Op argument index is out of range&quot;</span>);</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TensorType</a><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a5a0c600c3e778e9a9a0ed14661980f48">EXPERIMENTAL_ACL_POST_OP_ARG_FIRST</a> + <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(index));</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00456">ARM_COMPUTE_ERROR_ON_MSG</a>, <a class="el" href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00084">arm_compute::EXPERIMENTAL_ACL_POST_OP_ARG_FIRST</a>, and <a class="el" href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00085">arm_compute::EXPERIMENTAL_ACL_POST_OP_ARG_LAST</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_g_e_m_m_convolution_layer_8cpp_source.xhtml#l00077">CLGEMMConvolutionLayer::configure()</a>, <a class="el" href="_c_l_convolution_layer_8cpp_source.xhtml#l00069">CLConvolutionLayer::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_native_kernel_8cpp_source.xhtml#l00367">ClGemmMatrixMultiplyNativeKernel::run_op()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00334">ClGemmMatrixMultiplyReshapedOnlyRhsKernel::run_op()</a>, and <a class="el" href="_cl_gemm_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00329">ClGemmMatrixMultiplyReshapedKernel::run_op()</a>.</p>

</div>
</div>
<a id="a22525cfde930b77c53f9b6f5e98f2eae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a22525cfde930b77c53f9b6f5e98f2eae">&#9670;&nbsp;</a></span>get_post_op_sequence()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1experimental.xhtml#a51c75906c46ed4b65a031a361e9786f7">PostOpTypeSequence</a> arm_compute::experimental::get_post_op_sequence </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml">PostOpList</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>post_ops</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get a sequence of PostOp Types from <a class="el" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml" title="A sequence of PostOps that can be appended to the end of other operators.">PostOpList</a>. </p>

<p class="definition">Definition at line <a class="el" href="_post_op_utils_8h_source.xhtml#l00085">85</a> of file <a class="el" href="_post_op_utils_8h_source.xhtml">PostOpUtils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;{</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental.xhtml#a51c75906c46ed4b65a031a361e9786f7">PostOpTypeSequence</a> post_op_sequence;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;op : <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8cd3187b8cbe01fb39012663c3f93aa5">post_ops</a>.get_list())</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    {</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        post_op_sequence.push_back(op-&gt;type());</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    }</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keywordflow">return</span> post_op_sequence;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00413">arm_compute::test::validation::post_ops</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_utils_8cpp_source.xhtml#l00121">PostOpCLKernelUtils::is_post_op_sequence_supported()</a>, <a class="el" href="_c_l_utils_8cpp_source.xhtml#l00132">PostOpCLKernelUtils::set_post_ops_cl_build_options()</a>, and <a class="el" href="_c_l_utils_8cpp_source.xhtml#l00181">PostOpCLKernelUtils::set_post_ops_cl_kernel_name()</a>.</p>

</div>
</div>
<a id="ad576060443e0e20b7c4a637d80aa94b6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad576060443e0e20b7c4a637d80aa94b6">&#9670;&nbsp;</a></span>transform_post_op_list_arguments()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml">PostOpList</a>&lt;ToTensorT&gt; arm_compute::experimental::transform_post_op_list_arguments </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml">PostOpList</a>&lt; FromTensorT &gt; &amp;&#160;</td>
          <td class="paramname"><em>post_ops</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::function&lt; ToTensorT(FromTensorT)&gt;&#160;</td>
          <td class="paramname"><em>transform_arg</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Transform a <a class="el" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml" title="A sequence of PostOps that can be appended to the end of other operators.">PostOpList</a> of type FromTensorT to one of type ToTensorT. </p>

<p class="definition">Definition at line <a class="el" href="_post_op_utils_8h_source.xhtml#l00042">42</a> of file <a class="el" href="_post_op_utils_8h_source.xhtml">PostOpUtils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;{</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    PostOpList&lt;ToTensorT&gt; transformed_post_ops;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;post_op : <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8cd3187b8cbe01fb39012663c3f93aa5">post_ops</a>.get_list())</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    {</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <span class="keywordflow">switch</span>(post_op-&gt;type())</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        {</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a5f9016ea3e28a033b7cc216bdda912be">PostOpType::Activation</a>:</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;            {</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> _post_op = utils::cast::polymorphic_downcast&lt;const PostOpAct&lt;FromTensorT&gt; *&gt;(post_op.get());</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;                transformed_post_ops.template push_back_op&lt;PostOpAct&lt;ToTensorT&gt;&gt;(_post_op-&gt;_act_info);</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            }</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            <span class="keywordflow">case</span> PostOpType::Eltwise_Add:</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            {</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> _post_op = utils::cast::polymorphic_downcast&lt;const PostOpEltwiseAdd&lt;FromTensorT&gt; *&gt;(post_op.get());</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;                transformed_post_ops.template push_back_op&lt;PostOpEltwiseAdd&lt;ToTensorT&gt;&gt;(transform_arg(_post_op-&gt;_addend), _post_op-&gt;_prev_dst_pos, _post_op-&gt;_policy);</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;            }</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;            <span class="keywordflow">case</span> PostOpType::Eltwise_PRelu:</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            {</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> _post_op = utils::cast::polymorphic_downcast&lt;const PostOpEltwisePRelu&lt;FromTensorT&gt; *&gt;(post_op.get());</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                transformed_post_ops.template push_back_op&lt;PostOpEltwisePRelu&lt;ToTensorT&gt;&gt;(transform_arg(_post_op-&gt;_alpha_param), _post_op-&gt;_prev_dst_pos, _post_op-&gt;_policy);</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            }</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            {</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported PostOpType&quot;</span>);</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            }</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        }</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    }</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keywordflow">return</span> transformed_post_ops;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425eaaa9a62e70841c4d06dd16306a85700d36">Activation</a>, <a class="el" href="_error_8h_source.xhtml#l00352">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425eaa6416e8534b0dc047508a56ab36d45130">Eltwise_Add</a>, <a class="el" href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425eaa56ce6a9123158f9f5836a8d8f854bb21">Eltwise_PRelu</a>, and <a class="el" href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00413">arm_compute::test::validation::post_ops</a>.</p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a76d9a53376c80cf706722db037ddb46a"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a76d9a53376c80cf706722db037ddb46a">arm_compute::EXPERIMENTAL_ACL_POST_OP_ARG_LAST</a></div><div class="ttdeci">@ EXPERIMENTAL_ACL_POST_OP_ARG_LAST</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00085">Types.h:85</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_a5f9016ea3e28a033b7cc216bdda912be"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a5f9016ea3e28a033b7cc216bdda912be">arm_compute::graph::Activation</a></div><div class="ttdeci">arm_compute::ActivationLayerInfo::ActivationFunction Activation</div><div class="ttdoc">Constant TensorID specifying an equivalent of null tensor.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00073">Types.h:73</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">arm_compute::TensorType</a></div><div class="ttdeci">TensorType</div><div class="ttdoc">Memory type.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00038">Types.h:38</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_xhtml_a3411c74a9d92ff2e88330fce49a425eaa6416e8534b0dc047508a56ab36d45130"><div class="ttname"><a href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425eaa6416e8534b0dc047508a56ab36d45130">arm_compute::experimental::PostOpType::Eltwise_Add</a></div><div class="ttdeci">@ Eltwise_Add</div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_xhtml_a90cbc7f3fa8bbc097dfd0429b31efb83af8199556cf6a62ca9268aa50c99b34a1"><div class="ttname"><a href="namespacearm__compute_1_1experimental.xhtml#a90cbc7f3fa8bbc097dfd0429b31efb83af8199556cf6a62ca9268aa50c99b34a1">arm_compute::experimental::MemoryLifetime::Prepare</a></div><div class="ttdeci">@ Prepare</div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_xhtml_a3411c74a9d92ff2e88330fce49a425eaa56ce6a9123158f9f5836a8d8f854bb21"><div class="ttname"><a href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425eaa56ce6a9123158f9f5836a8d8f854bb21">arm_compute::experimental::PostOpType::Eltwise_PRelu</a></div><div class="ttdeci">@ Eltwise_PRelu</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a5a0c600c3e778e9a9a0ed14661980f48"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a5a0c600c3e778e9a9a0ed14661980f48">arm_compute::EXPERIMENTAL_ACL_POST_OP_ARG_FIRST</a></div><div class="ttdeci">@ EXPERIMENTAL_ACL_POST_OP_ARG_FIRST</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00084">Types.h:84</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a0b0eb3235749a2909dc5a101afe59a1b"><div class="ttname"><a href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond, msg)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00456">Error.h:456</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a8cd3187b8cbe01fb39012663c3f93aa5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8cd3187b8cbe01fb39012663c3f93aa5">arm_compute::test::validation::post_ops</a></div><div class="ttdeci">experimental::PostOpList&lt; ITensorInfo * &gt; post_ops</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00413">ConvolutionLayer.cpp:413</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_xhtml_a90cbc7f3fa8bbc097dfd0429b31efb83a10d85d7664a911bcaec89732098c269a"><div class="ttname"><a href="namespacearm__compute_1_1experimental.xhtml#a90cbc7f3fa8bbc097dfd0429b31efb83a10d85d7664a911bcaec89732098c269a">arm_compute::experimental::MemoryLifetime::Temporary</a></div><div class="ttdeci">@ Temporary</div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_xhtml_a90cbc7f3fa8bbc097dfd0429b31efb83a5fe7b9358c9cb1b9eaa8d5aec000def4"><div class="ttname"><a href="namespacearm__compute_1_1experimental.xhtml#a90cbc7f3fa8bbc097dfd0429b31efb83a5fe7b9358c9cb1b9eaa8d5aec000def4">arm_compute::experimental::MemoryLifetime::Persistent</a></div><div class="ttdeci">@ Persistent</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad258d4c51629346fceac4679b3209ad9a5bc574a47246f122016869b32a6aa6f0"><div class="ttname"><a href="namespacearm__compute.xhtml#ad258d4c51629346fceac4679b3209ad9a5bc574a47246f122016869b32a6aa6f0">arm_compute::DeviceType::CL</a></div><div class="ttdeci">@ CL</div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_xhtml_a462bfa9dfea81692463ecb192183dd01a2b55387dd066c5bac646ac61543d152d"><div class="ttname"><a href="namespacearm__compute_1_1experimental.xhtml#a462bfa9dfea81692463ecb192183dd01a2b55387dd066c5bac646ac61543d152d">arm_compute::experimental::MemoryType::CPU</a></div><div class="ttdeci">@ CPU</div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_xhtml_a51c75906c46ed4b65a031a361e9786f7"><div class="ttname"><a href="namespacearm__compute_1_1experimental.xhtml#a51c75906c46ed4b65a031a361e9786f7">arm_compute::experimental::PostOpTypeSequence</a></div><div class="ttdeci">std::vector&lt; PostOpType &gt; PostOpTypeSequence</div><div class="ttdoc">An ordered sequence of type of Post Ops.</div><div class="ttdef"><b>Definition:</b> <a href="_i_post_op_8h_source.xhtml#l00043">IPostOp.h:43</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1experimental.xhtml">experimental</a></li>
    <li class="footer">Generated on Wed Jul 5 2023 11:29:29 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
