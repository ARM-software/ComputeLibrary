<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: CLLSTMLayer Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.05.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">CLLSTMLayer Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>This function performs a single time step in a Long Short-Term <a class="el" href="classarm__compute_1_1_memory.xhtml" title="CPU implementation of memory object.">Memory</a> (LSTM) layer.  
 <a href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_c_l_l_s_t_m_layer_8h_source.xhtml">CLLSTMLayer.h</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for CLLSTMLayer:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classarm__compute_1_1_c_l_l_s_t_m_layer__coll__graph.svg" width="120" height="112"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:af2e2a062e461a6369a4f2fd330b4e422"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml#af2e2a062e461a6369a4f2fd330b4e422">CLLSTMLayer</a> (std::shared_ptr&lt; <a class="el" href="classarm__compute_1_1_i_memory_manager.xhtml">IMemoryManager</a> &gt; memory_manager=nullptr)</td></tr>
<tr class="memdesc:af2e2a062e461a6369a4f2fd330b4e422"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml#af2e2a062e461a6369a4f2fd330b4e422">More...</a><br /></td></tr>
<tr class="separator:af2e2a062e461a6369a4f2fd330b4e422"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a346c0b3ebb9bb6ccd20a9238225347b2"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml#a346c0b3ebb9bb6ccd20a9238225347b2">CLLSTMLayer</a> (const <a class="el" href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml">CLLSTMLayer</a> &amp;)=delete</td></tr>
<tr class="memdesc:a346c0b3ebb9bb6ccd20a9238225347b2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prevent instances of this class from being copied.  <a href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml#a346c0b3ebb9bb6ccd20a9238225347b2">More...</a><br /></td></tr>
<tr class="separator:a346c0b3ebb9bb6ccd20a9238225347b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8c465c4c14722d917e79507401628e31"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml">CLLSTMLayer</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml#a8c465c4c14722d917e79507401628e31">operator=</a> (const <a class="el" href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml">CLLSTMLayer</a> &amp;)=delete</td></tr>
<tr class="memdesc:a8c465c4c14722d917e79507401628e31"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prevent instances of this class from being copied.  <a href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml#a8c465c4c14722d917e79507401628e31">More...</a><br /></td></tr>
<tr class="separator:a8c465c4c14722d917e79507401628e31"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adcf9237cdd43025c35afb857850682d6"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml#adcf9237cdd43025c35afb857850682d6">CLLSTMLayer</a> (<a class="el" href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml">CLLSTMLayer</a> &amp;&amp;)=delete</td></tr>
<tr class="memdesc:adcf9237cdd43025c35afb857850682d6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prevent instances of this class to be moved.  <a href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml#adcf9237cdd43025c35afb857850682d6">More...</a><br /></td></tr>
<tr class="separator:adcf9237cdd43025c35afb857850682d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a71c3e393fd5282681b1cb32b3c2f0157"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml">CLLSTMLayer</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml#a71c3e393fd5282681b1cb32b3c2f0157">operator=</a> (<a class="el" href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml">CLLSTMLayer</a> &amp;&amp;)=delete</td></tr>
<tr class="memdesc:a71c3e393fd5282681b1cb32b3c2f0157"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prevent instances of this class to be moved.  <a href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml#a71c3e393fd5282681b1cb32b3c2f0157">More...</a><br /></td></tr>
<tr class="separator:a71c3e393fd5282681b1cb32b3c2f0157"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a62cf6d5536a88ceb450008b6db944f89"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml#a62cf6d5536a88ceb450008b6db944f89">~CLLSTMLayer</a> ()</td></tr>
<tr class="memdesc:a62cf6d5536a88ceb450008b6db944f89"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default destructor.  <a href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml#a62cf6d5536a88ceb450008b6db944f89">More...</a><br /></td></tr>
<tr class="separator:a62cf6d5536a88ceb450008b6db944f89"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a314969db8c5774f49656979d1df66133"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml#a314969db8c5774f49656979d1df66133">configure</a> (const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *input, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *input_to_forget_weights, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *input_to_cell_weights, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *input_to_output_weights, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *recurrent_to_forget_weights, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *recurrent_to_cell_weights, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *recurrent_to_output_weights, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *forget_gate_bias, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *cell_bias, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *output_gate_bias, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *output_state_in, <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *cell_state_in, <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *scratch_buffer, <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *output_state_out, <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *cell_state_out, <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *output, const <a class="el" href="classarm__compute_1_1_l_s_t_m_params.xhtml">LSTMParams</a>&lt; <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> &gt; &amp;lstm_params, const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;activation_info, float cell_threshold=0.f, float projection_threshold=0.f)</td></tr>
<tr class="memdesc:a314969db8c5774f49656979d1df66133"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize function's tensors.  <a href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml#a314969db8c5774f49656979d1df66133">More...</a><br /></td></tr>
<tr class="separator:a314969db8c5774f49656979d1df66133"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a47fa6afbb84b4b7f60e95624ff74f228"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml#a47fa6afbb84b4b7f60e95624ff74f228">configure</a> (const <a class="el" href="classarm__compute_1_1_c_l_compile_context.xhtml">CLCompileContext</a> &amp;compile_context, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *input, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *input_to_forget_weights, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *input_to_cell_weights, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *input_to_output_weights, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *recurrent_to_forget_weights, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *recurrent_to_cell_weights, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *recurrent_to_output_weights, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *forget_gate_bias, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *cell_bias, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *output_gate_bias, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *output_state_in, <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *cell_state_in, <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *scratch_buffer, <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *output_state_out, <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *cell_state_out, <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *output, const <a class="el" href="classarm__compute_1_1_l_s_t_m_params.xhtml">LSTMParams</a>&lt; <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> &gt; &amp;lstm_params, const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;activation_info, float cell_threshold=0.f, float projection_threshold=0.f)</td></tr>
<tr class="memdesc:a47fa6afbb84b4b7f60e95624ff74f228"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize function's tensors.  <a href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml#a47fa6afbb84b4b7f60e95624ff74f228">More...</a><br /></td></tr>
<tr class="separator:a47fa6afbb84b4b7f60e95624ff74f228"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad1717410afd0be936c6213a63c8005fb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a> () override</td></tr>
<tr class="memdesc:ad1717410afd0be936c6213a63c8005fb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Run the kernels contained in the function.  <a href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">More...</a><br /></td></tr>
<tr class="separator:ad1717410afd0be936c6213a63c8005fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9b93ef660fc3c5b4b19d3fc7b891b77"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml#aa9b93ef660fc3c5b4b19d3fc7b891b77">prepare</a> () override</td></tr>
<tr class="memdesc:aa9b93ef660fc3c5b4b19d3fc7b891b77"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prepare the function for executing.  <a href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml#aa9b93ef660fc3c5b4b19d3fc7b891b77">More...</a><br /></td></tr>
<tr class="separator:aa9b93ef660fc3c5b4b19d3fc7b891b77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarm__compute_1_1_i_function"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarm__compute_1_1_i_function')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a></td></tr>
<tr class="memitem:ab921ecc3f3f6ae2b4bd61f3e1998d8c4 inherit pub_methods_classarm__compute_1_1_i_function"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_function.xhtml#ab921ecc3f3f6ae2b4bd61f3e1998d8c4">~IFunction</a> ()=default</td></tr>
<tr class="memdesc:ab921ecc3f3f6ae2b4bd61f3e1998d8c4 inherit pub_methods_classarm__compute_1_1_i_function"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="classarm__compute_1_1_i_function.xhtml#ab921ecc3f3f6ae2b4bd61f3e1998d8c4">More...</a><br /></td></tr>
<tr class="separator:ab921ecc3f3f6ae2b4bd61f3e1998d8c4 inherit pub_methods_classarm__compute_1_1_i_function"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:aa05bceba37ded272a464a90becd9cd99"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml#aa05bceba37ded272a464a90becd9cd99">validate</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input_to_forget_weights, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input_to_cell_weights, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input_to_output_weights, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *recurrent_to_forget_weights, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *recurrent_to_cell_weights, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *recurrent_to_output_weights, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *forget_gate_bias, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *cell_bias, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output_gate_bias, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output_state_in, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *cell_state_in, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *scratch_buffer, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output_state_out, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *cell_state_out, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output, const <a class="el" href="classarm__compute_1_1_l_s_t_m_params.xhtml">LSTMParams</a>&lt; <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &gt; &amp;lstm_params, const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;activation_info, float cell_threshold=0.f, float projection_threshold=0.f)</td></tr>
<tr class="memdesc:aa05bceba37ded272a464a90becd9cd99"><td class="mdescLeft">&#160;</td><td class="mdescRight">Static function to check if given info will lead to a valid configuration of <a class="el" href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml">CLLSTMLayer</a>.  <a href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml#aa05bceba37ded272a464a90becd9cd99">More...</a><br /></td></tr>
<tr class="separator:aa05bceba37ded272a464a90becd9cd99"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>This function performs a single time step in a Long Short-Term <a class="el" href="classarm__compute_1_1_memory.xhtml" title="CPU implementation of memory object.">Memory</a> (LSTM) layer. </p>

<p class="definition">Definition at line <a class="el" href="_c_l_l_s_t_m_layer_8h_source.xhtml#l00061">61</a> of file <a class="el" href="_c_l_l_s_t_m_layer_8h_source.xhtml">CLLSTMLayer.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="af2e2a062e461a6369a4f2fd330b4e422"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af2e2a062e461a6369a4f2fd330b4e422">&#9670;&nbsp;</a></span>CLLSTMLayer() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml">CLLSTMLayer</a> </td>
          <td>(</td>
          <td class="paramtype">std::shared_ptr&lt; <a class="el" href="classarm__compute_1_1_i_memory_manager.xhtml">IMemoryManager</a> &gt;&#160;</td>
          <td class="paramname"><em>memory_manager</em> = <code>nullptr</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Default constructor. </p>

<p class="definition">Definition at line <a class="el" href="_c_l_l_s_t_m_layer_8cpp_source.xhtml#l00042">42</a> of file <a class="el" href="_c_l_l_s_t_m_layer_8cpp_source.xhtml">CLLSTMLayer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    : _memory_group(std::move(memory_manager)), _fully_connected_input_gate(), _accum_input_gate1(), _subtract_input_gate(), _pixelwise_mul_input_gate(), _activation_input_gate(),</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;      _fully_connected_forget_gate(), _accum_forget_gate1(), _pixelwise_mul_forget_gate(), _activation_forget_gate(), _fully_connected_cell_state(), _gemm_cell_state1(),</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;      _transpose_cell_state(std::make_unique&lt;opencl::kernels::ClTransposeKernel&gt;()), _accum_cell_state1(), _accum_cell_state2(), _pixelwise_mul_cell_state1(), _activation_cell_state(), _cell_clip(),</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;      _pixelwise_mul_cell_state2(), _fully_connected_output(), _pixelwise_mul_output_state1(), _accum_output1(), _activation_output(), _activation_output_state(), _pixelwise_mul_output_state2(),</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;      _fully_connected_output_state(), _projection_clip(), _copy_cell_state(), _copy_output(), _concat_scratch_buffer(), _concat_inputs_forget_gate(), _concat_weights_forget_gate(),</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;      _concat_weights_input_gate(), _concat_weights_output(), _ones_fill(), _mean_std_norm_input_gate(), _pixelwise_mul_input_gate_coeff(), _accum_input_gate_bias(), _mean_std_norm_forget_gate(),</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;      _pixelwise_mul_forget_gate_coeff(), _accum_forget_gate_bias(), _mean_std_norm_cell_gate(), _pixelwise_mul_cell_gate_coeff(), _accum_cell_gate_bias(), _mean_std_norm_output_gate(),</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;      _pixelwise_mul_output_gate_coeff(), _accum_output_gate_bias(), _input_gate_out1(), _input_gate_out2(), _input_gate_out3(), _input_gate_out4(), _forget_gate_out1(), _forget_gate_out2(),</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;      _forget_gate_out3(), _forget_gate_out4(), _forget_gate_out5(), _forget_gate_out6(), _cell_state_out1(), _cell_state_out2(), _cell_state_out3(), _cell_state_out4(), _cell_state_out5(), _output1(),</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;      _output2(), _output3(), _output4(), _cell_state_activation(), _output_state1(), _ones(), _input_layer_norm_out1(), _input_layer_norm_out2(), _forget_layer_norm_out1(), _forget_layer_norm_out2(),</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;      _cell_layer_norm_out1(), _cell_layer_norm_out2(), _output_layer_norm_out1(), _output_layer_norm_out2(), _run_peephole_opt(<span class="keyword">false</span>), _run_cifg_opt(<span class="keyword">false</span>), _perform_cell_clipping(<span class="keyword">false</span>),</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;      _has_projection_weights(<span class="keyword">false</span>), _perform_projection_clipping(<span class="keyword">false</span>), _is_prepared(<span class="keyword">false</span>), _is_layer_norm_lstm(<span class="keyword">false</span>)</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;{</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a346c0b3ebb9bb6ccd20a9238225347b2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a346c0b3ebb9bb6ccd20a9238225347b2">&#9670;&nbsp;</a></span>CLLSTMLayer() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml">CLLSTMLayer</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml">CLLSTMLayer</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prevent instances of this class from being copied. </p>

</div>
</div>
<a id="adcf9237cdd43025c35afb857850682d6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adcf9237cdd43025c35afb857850682d6">&#9670;&nbsp;</a></span>CLLSTMLayer() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml">CLLSTMLayer</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml">CLLSTMLayer</a> &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prevent instances of this class to be moved. </p>

</div>
</div>
<a id="a62cf6d5536a88ceb450008b6db944f89"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a62cf6d5536a88ceb450008b6db944f89">&#9670;&nbsp;</a></span>~CLLSTMLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml">CLLSTMLayer</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default destructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a47fa6afbb84b4b7f60e95624ff74f228"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a47fa6afbb84b4b7f60e95624ff74f228">&#9670;&nbsp;</a></span>configure() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void configure </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_c_l_compile_context.xhtml">CLCompileContext</a> &amp;&#160;</td>
          <td class="paramname"><em>compile_context</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>input_to_forget_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>input_to_cell_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>input_to_output_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>recurrent_to_forget_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>recurrent_to_cell_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>recurrent_to_output_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>forget_gate_bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>cell_bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>output_gate_bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>output_state_in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>cell_state_in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>scratch_buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>output_state_out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>cell_state_out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_l_s_t_m_params.xhtml">LSTMParams</a>&lt; <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>lstm_params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>activation_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>cell_threshold</em> = <code>0.f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>projection_threshold</em> = <code>0.f</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initialize function's tensors. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">compile_context</td><td>The compile context to be used. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Source tensor. Input is a 2D tensor with dimensions [input_size, batch_size]. Data types supported: F16/F32. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_to_forget_weights</td><td>2D weights tensor with dimensions [input_size, num_units]. Data type supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_to_cell_weights</td><td>2D weights tensor with dimensions [input_size, num_units]. Data type supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_to_output_weights</td><td>2D weights tensor with dimensions [input_size, num_units]. Data type supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">recurrent_to_forget_weights</td><td>2D weights tensor with dimensions [output_size, num_units]. Data type supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">recurrent_to_cell_weights</td><td>2D weights tensor with dimensions [output_size, num_units]. Data type supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">recurrent_to_output_weights</td><td>2D weights tensor with dimensions [output_size, num_units]. Data type supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">forget_gate_bias</td><td>1D weights tensor with dimensions [num_units]. Data type supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cell_bias</td><td>1D weights tensor with dimensions [num_units]. Data type supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output_gate_bias</td><td>1D weights tensor with dimensions [num_units]. Data type supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output_state_in</td><td>2D weights tensor with dimensions [output_size, batch_size]. Data type supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cell_state_in</td><td>2D tensor with dimensions [num_units, batch_size]. Data type supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">scratch_buffer</td><td>2D tensor with dimensions [num_units * 4, batch_size] with CIFG or [num_units * 3, batch_size] without CIGF. Data type supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output_state_out</td><td>2D weights tensor with dimensions [output_size, batch_size]. Data type supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">cell_state_out</td><td>2D tensor with dimensions [num_units, batch_size]. Data type supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output</td><td>Destination tensor. Output is a 2D tensor with dimensions [output_size, batch_size]. Data types supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">lstm_params</td><td>Weights tensors used in peephole optimization: input_to_input_weights 2D weights tensor with dimensions [input_size, num_units]. Data type supported: Same as <code>input</code>. recurrent_to_input_weights 2D weights tensor with dimensions [output_size, num_units]. Data type supported: Same as <code>input</code>. cell_to_input_weights 1D weights tensor with dimensions [num_units]. Can be nullptr. Data type supported: Same as <code>input</code>. cell_to_forget_weights 1D weights tensor with dimensions [num_units]. Data type supported: Same as <code>input</code>. cell_to_output_weights 1D weights tensor with dimensions [num_units]. Data type supported: Same as <code>input</code>. input_gate_bias 1D weights tensor with dimensions [num_units]. Data type supported: Same as <code>input</code> projection_weights 2D weights tensor with dimensions [output_size, num_units]. Data type supported: Same as <code>input</code>. projection_bias 1D weights tensor with dimensions [output_size]. Data type supported: Same as <code>input</code>. input_layer_norm_weights 1D weights tensor with dimensions [num_units]. Data type supported: Same as <code>input</code>. forget_layer_norm_weights 1D weights tensor with dimensions [num_units]. Data type supported: Same as <code>input</code>. cell_layer_norm_weights 1D weights tensor with dimensions [num_units]. Data type supported: Same as <code>input</code>. output_layer_norm_weights 1D weights tensor with dimensions [num_units]. Data type supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">activation_info</td><td>Contains activation information described in <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cell_threshold</td><td>(Optional) The clipping threshold for the cell state, such that values are bound within [-cell_clip, cell_clip]. If set to 0.0f then clipping is disabled. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">projection_threshold</td><td>(Optional) The clipping threshold for the output from the projection layer, such that values are bound within [-proj_clip, proj_clip]. If set to 0.0f then clipping is disabled. </td></tr>
  </table>
  </dd>
</dl>
<p>lstm_res = PixelwiseMul(output, Activation(cell_state)) </p><pre class="fragment">                -- Clip(lstm_res * projection_weights + projection_bias, projection_threshold) , if there is a projection
               /
</pre><p> output_state = &ndash; \ &ndash; lstm_res , otherwise</p>

<p class="definition">Definition at line <a class="el" href="_c_l_l_s_t_m_layer_8cpp_source.xhtml#l00073">73</a> of file <a class="el" href="_c_l_l_s_t_m_layer_8cpp_source.xhtml">CLLSTMLayer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;{</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>,</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                                 <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3b793c410cba57a1395184692a018356">input_to_forget_weights</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac547a66fe26967afb94760061ee0d0d1">input_to_cell_weights</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ace4dd633420fa8d8aa71f60ff730f01f">input_to_output_weights</a>,</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                                 <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac62dfdcc14798598d953342789c9927e">recurrent_to_forget_weights</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac2236dfe2a3fc5fa4e125348829cbeb2">recurrent_to_cell_weights</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aab02df8a9ee45153f2fd76e934407fbd">recurrent_to_output_weights</a>,</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                                 <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a55daaf57fb833fc416d779c28f7a3c85">forget_gate_bias</a>, cell_bias, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a507bd7e4d98cb3e45d3e820d8bac422a">output_gate_bias</a>,</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                                 output_state_in, cell_state_in,</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                                 scratch_buffer, output_state_out, cell_state_out, output);</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160; </div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <a class="code" href="src_2common_2utils_2_log_8h.xhtml#a3ae35e22a098d589ff54ed85647ed87e">ARM_COMPUTE_LOG_PARAMS</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3b793c410cba57a1395184692a018356">input_to_forget_weights</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac547a66fe26967afb94760061ee0d0d1">input_to_cell_weights</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ace4dd633420fa8d8aa71f60ff730f01f">input_to_output_weights</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac62dfdcc14798598d953342789c9927e">recurrent_to_forget_weights</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac2236dfe2a3fc5fa4e125348829cbeb2">recurrent_to_cell_weights</a>,</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                           <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aab02df8a9ee45153f2fd76e934407fbd">recurrent_to_output_weights</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a55daaf57fb833fc416d779c28f7a3c85">forget_gate_bias</a>, cell_bias, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a507bd7e4d98cb3e45d3e820d8bac422a">output_gate_bias</a>, output_state_in, cell_state_in, scratch_buffer, output_state_out, cell_state_out,</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                           output, lstm_params, activation_info, cell_threshold, projection_threshold);</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160; </div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    _is_layer_norm_lstm = lstm_params.use_layer_norm();</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160; </div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="comment">// Set lstm parameters</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    LSTMParams&lt;ITensorInfo&gt; lstm_params_info{};</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <a class="code" href="namespacearm__compute_1_1utils_1_1info__helpers.xhtml#ace12965ef6278f7717bcd30fb5f18e9e">build_lstm_params_tensor_info</a>(lstm_params, &amp;lstm_params_info);</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160; </div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="comment">// Validate</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <a class="code" href="_error_8h.xhtml#a938dcd406ce611ef5345ad2531cdb948">ARM_COMPUTE_ERROR_THROW_ON</a>(<a class="code" href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml#aa05bceba37ded272a464a90becd9cd99">CLLSTMLayer::validate</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3b793c410cba57a1395184692a018356">input_to_forget_weights</a>-&gt;info(),</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                                                     <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac547a66fe26967afb94760061ee0d0d1">input_to_cell_weights</a>-&gt;info(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ace4dd633420fa8d8aa71f60ff730f01f">input_to_output_weights</a>-&gt;info(),</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                                                     <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac62dfdcc14798598d953342789c9927e">recurrent_to_forget_weights</a>-&gt;info(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac2236dfe2a3fc5fa4e125348829cbeb2">recurrent_to_cell_weights</a>-&gt;info(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aab02df8a9ee45153f2fd76e934407fbd">recurrent_to_output_weights</a>-&gt;info(),</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                                                     <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a55daaf57fb833fc416d779c28f7a3c85">forget_gate_bias</a>-&gt;info(), cell_bias-&gt;info(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a507bd7e4d98cb3e45d3e820d8bac422a">output_gate_bias</a>-&gt;info(),</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                                                     output_state_in-&gt;info(), cell_state_in-&gt;info(),</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                                                     scratch_buffer-&gt;info(), output_state_out-&gt;info(), cell_state_out-&gt;info(), output-&gt;info(),</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                                                     lstm_params_info, activation_info, cell_threshold, projection_threshold));</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160; </div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keyword">const</span> TensorShape cell_state_shape = cell_state_in-&gt;info()-&gt;tensor_shape();</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="comment">// Configure block that calculates the forget gate</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="comment">// forget_gate = Activation(input * input_to_forget_weights + output_state_in * recurrent_to_forget_weights + PixelWiseMul(cell_state, cell_to_forget_weights) + forget_gate_bias)</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="comment">// We optimize this as follows:</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="comment">// forget_gate = Activation( (input,output_state_in) * (input_to_forget_weights,recurrent_to_forget_weights) + PixelWiseMul(cell_state, cell_to_forget_weights) + forget_gate_bias</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    _forget_gate_out1.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">init</a>(TensorInfo(cell_state_shape, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()));</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    _forget_gate_out3.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">init</a>(TensorInfo(cell_state_shape, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()));</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    _forget_gate_out5.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">init</a>(TensorInfo(cell_state_shape, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()));</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160; </div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    std::vector&lt;const ICLTensor *&gt; inputs_vector;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    inputs_vector.emplace_back(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>);</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    inputs_vector.emplace_back(output_state_in);</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keyword">const</span> TensorShape concat_shape = <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a6100aeb494088632647c3e0d639c99ab">arm_compute::misc::shape_calculator::calculate_concatenate_shape</a>(inputs_vector, 0);</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    _forget_gate_out2.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">init</a>(TensorInfo(concat_shape, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()));</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160; </div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_forget_gate_out2);</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    _concat_inputs_forget_gate.<a class="code" href="classarm__compute_1_1_c_l_concatenate_layer.xhtml#afbce8280ab870092192a51c90d5abcbd">configure</a>(compile_context, inputs_vector, &amp;_forget_gate_out2, <a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>);</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160; </div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    std::vector&lt;const ICLTensor *&gt; weights_vector;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160; </div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    weights_vector.emplace_back(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3b793c410cba57a1395184692a018356">input_to_forget_weights</a>);</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    weights_vector.emplace_back(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac62dfdcc14798598d953342789c9927e">recurrent_to_forget_weights</a>);</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keyword">const</span> TensorShape weights_concat_shape = <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a6100aeb494088632647c3e0d639c99ab">arm_compute::misc::shape_calculator::calculate_concatenate_shape</a>(weights_vector, 0);</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    _forget_gate_out6.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">init</a>(TensorInfo(weights_concat_shape, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()));</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160; </div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    _concat_weights_forget_gate.<a class="code" href="classarm__compute_1_1_c_l_concatenate_layer.xhtml#afbce8280ab870092192a51c90d5abcbd">configure</a>(compile_context, weights_vector, &amp;_forget_gate_out6, <a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>);</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160; </div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_forget_gate_out5);</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    _fully_connected_forget_gate.<a class="code" href="classarm__compute_1_1_c_l_fully_connected_layer.xhtml#affcc7f7d8a5dafb5d25931fd66536b04">configure</a>(compile_context, &amp;_forget_gate_out2, &amp;_forget_gate_out6, (_is_layer_norm_lstm) ? <span class="keyword">nullptr</span> : <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a55daaf57fb833fc416d779c28f7a3c85">forget_gate_bias</a>, &amp;_forget_gate_out5);</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_forget_gate_out1);</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_forget_gate_out3);</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    _forget_gate_out6.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160; </div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    CLTensor *forget_gate_out = &amp;_forget_gate_out5;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keywordflow">if</span>(lstm_params.has_peephole_opt())</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    {</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        _forget_gate_out4.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">init</a>(TensorInfo(cell_state_shape, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()));</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160; </div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        _run_peephole_opt = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_forget_gate_out4);</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        _pixelwise_mul_forget_gate.<a class="code" href="classarm__compute_1_1_c_l_pixel_wise_multiplication.xhtml#acfd5a4c9ff5fca09c047124ccc910c3b">configure</a>(compile_context, cell_state_in, lstm_params.cell_to_forget_weights(), &amp;_forget_gate_out4, 1, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>, <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">RoundingPolicy::TO_NEAREST_EVEN</a>);</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        _accum_forget_gate1.<a class="code" href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml#ab511d21db900edbc211d24bc77901b73">configure</a>(compile_context, &amp;_forget_gate_out5, &amp;_forget_gate_out4, &amp;_forget_gate_out3, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>);</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        _forget_gate_out4.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        _forget_gate_out5.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        forget_gate_out = &amp;_forget_gate_out3;</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    }</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    {</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        _forget_gate_out3.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    }</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keywordflow">if</span>(_is_layer_norm_lstm)</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    {</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        _forget_layer_norm_out1.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">init</a>(TensorInfo(cell_state_shape, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()));</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        _forget_layer_norm_out2.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">init</a>(TensorInfo(cell_state_shape, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()));</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_forget_layer_norm_out1);</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_forget_layer_norm_out2);</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        _mean_std_norm_forget_gate.<a class="code" href="classarm__compute_1_1_c_l_mean_std_dev_normalization_layer.xhtml#a1029bf3c12d8600f803700fc76c11590">configure</a>(compile_context, forget_gate_out);</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        _pixelwise_mul_forget_gate_coeff.<a class="code" href="classarm__compute_1_1_c_l_pixel_wise_multiplication.xhtml#acfd5a4c9ff5fca09c047124ccc910c3b">configure</a>(compile_context, forget_gate_out, lstm_params.forget_layer_norm_weights(), &amp;_forget_layer_norm_out1, 1, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>,</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                                                   <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">RoundingPolicy::TO_NEAREST_EVEN</a>);</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="comment">// forget_gate_out is going to be reassigned, so allocate the tensor that it was assigned to before</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        forget_gate_out-&gt;allocator()-&gt;allocate();</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        _accum_forget_gate_bias.<a class="code" href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml#ab511d21db900edbc211d24bc77901b73">configure</a>(compile_context, &amp;_forget_layer_norm_out1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a55daaf57fb833fc416d779c28f7a3c85">forget_gate_bias</a>, &amp;_forget_layer_norm_out2, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>);</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        _forget_layer_norm_out1.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        forget_gate_out = &amp;_forget_layer_norm_out2;</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    }</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    _activation_forget_gate.<a class="code" href="classarm__compute_1_1_c_l_activation_layer.xhtml#a239fea32ba46d038ba350dba58026c45">configure</a>(compile_context, forget_gate_out, <span class="keyword">nullptr</span>, ActivationLayerInfo(<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa72ee60fba0509af07cbbd91398d8db9d">ActivationLayerInfo::ActivationFunction::LOGISTIC</a>));</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160; </div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="comment">// Configure block that calculates the input gate</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="comment">// input_gate = Activation(input * input_to_input_weights + output_state * recurrent_to_input_weights + PixelWiseMul(cell_state, cell_to_input_weights) + input_gate_bias), without CIFG</span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="comment">// input_gate = 1 - forget_gate, with CIFG</span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="comment">// We optimize this as follows:</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="comment">// input_gate = Activation((input,output_state) * (input_to_input_weights,recurrent_to_input_weights) + PixelWiseMul(cell_state, cell_to_input_weights) + input_gate_bias), without CIFG</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    _input_gate_out1.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">init</a>(TensorInfo(cell_state_shape, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()));</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    CLTensor *input_gate_out = &amp;_input_gate_out1;</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="keywordflow">if</span>(lstm_params.has_cifg_opt())</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    {</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_input_gate_out1);</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        _ones.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">init</a>(TensorInfo(cell_state_shape, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()));</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        _ones_fill.<a class="code" href="classarm__compute_1_1_c_l_fill.xhtml#a8842f3a8e50c91b74a0b0549ac8fa489">configure</a>(compile_context, &amp;_ones, PixelValue(1, _ones.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a>()));</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        _subtract_input_gate.<a class="code" href="classarm__compute_1_1_c_l_arithmetic_subtraction.xhtml#a9b0d5b7cd931994262eddb786def724c">configure</a>(compile_context, &amp;_ones, forget_gate_out, &amp;_input_gate_out1, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>);</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        _ones.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        _run_cifg_opt = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    }</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    {</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        _input_gate_out3.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">init</a>(TensorInfo(cell_state_shape, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()));</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        _input_gate_out4.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">init</a>(TensorInfo(cell_state_shape, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()));</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160; </div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        std::vector&lt;const ICLTensor *&gt; lstm_weights;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        lstm_weights.emplace_back(lstm_params.input_to_input_weights());</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        lstm_weights.emplace_back(lstm_params.recurrent_to_input_weights());</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        TensorShape lstm_weights_concat_shape = <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a6100aeb494088632647c3e0d639c99ab">arm_compute::misc::shape_calculator::calculate_concatenate_shape</a>(lstm_weights, 0);</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        _input_gate_out2.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">init</a>(TensorInfo(lstm_weights_concat_shape, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()));</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160; </div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        _concat_weights_input_gate.<a class="code" href="classarm__compute_1_1_c_l_concatenate_layer.xhtml#afbce8280ab870092192a51c90d5abcbd">configure</a>(compile_context, lstm_weights, &amp;_input_gate_out2, <a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>);</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160; </div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_input_gate_out1);</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160; </div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_input_gate_out3);</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        _fully_connected_input_gate.<a class="code" href="classarm__compute_1_1_c_l_fully_connected_layer.xhtml#affcc7f7d8a5dafb5d25931fd66536b04">configure</a>(compile_context, &amp;_forget_gate_out2, &amp;_input_gate_out2, (_is_layer_norm_lstm) ? <span class="keyword">nullptr</span> : lstm_params.input_gate_bias(), &amp;_input_gate_out3);</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        _input_gate_out2.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160; </div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        input_gate_out = &amp;_input_gate_out3;</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        <span class="keywordflow">if</span>(_run_peephole_opt)</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        {</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_input_gate_out4);</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;            _pixelwise_mul_input_gate.<a class="code" href="classarm__compute_1_1_c_l_pixel_wise_multiplication.xhtml#acfd5a4c9ff5fca09c047124ccc910c3b">configure</a>(compile_context, cell_state_in, lstm_params.cell_to_input_weights(), &amp;_input_gate_out4, 1, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>, <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">RoundingPolicy::TO_NEAREST_EVEN</a>);</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            _accum_input_gate1.<a class="code" href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml#ab511d21db900edbc211d24bc77901b73">configure</a>(compile_context, &amp;_input_gate_out3, &amp;_input_gate_out4, &amp;_input_gate_out1, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>);</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;            _input_gate_out3.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;            _input_gate_out4.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            input_gate_out = &amp;_input_gate_out1;</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        }</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        {</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;            _input_gate_out1.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        }</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160; </div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        <span class="keywordflow">if</span>(_is_layer_norm_lstm)</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        {</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            _input_layer_norm_out1.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">init</a>(TensorInfo(cell_state_shape, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()));</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;            _input_layer_norm_out2.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">init</a>(TensorInfo(cell_state_shape, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()));</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;            _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_input_layer_norm_out1);</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;            _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_input_layer_norm_out2);</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;            _mean_std_norm_input_gate.<a class="code" href="classarm__compute_1_1_c_l_mean_std_dev_normalization_layer.xhtml#a1029bf3c12d8600f803700fc76c11590">configure</a>(compile_context, input_gate_out);</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;            _pixelwise_mul_input_gate_coeff.<a class="code" href="classarm__compute_1_1_c_l_pixel_wise_multiplication.xhtml#acfd5a4c9ff5fca09c047124ccc910c3b">configure</a>(compile_context, input_gate_out, lstm_params.input_layer_norm_weights(), &amp;_input_layer_norm_out1, 1, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>,</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                                                      <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">RoundingPolicy::TO_NEAREST_EVEN</a>);</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;            <span class="comment">// input_gate_out is going to be reassigned, so allocate the tensor that it was assigned to before</span></div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;            input_gate_out-&gt;allocator()-&gt;allocate();</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;            _accum_input_gate_bias.<a class="code" href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml#ab511d21db900edbc211d24bc77901b73">configure</a>(compile_context, &amp;_input_layer_norm_out1, lstm_params.input_gate_bias(), &amp;_input_layer_norm_out2, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>);</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;            _input_layer_norm_out1.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;            input_gate_out = &amp;_input_layer_norm_out2;</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        }</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        _activation_input_gate.<a class="code" href="classarm__compute_1_1_c_l_activation_layer.xhtml#a239fea32ba46d038ba350dba58026c45">configure</a>(compile_context, input_gate_out, <span class="keyword">nullptr</span>, ActivationLayerInfo(<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa72ee60fba0509af07cbbd91398d8db9d">ActivationLayerInfo::ActivationFunction::LOGISTIC</a>));</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    }</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160; </div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="comment">// Configure block that calculates the cell state</span></div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="comment">// cell_state = Clip((PixelwiseMul(input_gate, Activation(input * input_to_cell_weights + output_state_in * recurrent_to_cell_weights + cell_bias)) + PixelwiseMul(forget_gate, cell_state)), cell_threshold)</span></div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    TensorShape cell_state1_shape = <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a69cb11b5b37f94a6bea9eaad9d13cccf">compute_transposed_shape</a>(*<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aab02df8a9ee45153f2fd76e934407fbd">recurrent_to_output_weights</a>-&gt;info());</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    _cell_state_out1.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">init</a>(TensorInfo(cell_state_shape, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()));</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    _cell_state_out2.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">init</a>(TensorInfo(cell_state1_shape, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()));</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    _cell_state_out3.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">init</a>(TensorInfo(cell_state_shape, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()));</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    _cell_state_out4.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">init</a>(TensorInfo(cell_state_shape, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()));</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    _cell_state_out5.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">init</a>(TensorInfo(cell_state_shape, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()));</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160; </div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_cell_state_out1);</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    _fully_connected_cell_state.<a class="code" href="classarm__compute_1_1_c_l_fully_connected_layer.xhtml#affcc7f7d8a5dafb5d25931fd66536b04">configure</a>(compile_context, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac547a66fe26967afb94760061ee0d0d1">input_to_cell_weights</a>, (_is_layer_norm_lstm) ? <span class="keyword">nullptr</span> : cell_bias, &amp;_cell_state_out1);</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_cell_state_out2);</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    _transpose_cell_state-&gt;configure(compile_context, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac2236dfe2a3fc5fa4e125348829cbeb2">recurrent_to_cell_weights</a>-&gt;info(), _cell_state_out2.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>());</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    _recurrent_to_cell_weights = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac2236dfe2a3fc5fa4e125348829cbeb2">recurrent_to_cell_weights</a>;</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_cell_state_out3);</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    _gemm_cell_state1.<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#aa3ff5978316fd9378bf312e148797ee5">configure</a>(compile_context, output_state_in, &amp;_cell_state_out2, <span class="keyword">nullptr</span>, &amp;_cell_state_out3, 1.f, 0.f);</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    _cell_state_out2.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_cell_state_out4);</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    _accum_cell_state1.<a class="code" href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml#ab511d21db900edbc211d24bc77901b73">configure</a>(compile_context, &amp;_cell_state_out1, &amp;_cell_state_out3, &amp;_cell_state_out4, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>);</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    CLTensor *cell_state_out_ptr = &amp;_cell_state_out4;</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="keywordflow">if</span>(_is_layer_norm_lstm)</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    {</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        _cell_layer_norm_out1.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">init</a>(TensorInfo(cell_state_shape, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()));</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        _cell_layer_norm_out2.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">init</a>(TensorInfo(cell_state_shape, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()));</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_cell_layer_norm_out1);</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_cell_layer_norm_out2);</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        _mean_std_norm_cell_gate.<a class="code" href="classarm__compute_1_1_c_l_mean_std_dev_normalization_layer.xhtml#a1029bf3c12d8600f803700fc76c11590">configure</a>(compile_context, cell_state_out_ptr);</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        _pixelwise_mul_cell_gate_coeff.<a class="code" href="classarm__compute_1_1_c_l_pixel_wise_multiplication.xhtml#acfd5a4c9ff5fca09c047124ccc910c3b">configure</a>(compile_context, cell_state_out_ptr, lstm_params.cell_layer_norm_weights(), &amp;_cell_layer_norm_out1, 1, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>,</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                                                 <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">RoundingPolicy::TO_NEAREST_EVEN</a>);</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        <span class="comment">// cell_state_out_ptr is going to be reassigned, so allocate the tensor that it was assigned to before</span></div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        cell_state_out_ptr-&gt;allocator()-&gt;allocate();</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        _accum_cell_gate_bias.<a class="code" href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml#ab511d21db900edbc211d24bc77901b73">configure</a>(compile_context, &amp;_cell_layer_norm_out1, cell_bias, &amp;_cell_layer_norm_out2, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>);</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        _cell_layer_norm_out1.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        cell_state_out_ptr = &amp;_cell_layer_norm_out2;</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    }</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    _activation_cell_state.<a class="code" href="classarm__compute_1_1_c_l_activation_layer.xhtml#a239fea32ba46d038ba350dba58026c45">configure</a>(compile_context, cell_state_out_ptr, <span class="keyword">nullptr</span>, activation_info);</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_cell_state_out5);</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    _pixelwise_mul_cell_state1.<a class="code" href="classarm__compute_1_1_c_l_pixel_wise_multiplication.xhtml#acfd5a4c9ff5fca09c047124ccc910c3b">configure</a>(compile_context, cell_state_out_ptr, input_gate_out, &amp;_cell_state_out5, 1, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>, <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">RoundingPolicy::TO_NEAREST_EVEN</a>);</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    cell_state_out_ptr-&gt;allocator()-&gt;allocate();</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    _pixelwise_mul_cell_state2.<a class="code" href="classarm__compute_1_1_c_l_pixel_wise_multiplication.xhtml#acfd5a4c9ff5fca09c047124ccc910c3b">configure</a>(compile_context, forget_gate_out, cell_state_in, &amp;_cell_state_out3, 1, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>, <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">RoundingPolicy::TO_NEAREST_EVEN</a>);</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    _accum_cell_state2.<a class="code" href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml#ab511d21db900edbc211d24bc77901b73">configure</a>(compile_context, &amp;_cell_state_out5, &amp;_cell_state_out3, &amp;_cell_state_out1, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>);</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    _cell_state_out3.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    _cell_state_out5.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <span class="comment">// Perform clipping</span></div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <span class="keywordflow">if</span>(cell_threshold != 0.f)</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    {</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        _perform_cell_clipping = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;        _cell_clip.<a class="code" href="classarm__compute_1_1_c_l_activation_layer.xhtml#a239fea32ba46d038ba350dba58026c45">configure</a>(compile_context, &amp;_cell_state_out1, <span class="keyword">nullptr</span>, ActivationLayerInfo(<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaaab1d4411a9e7f5e82002512cddfdc33a">ActivationLayerInfo::ActivationFunction::LU_BOUNDED_RELU</a>, cell_threshold, -cell_threshold));</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    }</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160; </div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <span class="comment">// Configure block that calculates the output</span></div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <span class="comment">// output_state_out = Activation(input * input_to_output_weights + output_state_in * recurrent_to_output_weights + PixelWiseMul(cell_state, cell_to_output_weights) + output_gate_bias)</span></div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <span class="comment">// We optimize this as follows:</span></div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <span class="comment">// output_state_out = Activation( (input,output_state_in) * (input_to_output_weights, recurrent_to_output_weights) + PixelWiseMul(cell_state, cell_to_output_weights) + output_gate_bias)</span></div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    _output1.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">init</a>(TensorInfo(cell_state_shape, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()));</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    _output4.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">init</a>(TensorInfo(cell_state_shape, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()));</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    std::vector&lt;const ICLTensor *&gt; in_out_weights;</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    in_out_weights.emplace_back(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ace4dd633420fa8d8aa71f60ff730f01f">input_to_output_weights</a>);</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    in_out_weights.emplace_back(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aab02df8a9ee45153f2fd76e934407fbd">recurrent_to_output_weights</a>);</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    TensorShape in_out_weights_concat_shape = <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a6100aeb494088632647c3e0d639c99ab">arm_compute::misc::shape_calculator::calculate_concatenate_shape</a>(in_out_weights, 0);</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    _output2.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">init</a>(TensorInfo(in_out_weights_concat_shape, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()));</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160; </div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    _concat_weights_output.<a class="code" href="classarm__compute_1_1_c_l_concatenate_layer.xhtml#afbce8280ab870092192a51c90d5abcbd">configure</a>(compile_context, in_out_weights, &amp;_output2, <a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>);</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160; </div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_output1);</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_output4);</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160; </div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    _fully_connected_output.<a class="code" href="classarm__compute_1_1_c_l_fully_connected_layer.xhtml#affcc7f7d8a5dafb5d25931fd66536b04">configure</a>(compile_context, &amp;_forget_gate_out2, &amp;_output2, (_is_layer_norm_lstm) ? <span class="keyword">nullptr</span> : <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a507bd7e4d98cb3e45d3e820d8bac422a">output_gate_bias</a>, &amp;_output4);</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160; </div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    _output2.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    _forget_gate_out2.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160; </div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    CLTensor *output_gate_out = &amp;_output4;</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    <span class="keywordflow">if</span>(lstm_params.has_peephole_opt())</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    {</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        _output3.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">init</a>(TensorInfo(_cell_state_out1.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>(), 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()));</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160; </div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;        _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_output3);</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        _pixelwise_mul_output_state1.<a class="code" href="classarm__compute_1_1_c_l_pixel_wise_multiplication.xhtml#acfd5a4c9ff5fca09c047124ccc910c3b">configure</a>(compile_context, &amp;_cell_state_out1, lstm_params.cell_to_output_weights(), &amp;_output3, 1, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>, <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">RoundingPolicy::TO_NEAREST_EVEN</a>);</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        _accum_output1.<a class="code" href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml#ab511d21db900edbc211d24bc77901b73">configure</a>(compile_context, &amp;_output4, &amp;_output3, &amp;_output1, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>);</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        _output4.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        output_gate_out = &amp;_output1;</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160; </div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        <span class="comment">// Allocate intermediate buffers</span></div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        _output3.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    }</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    {</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        _output1.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    }</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    <span class="keywordflow">if</span>(_is_layer_norm_lstm)</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    {</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;        _output_layer_norm_out1.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">init</a>(TensorInfo(cell_state_shape, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()));</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;        _output_layer_norm_out2.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">init</a>(TensorInfo(cell_state_shape, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()));</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;        _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_output_layer_norm_out1);</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_output_layer_norm_out2);</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        _mean_std_norm_output_gate.<a class="code" href="classarm__compute_1_1_c_l_mean_std_dev_normalization_layer.xhtml#a1029bf3c12d8600f803700fc76c11590">configure</a>(compile_context, output_gate_out);</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        _pixelwise_mul_output_gate_coeff.<a class="code" href="classarm__compute_1_1_c_l_pixel_wise_multiplication.xhtml#acfd5a4c9ff5fca09c047124ccc910c3b">configure</a>(compile_context, output_gate_out, lstm_params.output_layer_norm_weights(), &amp;_output_layer_norm_out1, 1, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>,</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                                                   <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">RoundingPolicy::TO_NEAREST_EVEN</a>);</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        <span class="comment">// output_gate_out is going to be reassigned, so allocate the tensor that it was assigned to before</span></div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;        output_gate_out-&gt;allocator()-&gt;allocate();</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;        _accum_output_gate_bias.<a class="code" href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml#ab511d21db900edbc211d24bc77901b73">configure</a>(compile_context, &amp;_output_layer_norm_out1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a507bd7e4d98cb3e45d3e820d8bac422a">output_gate_bias</a>, &amp;_output_layer_norm_out2, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>);</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        _output_layer_norm_out1.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        output_gate_out = &amp;_output_layer_norm_out2;</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    }</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    _activation_output.<a class="code" href="classarm__compute_1_1_c_l_activation_layer.xhtml#a239fea32ba46d038ba350dba58026c45">configure</a>(compile_context, output_gate_out, <span class="keyword">nullptr</span>, ActivationLayerInfo(<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa72ee60fba0509af07cbbd91398d8db9d">ActivationLayerInfo::ActivationFunction::LOGISTIC</a>));</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160; </div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    <span class="comment">// Configure block that calculates the output state</span><span class="comment"></span></div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;<span class="comment">    /** lstm_res = PixelwiseMul(output, Activation(cell_state))</span></div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;<span class="comment">     *                      -- Clip(lstm_res * projection_weights + projection_bias, projection_threshold) , if there is a projection</span></div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;<span class="comment">     *                     /</span></div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;<span class="comment">     *  output_state =  --</span></div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="comment">     *                     \</span></div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;<span class="comment">     *                      -- lstm_res , otherwise</span></div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    ICLTensor *output_state_out_tmp = lstm_params.has_projection() ? &amp;_output_state1 : output_state_out;</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    _cell_state_activation.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">init</a>(TensorInfo(cell_state_shape, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()));</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    _output_state1.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">init</a>(TensorInfo(cell_state_shape, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type()));</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160; </div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_cell_state_activation);</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    _activation_output_state.<a class="code" href="classarm__compute_1_1_c_l_activation_layer.xhtml#a239fea32ba46d038ba350dba58026c45">configure</a>(compile_context, &amp;_cell_state_out1, &amp;_cell_state_activation, activation_info);</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    _pixelwise_mul_output_state2.<a class="code" href="classarm__compute_1_1_c_l_pixel_wise_multiplication.xhtml#acfd5a4c9ff5fca09c047124ccc910c3b">configure</a>(compile_context, &amp;_cell_state_activation, output_gate_out, output_state_out_tmp, 1, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>, <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">RoundingPolicy::TO_NEAREST_EVEN</a>);</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    _cell_state_activation.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160; </div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    <span class="keywordflow">if</span>(lstm_params.has_projection())</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    {</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;        _has_projection_weights = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;        _fully_connected_output_state.<a class="code" href="classarm__compute_1_1_c_l_fully_connected_layer.xhtml#affcc7f7d8a5dafb5d25931fd66536b04">configure</a>(compile_context, output_state_out_tmp, lstm_params.projection_weights(), lstm_params.projection_bias(), output_state_out);</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;        _output_state1.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;        <span class="comment">// Perform clipping</span></div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;        <span class="keywordflow">if</span>(projection_threshold != 0.f)</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;        {</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;            _perform_projection_clipping = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;            _projection_clip.<a class="code" href="classarm__compute_1_1_c_l_activation_layer.xhtml#a239fea32ba46d038ba350dba58026c45">configure</a>(compile_context, output_state_out, <span class="keyword">nullptr</span>, ActivationLayerInfo(<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaaab1d4411a9e7f5e82002512cddfdc33a">ActivationLayerInfo::ActivationFunction::LU_BOUNDED_RELU</a>, -projection_threshold, projection_threshold));</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;        }</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    }</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160; </div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    <span class="comment">// Copy cell state and output</span></div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    _copy_cell_state.<a class="code" href="classarm__compute_1_1_c_l_copy.xhtml#a44ce4eebb0f1b66e2030ff6376ebf97f">configure</a>(compile_context, &amp;_cell_state_out1, cell_state_out);</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    _copy_output.<a class="code" href="classarm__compute_1_1_c_l_copy.xhtml#a44ce4eebb0f1b66e2030ff6376ebf97f">configure</a>(compile_context, output_state_out, output);</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160; </div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    <span class="comment">// Vector for holding the tensors to store in scratch buffer</span></div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    std::vector&lt;const ICLTensor *&gt; scratch_inputs;</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    <span class="keywordflow">if</span>(!lstm_params.has_cifg_opt())</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    {</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;        scratch_inputs.emplace_back(input_gate_out);</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    }</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    scratch_inputs.emplace_back(&amp;_cell_state_out1);</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    scratch_inputs.emplace_back(forget_gate_out);</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    scratch_inputs.emplace_back(output_gate_out);</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    _concat_scratch_buffer.<a class="code" href="classarm__compute_1_1_c_l_concatenate_layer.xhtml#afbce8280ab870092192a51c90d5abcbd">configure</a>(compile_context, scratch_inputs, scratch_buffer, <a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>);</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    input_gate_out-&gt;allocator()-&gt;allocate();</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    _cell_state_out1.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    forget_gate_out-&gt;allocator()-&gt;allocate();</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    output_gate_out-&gt;allocator()-&gt;allocate();</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_tensor_allocator_8cpp_source.xhtml#l00127">CLTensorAllocator::allocate()</a>, <a class="el" href="runtime_2_c_l_2_cl_tensor_8cpp_source.xhtml#l00061">CLTensor::allocator()</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00157">ARM_COMPUTE_ERROR_ON_NULLPTR</a>, <a class="el" href="_error_8h_source.xhtml#l00455">ARM_COMPUTE_ERROR_THROW_ON</a>, <a class="el" href="src_2common_2utils_2_log_8h.xhtml#a3ae35e22a098d589ff54ed85647ed87e">ARM_COMPUTE_LOG_PARAMS</a>, <a class="el" href="_info_helpers_8h_source.xhtml#l00071">arm_compute::utils::info_helpers::build_lstm_params_tensor_info()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01403">arm_compute::misc::shape_calculator::calculate_concatenate_shape()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00245">LSTMParams&lt; T &gt;::cell_layer_norm_weights()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00215">LSTMParams&lt; T &gt;::cell_to_forget_weights()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00205">LSTMParams&lt; T &gt;::cell_to_input_weights()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00220">LSTMParams&lt; T &gt;::cell_to_output_weights()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00403">arm_compute::misc::shape_calculator::compute_transposed_shape()</a>, <a class="el" href="_c_l_mean_std_dev_normalization_layer_8cpp_source.xhtml#l00033">CLMeanStdDevNormalizationLayer::configure()</a>, <a class="el" href="runtime_2_c_l_2functions_2_cl_fill_8cpp_source.xhtml#l00052">CLFill::configure()</a>, <a class="el" href="runtime_2_c_l_2functions_2_cl_copy_8cpp_source.xhtml#l00054">CLCopy::configure()</a>, <a class="el" href="_c_l_activation_layer_8cpp_source.xhtml#l00052">CLActivationLayer::configure()</a>, <a class="el" href="runtime_2_c_l_2functions_2_cl_elementwise_operations_8cpp_source.xhtml#l00053">CLArithmeticAddition::configure()</a>, <a class="el" href="_c_l_fully_connected_layer_8cpp_source.xhtml#l00067">CLFullyConnectedLayer::configure()</a>, <a class="el" href="_c_l_pixel_wise_multiplication_8cpp_source.xhtml#l00051">CLPixelWiseMultiplication::configure()</a>, <a class="el" href="_c_l_concatenate_layer_8cpp_source.xhtml#l00054">CLConcatenateLayer::configure()</a>, <a class="el" href="runtime_2_c_l_2functions_2_cl_gemm_8cpp_source.xhtml#l00068">CLGEMM::configure()</a>, <a class="el" href="runtime_2_c_l_2functions_2_cl_elementwise_operations_8cpp_source.xhtml#l00099">CLArithmeticSubtraction::configure()</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00244">TensorInfo::data_type()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00481">arm_compute::test::validation::forget_gate_bias</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00240">LSTMParams&lt; T &gt;::forget_layer_norm_weights()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00305">LSTMParams&lt; T &gt;::has_cifg_opt()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00295">LSTMParams&lt; T &gt;::has_peephole_opt()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00300">LSTMParams&lt; T &gt;::has_projection()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="runtime_2_c_l_2_cl_tensor_8cpp_source.xhtml#l00041">CLTensor::info()</a>, <a class="el" href="_i_tensor_allocator_8cpp_source.xhtml#l00033">ITensorAllocator::init()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00210">LSTMParams&lt; T &gt;::input_gate_bias()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00235">LSTMParams&lt; T &gt;::input_layer_norm_weights()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00474">arm_compute::test::validation::input_to_cell_weights</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00473">arm_compute::test::validation::input_to_forget_weights</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00195">LSTMParams&lt; T &gt;::input_to_input_weights()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00475">arm_compute::test::validation::input_to_output_weights</a>, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa72ee60fba0509af07cbbd91398d8db9d">ActivationLayerInfo::LOGISTIC</a>, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaaab1d4411a9e7f5e82002512cddfdc33a">ActivationLayerInfo::LU_BOUNDED_RELU</a>, <a class="el" href="_memory_group_8h_source.xhtml#l00079">MemoryGroup::manage()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00483">arm_compute::test::validation::output_gate_bias</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00250">LSTMParams&lt; T &gt;::output_layer_norm_weights()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00230">LSTMParams&lt; T &gt;::projection_bias()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00225">LSTMParams&lt; T &gt;::projection_weights()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00478">arm_compute::test::validation::recurrent_to_cell_weights</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00477">arm_compute::test::validation::recurrent_to_forget_weights</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00200">LSTMParams&lt; T &gt;::recurrent_to_input_weights()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00479">arm_compute::test::validation::recurrent_to_output_weights</a>, <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">arm_compute::SATURATE</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00236">TensorInfo::tensor_shape()</a>, <a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">arm_compute::TO_NEAREST_EVEN</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00310">LSTMParams&lt; T &gt;::use_layer_norm()</a>, and <a class="el" href="_c_l_l_s_t_m_layer_8cpp_source.xhtml#l00400">CLLSTMLayer::validate()</a>.</p>

</div>
</div>
<a id="a314969db8c5774f49656979d1df66133"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a314969db8c5774f49656979d1df66133">&#9670;&nbsp;</a></span>configure() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void configure </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>input_to_forget_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>input_to_cell_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>input_to_output_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>recurrent_to_forget_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>recurrent_to_cell_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>recurrent_to_output_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>forget_gate_bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>cell_bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>output_gate_bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>output_state_in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>cell_state_in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>scratch_buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>output_state_out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>cell_state_out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_l_s_t_m_params.xhtml">LSTMParams</a>&lt; <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>lstm_params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>activation_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>cell_threshold</em> = <code>0.f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>projection_threshold</em> = <code>0.f</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initialize function's tensors. </p>
<p>Valid data layouts:</p><ul>
<li>All</li>
</ul>
<p>Valid data type configurations: </p><table class="markdownTable">
<tr class="markdownTableHead">
<th class="markdownTableHeadLeft">src0 - src13 </th><th class="markdownTableHeadLeft">dst0 - dst3  </th></tr>
<tr class="markdownTableRowOdd">
<td class="markdownTableBodyLeft">F16 </td><td class="markdownTableBodyLeft">F16  </td></tr>
<tr class="markdownTableRowEven">
<td class="markdownTableBodyLeft">F32 </td><td class="markdownTableBodyLeft">F32  </td></tr>
</table>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Source tensor. Input is a 2D tensor with dimensions [input_size, batch_size]. Data types supported: F16/F32. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_to_forget_weights</td><td>2D weights tensor with dimensions [input_size, num_units]. Data type supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_to_cell_weights</td><td>2D weights tensor with dimensions [input_size, num_units]. Data type supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_to_output_weights</td><td>2D weights tensor with dimensions [input_size, num_units]. Data type supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">recurrent_to_forget_weights</td><td>2D weights tensor with dimensions [output_size, num_units]. Data type supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">recurrent_to_cell_weights</td><td>2D weights tensor with dimensions [output_size, num_units]. Data type supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">recurrent_to_output_weights</td><td>2D weights tensor with dimensions [output_size, num_units]. Data type supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">forget_gate_bias</td><td>1D weights tensor with dimensions [num_units]. Data type supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cell_bias</td><td>1D weights tensor with dimensions [num_units]. Data type supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output_gate_bias</td><td>1D weights tensor with dimensions [num_units]. Data type supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output_state_in</td><td>2D weights tensor with dimensions [output_size, batch_size]. Data type supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cell_state_in</td><td>2D tensor with dimensions [num_units, batch_size]. Data type supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">scratch_buffer</td><td>2D tensor with dimensions [num_units * 4, batch_size] with CIFG or [num_units * 3, batch_size] without CIGF. Data type supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output_state_out</td><td>2D weights tensor with dimensions [output_size, batch_size]. Data type supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">cell_state_out</td><td>2D tensor with dimensions [num_units, batch_size]. Data type supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output</td><td>Destination tensor. Output is a 2D tensor with dimensions [output_size, batch_size]. Data types supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">lstm_params</td><td>Weights tensors used in peephole optimization: input_to_input_weights 2D weights tensor with dimensions [input_size, num_units]. Data type supported: Same as <code>input</code>. recurrent_to_input_weights 2D weights tensor with dimensions [output_size, num_units]. Data type supported: Same as <code>input</code>. cell_to_input_weights 1D weights tensor with dimensions [num_units]. Can be nullptr. Data type supported: Same as <code>input</code>. cell_to_forget_weights 1D weights tensor with dimensions [num_units]. Data type supported: Same as <code>input</code>. cell_to_output_weights 1D weights tensor with dimensions [num_units]. Data type supported: Same as <code>input</code>. input_gate_bias 1D weights tensor with dimensions [num_units]. Data type supported: Same as <code>input</code> projection_weights 2D weights tensor with dimensions [output_size, num_units]. Data type supported: Same as <code>input</code>. projection_bias 1D weights tensor with dimensions [output_size]. Data type supported: Same as <code>input</code>. input_layer_norm_weights 1D weights tensor with dimensions [num_units]. Data type supported: Same as <code>input</code>. forget_layer_norm_weights 1D weights tensor with dimensions [num_units]. Data type supported: Same as <code>input</code>. cell_layer_norm_weights 1D weights tensor with dimensions [num_units]. Data type supported: Same as <code>input</code>. output_layer_norm_weights 1D weights tensor with dimensions [num_units]. Data type supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">activation_info</td><td>Contains activation information described in <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cell_threshold</td><td>(Optional) The clipping threshold for the cell state, such that values are bound within [-cell_clip, cell_clip]. If set to 0.0f then clipping is disabled. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">projection_threshold</td><td>(Optional) The clipping threshold for the output from the projection layer, such that values are bound within [-proj_clip, proj_clip]. If set to 0.0f then clipping is disabled. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_c_l_l_s_t_m_layer_8cpp_source.xhtml#l00060">60</a> of file <a class="el" href="_c_l_l_s_t_m_layer_8cpp_source.xhtml">CLLSTMLayer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;{</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml#a314969db8c5774f49656979d1df66133">configure</a>(<a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">CLKernelLibrary::get</a>().get_compile_context(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3b793c410cba57a1395184692a018356">input_to_forget_weights</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac547a66fe26967afb94760061ee0d0d1">input_to_cell_weights</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ace4dd633420fa8d8aa71f60ff730f01f">input_to_output_weights</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac62dfdcc14798598d953342789c9927e">recurrent_to_forget_weights</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac2236dfe2a3fc5fa4e125348829cbeb2">recurrent_to_cell_weights</a>,</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;              <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aab02df8a9ee45153f2fd76e934407fbd">recurrent_to_output_weights</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a55daaf57fb833fc416d779c28f7a3c85">forget_gate_bias</a>, cell_bias, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a507bd7e4d98cb3e45d3e820d8bac422a">output_gate_bias</a>, output_state_in, cell_state_in, scratch_buffer, output_state_out, cell_state_out, output, lstm_params, activation_info,</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;              cell_threshold, projection_threshold);</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00481">arm_compute::test::validation::forget_gate_bias</a>, <a class="el" href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00039">CLKernelLibrary::get()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00474">arm_compute::test::validation::input_to_cell_weights</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00473">arm_compute::test::validation::input_to_forget_weights</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00475">arm_compute::test::validation::input_to_output_weights</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00483">arm_compute::test::validation::output_gate_bias</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00478">arm_compute::test::validation::recurrent_to_cell_weights</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00477">arm_compute::test::validation::recurrent_to_forget_weights</a>, and <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00479">arm_compute::test::validation::recurrent_to_output_weights</a>.</p>

</div>
</div>
<a id="a71c3e393fd5282681b1cb32b3c2f0157"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a71c3e393fd5282681b1cb32b3c2f0157">&#9670;&nbsp;</a></span>operator=() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml">CLLSTMLayer</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml">CLLSTMLayer</a> &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prevent instances of this class to be moved. </p>

</div>
</div>
<a id="a8c465c4c14722d917e79507401628e31"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8c465c4c14722d917e79507401628e31">&#9670;&nbsp;</a></span>operator=() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml">CLLSTMLayer</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml">CLLSTMLayer</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prevent instances of this class from being copied. </p>

</div>
</div>
<a id="aa9b93ef660fc3c5b4b19d3fc7b891b77"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa9b93ef660fc3c5b4b19d3fc7b891b77">&#9670;&nbsp;</a></span>prepare()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void prepare </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prepare the function for executing. </p>
<p>Any one off pre-processing step required by the function is handled here</p>
<dl class="section note"><dt>Note</dt><dd>Prepare stage might not need all the function's buffers' backing memory to be available in order to execute </dd></dl>

<p>Reimplemented from <a class="el" href="classarm__compute_1_1_i_function.xhtml#a820f7291c24155a2980512fae45aac26">IFunction</a>.</p>

<p class="definition">Definition at line <a class="el" href="_c_l_l_s_t_m_layer_8cpp_source.xhtml#l00736">736</a> of file <a class="el" href="_c_l_l_s_t_m_layer_8cpp_source.xhtml">CLLSTMLayer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;{</div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;    <span class="keywordflow">if</span>(!_is_prepared)</div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;    {</div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;        _concat_weights_forget_gate.<a class="code" href="classarm__compute_1_1_c_l_concatenate_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;        <span class="keywordflow">if</span>(!_run_cifg_opt)</div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;        {</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;            _concat_weights_input_gate.<a class="code" href="classarm__compute_1_1_c_l_concatenate_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div>
<div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;        }</div>
<div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;        _concat_weights_output.<a class="code" href="classarm__compute_1_1_c_l_concatenate_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;        _is_prepared = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;    }</div>
<div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_concatenate_layer_8cpp_source.xhtml#l00084">CLConcatenateLayer::run()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_l_s_t_m_layer_8cpp_source.xhtml#l00631">CLLSTMLayer::run()</a>.</p>

</div>
</div>
<a id="ad1717410afd0be936c6213a63c8005fb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad1717410afd0be936c6213a63c8005fb">&#9670;&nbsp;</a></span>run()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void run </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Run the kernels contained in the function. </p>
<p>For CPU kernels:</p><ul>
<li>Multi-threading is used for the kernels which are parallelisable.</li>
<li>By default std::thread::hardware_concurrency() threads are used.</li>
</ul>
<dl class="section note"><dt>Note</dt><dd><a class="el" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#ae64eebaa07f4d2da6cc2ba538c3cb095">CPPScheduler::set_num_threads()</a> can be used to manually set the number of threads</dd></dl>
<p>For OpenCL kernels:</p><ul>
<li>All the kernels are enqueued on the queue associated with <a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml" title="Provides global access to a CL context and command queue.">CLScheduler</a>.</li>
<li>The queue is then flushed.</li>
</ul>
<dl class="section note"><dt>Note</dt><dd>The function will not block until the kernels are executed. It is the user's responsibility to wait. </dd>
<dd>
Will call <a class="el" href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml#aa9b93ef660fc3c5b4b19d3fc7b891b77" title="Prepare the function for executing.">prepare()</a> on first run if hasn't been done </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_function.xhtml#a18954417d3124a8095783ea13dc6d00b">IFunction</a>.</p>

<p class="definition">Definition at line <a class="el" href="_c_l_l_s_t_m_layer_8cpp_source.xhtml#l00631">631</a> of file <a class="el" href="_c_l_l_s_t_m_layer_8cpp_source.xhtml">CLLSTMLayer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;{</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml#aa9b93ef660fc3c5b4b19d3fc7b891b77">prepare</a>();</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160; </div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;    MemoryGroupResourceScope scope_mg(_memory_group);</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160; </div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;    _concat_inputs_forget_gate.<a class="code" href="classarm__compute_1_1_c_l_concatenate_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160; </div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;    _fully_connected_forget_gate.<a class="code" href="classarm__compute_1_1_c_l_fully_connected_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160; </div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;    <span class="keywordflow">if</span>(_run_peephole_opt)</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;    {</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;        _pixelwise_mul_forget_gate.<a class="code" href="classarm__compute_1_1_c_l_pixel_wise_multiplication.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;        _accum_forget_gate1.<a class="code" href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;    }</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    <span class="keywordflow">if</span>(_is_layer_norm_lstm)</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;    {</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;        _mean_std_norm_forget_gate.<a class="code" href="classarm__compute_1_1_i_c_l_simple_function.xhtml#a92fe532c342ae2b07956a65520c05362">run</a>();</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;        _pixelwise_mul_forget_gate_coeff.<a class="code" href="classarm__compute_1_1_c_l_pixel_wise_multiplication.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;        _accum_forget_gate_bias.<a class="code" href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;    }</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;    _activation_forget_gate.<a class="code" href="classarm__compute_1_1_c_l_activation_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160; </div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;    <span class="keywordflow">if</span>(_run_cifg_opt)</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;    {</div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;        _ones_fill.<a class="code" href="classarm__compute_1_1_c_l_fill.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;        _subtract_input_gate.<a class="code" href="classarm__compute_1_1_c_l_arithmetic_subtraction.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;    }</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;    {</div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;        _fully_connected_input_gate.<a class="code" href="classarm__compute_1_1_c_l_fully_connected_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160; </div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;        <span class="keywordflow">if</span>(_run_peephole_opt)</div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;        {</div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;            _pixelwise_mul_input_gate.<a class="code" href="classarm__compute_1_1_c_l_pixel_wise_multiplication.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;            _accum_input_gate1.<a class="code" href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;        }</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160; </div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;        <span class="keywordflow">if</span>(_is_layer_norm_lstm)</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;        {</div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;            _mean_std_norm_input_gate.<a class="code" href="classarm__compute_1_1_i_c_l_simple_function.xhtml#a92fe532c342ae2b07956a65520c05362">run</a>();</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;            _pixelwise_mul_input_gate_coeff.<a class="code" href="classarm__compute_1_1_c_l_pixel_wise_multiplication.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;            _accum_input_gate_bias.<a class="code" href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;        }</div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;        _activation_input_gate.<a class="code" href="classarm__compute_1_1_c_l_activation_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;    }</div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160; </div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;    _fully_connected_cell_state.<a class="code" href="classarm__compute_1_1_c_l_fully_connected_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;    ITensorPack <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>;</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a6d8078b635739e84400cf8240a2993e7">add_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828ae1a1ae3e3415cb95b96aa11edbdbbb69">TensorType::ACL_SRC</a>, _recurrent_to_cell_weights);</div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a6d8078b635739e84400cf8240a2993e7">add_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2">TensorType::ACL_DST</a>, &amp;_cell_state_out2);</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a5c0fc6f465cae029d60ffdfc7f3e99d9">enqueue_op</a>(*_transpose_cell_state,</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;                                  <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>,</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;                                  <span class="keyword">false</span>);</div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;    _gemm_cell_state1.<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;    _accum_cell_state1.<a class="code" href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;    <span class="keywordflow">if</span>(_is_layer_norm_lstm)</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;    {</div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;        _mean_std_norm_cell_gate.<a class="code" href="classarm__compute_1_1_i_c_l_simple_function.xhtml#a92fe532c342ae2b07956a65520c05362">run</a>();</div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;        _pixelwise_mul_cell_gate_coeff.<a class="code" href="classarm__compute_1_1_c_l_pixel_wise_multiplication.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;        _accum_cell_gate_bias.<a class="code" href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;    }</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;    _activation_cell_state.<a class="code" href="classarm__compute_1_1_c_l_activation_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;    _pixelwise_mul_cell_state1.<a class="code" href="classarm__compute_1_1_c_l_pixel_wise_multiplication.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;    _pixelwise_mul_cell_state2.<a class="code" href="classarm__compute_1_1_c_l_pixel_wise_multiplication.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;    _accum_cell_state2.<a class="code" href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160; </div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;    <span class="keywordflow">if</span>(_perform_cell_clipping)</div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;    {</div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;        _cell_clip.<a class="code" href="classarm__compute_1_1_c_l_activation_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;    }</div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160; </div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;    _fully_connected_output.<a class="code" href="classarm__compute_1_1_c_l_fully_connected_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160; </div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;    <span class="keywordflow">if</span>(_run_peephole_opt)</div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;    {</div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;        _pixelwise_mul_output_state1.<a class="code" href="classarm__compute_1_1_c_l_pixel_wise_multiplication.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;        _accum_output1.<a class="code" href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;    }</div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;    <span class="keywordflow">if</span>(_is_layer_norm_lstm)</div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;    {</div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;        _mean_std_norm_output_gate.<a class="code" href="classarm__compute_1_1_i_c_l_simple_function.xhtml#a92fe532c342ae2b07956a65520c05362">run</a>();</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;        _pixelwise_mul_output_gate_coeff.<a class="code" href="classarm__compute_1_1_c_l_pixel_wise_multiplication.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;        _accum_output_gate_bias.<a class="code" href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;    }</div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;    _activation_output.<a class="code" href="classarm__compute_1_1_c_l_activation_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160; </div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;    _activation_output_state.<a class="code" href="classarm__compute_1_1_c_l_activation_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;    _pixelwise_mul_output_state2.<a class="code" href="classarm__compute_1_1_c_l_pixel_wise_multiplication.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160; </div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;    <span class="keywordflow">if</span>(_has_projection_weights)</div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;    {</div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;        _fully_connected_output_state.<a class="code" href="classarm__compute_1_1_c_l_fully_connected_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;        <span class="keywordflow">if</span>(_perform_projection_clipping)</div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;        {</div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;            _projection_clip.<a class="code" href="classarm__compute_1_1_c_l_activation_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;        }</div>
<div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;    }</div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160; </div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;    _copy_cell_state.<a class="code" href="classarm__compute_1_1_c_l_copy.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;    _copy_output.<a class="code" href="classarm__compute_1_1_c_l_copy.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160; </div>
<div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;    _concat_scratch_buffer.<a class="code" href="classarm__compute_1_1_c_l_concatenate_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00055">arm_compute::ACL_DST</a>, <a class="el" href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00044">arm_compute::ACL_SRC</a>, <a class="el" href="_i_tensor_pack_8cpp_source.xhtml#l00039">ITensorPack::add_tensor()</a>, <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00211">CLScheduler::enqueue_op()</a>, <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00103">CLScheduler::get()</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00188">arm_compute::test::validation::pack</a>, <a class="el" href="_c_l_l_s_t_m_layer_8cpp_source.xhtml#l00736">CLLSTMLayer::prepare()</a>, <a class="el" href="_i_c_l_simple_function_8cpp_source.xhtml#l00043">ICLSimpleFunction::run()</a>, <a class="el" href="runtime_2_c_l_2functions_2_cl_fill_8cpp_source.xhtml#l00072">CLFill::run()</a>, <a class="el" href="runtime_2_c_l_2functions_2_cl_copy_8cpp_source.xhtml#l00076">CLCopy::run()</a>, <a class="el" href="_c_l_fully_connected_layer_8cpp_source.xhtml#l00114">CLFullyConnectedLayer::run()</a>, <a class="el" href="_c_l_activation_layer_8cpp_source.xhtml#l00073">CLActivationLayer::run()</a>, <a class="el" href="runtime_2_c_l_2functions_2_cl_gemm_8cpp_source.xhtml#l00099">CLGEMM::run()</a>, <a class="el" href="_c_l_concatenate_layer_8cpp_source.xhtml#l00084">CLConcatenateLayer::run()</a>, <a class="el" href="_c_l_pixel_wise_multiplication_8cpp_source.xhtml#l00073">CLPixelWiseMultiplication::run()</a>, <a class="el" href="runtime_2_c_l_2functions_2_cl_elementwise_operations_8cpp_source.xhtml#l00073">CLArithmeticAddition::run()</a>, and <a class="el" href="runtime_2_c_l_2functions_2_cl_elementwise_operations_8cpp_source.xhtml#l00119">CLArithmeticSubtraction::run()</a>.</p>

</div>
</div>
<a id="aa05bceba37ded272a464a90becd9cd99"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa05bceba37ded272a464a90becd9cd99">&#9670;&nbsp;</a></span>validate()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> validate </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>input_to_forget_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>input_to_cell_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>input_to_output_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>recurrent_to_forget_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>recurrent_to_cell_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>recurrent_to_output_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>forget_gate_bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>cell_bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>output_gate_bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>output_state_in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>cell_state_in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>scratch_buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>output_state_out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>cell_state_out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_l_s_t_m_params.xhtml">LSTMParams</a>&lt; <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>lstm_params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>activation_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>cell_threshold</em> = <code>0.f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>projection_threshold</em> = <code>0.f</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Static function to check if given info will lead to a valid configuration of <a class="el" href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml">CLLSTMLayer</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Source tensor info. Input is a 2D tensor with dimensions [input_size, batch_size]. Data types supported: F16/F32. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_to_forget_weights</td><td>2D weights tensor info with dimensions [input_size, num_units]. Data type supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_to_cell_weights</td><td>2D weights tensor info with dimensions [input_size, num_units]. Data type supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_to_output_weights</td><td>2D weights tensor info with dimensions [input_size, num_units]. Data type supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">recurrent_to_forget_weights</td><td>2D weights tensor info with dimensions [output_size, num_units]. Data type supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">recurrent_to_cell_weights</td><td>2D weights tensor info with dimensions [output_size, num_units]. Data type supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">recurrent_to_output_weights</td><td>2D weights tensor info with dimensions [output_size, num_units]. Data type supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">forget_gate_bias</td><td>1D weights tensor info with dimensions [num_units]. Data type supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cell_bias</td><td>1D weights tensor info with dimensions [num_units]. Data type supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output_gate_bias</td><td>1D weights tensor info with dimensions [num_units]. Data type supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output_state_in</td><td>2D weights tensor info with dimensions [output_size, batch_size]. Data type supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cell_state_in</td><td>2D tensor info with dimensions [num_units, batch_size]. Data type supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">scratch_buffer</td><td>2D tensor info with dimensions [num_units * 4, batch_size] with CIFG or [num_units * 3, batch_size] without CIGF. Data type supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output_state_out</td><td>2D weights tensor info with dimensions [output_size, batch_size]. Data type supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cell_state_out</td><td>2D tensor info with dimensions [num_units, batch_size]. Data type supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output</td><td>Destination tensor info. Output is a 2D tensor with dimensions [output_size, batch_size]. Data types supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">lstm_params</td><td>Weights tensors info used in peephole optimization: input_to_input_weights 2D weights tensor info with dimensions [input_size, num_units]. Data type supported: Same as <code>input</code>. recurrent_to_input_weights 2D weights tensor info with dimensions [output_size, num_units]. Data type supported: Same as <code>input</code>. cell_to_input_weights 1D weights tensor info with dimensions [num_units]. Can be nullptr. Data type supported: Same as <code>input</code>. cell_to_forget_weights 1D weights tensor info with dimensions [num_units]. Data type supported: Same as <code>input</code>. cell_to_output_weights 1D weights tensor info with dimensions [num_units]. Data type supported: Same as <code>input</code>. input_gate_bias 1D weights tensor info with dimensions [num_units]. Data type supported: Same as <code>input</code> projection_weights 2D weights tensor info with dimensions [output_size, num_units]. Data type supported: Same as <code>input</code>. projection_bias 1D weights tensor info with dimensions [output_size]. Data type supported: Same as <code>input</code>. input_layer_norm_weights 1D weights tensor info with dimensions [num_units]. Data type supported: Same as <code>input</code>. forget_layer_norm_weights 1D weights tensor info with dimensions [num_units]. Data type supported: Same as <code>input</code>. cell_layer_norm_weights 1D weights tensor info with dimensions [num_units]. Data type supported: Same as <code>input</code>. output_layer_norm_weights 1D weights tensor info with dimensions [num_units]. Data type supported: Same as <code>input</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">activation_info</td><td>Contains activation information described in <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cell_threshold</td><td>(Optional) The clipping threshold for the cell state, such that values are bound within [-cell_clip, cell_clip]. If set to 0.0f then clipping is disabled. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">projection_threshold</td><td>(Optional) The clipping threshold for the output from the projection layer, such that values are bound within [-proj_clip, proj_clip]. If set to 0.0f then clipping is disabled.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a status </dd></dl>

<p class="definition">Definition at line <a class="el" href="_c_l_l_s_t_m_layer_8cpp_source.xhtml#l00400">400</a> of file <a class="el" href="_c_l_l_s_t_m_layer_8cpp_source.xhtml">CLLSTMLayer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;{</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#aff911654521523937ff24372a870b89f">ARM_COMPUTE_RETURN_ERROR_ON_NULLPTR</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>,</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;                                        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3b793c410cba57a1395184692a018356">input_to_forget_weights</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac547a66fe26967afb94760061ee0d0d1">input_to_cell_weights</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ace4dd633420fa8d8aa71f60ff730f01f">input_to_output_weights</a>,</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                                        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac62dfdcc14798598d953342789c9927e">recurrent_to_forget_weights</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac2236dfe2a3fc5fa4e125348829cbeb2">recurrent_to_cell_weights</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aab02df8a9ee45153f2fd76e934407fbd">recurrent_to_output_weights</a>,</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;                                        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a55daaf57fb833fc416d779c28f7a3c85">forget_gate_bias</a>, cell_bias, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a507bd7e4d98cb3e45d3e820d8bac422a">output_gate_bias</a>,</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;                                        output_state_in, cell_state_in,</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;                                        scratch_buffer, output_state_out, cell_state_out, output);</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160; </div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    <span class="comment">// Check data types</span></div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, 1, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94">DataType::F16</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>);</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a8f3ff7da485ff7e75dab07baadf5b4bd">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>,</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;                                                       <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3b793c410cba57a1395184692a018356">input_to_forget_weights</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac547a66fe26967afb94760061ee0d0d1">input_to_cell_weights</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ace4dd633420fa8d8aa71f60ff730f01f">input_to_output_weights</a>,</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;                                                       <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac62dfdcc14798598d953342789c9927e">recurrent_to_forget_weights</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac2236dfe2a3fc5fa4e125348829cbeb2">recurrent_to_cell_weights</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aab02df8a9ee45153f2fd76e934407fbd">recurrent_to_output_weights</a>,</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;                                                       <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a55daaf57fb833fc416d779c28f7a3c85">forget_gate_bias</a>, cell_bias, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a507bd7e4d98cb3e45d3e820d8bac422a">output_gate_bias</a>,</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;                                                       output_state_in, cell_state_in,</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;                                                       scratch_buffer, output_state_out, cell_state_out, output);</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160; </div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <span class="comment">// Check dimensions</span></div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;num_dimensions() &gt; 2);</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3b793c410cba57a1395184692a018356">input_to_forget_weights</a>-&gt;num_dimensions() &gt; 2);</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac547a66fe26967afb94760061ee0d0d1">input_to_cell_weights</a>-&gt;num_dimensions() &gt; 2);</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ace4dd633420fa8d8aa71f60ff730f01f">input_to_output_weights</a>-&gt;num_dimensions() &gt; 2);</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac62dfdcc14798598d953342789c9927e">recurrent_to_forget_weights</a>-&gt;num_dimensions() &gt; 2);</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac2236dfe2a3fc5fa4e125348829cbeb2">recurrent_to_cell_weights</a>-&gt;num_dimensions() &gt; 2);</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aab02df8a9ee45153f2fd76e934407fbd">recurrent_to_output_weights</a>-&gt;num_dimensions() &gt; 2);</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a55daaf57fb833fc416d779c28f7a3c85">forget_gate_bias</a>-&gt;num_dimensions() &gt; 1);</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(cell_bias-&gt;num_dimensions() &gt; 1);</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a507bd7e4d98cb3e45d3e820d8bac422a">output_gate_bias</a>-&gt;num_dimensions() &gt; 1);</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(output_state_in-&gt;num_dimensions() &gt; 2);</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(cell_state_in-&gt;num_dimensions() &gt; 2);</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(scratch_buffer-&gt;num_dimensions() &gt; 2);</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(output_state_out-&gt;num_dimensions() &gt; 2);</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(cell_state_out-&gt;num_dimensions() &gt; 2);</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(output-&gt;num_dimensions() &gt; 2);</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(cell_bias-&gt;dimension(0) * 4 != scratch_buffer-&gt;dimension(0)</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;                                &amp;&amp; cell_bias-&gt;dimension(0) * 3 != scratch_buffer-&gt;dimension(0));</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160; </div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_batches = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;dimension(1);</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_cells   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ace4dd633420fa8d8aa71f60ff730f01f">input_to_output_weights</a>-&gt;dimension(1);</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160; </div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    <span class="keywordflow">if</span>(lstm_params.use_layer_norm())</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    {</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;        <span class="comment">// If CIFG is used, input layer normalization weights tensor is omitted</span></div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;        <span class="keywordflow">if</span>(lstm_params.has_cifg_opt())</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;        {</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;            <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(lstm_params.input_layer_norm_weights() != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;        }</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;        {</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;            <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#aff911654521523937ff24372a870b89f">ARM_COMPUTE_RETURN_ERROR_ON_NULLPTR</a>(lstm_params.input_layer_norm_weights());</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;            <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(lstm_params.input_layer_norm_weights()-&gt;num_dimensions() &gt; 1);</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;            <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(lstm_params.input_layer_norm_weights()-&gt;dimension(0) != num_cells);</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;            <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a8f3ff7da485ff7e75dab07baadf5b4bd">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, lstm_params.input_layer_norm_weights());</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;        }</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160; </div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;        <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#aff911654521523937ff24372a870b89f">ARM_COMPUTE_RETURN_ERROR_ON_NULLPTR</a>(lstm_params.forget_layer_norm_weights(), lstm_params.cell_layer_norm_weights(), lstm_params.output_layer_norm_weights());</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;        <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a8f3ff7da485ff7e75dab07baadf5b4bd">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, lstm_params.forget_layer_norm_weights(), lstm_params.cell_layer_norm_weights(), lstm_params.output_layer_norm_weights());</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;        <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(lstm_params.forget_layer_norm_weights()-&gt;num_dimensions() &gt; 1);</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;        <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(lstm_params.cell_layer_norm_weights()-&gt;num_dimensions() &gt; 1);</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;        <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(lstm_params.output_layer_norm_weights()-&gt;num_dimensions() &gt; 1);</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;        <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(lstm_params.forget_layer_norm_weights()-&gt;dimension(0) != num_cells);</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;        <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(lstm_params.cell_layer_norm_weights()-&gt;dimension(0) != num_cells);</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;        <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(lstm_params.output_layer_norm_weights()-&gt;dimension(0) != num_cells);</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    }</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160; </div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    <span class="comment">// Check peephole optimization</span></div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    <span class="keywordflow">if</span>(lstm_params.has_peephole_opt())</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    {</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;        <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#aff911654521523937ff24372a870b89f">ARM_COMPUTE_RETURN_ERROR_ON_NULLPTR</a>(lstm_params.cell_to_output_weights(), lstm_params.cell_to_forget_weights());</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;        <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(lstm_params.cell_to_forget_weights()-&gt;num_dimensions() &gt; 1);</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;        <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(lstm_params.cell_to_output_weights()-&gt;num_dimensions() &gt; 1);</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;    }</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160; </div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    TensorShape      units_out_transposed_shape = <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a69cb11b5b37f94a6bea9eaad9d13cccf">compute_transposed_shape</a>(*<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aab02df8a9ee45153f2fd76e934407fbd">recurrent_to_output_weights</a>);</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    TensorShape      num_units_transposed_shape = <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a69cb11b5b37f94a6bea9eaad9d13cccf">compute_transposed_shape</a>(*<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a55daaf57fb833fc416d779c28f7a3c85">forget_gate_bias</a>);</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    <span class="keyword">const</span> TensorInfo units_out_transposed_info  = TensorInfo(units_out_transposed_shape, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;data_type());</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    <span class="keyword">const</span> TensorInfo num_units_transposed_info  = TensorInfo(num_units_transposed_shape, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;data_type());</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160; </div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    TensorInfo input_gate      = TensorInfo(TensorShape(num_cells, num_batches), 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;data_type());</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    TensorInfo forget_gate     = TensorInfo(TensorShape(num_cells, num_batches), 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;data_type());</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    TensorInfo output_gate_tmp = TensorInfo(TensorShape(num_cells, num_batches), 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;data_type());</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    TensorInfo cell_state_tmp  = TensorInfo(TensorShape(num_cells, num_batches), 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;data_type());</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160; </div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    <span class="comment">// Validate forget gate</span></div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_fully_connected_layer.xhtml#a8da875051f2d75a497fb2de9cdd2e6cb">CLFullyConnectedLayer::validate</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3b793c410cba57a1395184692a018356">input_to_forget_weights</a>, (lstm_params.use_layer_norm()) ? <span class="keyword">nullptr</span> : <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a55daaf57fb833fc416d779c28f7a3c85">forget_gate_bias</a>, &amp;forget_gate));</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160; </div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    std::vector&lt;const ITensorInfo *&gt; inputs_vector;</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    inputs_vector.emplace_back(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>);</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;    inputs_vector.emplace_back(output_state_in);</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    <span class="keyword">const</span> TensorShape concat_shape       = <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a6100aeb494088632647c3e0d639c99ab">arm_compute::misc::shape_calculator::calculate_concatenate_shape</a>(inputs_vector, 0);</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;    TensorInfo        forget_gate_concat = TensorInfo(concat_shape, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;data_type());</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160; </div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_concatenate_layer.xhtml#aed4107f4b989a0724c349d8e24cfe2b2">CLConcatenateLayer::validate</a>(inputs_vector, &amp;forget_gate_concat, <a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>));</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160; </div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    <span class="keywordflow">if</span>(lstm_params.has_peephole_opt())</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;    {</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_pixel_wise_multiplication.xhtml#ab8a2affed84fcb02163a828fd8a37bfd">CLPixelWiseMultiplication::validate</a>(cell_state_in, lstm_params.cell_to_forget_weights(), &amp;forget_gate, 1, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>, <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">RoundingPolicy::TO_NEAREST_EVEN</a>));</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml#a5d4d1bdc6b902a7075b6850977a9ba7c">CLArithmeticAddition::validate</a>(&amp;forget_gate, &amp;forget_gate, &amp;forget_gate, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>));</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;    }</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;    <span class="keywordflow">if</span>(lstm_params.use_layer_norm())</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;    {</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_mean_std_dev_normalization_layer.xhtml#a0a84b209b1d887a523005907e7028e2e">CLMeanStdDevNormalizationLayer::validate</a>(&amp;forget_gate));</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_pixel_wise_multiplication.xhtml#ab8a2affed84fcb02163a828fd8a37bfd">CLPixelWiseMultiplication::validate</a>(&amp;forget_gate, lstm_params.forget_layer_norm_weights(), &amp;forget_gate, 1, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>,</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;                                                                        <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">RoundingPolicy::TO_NEAREST_EVEN</a>));</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml#a5d4d1bdc6b902a7075b6850977a9ba7c">CLArithmeticAddition::validate</a>(&amp;forget_gate, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a55daaf57fb833fc416d779c28f7a3c85">forget_gate_bias</a>, &amp;forget_gate, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>));</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    }</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_activation_layer.xhtml#aa37e2d0b4cd4f835bfa2a2df4a0bdd2c">CLActivationLayer::validate</a>(&amp;forget_gate, &amp;forget_gate, ActivationLayerInfo(<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa72ee60fba0509af07cbbd91398d8db9d">ActivationLayerInfo::ActivationFunction::LOGISTIC</a>)));</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160; </div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    <span class="comment">// Validate input gate</span></div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;    <span class="keywordflow">if</span>(!lstm_params.has_cifg_opt())</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    {</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;        <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#aff911654521523937ff24372a870b89f">ARM_COMPUTE_RETURN_ERROR_ON_NULLPTR</a>(lstm_params.input_to_input_weights(),</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;                                            lstm_params.recurrent_to_input_weights(),</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;                                            lstm_params.input_gate_bias());</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;        <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(lstm_params.input_to_input_weights()-&gt;num_dimensions() &gt; 2);</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;        <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(lstm_params.recurrent_to_input_weights()-&gt;num_dimensions() &gt; 2);</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;        <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(lstm_params.input_gate_bias()-&gt;num_dimensions() &gt; 1);</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160; </div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;        std::vector&lt;const ITensorInfo *&gt; lstm_weights;</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;        lstm_weights.emplace_back(lstm_params.input_to_input_weights());</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;        lstm_weights.emplace_back(lstm_params.recurrent_to_input_weights());</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;        TensorShape lstm_weights_concat_shape = <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a6100aeb494088632647c3e0d639c99ab">arm_compute::misc::shape_calculator::calculate_concatenate_shape</a>(lstm_weights, 0);</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;        TensorInfo  lstm_gate_concat          = TensorInfo(lstm_weights_concat_shape, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;data_type());</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_concatenate_layer.xhtml#aed4107f4b989a0724c349d8e24cfe2b2">CLConcatenateLayer::validate</a>(lstm_weights, &amp;lstm_gate_concat, <a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>));</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160; </div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_fully_connected_layer.xhtml#a8da875051f2d75a497fb2de9cdd2e6cb">CLFullyConnectedLayer::validate</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, lstm_params.input_to_input_weights(), (lstm_params.use_layer_norm()) ? <span class="keyword">nullptr</span> : lstm_params.input_gate_bias(), &amp;input_gate));</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160; </div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;        <span class="keywordflow">if</span>(lstm_params.has_peephole_opt())</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;        {</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;            <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#aff911654521523937ff24372a870b89f">ARM_COMPUTE_RETURN_ERROR_ON_NULLPTR</a>(lstm_params.cell_to_input_weights());</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;            <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(lstm_params.cell_to_input_weights()-&gt;num_dimensions() &gt; 1);</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;            <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_pixel_wise_multiplication.xhtml#ab8a2affed84fcb02163a828fd8a37bfd">CLPixelWiseMultiplication::validate</a>(cell_state_in, lstm_params.cell_to_input_weights(), &amp;input_gate, 1, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>, <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">RoundingPolicy::TO_NEAREST_EVEN</a>));</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;            <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml#a5d4d1bdc6b902a7075b6850977a9ba7c">CLArithmeticAddition::validate</a>(&amp;input_gate, &amp;input_gate, &amp;input_gate, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>));</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;        }</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160; </div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;        <span class="keywordflow">if</span>(lstm_params.use_layer_norm())</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;        {</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;            <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_mean_std_dev_normalization_layer.xhtml#a0a84b209b1d887a523005907e7028e2e">CLMeanStdDevNormalizationLayer::validate</a>(&amp;input_gate));</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;            <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_pixel_wise_multiplication.xhtml#ab8a2affed84fcb02163a828fd8a37bfd">CLPixelWiseMultiplication::validate</a>(&amp;input_gate, lstm_params.input_layer_norm_weights(), &amp;input_gate, 1, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>, <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">RoundingPolicy::TO_NEAREST_EVEN</a>));</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;            <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml#a5d4d1bdc6b902a7075b6850977a9ba7c">CLArithmeticAddition::validate</a>(&amp;input_gate, lstm_params.input_gate_bias(), &amp;input_gate, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>));</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;        }</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_activation_layer.xhtml#aa37e2d0b4cd4f835bfa2a2df4a0bdd2c">CLActivationLayer::validate</a>(&amp;input_gate, <span class="keyword">nullptr</span>, ActivationLayerInfo(<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa72ee60fba0509af07cbbd91398d8db9d">ActivationLayerInfo::ActivationFunction::LOGISTIC</a>)));</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    }</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;    {</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_arithmetic_subtraction.xhtml#a5d4d1bdc6b902a7075b6850977a9ba7c">CLArithmeticSubtraction::validate</a>(&amp;forget_gate, &amp;forget_gate, &amp;forget_gate, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>));</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;    }</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160; </div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;    <span class="comment">// Validate cell state</span></div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_fully_connected_layer.xhtml#a8da875051f2d75a497fb2de9cdd2e6cb">CLFullyConnectedLayer::validate</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac547a66fe26967afb94760061ee0d0d1">input_to_cell_weights</a>, (lstm_params.use_layer_norm()) ? <span class="keyword">nullptr</span> : cell_bias, &amp;cell_state_tmp));</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#a3493ba7d1f2057740ff5931fa00a44ac">CLGEMM::validate</a>(output_state_in, &amp;units_out_transposed_info, <span class="keyword">nullptr</span>, &amp;cell_state_tmp, 1.f, 0.f, GEMMInfo()));</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml#a5d4d1bdc6b902a7075b6850977a9ba7c">CLArithmeticAddition::validate</a>(&amp;cell_state_tmp, &amp;cell_state_tmp, &amp;cell_state_tmp, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>));</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;    <span class="keywordflow">if</span>(lstm_params.use_layer_norm())</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;    {</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_mean_std_dev_normalization_layer.xhtml#a0a84b209b1d887a523005907e7028e2e">CLMeanStdDevNormalizationLayer::validate</a>(&amp;cell_state_tmp));</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_pixel_wise_multiplication.xhtml#ab8a2affed84fcb02163a828fd8a37bfd">CLPixelWiseMultiplication::validate</a>(&amp;cell_state_tmp, lstm_params.cell_layer_norm_weights(), &amp;cell_state_tmp, 1, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>,</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;                                                                        <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">RoundingPolicy::TO_NEAREST_EVEN</a>));</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml#a5d4d1bdc6b902a7075b6850977a9ba7c">CLArithmeticAddition::validate</a>(&amp;cell_state_tmp, cell_bias, &amp;cell_state_tmp, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>));</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;    }</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_activation_layer.xhtml#aa37e2d0b4cd4f835bfa2a2df4a0bdd2c">CLActivationLayer::validate</a>(&amp;cell_state_tmp, <span class="keyword">nullptr</span>, activation_info));</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_pixel_wise_multiplication.xhtml#ab8a2affed84fcb02163a828fd8a37bfd">CLPixelWiseMultiplication::validate</a>(&amp;cell_state_tmp, &amp;input_gate, &amp;cell_state_tmp, 1, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>, <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">RoundingPolicy::TO_NEAREST_EVEN</a>));</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_pixel_wise_multiplication.xhtml#ab8a2affed84fcb02163a828fd8a37bfd">CLPixelWiseMultiplication::validate</a>(&amp;cell_state_tmp, &amp;forget_gate, &amp;cell_state_tmp, 1, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>, <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">RoundingPolicy::TO_NEAREST_EVEN</a>));</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml#a5d4d1bdc6b902a7075b6850977a9ba7c">CLArithmeticAddition::validate</a>(&amp;cell_state_tmp, &amp;cell_state_tmp, &amp;cell_state_tmp, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>));</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;    <span class="keywordflow">if</span>(cell_threshold != 0.f)</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;    {</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_activation_layer.xhtml#aa37e2d0b4cd4f835bfa2a2df4a0bdd2c">CLActivationLayer::validate</a>(&amp;cell_state_tmp, <span class="keyword">nullptr</span>, ActivationLayerInfo(<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaaab1d4411a9e7f5e82002512cddfdc33a">ActivationLayerInfo::ActivationFunction::LU_BOUNDED_RELU</a>, cell_threshold,</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;                                                                                                              -cell_threshold)));</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    }</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160; </div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;    std::vector&lt;const ITensorInfo *&gt; in_out_weights;</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;    in_out_weights.emplace_back(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ace4dd633420fa8d8aa71f60ff730f01f">input_to_output_weights</a>);</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;    in_out_weights.emplace_back(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aab02df8a9ee45153f2fd76e934407fbd">recurrent_to_output_weights</a>);</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;    TensorShape in_out_weights_concat_shape = <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a6100aeb494088632647c3e0d639c99ab">arm_compute::misc::shape_calculator::calculate_concatenate_shape</a>(in_out_weights, 0);</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;    TensorInfo  in_out_gate_concat          = TensorInfo(in_out_weights_concat_shape, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;data_type());</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_concatenate_layer.xhtml#aed4107f4b989a0724c349d8e24cfe2b2">CLConcatenateLayer::validate</a>(in_out_weights, &amp;in_out_gate_concat, <a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>));</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;    <span class="comment">// Validate output gate tmp</span></div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_fully_connected_layer.xhtml#a8da875051f2d75a497fb2de9cdd2e6cb">CLFullyConnectedLayer::validate</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ace4dd633420fa8d8aa71f60ff730f01f">input_to_output_weights</a>, (lstm_params.use_layer_norm()) ? <span class="keyword">nullptr</span> : <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a507bd7e4d98cb3e45d3e820d8bac422a">output_gate_bias</a>, &amp;output_gate_tmp));</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160; </div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;    <span class="keywordflow">if</span>(lstm_params.has_peephole_opt())</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;    {</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_pixel_wise_multiplication.xhtml#ab8a2affed84fcb02163a828fd8a37bfd">CLPixelWiseMultiplication::validate</a>(&amp;cell_state_tmp, lstm_params.cell_to_output_weights(), &amp;output_gate_tmp, 1, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>,</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;                                                                        <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">RoundingPolicy::TO_NEAREST_EVEN</a>));</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml#a5d4d1bdc6b902a7075b6850977a9ba7c">CLArithmeticAddition::validate</a>(&amp;output_gate_tmp, &amp;output_gate_tmp, &amp;output_gate_tmp, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>));</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;    }</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;    <span class="keywordflow">if</span>(lstm_params.use_layer_norm())</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;    {</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_mean_std_dev_normalization_layer.xhtml#a0a84b209b1d887a523005907e7028e2e">CLMeanStdDevNormalizationLayer::validate</a>(&amp;output_gate_tmp));</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_pixel_wise_multiplication.xhtml#ab8a2affed84fcb02163a828fd8a37bfd">CLPixelWiseMultiplication::validate</a>(&amp;output_gate_tmp, lstm_params.output_layer_norm_weights(), &amp;output_gate_tmp, 1, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>,</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;                                                                        <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">RoundingPolicy::TO_NEAREST_EVEN</a>));</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml#a5d4d1bdc6b902a7075b6850977a9ba7c">CLArithmeticAddition::validate</a>(&amp;output_gate_tmp, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a507bd7e4d98cb3e45d3e820d8bac422a">output_gate_bias</a>, &amp;output_gate_tmp, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>));</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;    }</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_activation_layer.xhtml#aa37e2d0b4cd4f835bfa2a2df4a0bdd2c">CLActivationLayer::validate</a>(&amp;output_gate_tmp, <span class="keyword">nullptr</span>, ActivationLayerInfo(<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa72ee60fba0509af07cbbd91398d8db9d">ActivationLayerInfo::ActivationFunction::LOGISTIC</a>)));</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160; </div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;    <span class="comment">// Validate output state</span></div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_activation_layer.xhtml#aa37e2d0b4cd4f835bfa2a2df4a0bdd2c">CLActivationLayer::validate</a>(&amp;cell_state_tmp, &amp;cell_state_tmp, activation_info));</div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_pixel_wise_multiplication.xhtml#ab8a2affed84fcb02163a828fd8a37bfd">CLPixelWiseMultiplication::validate</a>(&amp;cell_state_tmp, &amp;output_gate_tmp, &amp;output_gate_tmp, 1, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>, <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">RoundingPolicy::TO_NEAREST_EVEN</a>));</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;    <span class="keywordflow">if</span>(lstm_params.has_projection())</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;    {</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_fully_connected_layer.xhtml#a8da875051f2d75a497fb2de9cdd2e6cb">CLFullyConnectedLayer::validate</a>(&amp;output_gate_tmp, lstm_params.projection_weights(), lstm_params.projection_bias(), output_state_out));</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;        <span class="keywordflow">if</span>(projection_threshold != 0.f)</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;        {</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;            <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_activation_layer.xhtml#aa37e2d0b4cd4f835bfa2a2df4a0bdd2c">CLActivationLayer::validate</a>(output_state_out, output_state_out,</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;                                                                    ActivationLayerInfo(<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaaab1d4411a9e7f5e82002512cddfdc33a">ActivationLayerInfo::ActivationFunction::LU_BOUNDED_RELU</a>, -projection_threshold, projection_threshold)));</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;        }</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;    }</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160; </div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;    <span class="comment">// Validate copy kernel</span></div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_copy.xhtml#a03af38855a7ef478d856a1ceb731fe8a">CLCopy::validate</a>(&amp;cell_state_tmp, cell_state_out));</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_copy.xhtml#a03af38855a7ef478d856a1ceb731fe8a">CLCopy::validate</a>(output_state_out, output));</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160; </div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;    <span class="comment">// Validate scratch concatenation</span></div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    std::vector&lt;const ITensorInfo *&gt; inputs_vector_info_raw;</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;    <span class="keywordflow">if</span>(!lstm_params.has_cifg_opt())</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;    {</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;        inputs_vector_info_raw.push_back(&amp;input_gate);</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;    }</div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;    inputs_vector_info_raw.push_back(&amp;cell_state_tmp);</div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;    inputs_vector_info_raw.push_back(&amp;forget_gate);</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;    inputs_vector_info_raw.push_back(&amp;output_gate_tmp);</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160; </div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_l_concatenate_layer.xhtml#aed4107f4b989a0724c349d8e24cfe2b2">CLConcatenateLayer::validate</a>(inputs_vector_info_raw, scratch_buffer, <a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>));</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;    <span class="keywordflow">return</span> Status{};</div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00296">ARM_COMPUTE_RETURN_ERROR_ON</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00788">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00541">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00159">ARM_COMPUTE_RETURN_ERROR_ON_NULLPTR</a>, <a class="el" href="_error_8h_source.xhtml#l00204">ARM_COMPUTE_RETURN_ON_ERROR</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01403">arm_compute::misc::shape_calculator::calculate_concatenate_shape()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00245">LSTMParams&lt; T &gt;::cell_layer_norm_weights()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00215">LSTMParams&lt; T &gt;::cell_to_forget_weights()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00205">LSTMParams&lt; T &gt;::cell_to_input_weights()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00220">LSTMParams&lt; T &gt;::cell_to_output_weights()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00403">arm_compute::misc::shape_calculator::compute_transposed_shape()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo::dimension()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94">arm_compute::F16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::F32</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00481">arm_compute::test::validation::forget_gate_bias</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00240">LSTMParams&lt; T &gt;::forget_layer_norm_weights()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00305">LSTMParams&lt; T &gt;::has_cifg_opt()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00295">LSTMParams&lt; T &gt;::has_peephole_opt()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00300">LSTMParams&lt; T &gt;::has_projection()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00210">LSTMParams&lt; T &gt;::input_gate_bias()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00235">LSTMParams&lt; T &gt;::input_layer_norm_weights()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00474">arm_compute::test::validation::input_to_cell_weights</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00473">arm_compute::test::validation::input_to_forget_weights</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00195">LSTMParams&lt; T &gt;::input_to_input_weights()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00475">arm_compute::test::validation::input_to_output_weights</a>, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa72ee60fba0509af07cbbd91398d8db9d">ActivationLayerInfo::LOGISTIC</a>, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaaab1d4411a9e7f5e82002512cddfdc33a">ActivationLayerInfo::LU_BOUNDED_RELU</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a1f4e725b8e1ea36b30e09dc08ae6961d">ITensorInfo::num_dimensions()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00483">arm_compute::test::validation::output_gate_bias</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00250">LSTMParams&lt; T &gt;::output_layer_norm_weights()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00230">LSTMParams&lt; T &gt;::projection_bias()</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00225">LSTMParams&lt; T &gt;::projection_weights()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00478">arm_compute::test::validation::recurrent_to_cell_weights</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00477">arm_compute::test::validation::recurrent_to_forget_weights</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00200">LSTMParams&lt; T &gt;::recurrent_to_input_weights()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00479">arm_compute::test::validation::recurrent_to_output_weights</a>, <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">arm_compute::SATURATE</a>, <a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">arm_compute::TO_NEAREST_EVEN</a>, <a class="el" href="_l_s_t_m_params_8h_source.xhtml#l00310">LSTMParams&lt; T &gt;::use_layer_norm()</a>, <a class="el" href="_c_l_mean_std_dev_normalization_layer_8cpp_source.xhtml#l00046">CLMeanStdDevNormalizationLayer::validate()</a>, <a class="el" href="runtime_2_c_l_2functions_2_cl_copy_8cpp_source.xhtml#l00071">CLCopy::validate()</a>, <a class="el" href="_c_l_fully_connected_layer_8cpp_source.xhtml#l00108">CLFullyConnectedLayer::validate()</a>, <a class="el" href="_c_l_activation_layer_8cpp_source.xhtml#l00068">CLActivationLayer::validate()</a>, <a class="el" href="runtime_2_c_l_2functions_2_cl_gemm_8cpp_source.xhtml#l00094">CLGEMM::validate()</a>, <a class="el" href="_c_l_concatenate_layer_8cpp_source.xhtml#l00079">CLConcatenateLayer::validate()</a>, <a class="el" href="_c_l_pixel_wise_multiplication_8cpp_source.xhtml#l00067">CLPixelWiseMultiplication::validate()</a>, <a class="el" href="runtime_2_c_l_2functions_2_cl_elementwise_operations_8cpp_source.xhtml#l00068">CLArithmeticAddition::validate()</a>, and <a class="el" href="runtime_2_c_l_2functions_2_cl_elementwise_operations_8cpp_source.xhtml#l00114">CLArithmeticSubtraction::validate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_l_s_t_m_layer_8cpp_source.xhtml#l00073">CLLSTMLayer::configure()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>arm_compute/runtime/CL/functions/<a class="el" href="_c_l_l_s_t_m_layer_8h_source.xhtml">CLLSTMLayer.h</a></li>
<li>src/runtime/CL/functions/<a class="el" href="_c_l_l_s_t_m_layer_8cpp_source.xhtml">CLLSTMLayer.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassarm__compute_1_1_c_l_pixel_wise_multiplication_xhtml_ab8a2affed84fcb02163a828fd8a37bfd"><div class="ttname"><a href="classarm__compute_1_1_c_l_pixel_wise_multiplication.xhtml#ab8a2affed84fcb02163a828fd8a37bfd">arm_compute::CLPixelWiseMultiplication::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input1, const ITensorInfo *input2, const ITensorInfo *output, float scale, ConvertPolicy overflow_policy, RoundingPolicy rounding_policy, const ActivationLayerInfo &amp;act_info=ActivationLayerInfo())</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CLPixelWiseMultiplicatio...</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_pixel_wise_multiplication_8cpp_source.xhtml#l00067">CLPixelWiseMultiplication.cpp:67</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_l_s_t_m_layer_xhtml_aa9b93ef660fc3c5b4b19d3fc7b891b77"><div class="ttname"><a href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml#aa9b93ef660fc3c5b4b19d3fc7b891b77">arm_compute::CLLSTMLayer::prepare</a></div><div class="ttdeci">void prepare() override</div><div class="ttdoc">Prepare the function for executing.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_l_s_t_m_layer_8cpp_source.xhtml#l00736">CLLSTMLayer.cpp:736</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_arithmetic_subtraction_xhtml_a9b0d5b7cd931994262eddb786def724c"><div class="ttname"><a href="classarm__compute_1_1_c_l_arithmetic_subtraction.xhtml#a9b0d5b7cd931994262eddb786def724c">arm_compute::CLArithmeticSubtraction::configure</a></div><div class="ttdeci">void configure(const ICLTensor *input1, const ICLTensor *input2, ICLTensor *output, ConvertPolicy policy, const ActivationLayerInfo &amp;act_info=ActivationLayerInfo())</div><div class="ttdoc">Initialise the kernel's inputs, output and conversion policy.</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2functions_2_cl_elementwise_operations_8cpp_source.xhtml#l00099">CLElementwiseOperations.cpp:99</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_arithmetic_addition_xhtml_ad1717410afd0be936c6213a63c8005fb"><div class="ttname"><a href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml#ad1717410afd0be936c6213a63c8005fb">arm_compute::CLArithmeticAddition::run</a></div><div class="ttdeci">void run() override</div><div class="ttdoc">Run the kernels contained in the function.</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2functions_2_cl_elementwise_operations_8cpp_source.xhtml#l00073">CLElementwiseOperations.cpp:73</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_memory_group_xhtml_a6fc0a49304c152c20a0f6df0634fb3cd"><div class="ttname"><a href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">arm_compute::MemoryGroup::manage</a></div><div class="ttdeci">void manage(IMemoryManageable *obj) override</div><div class="ttdoc">Sets a object to be managed by the given memory group.</div><div class="ttdef"><b>Definition:</b> <a href="_memory_group_8h_source.xhtml#l00079">MemoryGroup.h:79</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_fill_xhtml_ad1717410afd0be936c6213a63c8005fb"><div class="ttname"><a href="classarm__compute_1_1_c_l_fill.xhtml#ad1717410afd0be936c6213a63c8005fb">arm_compute::CLFill::run</a></div><div class="ttdeci">void run() override</div><div class="ttdoc">Run the kernels contained in the function.</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2functions_2_cl_fill_8cpp_source.xhtml#l00072">CLFill.cpp:72</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150"><div class="ttname"><a href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">arm_compute::RoundingPolicy::TO_NEAREST_EVEN</a></div><div class="ttdeci">@ TO_NEAREST_EVEN</div><div class="ttdoc">Rounds to nearest value; half rounds to nearest even.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_allocator_xhtml_af36143939a43fa124312e395975091ed"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">arm_compute::ITensorAllocator::init</a></div><div class="ttdeci">void init(const TensorInfo &amp;input, size_t alignment=0)</div><div class="ttdoc">Initialize a tensor based on the passed TensorInfo.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_allocator_8cpp_source.xhtml#l00033">ITensorAllocator.cpp:33</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_mean_std_dev_normalization_layer_xhtml_a0a84b209b1d887a523005907e7028e2e"><div class="ttname"><a href="classarm__compute_1_1_c_l_mean_std_dev_normalization_layer.xhtml#a0a84b209b1d887a523005907e7028e2e">arm_compute::CLMeanStdDevNormalizationLayer::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input, const ITensorInfo *output=nullptr, float epsilon=1e-8f)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CLMeanStdDevNormalizatio...</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_mean_std_dev_normalization_layer_8cpp_source.xhtml#l00046">CLMeanStdDevNormalizationLayer.cpp:46</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_aa96e81276ee4f87ab386cd05a5539a7d"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">arm_compute::Window::DimX</a></div><div class="ttdeci">static constexpr size_t DimX</div><div class="ttdoc">Alias for dimension 0 also known as X dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00043">Window.h:43</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_pixel_wise_multiplication_xhtml_acfd5a4c9ff5fca09c047124ccc910c3b"><div class="ttname"><a href="classarm__compute_1_1_c_l_pixel_wise_multiplication.xhtml#acfd5a4c9ff5fca09c047124ccc910c3b">arm_compute::CLPixelWiseMultiplication::configure</a></div><div class="ttdeci">void configure(ICLTensor *input1, ICLTensor *input2, ICLTensor *output, float scale, ConvertPolicy overflow_policy, RoundingPolicy rounding_policy, const ActivationLayerInfo &amp;act_info=ActivationLayerInfo())</div><div class="ttdoc">Initialise the kernel's inputs, output and convertion policy.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_pixel_wise_multiplication_8cpp_source.xhtml#l00051">CLPixelWiseMultiplication.cpp:51</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_fully_connected_layer_xhtml_ad1717410afd0be936c6213a63c8005fb"><div class="ttname"><a href="classarm__compute_1_1_c_l_fully_connected_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">arm_compute::CLFullyConnectedLayer::run</a></div><div class="ttdeci">void run() override</div><div class="ttdoc">Run the kernels contained in the function.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_fully_connected_layer_8cpp_source.xhtml#l00114">CLFullyConnectedLayer.cpp:114</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1misc_1_1shape__calculator_xhtml_a6100aeb494088632647c3e0d639c99ab"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a6100aeb494088632647c3e0d639c99ab">arm_compute::misc::shape_calculator::calculate_concatenate_shape</a></div><div class="ttdeci">TensorShape calculate_concatenate_shape(const std::vector&lt; T * &gt; &amp;input, size_t axis)</div><div class="ttdoc">Calculate the concatenate output shape of the concatenate operation along a single axis.</div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l01403">ShapeCalculator.h:1403</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_activation_layer_xhtml_a239fea32ba46d038ba350dba58026c45"><div class="ttname"><a href="classarm__compute_1_1_c_l_activation_layer.xhtml#a239fea32ba46d038ba350dba58026c45">arm_compute::CLActivationLayer::configure</a></div><div class="ttdeci">void configure(ICLTensor *input, ICLTensor *output, ActivationLayerInfo act_info)</div><div class="ttdoc">Set the input and output tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_activation_layer_8cpp_source.xhtml#l00052">CLActivationLayer.cpp:52</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_concatenate_layer_xhtml_aed4107f4b989a0724c349d8e24cfe2b2"><div class="ttname"><a href="classarm__compute_1_1_c_l_concatenate_layer.xhtml#aed4107f4b989a0724c349d8e24cfe2b2">arm_compute::CLConcatenateLayer::validate</a></div><div class="ttdeci">static Status validate(const std::vector&lt; const ITensorInfo * &gt; &amp;inputs_vector, const ITensorInfo *output, size_t axis)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CLConcatenateLayer.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_concatenate_layer_8cpp_source.xhtml#l00079">CLConcatenateLayer.cpp:79</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_pack_xhtml_a6d8078b635739e84400cf8240a2993e7"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_pack.xhtml#a6d8078b635739e84400cf8240a2993e7">arm_compute::ITensorPack::add_tensor</a></div><div class="ttdeci">void add_tensor(int id, ITensor *tensor)</div><div class="ttdoc">Add tensor to the pack.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_pack_8cpp_source.xhtml#l00039">ITensorPack.cpp:39</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_pixel_wise_multiplication_xhtml_ad1717410afd0be936c6213a63c8005fb"><div class="ttname"><a href="classarm__compute_1_1_c_l_pixel_wise_multiplication.xhtml#ad1717410afd0be936c6213a63c8005fb">arm_compute::CLPixelWiseMultiplication::run</a></div><div class="ttdeci">void run() override</div><div class="ttdoc">Run the kernels contained in the function.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_pixel_wise_multiplication_8cpp_source.xhtml#l00073">CLPixelWiseMultiplication.cpp:73</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_copy_xhtml_a44ce4eebb0f1b66e2030ff6376ebf97f"><div class="ttname"><a href="classarm__compute_1_1_c_l_copy.xhtml#a44ce4eebb0f1b66e2030ff6376ebf97f">arm_compute::CLCopy::configure</a></div><div class="ttdeci">void configure(ICLTensor *input, ICLTensor *output, Window *dst_window=nullptr)</div><div class="ttdoc">Initialise the function's source and destination.</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2functions_2_cl_copy_8cpp_source.xhtml#l00054">CLCopy.cpp:54</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1misc_1_1shape__calculator_xhtml_a69cb11b5b37f94a6bea9eaad9d13cccf"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#a69cb11b5b37f94a6bea9eaad9d13cccf">arm_compute::misc::shape_calculator::compute_transposed_shape</a></div><div class="ttdeci">TensorShape compute_transposed_shape(const ITensorInfo &amp;input)</div><div class="ttdoc">Calculate the transposed shape of a tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l00403">ShapeCalculator.h:403</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_info_xhtml_a9a3e72153aeb3ed212e9c3698774e881"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a9a3e72153aeb3ed212e9c3698774e881">arm_compute::TensorInfo::data_type</a></div><div class="ttdeci">DataType data_type() const override</div><div class="ttdoc">Data type used for each element of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00244">TensorInfo.h:244</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_kernel_library_xhtml_acba005f5ce2c62cbf3f94d074d9007aa"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">arm_compute::CLKernelLibrary::get</a></div><div class="ttdeci">static CLKernelLibrary &amp; get()</div><div class="ttdoc">Access the KernelLibrary singleton.</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00039">CLKernelLibrary.cpp:39</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_validate_8h_xhtml_a8f3ff7da485ff7e75dab07baadf5b4bd"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a8f3ff7da485ff7e75dab07baadf5b4bd">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES(...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00541">Validate.h:541</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a55daaf57fb833fc416d779c28f7a3c85"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a55daaf57fb833fc416d779c28f7a3c85">arm_compute::test::validation::forget_gate_bias</a></div><div class="ttdeci">auto forget_gate_bias</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00481">LSTMLayerQuantized.cpp:481</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_validate_8h_xhtml_ae7eed178dac535c6e727061b1f5bc6eb"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN(t, c,...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00788">Validate.h:788</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a507bd7e4d98cb3e45d3e820d8bac422a"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a507bd7e4d98cb3e45d3e820d8bac422a">arm_compute::test::validation::output_gate_bias</a></div><div class="ttdeci">auto output_gate_bias</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00483">LSTMLayerQuantized.cpp:483</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a8a1e1c105f0bdaf37db408c7cfcb77a4"><div class="ttname"><a href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ON_ERROR(status)</div><div class="ttdoc">Checks if a status contains an error and returns it.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00204">Error.h:204</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_validate_8h_xhtml_a921b705e9e3e0fe928928447869e62a5"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_NULLPTR(...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00157">Validate.h:157</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_ac62dfdcc14798598d953342789c9927e"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac62dfdcc14798598d953342789c9927e">arm_compute::test::validation::recurrent_to_forget_weights</a></div><div class="ttdeci">auto recurrent_to_forget_weights</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00477">LSTMLayerQuantized.cpp:477</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a938dcd406ce611ef5345ad2531cdb948"><div class="ttname"><a href="_error_8h.xhtml#a938dcd406ce611ef5345ad2531cdb948">ARM_COMPUTE_ERROR_THROW_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_THROW_ON(status)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00455">Error.h:455</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_fully_connected_layer_xhtml_affcc7f7d8a5dafb5d25931fd66536b04"><div class="ttname"><a href="classarm__compute_1_1_c_l_fully_connected_layer.xhtml#affcc7f7d8a5dafb5d25931fd66536b04">arm_compute::CLFullyConnectedLayer::configure</a></div><div class="ttdeci">void configure(const CLCompileContext &amp;compile_context, const ICLTensor *input, const ICLTensor *weights, const ICLTensor *biases, ICLTensor *output, FullyConnectedLayerInfo fc_info=FullyConnectedLayerInfo())</div><div class="ttdoc">Set the input and output tensors.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_fully_connected_layer_8cpp_source.xhtml#l00067">CLFullyConnectedLayer.cpp:67</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_activation_layer_info_xhtml_a56297e0f7b215eea46c818cb7528d9eaaab1d4411a9e7f5e82002512cddfdc33a"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaaab1d4411a9e7f5e82002512cddfdc33a">arm_compute::ActivationLayerInfo::ActivationFunction::LU_BOUNDED_RELU</a></div><div class="ttdeci">@ LU_BOUNDED_RELU</div><div class="ttdoc">Lower and Upper Bounded Rectifier (  )</div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_g_e_m_m_xhtml_a3493ba7d1f2057740ff5931fa00a44ac"><div class="ttname"><a href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#a3493ba7d1f2057740ff5931fa00a44ac">arm_compute::CLGEMM::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *a, const ITensorInfo *b, const ITensorInfo *c, const ITensorInfo *output, float alpha, float beta, const GEMMInfo &amp;gemm_info=GEMMInfo())</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CLGEMM.</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2functions_2_cl_gemm_8cpp_source.xhtml#l00094">CLGEMM.cpp:94</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_l_s_t_m_layer_xhtml_aa05bceba37ded272a464a90becd9cd99"><div class="ttname"><a href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml#aa05bceba37ded272a464a90becd9cd99">arm_compute::CLLSTMLayer::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input, const ITensorInfo *input_to_forget_weights, const ITensorInfo *input_to_cell_weights, const ITensorInfo *input_to_output_weights, const ITensorInfo *recurrent_to_forget_weights, const ITensorInfo *recurrent_to_cell_weights, const ITensorInfo *recurrent_to_output_weights, const ITensorInfo *forget_gate_bias, const ITensorInfo *cell_bias, const ITensorInfo *output_gate_bias, const ITensorInfo *output_state_in, const ITensorInfo *cell_state_in, const ITensorInfo *scratch_buffer, const ITensorInfo *output_state_out, const ITensorInfo *cell_state_out, const ITensorInfo *output, const LSTMParams&lt; ITensorInfo &gt; &amp;lstm_params, const ActivationLayerInfo &amp;activation_info, float cell_threshold=0.f, float projection_threshold=0.f)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CLLSTMLayer.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_l_s_t_m_layer_8cpp_source.xhtml#l00400">CLLSTMLayer.cpp:400</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a206d6e247e0957ac3dee45d27756fc25"><div class="ttname"><a href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true, an error is returned.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00296">Error.h:296</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2">arm_compute::ACL_DST</a></div><div class="ttdeci">@ ACL_DST</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00055">Types.h:55</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_concatenate_layer_xhtml_afbce8280ab870092192a51c90d5abcbd"><div class="ttname"><a href="classarm__compute_1_1_c_l_concatenate_layer.xhtml#afbce8280ab870092192a51c90d5abcbd">arm_compute::CLConcatenateLayer::configure</a></div><div class="ttdeci">void configure(std::vector&lt; const ICLTensor * &gt; &amp;inputs_vector, ICLTensor *output, size_t axis)</div><div class="ttdoc">Initialise the kernel's inputs vector and output.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_concatenate_layer_8cpp_source.xhtml#l00054">CLConcatenateLayer.cpp:54</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_arithmetic_addition_xhtml_ab511d21db900edbc211d24bc77901b73"><div class="ttname"><a href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml#ab511d21db900edbc211d24bc77901b73">arm_compute::CLArithmeticAddition::configure</a></div><div class="ttdeci">void configure(ICLTensor *input1, ICLTensor *input2, ICLTensor *output, ConvertPolicy policy, const ActivationLayerInfo &amp;act_info=ActivationLayerInfo())</div><div class="ttdoc">Initialise the kernel's inputs, output and conversion policy.</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2functions_2_cl_elementwise_operations_8cpp_source.xhtml#l00053">CLElementwiseOperations.cpp:53</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86"><div class="ttname"><a href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">arm_compute::ConvertPolicy::SATURATE</a></div><div class="ttdeci">@ SATURATE</div><div class="ttdoc">Saturate.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_fill_xhtml_a8842f3a8e50c91b74a0b0549ac8fa489"><div class="ttname"><a href="classarm__compute_1_1_c_l_fill.xhtml#a8842f3a8e50c91b74a0b0549ac8fa489">arm_compute::CLFill::configure</a></div><div class="ttdeci">void configure(ICLTensor *tensor, const PixelValue &amp;constant_value, Window *window=nullptr)</div><div class="ttdoc">Initialize the kernel's tensor and filling value.</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2functions_2_cl_fill_8cpp_source.xhtml#l00052">CLFill.cpp:52</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1utils_1_1info__helpers_xhtml_ace12965ef6278f7717bcd30fb5f18e9e"><div class="ttname"><a href="namespacearm__compute_1_1utils_1_1info__helpers.xhtml#ace12965ef6278f7717bcd30fb5f18e9e">arm_compute::utils::info_helpers::build_lstm_params_tensor_info</a></div><div class="ttdeci">void build_lstm_params_tensor_info(const LSTMParams&lt; T &gt; &amp;lstm_params, LSTMParams&lt; ITensorInfo &gt; *lstm_params_info)</div><div class="ttdoc">Build LSTMParams&lt;ITensorInfo&gt; object by extracting the metadata from each tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_info_helpers_8h_source.xhtml#l00071">InfoHelpers.h:71</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_aab02df8a9ee45153f2fd76e934407fbd"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aab02df8a9ee45153f2fd76e934407fbd">arm_compute::test::validation::recurrent_to_output_weights</a></div><div class="ttdeci">auto recurrent_to_output_weights</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00479">LSTMLayerQuantized.cpp:479</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_activation_layer_xhtml_aa37e2d0b4cd4f835bfa2a2df4a0bdd2c"><div class="ttname"><a href="classarm__compute_1_1_c_l_activation_layer.xhtml#aa37e2d0b4cd4f835bfa2a2df4a0bdd2c">arm_compute::CLActivationLayer::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input, const ITensorInfo *output, const ActivationLayerInfo &amp;act_info)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CLActivationLayer.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_activation_layer_8cpp_source.xhtml#l00068">CLActivationLayer.cpp:68</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_activation_layer_info_xhtml_a56297e0f7b215eea46c818cb7528d9eaa72ee60fba0509af07cbbd91398d8db9d"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaa72ee60fba0509af07cbbd91398d8db9d">arm_compute::ActivationLayerInfo::ActivationFunction::LOGISTIC</a></div><div class="ttdeci">@ LOGISTIC</div><div class="ttdoc">Logistic (  )</div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_tensor_allocator_xhtml_a6e509c2a177b0b29e9e2369535094dee"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">arm_compute::CLTensorAllocator::allocate</a></div><div class="ttdeci">void allocate() override</div><div class="ttdoc">Allocate size specified by TensorInfo of OpenCL memory.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tensor_allocator_8cpp_source.xhtml#l00127">CLTensorAllocator.cpp:127</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a1e041dc03ff256dfc8b0bf5c5fe099e0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">arm_compute::test::validation::pack</a></div><div class="ttdeci">ITensorPack pack</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00188">Im2Col.cpp:188</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_arithmetic_addition_xhtml_a5d4d1bdc6b902a7075b6850977a9ba7c"><div class="ttname"><a href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml#a5d4d1bdc6b902a7075b6850977a9ba7c">arm_compute::CLArithmeticAddition::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input1, const ITensorInfo *input2, const ITensorInfo *output, ConvertPolicy policy, const ActivationLayerInfo &amp;act_info=ActivationLayerInfo())</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of opencl::kernels::ClSatur...</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2functions_2_cl_elementwise_operations_8cpp_source.xhtml#l00068">CLElementwiseOperations.cpp:68</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_tensor_xhtml_a4083de30daebd6bdee6b35d9c8262108"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">arm_compute::CLTensor::allocator</a></div><div class="ttdeci">CLTensorAllocator * allocator()</div><div class="ttdoc">Return a pointer to the tensor's allocator.</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2_cl_tensor_8cpp_source.xhtml#l00061">CLTensor.cpp:61</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_l_s_t_m_layer_xhtml_a314969db8c5774f49656979d1df66133"><div class="ttname"><a href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml#a314969db8c5774f49656979d1df66133">arm_compute::CLLSTMLayer::configure</a></div><div class="ttdeci">void configure(const ICLTensor *input, const ICLTensor *input_to_forget_weights, const ICLTensor *input_to_cell_weights, const ICLTensor *input_to_output_weights, const ICLTensor *recurrent_to_forget_weights, const ICLTensor *recurrent_to_cell_weights, const ICLTensor *recurrent_to_output_weights, const ICLTensor *forget_gate_bias, const ICLTensor *cell_bias, const ICLTensor *output_gate_bias, const ICLTensor *output_state_in, ICLTensor *cell_state_in, ICLTensor *scratch_buffer, ICLTensor *output_state_out, ICLTensor *cell_state_out, ICLTensor *output, const LSTMParams&lt; ICLTensor &gt; &amp;lstm_params, const ActivationLayerInfo &amp;activation_info, float cell_threshold=0.f, float projection_threshold=0.f)</div><div class="ttdoc">Initialize function's tensors.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_l_s_t_m_layer_8cpp_source.xhtml#l00060">CLLSTMLayer.cpp:60</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_scheduler_xhtml_a9b58d0eb9a2af8e6d7908695e1557d6c"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">arm_compute::CLScheduler::get</a></div><div class="ttdeci">static CLScheduler &amp; get()</div><div class="ttdoc">Access the scheduler singleton.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00103">CLScheduler.cpp:103</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_g_e_m_m_xhtml_ad1717410afd0be936c6213a63c8005fb"><div class="ttname"><a href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#ad1717410afd0be936c6213a63c8005fb">arm_compute::CLGEMM::run</a></div><div class="ttdeci">void run() override</div><div class="ttdoc">Run the kernels contained in the function.</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2functions_2_cl_gemm_8cpp_source.xhtml#l00099">CLGEMM.cpp:99</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_concatenate_layer_xhtml_ad1717410afd0be936c6213a63c8005fb"><div class="ttname"><a href="classarm__compute_1_1_c_l_concatenate_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">arm_compute::CLConcatenateLayer::run</a></div><div class="ttdeci">void run() override</div><div class="ttdoc">Run the kernels contained in the function.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_concatenate_layer_8cpp_source.xhtml#l00084">CLConcatenateLayer.cpp:84</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_g_e_m_m_xhtml_aa3ff5978316fd9378bf312e148797ee5"><div class="ttname"><a href="classarm__compute_1_1_c_l_g_e_m_m.xhtml#aa3ff5978316fd9378bf312e148797ee5">arm_compute::CLGEMM::configure</a></div><div class="ttdeci">void configure(const CLCompileContext &amp;compile_context, const ICLTensor *a, const ICLTensor *b, const ICLTensor *c, ICLTensor *output, float alpha, float beta, const GEMMInfo &amp;gemm_info=GEMMInfo())</div><div class="ttdoc">Initialise the kernel's inputs and output.</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2functions_2_cl_gemm_8cpp_source.xhtml#l00068">CLGEMM.cpp:68</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_copy_xhtml_a03af38855a7ef478d856a1ceb731fe8a"><div class="ttname"><a href="classarm__compute_1_1_c_l_copy.xhtml#a03af38855a7ef478d856a1ceb731fe8a">arm_compute::CLCopy::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input, const ITensorInfo *output, Window *dst_window=nullptr)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CLCopy.</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2functions_2_cl_copy_8cpp_source.xhtml#l00071">CLCopy.cpp:71</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_fully_connected_layer_xhtml_a8da875051f2d75a497fb2de9cdd2e6cb"><div class="ttname"><a href="classarm__compute_1_1_c_l_fully_connected_layer.xhtml#a8da875051f2d75a497fb2de9cdd2e6cb">arm_compute::CLFullyConnectedLayer::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input, const ITensorInfo *weights, const ITensorInfo *biases, const ITensorInfo *output, FullyConnectedLayerInfo fc_info=FullyConnectedLayerInfo())</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CLFullyConnectedLayer.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_fully_connected_layer_8cpp_source.xhtml#l00108">CLFullyConnectedLayer.cpp:108</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_arithmetic_subtraction_xhtml_ad1717410afd0be936c6213a63c8005fb"><div class="ttname"><a href="classarm__compute_1_1_c_l_arithmetic_subtraction.xhtml#ad1717410afd0be936c6213a63c8005fb">arm_compute::CLArithmeticSubtraction::run</a></div><div class="ttdeci">void run() override</div><div class="ttdoc">Run the kernels contained in the function.</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2functions_2_cl_elementwise_operations_8cpp_source.xhtml#l00119">CLElementwiseOperations.cpp:119</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94">arm_compute::DataType::F16</a></div><div class="ttdeci">@ F16</div><div class="ttdoc">16-bit floating-point number</div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_activation_layer_xhtml_ad1717410afd0be936c6213a63c8005fb"><div class="ttname"><a href="classarm__compute_1_1_c_l_activation_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">arm_compute::CLActivationLayer::run</a></div><div class="ttdeci">void run() override</div><div class="ttdoc">Run the kernels contained in the function.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_activation_layer_8cpp_source.xhtml#l00073">CLActivationLayer.cpp:73</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_validate_8h_xhtml_aff911654521523937ff24372a870b89f"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#aff911654521523937ff24372a870b89f">ARM_COMPUTE_RETURN_ERROR_ON_NULLPTR</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_NULLPTR(...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00159">Validate.h:159</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_scheduler_xhtml_a5c0fc6f465cae029d60ffdfc7f3e99d9"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a5c0fc6f465cae029d60ffdfc7f3e99d9">arm_compute::CLScheduler::enqueue_op</a></div><div class="ttdeci">void enqueue_op(ICLKernel &amp;kernel, ITensorPack &amp;tensors, bool flush=true)</div><div class="ttdoc">Schedule the execution of the passed kernel if possible.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00211">CLScheduler.cpp:211</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_tensor_xhtml_ad45f0c01a0713dfb6bd7232c7f396fc4"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">arm_compute::CLTensor::info</a></div><div class="ttdeci">TensorInfo * info() const override</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2_cl_tensor_8cpp_source.xhtml#l00041">CLTensor.cpp:41</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828ae1a1ae3e3415cb95b96aa11edbdbbb69"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828ae1a1ae3e3415cb95b96aa11edbdbbb69">arm_compute::ACL_SRC</a></div><div class="ttdeci">@ ACL_SRC</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00044">Types.h:44</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::DataType::F32</a></div><div class="ttdeci">@ F32</div><div class="ttdoc">32-bit floating-point number</div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_copy_xhtml_ad1717410afd0be936c6213a63c8005fb"><div class="ttname"><a href="classarm__compute_1_1_c_l_copy.xhtml#ad1717410afd0be936c6213a63c8005fb">arm_compute::CLCopy::run</a></div><div class="ttdeci">void run() override</div><div class="ttdoc">Run the kernels contained in the function.</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2functions_2_cl_copy_8cpp_source.xhtml#l00076">CLCopy.cpp:76</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a3b793c410cba57a1395184692a018356"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a3b793c410cba57a1395184692a018356">arm_compute::test::validation::input_to_forget_weights</a></div><div class="ttdeci">auto input_to_forget_weights</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00473">LSTMLayerQuantized.cpp:473</a></div></div>
<div class="ttc" id="asrc_2common_2utils_2_log_8h_xhtml_a3ae35e22a098d589ff54ed85647ed87e"><div class="ttname"><a href="src_2common_2utils_2_log_8h.xhtml#a3ae35e22a098d589ff54ed85647ed87e">ARM_COMPUTE_LOG_PARAMS</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_PARAMS(...)</div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_ace4dd633420fa8d8aa71f60ff730f01f"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ace4dd633420fa8d8aa71f60ff730f01f">arm_compute::test::validation::input_to_output_weights</a></div><div class="ttdeci">auto input_to_output_weights</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00475">LSTMLayerQuantized.cpp:475</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_mean_std_dev_normalization_layer_xhtml_a1029bf3c12d8600f803700fc76c11590"><div class="ttname"><a href="classarm__compute_1_1_c_l_mean_std_dev_normalization_layer.xhtml#a1029bf3c12d8600f803700fc76c11590">arm_compute::CLMeanStdDevNormalizationLayer::configure</a></div><div class="ttdeci">void configure(ICLTensor *input, ICLTensor *output=nullptr, float epsilon=1e-8f)</div><div class="ttdoc">Initialise the function's input and outputs.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_mean_std_dev_normalization_layer_8cpp_source.xhtml#l00033">CLMeanStdDevNormalizationLayer.cpp:33</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_info_xhtml_a269b19ce3f357ac65f41f9951906e38e"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">arm_compute::TensorInfo::tensor_shape</a></div><div class="ttdeci">const TensorShape &amp; tensor_shape() const override</div><div class="ttdoc">Size for each dimension of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00236">TensorInfo.h:236</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_ac547a66fe26967afb94760061ee0d0d1"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac547a66fe26967afb94760061ee0d0d1">arm_compute::test::validation::input_to_cell_weights</a></div><div class="ttdeci">auto input_to_cell_weights</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00474">LSTMLayerQuantized.cpp:474</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_ac2236dfe2a3fc5fa4e125348829cbeb2"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac2236dfe2a3fc5fa4e125348829cbeb2">arm_compute::test::validation::recurrent_to_cell_weights</a></div><div class="ttdeci">auto recurrent_to_cell_weights</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00478">LSTMLayerQuantized.cpp:478</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_c_l_simple_function_xhtml_a92fe532c342ae2b07956a65520c05362"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_simple_function.xhtml#a92fe532c342ae2b07956a65520c05362">arm_compute::ICLSimpleFunction::run</a></div><div class="ttdeci">void run() override final</div><div class="ttdoc">Run the kernels contained in the function.</div><div class="ttdef"><b>Definition:</b> <a href="_i_c_l_simple_function_8cpp_source.xhtml#l00043">ICLSimpleFunction.cpp:43</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">LSTMLayerQuantized.cpp:486</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_arithmetic_subtraction_xhtml_a5d4d1bdc6b902a7075b6850977a9ba7c"><div class="ttname"><a href="classarm__compute_1_1_c_l_arithmetic_subtraction.xhtml#a5d4d1bdc6b902a7075b6850977a9ba7c">arm_compute::CLArithmeticSubtraction::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input1, const ITensorInfo *input2, const ITensorInfo *output, ConvertPolicy policy, const ActivationLayerInfo &amp;act_info=ActivationLayerInfo())</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of opencl::kernels::ClSatur...</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2functions_2_cl_elementwise_operations_8cpp_source.xhtml#l00114">CLElementwiseOperations.cpp:114</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml">CLLSTMLayer</a></li>
    <li class="footer">Generated on Wed Jul 5 2023 11:29:24 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
