<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/CL/cl_kernels/helpers_asymm.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.05.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('helpers__asymm_8h_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">helpers_asymm.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="helpers__asymm_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017-2021 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_HELPERS_ASYMM_H</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define ARM_COMPUTE_HELPERS_ASYMM_H</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160; </div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml">helpers.h</a>&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment">/** Convert the given vector with round to nearest even rounding mode</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment"> * @param[in] x    The target to be converted</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment"> * @param[in] type The target type</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment"> * @return The converted vector</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00036"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a2ed0ea00bf682e806812fd9dbdbea5e7">   36</a></span>&#160;<span class="preprocessor">#define CONVERT_DOWN_RTE_STR(x, type) (convert_##type##_rte((x)))</span></div>
<div class="line"><a name="l00037"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#ae41349ddba7d47794bba4d2fcf659872">   37</a></span>&#160;<span class="preprocessor">#define CONVERT_DOWN_RTE(x, type) CONVERT_DOWN_RTE_STR(x, type)</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">/** Quantize a floating-point scalar value to 8-bit asymmetric</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment"> * @param[in] input  Input value to quantize</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment"> * @param[in] offset Quantization offset</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment"> * @param[in] scale  Quantization scale</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment"> * @return quantized value</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a63aa8eb6ac2ac3782ffad43a96345f0a">   47</a></span>&#160;<span class="keyword">inline</span> uchar <a class="code" href="helpers__asymm_8h.xhtml#a63aa8eb6ac2ac3782ffad43a96345f0a">quantize_qasymm8</a>(<span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keywordtype">float</span> <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>)</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;{</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keywordtype">float</span> out_f32 = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> / <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a> + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    uchar res_u8  = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a23fb01b6f3453cc0e48a026fd44f6acd">CONVERT_SAT</a>(<a class="code" href="helpers__asymm_8h.xhtml#ae41349ddba7d47794bba4d2fcf659872">CONVERT_DOWN_RTE</a>(out_f32, <span class="keywordtype">int</span>), uchar);</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keywordflow">return</span> res_u8;</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;}</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment">/** Dequantize a scalar value from 8-bit asymmetric to floating-point</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment"> * @param[in] input  Input value to quantize</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment"> * @param[in] offset Quantization offset</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment"> * @param[in] scale  Quantization scale</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment"> * @return quantized value</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00062"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#afbec2094d42590b94e7eead93710411d">   62</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">float</span> <a class="code" href="helpers__asymm_8h.xhtml#afbec2094d42590b94e7eead93710411d">dequantize_qasymm8</a>(uchar <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keywordtype">float</span> <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>)</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;{</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keywordflow">return</span> ((<span class="keywordtype">float</span>)<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> - <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>) * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;}</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">/** Dequantize a scalar value from signed 8-bit asymmetric to floating-point</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment"> * @param[in] input  Input value to quantize</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment"> * @param[in] offset Quantization offset</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment"> * @param[in] scale  Quantization scale</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment"> * @return quantized value</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a3dc07539dda26f6cd2dcdc08a222292d">   75</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">float</span> <a class="code" href="helpers__asymm_8h.xhtml#a3dc07539dda26f6cd2dcdc08a222292d">dequantize_qasymm8_signed</a>(<span class="keywordtype">char</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keywordtype">float</span> <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>)</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;{</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keywordflow">return</span> ((<span class="keywordtype">float</span>)<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> - <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>) * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;}</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment">/** Quantize a vector of values from floating-point</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment"> * @param[in] type Output data type.</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment"> * @param[in] size Size of vector.</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment"> * @return quantized values</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00087"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a1cb86b1d0c99a1e72dacda1bc615baf6">   87</a></span>&#160;<span class="preprocessor">#define QUANTIZE_IMPL(type, size)                                                                                       \</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="preprocessor">    inline VEC_DATA_TYPE(type, size) quantize_##type##size(VEC_DATA_TYPE(float, size) input, float offset, float scale) \</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="preprocessor">    {                                                                                                                   \</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(float, size)                                                                                      \</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="preprocessor">        out_f32 = input / (VEC_DATA_TYPE(float, size))(scale) + (VEC_DATA_TYPE(float, size))(offset);                   \</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(type, size)                                                                                       \</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="preprocessor">        res = CONVERT_SAT(CONVERT_DOWN_RTE(out_f32, VEC_DATA_TYPE(int, size)), VEC_DATA_TYPE(type, size));              \</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="preprocessor">        return res;                                                                                                     \</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="preprocessor">    }</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment">/** Dequantize a vector of values to floating-point</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment"> * @param[in] type Input data type.</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment"> * @param[in] size Size of vector.</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment"> * @return dequantized values in floating point</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00104"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#ac5fe0200eafe2b88af574a2ed34c3c11">  104</a></span>&#160;<span class="preprocessor">#define DEQUANTIZE_IMPL(type, size)                                                                                       \</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="preprocessor">    inline VEC_DATA_TYPE(float, size) dequantize_##type##size(VEC_DATA_TYPE(type, size) input, float offset, float scale) \</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="preprocessor">    {                                                                                                                     \</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="preprocessor">        return (CONVERT(input, VEC_DATA_TYPE(float, size)) - offset) * scale;                                             \</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="preprocessor">    }</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">/** Correctly-rounded-to-nearest division by a power-of-two.</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment"> * @param[in] size Size of vector.</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment"> * @return Correctly-rounded-to-nearest division by a power-of-two.</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00116"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#abf75e242631b23007e4046682aa57ec5">  116</a></span>&#160;<span class="preprocessor">#define ASYMM_ROUNDING_DIVIDE_BY_POW2_IMPL(size)                                                                                        \</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="preprocessor">    inline VEC_DATA_TYPE(int, size) asymm_rounding_divide_by_POW2_##size(VEC_DATA_TYPE(int, size) x, VEC_DATA_TYPE(int, size) exponent) \</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="preprocessor">    {                                                                                                                                   \</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="preprocessor">        const VEC_DATA_TYPE(int, size)                                                                                                  \</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="preprocessor">        zero = (VEC_DATA_TYPE(int, size))0;                                                                                         \</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="preprocessor">        const VEC_DATA_TYPE(int, size)                                                                                                  \</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="preprocessor">        one = (VEC_DATA_TYPE(int, size))1;                                                                                          \</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(int, size)                                                                                                        \</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="preprocessor">        mask = (one &lt;&lt; exponent) - one;                                                                                                 \</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(int, size)                                                                                                        \</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="preprocessor">        threshold = (mask &gt;&gt; 1) + select(zero, one, (SELECT_VEC_DATA_TYPE(int, size))(x &lt; 0));                                          \</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="preprocessor">        return (x &gt;&gt; exponent) + select(zero, one, (SELECT_VEC_DATA_TYPE(int, size))((x &amp; mask) &gt; threshold));                          \</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="preprocessor">    }</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">/** Product of two numbers, interpreting them as fixed-point values in the interval [-1, 1),</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment"> * rounding to the nearest value, and saturating -1 * -1 to the maximum value.</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment"> * @param[in] size Size of vector.</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment"> * @return Product of two fixed-point numbers.</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00137"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#ad4b199221927cbabbf859e4d2efb688d">  137</a></span>&#160;<span class="preprocessor">#define ASYMM_MULT_IMPL(size)                                                                                \</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="preprocessor">    inline VEC_DATA_TYPE(int, size) asymm_mult##size(VEC_DATA_TYPE(int, size) a, VEC_DATA_TYPE(int, size) b) \</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="preprocessor">    {                                                                                                        \</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(int, size)                                                                             \</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="preprocessor">        overflow = a == b &amp;&amp; a == INT_MIN;                                                                   \</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(long, size)                                                                            \</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="preprocessor">        a_64 = convert_long##size(a);                                                                        \</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(long, size)                                                                            \</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="preprocessor">        b_64 = convert_long##size(b);                                                                        \</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(long, size)                                                                            \</span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="preprocessor">        ab_64 = a_64 * b_64;                                                                                 \</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="preprocessor">        </span><span class="comment">/* Revert COMPMID-907 */</span><span class="preprocessor">                                                                             \</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(long, size)                                                                            \</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="preprocessor">        mask1 = 1 &lt;&lt; 30;                                                                                     \</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(long, size)                                                                            \</span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="preprocessor">        mask2 = 1 - (1 &lt;&lt; 30);                                                                               \</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(long, size)                                                                            \</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="preprocessor">        is_positive_or_zero = ab_64 &gt;= 0;                                                                    \</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(long, size)                                                                            \</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="preprocessor">        nudge = select(mask2, mask1, (SELECT_VEC_DATA_TYPE(long, size))(is_positive_or_zero));               \</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(long, size)                                                                            \</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="preprocessor">        mask = 1ll &lt;&lt; 31;                                                                                    \</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(int, size)                                                                             \</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="preprocessor">        ab_x2_high32 = convert_int##size((ab_64 + nudge) / mask);                                            \</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="preprocessor">        return select(ab_x2_high32, INT_MAX, (SELECT_VEC_DATA_TYPE(int, size))(overflow));                   \</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="preprocessor">    }</span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="comment">/** Calculates \f$ exp(x) \f$ for x in [-1/4, 0).</span></div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment"> * @param[in] size Size of vector.</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment"> * @return Result in fixed-point format Q0.</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00170"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a3d8a3968a069eb8abbc28d31c20f6b8c">  170</a></span>&#160;<span class="preprocessor">#define ASYMM_EXP_ON_INTERVAL_BETWEEN_NEGATIVE_ONE_QUARTER_AND_0_EXCL_IMPL(size)                                                    \</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="preprocessor">    inline VEC_DATA_TYPE(int, size) asymm_exp_on_interval_between_negative_one_quarter_and_0_excl##size(VEC_DATA_TYPE(int, size) a) \</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="preprocessor">    {                                                                                                                               \</span></div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="preprocessor">        const VEC_DATA_TYPE(int, size) constant_term     = 1895147668;                                                              \</span></div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="preprocessor">        const VEC_DATA_TYPE(int, size) constant_1_over_3 = 715827883;                                                               \</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="preprocessor">        const int k_fractional_bits = 31;                                                                                           \</span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(int, size)                                                                                                    \</span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="preprocessor">        x = a + (1 &lt;&lt; (k_fractional_bits - 3));                                                                                     \</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(int, size)                                                                                                    \</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="preprocessor">        x2 = ASYMM_MULT(x, x, size);                                                                                                \</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(int, size)                                                                                                    \</span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="preprocessor">        x3 = ASYMM_MULT(x2, x, size);                                                                                               \</span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(int, size)                                                                                                    \</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="preprocessor">        x4 = ASYMM_MULT(x2, x2, size);                                                                                              \</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(int, size)                                                                                                    \</span></div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="preprocessor">        x4_over_4 = ASYMM_ROUNDING_DIVIDE_BY_POW2(x4, 2, size);                                                                     \</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(int, size)                                                                                                    \</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="preprocessor">        x4_over_24_plus_x3_over_6_plus_x2 = ASYMM_MULT((x4_over_4 + x3), constant_1_over_3, size) + x2;                             \</span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(int, size)                                                                                                    \</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="preprocessor">        x4_over_24_plus_x3_over_6_plus_x2_over_2 = ASYMM_ROUNDING_DIVIDE_BY_POW2(x4_over_24_plus_x3_over_6_plus_x2, 1, size);       \</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="preprocessor">        return constant_term + ASYMM_MULT(constant_term, x + x4_over_24_plus_x3_over_6_plus_x2_over_2, size);                       \</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="preprocessor">    }</span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment">/** Each bit of the result is set to the corresponding bit of either then_val or</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="comment"> * else_val depending on whether the corresponding bit of if_mask is set.</span></div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="comment"> * Equivalent to the VBSL instruction in Arm® Neon™.</span></div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="comment"> * @param[in] size Size of vector.</span></div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="comment"> * @returns Result contaning bits from @p then_val or from @p else_val depending on corresponding bit in @p if_mask is set or not.</span></div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00201"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#ab0b4069b25ac886d5cb6eb3b76473f88">  201</a></span>&#160;<span class="preprocessor">#define ASYMM_SELECT_USING_MASK_IMPL(size)                                                                                                                                \</span></div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="preprocessor">    inline VEC_DATA_TYPE(int, size) asymm_select_using_mask##size(VEC_DATA_TYPE(int, size) if_mask, VEC_DATA_TYPE(int, size) then_val, VEC_DATA_TYPE(int, size) else_val) \</span></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="preprocessor">    {                                                                                                                                                                     \</span></div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="preprocessor">        return (if_mask &amp; then_val) ^ (~if_mask &amp; else_val);                                                                                                              \</span></div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="preprocessor">    }</span></div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="comment">/** For each element of input vector, the corresponding bits of the result item are set</span></div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="comment"> * if the input item is zero.</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="comment"> * @param[in] size Size of vector.</span></div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="comment"> * @returns Output vector with bits set when corresponding bit in @p a is zero.</span></div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00214"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a8c47a92ec76a1e367b45305c17d9ea88">  214</a></span>&#160;<span class="preprocessor">#define ASYMM_MASK_IF_ZERO_IMPL(size)                                                    \</span></div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="preprocessor">    inline VEC_DATA_TYPE(int, size) asymm_mask_if_zero##size(VEC_DATA_TYPE(int, size) a) \</span></div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="preprocessor">    {                                                                                    \</span></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="preprocessor">        const VEC_DATA_TYPE(int, size) all_zeros = 0;                                    \</span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="preprocessor">        const VEC_DATA_TYPE(int, size) all_ones  = ~0;                                   \</span></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="preprocessor">        return select(all_zeros, all_ones, (SELECT_VEC_DATA_TYPE(int, size))(a == 0));   \</span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="preprocessor">    }</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="comment">/** For each element of input vector, the corresponding bits of the result item are set</span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="comment"> * if the input item is non-zero.</span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="comment"> * @param[in] size Size of vector.</span></div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="comment"> * @returns Output vector with bits set when corresponding bit in @p a is non zero.</span></div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00229"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a6dd3d8d22942f0ff3e59b4e32cfd4de3">  229</a></span>&#160;<span class="preprocessor">#define ASYMM_MASK_IF_NON_ZERO_IMPL(size)                                                    \</span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="preprocessor">    inline VEC_DATA_TYPE(int, size) asymm_mask_if_non_zero##size(VEC_DATA_TYPE(int, size) a) \</span></div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="preprocessor">    {                                                                                        \</span></div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="preprocessor">        const VEC_DATA_TYPE(int, size) all_zeros = 0;                                        \</span></div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="preprocessor">        const VEC_DATA_TYPE(int, size) all_ones  = ~0;                                       \</span></div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="preprocessor">        return select(all_zeros, all_ones, (SELECT_VEC_DATA_TYPE(int, size))(a != 0));       \</span></div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="preprocessor">    }</span></div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160; </div>
<div class="line"><a name="l00237"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#aa12ca21cb9a54d2e4c26d57303fe44a7">  237</a></span>&#160;<span class="preprocessor">#define EXP_BARREL_SHIFTER_IMPL(size)                                                                                                                                                                         \</span></div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="preprocessor">    inline VEC_DATA_TYPE(int, size) exp_barrel_shifter##size(VEC_DATA_TYPE(int, size) result, int exponent, int fp_multiplier, int k_integer_bits, int k_fractional_bits, VEC_DATA_TYPE(int, size) remainder) \</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="preprocessor">    {                                                                                                                                                                                                         \</span></div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="preprocessor">        if(k_integer_bits &gt; exponent)                                                                                                                                                                         \</span></div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="preprocessor">        {                                                                                                                                                                                                     \</span></div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="preprocessor">            const int k_shift_amount = k_integer_bits &gt; exponent ? k_fractional_bits + exponent : 0;                                                                                                          \</span></div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="preprocessor">            return ASYMM_SELECT_USING_MASK(                                                                                                                                                                   \</span></div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="preprocessor">                    ASYMM_MASK_IF_NON_ZERO(remainder &amp; (1 &lt;&lt; k_shift_amount), size),                                                                                                                              \</span></div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="preprocessor">                    ASYMM_MULT(result, fp_multiplier, size), result, size);                                                                                                                                       \</span></div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="preprocessor">        }                                                                                                                                                                                                     \</span></div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="preprocessor">        \</span></div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="preprocessor">        return result;                                                                                                                                                                                        \</span></div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="preprocessor">    }</span></div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="comment">/** Calculates \f$ exp(x) \f$ for x &lt; 0.</span></div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="comment"> * @param[in] size Size of vector.</span></div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="comment"> * @return Result in fixed-point format Q0.</span></div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00257"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a4d0a02b30d8cc5725d0a11781b488852">  257</a></span>&#160;<span class="preprocessor">#define ASYMM_EXP_ON_NEGATIVE_VALUES_IMPL(size)                                                                               \</span></div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="preprocessor">    inline VEC_DATA_TYPE(int, size) asymm_exp_on_negative_values##size(VEC_DATA_TYPE(int, size) a, int k_integer_bits)        \</span></div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="preprocessor">    {                                                                                                                         \</span></div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="preprocessor">        const int k_fractional_bits = 31 - k_integer_bits;                                                                    \</span></div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(int, size)                                                                                              \</span></div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="preprocessor">        k_one_quarter = 1 &lt;&lt; (k_fractional_bits - 2);                                                                         \</span></div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(int, size)                                                                                              \</span></div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="preprocessor">        mask = k_one_quarter - 1;                                                                                             \</span></div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(int, size)                                                                                              \</span></div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="preprocessor">        a_mod_quarter_minus_one_quarter = (a &amp; mask) - k_one_quarter;                                                         \</span></div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(int, size)                                                                                              \</span></div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="preprocessor">        a_mod_quarter_minus_one_quarter_scaled = a_mod_quarter_minus_one_quarter &lt;&lt; k_integer_bits;                           \</span></div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(int, size)                                                                                              \</span></div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="preprocessor">        result = ASYMM_EXP_ON_INTERVAL_BETWEEN_NEGATIVE_ONE_QUARTER_AND_0_EXCL(a_mod_quarter_minus_one_quarter_scaled, size); \</span></div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(int, size)                                                                                              \</span></div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="preprocessor">        remainder = a_mod_quarter_minus_one_quarter - a;                                                                      \</span></div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="preprocessor">        \</span></div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="preprocessor">        result = EXP_BARREL_SHIFTER(result, -2, 1672461947, k_integer_bits, k_fractional_bits, remainder, size);              \</span></div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="preprocessor">        result = EXP_BARREL_SHIFTER(result, -1, 1302514674, k_integer_bits, k_fractional_bits, remainder, size);              \</span></div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="preprocessor">        result = EXP_BARREL_SHIFTER(result, +0, 790015084, k_integer_bits, k_fractional_bits, remainder, size);               \</span></div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="preprocessor">        result = EXP_BARREL_SHIFTER(result, +1, 290630308, k_integer_bits, k_fractional_bits, remainder, size);               \</span></div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="preprocessor">        result = EXP_BARREL_SHIFTER(result, +2, 39332535, k_integer_bits, k_fractional_bits, remainder, size);                \</span></div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="preprocessor">        result = EXP_BARREL_SHIFTER(result, +3, 720401, k_integer_bits, k_fractional_bits, remainder, size);                  \</span></div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="preprocessor">        result = EXP_BARREL_SHIFTER(result, +4, 242, k_integer_bits, k_fractional_bits, remainder, size);                     \</span></div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="preprocessor">        \</span></div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="preprocessor">        if(k_integer_bits &gt; 5)                                                                                                \</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="preprocessor">        {                                                                                                                     \</span></div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="preprocessor">            const VEC_DATA_TYPE(int, size) clamp = -(1 &lt;&lt; (k_fractional_bits + 5));                                           \</span></div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="preprocessor">            result = ASYMM_SELECT_USING_MASK(ASYMM_MASK_IF_NON_ZERO(a &lt; clamp, size), 0, result, size);                       \</span></div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="preprocessor">        }                                                                                                                     \</span></div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="preprocessor">        \</span></div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="preprocessor">        const VEC_DATA_TYPE(int, size) Q0_one = INT_MAX;                                                                      \</span></div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="preprocessor">        return ASYMM_SELECT_USING_MASK(ASYMM_MASK_IF_ZERO(a, size), Q0_one, result, size);                                    \</span></div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="preprocessor">    }</span></div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="comment">/** Calculates the product of a integer value by a power of two, with either a positive exponent</span></div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="comment"> * (equivalent to an arithmetic left shift, saturating) or a negative exponent</span></div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="comment"> * (equivalent to an arithmetic right shift, rounding to nearest).</span></div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;<span class="comment"> * @param[in] size Size of vector.</span></div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="comment"> * @return Arithmetic left or right shift.</span></div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00300"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a737312bc4a68c79a77cfab4849793bc0">  300</a></span>&#160;<span class="preprocessor">#define ASYMM_SATURATING_ROUNDING_MULT_BY_POW2_IMPL(size)                                                                  \</span></div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;<span class="preprocessor">    inline VEC_DATA_TYPE(int, size) asymm_saturating_rounding_mult_by_pow2##size(VEC_DATA_TYPE(int, size) x, int exponent) \</span></div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="preprocessor">    {                                                                                                                      \</span></div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="preprocessor">        if(exponent &lt; 0)                                                                                                   \</span></div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;<span class="preprocessor">        {                                                                                                                  \</span></div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="preprocessor">            return ASYMM_ROUNDING_DIVIDE_BY_POW2(x, -exponent, size);                                                      \</span></div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<span class="preprocessor">        }                                                                                                                  \</span></div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="preprocessor">        \</span></div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="preprocessor">        const VEC_DATA_TYPE(int, size) min = INT_MIN;                                                                      \</span></div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="preprocessor">        const VEC_DATA_TYPE(int, size) max = INT_MAX;                                                                      \</span></div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="preprocessor">        int threshold = ((1 &lt;&lt; (31 - exponent)) - 1);                                                                      \</span></div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(int, size)                                                                                           \</span></div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="preprocessor">        positive_mask = ASYMM_MASK_IF_NON_ZERO(x &gt; threshold, size);                                                       \</span></div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(int, size)                                                                                           \</span></div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="preprocessor">        negative_mask = ASYMM_MASK_IF_NON_ZERO(x &lt; -threshold, size);                                                      \</span></div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(int, size)                                                                                           \</span></div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="preprocessor">        result = x &lt;&lt; exponent;                                                                                            \</span></div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;<span class="preprocessor">        result = ASYMM_SELECT_USING_MASK(positive_mask, max, result, size);                                                \</span></div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;<span class="preprocessor">        result = ASYMM_SELECT_USING_MASK(negative_mask, min, result, size);                                                \</span></div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="preprocessor">        return result;                                                                                                     \</span></div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;<span class="preprocessor">    }</span></div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;<span class="comment">/** Calculates (a+b)/2, rounded to the nearest integer.</span></div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<span class="comment"> * Equivalent to VRHADD in the Arm Arm® Neon™ instruction set.</span></div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;<span class="comment"> * @param[in] size Size of vector.</span></div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;<span class="comment"> * @return (a+b)/2, rounded to the nearest integer.</span></div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00329"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a8d97c6698c0e44424deae3f3130c55ac">  329</a></span>&#160;<span class="preprocessor">#define ASYMM_ROUNDING_HALF_SUM_IMPL(size)                                                                                \</span></div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="preprocessor">    inline VEC_DATA_TYPE(int, size) asymm_rounding_half_sum##size(VEC_DATA_TYPE(int, size) a, VEC_DATA_TYPE(int, size) b) \</span></div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="preprocessor">    {                                                                                                                     \</span></div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(long, size)                                                                                         \</span></div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;<span class="preprocessor">        a64 = convert_long##size(a);                                                                                      \</span></div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(long, size)                                                                                         \</span></div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;<span class="preprocessor">        b64 = convert_long##size(b);                                                                                      \</span></div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(long, size)                                                                                         \</span></div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;<span class="preprocessor">        sum = a64 + b64;                                                                                                  \</span></div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;<span class="preprocessor">        const VEC_DATA_TYPE(long, size) one       = 1;                                                                    \</span></div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;<span class="preprocessor">        const VEC_DATA_TYPE(long, size) minus_one = -1;                                                                   \</span></div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(long, size)                                                                                         \</span></div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;<span class="preprocessor">        sign = select(minus_one, one, (SELECT_VEC_DATA_TYPE(long, size))(sum &gt;= 0));                                      \</span></div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;<span class="preprocessor">        return convert_int##size((sum + sign) / 2);                                                                       \</span></div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;<span class="preprocessor">    }</span></div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;<span class="comment">/** Calculates \f$ 1 / (1 + x) \f$ for x in (0, 1).</span></div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;<span class="comment"> * @param[in] size Size of vector.</span></div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;<span class="comment"> * @return Result in fixed-point format Q0.</span></div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00351"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a0e53aa5d4cbcec7a0c0085838f32453d">  351</a></span>&#160;<span class="preprocessor">#define ASYMM_ONE_OVER_ONE_PLUS_X_FOR_X_IN_0_1_IMPL(size)                                                    \</span></div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;<span class="preprocessor">    inline VEC_DATA_TYPE(int, size) asymm_one_over_one_plus_x_for_x_in_0_1##size(VEC_DATA_TYPE(int, size) a) \</span></div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;<span class="preprocessor">    {                                                                                                        \</span></div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;<span class="preprocessor">        const VEC_DATA_TYPE(int, size) Q0_one = INT_MAX;                                                     \</span></div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="preprocessor">        const VEC_DATA_TYPE(int, size) Q2_one = 1 &lt;&lt; (31 - 2);                                               \</span></div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(int, size)                                                                             \</span></div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;<span class="preprocessor">        half_denominator = ASYMM_ROUNDING_HALF_SUM(a, Q0_one, size);                                         \</span></div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;<span class="preprocessor">        const VEC_DATA_TYPE(int, size) Q2_48_over_17     = 1515870810;                                       \</span></div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;<span class="preprocessor">        const VEC_DATA_TYPE(int, size) Q2_neg_32_over_17 = -1010580540;                                      \</span></div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;<span class="preprocessor">        VEC_DATA_TYPE(int, size)                                                                             \</span></div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;<span class="preprocessor">        x = Q2_48_over_17 + ASYMM_MULT(half_denominator, Q2_neg_32_over_17, size);                           \</span></div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;<span class="preprocessor">        for(int i = 0; i &lt; 3; i++)                                                                           \</span></div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;<span class="preprocessor">        {                                                                                                    \</span></div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;<span class="preprocessor">            VEC_DATA_TYPE(int, size)                                                                         \</span></div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;<span class="preprocessor">            half_denominator_times_x = ASYMM_MULT(half_denominator, x, size);                                \</span></div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;<span class="preprocessor">            VEC_DATA_TYPE(int, size)                                                                         \</span></div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;<span class="preprocessor">            one_minus_half_denominator_times_x = Q2_one - half_denominator_times_x;                          \</span></div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;<span class="preprocessor">            VEC_DATA_TYPE(int, size)                                                                         \</span></div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;<span class="preprocessor">            tmp = ASYMM_MULT(x, one_minus_half_denominator_times_x, size);                                   \</span></div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;<span class="preprocessor">            x   = x + ASYMM_SATURATING_ROUNDING_MULT_BY_POW2(tmp, 2, size);                                  \</span></div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;<span class="preprocessor">        }                                                                                                    \</span></div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;<span class="preprocessor">        return ASYMM_SATURATING_ROUNDING_MULT_BY_POW2(x, 1, size);                                           \</span></div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;<span class="preprocessor">    }</span></div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;<span class="comment">/** Considering the integer value as fixed-point, change the number of integer bits and update value accordingly.</span></div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;<span class="comment"> * @param[in] size Size of vector.</span></div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;<span class="comment"> * @return Rescaled value.</span></div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00381"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#aace85e2a32bacdaa4e2d2055deabfc57">  381</a></span>&#160;<span class="preprocessor">#define ASYMM_RESCALE_IMPL(size)                                                                                                    \</span></div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;<span class="preprocessor">    inline VEC_DATA_TYPE(int, size) asymm_rescale##size(VEC_DATA_TYPE(int, size) value, int src_integer_bits, int dst_integer_bits) \</span></div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;<span class="preprocessor">    {                                                                                                                               \</span></div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;<span class="preprocessor">        int exponent = src_integer_bits - dst_integer_bits;                                                                         \</span></div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;<span class="preprocessor">        return ASYMM_SATURATING_ROUNDING_MULT_BY_POW2(value, exponent, size);                                                       \</span></div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;<span class="preprocessor">    }</span></div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160; </div>
<div class="line"><a name="l00388"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a7fd28520161d368b45c31098ad948d32">  388</a></span>&#160;<span class="preprocessor">#define QUANTIZE_STR(input, offset, scale, type, size) quantize_##type##size(input, offset, scale)</span></div>
<div class="line"><a name="l00389"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a85ca50207e80cca8c76b5d3da85e4a9f">  389</a></span>&#160;<span class="preprocessor">#define QUANTIZE(input, offset, scale, type, size) QUANTIZE_STR(input, offset, scale, type, size)</span></div>
<div class="line"><a name="l00390"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#ab98579b6a5e03ada17294034cbe4aa02">  390</a></span>&#160;<span class="preprocessor">#define DEQUANTIZE_STR(input, offset, scale, type, size) dequantize_##type##size(input, offset, scale)</span></div>
<div class="line"><a name="l00391"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a4f0a8fe9e57d31f7ca26a697ca140029">  391</a></span>&#160;<span class="preprocessor">#define DEQUANTIZE(input, offset, scale, type, size) DEQUANTIZE_STR(input, offset, scale, type, size)</span></div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160; </div>
<div class="line"><a name="l00393"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#afd02935f162f894ccda0a5e08360bd92">  393</a></span>&#160;<span class="preprocessor">#define ASYMM_ROUNDING_DIVIDE_BY_POW2_STR(x, exponent, size) asymm_rounding_divide_by_POW2_##size(x, exponent)</span></div>
<div class="line"><a name="l00394"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#aa43fc359dea64362f3016384f4269845">  394</a></span>&#160;<span class="preprocessor">#define ASYMM_ROUNDING_DIVIDE_BY_POW2(x, exponent, size) ASYMM_ROUNDING_DIVIDE_BY_POW2_STR(x, exponent, size)</span></div>
<div class="line"><a name="l00395"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#af0bbd28ab7293f7876297753f03c47ca">  395</a></span>&#160;<span class="preprocessor">#define ASYMM_MULT_STR(a, b, size) asymm_mult##size(a, b)</span></div>
<div class="line"><a name="l00396"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a5483aefd5e07244661178bfd3f434448">  396</a></span>&#160;<span class="preprocessor">#define ASYMM_MULT(a, b, size) ASYMM_MULT_STR(a, b, size)</span></div>
<div class="line"><a name="l00397"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#aa1e2d1a27e885c3840b9258f5416078d">  397</a></span>&#160;<span class="preprocessor">#define ASYMM_MULT_BY_QUANT_MULTIPLIER_GREATER_THAN_ONE(x, quantized_multiplier, left_shift, size) \</span></div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;<span class="preprocessor">    ASYMM_MULT(x *((VEC_DATA_TYPE(int, size))(1) &lt;&lt; (-left_shift)), quantized_multiplier, size)</span></div>
<div class="line"><a name="l00399"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a86de0ffca367bfcf27a8ae5dd1fdef2d">  399</a></span>&#160;<span class="preprocessor">#define ASYMM_MULT_BY_QUANT_MULTIPLIER_LESS_THAN_ONE(x, quantized_multiplier, right_shift, size) \</span></div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;<span class="preprocessor">    ASYMM_ROUNDING_DIVIDE_BY_POW2(ASYMM_MULT(x, quantized_multiplier, size), right_shift, size)</span></div>
<div class="line"><a name="l00401"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#aeebdcd88f4320931cd4a599ad1527e83">  401</a></span>&#160;<span class="preprocessor">#define ASYMM_EXP_ON_INTERVAL_BETWEEN_NEGATIVE_ONE_QUARTER_AND_0_EXCL(a, size) asymm_exp_on_interval_between_negative_one_quarter_and_0_excl##size(a)</span></div>
<div class="line"><a name="l00402"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a9bc08a8c1833c5e6055ad6665e3ccf12">  402</a></span>&#160;<span class="preprocessor">#define ASYMM_SELECT_USING_MASK(if_mask, then_val, else_val, size) asymm_select_using_mask##size(if_mask, then_val, else_val)</span></div>
<div class="line"><a name="l00403"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#afc6a76528024472919bb5d50d067578b">  403</a></span>&#160;<span class="preprocessor">#define ASYMM_MASK_IF_ZERO(a, size) asymm_mask_if_zero##size(a)</span></div>
<div class="line"><a name="l00404"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#af1d5450c9c4c13a6b7aa52af197b54b2">  404</a></span>&#160;<span class="preprocessor">#define ASYMM_MASK_IF_NON_ZERO(a, size) asymm_mask_if_non_zero##size(a)</span></div>
<div class="line"><a name="l00405"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#ace9ecff421cf885ad2c2d72d87c492cb">  405</a></span>&#160;<span class="preprocessor">#define EXP_BARREL_SHIFTER(result, exponent, fp_multiplier, k_integer_bits, k_fractional_bits, remainder, size) exp_barrel_shifter##size(result, exponent, fp_multiplier, k_integer_bits, k_fractional_bits, remainder)</span></div>
<div class="line"><a name="l00406"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a9c5f09365bed5f847329301cd7d3f6b2">  406</a></span>&#160;<span class="preprocessor">#define ASYMM_EXP_ON_NEGATIVE_VALUES_STR(a, k_integer_bits, size) asymm_exp_on_negative_values##size(a, k_integer_bits)</span></div>
<div class="line"><a name="l00407"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a3a4f1b5d8f1cd67ac31bc62c9a6f4aa8">  407</a></span>&#160;<span class="preprocessor">#define ASYMM_EXP_ON_NEGATIVE_VALUES(a, k_integer_bits, size) ASYMM_EXP_ON_NEGATIVE_VALUES_STR(a, k_integer_bits, size)</span></div>
<div class="line"><a name="l00408"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a5c2adf93c82648a1bec7db33c697a655">  408</a></span>&#160;<span class="preprocessor">#define ASYMM_ONE_OVER_ONE_PLUS_X_FOR_X_IN_0_1_STR(a, size) asymm_one_over_one_plus_x_for_x_in_0_1##size(a)</span></div>
<div class="line"><a name="l00409"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#ae77f34e1316d52c1ee84c35be9efb0d8">  409</a></span>&#160;<span class="preprocessor">#define ASYMM_ONE_OVER_ONE_PLUS_X_FOR_X_IN_0_1(a, size) ASYMM_ONE_OVER_ONE_PLUS_X_FOR_X_IN_0_1_STR(a, size)</span></div>
<div class="line"><a name="l00410"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a4cc3ff3a2eeb5f5e9d6743e08f632928">  410</a></span>&#160;<span class="preprocessor">#define ASYMM_SATURATING_ROUNDING_MULT_BY_POW2(x, exponent, size) asymm_saturating_rounding_mult_by_pow2##size(x, exponent)</span></div>
<div class="line"><a name="l00411"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#ad47fa44c1566aa4678fe524478490612">  411</a></span>&#160;<span class="preprocessor">#define ASYMM_ROUNDING_HALF_SUM(a, b, size) asymm_rounding_half_sum##size(a, b)</span></div>
<div class="line"><a name="l00412"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a5cf5ca66dbccd421f24a088f6c0ecb94">  412</a></span>&#160;<span class="preprocessor">#define ASYMM_RESCALE_STR(value, src_integer_bits, dst_integer_bits, size) asymm_rescale##size(value, src_integer_bits, dst_integer_bits)</span></div>
<div class="line"><a name="l00413"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a98585f1bb84dea90aecbf59785c46151">  413</a></span>&#160;<span class="preprocessor">#define ASYMM_RESCALE(value, src_integer_bits, dst_integer_bits, size) ASYMM_RESCALE_STR(value, src_integer_bits, dst_integer_bits, size)</span></div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160; </div>
<div class="line"><a name="l00415"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a97dbfbc016c553b482f2664f2a5ded30">  415</a></span>&#160;<span class="preprocessor">#define MULTIPLY_BY_QUANTIZED_MULTIPLIER_IMPL(size)                                                                             \</span></div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;<span class="preprocessor">    inline VEC_DATA_TYPE(int, size) multiply_by_quantized_multiplier##size(VEC_DATA_TYPE(int, size) input, int qmul, int shift) \</span></div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;<span class="preprocessor">    {                                                                                                                           \</span></div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;<span class="preprocessor">        const int left_shift  = shift &gt; 0 ? shift : 0;                                                                          \</span></div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;<span class="preprocessor">        const int right_shift = shift &gt; 0 ? 0 : -shift;                                                                         \</span></div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;<span class="preprocessor">        return ASYMM_ROUNDING_DIVIDE_BY_POW2(ASYMM_MULT(input * (1 &lt;&lt; left_shift), qmul, size), right_shift, size);             \</span></div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;<span class="preprocessor">    }</span></div>
<div class="line"><a name="l00422"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#ac05728fbe1ea6dbeebbd1b8e87a78b02">  422</a></span>&#160;<span class="preprocessor">#define MULTIPLY_BY_QUANTIZED_MULTIPLIER(input, qmul, shift, size) multiply_by_quantized_multiplier##size(input, qmul, shift)</span></div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160; </div>
<div class="line"><a name="l00424"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#afdcd79880ad2122f402e423db5cbfc12">  424</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a1cb86b1d0c99a1e72dacda1bc615baf6">QUANTIZE_IMPL</a>(uchar, 1)</div>
<div class="line"><a name="l00425"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a580997664d0abbd5218bb945693d2bc8">  425</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a1cb86b1d0c99a1e72dacda1bc615baf6">QUANTIZE_IMPL</a>(<span class="keywordtype">char</span>, 1)</div>
<div class="line"><a name="l00426"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a99762c72030fc4c734ae3aa2d35ce166">  426</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a1cb86b1d0c99a1e72dacda1bc615baf6">QUANTIZE_IMPL</a>(uint, 1)</div>
<div class="line"><a name="l00427"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a3c770e1d8aa92b0e657ec0991c9aae88">  427</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a1cb86b1d0c99a1e72dacda1bc615baf6">QUANTIZE_IMPL</a>(<span class="keywordtype">int</span>, 1)</div>
<div class="line"><a name="l00428"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a50393c11510e8c8011459f5277885b46">  428</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a1cb86b1d0c99a1e72dacda1bc615baf6">QUANTIZE_IMPL</a>(uchar, 2)</div>
<div class="line"><a name="l00429"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a949db1bf299d76ad283da1c6f4352a94">  429</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a1cb86b1d0c99a1e72dacda1bc615baf6">QUANTIZE_IMPL</a>(<span class="keywordtype">char</span>, 2)</div>
<div class="line"><a name="l00430"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a8aa97db7d9ff336f486601ed8e616ca6">  430</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a1cb86b1d0c99a1e72dacda1bc615baf6">QUANTIZE_IMPL</a>(uint, 2)</div>
<div class="line"><a name="l00431"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#abd9a394bb20167fd91da87945931e5ef">  431</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a1cb86b1d0c99a1e72dacda1bc615baf6">QUANTIZE_IMPL</a>(<span class="keywordtype">int</span>, 2)</div>
<div class="line"><a name="l00432"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a4923d0f9e66e791299a9e7f384121136">  432</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a1cb86b1d0c99a1e72dacda1bc615baf6">QUANTIZE_IMPL</a>(uchar, 3)</div>
<div class="line"><a name="l00433"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#abc257d7d79970badb5c8696ae076889c">  433</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a1cb86b1d0c99a1e72dacda1bc615baf6">QUANTIZE_IMPL</a>(<span class="keywordtype">char</span>, 3)</div>
<div class="line"><a name="l00434"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a583dd402ef0e80531aebd0392295af44">  434</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a1cb86b1d0c99a1e72dacda1bc615baf6">QUANTIZE_IMPL</a>(uint, 3)</div>
<div class="line"><a name="l00435"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#af7fd54013158e9f26afc399cb82b5c9c">  435</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a1cb86b1d0c99a1e72dacda1bc615baf6">QUANTIZE_IMPL</a>(<span class="keywordtype">int</span>, 3)</div>
<div class="line"><a name="l00436"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#ada9b2f95d7b2bb6add361832cc0251df">  436</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a1cb86b1d0c99a1e72dacda1bc615baf6">QUANTIZE_IMPL</a>(uchar, 4)</div>
<div class="line"><a name="l00437"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a933a58d69e18da275156602365d37fc9">  437</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a1cb86b1d0c99a1e72dacda1bc615baf6">QUANTIZE_IMPL</a>(ushort, 4)</div>
<div class="line"><a name="l00438"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#af3c37581d89f0873428d938792254e30">  438</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a1cb86b1d0c99a1e72dacda1bc615baf6">QUANTIZE_IMPL</a>(<span class="keywordtype">short</span>, 4)</div>
<div class="line"><a name="l00439"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#aeb2c37b0817370ae876dadfa40fd69d7">  439</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a1cb86b1d0c99a1e72dacda1bc615baf6">QUANTIZE_IMPL</a>(<span class="keywordtype">int</span>, 4)</div>
<div class="line"><a name="l00440"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a53dde4d868b0a01716ea9c34521a67b6">  440</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a1cb86b1d0c99a1e72dacda1bc615baf6">QUANTIZE_IMPL</a>(uchar, 8)</div>
<div class="line"><a name="l00441"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a26f88a4e97e1f4d3e25a716fc1d729b0">  441</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a1cb86b1d0c99a1e72dacda1bc615baf6">QUANTIZE_IMPL</a>(<span class="keywordtype">char</span>, 8)</div>
<div class="line"><a name="l00442"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#addb7cfab8bec6f3da76b337661c00d00">  442</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a1cb86b1d0c99a1e72dacda1bc615baf6">QUANTIZE_IMPL</a>(uint, 8)</div>
<div class="line"><a name="l00443"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a915b07abd323e7816caba642f4734ee3">  443</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a1cb86b1d0c99a1e72dacda1bc615baf6">QUANTIZE_IMPL</a>(<span class="keywordtype">int</span>, 8)</div>
<div class="line"><a name="l00444"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a23634278911241d201636e02e64a2523">  444</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a1cb86b1d0c99a1e72dacda1bc615baf6">QUANTIZE_IMPL</a>(uchar, 16)</div>
<div class="line"><a name="l00445"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a0950af41907c8d7c7b8f39fdf12145e1">  445</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a1cb86b1d0c99a1e72dacda1bc615baf6">QUANTIZE_IMPL</a>(<span class="keywordtype">char</span>, 16)</div>
<div class="line"><a name="l00446"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a869021a7dfce258c22cfc5a74ab402de">  446</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a1cb86b1d0c99a1e72dacda1bc615baf6">QUANTIZE_IMPL</a>(ushort, 16)</div>
<div class="line"><a name="l00447"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#ad5ecf32f039d9becada79ec71d0fe49b">  447</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a1cb86b1d0c99a1e72dacda1bc615baf6">QUANTIZE_IMPL</a>(<span class="keywordtype">short</span>, 16)</div>
<div class="line"><a name="l00448"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a52149e12d683650129212d59169d05a4">  448</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a1cb86b1d0c99a1e72dacda1bc615baf6">QUANTIZE_IMPL</a>(uint, 16)</div>
<div class="line"><a name="l00449"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#af01ebd15f22ff00d7f901ae3ceac0919">  449</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a1cb86b1d0c99a1e72dacda1bc615baf6">QUANTIZE_IMPL</a>(<span class="keywordtype">int</span>, 16)</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160; </div>
<div class="line"><a name="l00451"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a3bb6724728c01a91aa349dba2a4edcc1">  451</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#ac5fe0200eafe2b88af574a2ed34c3c11">DEQUANTIZE_IMPL</a>(uchar, 1)</div>
<div class="line"><a name="l00452"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#aaeaa2ffe6aff77e6cc0289406678b3d1">  452</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#ac5fe0200eafe2b88af574a2ed34c3c11">DEQUANTIZE_IMPL</a>(<span class="keywordtype">char</span>, 1)</div>
<div class="line"><a name="l00453"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#ac870997ee5c5ea925bbe14f8b966f02e">  453</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#ac5fe0200eafe2b88af574a2ed34c3c11">DEQUANTIZE_IMPL</a>(uint, 1)</div>
<div class="line"><a name="l00454"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a186295336a93a0072b3f72d89a74b5c8">  454</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#ac5fe0200eafe2b88af574a2ed34c3c11">DEQUANTIZE_IMPL</a>(<span class="keywordtype">int</span>, 1)</div>
<div class="line"><a name="l00455"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#acce07bf2841793d71e74657df87a418a">  455</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#ac5fe0200eafe2b88af574a2ed34c3c11">DEQUANTIZE_IMPL</a>(uchar, 2)</div>
<div class="line"><a name="l00456"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a44a0c2b34191ade216dd1376a1318eb1">  456</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#ac5fe0200eafe2b88af574a2ed34c3c11">DEQUANTIZE_IMPL</a>(<span class="keywordtype">char</span>, 2)</div>
<div class="line"><a name="l00457"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#aa60dc85c32e8f71828c64ecd233e2269">  457</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#ac5fe0200eafe2b88af574a2ed34c3c11">DEQUANTIZE_IMPL</a>(uint, 2)</div>
<div class="line"><a name="l00458"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a2e92f04116fe7be2c98f8c7dc6ea89b5">  458</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#ac5fe0200eafe2b88af574a2ed34c3c11">DEQUANTIZE_IMPL</a>(<span class="keywordtype">int</span>, 2)</div>
<div class="line"><a name="l00459"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a7e7ce9131ab54368aa14e70813cead1c">  459</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#ac5fe0200eafe2b88af574a2ed34c3c11">DEQUANTIZE_IMPL</a>(uchar, 3)</div>
<div class="line"><a name="l00460"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a3160a3a4ac94471aa60881e9995c8c34">  460</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#ac5fe0200eafe2b88af574a2ed34c3c11">DEQUANTIZE_IMPL</a>(<span class="keywordtype">char</span>, 3)</div>
<div class="line"><a name="l00461"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#af46e3d25eb3d13dcb87093cc049aa0cc">  461</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#ac5fe0200eafe2b88af574a2ed34c3c11">DEQUANTIZE_IMPL</a>(uint, 3)</div>
<div class="line"><a name="l00462"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a2bb5e2295b26974d3120c9fa88d3a4f1">  462</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#ac5fe0200eafe2b88af574a2ed34c3c11">DEQUANTIZE_IMPL</a>(<span class="keywordtype">int</span>, 3)</div>
<div class="line"><a name="l00463"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a951a47a7d1115404d183490f2aa11e40">  463</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#ac5fe0200eafe2b88af574a2ed34c3c11">DEQUANTIZE_IMPL</a>(uchar, 4)</div>
<div class="line"><a name="l00464"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a5cdb515b62ef19a88f83d779240a02f4">  464</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#ac5fe0200eafe2b88af574a2ed34c3c11">DEQUANTIZE_IMPL</a>(ushort, 4)</div>
<div class="line"><a name="l00465"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a2b106b11a5f1e2e5b6a70e0afe1d9e5a">  465</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#ac5fe0200eafe2b88af574a2ed34c3c11">DEQUANTIZE_IMPL</a>(<span class="keywordtype">short</span>, 4)</div>
<div class="line"><a name="l00466"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a7ff63345b4d9b8872dcebf3fd5d06158">  466</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#ac5fe0200eafe2b88af574a2ed34c3c11">DEQUANTIZE_IMPL</a>(<span class="keywordtype">int</span>, 4)</div>
<div class="line"><a name="l00467"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#af03067d79429a153b2651387e2416d30">  467</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#ac5fe0200eafe2b88af574a2ed34c3c11">DEQUANTIZE_IMPL</a>(uchar, 8)</div>
<div class="line"><a name="l00468"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#ae5fc448fec0356907da502a57fdafeb5">  468</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#ac5fe0200eafe2b88af574a2ed34c3c11">DEQUANTIZE_IMPL</a>(<span class="keywordtype">char</span>, 8)</div>
<div class="line"><a name="l00469"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a5a60fc65c9fa9eee2061799fd004a001">  469</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#ac5fe0200eafe2b88af574a2ed34c3c11">DEQUANTIZE_IMPL</a>(uint, 8)</div>
<div class="line"><a name="l00470"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a3ab069e0d0324f7bfe4525a8e62ddeaf">  470</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#ac5fe0200eafe2b88af574a2ed34c3c11">DEQUANTIZE_IMPL</a>(<span class="keywordtype">int</span>, 8)</div>
<div class="line"><a name="l00471"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a2d9cac9c87356624d52b00c2e6950ec9">  471</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#ac5fe0200eafe2b88af574a2ed34c3c11">DEQUANTIZE_IMPL</a>(uchar, 16)</div>
<div class="line"><a name="l00472"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a52ea79d99e2dc0bf986efc815842847c">  472</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#ac5fe0200eafe2b88af574a2ed34c3c11">DEQUANTIZE_IMPL</a>(<span class="keywordtype">char</span>, 16)</div>
<div class="line"><a name="l00473"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#ad554c256832e2b36d187912753c83b14">  473</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#ac5fe0200eafe2b88af574a2ed34c3c11">DEQUANTIZE_IMPL</a>(ushort, 16)</div>
<div class="line"><a name="l00474"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#ab4cd9c562aa288b7c2b54c22a60fba04">  474</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#ac5fe0200eafe2b88af574a2ed34c3c11">DEQUANTIZE_IMPL</a>(<span class="keywordtype">short</span>, 16)</div>
<div class="line"><a name="l00475"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#ac4b7d00ffe62fa241cd5c3519467e6ac">  475</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#ac5fe0200eafe2b88af574a2ed34c3c11">DEQUANTIZE_IMPL</a>(uint, 16)</div>
<div class="line"><a name="l00476"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a103447344df3d2d2cfffc8ab997b6bcd">  476</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#ac5fe0200eafe2b88af574a2ed34c3c11">DEQUANTIZE_IMPL</a>(<span class="keywordtype">int</span>, 16)</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160; </div>
<div class="line"><a name="l00478"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a21fd1042730ff651260bae439eb97558">  478</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#abf75e242631b23007e4046682aa57ec5">ASYMM_ROUNDING_DIVIDE_BY_POW2_IMPL</a>(1)</div>
<div class="line"><a name="l00479"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a620769aade9c396496a0595e9a07524e">  479</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#abf75e242631b23007e4046682aa57ec5">ASYMM_ROUNDING_DIVIDE_BY_POW2_IMPL</a>(2)</div>
<div class="line"><a name="l00480"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a86bf626d08d3a8a8f862fb851f0f7900">  480</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#abf75e242631b23007e4046682aa57ec5">ASYMM_ROUNDING_DIVIDE_BY_POW2_IMPL</a>(3)</div>
<div class="line"><a name="l00481"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#ab3f78bef590ddd8eadba672fa4732d04">  481</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#abf75e242631b23007e4046682aa57ec5">ASYMM_ROUNDING_DIVIDE_BY_POW2_IMPL</a>(4)</div>
<div class="line"><a name="l00482"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a79679137a80f79e1d2a1b67e1d9e4539">  482</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#abf75e242631b23007e4046682aa57ec5">ASYMM_ROUNDING_DIVIDE_BY_POW2_IMPL</a>(8)</div>
<div class="line"><a name="l00483"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a8921c2f26219f4048a30419c2790b8b2">  483</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#abf75e242631b23007e4046682aa57ec5">ASYMM_ROUNDING_DIVIDE_BY_POW2_IMPL</a>(16)</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160; </div>
<div class="line"><a name="l00485"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#adb614a812ec23eca93e74b875cce2c58">  485</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#ad4b199221927cbabbf859e4d2efb688d">ASYMM_MULT_IMPL</a>(1)</div>
<div class="line"><a name="l00486"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#aa499ebeb3e87022acdb3b0e0aa61ac79">  486</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#ad4b199221927cbabbf859e4d2efb688d">ASYMM_MULT_IMPL</a>(2)</div>
<div class="line"><a name="l00487"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a0a86443a04cca198bd87c97ae298410a">  487</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#ad4b199221927cbabbf859e4d2efb688d">ASYMM_MULT_IMPL</a>(3)</div>
<div class="line"><a name="l00488"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a1e19ae859b6afe53373f7eb04996b615">  488</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#ad4b199221927cbabbf859e4d2efb688d">ASYMM_MULT_IMPL</a>(4)</div>
<div class="line"><a name="l00489"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a3b58fd6632d6cc93a85da22e37d1e656">  489</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#ad4b199221927cbabbf859e4d2efb688d">ASYMM_MULT_IMPL</a>(8)</div>
<div class="line"><a name="l00490"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#ad08c92c9b2e0c2451b2bbc99ffbb3a4a">  490</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#ad4b199221927cbabbf859e4d2efb688d">ASYMM_MULT_IMPL</a>(16)</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160; </div>
<div class="line"><a name="l00492"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#ac2e845a0bc974932ab0c7b003c780728">  492</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a3d8a3968a069eb8abbc28d31c20f6b8c">ASYMM_EXP_ON_INTERVAL_BETWEEN_NEGATIVE_ONE_QUARTER_AND_0_EXCL_IMPL</a>(1)</div>
<div class="line"><a name="l00493"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a8e5a4b64bb9c2e919e7c20f6e9c5a1af">  493</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a3d8a3968a069eb8abbc28d31c20f6b8c">ASYMM_EXP_ON_INTERVAL_BETWEEN_NEGATIVE_ONE_QUARTER_AND_0_EXCL_IMPL</a>(2)</div>
<div class="line"><a name="l00494"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a8f54650977e36985503000d402f8be01">  494</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a3d8a3968a069eb8abbc28d31c20f6b8c">ASYMM_EXP_ON_INTERVAL_BETWEEN_NEGATIVE_ONE_QUARTER_AND_0_EXCL_IMPL</a>(3)</div>
<div class="line"><a name="l00495"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#aba06e959f634ff983e3a5b721bd2d837">  495</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a3d8a3968a069eb8abbc28d31c20f6b8c">ASYMM_EXP_ON_INTERVAL_BETWEEN_NEGATIVE_ONE_QUARTER_AND_0_EXCL_IMPL</a>(4)</div>
<div class="line"><a name="l00496"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a601c603346ccf819cd20df49e77ef243">  496</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a3d8a3968a069eb8abbc28d31c20f6b8c">ASYMM_EXP_ON_INTERVAL_BETWEEN_NEGATIVE_ONE_QUARTER_AND_0_EXCL_IMPL</a>(8)</div>
<div class="line"><a name="l00497"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#add89563738681764c87019f100fbd9c5">  497</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a3d8a3968a069eb8abbc28d31c20f6b8c">ASYMM_EXP_ON_INTERVAL_BETWEEN_NEGATIVE_ONE_QUARTER_AND_0_EXCL_IMPL</a>(16)</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160; </div>
<div class="line"><a name="l00499"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a5a9b7a43a8dad49e3a6d3d34e6e9f880">  499</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#ab0b4069b25ac886d5cb6eb3b76473f88">ASYMM_SELECT_USING_MASK_IMPL</a>(1)</div>
<div class="line"><a name="l00500"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a3d0ba31dce9ce13c132dc15a15a39c74">  500</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#ab0b4069b25ac886d5cb6eb3b76473f88">ASYMM_SELECT_USING_MASK_IMPL</a>(2)</div>
<div class="line"><a name="l00501"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a10c4c99d0de5ca3139de234ac135f58e">  501</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#ab0b4069b25ac886d5cb6eb3b76473f88">ASYMM_SELECT_USING_MASK_IMPL</a>(3)</div>
<div class="line"><a name="l00502"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#abd7e623dfc89e625ee4036a7f0d3788b">  502</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#ab0b4069b25ac886d5cb6eb3b76473f88">ASYMM_SELECT_USING_MASK_IMPL</a>(4)</div>
<div class="line"><a name="l00503"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#aa4ec53edf7563203b5246cad41987ad8">  503</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#ab0b4069b25ac886d5cb6eb3b76473f88">ASYMM_SELECT_USING_MASK_IMPL</a>(8)</div>
<div class="line"><a name="l00504"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a771a20ceedffb0ab4725807a9ce697e0">  504</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#ab0b4069b25ac886d5cb6eb3b76473f88">ASYMM_SELECT_USING_MASK_IMPL</a>(16)</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160; </div>
<div class="line"><a name="l00506"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a3f42e30874c2449321fd31966607b385">  506</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a8c47a92ec76a1e367b45305c17d9ea88">ASYMM_MASK_IF_ZERO_IMPL</a>(1)</div>
<div class="line"><a name="l00507"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a0e1ed267a7084c191a04ff50f6d4f9d4">  507</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a8c47a92ec76a1e367b45305c17d9ea88">ASYMM_MASK_IF_ZERO_IMPL</a>(2)</div>
<div class="line"><a name="l00508"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a3d09bfcb702f3f8924de8af0979b0579">  508</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a8c47a92ec76a1e367b45305c17d9ea88">ASYMM_MASK_IF_ZERO_IMPL</a>(3)</div>
<div class="line"><a name="l00509"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#ae7fd0e552e1063db3322645b634db292">  509</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a8c47a92ec76a1e367b45305c17d9ea88">ASYMM_MASK_IF_ZERO_IMPL</a>(4)</div>
<div class="line"><a name="l00510"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a39004fbc16e9e28de8eaf814f75e4d4d">  510</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a8c47a92ec76a1e367b45305c17d9ea88">ASYMM_MASK_IF_ZERO_IMPL</a>(8)</div>
<div class="line"><a name="l00511"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#abb81a6005434800c4311fcdf08544a03">  511</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a8c47a92ec76a1e367b45305c17d9ea88">ASYMM_MASK_IF_ZERO_IMPL</a>(16)</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160; </div>
<div class="line"><a name="l00513"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a510581ecad852435265b819abf920ab4">  513</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a6dd3d8d22942f0ff3e59b4e32cfd4de3">ASYMM_MASK_IF_NON_ZERO_IMPL</a>(1)</div>
<div class="line"><a name="l00514"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a88be870e60760974be3d9d3f0f650d9c">  514</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a6dd3d8d22942f0ff3e59b4e32cfd4de3">ASYMM_MASK_IF_NON_ZERO_IMPL</a>(2)</div>
<div class="line"><a name="l00515"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#ad1b09e383226b8a6559f2458d6ab67b9">  515</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a6dd3d8d22942f0ff3e59b4e32cfd4de3">ASYMM_MASK_IF_NON_ZERO_IMPL</a>(3)</div>
<div class="line"><a name="l00516"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a1c26ce964f57272a8325353dde53fd05">  516</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a6dd3d8d22942f0ff3e59b4e32cfd4de3">ASYMM_MASK_IF_NON_ZERO_IMPL</a>(4)</div>
<div class="line"><a name="l00517"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a34484f8d80b44c0d182c6cd5e034c9ed">  517</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a6dd3d8d22942f0ff3e59b4e32cfd4de3">ASYMM_MASK_IF_NON_ZERO_IMPL</a>(8)</div>
<div class="line"><a name="l00518"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a75d1f11c0ed420eccc5d25f6e9fe08d8">  518</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a6dd3d8d22942f0ff3e59b4e32cfd4de3">ASYMM_MASK_IF_NON_ZERO_IMPL</a>(16)</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160; </div>
<div class="line"><a name="l00520"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#ad8a98454c07705b70ab5a72fdb67be1a">  520</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#aa12ca21cb9a54d2e4c26d57303fe44a7">EXP_BARREL_SHIFTER_IMPL</a>(1)</div>
<div class="line"><a name="l00521"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#af920a58718c716d03122959d7960a39b">  521</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#aa12ca21cb9a54d2e4c26d57303fe44a7">EXP_BARREL_SHIFTER_IMPL</a>(2)</div>
<div class="line"><a name="l00522"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a00861e6bb9f33617fbe5fac89a0940ce">  522</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#aa12ca21cb9a54d2e4c26d57303fe44a7">EXP_BARREL_SHIFTER_IMPL</a>(3)</div>
<div class="line"><a name="l00523"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a37da9d5b611d1f8b2feaeff8b06b04fc">  523</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#aa12ca21cb9a54d2e4c26d57303fe44a7">EXP_BARREL_SHIFTER_IMPL</a>(4)</div>
<div class="line"><a name="l00524"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a700032b1d8d50575b3607ef833a14a03">  524</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#aa12ca21cb9a54d2e4c26d57303fe44a7">EXP_BARREL_SHIFTER_IMPL</a>(8)</div>
<div class="line"><a name="l00525"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#ab5ab878afa98ec0a98a03f520cdab1ab">  525</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#aa12ca21cb9a54d2e4c26d57303fe44a7">EXP_BARREL_SHIFTER_IMPL</a>(16)</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160; </div>
<div class="line"><a name="l00527"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a794c45565374aefd1ed8efca90a0a534">  527</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a4d0a02b30d8cc5725d0a11781b488852">ASYMM_EXP_ON_NEGATIVE_VALUES_IMPL</a>(1)</div>
<div class="line"><a name="l00528"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#afd8b2105ccc8a6aba743611bd2909a94">  528</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a4d0a02b30d8cc5725d0a11781b488852">ASYMM_EXP_ON_NEGATIVE_VALUES_IMPL</a>(2)</div>
<div class="line"><a name="l00529"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a575aec56f25f8a6634fc3ed5c677d8a7">  529</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a4d0a02b30d8cc5725d0a11781b488852">ASYMM_EXP_ON_NEGATIVE_VALUES_IMPL</a>(3)</div>
<div class="line"><a name="l00530"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#ad717972eb40e2ca8cfc179217edf4d4a">  530</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a4d0a02b30d8cc5725d0a11781b488852">ASYMM_EXP_ON_NEGATIVE_VALUES_IMPL</a>(4)</div>
<div class="line"><a name="l00531"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a8639e498196eccfb2585ae021dcb4094">  531</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a4d0a02b30d8cc5725d0a11781b488852">ASYMM_EXP_ON_NEGATIVE_VALUES_IMPL</a>(8)</div>
<div class="line"><a name="l00532"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a26566a50364d314898ebc8510893f444">  532</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a4d0a02b30d8cc5725d0a11781b488852">ASYMM_EXP_ON_NEGATIVE_VALUES_IMPL</a>(16)</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160; </div>
<div class="line"><a name="l00534"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a67827d9412860449b9bee53d2a1f85b5">  534</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a737312bc4a68c79a77cfab4849793bc0">ASYMM_SATURATING_ROUNDING_MULT_BY_POW2_IMPL</a>(1)</div>
<div class="line"><a name="l00535"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a19f955800766112047a31ecc0b06e6a3">  535</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a737312bc4a68c79a77cfab4849793bc0">ASYMM_SATURATING_ROUNDING_MULT_BY_POW2_IMPL</a>(2)</div>
<div class="line"><a name="l00536"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#ac6217bc91c98c1014b4c2db82a9481ca">  536</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a737312bc4a68c79a77cfab4849793bc0">ASYMM_SATURATING_ROUNDING_MULT_BY_POW2_IMPL</a>(3)</div>
<div class="line"><a name="l00537"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#acd830a44739b789927e122018d1d812e">  537</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a737312bc4a68c79a77cfab4849793bc0">ASYMM_SATURATING_ROUNDING_MULT_BY_POW2_IMPL</a>(4)</div>
<div class="line"><a name="l00538"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a6a9f0998b1f7d1d7667bf72d8c58073d">  538</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a737312bc4a68c79a77cfab4849793bc0">ASYMM_SATURATING_ROUNDING_MULT_BY_POW2_IMPL</a>(8)</div>
<div class="line"><a name="l00539"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a3d754f8d869b440dbf66bce23b5dc773">  539</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a737312bc4a68c79a77cfab4849793bc0">ASYMM_SATURATING_ROUNDING_MULT_BY_POW2_IMPL</a>(16)</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160; </div>
<div class="line"><a name="l00541"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#adb6f5858fc6977ed909e1a5829eafb2b">  541</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a8d97c6698c0e44424deae3f3130c55ac">ASYMM_ROUNDING_HALF_SUM_IMPL</a>(1)</div>
<div class="line"><a name="l00542"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a9595d06218660758a68f5f5e939d3c09">  542</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a8d97c6698c0e44424deae3f3130c55ac">ASYMM_ROUNDING_HALF_SUM_IMPL</a>(2)</div>
<div class="line"><a name="l00543"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a1fb01f68988aaec60e71590ad1c755d4">  543</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a8d97c6698c0e44424deae3f3130c55ac">ASYMM_ROUNDING_HALF_SUM_IMPL</a>(3)</div>
<div class="line"><a name="l00544"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a1cabff4f995ce86739345b282ee58229">  544</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a8d97c6698c0e44424deae3f3130c55ac">ASYMM_ROUNDING_HALF_SUM_IMPL</a>(4)</div>
<div class="line"><a name="l00545"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#ac3c7d2d58647e888f49813ef8f702044">  545</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a8d97c6698c0e44424deae3f3130c55ac">ASYMM_ROUNDING_HALF_SUM_IMPL</a>(8)</div>
<div class="line"><a name="l00546"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#af83792294af4a7fe05955b5a6a25258e">  546</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a8d97c6698c0e44424deae3f3130c55ac">ASYMM_ROUNDING_HALF_SUM_IMPL</a>(16)</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160; </div>
<div class="line"><a name="l00548"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#ad4595fcd7fe22d1f936dd1d895306039">  548</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a0e53aa5d4cbcec7a0c0085838f32453d">ASYMM_ONE_OVER_ONE_PLUS_X_FOR_X_IN_0_1_IMPL</a>(1)</div>
<div class="line"><a name="l00549"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#af7dc93394264f20dcd034eb920d0885f">  549</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a0e53aa5d4cbcec7a0c0085838f32453d">ASYMM_ONE_OVER_ONE_PLUS_X_FOR_X_IN_0_1_IMPL</a>(2)</div>
<div class="line"><a name="l00550"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a7cdb3357139be4ee0e5624e09cd1ee49">  550</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a0e53aa5d4cbcec7a0c0085838f32453d">ASYMM_ONE_OVER_ONE_PLUS_X_FOR_X_IN_0_1_IMPL</a>(3)</div>
<div class="line"><a name="l00551"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a1a59c6da37332f8cabd76d0fd30e8fd7">  551</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a0e53aa5d4cbcec7a0c0085838f32453d">ASYMM_ONE_OVER_ONE_PLUS_X_FOR_X_IN_0_1_IMPL</a>(4)</div>
<div class="line"><a name="l00552"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#ae823be99198f7c87e057a8cd5779f4e3">  552</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a0e53aa5d4cbcec7a0c0085838f32453d">ASYMM_ONE_OVER_ONE_PLUS_X_FOR_X_IN_0_1_IMPL</a>(8)</div>
<div class="line"><a name="l00553"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#aa2763ebf79c6bda96a782bdc45169740">  553</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a0e53aa5d4cbcec7a0c0085838f32453d">ASYMM_ONE_OVER_ONE_PLUS_X_FOR_X_IN_0_1_IMPL</a>(16)</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160; </div>
<div class="line"><a name="l00555"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a9c7e28a8e690869ac56ce738c9e750cf">  555</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#aace85e2a32bacdaa4e2d2055deabfc57">ASYMM_RESCALE_IMPL</a>(1)</div>
<div class="line"><a name="l00556"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#acf5d2f1e07bbd62fd7b2d4393300aea9">  556</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#aace85e2a32bacdaa4e2d2055deabfc57">ASYMM_RESCALE_IMPL</a>(2)</div>
<div class="line"><a name="l00557"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#ab526dc547949f1462b40b5533ebadcfc">  557</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#aace85e2a32bacdaa4e2d2055deabfc57">ASYMM_RESCALE_IMPL</a>(3)</div>
<div class="line"><a name="l00558"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#aca760388c1c3e4f6aebd2805894156c6">  558</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#aace85e2a32bacdaa4e2d2055deabfc57">ASYMM_RESCALE_IMPL</a>(4)</div>
<div class="line"><a name="l00559"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#aff705b7060e9056cf1155a280b021aa6">  559</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#aace85e2a32bacdaa4e2d2055deabfc57">ASYMM_RESCALE_IMPL</a>(8)</div>
<div class="line"><a name="l00560"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a3d23e059257aeea414c7e27b4c1e9fe7">  560</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#aace85e2a32bacdaa4e2d2055deabfc57">ASYMM_RESCALE_IMPL</a>(16)</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160; </div>
<div class="line"><a name="l00562"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a48a303864292b34609f1cf932407de83">  562</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a97dbfbc016c553b482f2664f2a5ded30">MULTIPLY_BY_QUANTIZED_MULTIPLIER_IMPL</a>(1)</div>
<div class="line"><a name="l00563"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a3a8448996e06e087faf52a7d73c081f3">  563</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a97dbfbc016c553b482f2664f2a5ded30">MULTIPLY_BY_QUANTIZED_MULTIPLIER_IMPL</a>(2)</div>
<div class="line"><a name="l00564"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#ae86edb3350d9133f82370bd8784cd484">  564</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a97dbfbc016c553b482f2664f2a5ded30">MULTIPLY_BY_QUANTIZED_MULTIPLIER_IMPL</a>(3)</div>
<div class="line"><a name="l00565"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a9d84baabb1694db8a53a4dd096daa1de">  565</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a97dbfbc016c553b482f2664f2a5ded30">MULTIPLY_BY_QUANTIZED_MULTIPLIER_IMPL</a>(4)</div>
<div class="line"><a name="l00566"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#a1ce6493ca0bc5a5fd9c23aa769f92576">  566</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a97dbfbc016c553b482f2664f2a5ded30">MULTIPLY_BY_QUANTIZED_MULTIPLIER_IMPL</a>(8)</div>
<div class="line"><a name="l00567"></a><span class="lineno"><a class="line" href="helpers__asymm_8h.xhtml#abd53138ed0127ad5c9dba0bd02e2282a">  567</a></span>&#160;<a class="code" href="helpers__asymm_8h.xhtml#a97dbfbc016c553b482f2664f2a5ded30">MULTIPLY_BY_QUANTIZED_MULTIPLIER_IMPL</a>(16)</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160; </div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;<span class="preprocessor">#endif // ARM_COMPUTE_HELPERS_ASYMM_H</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="ahelpers__asymm_8h_xhtml_aa12ca21cb9a54d2e4c26d57303fe44a7"><div class="ttname"><a href="helpers__asymm_8h.xhtml#aa12ca21cb9a54d2e4c26d57303fe44a7">EXP_BARREL_SHIFTER_IMPL</a></div><div class="ttdeci">#define EXP_BARREL_SHIFTER_IMPL(size)</div><div class="ttdef"><b>Definition:</b> <a href="helpers__asymm_8h_source.xhtml#l00237">helpers_asymm.h:237</a></div></div>
<div class="ttc" id="asrc_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a23fb01b6f3453cc0e48a026fd44f6acd"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a23fb01b6f3453cc0e48a026fd44f6acd">CONVERT_SAT</a></div><div class="ttdeci">#define CONVERT_SAT(x, type)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00762">helpers.h:762</a></div></div>
<div class="ttc" id="ahelpers__asymm_8h_xhtml_ab0b4069b25ac886d5cb6eb3b76473f88"><div class="ttname"><a href="helpers__asymm_8h.xhtml#ab0b4069b25ac886d5cb6eb3b76473f88">ASYMM_SELECT_USING_MASK_IMPL</a></div><div class="ttdeci">#define ASYMM_SELECT_USING_MASK_IMPL(size)</div><div class="ttdoc">Each bit of the result is set to the corresponding bit of either then_val or else_val depending on wh...</div><div class="ttdef"><b>Definition:</b> <a href="helpers__asymm_8h_source.xhtml#l00201">helpers_asymm.h:201</a></div></div>
<div class="ttc" id="ahelpers__asymm_8h_xhtml_ac5fe0200eafe2b88af574a2ed34c3c11"><div class="ttname"><a href="helpers__asymm_8h.xhtml#ac5fe0200eafe2b88af574a2ed34c3c11">DEQUANTIZE_IMPL</a></div><div class="ttdeci">#define DEQUANTIZE_IMPL(type, size)</div><div class="ttdoc">Dequantize a vector of values to floating-point.</div><div class="ttdef"><b>Definition:</b> <a href="helpers__asymm_8h_source.xhtml#l00104">helpers_asymm.h:104</a></div></div>
<div class="ttc" id="ahelpers__asymm_8h_xhtml_a1cb86b1d0c99a1e72dacda1bc615baf6"><div class="ttname"><a href="helpers__asymm_8h.xhtml#a1cb86b1d0c99a1e72dacda1bc615baf6">QUANTIZE_IMPL</a></div><div class="ttdeci">#define QUANTIZE_IMPL(type, size)</div><div class="ttdoc">Quantize a vector of values from floating-point.</div><div class="ttdef"><b>Definition:</b> <a href="helpers__asymm_8h_source.xhtml#l00087">helpers_asymm.h:87</a></div></div>
<div class="ttc" id="ahelpers__asymm_8h_xhtml_a8c47a92ec76a1e367b45305c17d9ea88"><div class="ttname"><a href="helpers__asymm_8h.xhtml#a8c47a92ec76a1e367b45305c17d9ea88">ASYMM_MASK_IF_ZERO_IMPL</a></div><div class="ttdeci">#define ASYMM_MASK_IF_ZERO_IMPL(size)</div><div class="ttdoc">For each element of input vector, the corresponding bits of the result item are set if the input item...</div><div class="ttdef"><b>Definition:</b> <a href="helpers__asymm_8h_source.xhtml#l00214">helpers_asymm.h:214</a></div></div>
<div class="ttc" id="ahelpers__asymm_8h_xhtml_a63aa8eb6ac2ac3782ffad43a96345f0a"><div class="ttname"><a href="helpers__asymm_8h.xhtml#a63aa8eb6ac2ac3782ffad43a96345f0a">quantize_qasymm8</a></div><div class="ttdeci">uchar quantize_qasymm8(float input, float offset, float scale)</div><div class="ttdoc">Quantize a floating-point scalar value to 8-bit asymmetric.</div><div class="ttdef"><b>Definition:</b> <a href="helpers__asymm_8h_source.xhtml#l00047">helpers_asymm.h:47</a></div></div>
<div class="ttc" id="ahelpers__asymm_8h_xhtml_abf75e242631b23007e4046682aa57ec5"><div class="ttname"><a href="helpers__asymm_8h.xhtml#abf75e242631b23007e4046682aa57ec5">ASYMM_ROUNDING_DIVIDE_BY_POW2_IMPL</a></div><div class="ttdeci">#define ASYMM_ROUNDING_DIVIDE_BY_POW2_IMPL(size)</div><div class="ttdoc">Correctly-rounded-to-nearest division by a power-of-two.</div><div class="ttdef"><b>Definition:</b> <a href="helpers__asymm_8h_source.xhtml#l00116">helpers_asymm.h:116</a></div></div>
<div class="ttc" id="ahelpers__asymm_8h_xhtml_afbec2094d42590b94e7eead93710411d"><div class="ttname"><a href="helpers__asymm_8h.xhtml#afbec2094d42590b94e7eead93710411d">dequantize_qasymm8</a></div><div class="ttdeci">float dequantize_qasymm8(uchar input, float offset, float scale)</div><div class="ttdoc">Dequantize a scalar value from 8-bit asymmetric to floating-point.</div><div class="ttdef"><b>Definition:</b> <a href="helpers__asymm_8h_source.xhtml#l00062">helpers_asymm.h:62</a></div></div>
<div class="ttc" id="ahelpers__asymm_8h_xhtml_a3d8a3968a069eb8abbc28d31c20f6b8c"><div class="ttname"><a href="helpers__asymm_8h.xhtml#a3d8a3968a069eb8abbc28d31c20f6b8c">ASYMM_EXP_ON_INTERVAL_BETWEEN_NEGATIVE_ONE_QUARTER_AND_0_EXCL_IMPL</a></div><div class="ttdeci">#define ASYMM_EXP_ON_INTERVAL_BETWEEN_NEGATIVE_ONE_QUARTER_AND_0_EXCL_IMPL(size)</div><div class="ttdoc">Calculates  for x in [-1/4, 0).</div><div class="ttdef"><b>Definition:</b> <a href="helpers__asymm_8h_source.xhtml#l00170">helpers_asymm.h:170</a></div></div>
<div class="ttc" id="asrc_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a009469e4d9b8fce3b6d5e97d2077827d"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a></div><div class="ttdeci">__global uchar * offset(const Image *img, int x, int y)</div><div class="ttdoc">Get the pointer position of a Image.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01112">helpers.h:1112</a></div></div>
<div class="ttc" id="ahelpers__asymm_8h_xhtml_a6dd3d8d22942f0ff3e59b4e32cfd4de3"><div class="ttname"><a href="helpers__asymm_8h.xhtml#a6dd3d8d22942f0ff3e59b4e32cfd4de3">ASYMM_MASK_IF_NON_ZERO_IMPL</a></div><div class="ttdeci">#define ASYMM_MASK_IF_NON_ZERO_IMPL(size)</div><div class="ttdoc">For each element of input vector, the corresponding bits of the result item are set if the input item...</div><div class="ttdef"><b>Definition:</b> <a href="helpers__asymm_8h_source.xhtml#l00229">helpers_asymm.h:229</a></div></div>
<div class="ttc" id="ahelpers__asymm_8h_xhtml_ad4b199221927cbabbf859e4d2efb688d"><div class="ttname"><a href="helpers__asymm_8h.xhtml#ad4b199221927cbabbf859e4d2efb688d">ASYMM_MULT_IMPL</a></div><div class="ttdeci">#define ASYMM_MULT_IMPL(size)</div><div class="ttdoc">Product of two numbers, interpreting them as fixed-point values in the interval [-1,...</div><div class="ttdef"><b>Definition:</b> <a href="helpers__asymm_8h_source.xhtml#l00137">helpers_asymm.h:137</a></div></div>
<div class="ttc" id="ahelpers__asymm_8h_xhtml_ae41349ddba7d47794bba4d2fcf659872"><div class="ttname"><a href="helpers__asymm_8h.xhtml#ae41349ddba7d47794bba4d2fcf659872">CONVERT_DOWN_RTE</a></div><div class="ttdeci">#define CONVERT_DOWN_RTE(x, type)</div><div class="ttdef"><b>Definition:</b> <a href="helpers__asymm_8h_source.xhtml#l00037">helpers_asymm.h:37</a></div></div>
<div class="ttc" id="ahelpers__asymm_8h_xhtml_a3dc07539dda26f6cd2dcdc08a222292d"><div class="ttname"><a href="helpers__asymm_8h.xhtml#a3dc07539dda26f6cd2dcdc08a222292d">dequantize_qasymm8_signed</a></div><div class="ttdeci">float dequantize_qasymm8_signed(char input, float offset, float scale)</div><div class="ttdoc">Dequantize a scalar value from signed 8-bit asymmetric to floating-point.</div><div class="ttdef"><b>Definition:</b> <a href="helpers__asymm_8h_source.xhtml#l00075">helpers_asymm.h:75</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a4f12b7902ae53e3898b2ab779f962340"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">arm_compute::test::validation::scale</a></div><div class="ttdeci">NEScale scale</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00272">Scale.cpp:272</a></div></div>
<div class="ttc" id="ahelpers__asymm_8h_xhtml_aace85e2a32bacdaa4e2d2055deabfc57"><div class="ttname"><a href="helpers__asymm_8h.xhtml#aace85e2a32bacdaa4e2d2055deabfc57">ASYMM_RESCALE_IMPL</a></div><div class="ttdeci">#define ASYMM_RESCALE_IMPL(size)</div><div class="ttdoc">Considering the integer value as fixed-point, change the number of integer bits and update value acco...</div><div class="ttdef"><b>Definition:</b> <a href="helpers__asymm_8h_source.xhtml#l00381">helpers_asymm.h:381</a></div></div>
<div class="ttc" id="ahelpers__asymm_8h_xhtml_a4d0a02b30d8cc5725d0a11781b488852"><div class="ttname"><a href="helpers__asymm_8h.xhtml#a4d0a02b30d8cc5725d0a11781b488852">ASYMM_EXP_ON_NEGATIVE_VALUES_IMPL</a></div><div class="ttdeci">#define ASYMM_EXP_ON_NEGATIVE_VALUES_IMPL(size)</div><div class="ttdoc">Calculates  for x &lt; 0.</div><div class="ttdef"><b>Definition:</b> <a href="helpers__asymm_8h_source.xhtml#l00257">helpers_asymm.h:257</a></div></div>
<div class="ttc" id="ahelpers__asymm_8h_xhtml_a0e53aa5d4cbcec7a0c0085838f32453d"><div class="ttname"><a href="helpers__asymm_8h.xhtml#a0e53aa5d4cbcec7a0c0085838f32453d">ASYMM_ONE_OVER_ONE_PLUS_X_FOR_X_IN_0_1_IMPL</a></div><div class="ttdeci">#define ASYMM_ONE_OVER_ONE_PLUS_X_FOR_X_IN_0_1_IMPL(size)</div><div class="ttdoc">Calculates  for x in (0, 1).</div><div class="ttdef"><b>Definition:</b> <a href="helpers__asymm_8h_source.xhtml#l00351">helpers_asymm.h:351</a></div></div>
<div class="ttc" id="ahelpers__asymm_8h_xhtml_a737312bc4a68c79a77cfab4849793bc0"><div class="ttname"><a href="helpers__asymm_8h.xhtml#a737312bc4a68c79a77cfab4849793bc0">ASYMM_SATURATING_ROUNDING_MULT_BY_POW2_IMPL</a></div><div class="ttdeci">#define ASYMM_SATURATING_ROUNDING_MULT_BY_POW2_IMPL(size)</div><div class="ttdoc">Calculates the product of a integer value by a power of two, with either a positive exponent (equival...</div><div class="ttdef"><b>Definition:</b> <a href="helpers__asymm_8h_source.xhtml#l00300">helpers_asymm.h:300</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">LSTMLayerQuantized.cpp:486</a></div></div>
<div class="ttc" id="ahelpers__asymm_8h_xhtml_a8d97c6698c0e44424deae3f3130c55ac"><div class="ttname"><a href="helpers__asymm_8h.xhtml#a8d97c6698c0e44424deae3f3130c55ac">ASYMM_ROUNDING_HALF_SUM_IMPL</a></div><div class="ttdeci">#define ASYMM_ROUNDING_HALF_SUM_IMPL(size)</div><div class="ttdoc">Calculates (a+b)/2, rounded to the nearest integer.</div><div class="ttdef"><b>Definition:</b> <a href="helpers__asymm_8h_source.xhtml#l00329">helpers_asymm.h:329</a></div></div>
<div class="ttc" id="asrc_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml">helpers.h</a></div></div>
<div class="ttc" id="ahelpers__asymm_8h_xhtml_a97dbfbc016c553b482f2664f2a5ded30"><div class="ttname"><a href="helpers__asymm_8h.xhtml#a97dbfbc016c553b482f2664f2a5ded30">MULTIPLY_BY_QUANTIZED_MULTIPLIER_IMPL</a></div><div class="ttdeci">#define MULTIPLY_BY_QUANTIZED_MULTIPLIER_IMPL(size)</div><div class="ttdef"><b>Definition:</b> <a href="helpers__asymm_8h_source.xhtml#l00415">helpers_asymm.h:415</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_8c278f79c760e5c5fbd911f9870614c1.xhtml">CL</a></li><li class="navelem"><a class="el" href="dir_25885286e9dad4fa105b7b25a8031bbf.xhtml">cl_kernels</a></li><li class="navelem"><a class="el" href="helpers__asymm_8h.xhtml">helpers_asymm.h</a></li>
    <li class="footer">Generated on Wed Jul 5 2023 11:29:09 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
