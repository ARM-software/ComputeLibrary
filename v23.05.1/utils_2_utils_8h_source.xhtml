<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: utils/Utils.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.05.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('utils_2_utils_8h_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Utils.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="utils_2_utils_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2016-2023 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef __UTILS_UTILS_H__</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define __UTILS_UTILS_H__</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">/** @dir .</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment"> *  brief Boiler plate code used by examples. Various utilities to print types, load / store assets, etc.</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160; </div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_helpers_8h.xhtml">arm_compute/core/Helpers.h</a>&quot;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_tensor_8h.xhtml">arm_compute/core/ITensor.h</a>&quot;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_types_8h.xhtml">arm_compute/core/Types.h</a>&quot;</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_window_8h.xhtml">arm_compute/core/Window.h</a>&quot;</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="runtime_2_tensor_8h.xhtml">arm_compute/runtime/Tensor.h</a>&quot;</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#pragma GCC diagnostic push</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#pragma GCC diagnostic ignored &quot;-Wunused-parameter&quot;</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#pragma GCC diagnostic ignored &quot;-Wstrict-overflow&quot;</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#include &quot;libnpy/npy.hpp&quot;</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#pragma GCC diagnostic pop</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_string_support_8h.xhtml">support/StringSupport.h</a>&quot;</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160; </div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor">#ifdef ARM_COMPUTE_CL</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_open_c_l_8h.xhtml">arm_compute/core/CL/OpenCL.h</a>&quot;</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2runtime_2_c_l_2_c_l_tensor_8h.xhtml">arm_compute/runtime/CL/CLTensor.h</a>&quot;</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_CL */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160; </div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="preprocessor">#include &lt;cstdlib&gt;</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="preprocessor">#include &lt;cstring&gt;</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="preprocessor">#include &lt;fstream&gt;</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="preprocessor">#include &lt;random&gt;</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="preprocessor">#include &lt;tuple&gt;</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160; </div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;{</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="keyword">namespace </span>utils</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;{<span class="comment"></span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment">/** Supported image types */</span></div>
<div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1utils.xhtml#a3154c405c975616503bac23f51b78fc0">   63</a></span>&#160;<span class="keyword">enum class</span> <a class="code" href="namespacearm__compute_1_1utils.xhtml#a3154c405c975616503bac23f51b78fc0">ImageType</a></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;{</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <a class="code" href="namespacearm__compute_1_1utils.xhtml#a3154c405c975616503bac23f51b78fc0a696b031073e74bf2cb98e5ef201d4aa3">UNKNOWN</a>,</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <a class="code" href="namespacearm__compute_1_1utils.xhtml#a3154c405c975616503bac23f51b78fc0a4bb1ebdeeb70354069bc644b9c94ee5f">PPM</a>,</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <a class="code" href="namespacearm__compute_1_1utils.xhtml#a3154c405c975616503bac23f51b78fc0a907e06a16862d82ca6907a28a68d0ad6">JPEG</a></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;};</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment">/** Abstract Example class.</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment"> * All examples have to inherit from this class.</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00074"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1_example.xhtml">   74</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1utils_1_1_example.xhtml">Example</a></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;{</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">    /** Setup the example.</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment">     * @param[in] argc Argument count.</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment">     * @param[in] argv Argument values.</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment">     * @return True in case of no errors in setup else false</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00084"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1_example.xhtml#ae678db013a8393ad2799a7de8b2b9304">   84</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1utils_1_1_example.xhtml#ae678db013a8393ad2799a7de8b2b9304">do_setup</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> **argv)</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    {</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(argc, argv);</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    };<span class="comment"></span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">    /** Run the example. */</span></div>
<div class="line"><a name="l00090"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1_example.xhtml#a90b4bc2c4bae857bc3536f4a18e29772">   90</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1utils_1_1_example.xhtml#a90b4bc2c4bae857bc3536f4a18e29772">do_run</a>() {};<span class="comment"></span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment">    /** Teardown the example. */</span></div>
<div class="line"><a name="l00092"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1_example.xhtml#a9b3acd6be09cf86066760caaa89f7be5">   92</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1utils_1_1_example.xhtml#a9b3acd6be09cf86066760caaa89f7be5">do_teardown</a>() {};</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment">    /** Default destructor. */</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="classarm__compute_1_1utils_1_1_example.xhtml#afeec4c960afa54ec7a45c519ad87cf2b">~Example</a>() = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;};</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment">/** Run an example and handle the potential exceptions it throws</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment"> * @param[in] argc    Number of command line arguments</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment"> * @param[in] argv    Command line arguments</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment"> * @param[in] example Example to run</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1utils.xhtml#a8249d4be92399495c0d3c9a5004aeb40">run_example</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> **argv, std::unique_ptr&lt;Example&gt; example);</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160; </div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00107"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1utils.xhtml#ac6126fda74b244d4c9a75328a3f436a3">  107</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1utils.xhtml#a8249d4be92399495c0d3c9a5004aeb40">run_example</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> **argv)</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;{</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1utils.xhtml#a8249d4be92399495c0d3c9a5004aeb40">run_example</a>(argc, argv, std::make_unique&lt;T&gt;());</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;}</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment">/** Draw a RGB rectangular window for the detected object</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment"> * @param[in, out] tensor Input tensor where the rectangle will be drawn on. Format supported: RGB888</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment"> * @param[in]      rect   Geometry of the rectangular window</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment"> * @param[in]      r      Red colour to use</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment"> * @param[in]      g      Green colour to use</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment"> * @param[in]      b      Blue colour to use</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1utils.xhtml#ad1b5373f466a3945e1f0ef1c9943c357">draw_detection_rectangle</a>(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">arm_compute::ITensor</a> *<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_detection_window.xhtml">arm_compute::DetectionWindow</a> &amp;rect, uint8_t r, uint8_t g, uint8_t <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment">/** Gets image type given a file</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment"> * @param[in] filename File to identify its image type</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment"> * @return Image type</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<a class="code" href="namespacearm__compute_1_1utils.xhtml#a3154c405c975616503bac23f51b78fc0">ImageType</a> <a class="code" href="namespacearm__compute_1_1utils.xhtml#a779702024b509e6797b2d526d382cf65">get_image_type_from_file</a>(<span class="keyword">const</span> std::string &amp;filename);</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">/** Parse the ppm header from an input file stream. At the end of the execution,</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment"> *  the file position pointer will be located at the first pixel stored in the ppm file</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment"> * @param[in] fs Input file stream to parse</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment"> * @return The width, height and max value stored in the header of the PPM file</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;std::tuple&lt;unsigned int, unsigned int, int&gt; <a class="code" href="namespacearm__compute_1_1utils.xhtml#a3aa8f5f1b94f88fdf5b43a53e29379cf">parse_ppm_header</a>(std::ifstream &amp;fs);</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment">/** Parse the npy header from an input file stream. At the end of the execution,</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment"> *  the file position pointer will be located at the first pixel stored in the npy file //TODO</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment"> * @param[in] fs Input file stream to parse</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment"> * @return The width and height stored in the header of the NPY file</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;npy::header_t <a class="code" href="namespacearm__compute_1_1utils.xhtml#ac936cf76357103ce35d91cdcf75d71cc">parse_npy_header</a>(std::ifstream &amp;fs);</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment">/** Obtain numpy type string from DataType.</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment"> * @param[in] data_type Data type.</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment"> * @return numpy type string.</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00154"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1utils.xhtml#a7990fd2b875e2f6d4c1eded54539cb19">  154</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearm__compute_1_1utils.xhtml#a7990fd2b875e2f6d4c1eded54539cb19">get_typestring</a>(<a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>)</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;{</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="comment">// Check endianness</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 1;</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span>        *c = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">char</span> *<span class="keyword">&gt;</span>(&amp;i);</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    std::string        endianness;</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keywordflow">if</span>(*c == 1)</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    {</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        endianness = std::string(<span class="stringliteral">&quot;&lt;&quot;</span>);</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    }</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    {</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        endianness = std::string(<span class="stringliteral">&quot;&gt;&quot;</span>);</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    }</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keyword">const</span> std::string no_endianness(<span class="stringliteral">&quot;|&quot;</span>);</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160; </div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="keywordflow">switch</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>)</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    {</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>:</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>:</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            <span class="keywordflow">return</span> no_endianness + <span class="stringliteral">&quot;u&quot;</span> + <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">support::cpp11::to_string</a>(<span class="keyword">sizeof</span>(uint8_t));</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">DataType::S8</a>:</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a5f007421a4becd11c0666c2058b0b36c">DataType::QSYMM8</a>:</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a34f500e941c4df30b870126ec868ebd5">DataType::QSYMM8_PER_CHANNEL</a>:</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            <span class="keywordflow">return</span> no_endianness + <span class="stringliteral">&quot;i&quot;</span> + <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">support::cpp11::to_string</a>(<span class="keyword">sizeof</span>(int8_t));</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aef9ef3ebca4d2b64b6ec83808bafa5f2">DataType::U16</a>:</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3b989c6b5398b3b9538ad103a324205e">DataType::QASYMM16</a>:</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            <span class="keywordflow">return</span> endianness + <span class="stringliteral">&quot;u&quot;</span> + <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">support::cpp11::to_string</a>(<span class="keyword">sizeof</span>(uint16_t));</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>:</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">DataType::QSYMM16</a>:</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            <span class="keywordflow">return</span> endianness + <span class="stringliteral">&quot;i&quot;</span> + <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">support::cpp11::to_string</a>(<span class="keyword">sizeof</span>(int16_t));</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6ac8bd5bedff8ef192d39a962afc0e19ee">DataType::U32</a>:</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            <span class="keywordflow">return</span> endianness + <span class="stringliteral">&quot;u&quot;</span> + <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">support::cpp11::to_string</a>(<span class="keyword">sizeof</span>(uint32_t));</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>:</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            <span class="keywordflow">return</span> endianness + <span class="stringliteral">&quot;i&quot;</span> + <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">support::cpp11::to_string</a>(<span class="keyword">sizeof</span>(int32_t));</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a31d65cccd6593e4101db93fb878abcaa">DataType::U64</a>:</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            <span class="keywordflow">return</span> endianness + <span class="stringliteral">&quot;u&quot;</span> + <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">support::cpp11::to_string</a>(<span class="keyword">sizeof</span>(uint64_t));</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a115dca124dc6423c7a400b8a8a0270cc">DataType::S64</a>:</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            <span class="keywordflow">return</span> endianness + <span class="stringliteral">&quot;i&quot;</span> + <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">support::cpp11::to_string</a>(<span class="keyword">sizeof</span>(int64_t));</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94">DataType::F16</a>:</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            <span class="keywordflow">return</span> endianness + <span class="stringliteral">&quot;f&quot;</span> + <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">support::cpp11::to_string</a>(<span class="keyword">sizeof</span>(<a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a>));</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>:</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            <span class="keywordflow">return</span> endianness + <span class="stringliteral">&quot;f&quot;</span> + <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">support::cpp11::to_string</a>(<span class="keyword">sizeof</span>(<span class="keywordtype">float</span>));</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a1ad5f6f3069070ec4cbbdc94d5e61e0e">DataType::F64</a>:</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            <span class="keywordflow">return</span> endianness + <span class="stringliteral">&quot;f&quot;</span> + <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">support::cpp11::to_string</a>(<span class="keyword">sizeof</span>(<span class="keywordtype">double</span>));</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6abd7ef6d4f35bc7d05c559b65032f15d1">DataType::SIZET</a>:</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            <span class="keywordflow">return</span> endianness + <span class="stringliteral">&quot;u&quot;</span> + <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">support::cpp11::to_string</a>(<span class="keyword">sizeof</span>(<span class="keywordtype">size_t</span>));</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Data type not supported&quot;</span>);</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    }</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;}</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="comment">/** Maps a tensor if needed</span></div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="comment"> * @param[in] tensor   Tensor to be mapped</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="comment"> * @param[in] blocking Specified if map is blocking or not</span></div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00212"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1utils.xhtml#a9c3303817ba653b5d1e78efb88d02bcf">  212</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1utils.xhtml#a9c3303817ba653b5d1e78efb88d02bcf">map</a>(T &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <span class="keywordtype">bool</span> blocking)</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;{</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(blocking);</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;}</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="comment">/** Unmaps a tensor if needed</span></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="comment"> * @param tensor  Tensor to be unmapped</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00223"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1utils.xhtml#a4ff2134cb88cb5a27120cddb98b59774">  223</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1utils.xhtml#a4ff2134cb88cb5a27120cddb98b59774">unmap</a>(T &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;{</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;}</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160; </div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="preprocessor">#ifdef ARM_COMPUTE_CL</span></div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment">/** Maps a tensor if needed</span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="comment"> * @param[in] tensor   Tensor to be mapped</span></div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="comment"> * @param[in] blocking Specified if map is blocking or not</span></div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1utils.xhtml#a9c3303817ba653b5d1e78efb88d02bcf">map</a>(<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a> &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <span class="keywordtype">bool</span> blocking)</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;{</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.map(blocking);</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;}</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="comment">/** Unmaps a tensor if needed</span></div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="comment"> * @param tensor  Tensor to be unmapped</span></div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1utils.xhtml#a4ff2134cb88cb5a27120cddb98b59774">unmap</a>(CLTensor &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;{</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.unmap();</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;}</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_CL */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="comment">/** Specialized class to generate random non-zero FP16 values.</span></div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="comment"> *  uniform_real_distribution&lt;half&gt; generates values that get rounded off to zero, causing</span></div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="comment"> *  differences between ACL and reference implementation</span></div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00254"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1uniform__real__distribution__16bit.xhtml">  254</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1utils_1_1uniform__real__distribution__16bit.xhtml">uniform_real_distribution_16bit</a></div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;{</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    static_assert(std::is_same&lt;T, half&gt;::value || std::is_same&lt;T, bfloat16&gt;::value, <span class="stringliteral">&quot;Only half and bfloat16 data types supported&quot;</span>);</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160; </div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00259"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1uniform__real__distribution__16bit.xhtml#a712fe00c49a4ab6f1feb0068cfb856a4">  259</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="classarm__compute_1_1utils_1_1uniform__real__distribution__16bit.xhtml#a712fe00c49a4ab6f1feb0068cfb856a4">result_type</a> = T;<span class="comment"></span></div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="comment">    /** Constructor</span></div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="comment">     * @param[in] min Minimum value of the distribution</span></div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="comment">     * @param[in] max Maximum value of the distribution</span></div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00265"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1uniform__real__distribution__16bit.xhtml#a4dc2d454cea322aaa69b034d9363ccc7">  265</a></span>&#160;    <span class="keyword">explicit</span> <a class="code" href="classarm__compute_1_1utils_1_1uniform__real__distribution__16bit.xhtml#a4dc2d454cea322aaa69b034d9363ccc7">uniform_real_distribution_16bit</a>(<span class="keywordtype">float</span> min = 0.f, <span class="keywordtype">float</span> max = 1.0)</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        : dist(min, max)</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    {</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    }</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="comment">    /** () operator to generate next value</span></div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="comment">     * @param[in] gen an uniform random bit generator object</span></div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00274"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1uniform__real__distribution__16bit.xhtml#a38cfc5aeea5be01cc0dca4e860f9aab8">  274</a></span>&#160;    T <a class="code" href="classarm__compute_1_1utils_1_1uniform__real__distribution__16bit.xhtml#a38cfc5aeea5be01cc0dca4e860f9aab8">operator()</a>(std::mt19937 &amp;gen)</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    {</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        <span class="keywordflow">return</span> T(dist(gen));</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    }</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160; </div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    std::uniform_real_distribution&lt;float&gt; dist;</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;};</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="comment">/** Numpy data loader */</span></div>
<div class="line"><a name="l00284"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml">  284</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml">NPYLoader</a></div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;{</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="comment">    /** Default constructor */</span></div>
<div class="line"><a name="l00288"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml#a59ac86360353fd935c6979105da7aefa">  288</a></span>&#160;    <a class="code" href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml#a59ac86360353fd935c6979105da7aefa">NPYLoader</a>()</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;        : _fs(), _shape(), _fortran_order(false), _typestring(), _file_layout(<a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>::<a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">NCHW</a>)</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    {</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    }</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="comment">    /** Open a NPY file and reads its metadata</span></div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="comment">     * @param[in] npy_filename File to open</span></div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;<span class="comment">     * @param[in] file_layout  (Optional) Layout in which the weights are stored in the file.</span></div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00298"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml#a739fd000f9e30bbc875cb48a9c6edab1">  298</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml#a739fd000f9e30bbc875cb48a9c6edab1">open</a>(<span class="keyword">const</span> std::string &amp;npy_filename, <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> file_layout = <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>)</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    {</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml#a2f57f54d8c03b615bb31eee091d8a88a">is_open</a>());</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        <span class="keywordflow">try</span></div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        {</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;            _fs.open(npy_filename, std::ios::in | std::ios::binary);</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;            <a class="code" href="_error_8h.xhtml#ac75ba282eb0cacd31fd4c6e6a47dbbc8">ARM_COMPUTE_EXIT_ON_MSG_VAR</a>(!_fs.good(), <span class="stringliteral">&quot;Failed to load binary data from %s&quot;</span>, npy_filename.c_str());</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;            _fs.exceptions(std::ifstream::failbit | std::ifstream::badbit);</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;            _file_layout = file_layout;</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160; </div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;            npy::header_t <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a723a2d3874520624df4c3214ef0ec420">header</a> = <a class="code" href="namespacearm__compute_1_1utils.xhtml#ac936cf76357103ce35d91cdcf75d71cc">parse_npy_header</a>(_fs);</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;            _shape               = <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a723a2d3874520624df4c3214ef0ec420">header</a>.shape;</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;            _fortran_order       = <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a723a2d3874520624df4c3214ef0ec420">header</a>.fortran_order;</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;            _typestring          = <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a723a2d3874520624df4c3214ef0ec420">header</a>.dtype.str();</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        }</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;        <span class="keywordflow">catch</span>(<span class="keyword">const</span> std::ifstream::failure &amp;e)</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;        {</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;            <a class="code" href="_error_8h.xhtml#abd040a16dc0dbc75733e07aff93048a8">ARM_COMPUTE_ERROR_VAR</a>(<span class="stringliteral">&quot;Accessing %s: %s&quot;</span>, npy_filename.c_str(), e.what());</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        }</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    }<span class="comment"></span></div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;<span class="comment">    /** Return true if a NPY file is currently open */</span></div>
<div class="line"><a name="l00319"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml#a2f57f54d8c03b615bb31eee091d8a88a">  319</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml#a2f57f54d8c03b615bb31eee091d8a88a">is_open</a>()</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    {</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        <span class="keywordflow">return</span> _fs.is_open();</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    }</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;<span class="comment">    /** Return true if a NPY file is in fortran order */</span></div>
<div class="line"><a name="l00325"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml#a8aa067630bcfd267bf3389ae27e70e76">  325</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml#a8aa067630bcfd267bf3389ae27e70e76">is_fortran</a>()</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    {</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;        <span class="keywordflow">return</span> _fortran_order;</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    }</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="comment">    /** Initialise the tensor&#39;s metadata with the dimensions of the NPY file currently open</span></div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;<span class="comment">     * @param[out] tensor Tensor to initialise</span></div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;<span class="comment">     * @param[in]  dt     Data type to use for the tensor</span></div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00336"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml#a6e3c7f7584c89bfed519597f40c08528">  336</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml#a6e3c7f7584c89bfed519597f40c08528">init_tensor</a>(T &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">arm_compute::DataType</a> <a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>)</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    {</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!<a class="code" href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml#a2f57f54d8c03b615bb31eee091d8a88a">is_open</a>());</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a> != <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::DataType::F32</a>);</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160; </div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        <span class="comment">// Use the size of the input NPY tensor</span></div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;        <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>;</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.set_num_dimensions(_shape.size());</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i = 0; i &lt; _shape.size(); ++i)</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        {</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;            <span class="keywordtype">size_t</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a> = i;</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;            <span class="keywordflow">if</span>(_fortran_order)</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;            {</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a> = _shape.size() - 1 - i;</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;            }</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.set(i, _shape.at(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>));</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;        }</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160; </div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;        <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">arm_compute::TensorInfo</a> <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>, 1, <a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>);</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;        <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.allocator()-&gt;init(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a>);</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    }</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;<span class="comment">    /** Fill a tensor with the content of the currently open NPY file.</span></div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;<span class="comment">     * @note If the tensor is a CLTensor, the function maps and unmaps the tensor</span></div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;<span class="comment">     * @param[in,out] tensor Tensor to fill (Must be allocated, and of matching dimensions with the opened NPY).</span></div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00365"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml#a055a51a536088065021a54e13968521d">  365</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml#a055a51a536088065021a54e13968521d">fill_tensor</a>(T &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    {</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!<a class="code" href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml#a2f57f54d8c03b615bb31eee091d8a88a">is_open</a>());</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;        <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a4264d7e3318c4188e48127a75f3f0f8a">ARM_COMPUTE_ERROR_ON_DATA_TYPE_NOT_IN</a>(&amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">arm_compute::DataType::QASYMM8</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::DataType::S32</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::DataType::F32</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94">arm_compute::DataType::F16</a>);</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;        <span class="keywordflow">try</span></div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;        {</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;            <span class="comment">// Map buffer if creating a CLTensor</span></div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;            <a class="code" href="namespacearm__compute_1_1utils.xhtml#a9c3303817ba653b5d1e78efb88d02bcf">map</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <span class="keyword">true</span>);</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160; </div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;            <span class="comment">// Check if the file is large enough to fill the tensor</span></div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">size_t</span> current_position = _fs.tellg();</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;            _fs.seekg(0, <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">std::ios_base::end</a>);</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">size_t</span> end_position = _fs.tellg();</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;            _fs.seekg(current_position, std::ios_base::beg);</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160; </div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;            <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>((end_position - current_position) &lt; <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;tensor_shape().total_size() * <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;element_size(),</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                                     <span class="stringliteral">&quot;Not enough data in file&quot;</span>);</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;            <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(end_position);</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160; </div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;            <span class="comment">// Check if the typestring matches the given one</span></div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;            std::string expect_typestr = <a class="code" href="namespacearm__compute_1_1utils.xhtml#a7990fd2b875e2f6d4c1eded54539cb19">get_typestring</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;data_type());</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;            <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(_typestring != expect_typestr, <span class="stringliteral">&quot;Typestrings mismatch&quot;</span>);</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160; </div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;            <span class="keywordtype">bool</span> are_layouts_different = (_file_layout != <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;data_layout());</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;            <span class="comment">// Correct dimensions (Needs to match TensorShape dimension corrections)</span></div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;            <span class="keywordflow">if</span>(_shape.size() != <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;tensor_shape().num_dimensions())</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;            {</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(_shape.size()) - 1; i &gt; 0; --i)</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                {</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                    <span class="keywordflow">if</span>(_shape[i] == 1)</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                    {</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;                        _shape.pop_back();</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                    }</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                    {</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                    }</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;                }</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;            }</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160; </div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;            <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>                    permuted_shape = <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;tensor_shape();</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;            <a class="code" href="classarm__compute_1_1_strides.xhtml">arm_compute::PermutationVector</a> perm;</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;            <span class="keywordflow">if</span>(are_layouts_different &amp;&amp; <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;tensor_shape().num_dimensions() &gt; 2)</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;            {</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;                perm                                    = (<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;data_layout() == <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">arm_compute::DataLayout::NHWC</a>) ? <a class="code" href="classarm__compute_1_1_strides.xhtml">arm_compute::PermutationVector</a>(2<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">U</a>, 0<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">U</a>, 1<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">U</a>) : <a class="code" href="namespacearm__compute.xhtml#a33e65be485104e2e9e69fca551d6f492">arm_compute::PermutationVector</a>(1<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">U</a>, 2<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">U</a>, 0<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">U</a>);</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                <a class="code" href="classarm__compute_1_1_strides.xhtml">arm_compute::PermutationVector</a> perm_vec = (<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;data_layout() == <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">arm_compute::DataLayout::NCHW</a>) ? <a class="code" href="classarm__compute_1_1_strides.xhtml">arm_compute::PermutationVector</a>(2<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">U</a>, 0<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">U</a>, 1<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">U</a>) : <a class="code" href="namespacearm__compute.xhtml#a33e65be485104e2e9e69fca551d6f492">arm_compute::PermutationVector</a>(1<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">U</a>, 2<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">U</a>, 0<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">U</a>);</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160; </div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;                <a class="code" href="namespacearm__compute.xhtml#a21c3e11887f3acf9284ca763372c7da0">arm_compute::permute</a>(permuted_shape, perm_vec);</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;            }</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160; </div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;            <span class="comment">// Validate tensor shape</span></div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;            <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(_shape.size() != <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;tensor_shape().num_dimensions(), <span class="stringliteral">&quot;Tensor ranks mismatch&quot;</span>);</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i = 0; i &lt; _shape.size(); ++i)</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;            {</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;                <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(permuted_shape[i] != _shape[i], <span class="stringliteral">&quot;Tensor dimensions mismatch&quot;</span>);</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;            }</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160; </div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;            <span class="keywordflow">switch</span>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;data_type())</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;            {</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">arm_compute::DataType::QASYMM8</a>:</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::DataType::S32</a>:</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::DataType::F32</a>:</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94">arm_compute::DataType::F16</a>:</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;                {</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;                    <span class="comment">// Read data</span></div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;                    <span class="keywordflow">if</span>(!are_layouts_different &amp;&amp; !_fortran_order &amp;&amp; <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;padding().empty())</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;                    {</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;                        <span class="comment">// If tensor has no padding read directly from stream.</span></div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;                        _fs.read(<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">char</span> *<span class="keyword">&gt;</span>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.buffer()), <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;total_size());</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;                    }</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;                    {</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;                        <span class="comment">// If tensor has padding or is in fortran order accessing tensor elements through execution window.</span></div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;                        <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a>             window;</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;                        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_dims = _shape.size();</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;                        <span class="keywordflow">if</span>(_fortran_order)</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;                        {</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;                            <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> dim = 0; dim &lt; num_dims; dim++)</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;                            {</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;                                permuted_shape.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">set</a>(dim, _shape[num_dims - dim - 1]);</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;                                perm.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a71d9685536fceae3487102a0cc105397">set</a>(dim, num_dims - dim - 1);</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;                            }</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;                            <span class="keywordflow">if</span>(are_layouts_different)</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;                            {</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;                                <span class="comment">// Permute only if num_dimensions greater than 2</span></div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;                                <span class="keywordflow">if</span>(num_dims &gt; 2)</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;                                {</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;                                    <span class="keywordflow">if</span>(_file_layout == <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>) <span class="comment">// i.e destination is NCHW --&gt; permute(1,2,0)</span></div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;                                    {</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;                                        <a class="code" href="namespacearm__compute.xhtml#a21c3e11887f3acf9284ca763372c7da0">arm_compute::permute</a>(perm, <a class="code" href="classarm__compute_1_1_strides.xhtml">arm_compute::PermutationVector</a>(1<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">U</a>, 2<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">U</a>, 0<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">U</a>));</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;                                    }</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;                                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;                                    {</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;                                        <a class="code" href="namespacearm__compute.xhtml#a21c3e11887f3acf9284ca763372c7da0">arm_compute::permute</a>(perm, <a class="code" href="classarm__compute_1_1_strides.xhtml">arm_compute::PermutationVector</a>(2<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">U</a>, 0<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">U</a>, 1<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">U</a>));</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;                                    }</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;                                }</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;                            }</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;                        }</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;                        window.<a class="code" href="classarm__compute_1_1_window.xhtml#a14470b4cb59140a1b6ff3b8f16c89ab6">use_tensor_dimensions</a>(permuted_shape);</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160; </div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;                        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp; <span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;                        {</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;                            <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;                            <a class="code" href="namespacearm__compute.xhtml#a21c3e11887f3acf9284ca763372c7da0">arm_compute::permute</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, perm);</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;                            _fs.read(<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">char</span> *<span class="keyword">&gt;</span>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.ptr_to_element(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>)), <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;element_size());</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;                        });</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;                    }</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160; </div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;                }</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;                <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;                    <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported data type&quot;</span>);</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;            }</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160; </div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;            <span class="comment">// Unmap buffer if creating a CLTensor</span></div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;            <a class="code" href="namespacearm__compute_1_1utils.xhtml#a4ff2134cb88cb5a27120cddb98b59774">unmap</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;        }</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;        <span class="keywordflow">catch</span>(<span class="keyword">const</span> std::ifstream::failure &amp;e)</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;        {</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;            <a class="code" href="_error_8h.xhtml#abd040a16dc0dbc75733e07aff93048a8">ARM_COMPUTE_ERROR_VAR</a>(<span class="stringliteral">&quot;Loading NPY file: %s&quot;</span>, e.what());</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;        }</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    }</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160; </div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    std::ifstream              _fs;</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    std::vector&lt;unsigned long&gt; _shape;</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    <span class="keywordtype">bool</span>                       _fortran_order;</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    std::string                _typestring;</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>                 _file_layout;</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;};</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;<span class="comment">/** Template helper function to save a tensor image to a PPM file.</span></div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;<span class="comment"> * @note Only U8 and RGB888 formats supported.</span></div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;<span class="comment"> * @note Only works with 2D tensors.</span></div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;<span class="comment"> * @note If the input tensor is a CLTensor, the function maps and unmaps the image</span></div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;<span class="comment"> * @param[in] tensor       The tensor to save as PPM file</span></div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;<span class="comment"> * @param[in] ppm_filename Filename of the file to create.</span></div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00506"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1utils.xhtml#a301d0b7bfd70f73fc1924f4281938d08">  506</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1utils.xhtml#a301d0b7bfd70f73fc1924f4281938d08">save_to_ppm</a>(T &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <span class="keyword">const</span> std::string &amp;ppm_filename)</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;{</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a0d34a8aa07600727e4e5034c7cdad47d">ARM_COMPUTE_ERROR_ON_FORMAT_NOT_IN</a>(&amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0">arm_compute::Format::RGB888</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::Format::U8</a>);</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;num_dimensions() &gt; 2);</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160; </div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    std::ofstream fs;</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160; </div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    <span class="keywordflow">try</span></div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    {</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;        fs.exceptions(std::ofstream::failbit | std::ofstream::badbit | std::ofstream::eofbit);</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;        fs.open(ppm_filename, std::ios::out | std::ios::binary);</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160; </div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> width  = <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;tensor_shape()[0];</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> height = <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;tensor_shape()[1];</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160; </div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;        fs &lt;&lt; <span class="stringliteral">&quot;P6\n&quot;</span></div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;           &lt;&lt; width &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; height &lt;&lt; <span class="stringliteral">&quot; 255\n&quot;</span>;</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160; </div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;        <span class="comment">// Map buffer if creating a CLTensor</span></div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;        <a class="code" href="namespacearm__compute_1_1utils.xhtml#a9c3303817ba653b5d1e78efb88d02bcf">map</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <span class="keyword">true</span>);</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160; </div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;        <span class="keywordflow">switch</span>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;format())</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;        {</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::Format::U8</a>:</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;            {</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;                <a class="code" href="classarm__compute_1_1_window.xhtml">arm_compute::Window</a> window;</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;                window.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">arm_compute::Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">arm_compute::Window::Dimension</a>(0, width, 1));</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;                window.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">arm_compute::Window::DimY</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">arm_compute::Window::Dimension</a>(0, height, 1));</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160; </div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;                <a class="code" href="classarm__compute_1_1_iterator.xhtml">arm_compute::Iterator</a> in(&amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, window);</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160; </div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;                <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">arm_compute::Coordinates</a> &amp;)</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;                {</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> value = *in.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>();</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160; </div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;                    fs &lt;&lt; value &lt;&lt; value &lt;&lt; value;</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;                },</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;                in);</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160; </div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;            }</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0">arm_compute::Format::RGB888</a>:</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;            {</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;                <a class="code" href="classarm__compute_1_1_window.xhtml">arm_compute::Window</a> window;</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;                window.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">arm_compute::Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">arm_compute::Window::Dimension</a>(0, width, width));</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;                window.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">arm_compute::Window::DimY</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">arm_compute::Window::Dimension</a>(0, height, 1));</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160; </div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;                <a class="code" href="classarm__compute_1_1_iterator.xhtml">arm_compute::Iterator</a> in(&amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, window);</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160; </div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;                <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">arm_compute::Coordinates</a> &amp;)</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;                {</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;                    fs.write(<span class="keyword">reinterpret_cast&lt;</span>std::fstream::char_type *<span class="keyword">&gt;</span>(in.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>()), width * <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;element_size());</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;                },</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;                in);</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160; </div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;            }</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;            <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;                <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported format&quot;</span>);</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;        }</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160; </div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;        <span class="comment">// Unmap buffer if creating a CLTensor</span></div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;        <a class="code" href="namespacearm__compute_1_1utils.xhtml#a4ff2134cb88cb5a27120cddb98b59774">unmap</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;    }</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;    <span class="keywordflow">catch</span>(<span class="keyword">const</span> std::ofstream::failure &amp;e)</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;    {</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;        <a class="code" href="_error_8h.xhtml#abd040a16dc0dbc75733e07aff93048a8">ARM_COMPUTE_ERROR_VAR</a>(<span class="stringliteral">&quot;Writing %s: (%s)&quot;</span>, ppm_filename.c_str(), e.what());</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;    }</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;}</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;<span class="comment">/** Template helper function to save a tensor image to a NPY file.</span></div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;<span class="comment"> * @note Only F32 data type supported.</span></div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;<span class="comment"> * @note If the input tensor is a CLTensor, the function maps and unmaps the image</span></div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;<span class="comment"> * @param[in] tensor        The tensor to save as NPY file</span></div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;<span class="comment"> * @param[in] npy_filename  Filename of the file to create.</span></div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;<span class="comment"> * @param[in] fortran_order If true, save matrix in fortran order.</span></div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U = <span class="keywordtype">float</span>&gt;</div>
<div class="line"><a name="l00586"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1utils.xhtml#a48c0efb64637ab6e965b32d7c683efe9">  586</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1utils.xhtml#a48c0efb64637ab6e965b32d7c683efe9">save_to_npy</a>(T &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <span class="keyword">const</span> std::string &amp;npy_filename, <span class="keywordtype">bool</span> fortran_order)</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;{</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a4264d7e3318c4188e48127a75f3f0f8a">ARM_COMPUTE_ERROR_ON_DATA_TYPE_NOT_IN</a>(&amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::DataType::F32</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">arm_compute::DataType::QASYMM8</a>);</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160; </div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;    std::ofstream fs;</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;    <span class="keywordflow">try</span></div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;    {</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;        fs.exceptions(std::ofstream::failbit | std::ofstream::badbit | std::ofstream::eofbit);</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;        fs.open(npy_filename, std::ios::out | std::ios::binary);</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160; </div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;        std::vector&lt;npy::ndarray_len_t&gt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;num_dimensions());</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160; </div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0, j = <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;num_dimensions() - 1; i &lt; <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;num_dimensions(); ++i, --j)</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;        {</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>[i] = <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;tensor_shape()[!fortran_order ? j : i];</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;        }</div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160; </div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;        <span class="comment">// Map buffer if creating a CLTensor</span></div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;        <a class="code" href="namespacearm__compute_1_1utils.xhtml#a9c3303817ba653b5d1e78efb88d02bcf">map</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <span class="keyword">true</span>);</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160; </div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;        <span class="keyword">using</span> typestring_type = <span class="keyword">typename</span> std::conditional&lt;std::is_floating_point&lt;U&gt;::value, float, <a class="code" href="namespacearm__compute.xhtml#ab8938bcb3ec0f5f8d93285eb3a28b701">qasymm8_t</a>&gt;<a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">::type</a>;</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160; </div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;        std::vector&lt;typestring_type&gt; tmp; <span class="comment">/* Used only to get the typestring */</span></div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;        <span class="keyword">const</span> npy::dtype_t           dtype = npy::dtype_map.at(std::type_index(<span class="keyword">typeid</span>(tmp)));</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160; </div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;        std::ofstream stream(npy_filename, std::ofstream::binary);</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;        npy::header_t <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a723a2d3874520624df4c3214ef0ec420">header</a>{ dtype, fortran_order, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a> };</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;        npy::write_header(stream, <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a723a2d3874520624df4c3214ef0ec420">header</a>);</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160; </div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;        <a class="code" href="classarm__compute_1_1_window.xhtml">arm_compute::Window</a> window;</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;        window.<a class="code" href="classarm__compute_1_1_window.xhtml#a14470b4cb59140a1b6ff3b8f16c89ab6">use_tensor_dimensions</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;tensor_shape());</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160; </div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">arm_compute::Iterator</a> in(&amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, window);</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160; </div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">arm_compute::Coordinates</a> &amp;)</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;        {</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;            stream.write(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">char</span> *<span class="keyword">&gt;</span>(in.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>()), <span class="keyword">sizeof</span>(typestring_type));</div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;        },</div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;        in);</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160; </div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;        <span class="comment">// Unmap buffer if creating a CLTensor</span></div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;        <a class="code" href="namespacearm__compute_1_1utils.xhtml#a4ff2134cb88cb5a27120cddb98b59774">unmap</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;    }</div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;    <span class="keywordflow">catch</span>(<span class="keyword">const</span> std::ofstream::failure &amp;e)</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;    {</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;        <a class="code" href="_error_8h.xhtml#abd040a16dc0dbc75733e07aff93048a8">ARM_COMPUTE_ERROR_VAR</a>(<span class="stringliteral">&quot;Writing %s: (%s)&quot;</span>, npy_filename.c_str(), e.what());</div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;    }</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;}</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;<span class="comment">/** Load the tensor with pre-trained data from a binary file</span></div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;<span class="comment"> * @param[in] tensor   The tensor to be filled. Data type supported: F32.</span></div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;<span class="comment"> * @param[in] filename Filename of the binary file to load from.</span></div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00641"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1utils.xhtml#af214346f90d640ac468dd90fa2a275cc">  641</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1utils.xhtml#af214346f90d640ac468dd90fa2a275cc">load_trained_data</a>(T &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <span class="keyword">const</span> std::string &amp;filename)</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;{</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#aadf5c9cff86327b96d88d04649d9715e">ARM_COMPUTE_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(&amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, 1, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>);</div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160; </div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;    std::ifstream fs;</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160; </div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;    <span class="keywordflow">try</span></div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;    {</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;        fs.exceptions(std::ofstream::failbit | std::ofstream::badbit | std::ofstream::eofbit);</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;        <span class="comment">// Open file</span></div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;        fs.open(filename, std::ios::in | std::ios::binary);</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160; </div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;        <span class="keywordflow">if</span>(!fs.good())</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;        {</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;            <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Could not load binary data: &quot;</span> + filename);</div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;        }</div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160; </div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;        <span class="comment">// Map buffer if creating a CLTensor</span></div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;        <a class="code" href="namespacearm__compute_1_1utils.xhtml#a9c3303817ba653b5d1e78efb88d02bcf">map</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <span class="keyword">true</span>);</div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160; </div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;        <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> window;</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160; </div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;        window.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">arm_compute::Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">arm_compute::Window::Dimension</a>(0, 1, 1));</div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160; </div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> d = 1; d &lt; <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;num_dimensions(); ++d)</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;        {</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;            window.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(d, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;tensor_shape()[d], 1));</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;        }</div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160; </div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">arm_compute::Iterator</a> in(&amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, window);</div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160; </div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;)</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;        {</div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;            fs.read(<span class="keyword">reinterpret_cast&lt;</span>std::fstream::char_type *<span class="keyword">&gt;</span>(in.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>()), <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;tensor_shape()[0] * <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;element_size());</div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;        },</div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;        in);</div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160; </div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;        <span class="comment">// Unmap buffer if creating a CLTensor</span></div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;        <a class="code" href="namespacearm__compute_1_1utils.xhtml#a4ff2134cb88cb5a27120cddb98b59774">unmap</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;    }</div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;    <span class="keywordflow">catch</span>(<span class="keyword">const</span> std::ofstream::failure &amp;e)</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;    {</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;        <a class="code" href="_error_8h.xhtml#abd040a16dc0dbc75733e07aff93048a8">ARM_COMPUTE_ERROR_VAR</a>(<span class="stringliteral">&quot;Writing %s: (%s)&quot;</span>, filename.c_str(), e.what());</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;    }</div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;}</div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160; </div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> TensorType&gt;</div>
<div class="line"><a name="l00688"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1utils.xhtml#a0a68ee1366ba27dd1e493dde02e57a59">  688</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1utils.xhtml#a0a68ee1366ba27dd1e493dde02e57a59">fill_tensor_value</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TensorType</a> &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, T value)</div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;{</div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;    <a class="code" href="namespacearm__compute_1_1utils.xhtml#a9c3303817ba653b5d1e78efb88d02bcf">map</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <span class="keyword">true</span>);</div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160; </div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> window;</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;    window.<a class="code" href="classarm__compute_1_1_window.xhtml#a14470b4cb59140a1b6ff3b8f16c89ab6">use_tensor_dimensions</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;tensor_shape());</div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160; </div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;    <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> it_tensor(&amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, window);</div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;)</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;    {</div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;        *<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(it_tensor.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>()) = value;</div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;    },</div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;    it_tensor);</div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160; </div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;    <a class="code" href="namespacearm__compute_1_1utils.xhtml#a4ff2134cb88cb5a27120cddb98b59774">unmap</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;}</div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160; </div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> TensorType&gt;</div>
<div class="line"><a name="l00706"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1utils.xhtml#a47cbdedef5ff798e3946a011bf58a0cb">  706</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1utils.xhtml#a47cbdedef5ff798e3946a011bf58a0cb">fill_tensor_zero</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TensorType</a> &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)</div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;{</div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;    <a class="code" href="namespacearm__compute_1_1utils.xhtml#a0a68ee1366ba27dd1e493dde02e57a59">fill_tensor_value</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, T(0));</div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;}</div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160; </div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> TensorType&gt;</div>
<div class="line"><a name="l00712"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1utils.xhtml#abf4bc85504168df2b48d84712be2ceaa">  712</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1utils.xhtml#abf4bc85504168df2b48d84712be2ceaa">fill_tensor_vector</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TensorType</a> &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, std::vector&lt;T&gt; vec)</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;{</div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;tensor_shape().total_size() != vec.size());</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160; </div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;    <a class="code" href="namespacearm__compute_1_1utils.xhtml#a9c3303817ba653b5d1e78efb88d02bcf">map</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <span class="keyword">true</span>);</div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160; </div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> window;</div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;    window.<a class="code" href="classarm__compute_1_1_window.xhtml#a14470b4cb59140a1b6ff3b8f16c89ab6">use_tensor_dimensions</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;tensor_shape());</div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160; </div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;    <span class="keywordtype">int</span>      i = 0;</div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;    <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> it_tensor(&amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, window);</div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;)</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;    {</div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;        *<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(it_tensor.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>()) = vec.at(i++);</div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;    },</div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;    it_tensor);</div>
<div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160; </div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;    <a class="code" href="namespacearm__compute_1_1utils.xhtml#a4ff2134cb88cb5a27120cddb98b59774">unmap</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;}</div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160; </div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> TensorType&gt;</div>
<div class="line"><a name="l00733"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1utils.xhtml#a98f6963b2f39dfd94bbec58601b60a99">  733</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1utils.xhtml#a98f6963b2f39dfd94bbec58601b60a99">fill_random_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TensorType</a> &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, std::random_device::result_type seed, T lower_bound = <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;T&gt;::lowest</a>(), T upper_bound = std::numeric_limits&lt;T&gt;::max())</div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;{</div>
<div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;    constexpr <span class="keywordtype">bool</span> is_fp_16bit = std::is_same&lt;T, half&gt;::value || std::is_same&lt;T, bfloat16&gt;::value;</div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;    constexpr <span class="keywordtype">bool</span> is_integral = std::is_integral&lt;T&gt;::value &amp;&amp; !is_fp_16bit;</div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160; </div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;    <span class="keyword">using</span> fp_dist_type = <span class="keyword">typename</span> std::conditional&lt;is_fp_16bit, arm_compute::utils::uniform_real_distribution_16bit&lt;T&gt;, std::uniform_real_distribution&lt;T&gt;&gt;<a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">::type</a>;</div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;    <span class="keyword">using</span> dist_type    = <span class="keyword">typename</span> std::conditional&lt;is_integral, std::uniform_int_distribution&lt;T&gt;, fp_dist_type&gt;<a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">::type</a>;</div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160; </div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;    std::mt19937 gen(seed);</div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;    dist_type    dist(lower_bound, upper_bound);</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160; </div>
<div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;    <a class="code" href="namespacearm__compute_1_1utils.xhtml#a9c3303817ba653b5d1e78efb88d02bcf">map</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <span class="keyword">true</span>);</div>
<div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160; </div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> window;</div>
<div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;    window.<a class="code" href="classarm__compute_1_1_window.xhtml#a14470b4cb59140a1b6ff3b8f16c89ab6">use_tensor_dimensions</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;tensor_shape());</div>
<div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160; </div>
<div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;    <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> it(&amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, window);</div>
<div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;)</div>
<div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;    {</div>
<div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;        *<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(it.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>()) = dist(gen);</div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;    },</div>
<div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;    it);</div>
<div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160; </div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;    <a class="code" href="namespacearm__compute_1_1utils.xhtml#a4ff2134cb88cb5a27120cddb98b59774">unmap</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;}</div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160; </div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> TensorType&gt;</div>
<div class="line"><a name="l00760"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1utils.xhtml#a4dab021b1b964cbd23b93173b84c0e49">  760</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1utils.xhtml#a98f6963b2f39dfd94bbec58601b60a99">fill_random_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TensorType</a> &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, T lower_bound = <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;T&gt;::lowest</a>(), T upper_bound = std::numeric_limits&lt;T&gt;::max())</div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;{</div>
<div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;    std::random_device rd;</div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;    <a class="code" href="namespacearm__compute_1_1utils.xhtml#a98f6963b2f39dfd94bbec58601b60a99">fill_random_tensor</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, rd(), lower_bound, upper_bound);</div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;}</div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160; </div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00767"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1utils.xhtml#a3ff90da00700526d89a0ee29f85fd804">  767</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1utils.xhtml#a3ff90da00700526d89a0ee29f85fd804">init_sgemm_output</a>(T &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, T &amp;src0, T &amp;src1, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">arm_compute::DataType</a> <a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>)</div>
<div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;{</div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.allocator()-&gt;init(<a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>(src1.info()-&gt;dimension(0), src0.info()-&gt;dimension(1), src0.info()-&gt;dimension(2)), 1, <a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>));</div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;}<span class="comment"></span></div>
<div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;<span class="comment">/** This function returns the amount of memory free reading from /proc/meminfo</span></div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;<span class="comment"> * @return The free memory in kB</span></div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;uint64_t <a class="code" href="namespacearm__compute_1_1utils.xhtml#afb7b08e5c044dba650037628089a4e7c">get_mem_free_from_meminfo</a>();</div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;<span class="comment">/** Compare two tensors</span></div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;<span class="comment"> * @param[in] tensor1   First tensor to be compared.</span></div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;<span class="comment"> * @param[in] tensor2   Second tensor to be compared.</span></div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;<span class="comment"> * @param[in] tolerance Tolerance used for the comparison.</span></div>
<div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;<span class="comment"> * @return The number of mismatches</span></div>
<div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00786"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1utils.xhtml#a4894358ea9a576be19615608a6b8b152">  786</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1utils.xhtml#a4894358ea9a576be19615608a6b8b152">compare_tensor</a>(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;tensor1, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;tensor2, T tolerance)</div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;{</div>
<div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a5befbfaf6bc224eabc58b5e88b1de6d1">ARM_COMPUTE_ERROR_ON_MISMATCHING_DATA_TYPES</a>(&amp;tensor1, &amp;tensor2);</div>
<div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#aafce5e9928fac427dcd29d960bcf2ae3">ARM_COMPUTE_ERROR_ON_MISMATCHING_SHAPES</a>(&amp;tensor1, &amp;tensor2);</div>
<div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160; </div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;    <span class="keywordtype">int</span>    num_mismatches = 0;</div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> window;</div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;    window.<a class="code" href="classarm__compute_1_1_window.xhtml#a14470b4cb59140a1b6ff3b8f16c89ab6">use_tensor_dimensions</a>(tensor1.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>());</div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160; </div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;    <a class="code" href="namespacearm__compute_1_1utils.xhtml#a9c3303817ba653b5d1e78efb88d02bcf">map</a>(tensor1, <span class="keyword">true</span>);</div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;    <a class="code" href="namespacearm__compute_1_1utils.xhtml#a9c3303817ba653b5d1e78efb88d02bcf">map</a>(tensor2, <span class="keyword">true</span>);</div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160; </div>
<div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;    <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> itensor1(&amp;tensor1, window);</div>
<div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;    <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> itensor2(&amp;tensor2, window);</div>
<div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160; </div>
<div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;)</div>
<div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;    {</div>
<div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;        <span class="keywordflow">if</span>(std::abs(*<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(itensor1.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>()) - *<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(itensor2.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>())) &gt; tolerance)</div>
<div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;        {</div>
<div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;            ++num_mismatches;</div>
<div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;        }</div>
<div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;    },</div>
<div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;    itensor1, itensor2);</div>
<div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160; </div>
<div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;    <a class="code" href="namespacearm__compute_1_1utils.xhtml#a4ff2134cb88cb5a27120cddb98b59774">unmap</a>(itensor1);</div>
<div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;    <a class="code" href="namespacearm__compute_1_1utils.xhtml#a4ff2134cb88cb5a27120cddb98b59774">unmap</a>(itensor2);</div>
<div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160; </div>
<div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;    <span class="keywordflow">return</span> num_mismatches;</div>
<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;}</div>
<div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;} <span class="comment">// namespace utils</span></div>
<div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;} <span class="comment">// namespace arm_compute</span></div>
<div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __UTILS_UTILS_H__*/</span><span class="preprocessor"></span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="anamespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">arm_compute::DataLayout::NCHW</a></div><div class="ttdeci">@ NCHW</div><div class="ttdoc">Num samples, channels, height, width.</div></div>
<div class="ttc" id="anamespacearm__compute_1_1support_1_1cpp11_xhtml_acc5dddee1cbe93a4eaf0a9f74ee96bb7"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">arm_compute::support::cpp11::to_string</a></div><div class="ttdeci">std::string to_string(T &amp;&amp;value)</div><div class="ttdoc">Convert integer and float values to string.</div><div class="ttdef"><b>Definition:</b> <a href="_string_support_8h_source.xhtml#l00168">StringSupport.h:168</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a34f500e941c4df30b870126ec868ebd5"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a34f500e941c4df30b870126ec868ebd5">arm_compute::DataType::QSYMM8_PER_CHANNEL</a></div><div class="ttdeci">@ QSYMM8_PER_CHANNEL</div><div class="ttdoc">quantized, symmetric per channel fixed-point 8-bit number</div></div>
<div class="ttc" id="anamespacearm__compute_1_1utils_xhtml_a3ff90da00700526d89a0ee29f85fd804"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a3ff90da00700526d89a0ee29f85fd804">arm_compute::utils::init_sgemm_output</a></div><div class="ttdeci">void init_sgemm_output(T &amp;dst, T &amp;src0, T &amp;src1, arm_compute::DataType dt)</div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00767">Utils.h:767</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a3b989c6b5398b3b9538ad103a324205e"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3b989c6b5398b3b9538ad103a324205e">arm_compute::DataType::QASYMM16</a></div><div class="ttdeci">@ QASYMM16</div><div class="ttdoc">quantized, asymmetric fixed-point 16-bit number</div></div>
<div class="ttc" id="a_string_support_8h_xhtml"><div class="ttname"><a href="_string_support_8h.xhtml">StringSupport.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0">arm_compute::Format::RGB888</a></div><div class="ttdeci">@ RGB888</div><div class="ttdoc">3 channels, 1 U8 per channel</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a31d65cccd6593e4101db93fb878abcaa"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a31d65cccd6593e4101db93fb878abcaa">arm_compute::DataType::U64</a></div><div class="ttdeci">@ U64</div><div class="ttdoc">unsigned 64-bit number</div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="agemm__interleaved_8hpp_xhtml_a6fbca3dca9ecb372332fc525529cc086"><div class="ttname"><a href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></div><div class="ttdeci">decltype(strategy::transforms) typedef type</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00261">gemm_interleaved.hpp:261</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1utils_1_1_n_p_y_loader_xhtml_a2f57f54d8c03b615bb31eee091d8a88a"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml#a2f57f54d8c03b615bb31eee091d8a88a">arm_compute::utils::NPYLoader::is_open</a></div><div class="ttdeci">bool is_open()</div><div class="ttdoc">Return true if a NPY file is currently open.</div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00319">Utils.h:319</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1mlgo_1_1parser_xhtml_a723a2d3874520624df4c3214ef0ec420"><div class="ttname"><a href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a723a2d3874520624df4c3214ef0ec420">arm_compute::mlgo::parser::header</a></div><div class="ttdeci">void header(TokenStream &amp;in, bool &amp;valid)</div><div class="ttdef"><b>Definition:</b> <a href="_m_l_g_o_parser_8cpp_source.xhtml#l00481">MLGOParser.cpp:481</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_info_xhtml_a7c66505457d00ece3aa4b34cab80757d"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">arm_compute::ITensorInfo::tensor_shape</a></div><div class="ttdeci">virtual const TensorShape &amp; tensor_shape() const =0</div><div class="ttdoc">Size for each dimension of the tensor.</div></div>
<div class="ttc" id="aarm__compute_2core_2_validate_8h_xhtml_aadf5c9cff86327b96d88d04649d9715e"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#aadf5c9cff86327b96d88d04649d9715e">ARM_COMPUTE_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN(t, c,...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00786">Validate.h:786</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1utils_1_1_example_xhtml_ae678db013a8393ad2799a7de8b2b9304"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_example.xhtml#ae678db013a8393ad2799a7de8b2b9304">arm_compute::utils::Example::do_setup</a></div><div class="ttdeci">virtual bool do_setup(int argc, char **argv)</div><div class="ttdoc">Setup the example.</div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00084">Utils.h:84</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_dimensions_xhtml_a71d9685536fceae3487102a0cc105397"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a71d9685536fceae3487102a0cc105397">arm_compute::Dimensions::set</a></div><div class="ttdeci">void set(size_t dimension, T value, bool increase_dim_unit=true)</div><div class="ttdoc">Accessor to set the value of one of the dimensions.</div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00076">Dimensions.h:76</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_helpers_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_helpers_8h.xhtml">Helpers.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">arm_compute::DataLayout</a></div><div class="ttdeci">DataLayout</div><div class="ttdoc">[DataLayout enum definition]</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00113">Types.h:113</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a1ad5f6f3069070ec4cbbdc94d5e61e0e"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a1ad5f6f3069070ec4cbbdc94d5e61e0e">arm_compute::DataType::F64</a></div><div class="ttdeci">@ F64</div><div class="ttdoc">64-bit floating-point number</div></div>
<div class="ttc" id="anamespacearm__compute_1_1utils_xhtml_a98f6963b2f39dfd94bbec58601b60a99"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a98f6963b2f39dfd94bbec58601b60a99">arm_compute::utils::fill_random_tensor</a></div><div class="ttdeci">void fill_random_tensor(TensorType &amp;tensor, std::random_device::result_type seed, T lower_bound=std::numeric_limits&lt; T &gt;::lowest(), T upper_bound=std::numeric_limits&lt; T &gt;::max())</div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00733">Utils.h:733</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1utils_xhtml_a3154c405c975616503bac23f51b78fc0a696b031073e74bf2cb98e5ef201d4aa3"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a3154c405c975616503bac23f51b78fc0a696b031073e74bf2cb98e5ef201d4aa3">arm_compute::utils::ImageType::UNKNOWN</a></div><div class="ttdeci">@ UNKNOWN</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">arm_compute::DataLayout::NHWC</a></div><div class="ttdeci">@ NHWC</div><div class="ttdoc">Num samples, height, width, channels.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">arm_compute::DataType::QASYMM8</a></div><div class="ttdeci">@ QASYMM8</div><div class="ttdoc">quantized, asymmetric fixed-point 8-bit number unsigned</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6aef9ef3ebca4d2b64b6ec83808bafa5f2"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aef9ef3ebca4d2b64b6ec83808bafa5f2">arm_compute::DataType::U16</a></div><div class="ttdeci">@ U16</div><div class="ttdoc">unsigned 16-bit number</div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml">arm_compute::TensorShape</a></div><div class="ttdoc">Shape of a tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00039">TensorShape.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1utils_xhtml_af214346f90d640ac468dd90fa2a275cc"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#af214346f90d640ac468dd90fa2a275cc">arm_compute::utils::load_trained_data</a></div><div class="ttdeci">void load_trained_data(T &amp;tensor, const std::string &amp;filename)</div><div class="ttdoc">Load the tensor with pre-trained data from a binary file.</div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00641">Utils.h:641</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1support_1_1cpp11_xhtml_a73e352c61baaf9c1178da2d30105b04e"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">arm_compute::support::cpp11::lowest</a></div><div class="ttdeci">T lowest()</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00277">ToolchainSupport.h:277</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1utils_xhtml_a4894358ea9a576be19615608a6b8b152"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a4894358ea9a576be19615608a6b8b152">arm_compute::utils::compare_tensor</a></div><div class="ttdeci">int compare_tensor(ITensor &amp;tensor1, ITensor &amp;tensor2, T tolerance)</div><div class="ttdoc">Compare two tensors.</div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00786">Utils.h:786</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_abd040a16dc0dbc75733e07aff93048a8"><div class="ttname"><a href="_error_8h.xhtml#abd040a16dc0dbc75733e07aff93048a8">ARM_COMPUTE_ERROR_VAR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_VAR(msg,...)</div><div class="ttdoc">Print the given message then throw an std::runtime_error.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00346">Error.h:346</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a5f007421a4becd11c0666c2058b0b36c"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a5f007421a4becd11c0666c2058b0b36c">arm_compute::DataType::QSYMM8</a></div><div class="ttdeci">@ QSYMM8</div><div class="ttdoc">quantized, symmetric fixed-point 8-bit number</div></div>
<div class="ttc" id="aarm__compute_2core_2_types_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_aa96e81276ee4f87ab386cd05a5539a7d"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">arm_compute::Window::DimX</a></div><div class="ttdeci">static constexpr size_t DimX</div><div class="ttdoc">Alias for dimension 0 also known as X dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00043">Window.h:43</a></div></div>
<div class="ttc" id="a_window_8h_xhtml"><div class="ttname"><a href="_window_8h.xhtml">Window.h</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">arm_compute::TensorType</a></div><div class="ttdeci">TensorType</div><div class="ttdoc">Memory type.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00038">Types.h:38</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_a14470b4cb59140a1b6ff3b8f16c89ab6"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a14470b4cb59140a1b6ff3b8f16c89ab6">arm_compute::Window::use_tensor_dimensions</a></div><div class="ttdeci">void use_tensor_dimensions(const TensorShape &amp;shape, size_t first_dimension=Window::DimX)</div><div class="ttdoc">Use the tensor's dimensions to fill the window dimensions.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00276">Window.inl:276</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1utils_1_1_n_p_y_loader_xhtml_a055a51a536088065021a54e13968521d"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml#a055a51a536088065021a54e13968521d">arm_compute::utils::NPYLoader::fill_tensor</a></div><div class="ttdeci">void fill_tensor(T &amp;tensor)</div><div class="ttdoc">Fill a tensor with the content of the currently open NPY file.</div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00365">Utils.h:365</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a21c3e11887f3acf9284ca763372c7da0"><div class="ttname"><a href="namespacearm__compute.xhtml#a21c3e11887f3acf9284ca763372c7da0">arm_compute::permute</a></div><div class="ttdeci">void permute(Dimensions&lt; T &gt; &amp;dimensions, const PermutationVector &amp;perm)</div><div class="ttdoc">Permutes given Dimensions according to a permutation vector.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00146">Helpers.h:146</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1utils_1_1uniform__real__distribution__16bit_xhtml_a4dc2d454cea322aaa69b034d9363ccc7"><div class="ttname"><a href="classarm__compute_1_1utils_1_1uniform__real__distribution__16bit.xhtml#a4dc2d454cea322aaa69b034d9363ccc7">arm_compute::utils::uniform_real_distribution_16bit::uniform_real_distribution_16bit</a></div><div class="ttdeci">uniform_real_distribution_16bit(float min=0.f, float max=1.0)</div><div class="ttdoc">Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00265">Utils.h:265</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_ac75ba282eb0cacd31fd4c6e6a47dbbc8"><div class="ttname"><a href="_error_8h.xhtml#ac75ba282eb0cacd31fd4c6e6a47dbbc8">ARM_COMPUTE_EXIT_ON_MSG_VAR</a></div><div class="ttdeci">#define ARM_COMPUTE_EXIT_ON_MSG_VAR(cond, msg,...)</div><div class="ttdoc">If the condition is true, the given message is printed and program exits.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00395">Error.h:395</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml">arm_compute::ITensor</a></div><div class="ttdoc">Interface for CPU tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_8h_source.xhtml#l00036">ITensor.h:36</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1utils_1_1_example_xhtml_a90b4bc2c4bae857bc3536f4a18e29772"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_example.xhtml#a90b4bc2c4bae857bc3536f4a18e29772">arm_compute::utils::Example::do_run</a></div><div class="ttdeci">virtual void do_run()</div><div class="ttdoc">Run the example.</div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00090">Utils.h:90</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor.xhtml">arm_compute::CLTensor</a></div><div class="ttdoc">Basic implementation of the OpenCL tensor interface.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2runtime_2_c_l_2_c_l_tensor_8h_source.xhtml#l00041">CLTensor.h:41</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_detection_window_xhtml"><div class="ttname"><a href="structarm__compute_1_1_detection_window.xhtml">arm_compute::DetectionWindow</a></div><div class="ttdoc">Detection window used for the object detection.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00539">Types.h:539</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1utils_xhtml_a7990fd2b875e2f6d4c1eded54539cb19"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a7990fd2b875e2f6d4c1eded54539cb19">arm_compute::utils::get_typestring</a></div><div class="ttdeci">std::string get_typestring(DataType data_type)</div><div class="ttdoc">Obtain numpy type string from DataType.</div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00154">Utils.h:154</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">arm_compute::DataType::S8</a></div><div class="ttdeci">@ S8</div><div class="ttdoc">signed 8-bit number</div></div>
<div class="ttc" id="anamespacearm__compute_1_1utils_xhtml_afb7b08e5c044dba650037628089a4e7c"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#afb7b08e5c044dba650037628089a4e7c">arm_compute::utils::get_mem_free_from_meminfo</a></div><div class="ttdeci">uint64_t get_mem_free_from_meminfo()</div><div class="ttdoc">This function returns the amount of memory free reading from /proc/meminfo.</div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8cpp_source.xhtml#l00253">Utils.cpp:253</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">arm_compute::DataType::QSYMM16</a></div><div class="ttdeci">@ QSYMM16</div><div class="ttdoc">quantized, symmetric fixed-point 16-bit number</div></div>
<div class="ttc" id="anamespacearm__compute_1_1utils_xhtml_a3154c405c975616503bac23f51b78fc0"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a3154c405c975616503bac23f51b78fc0">arm_compute::utils::ImageType</a></div><div class="ttdeci">ImageType</div><div class="ttdoc">Supported image types.</div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00063">Utils.h:63</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_strides_xhtml"><div class="ttname"><a href="classarm__compute_1_1_strides.xhtml">arm_compute::Strides</a></div><div class="ttdoc">Strides of an item in bytes.</div><div class="ttdef"><b>Definition:</b> <a href="_strides_8h_source.xhtml#l00038">Strides.h:38</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1utils_xhtml_a3154c405c975616503bac23f51b78fc0a4bb1ebdeeb70354069bc644b9c94ee5f"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a3154c405c975616503bac23f51b78fc0a4bb1ebdeeb70354069bc644b9c94ee5f">arm_compute::utils::ImageType::PPM</a></div><div class="ttdeci">@ PPM</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a73e2825fd61d349c5ca2f5313e3c8ea1"><div class="ttname"><a href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">arm_compute::half</a></div><div class="ttdeci">half_float::half half</div><div class="ttdoc">16-bit floating point type</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00048">Types.h:48</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1utils_1_1cast_xhtml_a81cf6107131a3583e2b0b762cb9c2862"><div class="ttname"><a href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">arm_compute::utils::cast::U</a></div><div class="ttdeci">U</div><div class="ttdef"><b>Definition:</b> <a href="_saturate_cast_8h_source.xhtml#l00064">SaturateCast.h:64</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a33e65be485104e2e9e69fca551d6f492"><div class="ttname"><a href="namespacearm__compute.xhtml#a33e65be485104e2e9e69fca551d6f492">arm_compute::PermutationVector</a></div><div class="ttdeci">Strides PermutationVector</div><div class="ttdoc">Permutation vector.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00051">Types.h:51</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_xhtml_a0e95dc1e53c361348314873b168ae237"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">arm_compute::ITensor::info</a></div><div class="ttdeci">virtual ITensorInfo * info() const =0</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor's metadata.</div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a45cde9abb508c62d67c3bb2b9bf566a5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">arm_compute::test::validation::shape</a></div><div class="ttdeci">shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">DFT.cpp:115</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_iterator_xhtml_ab260e292b1df3944bc1d55a9b2301e41"><div class="ttname"><a href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">arm_compute::Iterator::ptr</a></div><div class="ttdeci">constexpr uint8_t * ptr() const</div><div class="ttdoc">Return a pointer to the current pixel.</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00149">Helpers.inl:149</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1utils_1_1_n_p_y_loader_xhtml_a8aa067630bcfd267bf3389ae27e70e76"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml#a8aa067630bcfd267bf3389ae27e70e76">arm_compute::utils::NPYLoader::is_fortran</a></div><div class="ttdeci">bool is_fortran()</div><div class="ttdoc">Return true if a NPY file is in fortran order.</div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00325">Utils.h:325</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6ac8bd5bedff8ef192d39a962afc0e19ee"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6ac8bd5bedff8ef192d39a962afc0e19ee">arm_compute::DataType::U32</a></div><div class="ttdeci">@ U32</div><div class="ttdoc">unsigned 32-bit number</div></div>
<div class="ttc" id="aclassarm__compute_1_1utils_1_1_n_p_y_loader_xhtml"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml">arm_compute::utils::NPYLoader</a></div><div class="ttdoc">Numpy data loader.</div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00284">Utils.h:284</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_iterator_xhtml"><div class="ttname"><a href="classarm__compute_1_1_iterator.xhtml">arm_compute::Iterator</a></div><div class="ttdoc">Iterator updated by execute_window_loop for each window element.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00046">Helpers.h:46</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a0b0eb3235749a2909dc5a101afe59a1b"><div class="ttname"><a href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond, msg)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00456">Error.h:456</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1utils_1_1_n_p_y_loader_xhtml_a6e3c7f7584c89bfed519597f40c08528"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml#a6e3c7f7584c89bfed519597f40c08528">arm_compute::utils::NPYLoader::init_tensor</a></div><div class="ttdeci">void init_tensor(T &amp;tensor, arm_compute::DataType dt)</div><div class="ttdoc">Initialise the tensor's metadata with the dimensions of the NPY file currently open.</div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00336">Utils.h:336</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a6669348b484e3008dca2bfa8e85e40b5"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6669348b484e3008dca2bfa8e85e40b5">arm_compute::DataType::U8</a></div><div class="ttdeci">@ U8</div><div class="ttdoc">unsigned 8-bit number</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a6e0b0886efb94aec797f6b830329b72c"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6e0b0886efb94aec797f6b830329b72c">arm_compute::DataType::S16</a></div><div class="ttdeci">@ S16</div><div class="ttdoc">signed 16-bit number</div></div>
<div class="ttc" id="aclassarm__compute_1_1utils_1_1uniform__real__distribution__16bit_xhtml_a712fe00c49a4ab6f1feb0068cfb856a4"><div class="ttname"><a href="classarm__compute_1_1utils_1_1uniform__real__distribution__16bit.xhtml#a712fe00c49a4ab6f1feb0068cfb856a4">arm_compute::utils::uniform_real_distribution_16bit::result_type</a></div><div class="ttdeci">T result_type</div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00259">Utils.h:259</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1utils_xhtml_a48c0efb64637ab6e965b32d7c683efe9"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a48c0efb64637ab6e965b32d7c683efe9">arm_compute::utils::save_to_npy</a></div><div class="ttdeci">void save_to_npy(T &amp;tensor, const std::string &amp;npy_filename, bool fortran_order)</div><div class="ttdoc">Template helper function to save a tensor image to a NPY file.</div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00586">Utils.h:586</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1utils_1_1_example_xhtml_a9b3acd6be09cf86066760caaa89f7be5"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_example.xhtml#a9b3acd6be09cf86066760caaa89f7be5">arm_compute::utils::Example::do_teardown</a></div><div class="ttdeci">virtual void do_teardown()</div><div class="ttdoc">Teardown the example.</div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00092">Utils.h:92</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1utils_xhtml_abf4bc85504168df2b48d84712be2ceaa"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#abf4bc85504168df2b48d84712be2ceaa">arm_compute::utils::fill_tensor_vector</a></div><div class="ttdeci">void fill_tensor_vector(TensorType &amp;tensor, std::vector&lt; T &gt; vec)</div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00712">Utils.h:712</a></div></div>
<div class="ttc" id="a_open_c_l_8h_xhtml"><div class="ttname"><a href="_open_c_l_8h.xhtml">OpenCL.h</a></div><div class="ttdoc">Wrapper to configure the Khronos OpenCL C++ header.</div></div>
<div class="ttc" id="anamespacearm__compute_1_1utils_xhtml_a301d0b7bfd70f73fc1924f4281938d08"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a301d0b7bfd70f73fc1924f4281938d08">arm_compute::utils::save_to_ppm</a></div><div class="ttdeci">void save_to_ppm(T &amp;tensor, const std::string &amp;ppm_filename)</div><div class="ttdoc">Template helper function to save a tensor image to a PPM file.</div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00506">Utils.h:506</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="a_n_e_batch_normalization_layer_kernel_8cpp_xhtml_aa36901a4911e511f25f42e191df3526d"><div class="ttname"><a href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a></div><div class="ttdeci">DataType dt</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00051">NEBatchNormalizationLayerKernel.cpp:51</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_coordinates_xhtml"><div class="ttname"><a href="classarm__compute_1_1_coordinates.xhtml">arm_compute::Coordinates</a></div><div class="ttdoc">Coordinates of an item.</div><div class="ttdef"><b>Definition:</b> <a href="_coordinates_8h_source.xhtml#l00037">Coordinates.h:37</a></div></div>
<div class="ttc" id="a_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00066">ClWorkloadRuntime.cpp:66</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_1_1_dimension_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml">arm_compute::Window::Dimension</a></div><div class="ttdoc">Describe one of the image's dimensions with a start, end and step.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00079">Window.h:79</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1utils_xhtml_a9c3303817ba653b5d1e78efb88d02bcf"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a9c3303817ba653b5d1e78efb88d02bcf">arm_compute::utils::map</a></div><div class="ttdeci">void map(T &amp;tensor, bool blocking)</div><div class="ttdoc">Maps a tensor if needed.</div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00212">Utils.h:212</a></div></div>
<div class="ttc" id="aruntime_2_tensor_8h_xhtml"><div class="ttname"><a href="runtime_2_tensor_8h.xhtml">Tensor.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_acd3d2bba51cb84d34dd7656ad2375a6e"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">arm_compute::Window::set</a></div><div class="ttdeci">void set(size_t dimension, const Dimension &amp;dim)</div><div class="ttdoc">Set the values of a given dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00049">Window.inl:49</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::Format::U8</a></div><div class="ttdeci">@ U8</div><div class="ttdoc">1 channel, 1 U8 per channel</div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_ad2d402364fa822b0b7775081291eeca9"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">arm_compute::Window::DimY</a></div><div class="ttdeci">static constexpr size_t DimY</div><div class="ttdoc">Alias for dimension 1 also known as Y dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00045">Window.h:45</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a5f5b6c4337eac9e2e0046ca2304d80dc"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">arm_compute::test::validation::data_type</a></div><div class="ttdeci">data_type</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_cast_8cpp_source.xhtml#l00203">Cast.cpp:203</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1utils_1_1_n_p_y_loader_xhtml_a739fd000f9e30bbc875cb48a9c6edab1"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml#a739fd000f9e30bbc875cb48a9c6edab1">arm_compute::utils::NPYLoader::open</a></div><div class="ttdeci">void open(const std::string &amp;npy_filename, DataLayout file_layout=DataLayout::NCHW)</div><div class="ttdoc">Open a NPY file and reads its metadata.</div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00298">Utils.h:298</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1utils_xhtml_ad1b5373f466a3945e1f0ef1c9943c357"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#ad1b5373f466a3945e1f0ef1c9943c357">arm_compute::utils::draw_detection_rectangle</a></div><div class="ttdeci">void draw_detection_rectangle(ITensor *tensor, const DetectionWindow &amp;rect, uint8_t r, uint8_t g, uint8_t b)</div><div class="ttdoc">Draw a RGB rectangular window for the detected object.</div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8cpp_source.xhtml#l00130">Utils.cpp:130</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml">arm_compute::TensorInfo</a></div><div class="ttdoc">Store the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00043">TensorInfo.h:43</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1utils_xhtml_a3aa8f5f1b94f88fdf5b43a53e29379cf"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a3aa8f5f1b94f88fdf5b43a53e29379cf">arm_compute::utils::parse_ppm_header</a></div><div class="ttdeci">std::tuple&lt; unsigned int, unsigned int, int &gt; parse_ppm_header(std::ifstream &amp;fs)</div><div class="ttdoc">Parse the ppm header from an input file stream.</div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8cpp_source.xhtml#l00202">Utils.cpp:202</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml">arm_compute::Window</a></div><div class="ttdoc">Describe a multidimensional execution window.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00039">Window.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1utils_xhtml_a4ff2134cb88cb5a27120cddb98b59774"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a4ff2134cb88cb5a27120cddb98b59774">arm_compute::utils::unmap</a></div><div class="ttdeci">void unmap(T &amp;tensor)</div><div class="ttdoc">Unmaps a tensor if needed.</div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00223">Utils.h:223</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1utils_1_1uniform__real__distribution__16bit_xhtml_a38cfc5aeea5be01cc0dca4e860f9aab8"><div class="ttname"><a href="classarm__compute_1_1utils_1_1uniform__real__distribution__16bit.xhtml#a38cfc5aeea5be01cc0dca4e860f9aab8">arm_compute::utils::uniform_real_distribution_16bit::operator()</a></div><div class="ttdeci">T operator()(std::mt19937 &amp;gen)</div><div class="ttdoc">() operator to generate next value</div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00274">Utils.h:274</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_validate_8h_xhtml_a0d34a8aa07600727e4e5034c7cdad47d"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a0d34a8aa07600727e4e5034c7cdad47d">ARM_COMPUTE_ERROR_ON_FORMAT_NOT_IN</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_FORMAT_NOT_IN(t,...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00639">Validate.h:639</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a115dca124dc6423c7a400b8a8a0270cc"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a115dca124dc6423c7a400b8a8a0270cc">arm_compute::DataType::S64</a></div><div class="ttdeci">@ S64</div><div class="ttdoc">signed 64-bit number</div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1utils_1_1_example_xhtml"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_example.xhtml">arm_compute::utils::Example</a></div><div class="ttdoc">Abstract Example class.</div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00074">Utils.h:74</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2023 Arm Limited.</div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94">arm_compute::DataType::F16</a></div><div class="ttdeci">@ F16</div><div class="ttdoc">16-bit floating-point number</div></div>
<div class="ttc" id="anamespacearm__compute_1_1utils_xhtml_a0a68ee1366ba27dd1e493dde02e57a59"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a0a68ee1366ba27dd1e493dde02e57a59">arm_compute::utils::fill_tensor_value</a></div><div class="ttdeci">void fill_tensor_value(TensorType &amp;tensor, T value)</div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00688">Utils.h:688</a></div></div>
<div class="ttc" id="aarm__compute_2runtime_2_c_l_2_c_l_tensor_8h_xhtml"><div class="ttname"><a href="arm__compute_2runtime_2_c_l_2_c_l_tensor_8h.xhtml">CLTensor.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1utils_xhtml_ac936cf76357103ce35d91cdcf75d71cc"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#ac936cf76357103ce35d91cdcf75d71cc">arm_compute::utils::parse_npy_header</a></div><div class="ttdeci">npy::header_t parse_npy_header(std::ifstream &amp;fs)</div><div class="ttdoc">Parse the npy header from an input file stream.</div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8cpp_source.xhtml#l00233">Utils.cpp:233</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6abd7ef6d4f35bc7d05c559b65032f15d1"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6abd7ef6d4f35bc7d05c559b65032f15d1">arm_compute::DataType::SIZET</a></div><div class="ttdeci">@ SIZET</div><div class="ttdoc">size_t</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::DataType::S32</a></div><div class="ttdeci">@ S32</div><div class="ttdoc">signed 32-bit number</div></div>
<div class="ttc" id="anamespacearm__compute_1_1mlgo_1_1parser_xhtml_a9fe67a1da3e2628bade473115ecbb5be"><div class="ttname"><a href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">arm_compute::mlgo::parser::end</a></div><div class="ttdeci">void end(TokenStream &amp;in, bool &amp;valid)</div><div class="ttdef"><b>Definition:</b> <a href="_m_l_g_o_parser_8cpp_source.xhtml#l00290">MLGOParser.cpp:290</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ab8938bcb3ec0f5f8d93285eb3a28b701"><div class="ttname"><a href="namespacearm__compute.xhtml#ab8938bcb3ec0f5f8d93285eb3a28b701">arm_compute::qasymm8_t</a></div><div class="ttdeci">uint8_t qasymm8_t</div><div class="ttdoc">8 bit quantized asymmetric scalar value</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00039">QuantizationInfo.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::DataType::F32</a></div><div class="ttdeci">@ F32</div><div class="ttdoc">32-bit floating-point number</div></div>
<div class="ttc" id="a_i_tensor_8h_xhtml"><div class="ttname"><a href="_i_tensor_8h.xhtml">ITensor.h</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_validate_8h_xhtml_a4264d7e3318c4188e48127a75f3f0f8a"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a4264d7e3318c4188e48127a75f3f0f8a">ARM_COMPUTE_ERROR_ON_DATA_TYPE_NOT_IN</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_DATA_TYPE_NOT_IN(t,...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00688">Validate.h:688</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a5002bf7ec46d52971f9526e94172cfee"><div class="ttname"><a href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;... iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00077">Helpers.inl:77</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1utils_1_1_example_xhtml_afeec4c960afa54ec7a45c519ad87cf2b"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_example.xhtml#afeec4c960afa54ec7a45c519ad87cf2b">arm_compute::utils::Example::~Example</a></div><div class="ttdeci">virtual ~Example()=default</div><div class="ttdoc">Default destructor.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_shape_xhtml_aea5d1efe37933e02913aec84db5b9d4b"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">arm_compute::TensorShape::set</a></div><div class="ttdeci">TensorShape &amp; set(size_t dimension, size_t value, bool apply_dim_correction=true, bool increase_dim_unit=true)</div><div class="ttdoc">Accessor to set the value of one of the dimensions.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00079">TensorShape.h:79</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1utils_xhtml_a3154c405c975616503bac23f51b78fc0a907e06a16862d82ca6907a28a68d0ad6"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a3154c405c975616503bac23f51b78fc0a907e06a16862d82ca6907a28a68d0ad6">arm_compute::utils::ImageType::JPEG</a></div><div class="ttdeci">@ JPEG</div></div>
<div class="ttc" id="aarm__compute_2core_2_validate_8h_xhtml_a5befbfaf6bc224eabc58b5e88b1de6d1"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a5befbfaf6bc224eabc58b5e88b1de6d1">ARM_COMPUTE_ERROR_ON_MISMATCHING_DATA_TYPES</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MISMATCHING_DATA_TYPES(...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00539">Validate.h:539</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1utils_xhtml_a779702024b509e6797b2d526d382cf65"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a779702024b509e6797b2d526d382cf65">arm_compute::utils::get_image_type_from_file</a></div><div class="ttdeci">ImageType get_image_type_from_file(const std::string &amp;filename)</div><div class="ttdoc">Gets image type given a file.</div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8cpp_source.xhtml#l00167">Utils.cpp:167</a></div></div>
<div class="ttc" id="a_cl_workload_runtime_8cpp_xhtml_a84d9f260af89712132849ff260487ea0"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a></div><div class="ttdeci">TensorInfo tensor_info</div><div class="ttdoc">Associated tensor info.</div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00067">ClWorkloadRuntime.cpp:67</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">arm_compute::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdoc">Available data types.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00079">Types.h:79</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1utils_1_1_n_p_y_loader_xhtml_a59ac86360353fd935c6979105da7aefa"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml#a59ac86360353fd935c6979105da7aefa">arm_compute::utils::NPYLoader::NPYLoader</a></div><div class="ttdeci">NPYLoader()</div><div class="ttdoc">Default constructor.</div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00288">Utils.h:288</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_validate_8h_xhtml_aafce5e9928fac427dcd29d960bcf2ae3"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#aafce5e9928fac427dcd29d960bcf2ae3">ARM_COMPUTE_ERROR_ON_MISMATCHING_SHAPES</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MISMATCHING_SHAPES(...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00437">Validate.h:437</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1utils_xhtml_a8249d4be92399495c0d3c9a5004aeb40"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a8249d4be92399495c0d3c9a5004aeb40">arm_compute::utils::run_example</a></div><div class="ttdeci">int run_example(int argc, char **argv, std::unique_ptr&lt; Example &gt; example)</div><div class="ttdoc">Run an example and handle the potential exceptions it throws.</div><div class="ttdef"><b>Definition:</b> <a href="benchmark__examples_2_run_example_8cpp_source.xhtml#l00094">RunExample.cpp:94</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1utils_xhtml_a47cbdedef5ff798e3946a011bf58a0cb"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a47cbdedef5ff798e3946a011bf58a0cb">arm_compute::utils::fill_tensor_zero</a></div><div class="ttdeci">void fill_tensor_zero(TensorType &amp;tensor)</div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00706">Utils.h:706</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1utils_1_1uniform__real__distribution__16bit_xhtml"><div class="ttname"><a href="classarm__compute_1_1utils_1_1uniform__real__distribution__16bit.xhtml">arm_compute::utils::uniform_real_distribution_16bit</a></div><div class="ttdoc">Specialized class to generate random non-zero FP16 values.</div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00254">Utils.h:254</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_cbdb8362360e11eafe2fa3bc74cf0ffd.xhtml">utils</a></li><li class="navelem"><a class="el" href="utils_2_utils_8h.xhtml">Utils.h</a></li>
    <li class="footer">Generated on Wed Jul 5 2023 11:29:07 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
