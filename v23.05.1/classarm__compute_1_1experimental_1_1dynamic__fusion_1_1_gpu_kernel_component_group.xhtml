<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: GpuKernelComponentGroup Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.05.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-attribs">Static Public Attributes</a>  </div>
  <div class="headertitle">
<div class="title">GpuKernelComponentGroup Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>A group of gpu kernel components to be fused together PRECONDITIONS:  
 <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_gpu_kernel_component_group_8h_source.xhtml">GpuKernelComponentGroup.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a8f6e9067f46b60eb7d289fa099cc6468"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a8f6e9067f46b60eb7d289fa099cc6468">ComponentPtr</a> = <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_kernel_component.xhtml">IGpuKernelComponent</a> *</td></tr>
<tr class="separator:a8f6e9067f46b60eb7d289fa099cc6468"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ac5f8b1023bf15032ff46b8da02e3c707"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#ac5f8b1023bf15032ff46b8da02e3c707">GpuKernelComponentGroup</a> ()=default</td></tr>
<tr class="memdesc:ac5f8b1023bf15032ff46b8da02e3c707"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#ac5f8b1023bf15032ff46b8da02e3c707">More...</a><br /></td></tr>
<tr class="separator:ac5f8b1023bf15032ff46b8da02e3c707"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b633d1c333413f1c92fc1a1f346605e"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a8b633d1c333413f1c92fc1a1f346605e">GpuKernelComponentGroup</a> (const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml">GpuKernelComponentGroup</a> &amp;)=default</td></tr>
<tr class="memdesc:a8b633d1c333413f1c92fc1a1f346605e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be copy constructed.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a8b633d1c333413f1c92fc1a1f346605e">More...</a><br /></td></tr>
<tr class="separator:a8b633d1c333413f1c92fc1a1f346605e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abbbc98c19afdf8ae5635a05ec1275092"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml">GpuKernelComponentGroup</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#abbbc98c19afdf8ae5635a05ec1275092">operator=</a> (const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml">GpuKernelComponentGroup</a> &amp;)=default</td></tr>
<tr class="memdesc:abbbc98c19afdf8ae5635a05ec1275092"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be copied.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#abbbc98c19afdf8ae5635a05ec1275092">More...</a><br /></td></tr>
<tr class="separator:abbbc98c19afdf8ae5635a05ec1275092"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad10f54edcf7a5506e0c8dd60b746c2af"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#ad10f54edcf7a5506e0c8dd60b746c2af">GpuKernelComponentGroup</a> (<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml">GpuKernelComponentGroup</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:ad10f54edcf7a5506e0c8dd60b746c2af"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be move constructed.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#ad10f54edcf7a5506e0c8dd60b746c2af">More...</a><br /></td></tr>
<tr class="separator:ad10f54edcf7a5506e0c8dd60b746c2af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb4c245c12d4f233b264a27a53be3675"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml">GpuKernelComponentGroup</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#adb4c245c12d4f233b264a27a53be3675">operator=</a> (<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml">GpuKernelComponentGroup</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:adb4c245c12d4f233b264a27a53be3675"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be moved.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#adb4c245c12d4f233b264a27a53be3675">More...</a><br /></td></tr>
<tr class="separator:adb4c245c12d4f233b264a27a53be3675"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac9e78ba664fd652f3336d67df62be2ab"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#ac9e78ba664fd652f3336d67df62be2ab">add_component</a> (<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a8f6e9067f46b60eb7d289fa099cc6468">ComponentPtr</a> component)</td></tr>
<tr class="memdesc:ac9e78ba664fd652f3336d67df62be2ab"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add a component pointer into the group If the operation fails, then no change is made to the group.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#ac9e78ba664fd652f3336d67df62be2ab">More...</a><br /></td></tr>
<tr class="separator:ac9e78ba664fd652f3336d67df62be2ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a32d626626eee0bc4ade146973f6abb1c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a32d626626eee0bc4ade146973f6abb1c">finalize</a> ()</td></tr>
<tr class="memdesc:a32d626626eee0bc4ade146973f6abb1c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Optimize and pre-compute information about the component group.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a32d626626eee0bc4ade146973f6abb1c">More...</a><br /></td></tr>
<tr class="separator:a32d626626eee0bc4ade146973f6abb1c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ca6f69db36a2b3de6d9a106a73e47ba"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a6ca6f69db36a2b3de6d9a106a73e47ba">get_any_dst_tensor</a> () const</td></tr>
<tr class="memdesc:a6ca6f69db36a2b3de6d9a106a73e47ba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get one of the destination tensors of this group.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a6ca6f69db36a2b3de6d9a106a73e47ba">More...</a><br /></td></tr>
<tr class="separator:a6ca6f69db36a2b3de6d9a106a73e47ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7c1120629a4227e1cc7798f8e418c735"><td class="memItemLeft" align="right" valign="top">std::vector&lt; const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a7c1120629a4227e1cc7798f8e418c735">get_argument_tensors</a> () const</td></tr>
<tr class="memdesc:a7c1120629a4227e1cc7798f8e418c735"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get tensor argument of this group A tensor is an argument if it is a source or destination tensor to the group.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a7c1120629a4227e1cc7798f8e418c735">More...</a><br /></td></tr>
<tr class="separator:a7c1120629a4227e1cc7798f8e418c735"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a132a3a85495f9c5fe8ef684035cd94c8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a8f6e9067f46b60eb7d289fa099cc6468">ComponentPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a132a3a85495f9c5fe8ef684035cd94c8">get_root_component</a> () const</td></tr>
<tr class="memdesc:a132a3a85495f9c5fe8ef684035cd94c8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the root (first) component of this group.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a132a3a85495f9c5fe8ef684035cd94c8">More...</a><br /></td></tr>
<tr class="separator:a132a3a85495f9c5fe8ef684035cd94c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74f74201ca5d876d2f64f90f3f52b615"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a74f74201ca5d876d2f64f90f3f52b615">is_intermediate_tensor</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>) const</td></tr>
<tr class="memdesc:a74f74201ca5d876d2f64f90f3f52b615"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if a <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> is an "intermediate" tensor of the group.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a74f74201ca5d876d2f64f90f3f52b615">More...</a><br /></td></tr>
<tr class="separator:a74f74201ca5d876d2f64f90f3f52b615"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a02abe357a085b4138218160c55999057"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a02abe357a085b4138218160c55999057">is_input_tensor</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>) const</td></tr>
<tr class="memdesc:a02abe357a085b4138218160c55999057"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if an <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> is an input tensor of the group.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a02abe357a085b4138218160c55999057">More...</a><br /></td></tr>
<tr class="separator:a02abe357a085b4138218160c55999057"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac2cc71ed09507bb8aa4c608649d381c0"><td class="memItemLeft" align="right" valign="top">std::vector&lt; const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#ac2cc71ed09507bb8aa4c608649d381c0">get_tiles</a> () const</td></tr>
<tr class="memdesc:ac2cc71ed09507bb8aa4c608649d381c0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the list of temporary tiles that need to be declared.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#ac2cc71ed09507bb8aa4c608649d381c0">More...</a><br /></td></tr>
<tr class="separator:ac2cc71ed09507bb8aa4c608649d381c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aabd51dbccebb15fdd4cce7f917ec18df"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#aabd51dbccebb15fdd4cce7f917ec18df">get_tile_for_tensor</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>) const</td></tr>
<tr class="memdesc:aabd51dbccebb15fdd4cce7f917ec18df"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the shared tile that can be used to store temporary data of the specified tensor.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#aabd51dbccebb15fdd4cce7f917ec18df">More...</a><br /></td></tr>
<tr class="separator:aabd51dbccebb15fdd4cce7f917ec18df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a259cb5a711406a8c3e5d937eb9350cca"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a259cb5a711406a8c3e5d937eb9350cca">size</a> () const</td></tr>
<tr class="memdesc:a259cb5a711406a8c3e5d937eb9350cca"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the number of components within the group.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a259cb5a711406a8c3e5d937eb9350cca">More...</a><br /></td></tr>
<tr class="separator:a259cb5a711406a8c3e5d937eb9350cca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a644718bb2fb240de962dc3c9a1fdf0dc"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a644718bb2fb240de962dc3c9a1fdf0dc">empty</a> () const</td></tr>
<tr class="memdesc:a644718bb2fb240de962dc3c9a1fdf0dc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if the component group is empty.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a644718bb2fb240de962dc3c9a1fdf0dc">More...</a><br /></td></tr>
<tr class="separator:a644718bb2fb240de962dc3c9a1fdf0dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac586208dc1c63a5a9754f519365b34ff"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a8f6e9067f46b60eb7d289fa099cc6468">ComponentPtr</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#ac586208dc1c63a5a9754f519365b34ff">operator[]</a> (size_t index)</td></tr>
<tr class="separator:ac586208dc1c63a5a9754f519365b34ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6106724f17bfb13350c11a760863cd27"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a8f6e9067f46b60eb7d289fa099cc6468">ComponentPtr</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a6106724f17bfb13350c11a760863cd27">operator[]</a> (size_t index) const</td></tr>
<tr class="separator:a6106724f17bfb13350c11a760863cd27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6d03e8d6d36af0657de839105ba8ead"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a8f6e9067f46b60eb7d289fa099cc6468">ComponentPtr</a> &gt;::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#ac6d03e8d6d36af0657de839105ba8ead">begin</a> ()</td></tr>
<tr class="separator:ac6d03e8d6d36af0657de839105ba8ead"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5db9eb90f28ced09e722b56036d79c21"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a8f6e9067f46b60eb7d289fa099cc6468">ComponentPtr</a> &gt;::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a5db9eb90f28ced09e722b56036d79c21">end</a> ()</td></tr>
<tr class="separator:a5db9eb90f28ced09e722b56036d79c21"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c234fd7d117c05ab324a1f936242aa8"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a8f6e9067f46b60eb7d289fa099cc6468">ComponentPtr</a> &gt;::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a3c234fd7d117c05ab324a1f936242aa8">begin</a> () const</td></tr>
<tr class="separator:a3c234fd7d117c05ab324a1f936242aa8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a7598a137638d7af5c9de50a8308bdb"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a8f6e9067f46b60eb7d289fa099cc6468">ComponentPtr</a> &gt;::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a8a7598a137638d7af5c9de50a8308bdb">end</a> () const</td></tr>
<tr class="separator:a8a7598a137638d7af5c9de50a8308bdb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1cd59531dbc83e855eaaa950006e659d"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a8f6e9067f46b60eb7d289fa099cc6468">ComponentPtr</a> &gt;::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a1cd59531dbc83e855eaaa950006e659d">cbegin</a> () const</td></tr>
<tr class="separator:a1cd59531dbc83e855eaaa950006e659d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aebfa28affbf65fe796076d20d8bfcdd0"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a8f6e9067f46b60eb7d289fa099cc6468">ComponentPtr</a> &gt;::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#aebfa28affbf65fe796076d20d8bfcdd0">cend</a> () const</td></tr>
<tr class="separator:aebfa28affbf65fe796076d20d8bfcdd0"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-attribs"></a>
Static Public Attributes</h2></td></tr>
<tr class="memitem:a818410cf1e2a1bbc959a118f52df0558"><td class="memItemLeft" align="right" valign="top">static constexpr size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a818410cf1e2a1bbc959a118f52df0558">max_fused_components</a> = 64</td></tr>
<tr class="memdesc:a818410cf1e2a1bbc959a118f52df0558"><td class="mdescLeft">&#160;</td><td class="mdescRight">Maximum number of components that can be fused into the same component group.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a818410cf1e2a1bbc959a118f52df0558">More...</a><br /></td></tr>
<tr class="separator:a818410cf1e2a1bbc959a118f52df0558"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a50c05c157214ae20fac43d5ee4afaf6f"><td class="memItemLeft" align="right" valign="top">static constexpr size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a50c05c157214ae20fac43d5ee4afaf6f">max_dst_tensors</a> = 8</td></tr>
<tr class="memdesc:a50c05c157214ae20fac43d5ee4afaf6f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Maximum number of dst tensors allowed for a component / component.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a50c05c157214ae20fac43d5ee4afaf6f">More...</a><br /></td></tr>
<tr class="separator:a50c05c157214ae20fac43d5ee4afaf6f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>A group of gpu kernel components to be fused together PRECONDITIONS: </p>
<ol type="1">
<li>Fusion is limited to a linear sequence of kernel components INVARIANTS: <dl class="section note"><dt>Note</dt><dd>These preconditions and invariants are exactly the same as fusion constraints for kernel components</dd></dl>
</li>
<li>Max number of components that can be fused is <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a818410cf1e2a1bbc959a118f52df0558">GpuKernelComponentGroup::max_fused_components</a> ( excluding any output or input (if any) components. The max number of output components are bound by the maximum number of dst tensors allowed for a component / component group )</li>
<li>The fusion is subject to the pattern: (Complex + Simple * | Simple + Simple * | Un-fusable) + Output?</li>
<li>All components but unfusable, have exactly 1 dst tensor</li>
<li>All fused components share the same <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_kernel_component.xhtml#a12747697b67a54dfad1bfb740b5a1482">IGpuKernelComponent::Properties</a> ( <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage.xhtml">UnitWorkloadStage</a> etc. )</li>
<li>All fused components share the same tunable parameters like tile size</li>
<li>All fused components share the same dst tensor shape</li>
<li>All fused components' tensors share the same <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a></li>
<li>Maximum number of dst tensors allowed for an component (including unfusable) / component group is <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a50c05c157214ae20fac43d5ee4afaf6f">GpuKernelComponentGroup::max_dst_tensors</a> This has an impact on the total number of components supported, which = max_fused_components + max_dst_tensors </li>
</ol>

<p class="definition">Definition at line <a class="el" href="_gpu_kernel_component_group_8h_source.xhtml#l00062">62</a> of file <a class="el" href="_gpu_kernel_component_group_8h_source.xhtml">GpuKernelComponentGroup.h</a>.</p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a id="a8f6e9067f46b60eb7d289fa099cc6468"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8f6e9067f46b60eb7d289fa099cc6468">&#9670;&nbsp;</a></span>ComponentPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a8f6e9067f46b60eb7d289fa099cc6468">ComponentPtr</a> =  <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_kernel_component.xhtml">IGpuKernelComponent</a> *</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_gpu_kernel_component_group_8h_source.xhtml#l00065">65</a> of file <a class="el" href="_gpu_kernel_component_group_8h_source.xhtml">GpuKernelComponentGroup.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="ac5f8b1023bf15032ff46b8da02e3c707"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac5f8b1023bf15032ff46b8da02e3c707">&#9670;&nbsp;</a></span>GpuKernelComponentGroup() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml">GpuKernelComponentGroup</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default constructor. </p>

</div>
</div>
<a id="a8b633d1c333413f1c92fc1a1f346605e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8b633d1c333413f1c92fc1a1f346605e">&#9670;&nbsp;</a></span>GpuKernelComponentGroup() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml">GpuKernelComponentGroup</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml">GpuKernelComponentGroup</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allow instances of this class to be copy constructed. </p>

</div>
</div>
<a id="ad10f54edcf7a5506e0c8dd60b746c2af"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad10f54edcf7a5506e0c8dd60b746c2af">&#9670;&nbsp;</a></span>GpuKernelComponentGroup() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml">GpuKernelComponentGroup</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml">GpuKernelComponentGroup</a> &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allow instances of this class to be move constructed. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="ac9e78ba664fd652f3336d67df62be2ab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac9e78ba664fd652f3336d67df62be2ab">&#9670;&nbsp;</a></span>add_component()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool add_component </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a8f6e9067f46b60eb7d289fa099cc6468">ComponentPtr</a>&#160;</td>
          <td class="paramname"><em>component</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add a component pointer into the group If the operation fails, then no change is made to the group. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">component</td><td>Pointer to the component to be added</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true If the operation is successful </dd>
<dd>
false If the operation fails </dd></dl>

<p class="definition">Definition at line <a class="el" href="_gpu_kernel_component_group_8cpp_source.xhtml#l00038">38</a> of file <a class="el" href="_gpu_kernel_component_group_8cpp_source.xhtml">GpuKernelComponentGroup.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        _finalized, <span class="stringliteral">&quot;The component group has been finalized and cannot be altered.&quot;</span>);</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160; </div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="comment">// note: Constraint 1 is guaranteed as a precondition</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="comment">// Constraint 2</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keywordflow">if</span>(component-&gt;type() != <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670a29c2c02a361c9d7028472e5d92cd4a54">GpuComponentType::Output</a> &amp;&amp; _components.size() &gt;= <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a818410cf1e2a1bbc959a118f52df0558">max_fused_components</a>)</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    {</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    }</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="comment">// Constraint 3.1: Pattern: (Unfusable + Output)</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keywordflow">if</span>(!_components.empty() &amp;&amp; <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a132a3a85495f9c5fe8ef684035cd94c8">get_root_component</a>()-&gt;<a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a>() == <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670ae157cdc2ee225c7a081c7bae83f17b0c">GpuComponentType::Unfusable</a> &amp;&amp; component-&gt;type() != <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670a29c2c02a361c9d7028472e5d92cd4a54">GpuComponentType::Output</a>)</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    {</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    }</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="comment">// Constraint 3.2</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keywordflow">if</span>(!_components.empty() &amp;&amp; (component-&gt;type() != <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670a1fbb1e3943c2c6c560247ac8f9289780">GpuComponentType::Simple</a> &amp;&amp; component-&gt;type() != <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670a29c2c02a361c9d7028472e5d92cd4a54">GpuComponentType::Output</a>))</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    {</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    }</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="comment">// Constraint 4</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordflow">if</span>(component-&gt;type() != <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670ae157cdc2ee225c7a081c7bae83f17b0c">GpuComponentType::Unfusable</a> &amp;&amp; component-&gt;tensors().get_const_dst_tensors().size() != 1U)</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    {</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    }</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="comment">// Constraint 5</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keywordflow">if</span>(!_components.empty() &amp;&amp; !(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a132a3a85495f9c5fe8ef684035cd94c8">get_root_component</a>()-&gt;properties() == component-&gt;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_kernel_component.xhtml#a1fc1a2e53da700eaa825c4174f8122db">properties</a>()))</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    {</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    }</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="comment">// Constraint 7</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keywordflow">if</span>(!_components.empty())</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    {</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> root_dst_tensors = <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a132a3a85495f9c5fe8ef684035cd94c8">get_root_component</a>()-&gt;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_kernel_component.xhtml#a6c87c6e19567bc42bc52d166728c4461">tensors</a>().get_const_dst_tensors();</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(root_dst_tensors.empty());</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> first_dst_tensor = root_dst_tensors[0];</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> dst_tensors      = component-&gt;tensors().get_const_dst_tensors();</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;<a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a> : root_dst_tensors)</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        {</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1detail.xhtml#a45d610a8bc262f7007c934293361e888">detail::have_different_dimensions</a>(<a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a>-&gt;tensor_shape(), first_dst_tensor-&gt;tensor_shape(), 0))</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            {</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            }</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        }</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;<a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a> : dst_tensors)</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        {</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1detail.xhtml#a45d610a8bc262f7007c934293361e888">detail::have_different_dimensions</a>(<a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a>-&gt;tensor_shape(), first_dst_tensor-&gt;tensor_shape(), 0))</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            {</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            }</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        }</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    }</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="comment">// Constraint 8</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keywordflow">if</span>(!_components.empty())</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    {</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> root_dst_tensors = <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a132a3a85495f9c5fe8ef684035cd94c8">get_root_component</a>()-&gt;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_kernel_component.xhtml#a6c87c6e19567bc42bc52d166728c4461">tensors</a>().get_const_dst_tensors();</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(root_dst_tensors.empty());</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> first_dst_tensor_layout = root_dst_tensors[0]-&gt;data_layout();</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> dst_tensors             = component-&gt;tensors().get_const_dst_tensors();</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;<a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a> : root_dst_tensors)</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        {</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            <span class="keywordflow">if</span>(<a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a>-&gt;data_layout() != first_dst_tensor_layout)</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            {</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            }</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        }</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;<a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a> : dst_tensors)</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        {</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            <span class="keywordflow">if</span>(<a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a>-&gt;data_layout() != first_dst_tensor_layout)</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            {</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            }</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        }</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    }</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="comment">// Constraint 9</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keywordflow">if</span>(component-&gt;tensors().get_const_dst_tensors().size() &gt;= <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a50c05c157214ae20fac43d5ee4afaf6f">max_dst_tensors</a>)</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    {</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    }</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="comment">// Constraint 9 corollary</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keywordflow">if</span>(component-&gt;type() == <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670a29c2c02a361c9d7028472e5d92cd4a54">GpuComponentType::Output</a> &amp;&amp; _components.size() &gt;= <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a818410cf1e2a1bbc959a118f52df0558">max_fused_components</a> + <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a50c05c157214ae20fac43d5ee4afaf6f">max_dst_tensors</a>)</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    {</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    }</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    _components.push_back(component);</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_error_8h_source.xhtml#l00456">ARM_COMPUTE_ERROR_ON_MSG</a>, <a class="el" href="_gpu_kernel_component_group_8cpp_source.xhtml#l00305">GpuKernelComponentGroup::get_root_component()</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00047">arm_compute::detail::have_different_dimensions()</a>, <a class="el" href="_gpu_kernel_component_group_8h_source.xhtml#l00071">GpuKernelComponentGroup::max_dst_tensors</a>, <a class="el" href="_gpu_kernel_component_group_8h_source.xhtml#l00068">GpuKernelComponentGroup::max_fused_components</a>, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670a29c2c02a361c9d7028472e5d92cd4a54">arm_compute::experimental::dynamic_fusion::Output</a>, <a class="el" href="_i_gpu_kernel_component_8h_source.xhtml#l00102">IGpuKernelComponent::properties()</a>, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670a1fbb1e3943c2c6c560247ac8f9289780">arm_compute::experimental::dynamic_fusion::Simple</a>, <a class="el" href="tf__frozen__model__extractor_8py_source.xhtml#l00049">tf_frozen_model_extractor::t</a>, <a class="el" href="_i_gpu_kernel_component_8h_source.xhtml#l00097">IGpuKernelComponent::tensors()</a>, <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_kernel_component.xhtml#a8273c79765e714bde5b4a5c1e22ae70b">IGpuKernelComponent::type()</a>, <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00261">type</a>, <a class="el" href="_saturate_cast_8h_source.xhtml#l00064">arm_compute::utils::cast::U</a>, and <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670ae157cdc2ee225c7a081c7bae83f17b0c">arm_compute::experimental::dynamic_fusion::Unfusable</a>.</p>

</div>
</div>
<a id="ac6d03e8d6d36af0657de839105ba8ead"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac6d03e8d6d36af0657de839105ba8ead">&#9670;&nbsp;</a></span>begin() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a8f6e9067f46b60eb7d289fa099cc6468">GpuKernelComponentGroup::ComponentPtr</a> &gt;::const_iterator begin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_gpu_kernel_component_group_8cpp_source.xhtml#l00342">342</a> of file <a class="el" href="_gpu_kernel_component_group_8cpp_source.xhtml">GpuKernelComponentGroup.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;{</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    <span class="keywordflow">return</span> _components.begin();</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a3c234fd7d117c05ab324a1f936242aa8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3c234fd7d117c05ab324a1f936242aa8">&#9670;&nbsp;</a></span>begin() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a8f6e9067f46b60eb7d289fa099cc6468">ComponentPtr</a>&gt;::const_iterator begin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a1cd59531dbc83e855eaaa950006e659d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1cd59531dbc83e855eaaa950006e659d">&#9670;&nbsp;</a></span>cbegin()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a8f6e9067f46b60eb7d289fa099cc6468">GpuKernelComponentGroup::ComponentPtr</a> &gt;::const_iterator cbegin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_gpu_kernel_component_group_8cpp_source.xhtml#l00358">358</a> of file <a class="el" href="_gpu_kernel_component_group_8cpp_source.xhtml">GpuKernelComponentGroup.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;{</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    <span class="keywordflow">return</span> _components.cbegin();</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="aebfa28affbf65fe796076d20d8bfcdd0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aebfa28affbf65fe796076d20d8bfcdd0">&#9670;&nbsp;</a></span>cend()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a8f6e9067f46b60eb7d289fa099cc6468">GpuKernelComponentGroup::ComponentPtr</a> &gt;::const_iterator cend </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_gpu_kernel_component_group_8cpp_source.xhtml#l00362">362</a> of file <a class="el" href="_gpu_kernel_component_group_8cpp_source.xhtml">GpuKernelComponentGroup.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;{</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    <span class="keywordflow">return</span> _components.cend();</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a644718bb2fb240de962dc3c9a1fdf0dc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a644718bb2fb240de962dc3c9a1fdf0dc">&#9670;&nbsp;</a></span>empty()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool empty </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if the component group is empty. </p>

<p class="definition">Definition at line <a class="el" href="_gpu_kernel_component_group_8cpp_source.xhtml#l00330">330</a> of file <a class="el" href="_gpu_kernel_component_group_8cpp_source.xhtml">GpuKernelComponentGroup.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;{</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    <span class="keywordflow">return</span> _components.empty();</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_gpu_kernel_component_group_8cpp_source.xhtml#l00305">GpuKernelComponentGroup::get_root_component()</a>.</p>

</div>
</div>
<a id="a5db9eb90f28ced09e722b56036d79c21"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5db9eb90f28ced09e722b56036d79c21">&#9670;&nbsp;</a></span>end() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a8f6e9067f46b60eb7d289fa099cc6468">GpuKernelComponentGroup::ComponentPtr</a> &gt;::const_iterator end </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_gpu_kernel_component_group_8cpp_source.xhtml#l00346">346</a> of file <a class="el" href="_gpu_kernel_component_group_8cpp_source.xhtml">GpuKernelComponentGroup.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;{</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    <span class="keywordflow">return</span> _components.end();</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a8a7598a137638d7af5c9de50a8308bdb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8a7598a137638d7af5c9de50a8308bdb">&#9670;&nbsp;</a></span>end() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a8f6e9067f46b60eb7d289fa099cc6468">ComponentPtr</a>&gt;::const_iterator end </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a32d626626eee0bc4ade146973f6abb1c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a32d626626eee0bc4ade146973f6abb1c">&#9670;&nbsp;</a></span>finalize()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void finalize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Optimize and pre-compute information about the component group. </p>

<p class="definition">Definition at line <a class="el" href="_gpu_kernel_component_group_8cpp_source.xhtml#l00127">127</a> of file <a class="el" href="_gpu_kernel_component_group_8cpp_source.xhtml">GpuKernelComponentGroup.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;{</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keywordflow">if</span>(_finalized)</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    {</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    }</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160; </div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    _finalized = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160; </div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    std::set&lt;const ITensorInfo *&gt; output_tensors;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    std::map&lt;const ITensorInfo *, std::vector&lt;const ITensorInfo *&gt;&gt; possible_tile_map;</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    std::map&lt;const ITensorInfo *, int32_t&gt; tile_usages;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160; </div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> component : _components)</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    {</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> tensors = component-&gt;tensors();</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> src_tensors = tensors.get_const_src_tensors();</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> dst_tensors = tensors.get_const_dst_tensors();</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160; </div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        <span class="comment">// Detect input, output and intermediate tensors.</span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">auto</span> <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> : src_tensors)</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        {</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_tensors_it = output_tensors.find(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160; </div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            <span class="keywordflow">if</span>(output_tensors_it != output_tensors.end())</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            {</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                <span class="comment">// This tensor is the output of another operator.</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                <span class="comment">// It must be marked as intermediate tensor.</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                output_tensors.erase(output_tensors_it);</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                _interm_tensors.insert(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            }</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span>(_interm_tensors.find(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>) == _interm_tensors.end())</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            {</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                _input_tensors.insert(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160; </div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                tile_usages[<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>] = 0;</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                possible_tile_map.emplace(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, std::vector&lt;const ITensorInfo *&gt;());</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            }</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        }</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160; </div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">auto</span> <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> : dst_tensors)</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        {</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_input_tensors.find(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>) != _input_tensors.end());</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output_tensors.find(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>) != output_tensors.end());</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_interm_tensors.find(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>) != _interm_tensors.end());</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            output_tensors.insert(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160; </div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            tile_usages[<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>] = 0;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            possible_tile_map.emplace(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, std::vector&lt;const ITensorInfo *&gt;());</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        }</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160; </div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <span class="comment">// Check if the output can overwrite the input tile.</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> component_type = component-&gt;type();</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        <span class="keywordflow">if</span>(component_type == <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670a1fbb1e3943c2c6c560247ac8f9289780">GpuComponentType::Simple</a> || component_type == <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670a29c2c02a361c9d7028472e5d92cd4a54">GpuComponentType::Output</a>)</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        {</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;            <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(dst_tensors.size() != 1);</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160; </div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> dst_tensor = dst_tensors[0];</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af22d91f65b56b795fd28f3b302cd3ad2">dst_shape</a> = dst_tensor-&gt;tensor_shape();</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> &amp;dst_type = dst_tensor-&gt;data_type();</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160; </div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            tile_usages[dst_tensor] = 0;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160; </div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            <span class="keywordflow">for</span>(<span class="keyword">auto</span> src_tensor : src_tensors)</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            {</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> &amp;src_shape = src_tensor-&gt;tensor_shape();</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> &amp;src_type = src_tensor-&gt;data_type();</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160; </div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                <span class="keywordflow">if</span>(src_shape == <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af22d91f65b56b795fd28f3b302cd3ad2">dst_shape</a> &amp;&amp; src_type == dst_type)</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                {</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> tile_usages_it = tile_usages.find(src_tensor);</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(tile_usages_it == tile_usages.end());</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160; </div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                    <span class="keywordflow">if</span>(component_type == <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670a1fbb1e3943c2c6c560247ac8f9289780">GpuComponentType::Simple</a> || tile_usages_it-&gt;second &gt; 0)</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                    {</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                        <span class="comment">// Increase the number of tile usages unless this component is an output</span></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                        <span class="comment">// and the tile has not been shared with any component.</span></div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                        <span class="comment">// (Reason: output component doesn&#39;t change the content of the tile)</span></div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                        ++tile_usages_it-&gt;second;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                    }</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160; </div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                    possible_tile_map[dst_tensor].push_back(src_tensor);</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                }</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            }</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        }</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        {</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            <span class="comment">// Outputs of complex and unfusable components need dedicated tile.</span></div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;            <span class="keywordflow">for</span>(<span class="keyword">auto</span> <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> : dst_tensors)</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;            {</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                tile_usages[<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>] = 0;</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;            }</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        }</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    }</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160; </div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="comment">// Find the smallest list of tiles that the intermediate tensors need to write to.</span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> : _input_tensors)</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    {</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        _tile_map[<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>] = <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>;</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    }</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160; </div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> component : _components)</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    {</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> dst_tensors = component-&gt;tensors().get_const_dst_tensors();</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160; </div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">auto</span> <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> : dst_tensors)</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        {</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> target_tiles = possible_tile_map.at(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;            _tile_map[<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>] = <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>;</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160; </div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;            <span class="keywordflow">for</span>(<span class="keyword">auto</span> target : target_tiles)</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;            {</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> num_usage = tile_usages[target];</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160; </div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                <span class="keywordflow">if</span>(num_usage &lt;= 1)</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                {</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                    <span class="comment">// The target tile is consumed by only this operator, so we can reuse it</span></div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                    <span class="comment">// for the destination tensor data.</span></div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                    _tile_map[<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>] = _tile_map.at(target);</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                }</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;            }</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        }</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    }</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160; </div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> : output_tensors)</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    {</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        _tile_map[<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>] = <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>;</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    }</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160; </div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <span class="comment">// All intermediate tensors that cannot be shared with any previous tensor</span></div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="comment">// will need to be declared as tile variable.</span></div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> tensor_tile : _tile_map)</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    {</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        <span class="keywordflow">if</span>(tensor_tile.first == tensor_tile.second &amp;&amp;</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;           _interm_tensors.find(tensor_tile.first) != _interm_tensors.end())</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        {</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;            _tiles.push_back(tensor_tile.first);</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        }</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    }</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160; </div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    std::set_union(</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        _input_tensors.begin(), _input_tensors.end(),</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        output_tensors.begin(), output_tensors.end(),</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        std::back_inserter(_argument_tensors));</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    _any_output_tensor = *output_tensors.begin();</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00164">arm_compute::test::validation::dst_shape</a>, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670a29c2c02a361c9d7028472e5d92cd4a54">arm_compute::experimental::dynamic_fusion::Output</a>, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670a1fbb1e3943c2c6c560247ac8f9289780">arm_compute::experimental::dynamic_fusion::Simple</a>, and <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00066">tensor</a>.</p>

</div>
</div>
<a id="a6ca6f69db36a2b3de6d9a106a73e47ba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6ca6f69db36a2b3de6d9a106a73e47ba">&#9670;&nbsp;</a></span>get_any_dst_tensor()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> * get_any_dst_tensor </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get one of the destination tensors of this group. </p>

<p class="definition">Definition at line <a class="el" href="_gpu_kernel_component_group_8cpp_source.xhtml#l00293">293</a> of file <a class="el" href="_gpu_kernel_component_group_8cpp_source.xhtml">GpuKernelComponentGroup.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;{</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(!_finalized, <span class="stringliteral">&quot;The component group must have been finalized.&quot;</span>);</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="keywordflow">return</span> _any_output_tensor;</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00456">ARM_COMPUTE_ERROR_ON_MSG</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_template_cast_8cpp_source.xhtml#l00142">ClTemplateCast::get_tag_lut()</a>, <a class="el" href="_cl_template_reshape_8cpp_source.xhtml#l00110">ClTemplateReshape::get_tag_lut()</a>, <a class="el" href="_cl_template_depthwise_conv2d_8cpp_source.xhtml#l00238">ClTemplateDepthwiseConv2d::get_tag_lut()</a>, <a class="el" href="_cl_template_direct_conv2d_8cpp_source.xhtml#l00256">ClTemplateDirectConv2d::get_tag_lut()</a>, <a class="el" href="_cl_template_resize_8cpp_source.xhtml#l00194">ClTemplateResize::get_tag_lut()</a>, and <a class="el" href="_cl_template_activation_8cpp_source.xhtml#l00118">ClTemplateActivation::get_tag_lut()</a>.</p>

</div>
</div>
<a id="a7c1120629a4227e1cc7798f8e418c735"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7c1120629a4227e1cc7798f8e418c735">&#9670;&nbsp;</a></span>get_argument_tensors()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> * &gt; get_argument_tensors </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get tensor argument of this group A tensor is an argument if it is a source or destination tensor to the group. </p>

<p class="definition">Definition at line <a class="el" href="_gpu_kernel_component_group_8cpp_source.xhtml#l00299">299</a> of file <a class="el" href="_gpu_kernel_component_group_8cpp_source.xhtml">GpuKernelComponentGroup.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;{</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(!_finalized, <span class="stringliteral">&quot;The component group must have been finalized.&quot;</span>);</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <span class="keywordflow">return</span> _argument_tensors;</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00456">ARM_COMPUTE_ERROR_ON_MSG</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_template_writer_8cpp_source.xhtml#l00121">ClTemplateWriter::get_tensors()</a>.</p>

</div>
</div>
<a id="a132a3a85495f9c5fe8ef684035cd94c8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a132a3a85495f9c5fe8ef684035cd94c8">&#9670;&nbsp;</a></span>get_root_component()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a8f6e9067f46b60eb7d289fa099cc6468">GpuKernelComponentGroup::ComponentPtr</a> get_root_component </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the root (first) component of this group. </p>

<p class="definition">Definition at line <a class="el" href="_gpu_kernel_component_group_8cpp_source.xhtml#l00305">305</a> of file <a class="el" href="_gpu_kernel_component_group_8cpp_source.xhtml">GpuKernelComponentGroup.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;{</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a644718bb2fb240de962dc3c9a1fdf0dc">empty</a>())</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    {</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    }</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    <span class="keywordflow">return</span> _components[0];</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_gpu_kernel_component_group_8cpp_source.xhtml#l00330">GpuKernelComponentGroup::empty()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_gpu_kernel_component_group_8cpp_source.xhtml#l00038">GpuKernelComponentGroup::add_component()</a>, <a class="el" href="_cl_template_cast_8cpp_source.xhtml#l00165">ClTemplateCast::get_build_options()</a>, <a class="el" href="_cl_template_logits1_d_norm_8cpp_source.xhtml#l00143">ClTemplateLogits1DNorm::get_build_options()</a>, <a class="el" href="_cl_template_reshape_8cpp_source.xhtml#l00125">ClTemplateReshape::get_build_options()</a>, <a class="el" href="_cl_template_direct_conv2d_8cpp_source.xhtml#l00321">ClTemplateDirectConv2d::get_build_options()</a>, <a class="el" href="_cl_template_pool2d_8cpp_source.xhtml#l00420">ClTemplatePool2d::get_build_options()</a>, <a class="el" href="_cl_template_resize_8cpp_source.xhtml#l00221">ClTemplateResize::get_build_options()</a>, <a class="el" href="_cl_template_activation_8cpp_source.xhtml#l00144">ClTemplateActivation::get_build_options()</a>, <a class="el" href="_cl_template_cast_8cpp_source.xhtml#l00052">ClTemplateCast::get_component_code()</a>, <a class="el" href="_cl_template_elementwise_binary_8cpp_source.xhtml#l00062">ClTemplateElementwiseBinary::get_component_code()</a>, <a class="el" href="_cl_template_activation_8cpp_source.xhtml#l00055">ClTemplateActivation::get_component_code()</a>, <a class="el" href="_cl_template_cast_8cpp_source.xhtml#l00142">ClTemplateCast::get_tag_lut()</a>, and <a class="el" href="_cl_template_writer_8cpp_source.xhtml#l00114">ClTemplateWriter::get_window()</a>.</p>

</div>
</div>
<a id="aabd51dbccebb15fdd4cce7f917ec18df"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aabd51dbccebb15fdd4cce7f917ec18df">&#9670;&nbsp;</a></span>get_tile_for_tensor()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> * get_tile_for_tensor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>tensor</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the shared tile that can be used to store temporary data of the specified tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> to be looked up.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> that is used to store temporary data of <code>tensor</code>. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_gpu_kernel_component_group_8cpp_source.xhtml#l00281">281</a> of file <a class="el" href="_gpu_kernel_component_group_8cpp_source.xhtml">GpuKernelComponentGroup.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;{</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(!_finalized, <span class="stringliteral">&quot;The component group must have been finalized.&quot;</span>);</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160; </div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <span class="keywordflow">if</span>(_tile_map.find(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>) != _tile_map.end())</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    {</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        <span class="keywordflow">return</span> _tile_map.at(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    }</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160; </div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>;</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00456">ARM_COMPUTE_ERROR_ON_MSG</a>, and <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00066">tensor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_gpu_kernel_variable_table_8cpp_source.xhtml#l00035">GpuKernelVariableTable::declare_variable()</a>.</p>

</div>
</div>
<a id="ac2cc71ed09507bb8aa4c608649d381c0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac2cc71ed09507bb8aa4c608649d381c0">&#9670;&nbsp;</a></span>get_tiles()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> * &gt; get_tiles </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the list of temporary tiles that need to be declared. </p>

<p class="definition">Definition at line <a class="el" href="_gpu_kernel_component_group_8cpp_source.xhtml#l00275">275</a> of file <a class="el" href="_gpu_kernel_component_group_8cpp_source.xhtml">GpuKernelComponentGroup.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;{</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(!_finalized, <span class="stringliteral">&quot;The component group must have been finalized.&quot;</span>);</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <span class="keywordflow">return</span> _tiles;</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00456">ARM_COMPUTE_ERROR_ON_MSG</a>.</p>

</div>
</div>
<a id="a02abe357a085b4138218160c55999057"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a02abe357a085b4138218160c55999057">&#9670;&nbsp;</a></span>is_input_tensor()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool is_input_tensor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>tensor</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if an <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> is an input tensor of the group. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> to be looked up.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if <code>tensor</code> is an input tensor of the group, otherwise false. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_gpu_kernel_component_group_8cpp_source.xhtml#l00320">320</a> of file <a class="el" href="_gpu_kernel_component_group_8cpp_source.xhtml">GpuKernelComponentGroup.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;{</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(!_finalized, <span class="stringliteral">&quot;The component group must have been finalized.&quot;</span>);</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <span class="keywordflow">return</span> _input_tensors.find(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>) != _input_tensors.end();</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00456">ARM_COMPUTE_ERROR_ON_MSG</a>, and <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00066">tensor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_template_elementwise_binary_8cpp_source.xhtml#l00062">ClTemplateElementwiseBinary::get_component_code()</a>.</p>

</div>
</div>
<a id="a74f74201ca5d876d2f64f90f3f52b615"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a74f74201ca5d876d2f64f90f3f52b615">&#9670;&nbsp;</a></span>is_intermediate_tensor()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool is_intermediate_tensor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>tensor</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if a <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> is an "intermediate" tensor of the group. </p>
<p>An intermediate tensor is any tensor that is not an argument.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> to be looked up</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true If <code>tensor</code> is an intermediate tensor </dd>
<dd>
false Otherwise </dd></dl>

<p class="definition">Definition at line <a class="el" href="_gpu_kernel_component_group_8cpp_source.xhtml#l00314">314</a> of file <a class="el" href="_gpu_kernel_component_group_8cpp_source.xhtml">GpuKernelComponentGroup.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;{</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(!_finalized, <span class="stringliteral">&quot;The component group must have been finalized.&quot;</span>);</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <span class="keywordflow">return</span> _interm_tensors.find(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>) != _interm_tensors.end();</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00456">ARM_COMPUTE_ERROR_ON_MSG</a>, and <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00066">tensor</a>.</p>

</div>
</div>
<a id="abbbc98c19afdf8ae5635a05ec1275092"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abbbc98c19afdf8ae5635a05ec1275092">&#9670;&nbsp;</a></span>operator=() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml">GpuKernelComponentGroup</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml">GpuKernelComponentGroup</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allow instances of this class to be copied. </p>

</div>
</div>
<a id="adb4c245c12d4f233b264a27a53be3675"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adb4c245c12d4f233b264a27a53be3675">&#9670;&nbsp;</a></span>operator=() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml">GpuKernelComponentGroup</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml">GpuKernelComponentGroup</a> &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allow instances of this class to be moved. </p>

</div>
</div>
<a id="ac586208dc1c63a5a9754f519365b34ff"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac586208dc1c63a5a9754f519365b34ff">&#9670;&nbsp;</a></span>operator[]() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a8f6e9067f46b60eb7d289fa099cc6468">GpuKernelComponentGroup::ComponentPtr</a> &amp; operator[] </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_gpu_kernel_component_group_8cpp_source.xhtml#l00334">334</a> of file <a class="el" href="_gpu_kernel_component_group_8cpp_source.xhtml">GpuKernelComponentGroup.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;{</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    <span class="keywordflow">return</span> _components[index];</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a6106724f17bfb13350c11a760863cd27"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6106724f17bfb13350c11a760863cd27">&#9670;&nbsp;</a></span>operator[]() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a8f6e9067f46b60eb7d289fa099cc6468">GpuKernelComponentGroup::ComponentPtr</a> &amp; operator[] </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_gpu_kernel_component_group_8cpp_source.xhtml#l00338">338</a> of file <a class="el" href="_gpu_kernel_component_group_8cpp_source.xhtml">GpuKernelComponentGroup.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;{</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    <span class="keywordflow">return</span> _components[index];</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a259cb5a711406a8c3e5d937eb9350cca"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a259cb5a711406a8c3e5d937eb9350cca">&#9670;&nbsp;</a></span>size()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the number of components within the group. </p>

<p class="definition">Definition at line <a class="el" href="_gpu_kernel_component_group_8cpp_source.xhtml#l00326">326</a> of file <a class="el" href="_gpu_kernel_component_group_8cpp_source.xhtml">GpuKernelComponentGroup.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;{</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    <span class="keywordflow">return</span> _components.size();</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Field Documentation</h2>
<a id="a50c05c157214ae20fac43d5ee4afaf6f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a50c05c157214ae20fac43d5ee4afaf6f">&#9670;&nbsp;</a></span>max_dst_tensors</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr size_t max_dst_tensors = 8</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Maximum number of dst tensors allowed for a component / component. </p>

<p class="definition">Definition at line <a class="el" href="_gpu_kernel_component_group_8h_source.xhtml#l00071">71</a> of file <a class="el" href="_gpu_kernel_component_group_8h_source.xhtml">GpuKernelComponentGroup.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="_gpu_kernel_component_group_8cpp_source.xhtml#l00038">GpuKernelComponentGroup::add_component()</a>.</p>

</div>
</div>
<a id="a818410cf1e2a1bbc959a118f52df0558"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a818410cf1e2a1bbc959a118f52df0558">&#9670;&nbsp;</a></span>max_fused_components</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr size_t max_fused_components = 64</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Maximum number of components that can be fused into the same component group. </p>

<p class="definition">Definition at line <a class="el" href="_gpu_kernel_component_group_8h_source.xhtml#l00068">68</a> of file <a class="el" href="_gpu_kernel_component_group_8h_source.xhtml">GpuKernelComponentGroup.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="_gpu_kernel_component_group_8cpp_source.xhtml#l00038">GpuKernelComponentGroup::add_component()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/dynamic_fusion/sketch/gpu/<a class="el" href="_gpu_kernel_component_group_8h_source.xhtml">GpuKernelComponentGroup.h</a></li>
<li>src/dynamic_fusion/sketch/gpu/<a class="el" href="_gpu_kernel_component_group_8cpp_source.xhtml">GpuKernelComponentGroup.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_af22d91f65b56b795fd28f3b302cd3ad2"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#af22d91f65b56b795fd28f3b302cd3ad2">arm_compute::test::validation::dst_shape</a></div><div class="ttdeci">TensorShape dst_shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00164">DFT.cpp:164</a></div></div>
<div class="ttc" id="agemm__interleaved_8hpp_xhtml_a6fbca3dca9ecb372332fc525529cc086"><div class="ttname"><a href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></div><div class="ttdeci">decltype(strategy::transforms) typedef type</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00261">gemm_interleaved.hpp:261</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group_xhtml_a132a3a85495f9c5fe8ef684035cd94c8"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a132a3a85495f9c5fe8ef684035cd94c8">arm_compute::experimental::dynamic_fusion::GpuKernelComponentGroup::get_root_component</a></div><div class="ttdeci">ComponentPtr get_root_component() const</div><div class="ttdoc">Get the root (first) component of this group.</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_kernel_component_group_8cpp_source.xhtml#l00305">GpuKernelComponentGroup.cpp:305</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_ab26c0327042b802ca8cff46a9bc67670a29c2c02a361c9d7028472e5d92cd4a54"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670a29c2c02a361c9d7028472e5d92cd4a54">arm_compute::experimental::dynamic_fusion::GpuComponentType::Output</a></div><div class="ttdeci">@ Output</div></div>
<div class="ttc" id="a_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group_xhtml_a644718bb2fb240de962dc3c9a1fdf0dc"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a644718bb2fb240de962dc3c9a1fdf0dc">arm_compute::experimental::dynamic_fusion::GpuKernelComponentGroup::empty</a></div><div class="ttdeci">bool empty() const</div><div class="ttdoc">Check if the component group is empty.</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_kernel_component_group_8cpp_source.xhtml#l00330">GpuKernelComponentGroup.cpp:330</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a0b0eb3235749a2909dc5a101afe59a1b"><div class="ttname"><a href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond, msg)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00456">Error.h:456</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1detail_xhtml_a45d610a8bc262f7007c934293361e888"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#a45d610a8bc262f7007c934293361e888">arm_compute::detail::have_different_dimensions</a></div><div class="ttdeci">bool have_different_dimensions(const Dimensions&lt; T &gt; &amp;dim1, const Dimensions&lt; T &gt; &amp;dim2, unsigned int upper_dim)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00047">Validate.h:47</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_kernel_component_xhtml_a1fc1a2e53da700eaa825c4174f8122db"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_kernel_component.xhtml#a1fc1a2e53da700eaa825c4174f8122db">arm_compute::experimental::dynamic_fusion::IGpuKernelComponent::properties</a></div><div class="ttdeci">Properties properties() const</div><div class="ttdoc">Get properties.</div><div class="ttdef"><b>Definition:</b> <a href="_i_gpu_kernel_component_8h_source.xhtml#l00102">IGpuKernelComponent.h:102</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_ab26c0327042b802ca8cff46a9bc67670a1fbb1e3943c2c6c560247ac8f9289780"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670a1fbb1e3943c2c6c560247ac8f9289780">arm_compute::experimental::dynamic_fusion::GpuComponentType::Simple</a></div><div class="ttdeci">@ Simple</div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group_xhtml_a50c05c157214ae20fac43d5ee4afaf6f"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a50c05c157214ae20fac43d5ee4afaf6f">arm_compute::experimental::dynamic_fusion::GpuKernelComponentGroup::max_dst_tensors</a></div><div class="ttdeci">static constexpr size_t max_dst_tensors</div><div class="ttdoc">Maximum number of dst tensors allowed for a component / component.</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_kernel_component_group_8h_source.xhtml#l00071">GpuKernelComponentGroup.h:71</a></div></div>
<div class="ttc" id="a_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00066">ClWorkloadRuntime.cpp:66</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_ab26c0327042b802ca8cff46a9bc67670ae157cdc2ee225c7a081c7bae83f17b0c"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670ae157cdc2ee225c7a081c7bae83f17b0c">arm_compute::experimental::dynamic_fusion::GpuComponentType::Unfusable</a></div><div class="ttdeci">@ Unfusable</div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group_xhtml_a818410cf1e2a1bbc959a118f52df0558"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#a818410cf1e2a1bbc959a118f52df0558">arm_compute::experimental::dynamic_fusion::GpuKernelComponentGroup::max_fused_components</a></div><div class="ttdeci">static constexpr size_t max_fused_components</div><div class="ttdoc">Maximum number of components that can be fused into the same component group.</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_kernel_component_group_8h_source.xhtml#l00068">GpuKernelComponentGroup.h:68</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_kernel_component_xhtml_a6c87c6e19567bc42bc52d166728c4461"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_kernel_component.xhtml#a6c87c6e19567bc42bc52d166728c4461">arm_compute::experimental::dynamic_fusion::IGpuKernelComponent::tensors</a></div><div class="ttdeci">ArgumentPack&lt; ITensorInfo &gt; tensors() const</div><div class="ttdoc">Get tensor arguments.</div><div class="ttdef"><b>Definition:</b> <a href="_i_gpu_kernel_component_8h_source.xhtml#l00097">IGpuKernelComponent.h:97</a></div></div>
<div class="ttc" id="anamespacetf__frozen__model__extractor_xhtml_aaccc9105df5383111407fd5b41255e23"><div class="ttname"><a href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">tf_frozen_model_extractor.t</a></div><div class="ttdeci">t</div><div class="ttdef"><b>Definition:</b> <a href="tf__frozen__model__extractor_8py_source.xhtml#l00049">tf_frozen_model_extractor.py:49</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1experimental.xhtml">experimental</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml">dynamic_fusion</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml">GpuKernelComponentGroup</a></li>
    <li class="footer">Generated on Wed Jul 5 2023 11:29:29 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
