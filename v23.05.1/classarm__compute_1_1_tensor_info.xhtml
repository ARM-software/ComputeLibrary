<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: TensorInfo Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.05.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classarm__compute_1_1_tensor_info.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#friends">Friends</a>  </div>
  <div class="headertitle">
<div class="title">TensorInfo Class Reference<span class="mlabels"><span class="mlabel">final</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p>Store the tensor's metadata.  
 <a href="classarm__compute_1_1_tensor_info.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for TensorInfo:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classarm__compute_1_1_tensor_info__coll__graph.svg" width="212" height="279"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a21c2ae9fa438faf42669dadda628080c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a21c2ae9fa438faf42669dadda628080c">TensorInfo</a> ()</td></tr>
<tr class="memdesc:a21c2ae9fa438faf42669dadda628080c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="classarm__compute_1_1_tensor_info.xhtml#a21c2ae9fa438faf42669dadda628080c">More...</a><br /></td></tr>
<tr class="separator:a21c2ae9fa438faf42669dadda628080c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4eb5913c3ce5fe2bcbaafd8c9224d384"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a4eb5913c3ce5fe2bcbaafd8c9224d384">~TensorInfo</a> ()=default</td></tr>
<tr class="memdesc:a4eb5913c3ce5fe2bcbaafd8c9224d384"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default destructor.  <a href="classarm__compute_1_1_tensor_info.xhtml#a4eb5913c3ce5fe2bcbaafd8c9224d384">More...</a><br /></td></tr>
<tr class="separator:a4eb5913c3ce5fe2bcbaafd8c9224d384"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a57911f186d22f552382d39010c09097d"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a57911f186d22f552382d39010c09097d">TensorInfo</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;info)</td></tr>
<tr class="memdesc:a57911f186d22f552382d39010c09097d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be copy constructed.  <a href="classarm__compute_1_1_tensor_info.xhtml#a57911f186d22f552382d39010c09097d">More...</a><br /></td></tr>
<tr class="separator:a57911f186d22f552382d39010c09097d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22d3741e7b76a18da3621f67d4335608"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a22d3741e7b76a18da3621f67d4335608">TensorInfo</a> (const <a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;)</td></tr>
<tr class="memdesc:a22d3741e7b76a18da3621f67d4335608"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be copy constructed.  <a href="classarm__compute_1_1_tensor_info.xhtml#a22d3741e7b76a18da3621f67d4335608">More...</a><br /></td></tr>
<tr class="separator:a22d3741e7b76a18da3621f67d4335608"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adcf156ba30ff118c28690671e83ea06b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#adcf156ba30ff118c28690671e83ea06b">operator=</a> (const <a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;)=default</td></tr>
<tr class="memdesc:adcf156ba30ff118c28690671e83ea06b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be copied.  <a href="classarm__compute_1_1_tensor_info.xhtml#adcf156ba30ff118c28690671e83ea06b">More...</a><br /></td></tr>
<tr class="separator:adcf156ba30ff118c28690671e83ea06b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a134dfebc14c0e971f8df850846764f8e"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a134dfebc14c0e971f8df850846764f8e">TensorInfo</a> (<a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:a134dfebc14c0e971f8df850846764f8e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be move constructed.  <a href="classarm__compute_1_1_tensor_info.xhtml#a134dfebc14c0e971f8df850846764f8e">More...</a><br /></td></tr>
<tr class="separator:a134dfebc14c0e971f8df850846764f8e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a532c27f6bf3cd9275cb7fc9a0d0bbf6e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a532c27f6bf3cd9275cb7fc9a0d0bbf6e">operator=</a> (<a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:a532c27f6bf3cd9275cb7fc9a0d0bbf6e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be moved.  <a href="classarm__compute_1_1_tensor_info.xhtml#a532c27f6bf3cd9275cb7fc9a0d0bbf6e">More...</a><br /></td></tr>
<tr class="separator:a532c27f6bf3cd9275cb7fc9a0d0bbf6e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6762d60a00d7d09087ea5cb41d4392a8"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a6762d60a00d7d09087ea5cb41d4392a8">TensorInfo</a> (<a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a>)</td></tr>
<tr class="memdesc:a6762d60a00d7d09087ea5cb41d4392a8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct a tensor info with a format.  <a href="classarm__compute_1_1_tensor_info.xhtml#a6762d60a00d7d09087ea5cb41d4392a8">More...</a><br /></td></tr>
<tr class="separator:a6762d60a00d7d09087ea5cb41d4392a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac307dc31ce68e3cf1273ffbc86e57646"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ac307dc31ce68e3cf1273ffbc86e57646">TensorInfo</a> (unsigned int width, unsigned int height, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a>)</td></tr>
<tr class="memdesc:ac307dc31ce68e3cf1273ffbc86e57646"><td class="mdescLeft">&#160;</td><td class="mdescRight">2D tensor constructor  <a href="classarm__compute_1_1_tensor_info.xhtml#ac307dc31ce68e3cf1273ffbc86e57646">More...</a><br /></td></tr>
<tr class="separator:ac307dc31ce68e3cf1273ffbc86e57646"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9fa5acc4d8fd911b9b2fece99d3d5a8d"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a9fa5acc4d8fd911b9b2fece99d3d5a8d">TensorInfo</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a>)</td></tr>
<tr class="memdesc:a9fa5acc4d8fd911b9b2fece99d3d5a8d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor.  <a href="classarm__compute_1_1_tensor_info.xhtml#a9fa5acc4d8fd911b9b2fece99d3d5a8d">More...</a><br /></td></tr>
<tr class="separator:a9fa5acc4d8fd911b9b2fece99d3d5a8d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e1c061accc47c7fa11d0f014d3795f9"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a6e1c061accc47c7fa11d0f014d3795f9">TensorInfo</a> (size_t <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a6f13b974eeb528acde66de8d9b3fd95c">num_channels</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a>)</td></tr>
<tr class="memdesc:a6e1c061accc47c7fa11d0f014d3795f9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct a tensor info with a data type and number of channels.  <a href="classarm__compute_1_1_tensor_info.xhtml#a6e1c061accc47c7fa11d0f014d3795f9">More...</a><br /></td></tr>
<tr class="separator:a6e1c061accc47c7fa11d0f014d3795f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a734bdd7d65d40aa012ebeb172fda955a"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a734bdd7d65d40aa012ebeb172fda955a">TensorInfo</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>, size_t <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a6f13b974eeb528acde66de8d9b3fd95c">num_channels</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a>)</td></tr>
<tr class="memdesc:a734bdd7d65d40aa012ebeb172fda955a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor.  <a href="classarm__compute_1_1_tensor_info.xhtml#a734bdd7d65d40aa012ebeb172fda955a">More...</a><br /></td></tr>
<tr class="separator:a734bdd7d65d40aa012ebeb172fda955a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ada1b0e37199034ffbcfe1b4f833be69f"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ada1b0e37199034ffbcfe1b4f833be69f">TensorInfo</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>, size_t <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a6f13b974eeb528acde66de8d9b3fd95c">num_channels</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a>, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a5f63b63606dbbbe54474e6e970a6738c">data_layout</a>)</td></tr>
<tr class="memdesc:ada1b0e37199034ffbcfe1b4f833be69f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor.  <a href="classarm__compute_1_1_tensor_info.xhtml#ada1b0e37199034ffbcfe1b4f833be69f">More...</a><br /></td></tr>
<tr class="separator:ada1b0e37199034ffbcfe1b4f833be69f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3017dc3990baec97aa09599b82c63b1b"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a3017dc3990baec97aa09599b82c63b1b">TensorInfo</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>, size_t <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a6f13b974eeb528acde66de8d9b3fd95c">num_channels</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a>, <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ac74736e3863207232a23b7181c1d0f44">quantization_info</a>)</td></tr>
<tr class="memdesc:a3017dc3990baec97aa09599b82c63b1b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor.  <a href="classarm__compute_1_1_tensor_info.xhtml#a3017dc3990baec97aa09599b82c63b1b">More...</a><br /></td></tr>
<tr class="separator:a3017dc3990baec97aa09599b82c63b1b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad6b64f33be1e66dcf7612483ffb8fd63"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ad6b64f33be1e66dcf7612483ffb8fd63">init</a> (<a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a>)</td></tr>
<tr class="memdesc:ad6b64f33be1e66dcf7612483ffb8fd63"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize the tensor info with just a format.  <a href="classarm__compute_1_1_tensor_info.xhtml#ad6b64f33be1e66dcf7612483ffb8fd63">More...</a><br /></td></tr>
<tr class="separator:ad6b64f33be1e66dcf7612483ffb8fd63"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0ae7d318c02e56a3daa9e5e4f9dab117"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a0ae7d318c02e56a3daa9e5e4f9dab117">init</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a>)</td></tr>
<tr class="memdesc:a0ae7d318c02e56a3daa9e5e4f9dab117"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize the metadata structure with the given parameters.  <a href="classarm__compute_1_1_tensor_info.xhtml#a0ae7d318c02e56a3daa9e5e4f9dab117">More...</a><br /></td></tr>
<tr class="separator:a0ae7d318c02e56a3daa9e5e4f9dab117"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4b6171ddcf854de5d1226cd4d0b0439"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ad4b6171ddcf854de5d1226cd4d0b0439">init</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a>, const <a class="el" href="classarm__compute_1_1_strides.xhtml">Strides</a> &amp;<a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a5f1ca9d674346287cae57a6c5b5c24ec">strides_in_bytes</a>, size_t <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ab54246abe670b06f5624add7e7022904">offset_first_element_in_bytes</a>, size_t total_size_in_bytes)</td></tr>
<tr class="memdesc:ad4b6171ddcf854de5d1226cd4d0b0439"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize the metadata structure with the given parameters.  <a href="classarm__compute_1_1_tensor_info.xhtml#ad4b6171ddcf854de5d1226cd4d0b0439">More...</a><br /></td></tr>
<tr class="separator:ad4b6171ddcf854de5d1226cd4d0b0439"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a999abf93eb224a2aee25de3309571d4e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a999abf93eb224a2aee25de3309571d4e">init</a> (size_t <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a6f13b974eeb528acde66de8d9b3fd95c">num_channels</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a>)</td></tr>
<tr class="memdesc:a999abf93eb224a2aee25de3309571d4e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize the tensor info with just a format.  <a href="classarm__compute_1_1_tensor_info.xhtml#a999abf93eb224a2aee25de3309571d4e">More...</a><br /></td></tr>
<tr class="separator:a999abf93eb224a2aee25de3309571d4e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac745167b7289cd4510034dbe81d5052a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ac745167b7289cd4510034dbe81d5052a">init</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>, size_t <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a6f13b974eeb528acde66de8d9b3fd95c">num_channels</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a>)</td></tr>
<tr class="memdesc:ac745167b7289cd4510034dbe81d5052a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize the metadata structure with the given parameters.  <a href="classarm__compute_1_1_tensor_info.xhtml#ac745167b7289cd4510034dbe81d5052a">More...</a><br /></td></tr>
<tr class="separator:ac745167b7289cd4510034dbe81d5052a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a09eca3bb738e38daa8445461bfaf1f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a4a09eca3bb738e38daa8445461bfaf1f">init</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>, size_t <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a6f13b974eeb528acde66de8d9b3fd95c">num_channels</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a>, const <a class="el" href="classarm__compute_1_1_strides.xhtml">Strides</a> &amp;<a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a5f1ca9d674346287cae57a6c5b5c24ec">strides_in_bytes</a>, size_t <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ab54246abe670b06f5624add7e7022904">offset_first_element_in_bytes</a>, size_t total_size_in_bytes)</td></tr>
<tr class="memdesc:a4a09eca3bb738e38daa8445461bfaf1f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize the metadata structure with the given parameters.  <a href="classarm__compute_1_1_tensor_info.xhtml#a4a09eca3bb738e38daa8445461bfaf1f">More...</a><br /></td></tr>
<tr class="separator:a4a09eca3bb738e38daa8445461bfaf1f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b7391b7025befbe44b743723feb4a9b"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a4b7391b7025befbe44b743723feb4a9b">init_auto_padding</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a>)</td></tr>
<tr class="memdesc:a4b7391b7025befbe44b743723feb4a9b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize the metadata structure for the given tensor shape and single-plane format, (Padding is automatically calculated)  <a href="classarm__compute_1_1_tensor_info.xhtml#a4b7391b7025befbe44b743723feb4a9b">More...</a><br /></td></tr>
<tr class="separator:a4b7391b7025befbe44b743723feb4a9b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e70695e962af8b66bea2ad092269ee3"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a5e70695e962af8b66bea2ad092269ee3">init_auto_padding</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>, size_t <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a6f13b974eeb528acde66de8d9b3fd95c">num_channels</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a>)</td></tr>
<tr class="memdesc:a5e70695e962af8b66bea2ad092269ee3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize the metadata structure for the given tensor shape, number of channels and data type.  <a href="classarm__compute_1_1_tensor_info.xhtml#a5e70695e962af8b66bea2ad092269ee3">More...</a><br /></td></tr>
<tr class="separator:a5e70695e962af8b66bea2ad092269ee3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afbc359bde9be72a6edab175978e56662"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#afbc359bde9be72a6edab175978e56662">clone</a> () const override</td></tr>
<tr class="separator:afbc359bde9be72a6edab175978e56662"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0a9053e6c4729ac5201b58068050c319"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a0a9053e6c4729ac5201b58068050c319">set_data_type</a> (<a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a>) override</td></tr>
<tr class="memdesc:a0a9053e6c4729ac5201b58068050c319"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the data type to the specified value.  <a href="classarm__compute_1_1_tensor_info.xhtml#a0a9053e6c4729ac5201b58068050c319">More...</a><br /></td></tr>
<tr class="separator:a0a9053e6c4729ac5201b58068050c319"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad03af3eeb6f3666d6282ca689c1b2ce8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ad03af3eeb6f3666d6282ca689c1b2ce8">set_num_channels</a> (int <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a6f13b974eeb528acde66de8d9b3fd95c">num_channels</a>) override</td></tr>
<tr class="memdesc:ad03af3eeb6f3666d6282ca689c1b2ce8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the number of channels to the specified value.  <a href="classarm__compute_1_1_tensor_info.xhtml#ad03af3eeb6f3666d6282ca689c1b2ce8">More...</a><br /></td></tr>
<tr class="separator:ad03af3eeb6f3666d6282ca689c1b2ce8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a523a68398c1a8161daa4238c15e065fa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a523a68398c1a8161daa4238c15e065fa">set_format</a> (<a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a>) override</td></tr>
<tr class="memdesc:a523a68398c1a8161daa4238c15e065fa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the format of an already initialized tensor.  <a href="classarm__compute_1_1_tensor_info.xhtml#a523a68398c1a8161daa4238c15e065fa">More...</a><br /></td></tr>
<tr class="separator:a523a68398c1a8161daa4238c15e065fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2d7e8b8e05c3318b2d90c40d781745d2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a2d7e8b8e05c3318b2d90c40d781745d2">set_tensor_shape</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape) override</td></tr>
<tr class="memdesc:a2d7e8b8e05c3318b2d90c40d781745d2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the shape of an already initialized tensor.  <a href="classarm__compute_1_1_tensor_info.xhtml#a2d7e8b8e05c3318b2d90c40d781745d2">More...</a><br /></td></tr>
<tr class="separator:a2d7e8b8e05c3318b2d90c40d781745d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41993c2ff0ae139b5729d63eab5fd6ef"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a41993c2ff0ae139b5729d63eab5fd6ef">set_tensor_dims_state</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ae0e15b554cc3958445da66fc718423d4">TensorDimsState</a> &amp;state) override</td></tr>
<tr class="memdesc:a41993c2ff0ae139b5729d63eab5fd6ef"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the state for each dimension of the tensor.  <a href="classarm__compute_1_1_tensor_info.xhtml#a41993c2ff0ae139b5729d63eab5fd6ef">More...</a><br /></td></tr>
<tr class="separator:a41993c2ff0ae139b5729d63eab5fd6ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a78839e7861ba8ffed52ca55da2745761"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a78839e7861ba8ffed52ca55da2745761">set_quantization_info</a> (const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;<a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ac74736e3863207232a23b7181c1d0f44">quantization_info</a>) override</td></tr>
<tr class="memdesc:a78839e7861ba8ffed52ca55da2745761"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the quantization settings (scale and offset) of the tensor.  <a href="classarm__compute_1_1_tensor_info.xhtml#a78839e7861ba8ffed52ca55da2745761">More...</a><br /></td></tr>
<tr class="separator:a78839e7861ba8ffed52ca55da2745761"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70b6e1495b94818cce4981dbac6bdd66"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a70b6e1495b94818cce4981dbac6bdd66">set_data_layout</a> (const <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> &amp;<a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a5f63b63606dbbbe54474e6e970a6738c">data_layout</a>) override</td></tr>
<tr class="memdesc:a70b6e1495b94818cce4981dbac6bdd66"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the data layout of the tensor.  <a href="classarm__compute_1_1_tensor_info.xhtml#a70b6e1495b94818cce4981dbac6bdd66">More...</a><br /></td></tr>
<tr class="separator:a70b6e1495b94818cce4981dbac6bdd66"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a80b3a6ae624417617d6a8d3209add5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a5a80b3a6ae624417617d6a8d3209add5">reset_padding</a> () override</td></tr>
<tr class="memdesc:a5a80b3a6ae624417617d6a8d3209add5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Resets the padding settings of the tensor.  <a href="classarm__compute_1_1_tensor_info.xhtml#a5a80b3a6ae624417617d6a8d3209add5">More...</a><br /></td></tr>
<tr class="separator:a5a80b3a6ae624417617d6a8d3209add5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a907f837b924945ad1981c8fe8eca61e4"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a907f837b924945ad1981c8fe8eca61e4">auto_padding</a> () override</td></tr>
<tr class="memdesc:a907f837b924945ad1981c8fe8eca61e4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Update the offset to the first element and the strides to automatically computed values.  <a href="classarm__compute_1_1_tensor_info.xhtml#a907f837b924945ad1981c8fe8eca61e4">More...</a><br /></td></tr>
<tr class="separator:a907f837b924945ad1981c8fe8eca61e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1dcbc382dfd3636b4d9f1bf6edb503ac"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a1dcbc382dfd3636b4d9f1bf6edb503ac">set_lock_paddings</a> (bool flag) override</td></tr>
<tr class="memdesc:a1dcbc382dfd3636b4d9f1bf6edb503ac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the lock paddings flag of the tensor.  <a href="classarm__compute_1_1_tensor_info.xhtml#a1dcbc382dfd3636b4d9f1bf6edb503ac">More...</a><br /></td></tr>
<tr class="separator:a1dcbc382dfd3636b4d9f1bf6edb503ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad06ab3e37dabddbed46f11ea037df4ca"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ad06ab3e37dabddbed46f11ea037df4ca">lock_paddings</a> () const override</td></tr>
<tr class="memdesc:ad06ab3e37dabddbed46f11ea037df4ca"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the lock paddings flag value.  <a href="classarm__compute_1_1_tensor_info.xhtml#ad06ab3e37dabddbed46f11ea037df4ca">More...</a><br /></td></tr>
<tr class="separator:ad06ab3e37dabddbed46f11ea037df4ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af53d8203ecc37896ca4579d1ee3fdffc"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#af53d8203ecc37896ca4579d1ee3fdffc">extend_padding</a> (const <a class="el" href="namespacearm__compute.xhtml#a4467b302fc9ec312c40580336ab783da">PaddingSize</a> &amp;<a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a79e20eacb1e963e24a21ebd7369effd7">padding</a>) override</td></tr>
<tr class="memdesc:af53d8203ecc37896ca4579d1ee3fdffc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Update the offset to the first element, the strides and the total size.  <a href="classarm__compute_1_1_tensor_info.xhtml#af53d8203ecc37896ca4579d1ee3fdffc">More...</a><br /></td></tr>
<tr class="separator:af53d8203ecc37896ca4579d1ee3fdffc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8813441b655b97c00139c6a5a6390e97"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a8813441b655b97c00139c6a5a6390e97">dimension</a> (size_t index) const override</td></tr>
<tr class="memdesc:a8813441b655b97c00139c6a5a6390e97"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the size of the requested dimension.  <a href="classarm__compute_1_1_tensor_info.xhtml#a8813441b655b97c00139c6a5a6390e97">More...</a><br /></td></tr>
<tr class="separator:a8813441b655b97c00139c6a5a6390e97"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a650247f9a828d1ef60135b01f8f77765"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a650247f9a828d1ef60135b01f8f77765">dimension</a> (<a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02">DataLayoutDimension</a> dimension) const override</td></tr>
<tr class="memdesc:a650247f9a828d1ef60135b01f8f77765"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the size of the requested data layout dimension.  <a href="classarm__compute_1_1_tensor_info.xhtml#a650247f9a828d1ef60135b01f8f77765">More...</a><br /></td></tr>
<tr class="separator:a650247f9a828d1ef60135b01f8f77765"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5f1ca9d674346287cae57a6c5b5c24ec"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarm__compute_1_1_strides.xhtml">Strides</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a5f1ca9d674346287cae57a6c5b5c24ec">strides_in_bytes</a> () const override</td></tr>
<tr class="memdesc:a5f1ca9d674346287cae57a6c5b5c24ec"><td class="mdescLeft">&#160;</td><td class="mdescRight">The strides in bytes for accessing each dimension of the tensor.  <a href="classarm__compute_1_1_tensor_info.xhtml#a5f1ca9d674346287cae57a6c5b5c24ec">More...</a><br /></td></tr>
<tr class="separator:a5f1ca9d674346287cae57a6c5b5c24ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab54246abe670b06f5624add7e7022904"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ab54246abe670b06f5624add7e7022904">offset_first_element_in_bytes</a> () const override</td></tr>
<tr class="memdesc:ab54246abe670b06f5624add7e7022904"><td class="mdescLeft">&#160;</td><td class="mdescRight">The offset from the beginning of the memory allocation to the first element of the tensor.  <a href="classarm__compute_1_1_tensor_info.xhtml#ab54246abe670b06f5624add7e7022904">More...</a><br /></td></tr>
<tr class="separator:ab54246abe670b06f5624add7e7022904"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7888888b7f18215ae83fd3660d38eccb"><td class="memItemLeft" align="right" valign="top">int32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a7888888b7f18215ae83fd3660d38eccb">offset_element_in_bytes</a> (const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;pos) const override</td></tr>
<tr class="memdesc:a7888888b7f18215ae83fd3660d38eccb"><td class="mdescLeft">&#160;</td><td class="mdescRight">The offset in bytes from the beginning of the memory allocation to access the element at position (x, y, z ...)  <a href="classarm__compute_1_1_tensor_info.xhtml#a7888888b7f18215ae83fd3660d38eccb">More...</a><br /></td></tr>
<tr class="separator:a7888888b7f18215ae83fd3660d38eccb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a62b67b578f684c4d516843c9dea86a23"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a62b67b578f684c4d516843c9dea86a23">element_size</a> () const override</td></tr>
<tr class="memdesc:a62b67b578f684c4d516843c9dea86a23"><td class="mdescLeft">&#160;</td><td class="mdescRight">Element size in bytes calculated as data_size() * <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a6f13b974eeb528acde66de8d9b3fd95c" title="The number of channels for each tensor element.">num_channels()</a>  <a href="classarm__compute_1_1_tensor_info.xhtml#a62b67b578f684c4d516843c9dea86a23">More...</a><br /></td></tr>
<tr class="separator:a62b67b578f684c4d516843c9dea86a23"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a13622133d9b41900a6a3e8f89e59a78b"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a13622133d9b41900a6a3e8f89e59a78b">num_dimensions</a> () const override</td></tr>
<tr class="memdesc:a13622133d9b41900a6a3e8f89e59a78b"><td class="mdescLeft">&#160;</td><td class="mdescRight">The number of dimensions of the tensor (rank)  <a href="classarm__compute_1_1_tensor_info.xhtml#a13622133d9b41900a6a3e8f89e59a78b">More...</a><br /></td></tr>
<tr class="separator:a13622133d9b41900a6a3e8f89e59a78b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f13b974eeb528acde66de8d9b3fd95c"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a6f13b974eeb528acde66de8d9b3fd95c">num_channels</a> () const override</td></tr>
<tr class="memdesc:a6f13b974eeb528acde66de8d9b3fd95c"><td class="mdescLeft">&#160;</td><td class="mdescRight">The number of channels for each tensor element.  <a href="classarm__compute_1_1_tensor_info.xhtml#a6f13b974eeb528acde66de8d9b3fd95c">More...</a><br /></td></tr>
<tr class="separator:a6f13b974eeb528acde66de8d9b3fd95c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a269b19ce3f357ac65f41f9951906e38e"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a> () const override</td></tr>
<tr class="memdesc:a269b19ce3f357ac65f41f9951906e38e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Size for each dimension of the tensor.  <a href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">More...</a><br /></td></tr>
<tr class="separator:a269b19ce3f357ac65f41f9951906e38e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0536d1b12af6338cd00919f78d10c0f"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ae0e15b554cc3958445da66fc718423d4">TensorDimsState</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ac0536d1b12af6338cd00919f78d10c0f">tensor_dims_state</a> () const override</td></tr>
<tr class="memdesc:ac0536d1b12af6338cd00919f78d10c0f"><td class="mdescLeft">&#160;</td><td class="mdescRight">State of each dimension of the tensor shape.  <a href="classarm__compute_1_1_tensor_info.xhtml#ac0536d1b12af6338cd00919f78d10c0f">More...</a><br /></td></tr>
<tr class="separator:ac0536d1b12af6338cd00919f78d10c0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a3e72153aeb3ed212e9c3698774e881"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a> () const override</td></tr>
<tr class="memdesc:a9a3e72153aeb3ed212e9c3698774e881"><td class="mdescLeft">&#160;</td><td class="mdescRight">Data type used for each element of the tensor.  <a href="classarm__compute_1_1_tensor_info.xhtml#a9a3e72153aeb3ed212e9c3698774e881">More...</a><br /></td></tr>
<tr class="separator:a9a3e72153aeb3ed212e9c3698774e881"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac4b36cc1e56b0b7e579bb4b7196490db"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a> () const override</td></tr>
<tr class="memdesc:ac4b36cc1e56b0b7e579bb4b7196490db"><td class="mdescLeft">&#160;</td><td class="mdescRight">Colour format of the image.  <a href="classarm__compute_1_1_tensor_info.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">More...</a><br /></td></tr>
<tr class="separator:ac4b36cc1e56b0b7e579bb4b7196490db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af398466b602a02b42d8df19fb66a6c60"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#af398466b602a02b42d8df19fb66a6c60">total_size</a> () const override</td></tr>
<tr class="memdesc:af398466b602a02b42d8df19fb66a6c60"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the total size of the tensor in bytes.  <a href="classarm__compute_1_1_tensor_info.xhtml#af398466b602a02b42d8df19fb66a6c60">More...</a><br /></td></tr>
<tr class="separator:af398466b602a02b42d8df19fb66a6c60"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79e20eacb1e963e24a21ebd7369effd7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#a4467b302fc9ec312c40580336ab783da">PaddingSize</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a79e20eacb1e963e24a21ebd7369effd7">padding</a> () const override</td></tr>
<tr class="memdesc:a79e20eacb1e963e24a21ebd7369effd7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Padding of tensor.  <a href="classarm__compute_1_1_tensor_info.xhtml#a79e20eacb1e963e24a21ebd7369effd7">More...</a><br /></td></tr>
<tr class="separator:a79e20eacb1e963e24a21ebd7369effd7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2ca251f99c56767719e991a26371603"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#aa2ca251f99c56767719e991a26371603">has_padding</a> () const override</td></tr>
<tr class="memdesc:aa2ca251f99c56767719e991a26371603"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks if the tensor has been allocated with padding or not.  <a href="classarm__compute_1_1_tensor_info.xhtml#aa2ca251f99c56767719e991a26371603">More...</a><br /></td></tr>
<tr class="separator:aa2ca251f99c56767719e991a26371603"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaee6555ace43b03173844b1a228a3fc3"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#aaee6555ace43b03173844b1a228a3fc3">is_resizable</a> () const override</td></tr>
<tr class="memdesc:aaee6555ace43b03173844b1a228a3fc3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Flag indicating whether the size of the tensor can be changed.  <a href="classarm__compute_1_1_tensor_info.xhtml#aaee6555ace43b03173844b1a228a3fc3">More...</a><br /></td></tr>
<tr class="separator:aaee6555ace43b03173844b1a228a3fc3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e890c9c5d4143d64a83b4ac19f4d3e4"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a7e890c9c5d4143d64a83b4ac19f4d3e4">is_dynamic</a> () const override</td></tr>
<tr class="memdesc:a7e890c9c5d4143d64a83b4ac19f4d3e4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Flag indicating whether the shape of the tensor is dynamic, meaning that it can change on kernel/function execution.  <a href="classarm__compute_1_1_tensor_info.xhtml#a7e890c9c5d4143d64a83b4ac19f4d3e4">More...</a><br /></td></tr>
<tr class="separator:a7e890c9c5d4143d64a83b4ac19f4d3e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a131e55044642ad05641f9bcbf94d208a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a131e55044642ad05641f9bcbf94d208a">are_values_constant</a> () const override</td></tr>
<tr class="memdesc:a131e55044642ad05641f9bcbf94d208a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Flag indicating whether the values of the tensor are constant, meaning that they can change on kernel/function execution.  <a href="classarm__compute_1_1_tensor_info.xhtml#a131e55044642ad05641f9bcbf94d208a">More...</a><br /></td></tr>
<tr class="separator:a131e55044642ad05641f9bcbf94d208a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a78bf77b2d9b959259f77a32b9a412184"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a78bf77b2d9b959259f77a32b9a412184">set_is_resizable</a> (bool <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#aaee6555ace43b03173844b1a228a3fc3">is_resizable</a>) override</td></tr>
<tr class="memdesc:a78bf77b2d9b959259f77a32b9a412184"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the flag whether the tensor size can be changed.  <a href="classarm__compute_1_1_tensor_info.xhtml#a78bf77b2d9b959259f77a32b9a412184">More...</a><br /></td></tr>
<tr class="separator:a78bf77b2d9b959259f77a32b9a412184"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c20d908342087484d883574d55dd482"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a3c20d908342087484d883574d55dd482">valid_region</a> () const override</td></tr>
<tr class="memdesc:a3c20d908342087484d883574d55dd482"><td class="mdescLeft">&#160;</td><td class="mdescRight">Valid region of the tensor.  <a href="classarm__compute_1_1_tensor_info.xhtml#a3c20d908342087484d883574d55dd482">More...</a><br /></td></tr>
<tr class="separator:a3c20d908342087484d883574d55dd482"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a43e45363267b6bce4bb6770febe9ce11"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a43e45363267b6bce4bb6770febe9ce11">set_valid_region</a> (const <a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;<a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a3c20d908342087484d883574d55dd482">valid_region</a>) override</td></tr>
<tr class="memdesc:a43e45363267b6bce4bb6770febe9ce11"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the valid region of the tensor.  <a href="classarm__compute_1_1_tensor_info.xhtml#a43e45363267b6bce4bb6770febe9ce11">More...</a><br /></td></tr>
<tr class="separator:a43e45363267b6bce4bb6770febe9ce11"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac74736e3863207232a23b7181c1d0f44"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ac74736e3863207232a23b7181c1d0f44">quantization_info</a> () const override</td></tr>
<tr class="memdesc:ac74736e3863207232a23b7181c1d0f44"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the quantization settings (scale and offset) of the tensor.  <a href="classarm__compute_1_1_tensor_info.xhtml#ac74736e3863207232a23b7181c1d0f44">More...</a><br /></td></tr>
<tr class="separator:ac74736e3863207232a23b7181c1d0f44"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5f63b63606dbbbe54474e6e970a6738c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a5f63b63606dbbbe54474e6e970a6738c">data_layout</a> () const override</td></tr>
<tr class="memdesc:a5f63b63606dbbbe54474e6e970a6738c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the data layout of the tensor.  <a href="classarm__compute_1_1_tensor_info.xhtml#a5f63b63606dbbbe54474e6e970a6738c">More...</a><br /></td></tr>
<tr class="separator:a5f63b63606dbbbe54474e6e970a6738c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a77e0f184dff4fa2111259c16fba2ecfa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a77e0f184dff4fa2111259c16fba2ecfa">set_are_values_constant</a> (bool <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a131e55044642ad05641f9bcbf94d208a">are_values_constant</a>) override</td></tr>
<tr class="memdesc:a77e0f184dff4fa2111259c16fba2ecfa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the flag whether the tensor values can change during kernel/function execution.  <a href="classarm__compute_1_1_tensor_info.xhtml#a77e0f184dff4fa2111259c16fba2ecfa">More...</a><br /></td></tr>
<tr class="separator:a77e0f184dff4fa2111259c16fba2ecfa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5b041295b3b91cef1c6ff19132d5d471"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a1fafaeb6e3ab8c0bc772532cc3fcff1a">ITensorInfo::Id</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a5b041295b3b91cef1c6ff19132d5d471">id</a> () const override</td></tr>
<tr class="memdesc:a5b041295b3b91cef1c6ff19132d5d471"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the workload tensor id of the tensor.  <a href="classarm__compute_1_1_tensor_info.xhtml#a5b041295b3b91cef1c6ff19132d5d471">More...</a><br /></td></tr>
<tr class="separator:a5b041295b3b91cef1c6ff19132d5d471"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af22c0fe6675ceca54060c04707ae2ef6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#af22c0fe6675ceca54060c04707ae2ef6">set_id</a> (<a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a1fafaeb6e3ab8c0bc772532cc3fcff1a">ITensorInfo::Id</a> <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a5b041295b3b91cef1c6ff19132d5d471">id</a>) override</td></tr>
<tr class="memdesc:af22c0fe6675ceca54060c04707ae2ef6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the tensor id.  <a href="classarm__compute_1_1_tensor_info.xhtml#af22c0fe6675ceca54060c04707ae2ef6">More...</a><br /></td></tr>
<tr class="separator:af22c0fe6675ceca54060c04707ae2ef6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarm__compute_1_1_i_tensor_info"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarm__compute_1_1_i_tensor_info')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a></td></tr>
<tr class="memitem:ad998b50febf68540277e121a9c670bfa inherit pub_methods_classarm__compute_1_1_i_tensor_info"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ad998b50febf68540277e121a9c670bfa">~ITensorInfo</a> ()=default</td></tr>
<tr class="memdesc:ad998b50febf68540277e121a9c670bfa inherit pub_methods_classarm__compute_1_1_i_tensor_info"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default virtual destructor.  <a href="classarm__compute_1_1_i_tensor_info.xhtml#ad998b50febf68540277e121a9c670bfa">More...</a><br /></td></tr>
<tr class="separator:ad998b50febf68540277e121a9c670bfa inherit pub_methods_classarm__compute_1_1_i_tensor_info"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac3b745acece5fb22971e8888f1d5b4a6 inherit pub_methods_classarm__compute_1_1_i_tensor_info"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ac3b745acece5fb22971e8888f1d5b4a6">has_valid_id</a> () const</td></tr>
<tr class="memdesc:ac3b745acece5fb22971e8888f1d5b4a6 inherit pub_methods_classarm__compute_1_1_i_tensor_info"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if the tensor id is valid.  <a href="classarm__compute_1_1_i_tensor_info.xhtml#ac3b745acece5fb22971e8888f1d5b4a6">More...</a><br /></td></tr>
<tr class="separator:ac3b745acece5fb22971e8888f1d5b4a6 inherit pub_methods_classarm__compute_1_1_i_tensor_info"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarm__compute_1_1misc_1_1_i_cloneable"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarm__compute_1_1misc_1_1_i_cloneable')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarm__compute_1_1misc_1_1_i_cloneable.xhtml">ICloneable&lt; ITensorInfo &gt;</a></td></tr>
<tr class="memitem:a711fa7a27557369760fc1fd236deb51c inherit pub_methods_classarm__compute_1_1misc_1_1_i_cloneable"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1misc_1_1_i_cloneable.xhtml#a711fa7a27557369760fc1fd236deb51c">~ICloneable</a> ()=default</td></tr>
<tr class="memdesc:a711fa7a27557369760fc1fd236deb51c inherit pub_methods_classarm__compute_1_1misc_1_1_i_cloneable"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default virtual desctructor.  <a href="classarm__compute_1_1misc_1_1_i_cloneable.xhtml#a711fa7a27557369760fc1fd236deb51c">More...</a><br /></td></tr>
<tr class="separator:a711fa7a27557369760fc1fd236deb51c inherit pub_methods_classarm__compute_1_1misc_1_1_i_cloneable"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d10e5012a872e7f78f2b539b673049d inherit pub_methods_classarm__compute_1_1misc_1_1_i_cloneable"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1misc_1_1_i_cloneable.xhtml#a4d10e5012a872e7f78f2b539b673049d">clone</a> () const=0</td></tr>
<tr class="memdesc:a4d10e5012a872e7f78f2b539b673049d inherit pub_methods_classarm__compute_1_1misc_1_1_i_cloneable"><td class="mdescLeft">&#160;</td><td class="mdescRight">Provide a clone of the current object of class T.  <a href="classarm__compute_1_1misc_1_1_i_cloneable.xhtml#a4d10e5012a872e7f78f2b539b673049d">More...</a><br /></td></tr>
<tr class="separator:a4d10e5012a872e7f78f2b539b673049d inherit pub_methods_classarm__compute_1_1misc_1_1_i_cloneable"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:ab096ada540b2eda155d9a2d516682939"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ab096ada540b2eda155d9a2d516682939">operator==</a> (const <a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;lhs, const <a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;rhs)</td></tr>
<tr class="memdesc:ab096ada540b2eda155d9a2d516682939"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check whether two tensor info are equal.  <a href="classarm__compute_1_1_tensor_info.xhtml#ab096ada540b2eda155d9a2d516682939">More...</a><br /></td></tr>
<tr class="separator:ab096ada540b2eda155d9a2d516682939"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pub_types_classarm__compute_1_1_i_tensor_info"><td colspan="2" onclick="javascript:toggleInherit('pub_types_classarm__compute_1_1_i_tensor_info')"><img src="closed.png" alt="-"/>&#160;Public Types inherited from <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a></td></tr>
<tr class="memitem:ae0e15b554cc3958445da66fc718423d4 inherit pub_types_classarm__compute_1_1_i_tensor_info"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ae0e15b554cc3958445da66fc718423d4">TensorDimsState</a> = std::vector&lt; int &gt;</td></tr>
<tr class="separator:ae0e15b554cc3958445da66fc718423d4 inherit pub_types_classarm__compute_1_1_i_tensor_info"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1fafaeb6e3ab8c0bc772532cc3fcff1a inherit pub_types_classarm__compute_1_1_i_tensor_info"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a1fafaeb6e3ab8c0bc772532cc3fcff1a">Id</a> = int32_t</td></tr>
<tr class="memdesc:a1fafaeb6e3ab8c0bc772532cc3fcff1a inherit pub_types_classarm__compute_1_1_i_tensor_info"><td class="mdescLeft">&#160;</td><td class="mdescRight">An id that uniquely identifies an <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">ITensorInfo</a> within some domain (e.g.  <a href="classarm__compute_1_1_i_tensor_info.xhtml#a1fafaeb6e3ab8c0bc772532cc3fcff1a">More...</a><br /></td></tr>
<tr class="separator:a1fafaeb6e3ab8c0bc772532cc3fcff1a inherit pub_types_classarm__compute_1_1_i_tensor_info"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_static_methods_classarm__compute_1_1_i_tensor_info"><td colspan="2" onclick="javascript:toggleInherit('pub_static_methods_classarm__compute_1_1_i_tensor_info')"><img src="closed.png" alt="-"/>&#160;Static Public Member Functions inherited from <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a></td></tr>
<tr class="memitem:ac91bd7db0588f3a6ceda53658a78df5e inherit pub_static_methods_classarm__compute_1_1_i_tensor_info"><td class="memItemLeft" align="right" valign="top">static constexpr int32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ac91bd7db0588f3a6ceda53658a78df5e">get_dynamic_state_value</a> ()</td></tr>
<tr class="memdesc:ac91bd7db0588f3a6ceda53658a78df5e inherit pub_static_methods_classarm__compute_1_1_i_tensor_info"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the value representing dynamic dimension state.  <a href="classarm__compute_1_1_i_tensor_info.xhtml#ac91bd7db0588f3a6ceda53658a78df5e">More...</a><br /></td></tr>
<tr class="separator:ac91bd7db0588f3a6ceda53658a78df5e inherit pub_static_methods_classarm__compute_1_1_i_tensor_info"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a98b9497fa57c27f6beeeac88608167ca inherit pub_static_methods_classarm__compute_1_1_i_tensor_info"><td class="memItemLeft" align="right" valign="top">static constexpr int32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a98b9497fa57c27f6beeeac88608167ca">get_static_state_value</a> ()</td></tr>
<tr class="memdesc:a98b9497fa57c27f6beeeac88608167ca inherit pub_static_methods_classarm__compute_1_1_i_tensor_info"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the value representing static dimension state.  <a href="classarm__compute_1_1_i_tensor_info.xhtml#a98b9497fa57c27f6beeeac88608167ca">More...</a><br /></td></tr>
<tr class="separator:a98b9497fa57c27f6beeeac88608167ca inherit pub_static_methods_classarm__compute_1_1_i_tensor_info"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae056a42fb510e2fa170a74ab06ee31da inherit pub_static_methods_classarm__compute_1_1_i_tensor_info"><td class="memTemplParams" colspan="2">template&lt;typename... Infos&gt; </td></tr>
<tr class="memitem:ae056a42fb510e2fa170a74ab06ee31da inherit pub_static_methods_classarm__compute_1_1_i_tensor_info"><td class="memTemplItemLeft" align="right" valign="top">static std::pair&lt; <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>, <a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ae056a42fb510e2fa170a74ab06ee31da">broadcast_shape_and_valid_region</a> (const Infos &amp;... infos)</td></tr>
<tr class="memdesc:ae056a42fb510e2fa170a74ab06ee31da inherit pub_static_methods_classarm__compute_1_1_i_tensor_info"><td class="mdescLeft">&#160;</td><td class="mdescRight">If infos are broadcast compatible tensor info's, return the broadcasted shape and the intersection of the broadcasted valid regions of the tensors.  <a href="classarm__compute_1_1_i_tensor_info.xhtml#ae056a42fb510e2fa170a74ab06ee31da">More...</a><br /></td></tr>
<tr class="separator:ae056a42fb510e2fa170a74ab06ee31da inherit pub_static_methods_classarm__compute_1_1_i_tensor_info"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_static_attribs_classarm__compute_1_1_i_tensor_info"><td colspan="2" onclick="javascript:toggleInherit('pub_static_attribs_classarm__compute_1_1_i_tensor_info')"><img src="closed.png" alt="-"/>&#160;Static Public Attributes inherited from <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a></td></tr>
<tr class="memitem:a181af6ddf1729f06e92859babef277f0 inherit pub_static_attribs_classarm__compute_1_1_i_tensor_info"><td class="memItemLeft" align="right" valign="top">static constexpr <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a1fafaeb6e3ab8c0bc772532cc3fcff1a">Id</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a181af6ddf1729f06e92859babef277f0">invalid_tensor_id</a> = 0</td></tr>
<tr class="memdesc:a181af6ddf1729f06e92859babef277f0 inherit pub_static_attribs_classarm__compute_1_1_i_tensor_info"><td class="mdescLeft">&#160;</td><td class="mdescRight">An invalid tensor id within a domain.  <a href="classarm__compute_1_1_i_tensor_info.xhtml#a181af6ddf1729f06e92859babef277f0">More...</a><br /></td></tr>
<tr class="separator:a181af6ddf1729f06e92859babef277f0 inherit pub_static_attribs_classarm__compute_1_1_i_tensor_info"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Store the tensor's metadata. </p>

<p class="definition">Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00043">43</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a21c2ae9fa438faf42669dadda628080c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a21c2ae9fa438faf42669dadda628080c">&#9670;&nbsp;</a></span>TensorInfo() <span class="overload">[1/11]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Default constructor. </p>

<p class="definition">Definition at line <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00036">36</a> of file <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml">TensorInfo.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    : _total_size(0), _offset_first_element_in_bytes(0), _strides_in_bytes(), _num_channels(0), _tensor_shape(), _dims_state(), _data_type(<a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a696b031073e74bf2cb98e5ef201d4aa3">DataType::UNKNOWN</a>), _format(<a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a696b031073e74bf2cb98e5ef201d4aa3">Format::UNKNOWN</a>), _is_resizable{ <span class="keyword">true</span> },</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;      _valid_region{ Coordinates(), _tensor_shape }, _padding{ 0 }, _quantization_info(), _data_layout(<a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>), _are_values_constant(<span class="keyword">true</span>), _id(<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a181af6ddf1729f06e92859babef277f0">invalid_tensor_id</a>), _lock_paddings(<span class="keyword">false</span>)</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a4eb5913c3ce5fe2bcbaafd8c9224d384"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4eb5913c3ce5fe2bcbaafd8c9224d384">&#9670;&nbsp;</a></span>~TensorInfo()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default destructor. </p>

</div>
</div>
<a id="a57911f186d22f552382d39010c09097d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a57911f186d22f552382d39010c09097d">&#9670;&nbsp;</a></span>TensorInfo() <span class="overload">[2/11]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Allow instances of this class to be copy constructed. </p>

<p class="definition">Definition at line <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00042">42</a> of file <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml">TensorInfo.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    : <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a21c2ae9fa438faf42669dadda628080c">TensorInfo</a>()</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;{</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    _total_size                    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.total_size();</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    _offset_first_element_in_bytes = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.offset_first_element_in_bytes();</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    _strides_in_bytes              = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.strides_in_bytes();</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    _num_channels                  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.num_channels();</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    _tensor_shape                  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.tensor_shape();</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    _dims_state                    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.tensor_dims_state();</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    _data_type                     = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.data_type();</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    _format                        = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.format();</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    _is_resizable                  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.is_resizable();</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    _valid_region                  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.valid_region();</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    _padding                       = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.padding();</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    _quantization_info             = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.quantization_info();</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    _data_layout                   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.<a class="code" href="structarm__compute_1_1_scale_kernel_info.xhtml#a317508a148d55ca7e093b9447c3366e7">data_layout</a>();</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    _are_values_constant           = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.are_values_constant();</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    _id                            = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.id();</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    _lock_paddings                 = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.lock_paddings();</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_kernel_descriptors_8h_source.xhtml#l00224">ScaleKernelInfo::data_layout</a>, and <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>.</p>

</div>
</div>
<a id="a22d3741e7b76a18da3621f67d4335608"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a22d3741e7b76a18da3621f67d4335608">&#9670;&nbsp;</a></span>TensorInfo() <span class="overload">[3/11]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Allow instances of this class to be copy constructed. </p>

<p class="definition">Definition at line <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00063">63</a> of file <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml">TensorInfo.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    : <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a21c2ae9fa438faf42669dadda628080c">TensorInfo</a>()</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;{</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    _total_size                    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.total_size();</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    _offset_first_element_in_bytes = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.offset_first_element_in_bytes();</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    _strides_in_bytes              = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.strides_in_bytes();</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    _num_channels                  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.num_channels();</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    _tensor_shape                  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.tensor_shape();</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    _dims_state                    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.tensor_dims_state();</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    _data_type                     = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.data_type();</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    _format                        = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.format();</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    _is_resizable                  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.is_resizable();</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    _valid_region                  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.valid_region();</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    _padding                       = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.padding();</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    _quantization_info             = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.quantization_info();</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    _data_layout                   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.<a class="code" href="structarm__compute_1_1_scale_kernel_info.xhtml#a317508a148d55ca7e093b9447c3366e7">data_layout</a>();</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    _are_values_constant           = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.are_values_constant();</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    _id                            = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.id();</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    _lock_paddings                 = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_kernel_descriptors_8h_source.xhtml#l00224">ScaleKernelInfo::data_layout</a>, and <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>.</p>

</div>
</div>
<a id="a134dfebc14c0e971f8df850846764f8e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a134dfebc14c0e971f8df850846764f8e">&#9670;&nbsp;</a></span>TensorInfo() <span class="overload">[4/11]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allow instances of this class to be move constructed. </p>

</div>
</div>
<a id="a6762d60a00d7d09087ea5cb41d4392a8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6762d60a00d7d09087ea5cb41d4392a8">&#9670;&nbsp;</a></span>TensorInfo() <span class="overload">[5/11]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td>
          <td class="paramname"><em>format</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Construct a tensor info with a format. </p>
<p>Can be used for automatic derivation of the shape by the function.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td>Format of the tensor. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00083">83</a> of file <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml">TensorInfo.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    : <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a21c2ae9fa438faf42669dadda628080c">TensorInfo</a>(TensorShape(), <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a>)</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;{</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="ac307dc31ce68e3cf1273ffbc86e57646"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac307dc31ce68e3cf1273ffbc86e57646">&#9670;&nbsp;</a></span>TensorInfo() <span class="overload">[6/11]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td>
          <td class="paramname"><em>format</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>2D tensor constructor </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">width</td><td>Width of the 2D tensor </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">height</td><td>Height of the 2D tensor </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td>Single plane format of the tensor. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00088">88</a> of file <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml">TensorInfo.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    : <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a21c2ae9fa438faf42669dadda628080c">TensorInfo</a>(TensorShape(width, height), <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a>)</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;{</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a9fa5acc4d8fd911b9b2fece99d3d5a8d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9fa5acc4d8fd911b9b2fece99d3d5a8d">&#9670;&nbsp;</a></span>TensorInfo() <span class="overload">[7/11]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td>
          <td class="paramname"><em>format</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Constructor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_shape</td><td>It specifies the size for each dimension of the tensor in number of elements. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td>Single plane format of the tensor. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00093">93</a> of file <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml">TensorInfo.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    : <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a21c2ae9fa438faf42669dadda628080c">TensorInfo</a>()</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;{</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#ad6b64f33be1e66dcf7612483ffb8fd63">init</a>(<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>, <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a>);</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_tensor_info_8h_source.xhtml#l00248">TensorInfo::format()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00125">TensorInfo::init()</a>, and <a class="el" href="_tensor_info_8h_source.xhtml#l00236">TensorInfo::tensor_shape()</a>.</p>

</div>
</div>
<a id="a6e1c061accc47c7fa11d0f014d3795f9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6e1c061accc47c7fa11d0f014d3795f9">&#9670;&nbsp;</a></span>TensorInfo() <span class="overload">[8/11]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>num_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>data_type</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Construct a tensor info with a data type and number of channels. </p>
<p>Can be used for automatic derivation of the shape by the function.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">num_channels</td><td>It indicates the number of channels for each tensor element </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data_type</td><td>Data type to use for each tensor element </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00099">99</a> of file <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml">TensorInfo.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    : <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a21c2ae9fa438faf42669dadda628080c">TensorInfo</a>()</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;{</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#ad6b64f33be1e66dcf7612483ffb8fd63">init</a>(TensorShape(), <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a6f13b974eeb528acde66de8d9b3fd95c">num_channels</a>, <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a>);</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_tensor_info_8h_source.xhtml#l00244">TensorInfo::data_type()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00125">TensorInfo::init()</a>, and <a class="el" href="_tensor_info_8h_source.xhtml#l00232">TensorInfo::num_channels()</a>.</p>

</div>
</div>
<a id="a734bdd7d65d40aa012ebeb172fda955a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a734bdd7d65d40aa012ebeb172fda955a">&#9670;&nbsp;</a></span>TensorInfo() <span class="overload">[9/11]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>num_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>data_type</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Constructor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_shape</td><td>It specifies the size for each dimension of the tensor in number of elements. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">num_channels</td><td>It indicates the number of channels for each tensor element </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data_type</td><td>Data type to use for each tensor element </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00105">105</a> of file <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml">TensorInfo.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    : <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a21c2ae9fa438faf42669dadda628080c">TensorInfo</a>()</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;{</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#ad6b64f33be1e66dcf7612483ffb8fd63">init</a>(<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>, <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a6f13b974eeb528acde66de8d9b3fd95c">num_channels</a>, <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a>);</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_tensor_info_8h_source.xhtml#l00244">TensorInfo::data_type()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00125">TensorInfo::init()</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00232">TensorInfo::num_channels()</a>, and <a class="el" href="_tensor_info_8h_source.xhtml#l00236">TensorInfo::tensor_shape()</a>.</p>

</div>
</div>
<a id="ada1b0e37199034ffbcfe1b4f833be69f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ada1b0e37199034ffbcfe1b4f833be69f">&#9670;&nbsp;</a></span>TensorInfo() <span class="overload">[10/11]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>num_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>data_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>&#160;</td>
          <td class="paramname"><em>data_layout</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Constructor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_shape</td><td>It specifies the size for each dimension of the tensor in number of elements. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">num_channels</td><td>It indicates the number of channels for each tensor element </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data_type</td><td>Data type to use for each tensor element </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data_layout</td><td>The data layout setting for the tensor data. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00118">118</a> of file <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml">TensorInfo.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    : <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a21c2ae9fa438faf42669dadda628080c">TensorInfo</a>()</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;{</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#ad6b64f33be1e66dcf7612483ffb8fd63">init</a>(<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>, <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a6f13b974eeb528acde66de8d9b3fd95c">num_channels</a>, <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a>);</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    _data_layout = <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a5f63b63606dbbbe54474e6e970a6738c">data_layout</a>;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_tensor_info_8h_source.xhtml#l00293">TensorInfo::data_layout()</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00244">TensorInfo::data_type()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00125">TensorInfo::init()</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00232">TensorInfo::num_channels()</a>, and <a class="el" href="_tensor_info_8h_source.xhtml#l00236">TensorInfo::tensor_shape()</a>.</p>

</div>
</div>
<a id="a3017dc3990baec97aa09599b82c63b1b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3017dc3990baec97aa09599b82c63b1b">&#9670;&nbsp;</a></span>TensorInfo() <span class="overload">[11/11]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>num_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>data_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>&#160;</td>
          <td class="paramname"><em>quantization_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Constructor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_shape</td><td>It specifies the size for each dimension of the tensor in number of elements. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">num_channels</td><td>It indicates the number of channels for each tensor element </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data_type</td><td>Data type to use for each tensor element </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">quantization_info</td><td>The quantization settings for the tensor data. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00111">111</a> of file <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml">TensorInfo.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    : <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a21c2ae9fa438faf42669dadda628080c">TensorInfo</a>()</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;{</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#ad6b64f33be1e66dcf7612483ffb8fd63">init</a>(<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>, <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a6f13b974eeb528acde66de8d9b3fd95c">num_channels</a>, <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a>);</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    _quantization_info = std::move(<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#ac74736e3863207232a23b7181c1d0f44">quantization_info</a>);</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_tensor_info_8h_source.xhtml#l00244">TensorInfo::data_type()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00125">TensorInfo::init()</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00232">TensorInfo::num_channels()</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00289">TensorInfo::quantization_info()</a>, and <a class="el" href="_tensor_info_8h_source.xhtml#l00236">TensorInfo::tensor_shape()</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a131e55044642ad05641f9bcbf94d208a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a131e55044642ad05641f9bcbf94d208a">&#9670;&nbsp;</a></span>are_values_constant()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool are_values_constant </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Flag indicating whether the values of the tensor are constant, meaning that they can change on kernel/function execution. </p>
<dl class="section return"><dt>Returns</dt><dd>True if values are constant else false </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a755401027819f45173d06db7a922eb10">ITensorInfo</a>.</p>

<p class="definition">Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00272">272</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    {</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        <span class="keywordflow">return</span> _are_values_constant;</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_tensor_info_8h_source.xhtml#l00297">TensorInfo::set_are_values_constant()</a>.</p>

</div>
</div>
<a id="a907f837b924945ad1981c8fe8eca61e4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a907f837b924945ad1981c8fe8eca61e4">&#9670;&nbsp;</a></span>auto_padding()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool auto_padding </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Update the offset to the first element and the strides to automatically computed values. </p>
<dl class="section note"><dt>Note</dt><dd>The padding used by this method is really conservative so that the tensor can be used for most functions.</dd></dl>
<dl class="section return"><dt>Returns</dt><dd>True if the strides or the offset to the first element have changed. </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a4f2d0ac983637a0459daf43bcd65cc38">ITensorInfo</a>.</p>

<p class="definition">Definition at line <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00212">212</a> of file <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml">TensorInfo.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;{</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!_is_resizable);</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160; </div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="comment">// Some kernels compute 32 elements at the time, worst case scenario they</span></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="comment">// will read 32 values after the last element</span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> extra_pad_x = _tensor_shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">num_dimensions</a>() &lt; 1 ? 0 : 32;</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> pad_x       = _tensor_shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">num_dimensions</a>() &lt; 1 ? 0 : 4;</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> pad_y       = _tensor_shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">num_dimensions</a>() &lt; 2 ? 0 : 4;</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160; </div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#af53d8203ecc37896ca4579d1ee3fdffc">extend_padding</a>(<a class="code" href="namespacearm__compute.xhtml#a4467b302fc9ec312c40580336ab783da">PaddingSize</a>(pad_y, pad_x + extra_pad_x, pad_y, pad_x));</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00280">TensorInfo::extend_padding()</a>, and <a class="el" href="_dimensions_8h_source.xhtml#l00143">Dimensions&lt; T &gt;::num_dimensions()</a>.</p>

<p class="reference">Referenced by <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00196">TensorInfo::init_auto_padding()</a>.</p>

</div>
</div>
<a id="afbc359bde9be72a6edab175978e56662"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afbc359bde9be72a6edab175978e56662">&#9670;&nbsp;</a></span>clone()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &gt; clone </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00316">316</a> of file <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml">TensorInfo.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;{</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;TensorInfo&gt;(*<span class="keyword">this</span>);</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_c_l_f_f_t_convolution_layer_8cpp_source.xhtml#l00113">CLFFTConvolutionLayer::configure()</a>, <a class="el" href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00290">arm_compute::test::validation::TEST_CASE()</a>, <a class="el" href="_c_p_p_split_8h_source.xhtml#l00058">CPPSplit&lt; CLSlice, ICLTensor &gt;::validate()</a>, <a class="el" href="_n_e_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00248">NELSTMLayerQuantized::validate()</a>, <a class="el" href="_c_l_g_e_m_m_deconvolution_layer_8cpp_source.xhtml#l00124">CLGEMMDeconvolutionLayer::validate()</a>, and <a class="el" href="_c_l_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00280">CLLSTMLayerQuantized::validate()</a>.</p>

</div>
</div>
<a id="a5f63b63606dbbbe54474e6e970a6738c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5f63b63606dbbbe54474e6e970a6738c">&#9670;&nbsp;</a></span>data_layout()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> data_layout </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the data layout of the tensor. </p>
<dl class="section return"><dt>Returns</dt><dd>A DataLayout containing the layout data information. </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">ITensorInfo</a>.</p>

<p class="definition">Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00293">293</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    {</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        <span class="keywordflow">return</span> _data_layout;</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="src_2core_2_helpers_8cpp_source.xhtml#l00028">arm_compute::calculate_valid_region_scale()</a>, <a class="el" href="_c_l_accessor_8h_source.xhtml#l00124">CLAccessor::data_layout()</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00705">arm_compute::error_on_data_layout_not_in()</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00453">arm_compute::error_on_mismatching_data_layouts()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00386">TensorInfo::set_data_layout()</a>, and <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00118">TensorInfo::TensorInfo()</a>.</p>

</div>
</div>
<a id="a9a3e72153aeb3ed212e9c3698774e881"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9a3e72153aeb3ed212e9c3698774e881">&#9670;&nbsp;</a></span>data_type()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> data_type </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Data type used for each element of the tensor. </p>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> data type </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">ITensorInfo</a>.</p>

<p class="definition">Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00244">244</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    {</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        <span class="keywordflow">return</span> _data_type;</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_c_l_l_s_t_m_layer_8cpp_source.xhtml#l00073">CLLSTMLayer::configure()</a>, <a class="el" href="_c_l_accessor_8h_source.xhtml#l00129">CLAccessor::data_type()</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00653">arm_compute::error_on_data_type_not_in()</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00504">arm_compute::error_on_mismatching_data_types()</a>, <a class="el" href="src_2core_2_c_p_p_2_validate_8h_source.xhtml#l00064">arm_compute::error_on_unsupported_cpu_bf16()</a>, <a class="el" href="src_2core_2_c_p_p_2_validate_8h_source.xhtml#l00041">arm_compute::error_on_unsupported_cpu_fp16()</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00801">arm_compute::error_on_unsupported_fp16()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00152">TensorInfo::init()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00196">TensorInfo::init_auto_padding()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00321">TensorInfo::set_data_type()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00099">TensorInfo::TensorInfo()</a>, <a class="el" href="_n_e_q_l_s_t_m_layer_8cpp_source.xhtml#l00675">NEQLSTMLayer::validate()</a>, and <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml#l00603">CLQLSTMLayer::validate()</a>.</p>

</div>
</div>
<a id="a650247f9a828d1ef60135b01f8f77765"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a650247f9a828d1ef60135b01f8f77765">&#9670;&nbsp;</a></span>dimension() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t dimension </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02">DataLayoutDimension</a>&#160;</td>
          <td class="paramname"><em>dimension</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return the size of the requested data layout dimension. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dimension</td><td>DataLayoutDimension of the dimension</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Dimension of the requested dimension </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ae3372a4569b4702a881b1606b0c144c4">ITensorInfo</a>.</p>

<p class="definition">Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00211">211</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    {</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(_data_layout, <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a8813441b655b97c00139c6a5a6390e97">dimension</a>);</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_tensor_info_8h_source.xhtml#l00207">TensorInfo::dimension()</a>, and <a class="el" href="_helpers_8inl_source.xhtml#l00203">arm_compute::get_data_layout_dimension_index()</a>.</p>

</div>
</div>
<a id="a8813441b655b97c00139c6a5a6390e97"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8813441b655b97c00139c6a5a6390e97">&#9670;&nbsp;</a></span>dimension() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t dimension </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return the size of the requested dimension. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">index</td><td>Index of the dimension</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Dimension of the requested dimension </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo</a>.</p>

<p class="definition">Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00207">207</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    {</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        <span class="keywordflow">return</span> _tensor_shape[index];</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_i_tensor_8cpp_source.xhtml#l00035">ITensor::copy_from()</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00211">TensorInfo::dimension()</a>, and <a class="el" href="_n_e_deconvolution_layer_8cpp_source.xhtml#l00085">NEDeconvolutionLayer::validate()</a>.</p>

</div>
</div>
<a id="a62b67b578f684c4d516843c9dea86a23"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a62b67b578f684c4d516843c9dea86a23">&#9670;&nbsp;</a></span>element_size()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t element_size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Element size in bytes calculated as data_size() * <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a6f13b974eeb528acde66de8d9b3fd95c" title="The number of channels for each tensor element.">num_channels()</a> </p>
<dl class="section return"><dt>Returns</dt><dd>The size of one element in bytes </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#aa459796b5489eca8a9160cb5dcf1a103">ITensorInfo</a>.</p>

<p class="definition">Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00224">224</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    {</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#abb7e0f23a4f2e63f39433f158dad47ab">data_size_from_type</a>(_data_type) * _num_channels;</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_utils_8h_source.xhtml#l00106">arm_compute::data_size_from_type()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_tensor_8cpp_source.xhtml#l00035">ITensor::copy_from()</a>, <a class="el" href="_c_l_accessor_8h_source.xhtml#l00109">CLAccessor::element_size()</a>, and <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml#l01109">CLQLSTMLayer::prepare()</a>.</p>

</div>
</div>
<a id="af53d8203ecc37896ca4579d1ee3fdffc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af53d8203ecc37896ca4579d1ee3fdffc">&#9670;&nbsp;</a></span>extend_padding()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool extend_padding </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a4467b302fc9ec312c40580336ab783da">PaddingSize</a> &amp;&#160;</td>
          <td class="paramname"><em>padding</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Update the offset to the first element, the strides and the total size. </p>
<dl class="section note"><dt>Note</dt><dd>This function can only increase the offset, strides and total size.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">padding</td><td>Padding around the XY plane in number of elements.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the strides, offset and total size have changed. </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a0cd5aea514f03afb48ebe22581ea4c66">ITensorInfo</a>.</p>

<p class="definition">Definition at line <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00280">280</a> of file <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml">TensorInfo.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;{</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_lock_paddings);</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!_is_resizable);</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160; </div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <span class="keywordtype">bool</span> updated = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160; </div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a79e20eacb1e963e24a21ebd7369effd7">padding</a>.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">top</a> &gt; _padding.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">top</a>)</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    {</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;        _padding.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">top</a> = <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a79e20eacb1e963e24a21ebd7369effd7">padding</a>.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">top</a>;</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;        updated      = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    }</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160; </div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a79e20eacb1e963e24a21ebd7369effd7">padding</a>.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a78b0fed184c642b78f32fd34b228a5f9">right</a> &gt; _padding.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a78b0fed184c642b78f32fd34b228a5f9">right</a>)</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    {</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        _padding.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a78b0fed184c642b78f32fd34b228a5f9">right</a> = <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a79e20eacb1e963e24a21ebd7369effd7">padding</a>.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a78b0fed184c642b78f32fd34b228a5f9">right</a>;</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;        updated        = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    }</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160; </div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a79e20eacb1e963e24a21ebd7369effd7">padding</a>.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">bottom</a> &gt; _padding.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">bottom</a>)</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    {</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        _padding.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">bottom</a> = <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a79e20eacb1e963e24a21ebd7369effd7">padding</a>.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">bottom</a>;</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        updated         = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    }</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160; </div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a79e20eacb1e963e24a21ebd7369effd7">padding</a>.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">left</a> &gt; _padding.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">left</a>)</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    {</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        _padding.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">left</a> = <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a79e20eacb1e963e24a21ebd7369effd7">padding</a>.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">left</a>;</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        updated       = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    }</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160; </div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    std::tie(_strides_in_bytes, _offset_first_element_in_bytes, _total_size) = calculate_padding_requirements(_padding);</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160; </div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    <span class="keywordflow">return</span> updated;</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00394">BorderSize::bottom</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00395">BorderSize::left</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00256">TensorInfo::padding()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00393">BorderSize::right</a>, and <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00392">BorderSize::top</a>.</p>

<p class="reference">Referenced by <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00212">TensorInfo::auto_padding()</a>, and <a class="el" href="_cpu_gemm_conv2d_8cpp_source.xhtml#l00564">CpuGemmConv2d::run()</a>.</p>

</div>
</div>
<a id="ac4b36cc1e56b0b7e579bb4b7196490db"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac4b36cc1e56b0b7e579bb4b7196490db">&#9670;&nbsp;</a></span>format()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Colour format of the image. </p>
<dl class="section return"><dt>Returns</dt><dd>Colour format of the image </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a57360dd9ca408834c0ea1a8ef70a11f4">ITensorInfo</a>.</p>

<p class="definition">Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00248">248</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    {</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        <span class="keywordflow">return</span> _format;</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_c_l_accessor_8h_source.xhtml#l00119">CLAccessor::format()</a>, <a class="el" href="src_2runtime_2_tensor_allocator_8cpp_source.xhtml#l00107">TensorAllocator::init()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00125">TensorInfo::init()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00185">TensorInfo::init_auto_padding()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00335">TensorInfo::set_format()</a>, and <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00093">TensorInfo::TensorInfo()</a>.</p>

</div>
</div>
<a id="aa2ca251f99c56767719e991a26371603"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa2ca251f99c56767719e991a26371603">&#9670;&nbsp;</a></span>has_padding()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool has_padding </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Checks if the tensor has been allocated with padding or not. </p>
<dl class="section return"><dt>Returns</dt><dd>True if padding is allocated in the tensor, otherwise false. </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ac394d6570ab3325810a3532d39091a52">ITensorInfo</a>.</p>

<p class="definition">Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00260">260</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    {</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        <span class="keywordflow">return</span> !_padding.<a class="code" href="structarm__compute_1_1_border_size.xhtml#afaafdfc441c2433c70959e3dfe46fd97">empty</a>();</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00317">BorderSize::empty()</a>.</p>

</div>
</div>
<a id="a5b041295b3b91cef1c6ff19132d5d471"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5b041295b3b91cef1c6ff19132d5d471">&#9670;&nbsp;</a></span>id()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a1fafaeb6e3ab8c0bc772532cc3fcff1a">ITensorInfo::Id</a> id </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the workload tensor id of the tensor. </p>
<dl class="section return"><dt>Returns</dt><dd>Workload tensor id of the tensor </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a483adb167280ee358ade0b46e6d2ac71">ITensorInfo</a>.</p>

<p class="definition">Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00302">302</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    {</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        <span class="keywordflow">return</span> _id;</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_gpu_workload_source_code_8h_source.xhtml#l00064">GpuWorkloadArgument::id()</a>, <a class="el" href="_gpu_kernel_argument_8h_source.xhtml#l00087">GpuKernelArgument::id()</a>, and <a class="el" href="_tensor_info_8h_source.xhtml#l00306">TensorInfo::set_id()</a>.</p>

</div>
</div>
<a id="a0ae7d318c02e56a3daa9e5e4f9dab117"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0ae7d318c02e56a3daa9e5e4f9dab117">&#9670;&nbsp;</a></span>init() <span class="overload">[1/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void init </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td>
          <td class="paramname"><em>format</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initialize the metadata structure with the given parameters. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_shape</td><td>Size for each dimension of the tensor in number of elements. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td>Single plane format of the tensor. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00130">130</a> of file <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml">TensorInfo.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;{</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="keywordtype">size_t</span>         <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a6f13b974eeb528acde66de8d9b3fd95c">num_channels</a> = <a class="code" href="namespacearm__compute.xhtml#ab14153fb809c18823af3c9c8bc4286cb">num_channels_from_format</a>(<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a>);</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a>         = <a class="code" href="namespacearm__compute.xhtml#a59846ef5ca75cd81cdb7e8a1ce08f9db">data_type_from_format</a>(<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a>);</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160; </div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#ad6b64f33be1e66dcf7612483ffb8fd63">init</a>(<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>, <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a6f13b974eeb528acde66de8d9b3fd95c">num_channels</a>, <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a>);</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160; </div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    _format = <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a>;</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_utils_8h_source.xhtml#l00219">arm_compute::data_type_from_format()</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00248">TensorInfo::format()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00125">TensorInfo::init()</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00232">TensorInfo::num_channels()</a>, <a class="el" href="arm__compute_2core_2_utils_8h_source.xhtml#l00486">arm_compute::num_channels_from_format()</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00236">TensorInfo::tensor_shape()</a>, and <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00261">type</a>.</p>

</div>
</div>
<a id="ad4b6171ddcf854de5d1226cd4d0b0439"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad4b6171ddcf854de5d1226cd4d0b0439">&#9670;&nbsp;</a></span>init() <span class="overload">[2/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void init </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td>
          <td class="paramname"><em>format</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_strides.xhtml">Strides</a> &amp;&#160;</td>
          <td class="paramname"><em>strides_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>total_size_in_bytes</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initialize the metadata structure with the given parameters. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_shape</td><td>Size for each dimension of the tensor in number of elements. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td>Single plane format of the tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">strides_in_bytes</td><td>Stride in bytes for accessing each dimension of the tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">offset_first_element_in_bytes</td><td>Offset in bytes from the beginning of memory allocation to access the first element. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">total_size_in_bytes</td><td>Size in bytes of the memory allocation (including the offset to the first element). </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00140">140</a> of file <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml">TensorInfo.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;{</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keywordtype">size_t</span>         <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a6f13b974eeb528acde66de8d9b3fd95c">num_channels</a> = <a class="code" href="namespacearm__compute.xhtml#ab14153fb809c18823af3c9c8bc4286cb">num_channels_from_format</a>(<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a>);</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a>         = <a class="code" href="namespacearm__compute.xhtml#a59846ef5ca75cd81cdb7e8a1ce08f9db">data_type_from_format</a>(<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a>);</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160; </div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#ad6b64f33be1e66dcf7612483ffb8fd63">init</a>(<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>, <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a6f13b974eeb528acde66de8d9b3fd95c">num_channels</a>, <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a>, <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a5f1ca9d674346287cae57a6c5b5c24ec">strides_in_bytes</a>, <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#ab54246abe670b06f5624add7e7022904">offset_first_element_in_bytes</a>, total_size_in_bytes);</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160; </div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    _format = <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a>;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_utils_8h_source.xhtml#l00219">arm_compute::data_type_from_format()</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00248">TensorInfo::format()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00125">TensorInfo::init()</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00232">TensorInfo::num_channels()</a>, <a class="el" href="arm__compute_2core_2_utils_8h_source.xhtml#l00486">arm_compute::num_channels_from_format()</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00219">TensorInfo::offset_first_element_in_bytes()</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00215">TensorInfo::strides_in_bytes()</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00236">TensorInfo::tensor_shape()</a>, and <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00261">type</a>.</p>

</div>
</div>
<a id="ac745167b7289cd4510034dbe81d5052a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac745167b7289cd4510034dbe81d5052a">&#9670;&nbsp;</a></span>init() <span class="overload">[3/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void init </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>num_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>data_type</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initialize the metadata structure with the given parameters. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_shape</td><td>Size for each dimension of the tensor in number of elements. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">num_channels</td><td>Desired number of channels for each tensor element. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data_type</td><td>Data type to use for each tensor element. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00157">157</a> of file <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml">TensorInfo.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;{</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a6f13b974eeb528acde66de8d9b3fd95c">num_channels</a> == 0);</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160; </div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    _data_type    = <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a>;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    _num_channels = <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a6f13b974eeb528acde66de8d9b3fd95c">num_channels</a>;</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    _format       = <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a696b031073e74bf2cb98e5ef201d4aa3">Format::UNKNOWN</a>;</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160; </div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a2d7e8b8e05c3318b2d90c40d781745d2">set_tensor_shape</a>(<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>);</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00244">TensorInfo::data_type()</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00232">TensorInfo::num_channels()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00352">TensorInfo::set_tensor_shape()</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00236">TensorInfo::tensor_shape()</a>, and <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a696b031073e74bf2cb98e5ef201d4aa3">arm_compute::UNKNOWN</a>.</p>

</div>
</div>
<a id="a4a09eca3bb738e38daa8445461bfaf1f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4a09eca3bb738e38daa8445461bfaf1f">&#9670;&nbsp;</a></span>init() <span class="overload">[4/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void init </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>num_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>data_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_strides.xhtml">Strides</a> &amp;&#160;</td>
          <td class="paramname"><em>strides_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>total_size_in_bytes</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initialize the metadata structure with the given parameters. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_shape</td><td>Size for each dimension of the tensor in number of elements. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">num_channels</td><td>Desired number of channels for each tensor element. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data_type</td><td>Data type to use for each tensor element. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">strides_in_bytes</td><td>Stride in bytes for accessing each dimension of the tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">offset_first_element_in_bytes</td><td>Offset in bytes from the beginning of memory allocation to access the first element. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">total_size_in_bytes</td><td>Size in bytes of the memory allocation (including the offset to the first element). </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00168">168</a> of file <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml">TensorInfo.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;{</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a6f13b974eeb528acde66de8d9b3fd95c">num_channels</a> == 0);</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160; </div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    _data_type                     = <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a>;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    _num_channels                  = <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a6f13b974eeb528acde66de8d9b3fd95c">num_channels</a>;</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    _format                        = <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a696b031073e74bf2cb98e5ef201d4aa3">Format::UNKNOWN</a>;</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    _tensor_shape                  = <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>;</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    _offset_first_element_in_bytes = <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#ab54246abe670b06f5624add7e7022904">offset_first_element_in_bytes</a>;</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    _strides_in_bytes              = <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a5f1ca9d674346287cae57a6c5b5c24ec">strides_in_bytes</a>;</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    _total_size                    = total_size_in_bytes;</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160; </div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    _valid_region = ValidRegion{ Coordinates(), _tensor_shape };</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00244">TensorInfo::data_type()</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00232">TensorInfo::num_channels()</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00219">TensorInfo::offset_first_element_in_bytes()</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00215">TensorInfo::strides_in_bytes()</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00236">TensorInfo::tensor_shape()</a>, and <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a696b031073e74bf2cb98e5ef201d4aa3">arm_compute::UNKNOWN</a>.</p>

</div>
</div>
<a id="ad6b64f33be1e66dcf7612483ffb8fd63"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad6b64f33be1e66dcf7612483ffb8fd63">&#9670;&nbsp;</a></span>init() <span class="overload">[5/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void init </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td>
          <td class="paramname"><em>format</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initialize the tensor info with just a format. </p>
<p>Can be used for automatic derivation of the shape by the function.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td>Single plane format of the tensor. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00125">125</a> of file <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml">TensorInfo.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;{</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#ad6b64f33be1e66dcf7612483ffb8fd63">init</a>(TensorShape(), <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a>);</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_tensor_info_8h_source.xhtml#l00248">TensorInfo::format()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_winograd_conv2d_8cpp_source.xhtml#l00162">CpuWinogradConv2d::configure()</a>, <a class="el" href="_legacy_support_8cpp_source.xhtml#l00090">arm_compute::detail::convert_to_legacy_tensor_info()</a>, <a class="el" href="src_2runtime_2_tensor_allocator_8cpp_source.xhtml#l00107">TensorAllocator::init()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00130">TensorInfo::init()</a>, and <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00093">TensorInfo::TensorInfo()</a>.</p>

</div>
</div>
<a id="a999abf93eb224a2aee25de3309571d4e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a999abf93eb224a2aee25de3309571d4e">&#9670;&nbsp;</a></span>init() <span class="overload">[6/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void init </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>num_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>data_type</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initialize the tensor info with just a format. </p>
<p>Can be used for automatic derivation of the shape by the function.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">num_channels</td><td>Desired number of channels for each tensor element. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data_type</td><td>Data type to use for each tensor element. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00152">152</a> of file <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml">TensorInfo.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;{</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#ad6b64f33be1e66dcf7612483ffb8fd63">init</a>(TensorShape(), <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a6f13b974eeb528acde66de8d9b3fd95c">num_channels</a>, <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a>);</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_tensor_info_8h_source.xhtml#l00244">TensorInfo::data_type()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00125">TensorInfo::init()</a>, and <a class="el" href="_tensor_info_8h_source.xhtml#l00232">TensorInfo::num_channels()</a>.</p>

</div>
</div>
<a id="a4b7391b7025befbe44b743723feb4a9b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4b7391b7025befbe44b743723feb4a9b">&#9670;&nbsp;</a></span>init_auto_padding() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t init_auto_padding </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td>
          <td class="paramname"><em>format</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initialize the metadata structure for the given tensor shape and single-plane format, (Padding is automatically calculated) </p>
<dl class="section note"><dt>Note</dt><dd>The padding used by this method is really conservative so that the tensor can be used for most functions.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_shape</td><td>It specifies the size for each dimension of the tensor in number of elements </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td>Single plane format of the image.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Total allocation size including padding in bytes. </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00185">185</a> of file <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml">TensorInfo.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;{</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span>   <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a6f13b974eeb528acde66de8d9b3fd95c">num_channels</a> = <a class="code" href="namespacearm__compute.xhtml#ab14153fb809c18823af3c9c8bc4286cb">num_channels_from_format</a>(<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a>);</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a>         = <a class="code" href="namespacearm__compute.xhtml#a59846ef5ca75cd81cdb7e8a1ce08f9db">data_type_from_format</a>(<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a>);</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="keywordtype">size_t</span>         <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#af398466b602a02b42d8df19fb66a6c60">total_size</a>   = <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a4b7391b7025befbe44b743723feb4a9b">init_auto_padding</a>(<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>, <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a6f13b974eeb528acde66de8d9b3fd95c">num_channels</a>, <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a>);</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160; </div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    _format = <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a>;</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160; </div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#af398466b602a02b42d8df19fb66a6c60">total_size</a>;</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_utils_8h_source.xhtml#l00219">arm_compute::data_type_from_format()</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00248">TensorInfo::format()</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00232">TensorInfo::num_channels()</a>, <a class="el" href="arm__compute_2core_2_utils_8h_source.xhtml#l00486">arm_compute::num_channels_from_format()</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00236">TensorInfo::tensor_shape()</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00252">TensorInfo::total_size()</a>, and <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00261">type</a>.</p>

</div>
</div>
<a id="a5e70695e962af8b66bea2ad092269ee3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5e70695e962af8b66bea2ad092269ee3">&#9670;&nbsp;</a></span>init_auto_padding() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t init_auto_padding </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>num_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>data_type</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initialize the metadata structure for the given tensor shape, number of channels and data type. </p>
<p>(Padding is automatically calculated)</p>
<dl class="section note"><dt>Note</dt><dd>The padding used by this method is really conservative so that the tensor can be used for most functions.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_shape</td><td>It specifies the size for each dimension of the tensor in number of elements </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">num_channels</td><td>It indicates the number of channels for each tensor element </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data_type</td><td>Data type to use for each tensor element</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Total allocation size including padding in bytes. </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00196">196</a> of file <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml">TensorInfo.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;{</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a6f13b974eeb528acde66de8d9b3fd95c">num_channels</a> == 0);</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160; </div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    _data_type    = <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a>;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    _num_channels = <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a6f13b974eeb528acde66de8d9b3fd95c">num_channels</a>;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    _format       = <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a696b031073e74bf2cb98e5ef201d4aa3">Format::UNKNOWN</a>;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    _tensor_shape = <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160; </div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    _valid_region = ValidRegion{ Coordinates(), _tensor_shape };</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160; </div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a907f837b924945ad1981c8fe8eca61e4">auto_padding</a>();</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160; </div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="keywordflow">return</span> _total_size;</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00212">TensorInfo::auto_padding()</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00244">TensorInfo::data_type()</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00232">TensorInfo::num_channels()</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00236">TensorInfo::tensor_shape()</a>, and <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a696b031073e74bf2cb98e5ef201d4aa3">arm_compute::UNKNOWN</a>.</p>

</div>
</div>
<a id="a7e890c9c5d4143d64a83b4ac19f4d3e4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7e890c9c5d4143d64a83b4ac19f4d3e4">&#9670;&nbsp;</a></span>is_dynamic()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool is_dynamic </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Flag indicating whether the shape of the tensor is dynamic, meaning that it can change on kernel/function execution. </p>
<dl class="section return"><dt>Returns</dt><dd>True if its dynamic else false </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a5b65f0a62b9fad74cd3024ff983dd313">ITensorInfo</a>.</p>

<p class="definition">Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00268">268</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    {</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        <span class="keywordflow">return</span> std::find(std::cbegin(_dims_state), std::cend(_dims_state), <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#ac91bd7db0588f3a6ceda53658a78df5e">get_dynamic_state_value</a>()) != std::cend(_dims_state);</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_tensor_info_8h_source.xhtml#l00057">ITensorInfo::get_dynamic_state_value()</a>.</p>

</div>
</div>
<a id="aaee6555ace43b03173844b1a228a3fc3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaee6555ace43b03173844b1a228a3fc3">&#9670;&nbsp;</a></span>is_resizable()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool is_resizable </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Flag indicating whether the size of the tensor can be changed. </p>
<dl class="section return"><dt>Returns</dt><dd>True if the tensor size can be changed. </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#af555338f11d1d28f258f259ac3da743b">ITensorInfo</a>.</p>

<p class="definition">Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00264">264</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    {</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        <span class="keywordflow">return</span> _is_resizable;</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_tensor_info_8h_source.xhtml#l00276">TensorInfo::set_is_resizable()</a>, and <a class="el" href="tests_2validation_2_c_l_2_u_n_i_t_2_tensor_allocator_8cpp_source.xhtml#l00171">arm_compute::test::validation::TEST_CASE()</a>.</p>

</div>
</div>
<a id="ad06ab3e37dabddbed46f11ea037df4ca"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad06ab3e37dabddbed46f11ea037df4ca">&#9670;&nbsp;</a></span>lock_paddings()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool lock_paddings </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the lock paddings flag value. </p>
<dl class="section return"><dt>Returns</dt><dd>lock paddings flag value </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a10cbe200430f678e586ab37988fa6a54">ITensorInfo</a>.</p>

<p class="definition">Definition at line <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00275">275</a> of file <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml">TensorInfo.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;{</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <span class="keywordflow">return</span> _lock_paddings;</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a6f13b974eeb528acde66de8d9b3fd95c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6f13b974eeb528acde66de8d9b3fd95c">&#9670;&nbsp;</a></span>num_channels()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t num_channels </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The number of channels for each tensor element. </p>
<dl class="section return"><dt>Returns</dt><dd>The number of channels for each tensor element </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ad7829ae79223ab87f9da4c0bd7d229ba">ITensorInfo</a>.</p>

<p class="definition">Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00232">232</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    {</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        <span class="keywordflow">return</span> _num_channels;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_i_tensor_8cpp_source.xhtml#l00035">ITensor::copy_from()</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00758">arm_compute::error_on_data_type_channel_not_in()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00130">TensorInfo::init()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00185">TensorInfo::init_auto_padding()</a>, <a class="el" href="_c_l_accessor_8h_source.xhtml#l00134">CLAccessor::num_channels()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00328">TensorInfo::set_num_channels()</a>, and <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00099">TensorInfo::TensorInfo()</a>.</p>

</div>
</div>
<a id="a13622133d9b41900a6a3e8f89e59a78b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a13622133d9b41900a6a3e8f89e59a78b">&#9670;&nbsp;</a></span>num_dimensions()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t num_dimensions </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The number of dimensions of the tensor (rank) </p>
<dl class="section return"><dt>Returns</dt><dd>The number of dimensions of the tensor (rank) </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a1f4e725b8e1ea36b30e09dc08ae6961d">ITensorInfo</a>.</p>

<p class="definition">Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00228">228</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    {</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        <span class="keywordflow">return</span> _tensor_shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">num_dimensions</a>();</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_dimensions_8h_source.xhtml#l00143">Dimensions&lt; T &gt;::num_dimensions()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_tensor_8cpp_source.xhtml#l00035">ITensor::copy_from()</a>.</p>

</div>
</div>
<a id="a7888888b7f18215ae83fd3660d38eccb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7888888b7f18215ae83fd3660d38eccb">&#9670;&nbsp;</a></span>offset_element_in_bytes()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int32_t offset_element_in_bytes </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;&#160;</td>
          <td class="paramname"><em>pos</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The offset in bytes from the beginning of the memory allocation to access the element at position (x, y, z ...) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pos</td><td><a class="el" href="struct_vector.xhtml" title="Structure to hold Vector information.">Vector</a> with the coordinates of the element to access. The size of this vector must be equal to the number of dimensions of the tensor</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Offset in bytes from the beginning of the memory allocation to access the element (x, y, z, ...) </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ac80aea0e8c7c5c812ea8c7221fbfd4b2">ITensorInfo</a>.</p>

<p class="definition">Definition at line <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00402">402</a> of file <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml">TensorInfo.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;{</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#aecee2852b71597de947ff5ec4b9765f6">ARM_COMPUTE_ERROR_ON_COORDINATES_DIMENSIONS_GTE</a>(pos, _tensor_shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">num_dimensions</a>());</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160; </div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    int32_t <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> = _offset_first_element_in_bytes;</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160; </div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i = 0; i &lt; _tensor_shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">num_dimensions</a>(); ++i)</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    {</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;        <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> += pos[i] * _strides_in_bytes[i];</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    }</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160; </div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>;</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00240">ARM_COMPUTE_ERROR_ON_COORDINATES_DIMENSIONS_GTE</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00143">Dimensions&lt; T &gt;::num_dimensions()</a>, and <a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01112">offset()</a>.</p>

<p class="reference">Referenced by <a class="el" href="src_2runtime_2_tensor_allocator_8cpp_source.xhtml#l00107">TensorAllocator::init()</a>.</p>

</div>
</div>
<a id="ab54246abe670b06f5624add7e7022904"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab54246abe670b06f5624add7e7022904">&#9670;&nbsp;</a></span>offset_first_element_in_bytes()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t offset_first_element_in_bytes </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The offset from the beginning of the memory allocation to the first element of the tensor. </p>
<p>This can be used to access efficiently elements in a 2D tensor</p>
<dl class="section return"><dt>Returns</dt><dd>The offset in bytes to access the first element of the tensor. </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ad0bd5cc32e7e4c0699eccba91e5de397">ITensorInfo</a>.</p>

<p class="definition">Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00219">219</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    {</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        <span class="keywordflow">return</span> _offset_first_element_in_bytes;</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="src_2runtime_2_tensor_allocator_8cpp_source.xhtml#l00107">TensorAllocator::init()</a>, and <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00140">TensorInfo::init()</a>.</p>

</div>
</div>
<a id="adcf156ba30ff118c28690671e83ea06b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adcf156ba30ff118c28690671e83ea06b">&#9670;&nbsp;</a></span>operator=() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allow instances of this class to be copied. </p>

</div>
</div>
<a id="a532c27f6bf3cd9275cb7fc9a0d0bbf6e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a532c27f6bf3cd9275cb7fc9a0d0bbf6e">&#9670;&nbsp;</a></span>operator=() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allow instances of this class to be moved. </p>

</div>
</div>
<a id="a79e20eacb1e963e24a21ebd7369effd7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a79e20eacb1e963e24a21ebd7369effd7">&#9670;&nbsp;</a></span>padding()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute.xhtml#a4467b302fc9ec312c40580336ab783da">PaddingSize</a> padding </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Padding of tensor. </p>
<dl class="section return"><dt>Returns</dt><dd>Padding. </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a07b929c34ad1dc823d8315876aa403ce">ITensorInfo</a>.</p>

<p class="definition">Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00256">256</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    {</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        <span class="keywordflow">return</span> _padding;</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00280">TensorInfo::extend_padding()</a>, <a class="el" href="src_2core_2_utils_8cpp_source.xhtml#l00573">arm_compute::get_padding_info()</a>, and <a class="el" href="_c_l_accessor_8h_source.xhtml#l00144">CLAccessor::padding()</a>.</p>

</div>
</div>
<a id="ac74736e3863207232a23b7181c1d0f44"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac74736e3863207232a23b7181c1d0f44">&#9670;&nbsp;</a></span>quantization_info()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> quantization_info </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the quantization settings (scale and offset) of the tensor. </p>
<dl class="section return"><dt>Returns</dt><dd>A <a class="el" href="classarm__compute_1_1_quantization_info.xhtml" title="Quantization information.">QuantizationInfo</a> containing the scale and offset. </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo</a>.</p>

<p class="definition">Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00289">289</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    {</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;        <span class="keywordflow">return</span> _quantization_info;</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_cpu_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00108">CpuGemmLowpMatrixMultiplyCore::configure()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml#l00172">CLQLSTMLayer::configure()</a>, <a class="el" href="_c_l_accessor_8h_source.xhtml#l00149">CLAccessor::quantization_info()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00380">TensorInfo::set_quantization_info()</a>, and <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00111">TensorInfo::TensorInfo()</a>.</p>

</div>
</div>
<a id="a5a80b3a6ae624417617d6a8d3209add5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5a80b3a6ae624417617d6a8d3209add5">&#9670;&nbsp;</a></span>reset_padding()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp; reset_padding </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Resets the padding settings of the tensor. </p>
<dl class="section return"><dt>Returns</dt><dd>Reference to this <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">ITensorInfo</a> object </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#afc135290818a7ae02d2195c013796fdd">ITensorInfo</a>.</p>

<p class="definition">Definition at line <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00392">392</a> of file <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml">TensorInfo.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;{</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    _padding = <a class="code" href="namespacearm__compute.xhtml#a4467b302fc9ec312c40580336ab783da">PaddingSize</a>();</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    <span class="keywordflow">if</span>(((_format != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a696b031073e74bf2cb98e5ef201d4aa3">Format::UNKNOWN</a>) || (_data_type != <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a696b031073e74bf2cb98e5ef201d4aa3">DataType::UNKNOWN</a>)) &amp;&amp; _total_size != 0)</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    {</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;        std::tie(_strides_in_bytes, _offset_first_element_in_bytes, _total_size) = calculate_padding_requirements(_padding);</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    }</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a696b031073e74bf2cb98e5ef201d4aa3">arm_compute::UNKNOWN</a>.</p>

</div>
</div>
<a id="a77e0f184dff4fa2111259c16fba2ecfa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a77e0f184dff4fa2111259c16fba2ecfa">&#9670;&nbsp;</a></span>set_are_values_constant()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>&amp; set_are_values_constant </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>are_values_constant</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the flag whether the tensor values can change during kernel/function execution. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">are_values_constant</td><td>Flag that marks the tensor values if they can be changed or not.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to this <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">ITensorInfo</a> object </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a75157b4ea9a60a8c316d3469f1dc3a17">ITensorInfo</a>.</p>

<p class="definition">Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00297">297</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    {</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        _are_values_constant = <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a131e55044642ad05641f9bcbf94d208a">are_values_constant</a>;</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_tensor_info_8h_source.xhtml#l00272">TensorInfo::are_values_constant()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_fully_connected_8cpp_source.xhtml#l00206">CpuFullyConnected::configure()</a>.</p>

</div>
</div>
<a id="a70b6e1495b94818cce4981dbac6bdd66"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a70b6e1495b94818cce4981dbac6bdd66">&#9670;&nbsp;</a></span>set_data_layout()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp; set_data_layout </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> &amp;&#160;</td>
          <td class="paramname"><em>data_layout</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the data layout of the tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">data_layout</td><td>DataLayout containing the layout data information.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to this <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">ITensorInfo</a> object </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#abb9481fe056b9749f9b4c08db101cc15">ITensorInfo</a>.</p>

<p class="definition">Definition at line <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00386">386</a> of file <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml">TensorInfo.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;{</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    _data_layout = <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a5f63b63606dbbbe54474e6e970a6738c">data_layout</a>;</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_tensor_info_8h_source.xhtml#l00293">TensorInfo::data_layout()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_n_e_crop_resize_8cpp_source.xhtml#l00059">NECropResize::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_8cpp_source.xhtml#l00072">CLDepthwiseConvolutionLayer::configure()</a>, <a class="el" href="_c_l_crop_resize_8cpp_source.xhtml#l00092">CLCropResize::configure()</a>, <a class="el" href="_c_l_f_f_t_convolution_layer_8cpp_source.xhtml#l00113">CLFFTConvolutionLayer::configure()</a>, <a class="el" href="_n_e_deconvolution_layer_8cpp_source.xhtml#l00170">NEDeconvolutionLayer::configure()</a>, <a class="el" href="_c_l_direct_deconvolution_layer_8cpp_source.xhtml#l00121">CLDirectDeconvolutionLayer::configure()</a>, and <a class="el" href="_n_e_q_l_s_t_m_layer_8cpp_source.xhtml#l00214">NEQLSTMLayer::configure()</a>.</p>

</div>
</div>
<a id="a0a9053e6c4729ac5201b58068050c319"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0a9053e6c4729ac5201b58068050c319">&#9670;&nbsp;</a></span>set_data_type()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp; set_data_type </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>data_type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the data type to the specified value. </p>
<dl class="section warning"><dt>Warning</dt><dd>This resets the format to UNKNOWN.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">data_type</td><td>The new data type.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to this <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">ITensorInfo</a> object </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a9ebcdce876b4cd07736afa47d50154de">ITensorInfo</a>.</p>

<p class="definition">Definition at line <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00321">321</a> of file <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml">TensorInfo.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;{</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    _data_type = <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a>;</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    _format    = <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a696b031073e74bf2cb98e5ef201d4aa3">Format::UNKNOWN</a>;</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a2d7e8b8e05c3318b2d90c40d781745d2">set_tensor_shape</a>(<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">tensor_shape</a>()); <span class="comment">// Force total size and strides to update</span></div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_tensor_info_8h_source.xhtml#l00244">TensorInfo::data_type()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00352">TensorInfo::set_tensor_shape()</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00236">TensorInfo::tensor_shape()</a>, and <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a696b031073e74bf2cb98e5ef201d4aa3">arm_compute::UNKNOWN</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_reduce_mean_8cpp_source.xhtml#l00114">CLReduceMean::configure()</a>, <a class="el" href="gpu_2cl_2operators_2_cl_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00256">ClGemmLowpMatrixMultiplyCore::configure()</a>, <a class="el" href="_cpu_softmax_kernel_8cpp_source.xhtml#l00252">CpuLogits1DSoftmaxKernel&lt; IS_LOG &gt;::configure()</a>, <a class="el" href="_cpu_gemm_conv2d_8cpp_source.xhtml#l00256">CpuGemmConv2d::configure()</a>, <a class="el" href="_n_e_l2_normalize_layer_8cpp_source.xhtml#l00062">NEL2NormalizeLayer::validate()</a>, <a class="el" href="_n_e_reduction_operation_8cpp_source.xhtml#l00066">NEReductionOperation::validate()</a>, <a class="el" href="_c_l_l2_normalize_layer_8cpp_source.xhtml#l00079">CLL2NormalizeLayer::validate()</a>, <a class="el" href="_c_l_arg_min_max_layer_8cpp_source.xhtml#l00048">CLArgMinMaxLayer::validate()</a>, <a class="el" href="_c_l_reduction_operation_8cpp_source.xhtml#l00048">CLReductionOperation::validate()</a>, <a class="el" href="_n_e_generate_proposals_layer_8cpp_source.xhtml#l00212">NEGenerateProposalsLayer::validate()</a>, <a class="el" href="_c_l_generate_proposals_layer_8cpp_source.xhtml#l00210">CLGenerateProposalsLayer::validate()</a>, and <a class="el" href="_c_l_g_e_m_m_deconvolution_layer_8cpp_source.xhtml#l00124">CLGEMMDeconvolutionLayer::validate()</a>.</p>

</div>
</div>
<a id="a523a68398c1a8161daa4238c15e065fa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a523a68398c1a8161daa4238c15e065fa">&#9670;&nbsp;</a></span>set_format()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp; set_format </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td>
          <td class="paramname"><em>format</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the format of an already initialized tensor. </p>
<dl class="section note"><dt>Note</dt><dd>If the data type has already been configured (i.e. not UNKNOWN) it must match the new format. If data type hasn't been configured it will be based on the format.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td>Single-plane format of the tensor.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to this <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">ITensorInfo</a> object </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a17394f0f7aea22d9b2d4c6f33bfa69ca">ITensorInfo</a>.</p>

<p class="definition">Definition at line <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00335">335</a> of file <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml">TensorInfo.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;{</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    _format = <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a>;</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160; </div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    <span class="keywordflow">if</span>(_data_type == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a696b031073e74bf2cb98e5ef201d4aa3">DataType::UNKNOWN</a>)</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    {</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        _num_channels = <a class="code" href="namespacearm__compute.xhtml#ab14153fb809c18823af3c9c8bc4286cb">num_channels_from_format</a>(<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a>);</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;        _data_type    = <a class="code" href="namespacearm__compute.xhtml#a59846ef5ca75cd81cdb7e8a1ce08f9db">data_type_from_format</a>(<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a>);</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    }</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    {</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute.xhtml#ab14153fb809c18823af3c9c8bc4286cb">num_channels_from_format</a>(<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a>) != _num_channels);</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute.xhtml#a59846ef5ca75cd81cdb7e8a1ce08f9db">data_type_from_format</a>(<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">format</a>) != _data_type);</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    }</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="arm__compute_2core_2_utils_8h_source.xhtml#l00219">arm_compute::data_type_from_format()</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00248">TensorInfo::format()</a>, <a class="el" href="arm__compute_2core_2_utils_8h_source.xhtml#l00486">arm_compute::num_channels_from_format()</a>, and <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a696b031073e74bf2cb98e5ef201d4aa3">arm_compute::UNKNOWN</a>.</p>

</div>
</div>
<a id="af22c0fe6675ceca54060c04707ae2ef6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af22c0fe6675ceca54060c04707ae2ef6">&#9670;&nbsp;</a></span>set_id()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>&amp; set_id </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a1fafaeb6e3ab8c0bc772532cc3fcff1a">ITensorInfo::Id</a>&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the tensor id. </p>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a800179b740215ef4e5ef91c07d17b9a2">ITensorInfo</a>.</p>

<p class="definition">Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00306">306</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    {</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        _id = <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a5b041295b3b91cef1c6ff19132d5d471">id</a>;</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_tensor_info_8h_source.xhtml#l00302">TensorInfo::id()</a>.</p>

</div>
</div>
<a id="a78bf77b2d9b959259f77a32b9a412184"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a78bf77b2d9b959259f77a32b9a412184">&#9670;&nbsp;</a></span>set_is_resizable()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>&amp; set_is_resizable </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>is_resizable</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the flag whether the tensor size can be changed. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">is_resizable</td><td>Flag that marks the tensor if it can be changed or not.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to this <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">ITensorInfo</a> object </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a9273842d8e5dc1a3c7fab727176fd7fe">ITensorInfo</a>.</p>

<p class="definition">Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00276">276</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    {</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        _is_resizable = <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#aaee6555ace43b03173844b1a228a3fc3">is_resizable</a>;</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_tensor_info_8h_source.xhtml#l00264">TensorInfo::is_resizable()</a>.</p>

<p class="reference">Referenced by <a class="el" href="src_2runtime_2_tensor_allocator_8cpp_source.xhtml#l00132">TensorAllocator::allocate()</a>, <a class="el" href="_c_l_tensor_allocator_8cpp_source.xhtml#l00127">CLTensorAllocator::allocate()</a>, <a class="el" href="_cpu_activation_8cpp_source.xhtml#l00057">CpuContext::create_activation()</a>, <a class="el" href="_cl_activation_8cpp_source.xhtml#l00056">ClContext::create_activation()</a>, <a class="el" href="src_2runtime_2_tensor_allocator_8cpp_source.xhtml#l00147">TensorAllocator::free()</a>, <a class="el" href="_c_l_tensor_allocator_8cpp_source.xhtml#l00159">CLTensorAllocator::free()</a>, <a class="el" href="src_2runtime_2_tensor_allocator_8cpp_source.xhtml#l00153">TensorAllocator::import_memory()</a>, <a class="el" href="_c_l_tensor_allocator_8cpp_source.xhtml#l00167">CLTensorAllocator::import_memory()</a>, and <a class="el" href="src_2runtime_2_tensor_allocator_8cpp_source.xhtml#l00073">TensorAllocator::~TensorAllocator()</a>.</p>

</div>
</div>
<a id="a1dcbc382dfd3636b4d9f1bf6edb503ac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1dcbc382dfd3636b4d9f1bf6edb503ac">&#9670;&nbsp;</a></span>set_lock_paddings()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp; set_lock_paddings </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>flag</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the lock paddings flag of the tensor. </p>
<p>It should be set to True, when the tensor could be mapped to camera or frame buffer.</p>
<dl class="section return"><dt>Returns</dt><dd>Reference to this <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">ITensorInfo</a> object </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7640429cd29c78123b483a85b1c775a9">ITensorInfo</a>.</p>

<p class="definition">Definition at line <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00269">269</a> of file <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml">TensorInfo.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;{</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    _lock_paddings = flag;</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="ad03af3eeb6f3666d6282ca689c1b2ce8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad03af3eeb6f3666d6282ca689c1b2ce8">&#9670;&nbsp;</a></span>set_num_channels()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp; set_num_channels </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>num_channels</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the number of channels to the specified value. </p>
<dl class="section warning"><dt>Warning</dt><dd>This resets the format to UNKNOWN.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">num_channels</td><td>New number of channels.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to this <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">ITensorInfo</a> object </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#aaf74be25e2392705f29352ffaa4b1f9d">ITensorInfo</a>.</p>

<p class="definition">Definition at line <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00328">328</a> of file <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml">TensorInfo.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;{</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    _num_channels = <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a6f13b974eeb528acde66de8d9b3fd95c">num_channels</a>;</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    _format       = <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a696b031073e74bf2cb98e5ef201d4aa3">Format::UNKNOWN</a>;</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_tensor_info_8h_source.xhtml#l00232">TensorInfo::num_channels()</a>, and <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a696b031073e74bf2cb98e5ef201d4aa3">arm_compute::UNKNOWN</a>.</p>

</div>
</div>
<a id="a78839e7861ba8ffed52ca55da2745761"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a78839e7861ba8ffed52ca55da2745761">&#9670;&nbsp;</a></span>set_quantization_info()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp; set_quantization_info </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>quantization_info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the quantization settings (scale and offset) of the tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">quantization_info</td><td><a class="el" href="classarm__compute_1_1_quantization_info.xhtml" title="Quantization information.">QuantizationInfo</a> containing the scale and offset</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to this <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">ITensorInfo</a> object </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a575d37eaf8a905c8ca3c0250757c2b81">ITensorInfo</a>.</p>

<p class="definition">Definition at line <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00380">380</a> of file <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml">TensorInfo.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;{</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    _quantization_info = <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#ac74736e3863207232a23b7181c1d0f44">quantization_info</a>;</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_tensor_info_8h_source.xhtml#l00289">TensorInfo::quantization_info()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_depthwise_convolution_layer_8cpp_source.xhtml#l00072">CLDepthwiseConvolutionLayer::configure()</a>, <a class="el" href="_cpu_softmax_kernel_8cpp_source.xhtml#l00252">CpuLogits1DSoftmaxKernel&lt; IS_LOG &gt;::configure()</a>, <a class="el" href="_cl_gemm_conv2d_8cpp_source.xhtml#l00162">ClGemmConv2d::configure()</a>, <a class="el" href="_cpu_gemm_conv2d_8cpp_source.xhtml#l00256">CpuGemmConv2d::configure()</a>, <a class="el" href="_c_l_g_e_m_m_deconvolution_layer_8cpp_source.xhtml#l00224">CLGEMMDeconvolutionLayer::configure()</a>, <a class="el" href="_c_l_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00072">CLLSTMLayerQuantized::configure()</a>, <a class="el" href="_n_e_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00248">NELSTMLayerQuantized::validate()</a>, and <a class="el" href="_c_l_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00280">CLLSTMLayerQuantized::validate()</a>.</p>

</div>
</div>
<a id="a41993c2ff0ae139b5729d63eab5fd6ef"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a41993c2ff0ae139b5729d63eab5fd6ef">&#9670;&nbsp;</a></span>set_tensor_dims_state()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp; set_tensor_dims_state </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ae0e15b554cc3958445da66fc718423d4">TensorDimsState</a> &amp;&#160;</td>
          <td class="paramname"><em>state</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the state for each dimension of the tensor. </p>
<p>This sets the state of each dimension of the shape in terms of dynamic behavior using -1 where appropriate. The index in the state is a 1 to 1 mapping with the shape dimension index. For example if you want to express [?, 3, 3] as a dynamic input then [-1, 3, 3] has to be set as a state</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">state</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> dimensions state</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to this <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">ITensorInfo</a> object </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a0bbfdc0b7847b27de9e336f7720809ce">ITensorInfo</a>.</p>

<p class="definition">Definition at line <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00374">374</a> of file <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml">TensorInfo.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;{</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    _dims_state = state;</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a2d7e8b8e05c3318b2d90c40d781745d2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2d7e8b8e05c3318b2d90c40d781745d2">&#9670;&nbsp;</a></span>set_tensor_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp; set_tensor_shape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>shape</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the shape of an already initialized tensor. </p>
<dl class="section warning"><dt>Warning</dt><dd>Changing the shape requires to recompute the strides and is therefore only possible if the tensor hasn't been allocated yet.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">shape</td><td>New tensor shape.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to this <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">ITensorInfo</a> object </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a12a4f1190952613e36b44846962e26bb">ITensorInfo</a>.</p>

<p class="definition">Definition at line <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00352">352</a> of file <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml">TensorInfo.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;{</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    _tensor_shape                  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>;</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    _offset_first_element_in_bytes = 0;</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    _strides_in_bytes              = <a class="code" href="namespacearm__compute.xhtml#ac56739a30823647f7d86a0380a2ff62e">compute_strides</a>(*<span class="keyword">this</span>);</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160; </div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    <span class="keywordflow">if</span>(_tensor_shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">num_dimensions</a>() == 0)</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    {</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;        _total_size = _strides_in_bytes[0];</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    }</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    {</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> idx_last_dimension = _tensor_shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">num_dimensions</a>() - 1;</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;        _total_size                           = <span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(_tensor_shape[idx_last_dimension]) * _strides_in_bytes[idx_last_dimension];</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    }</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160; </div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    std::tie(_strides_in_bytes, _offset_first_element_in_bytes, _total_size) = calculate_padding_requirements(_padding);</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160; </div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    _valid_region = ValidRegion{ Coordinates(), _tensor_shape };</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="src_2core_2helpers_2_utils_8h_source.xhtml#l00041">arm_compute::compute_strides()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00143">Dimensions&lt; T &gt;::num_dimensions()</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">arm_compute::test::validation::shape</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_mat_mul_8cpp_source.xhtml#l00142">CpuMatMul::configure()</a>, <a class="el" href="_n_e_q_l_s_t_m_layer_8cpp_source.xhtml#l00214">NEQLSTMLayer::configure()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml#l00172">CLQLSTMLayer::configure()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00157">TensorInfo::init()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00321">TensorInfo::set_data_type()</a>, <a class="el" href="_n_e_l2_normalize_layer_8cpp_source.xhtml#l00062">NEL2NormalizeLayer::validate()</a>, <a class="el" href="_c_l_l2_normalize_layer_8cpp_source.xhtml#l00079">CLL2NormalizeLayer::validate()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_8cpp_source.xhtml#l00161">CLDepthwiseConvolutionLayer::validate()</a>, <a class="el" href="_n_e_q_l_s_t_m_layer_8cpp_source.xhtml#l00675">NEQLSTMLayer::validate()</a>, and <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml#l00603">CLQLSTMLayer::validate()</a>.</p>

</div>
</div>
<a id="a43e45363267b6bce4bb6770febe9ce11"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a43e45363267b6bce4bb6770febe9ce11">&#9670;&nbsp;</a></span>set_valid_region()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void set_valid_region </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;&#160;</td>
          <td class="paramname"><em>valid_region</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the valid region of the tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">valid_region</td><td>Valid region to set. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a9586081a29fceb532ab270bd843abee6">ITensorInfo</a>.</p>

<p class="definition">Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00285">285</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    {</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        _valid_region = <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a3c20d908342087484d883574d55dd482">valid_region</a>;</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_tensor_info_8h_source.xhtml#l00281">TensorInfo::valid_region()</a>.</p>

</div>
</div>
<a id="a5f1ca9d674346287cae57a6c5b5c24ec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5f1ca9d674346287cae57a6c5b5c24ec">&#9670;&nbsp;</a></span>strides_in_bytes()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarm__compute_1_1_strides.xhtml">Strides</a>&amp; strides_in_bytes </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The strides in bytes for accessing each dimension of the tensor. </p>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_strides.xhtml" title="Strides of an item in bytes.">Strides</a> in bytes for each tensor dimension </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">ITensorInfo</a>.</p>

<p class="definition">Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00215">215</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    {</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        <span class="keywordflow">return</span> _strides_in_bytes;</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="src_2runtime_2_tensor_allocator_8cpp_source.xhtml#l00107">TensorAllocator::init()</a>, and <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00140">TensorInfo::init()</a>.</p>

</div>
</div>
<a id="ac0536d1b12af6338cd00919f78d10c0f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac0536d1b12af6338cd00919f78d10c0f">&#9670;&nbsp;</a></span>tensor_dims_state()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ae0e15b554cc3958445da66fc718423d4">TensorDimsState</a>&amp; tensor_dims_state </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>State of each dimension of the tensor shape. </p>
<dl class="section return"><dt>Returns</dt><dd>A vector with the state for each dimension of the tensor, where -1 specifies dynamic dimension </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a06197f59bed02e0977b3533b824a2e51">ITensorInfo</a>.</p>

<p class="definition">Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00240">240</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    {</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        <span class="keywordflow">return</span> _dims_state;</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    }</div>
</div><!-- fragment -->
</div>
</div>
<a id="a269b19ce3f357ac65f41f9951906e38e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a269b19ce3f357ac65f41f9951906e38e">&#9670;&nbsp;</a></span>tensor_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&amp; tensor_shape </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Size for each dimension of the tensor. </p>
<dl class="section return"><dt>Returns</dt><dd>A vector with the size for each dimension of the tensor </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo</a>.</p>

<p class="definition">Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00236">236</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    {</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        <span class="keywordflow">return</span> _tensor_shape;</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="src_2core_2_helpers_8cpp_source.xhtml#l00028">arm_compute::calculate_valid_region_scale()</a>, <a class="el" href="_cpu_mat_mul_8cpp_source.xhtml#l00142">CpuMatMul::configure()</a>, <a class="el" href="_cl_gemm_conv2d_8cpp_source.xhtml#l00162">ClGemmConv2d::configure()</a>, <a class="el" href="_cpu_gemm_conv2d_8cpp_source.xhtml#l00256">CpuGemmConv2d::configure()</a>, <a class="el" href="_c_l_f_f_t_convolution_layer_8cpp_source.xhtml#l00113">CLFFTConvolutionLayer::configure()</a>, <a class="el" href="_c_l_generate_proposals_layer_8cpp_source.xhtml#l00080">CLGenerateProposalsLayer::configure()</a>, <a class="el" href="_c_l_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00072">CLLSTMLayerQuantized::configure()</a>, <a class="el" href="_n_e_q_l_s_t_m_layer_8cpp_source.xhtml#l00214">NEQLSTMLayer::configure()</a>, <a class="el" href="_c_l_l_s_t_m_layer_8cpp_source.xhtml#l00073">CLLSTMLayer::configure()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml#l00172">CLQLSTMLayer::configure()</a>, <a class="el" href="_i_tensor_8cpp_source.xhtml#l00035">ITensor::copy_from()</a>, <a class="el" href="src_2runtime_2_tensor_allocator_8cpp_source.xhtml#l00107">TensorAllocator::init()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00130">TensorInfo::init()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00185">TensorInfo::init_auto_padding()</a>, <a class="el" href="_c_l_accessor_8h_source.xhtml#l00139">CLAccessor::num_elements()</a>, <a class="el" href="_cpu_elementwise_unary_8cpp_source.xhtml#l00048">CpuElementwiseUnary::run()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00321">TensorInfo::set_data_type()</a>, <a class="el" href="_c_l_accessor_8h_source.xhtml#l00104">CLAccessor::shape()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00093">TensorInfo::TensorInfo()</a>, <a class="el" href="_c_p_p_split_8h_source.xhtml#l00058">CPPSplit&lt; CLSlice, ICLTensor &gt;::validate()</a>, <a class="el" href="_n_e_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00248">NELSTMLayerQuantized::validate()</a>, and <a class="el" href="_c_l_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00280">CLLSTMLayerQuantized::validate()</a>.</p>

</div>
</div>
<a id="af398466b602a02b42d8df19fb66a6c60"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af398466b602a02b42d8df19fb66a6c60">&#9670;&nbsp;</a></span>total_size()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t total_size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the total size of the tensor in bytes. </p>
<dl class="section return"><dt>Returns</dt><dd>Total size of the tensor in bytes. </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a18064e0011c3869d884653e9e7c47b66">ITensorInfo</a>.</p>

<p class="definition">Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00252">252</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    {</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        <span class="keywordflow">return</span> _total_size;</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="src_2runtime_2_tensor_allocator_8cpp_source.xhtml#l00132">TensorAllocator::allocate()</a>, <a class="el" href="_cpu_add_mul_add_8cpp_source.xhtml#l00037">CpuAddMulAdd::configure()</a>, <a class="el" href="_cl_softmax_8cpp_source.xhtml#l00055">ClSoftmax::configure()</a>, <a class="el" href="_cpu_winograd_conv2d_8cpp_source.xhtml#l00162">CpuWinogradConv2d::configure()</a>, <a class="el" href="_cl_fully_connected_8cpp_source.xhtml#l00227">ClFullyConnected::configure()</a>, <a class="el" href="_cpu_fully_connected_8cpp_source.xhtml#l00206">CpuFullyConnected::configure()</a>, <a class="el" href="gpu_2cl_2operators_2_cl_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00256">ClGemmLowpMatrixMultiplyCore::configure()</a>, <a class="el" href="_cl_winograd_conv2d_8cpp_source.xhtml#l00174">ClWinogradConv2d::configure()</a>, <a class="el" href="_cl_gemm_conv2d_8cpp_source.xhtml#l00162">ClGemmConv2d::configure()</a>, <a class="el" href="_cpu_gemm_conv2d_8cpp_source.xhtml#l00256">CpuGemmConv2d::configure()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00108">CpuGemmLowpMatrixMultiplyCore::configure()</a>, <a class="el" href="src_2runtime_2_tensor_allocator_8cpp_source.xhtml#l00107">TensorAllocator::init()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00185">TensorInfo::init_auto_padding()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml#l01109">CLQLSTMLayer::prepare()</a>, and <a class="el" href="_c_l_accessor_8h_source.xhtml#l00114">CLAccessor::size()</a>.</p>

</div>
</div>
<a id="a3c20d908342087484d883574d55dd482"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3c20d908342087484d883574d55dd482">&#9670;&nbsp;</a></span>valid_region()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> valid_region </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Valid region of the tensor. </p>
<p>All elements in the valid region have defined values, i.e. are not undefined.</p>
<dl class="section return"><dt>Returns</dt><dd>The valid region. </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a74dfd07380a290c34fe7c8e065029b95">ITensorInfo</a>.</p>

<p class="definition">Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00281">281</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    {</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        <span class="keywordflow">return</span> _valid_region;</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="src_2core_2_helpers_8cpp_source.xhtml#l00028">arm_compute::calculate_valid_region_scale()</a>, <a class="el" href="_i_tensor_8cpp_source.xhtml#l00035">ITensor::copy_from()</a>, and <a class="el" href="_tensor_info_8h_source.xhtml#l00285">TensorInfo::set_valid_region()</a>.</p>

</div>
</div>
<h2 class="groupheader">Friends And Related Function Documentation</h2>
<a id="ab096ada540b2eda155d9a2d516682939"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab096ada540b2eda155d9a2d516682939">&#9670;&nbsp;</a></span>operator==</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Check whether two tensor info are equal. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>LHS tensor info. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>RHS tensor info.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the given tensor infos are the same. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00345">345</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;{</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <span class="keywordflow">return</span> (lhs._total_size == rhs._total_size) &amp;&amp; (lhs._offset_first_element_in_bytes == rhs._offset_first_element_in_bytes) &amp;&amp; (lhs._strides_in_bytes == rhs._strides_in_bytes)</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;           &amp;&amp; (lhs._num_channels == rhs._num_channels) &amp;&amp; (lhs._tensor_shape == rhs._tensor_shape) &amp;&amp; (lhs._dims_state == rhs._dims_state) &amp;&amp; (lhs._data_type == rhs._data_type) &amp;&amp; (lhs._format == rhs._format)</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;           &amp;&amp; (lhs._is_resizable == rhs._is_resizable) &amp;&amp; (lhs._valid_region == rhs._valid_region) &amp;&amp; (lhs._padding == rhs._padding) &amp;&amp; (lhs._quantization_info == rhs._quantization_info)</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;           &amp;&amp; (lhs._data_layout == rhs._data_layout) &amp;&amp; (lhs._are_values_constant == rhs._are_values_constant)</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;           &amp;&amp; (lhs._id == rhs._id);</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>arm_compute/core/<a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a></li>
<li>src/core/<a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml">TensorInfo.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="anamespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">arm_compute::DataLayout::NCHW</a></div><div class="ttdeci">@ NCHW</div><div class="ttdoc">Num samples, channels, height, width.</div></div>
<div class="ttc" id="astructarm__compute_1_1_border_size_xhtml_a78b0fed184c642b78f32fd34b228a5f9"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a78b0fed184c642b78f32fd34b228a5f9">arm_compute::BorderSize::right</a></div><div class="ttdeci">unsigned int right</div><div class="ttdoc">right of the border</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00393">Types.h:393</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_info_xhtml_ac91bd7db0588f3a6ceda53658a78df5e"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#ac91bd7db0588f3a6ceda53658a78df5e">arm_compute::ITensorInfo::get_dynamic_state_value</a></div><div class="ttdeci">static constexpr int32_t get_dynamic_state_value()</div><div class="ttdoc">Get the value representing dynamic dimension state.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00057">ITensorInfo.h:57</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a696b031073e74bf2cb98e5ef201d4aa3"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a696b031073e74bf2cb98e5ef201d4aa3">arm_compute::Format::UNKNOWN</a></div><div class="ttdeci">@ UNKNOWN</div><div class="ttdoc">Unknown image format.</div></div>
<div class="ttc" id="agemm__interleaved_8hpp_xhtml_a6fbca3dca9ecb372332fc525529cc086"><div class="ttname"><a href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></div><div class="ttdeci">decltype(strategy::transforms) typedef type</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00261">gemm_interleaved.hpp:261</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_info_xhtml_a6f13b974eeb528acde66de8d9b3fd95c"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a6f13b974eeb528acde66de8d9b3fd95c">arm_compute::TensorInfo::num_channels</a></div><div class="ttdeci">size_t num_channels() const override</div><div class="ttdoc">The number of channels for each tensor element.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00232">TensorInfo.h:232</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_info_xhtml_a4b7391b7025befbe44b743723feb4a9b"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a4b7391b7025befbe44b743723feb4a9b">arm_compute::TensorInfo::init_auto_padding</a></div><div class="ttdeci">size_t init_auto_padding(const TensorShape &amp;tensor_shape, Format format)</div><div class="ttdoc">Initialize the metadata structure for the given tensor shape and single-plane format,...</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_tensor_info_8cpp_source.xhtml#l00185">TensorInfo.cpp:185</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_info_xhtml_aaee6555ace43b03173844b1a228a3fc3"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#aaee6555ace43b03173844b1a228a3fc3">arm_compute::TensorInfo::is_resizable</a></div><div class="ttdeci">bool is_resizable() const override</div><div class="ttdoc">Flag indicating whether the size of the tensor can be changed.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00264">TensorInfo.h:264</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_info_xhtml_af53d8203ecc37896ca4579d1ee3fdffc"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#af53d8203ecc37896ca4579d1ee3fdffc">arm_compute::TensorInfo::extend_padding</a></div><div class="ttdeci">bool extend_padding(const PaddingSize &amp;padding) override</div><div class="ttdoc">Update the offset to the first element, the strides and the total size.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_tensor_info_8cpp_source.xhtml#l00280">TensorInfo.cpp:280</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ab14153fb809c18823af3c9c8bc4286cb"><div class="ttname"><a href="namespacearm__compute.xhtml#ab14153fb809c18823af3c9c8bc4286cb">arm_compute::num_channels_from_format</a></div><div class="ttdeci">size_t num_channels_from_format(Format format)</div><div class="ttdoc">Return the number of channels for a given single-planar pixel format.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l00486">Utils.h:486</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_info_xhtml_a3c20d908342087484d883574d55dd482"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a3c20d908342087484d883574d55dd482">arm_compute::TensorInfo::valid_region</a></div><div class="ttdeci">ValidRegion valid_region() const override</div><div class="ttdoc">Valid region of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00281">TensorInfo.h:281</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_info_xhtml_a5f63b63606dbbbe54474e6e970a6738c"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a5f63b63606dbbbe54474e6e970a6738c">arm_compute::TensorInfo::data_layout</a></div><div class="ttdeci">DataLayout data_layout() const override</div><div class="ttdoc">Get the data layout of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00293">TensorInfo.h:293</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_border_size_xhtml_a3fdd42ea34070a54e696b3adc28c4be3"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">arm_compute::BorderSize::top</a></div><div class="ttdeci">unsigned int top</div><div class="ttdoc">top of the border</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00392">Types.h:392</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_info_xhtml_a5f1ca9d674346287cae57a6c5b5c24ec"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a5f1ca9d674346287cae57a6c5b5c24ec">arm_compute::TensorInfo::strides_in_bytes</a></div><div class="ttdeci">const Strides &amp; strides_in_bytes() const override</div><div class="ttdoc">The strides in bytes for accessing each dimension of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00215">TensorInfo.h:215</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_info_xhtml_a8813441b655b97c00139c6a5a6390e97"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a8813441b655b97c00139c6a5a6390e97">arm_compute::TensorInfo::dimension</a></div><div class="ttdeci">size_t dimension(size_t index) const override</div><div class="ttdoc">Return the size of the requested dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00207">TensorInfo.h:207</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_info_xhtml_ac74736e3863207232a23b7181c1d0f44"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#ac74736e3863207232a23b7181c1d0f44">arm_compute::TensorInfo::quantization_info</a></div><div class="ttdeci">QuantizationInfo quantization_info() const override</div><div class="ttdoc">Get the quantization settings (scale and offset) of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00289">TensorInfo.h:289</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_border_size_xhtml_afaafdfc441c2433c70959e3dfe46fd97"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#afaafdfc441c2433c70959e3dfe46fd97">arm_compute::BorderSize::empty</a></div><div class="ttdeci">constexpr bool empty() const</div><div class="ttdoc">Check if the entire border is zero.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00317">Types.h:317</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_info_xhtml_a9a3e72153aeb3ed212e9c3698774e881"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a9a3e72153aeb3ed212e9c3698774e881">arm_compute::TensorInfo::data_type</a></div><div class="ttdeci">DataType data_type() const override</div><div class="ttdoc">Data type used for each element of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00244">TensorInfo.h:244</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_info_xhtml_a79e20eacb1e963e24a21ebd7369effd7"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a79e20eacb1e963e24a21ebd7369effd7">arm_compute::TensorInfo::padding</a></div><div class="ttdeci">PaddingSize padding() const override</div><div class="ttdoc">Padding of tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00256">TensorInfo.h:256</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_scale_kernel_info_xhtml_a317508a148d55ca7e093b9447c3366e7"><div class="ttname"><a href="structarm__compute_1_1_scale_kernel_info.xhtml#a317508a148d55ca7e093b9447c3366e7">arm_compute::ScaleKernelInfo::data_layout</a></div><div class="ttdeci">DataLayout data_layout</div><div class="ttdoc">Data layout to use.</div><div class="ttdef"><b>Definition:</b> <a href="_kernel_descriptors_8h_source.xhtml#l00224">KernelDescriptors.h:224</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_info_xhtml_a907f837b924945ad1981c8fe8eca61e4"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a907f837b924945ad1981c8fe8eca61e4">arm_compute::TensorInfo::auto_padding</a></div><div class="ttdeci">bool auto_padding() override</div><div class="ttdoc">Update the offset to the first element and the strides to automatically computed values.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_tensor_info_8cpp_source.xhtml#l00212">TensorInfo.cpp:212</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_validate_8h_xhtml_aecee2852b71597de947ff5ec4b9765f6"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#aecee2852b71597de947ff5ec4b9765f6">ARM_COMPUTE_ERROR_ON_COORDINATES_DIMENSIONS_GTE</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_COORDINATES_DIMENSIONS_GTE(p, md)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00240">Validate.h:240</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a45cde9abb508c62d67c3bb2b9bf566a5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">arm_compute::test::validation::shape</a></div><div class="ttdeci">shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">DFT.cpp:115</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_border_size_xhtml_a802ffcf1b49237efe5be8a314d3f3869"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">arm_compute::BorderSize::bottom</a></div><div class="ttdeci">unsigned int bottom</div><div class="ttdoc">bottom of the border</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00394">Types.h:394</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ac56739a30823647f7d86a0380a2ff62e"><div class="ttname"><a href="namespacearm__compute.xhtml#ac56739a30823647f7d86a0380a2ff62e">arm_compute::compute_strides</a></div><div class="ttdeci">Strides compute_strides(const ITensorInfo &amp;info, T stride_x, Ts &amp;&amp;... fixed_strides)</div><div class="ttdoc">Create a strides object based on the provided strides and the tensor dimensions.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2helpers_2_utils_8h_source.xhtml#l00041">Utils.h:41</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_abb7e0f23a4f2e63f39433f158dad47ab"><div class="ttname"><a href="namespacearm__compute.xhtml#abb7e0f23a4f2e63f39433f158dad47ab">arm_compute::data_size_from_type</a></div><div class="ttdeci">size_t data_size_from_type(DataType data_type)</div><div class="ttdoc">The size in bytes of the data type.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l00106">Utils.h:106</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_info_xhtml_ac4b36cc1e56b0b7e579bb4b7196490db"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">arm_compute::TensorInfo::format</a></div><div class="ttdeci">Format format() const override</div><div class="ttdoc">Colour format of the image.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00248">TensorInfo.h:248</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_info_xhtml_af398466b602a02b42d8df19fb66a6c60"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#af398466b602a02b42d8df19fb66a6c60">arm_compute::TensorInfo::total_size</a></div><div class="ttdeci">size_t total_size() const override</div><div class="ttdoc">Returns the total size of the tensor in bytes.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00252">TensorInfo.h:252</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a59846ef5ca75cd81cdb7e8a1ce08f9db"><div class="ttname"><a href="namespacearm__compute.xhtml#a59846ef5ca75cd81cdb7e8a1ce08f9db">arm_compute::data_type_from_format</a></div><div class="ttdeci">DataType data_type_from_format(Format format)</div><div class="ttdoc">Return the data type used by a given single-planar pixel format.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l00219">Utils.h:219</a></div></div>
<div class="ttc" id="asrc_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a009469e4d9b8fce3b6d5e97d2077827d"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a></div><div class="ttdeci">__global uchar * offset(const Image *img, int x, int y)</div><div class="ttdoc">Get the pointer position of a Image.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01112">helpers.h:1112</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_info_xhtml_ad6b64f33be1e66dcf7612483ffb8fd63"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#ad6b64f33be1e66dcf7612483ffb8fd63">arm_compute::TensorInfo::init</a></div><div class="ttdeci">void init(Format format)</div><div class="ttdoc">Initialize the tensor info with just a format.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_tensor_info_8cpp_source.xhtml#l00125">TensorInfo.cpp:125</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_info_xhtml_a131e55044642ad05641f9bcbf94d208a"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a131e55044642ad05641f9bcbf94d208a">arm_compute::TensorInfo::are_values_constant</a></div><div class="ttdeci">bool are_values_constant() const override</div><div class="ttdoc">Flag indicating whether the values of the tensor are constant, meaning that they can change on kernel...</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00272">TensorInfo.h:272</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_adfef6f05588c3d40195488620ab54b97"><div class="ttname"><a href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">arm_compute::get_data_layout_dimension_index</a></div><div class="ttdeci">size_t get_data_layout_dimension_index(const DataLayout &amp;data_layout, const DataLayoutDimension &amp;data_layout_dimension)</div><div class="ttdoc">Get the index of the given dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00203">Helpers.inl:203</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a4467b302fc9ec312c40580336ab783da"><div class="ttname"><a href="namespacearm__compute.xhtml#a4467b302fc9ec312c40580336ab783da">arm_compute::PaddingSize</a></div><div class="ttdeci">BorderSize PaddingSize</div><div class="ttdoc">Container for 2D padding size.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00399">Types.h:399</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_info_xhtml_a181af6ddf1729f06e92859babef277f0"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a181af6ddf1729f06e92859babef277f0">arm_compute::ITensorInfo::invalid_tensor_id</a></div><div class="ttdeci">static constexpr Id invalid_tensor_id</div><div class="ttdoc">An invalid tensor id within a domain.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00051">ITensorInfo.h:51</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_border_size_xhtml_a05374b750b0fc472c34ee61e6f028bba"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">arm_compute::BorderSize::left</a></div><div class="ttdeci">unsigned int left</div><div class="ttdoc">left of the border</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00395">Types.h:395</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_info_xhtml_a21c2ae9fa438faf42669dadda628080c"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a21c2ae9fa438faf42669dadda628080c">arm_compute::TensorInfo::TensorInfo</a></div><div class="ttdeci">TensorInfo()</div><div class="ttdoc">Default constructor.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_tensor_info_8cpp_source.xhtml#l00036">TensorInfo.cpp:36</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_info_xhtml_a5b041295b3b91cef1c6ff19132d5d471"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a5b041295b3b91cef1c6ff19132d5d471">arm_compute::TensorInfo::id</a></div><div class="ttdeci">ITensorInfo::Id id() const override</div><div class="ttdoc">Get the workload tensor id of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00302">TensorInfo.h:302</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_info_xhtml_ab54246abe670b06f5624add7e7022904"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#ab54246abe670b06f5624add7e7022904">arm_compute::TensorInfo::offset_first_element_in_bytes</a></div><div class="ttdeci">size_t offset_first_element_in_bytes() const override</div><div class="ttdoc">The offset from the beginning of the memory allocation to the first element of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00219">TensorInfo.h:219</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_info_xhtml_a2d7e8b8e05c3318b2d90c40d781745d2"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a2d7e8b8e05c3318b2d90c40d781745d2">arm_compute::TensorInfo::set_tensor_shape</a></div><div class="ttdeci">ITensorInfo &amp; set_tensor_shape(const TensorShape &amp;shape) override</div><div class="ttdoc">Set the shape of an already initialized tensor.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_tensor_info_8cpp_source.xhtml#l00352">TensorInfo.cpp:352</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_ac57b92957968088a392021cac1d2076b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a></div><div class="ttdeci">ScaleKernelInfo info(interpolation_policy, default_border_mode, PixelValue(), sampling_policy, false)</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a696b031073e74bf2cb98e5ef201d4aa3"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a696b031073e74bf2cb98e5ef201d4aa3">arm_compute::DataType::UNKNOWN</a></div><div class="ttdeci">@ UNKNOWN</div><div class="ttdoc">Unknown data type.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_dimensions_xhtml_a80a5f2d6e3a697c9aad893a3b4242615"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">arm_compute::Dimensions::num_dimensions</a></div><div class="ttdeci">unsigned int num_dimensions() const</div><div class="ttdoc">Returns the effective dimensionality of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00143">Dimensions.h:143</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">arm_compute::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdoc">Available data types.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00079">Types.h:79</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_info_xhtml_a269b19ce3f357ac65f41f9951906e38e"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">arm_compute::TensorInfo::tensor_shape</a></div><div class="ttdeci">const TensorShape &amp; tensor_shape() const override</div><div class="ttdoc">Size for each dimension of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00236">TensorInfo.h:236</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a></li>
    <li class="footer">Generated on Wed Jul 5 2023 11:29:27 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
