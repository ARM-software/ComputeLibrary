<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute/graph/backends/FunctionHelpers.h File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.05.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_function_helpers_8h.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#namespaces">Namespaces</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">FunctionHelpers.h File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="_i_post_op_8h_source.xhtml">arm_compute/core/experimental/IPostOp.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="arm__compute_2core_2experimental_2_post_ops_8h_source.xhtml">arm_compute/core/experimental/PostOps.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="graph_2_logger_8h_source.xhtml">arm_compute/graph/Logger.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="graph_2_tensor_8h_source.xhtml">arm_compute/graph/Tensor.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="arm__compute_2graph_2_type_printer_8h_source.xhtml">arm_compute/graph/TypePrinter.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml">arm_compute/graph/Types.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="arm__compute_2graph_2_utils_8h_source.xhtml">arm_compute/graph/Utils.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_fused_convolution_batch_normalization_function_8h_source.xhtml">arm_compute/graph/backends/FusedConvolutionBatchNormalizationFunction.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_fused_convolution_batch_normalization_with_post_ops_function_8h_source.xhtml">arm_compute/graph/backends/FusedConvolutionBatchNormalizationWithPostOpsFunction.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_fused_depthwise_convolution_batch_normalization_function_8h_source.xhtml">arm_compute/graph/backends/FusedDepthwiseConvolutionBatchNormalizationFunction.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="arm__compute_2graph_2backends_2_utils_8h_source.xhtml">arm_compute/graph/backends/Utils.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_nodes_8h_source.xhtml">arm_compute/graph/nodes/Nodes.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_error_8h_source.xhtml">arm_compute/core/Error.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="arm__compute_2core_2_helpers_8h_source.xhtml">arm_compute/core/Helpers.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_i_tensor_info_8h_source.xhtml">arm_compute/core/ITensorInfo.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_cast_8h_source.xhtml">support/Cast.h</a>&quot;</code><br />
</div>
<p><a href="_function_helpers_8h_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:namespacearm__compute"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></td></tr>
<tr class="memdesc:namespacearm__compute"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copyright (c) 2017-2023 Arm Limited. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1graph"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph.xhtml">arm_compute::graph</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1graph_1_1backends"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends.xhtml">arm_compute::graph::backends</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1graph_1_1backends_1_1detail"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml">arm_compute::graph::backends::detail</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a69dd1fc17c7a15f4125873be182c8c76"><td class="memTemplParams" colspan="2">template&lt;typename TargetInfo &gt; </td></tr>
<tr class="memitem:a69dd1fc17c7a15f4125873be182c8c76"><td class="memTemplItemLeft" align="right" valign="top">TargetInfo::TensorType *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a69dd1fc17c7a15f4125873be182c8c76">get_backing_tensor</a> (<a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml">arm_compute::graph::Tensor</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)</td></tr>
<tr class="memdesc:a69dd1fc17c7a15f4125873be182c8c76"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns backing tensor of a given tensor.  <a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a69dd1fc17c7a15f4125873be182c8c76">More...</a><br /></td></tr>
<tr class="separator:a69dd1fc17c7a15f4125873be182c8c76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa6fabefcb8c4bd308219565ddcf00928"><td class="memTemplParams" colspan="2">template&lt;typename TargetInfo &gt; </td></tr>
<tr class="memitem:aa6fabefcb8c4bd308219565ddcf00928"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#aa6fabefcb8c4bd308219565ddcf00928">validate_node</a> (const INode &amp;node, size_t num_expected_inputs, size_t num_expected_outputs)</td></tr>
<tr class="separator:aa6fabefcb8c4bd308219565ddcf00928"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f5afb0ddd5aec3a8e4df3c56d7d91f4"><td class="memTemplParams" colspan="2">template&lt;typename ActivationLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:a0f5afb0ddd5aec3a8e4df3c56d7d91f4"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; IFunction &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a0f5afb0ddd5aec3a8e4df3c56d7d91f4">create_activation_layer</a> (ActivationLayerNode &amp;node)</td></tr>
<tr class="memdesc:a0f5afb0ddd5aec3a8e4df3c56d7d91f4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a backend activation layer function.  <a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a0f5afb0ddd5aec3a8e4df3c56d7d91f4">More...</a><br /></td></tr>
<tr class="separator:a0f5afb0ddd5aec3a8e4df3c56d7d91f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac707d7ce6578bee792a6bb794236bd49"><td class="memTemplParams" colspan="2">template&lt;typename ArgMinMaxLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:ac707d7ce6578bee792a6bb794236bd49"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; IFunction &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ac707d7ce6578bee792a6bb794236bd49">create_arg_min_max_layer</a> (ArgMinMaxLayerNode &amp;node)</td></tr>
<tr class="memdesc:ac707d7ce6578bee792a6bb794236bd49"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a backend argminmax layer function.  <a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ac707d7ce6578bee792a6bb794236bd49">More...</a><br /></td></tr>
<tr class="separator:ac707d7ce6578bee792a6bb794236bd49"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d1a73ab4a0b267033a569c46813b9d5"><td class="memTemplParams" colspan="2">template&lt;typename BatchNormalizationLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:a5d1a73ab4a0b267033a569c46813b9d5"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; IFunction &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a5d1a73ab4a0b267033a569c46813b9d5">create_batch_normalization_layer</a> (BatchNormalizationLayerNode &amp;node)</td></tr>
<tr class="memdesc:a5d1a73ab4a0b267033a569c46813b9d5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend batch normalization layer function.  <a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a5d1a73ab4a0b267033a569c46813b9d5">More...</a><br /></td></tr>
<tr class="separator:a5d1a73ab4a0b267033a569c46813b9d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f44d10197128d3f478626b5c68b3c35"><td class="memTemplParams" colspan="2">template&lt;typename FusedLayerTypes , typename TargetInfo &gt; </td></tr>
<tr class="memitem:a7f44d10197128d3f478626b5c68b3c35"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; IFunction &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a7f44d10197128d3f478626b5c68b3c35">create_fused_convolution_batch_normalization_layer</a> (FusedConvolutionBatchNormalizationNode &amp;node, GraphContext &amp;ctx)</td></tr>
<tr class="memdesc:a7f44d10197128d3f478626b5c68b3c35"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend batch normalization layer function.  <a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a7f44d10197128d3f478626b5c68b3c35">More...</a><br /></td></tr>
<tr class="separator:a7f44d10197128d3f478626b5c68b3c35"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ec865e1ee296647ec995b501e5ceb8b"><td class="memTemplParams" colspan="2">template&lt;typename FusedLayerTypes , typename TargetInfo &gt; </td></tr>
<tr class="memitem:a7ec865e1ee296647ec995b501e5ceb8b"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; IFunction &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a7ec865e1ee296647ec995b501e5ceb8b">create_fused_depthwise_convolution_batch_normalization_layer</a> (FusedDepthwiseConvolutionBatchNormalizationNode &amp;node, GraphContext &amp;ctx)</td></tr>
<tr class="memdesc:a7ec865e1ee296647ec995b501e5ceb8b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend fused depthwise convolution batch normalization layer function.  <a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a7ec865e1ee296647ec995b501e5ceb8b">More...</a><br /></td></tr>
<tr class="separator:a7ec865e1ee296647ec995b501e5ceb8b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab3787ac008a709edda8d347370bbad61"><td class="memTemplParams" colspan="2">template&lt;typename BoundingBoxTransformLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:ab3787ac008a709edda8d347370bbad61"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; IFunction &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ab3787ac008a709edda8d347370bbad61">create_bounding_box_transform_layer</a> (BoundingBoxTransformLayerNode &amp;node)</td></tr>
<tr class="memdesc:ab3787ac008a709edda8d347370bbad61"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend bounding box transform layer function.  <a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ab3787ac008a709edda8d347370bbad61">More...</a><br /></td></tr>
<tr class="separator:ab3787ac008a709edda8d347370bbad61"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f5c14020836599056281fe52d7e9dd3"><td class="memTemplParams" colspan="2">template&lt;typename ChannelShuffleLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:a3f5c14020836599056281fe52d7e9dd3"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; IFunction &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a3f5c14020836599056281fe52d7e9dd3">create_channel_shuffle_layer</a> (ChannelShuffleLayerNode &amp;node)</td></tr>
<tr class="memdesc:a3f5c14020836599056281fe52d7e9dd3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend channel shuffle layer function.  <a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a3f5c14020836599056281fe52d7e9dd3">More...</a><br /></td></tr>
<tr class="separator:a3f5c14020836599056281fe52d7e9dd3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a627f6bdc4a7de6dbb03acb3d8b3a4d6d"><td class="memTemplParams" colspan="2">template&lt;typename ConcatenateLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:a627f6bdc4a7de6dbb03acb3d8b3a4d6d"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_i_function.xhtml">arm_compute::IFunction</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a627f6bdc4a7de6dbb03acb3d8b3a4d6d">create_concatenate_layer</a> (ConcatenateLayerNode &amp;node)</td></tr>
<tr class="memdesc:a627f6bdc4a7de6dbb03acb3d8b3a4d6d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend layer concatenate function.  <a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a627f6bdc4a7de6dbb03acb3d8b3a4d6d">More...</a><br /></td></tr>
<tr class="separator:a627f6bdc4a7de6dbb03acb3d8b3a4d6d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e38014fa1e7e08dcbf3b5f8c3bdb81e"><td class="memTemplParams" colspan="2">template&lt;typename ConvolutionLayerFunctions , typename TargetInfo &gt; </td></tr>
<tr class="memitem:a9e38014fa1e7e08dcbf3b5f8c3bdb81e"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; IFunction &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9e38014fa1e7e08dcbf3b5f8c3bdb81e">create_convolution_layer</a> (ConvolutionLayerNode &amp;node, GraphContext &amp;ctx)</td></tr>
<tr class="memdesc:a9e38014fa1e7e08dcbf3b5f8c3bdb81e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend convolution layer function.  <a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a9e38014fa1e7e08dcbf3b5f8c3bdb81e">More...</a><br /></td></tr>
<tr class="separator:a9e38014fa1e7e08dcbf3b5f8c3bdb81e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae1fc8d58864f288cb356851d79f1c28d"><td class="memTemplParams" colspan="2">template&lt;typename ConvolutionLayerFunctions , typename TargetInfo &gt; </td></tr>
<tr class="memitem:ae1fc8d58864f288cb356851d79f1c28d"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; IFunction &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ae1fc8d58864f288cb356851d79f1c28d">create_fused_convolution_with_post_op</a> (FusedConvolutionWithPostOpNode &amp;node, GraphContext &amp;ctx)</td></tr>
<tr class="memdesc:ae1fc8d58864f288cb356851d79f1c28d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend convolution layer function with post operator.  <a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ae1fc8d58864f288cb356851d79f1c28d">More...</a><br /></td></tr>
<tr class="separator:ae1fc8d58864f288cb356851d79f1c28d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af2cc0b57645cd940d1ac0fd9b7171ffc"><td class="memTemplParams" colspan="2">template&lt;typename FusedLayerTypes , typename TargetInfo &gt; </td></tr>
<tr class="memitem:af2cc0b57645cd940d1ac0fd9b7171ffc"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; IFunction &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#af2cc0b57645cd940d1ac0fd9b7171ffc">create_fused_convolution_batch_normalization_with_post_op</a> (FusedConvolutionBatchNormalizationWithPostOpsNode &amp;node, GraphContext &amp;ctx)</td></tr>
<tr class="memdesc:af2cc0b57645cd940d1ac0fd9b7171ffc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend convolution batch normalization layer function with post operator.  <a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#af2cc0b57645cd940d1ac0fd9b7171ffc">More...</a><br /></td></tr>
<tr class="separator:af2cc0b57645cd940d1ac0fd9b7171ffc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac77fa3bf0d7d7c3fde6243192f93f380"><td class="memTemplParams" colspan="2">template&lt;typename DeconvolutionLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:ac77fa3bf0d7d7c3fde6243192f93f380"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; IFunction &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ac77fa3bf0d7d7c3fde6243192f93f380">create_deconvolution_layer</a> (DeconvolutionLayerNode &amp;node, GraphContext &amp;ctx)</td></tr>
<tr class="memdesc:ac77fa3bf0d7d7c3fde6243192f93f380"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend deconvolution layer function.  <a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ac77fa3bf0d7d7c3fde6243192f93f380">More...</a><br /></td></tr>
<tr class="separator:ac77fa3bf0d7d7c3fde6243192f93f380"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8ff2a40f95b76ec10ac2a98d1a8d594"><td class="memTemplParams" colspan="2">template&lt;typename DepthwiseConvolutionLayer , typename TargetInfo &gt; </td></tr>
<tr class="memitem:ab8ff2a40f95b76ec10ac2a98d1a8d594"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; IFunction &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ab8ff2a40f95b76ec10ac2a98d1a8d594">create_depthwise_convolution_layer</a> (DepthwiseConvolutionLayerNode &amp;node)</td></tr>
<tr class="memdesc:ab8ff2a40f95b76ec10ac2a98d1a8d594"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend layer depth-wise convolution function.  <a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ab8ff2a40f95b76ec10ac2a98d1a8d594">More...</a><br /></td></tr>
<tr class="separator:ab8ff2a40f95b76ec10ac2a98d1a8d594"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae3c0800f31c468404c636104f3c118d"><td class="memTemplParams" colspan="2">template&lt;typename DepthToSpaceLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:aae3c0800f31c468404c636104f3c118d"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; IFunction &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#aae3c0800f31c468404c636104f3c118d">create_depth_to_space_layer</a> (DepthToSpaceLayerNode &amp;node)</td></tr>
<tr class="memdesc:aae3c0800f31c468404c636104f3c118d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend depth to space layer function.  <a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#aae3c0800f31c468404c636104f3c118d">More...</a><br /></td></tr>
<tr class="separator:aae3c0800f31c468404c636104f3c118d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a751e39ebd690d1cd1027d165cdbe143d"><td class="memTemplParams" colspan="2">template&lt;typename DequantizationLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:a751e39ebd690d1cd1027d165cdbe143d"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; IFunction &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a751e39ebd690d1cd1027d165cdbe143d">create_dequantization_layer</a> (DequantizationLayerNode &amp;node)</td></tr>
<tr class="memdesc:a751e39ebd690d1cd1027d165cdbe143d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend dequantize layer function.  <a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a751e39ebd690d1cd1027d165cdbe143d">More...</a><br /></td></tr>
<tr class="separator:a751e39ebd690d1cd1027d165cdbe143d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afce1d2d783bb97a3a8c3c406c8cf6b9c"><td class="memTemplParams" colspan="2">template&lt;typename DetectionOutputLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:afce1d2d783bb97a3a8c3c406c8cf6b9c"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; IFunction &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#afce1d2d783bb97a3a8c3c406c8cf6b9c">create_detection_output_layer</a> (DetectionOutputLayerNode &amp;node)</td></tr>
<tr class="memdesc:afce1d2d783bb97a3a8c3c406c8cf6b9c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend detection output layer function.  <a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#afce1d2d783bb97a3a8c3c406c8cf6b9c">More...</a><br /></td></tr>
<tr class="separator:afce1d2d783bb97a3a8c3c406c8cf6b9c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2dbe319a9ac9b6820b2ef5eff8c46ddc"><td class="memTemplParams" colspan="2">template&lt;typename DetectionPostProcessLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:a2dbe319a9ac9b6820b2ef5eff8c46ddc"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; IFunction &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a2dbe319a9ac9b6820b2ef5eff8c46ddc">create_detection_post_process_layer</a> (DetectionPostProcessLayerNode &amp;node)</td></tr>
<tr class="memdesc:a2dbe319a9ac9b6820b2ef5eff8c46ddc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend detection post process layer function.  <a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a2dbe319a9ac9b6820b2ef5eff8c46ddc">More...</a><br /></td></tr>
<tr class="separator:a2dbe319a9ac9b6820b2ef5eff8c46ddc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa37faf92f78c0f5cefe2d43c8bf07f18"><td class="memTemplParams" colspan="2">template&lt;typename EltwiseFunctions , typename TargetInfo &gt; </td></tr>
<tr class="memitem:aa37faf92f78c0f5cefe2d43c8bf07f18"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; IFunction &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#aa37faf92f78c0f5cefe2d43c8bf07f18">create_eltwise_layer</a> (EltwiseLayerNode &amp;node)</td></tr>
<tr class="memdesc:aa37faf92f78c0f5cefe2d43c8bf07f18"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend element-wise operation layer function.  <a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#aa37faf92f78c0f5cefe2d43c8bf07f18">More...</a><br /></td></tr>
<tr class="separator:aa37faf92f78c0f5cefe2d43c8bf07f18"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2649717c86236a4308f258322df73114"><td class="memTemplParams" colspan="2">template&lt;typename UnaryEltwiseFunctions , typename TargetInfo &gt; </td></tr>
<tr class="memitem:a2649717c86236a4308f258322df73114"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; IFunction &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a2649717c86236a4308f258322df73114">create_unary_eltwise_layer</a> (UnaryEltwiseLayerNode &amp;node)</td></tr>
<tr class="memdesc:a2649717c86236a4308f258322df73114"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend unary element-wise operation layer function.  <a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a2649717c86236a4308f258322df73114">More...</a><br /></td></tr>
<tr class="separator:a2649717c86236a4308f258322df73114"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7880c3b249a6dad40da0ebcf6600b0e1"><td class="memTemplParams" colspan="2">template&lt;typename FlattenLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:a7880c3b249a6dad40da0ebcf6600b0e1"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; IFunction &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a7880c3b249a6dad40da0ebcf6600b0e1">create_flatten_layer</a> (FlattenLayerNode &amp;node)</td></tr>
<tr class="memdesc:a7880c3b249a6dad40da0ebcf6600b0e1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend flatten layer function.  <a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a7880c3b249a6dad40da0ebcf6600b0e1">More...</a><br /></td></tr>
<tr class="separator:a7880c3b249a6dad40da0ebcf6600b0e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac64bbd0df74207f9ab59953e21311178"><td class="memTemplParams" colspan="2">template&lt;typename FullyConnectedLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:ac64bbd0df74207f9ab59953e21311178"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; IFunction &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ac64bbd0df74207f9ab59953e21311178">create_fully_connected_layer</a> (FullyConnectedLayerNode &amp;node, GraphContext &amp;ctx)</td></tr>
<tr class="memdesc:ac64bbd0df74207f9ab59953e21311178"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend fully connected layer function.  <a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ac64bbd0df74207f9ab59953e21311178">More...</a><br /></td></tr>
<tr class="separator:ac64bbd0df74207f9ab59953e21311178"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1a18725e5da4a7ae62c9a3b731ab8fe1"><td class="memTemplParams" colspan="2">template&lt;typename GenerateProposalsLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:a1a18725e5da4a7ae62c9a3b731ab8fe1"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; IFunction &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a1a18725e5da4a7ae62c9a3b731ab8fe1">create_generate_proposals_layer</a> (GenerateProposalsLayerNode &amp;node, GraphContext &amp;ctx)</td></tr>
<tr class="memdesc:a1a18725e5da4a7ae62c9a3b731ab8fe1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend generate proposals layer function.  <a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a1a18725e5da4a7ae62c9a3b731ab8fe1">More...</a><br /></td></tr>
<tr class="separator:a1a18725e5da4a7ae62c9a3b731ab8fe1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2deabaddc31b1c05c9176c0f5b79073f"><td class="memTemplParams" colspan="2">template&lt;typename L2NormalizeLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:a2deabaddc31b1c05c9176c0f5b79073f"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; IFunction &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a2deabaddc31b1c05c9176c0f5b79073f">create_l2_normalize_layer</a> (L2NormalizeLayerNode &amp;node, GraphContext &amp;ctx)</td></tr>
<tr class="memdesc:a2deabaddc31b1c05c9176c0f5b79073f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend l2 normalization layer function.  <a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a2deabaddc31b1c05c9176c0f5b79073f">More...</a><br /></td></tr>
<tr class="separator:a2deabaddc31b1c05c9176c0f5b79073f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2dfc97df083b68f8409ba21d8a0110d8"><td class="memTemplParams" colspan="2">template&lt;typename NormalizationLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:a2dfc97df083b68f8409ba21d8a0110d8"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; IFunction &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a2dfc97df083b68f8409ba21d8a0110d8">create_normalization_layer</a> (NormalizationLayerNode &amp;node, GraphContext &amp;ctx)</td></tr>
<tr class="memdesc:a2dfc97df083b68f8409ba21d8a0110d8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend normalization layer function.  <a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a2dfc97df083b68f8409ba21d8a0110d8">More...</a><br /></td></tr>
<tr class="separator:a2dfc97df083b68f8409ba21d8a0110d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a92b35a365f58606a13baaf4501d78d9e"><td class="memTemplParams" colspan="2">template&lt;typename NormalizePlanarYUVLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:a92b35a365f58606a13baaf4501d78d9e"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; IFunction &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a92b35a365f58606a13baaf4501d78d9e">create_normalize_planar_yuv_layer</a> (NormalizePlanarYUVLayerNode &amp;node)</td></tr>
<tr class="memdesc:a92b35a365f58606a13baaf4501d78d9e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend normalize planar YUV layer function.  <a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a92b35a365f58606a13baaf4501d78d9e">More...</a><br /></td></tr>
<tr class="separator:a92b35a365f58606a13baaf4501d78d9e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a127d0cce11ed3d411eaa5bd25c7a3ac1"><td class="memTemplParams" colspan="2">template&lt;typename PadLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:a127d0cce11ed3d411eaa5bd25c7a3ac1"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; IFunction &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a127d0cce11ed3d411eaa5bd25c7a3ac1">create_pad_layer</a> (PadLayerNode &amp;node)</td></tr>
<tr class="memdesc:a127d0cce11ed3d411eaa5bd25c7a3ac1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend pad layer function.  <a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a127d0cce11ed3d411eaa5bd25c7a3ac1">More...</a><br /></td></tr>
<tr class="separator:a127d0cce11ed3d411eaa5bd25c7a3ac1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa65a1becdfa5fc3533d79bba0cd4095c"><td class="memTemplParams" colspan="2">template&lt;typename PermuteLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:aa65a1becdfa5fc3533d79bba0cd4095c"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; IFunction &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#aa65a1becdfa5fc3533d79bba0cd4095c">create_permute_layer</a> (PermuteLayerNode &amp;node)</td></tr>
<tr class="memdesc:aa65a1becdfa5fc3533d79bba0cd4095c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend permute layer function.  <a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#aa65a1becdfa5fc3533d79bba0cd4095c">More...</a><br /></td></tr>
<tr class="separator:aa65a1becdfa5fc3533d79bba0cd4095c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e51b62035e79b0f12964cae17ce0480"><td class="memTemplParams" colspan="2">template&lt;typename PoolingLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:a0e51b62035e79b0f12964cae17ce0480"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; IFunction &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a0e51b62035e79b0f12964cae17ce0480">create_pooling_layer</a> (PoolingLayerNode &amp;node)</td></tr>
<tr class="memdesc:a0e51b62035e79b0f12964cae17ce0480"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend pooling layer function.  <a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a0e51b62035e79b0f12964cae17ce0480">More...</a><br /></td></tr>
<tr class="separator:a0e51b62035e79b0f12964cae17ce0480"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6806f347d8b4c0986cdfe4c45918972b"><td class="memTemplParams" colspan="2">template&lt;typename PReluFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:a6806f347d8b4c0986cdfe4c45918972b"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; IFunction &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a6806f347d8b4c0986cdfe4c45918972b">create_prelu_layer</a> (PReluLayerNode &amp;node)</td></tr>
<tr class="memdesc:a6806f347d8b4c0986cdfe4c45918972b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend PRelu layer function.  <a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a6806f347d8b4c0986cdfe4c45918972b">More...</a><br /></td></tr>
<tr class="separator:a6806f347d8b4c0986cdfe4c45918972b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5567ed5ad9c8fb45d2748bab27163530"><td class="memTemplParams" colspan="2">template&lt;typename TargetInfo &gt; </td></tr>
<tr class="memitem:a5567ed5ad9c8fb45d2748bab27163530"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; IFunction &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a5567ed5ad9c8fb45d2748bab27163530">create_print_layer</a> (PrintLayerNode &amp;node)</td></tr>
<tr class="memdesc:a5567ed5ad9c8fb45d2748bab27163530"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend print layer function.  <a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a5567ed5ad9c8fb45d2748bab27163530">More...</a><br /></td></tr>
<tr class="separator:a5567ed5ad9c8fb45d2748bab27163530"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf28fee838c38cc4da407a4dbc62f7b0"><td class="memTemplParams" colspan="2">template&lt;typename PriorBoxLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:aaf28fee838c38cc4da407a4dbc62f7b0"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; IFunction &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#aaf28fee838c38cc4da407a4dbc62f7b0">create_priorbox_layer</a> (PriorBoxLayerNode &amp;node)</td></tr>
<tr class="memdesc:aaf28fee838c38cc4da407a4dbc62f7b0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend priorbox layer function.  <a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#aaf28fee838c38cc4da407a4dbc62f7b0">More...</a><br /></td></tr>
<tr class="separator:aaf28fee838c38cc4da407a4dbc62f7b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a31be99a5d0f75045fc411e211824baad"><td class="memTemplParams" colspan="2">template&lt;typename QuantizationLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:a31be99a5d0f75045fc411e211824baad"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; IFunction &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a31be99a5d0f75045fc411e211824baad">create_quantization_layer</a> (QuantizationLayerNode &amp;node)</td></tr>
<tr class="memdesc:a31be99a5d0f75045fc411e211824baad"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend quantization layer function.  <a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a31be99a5d0f75045fc411e211824baad">More...</a><br /></td></tr>
<tr class="separator:a31be99a5d0f75045fc411e211824baad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0223bc805b02792657b46bca60e320b"><td class="memTemplParams" colspan="2">template&lt;typename ReductionOperationFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:ae0223bc805b02792657b46bca60e320b"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; IFunction &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ae0223bc805b02792657b46bca60e320b">create_reduction_operation_layer</a> (ReductionLayerNode &amp;node, GraphContext &amp;ctx)</td></tr>
<tr class="memdesc:ae0223bc805b02792657b46bca60e320b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend reduction operation layer function.  <a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ae0223bc805b02792657b46bca60e320b">More...</a><br /></td></tr>
<tr class="separator:ae0223bc805b02792657b46bca60e320b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0331e6b2b68ea76e9415f7f148d92601"><td class="memTemplParams" colspan="2">template&lt;typename ReorgLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:a0331e6b2b68ea76e9415f7f148d92601"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; IFunction &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a0331e6b2b68ea76e9415f7f148d92601">create_reorg_layer</a> (ReorgLayerNode &amp;node)</td></tr>
<tr class="memdesc:a0331e6b2b68ea76e9415f7f148d92601"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend reorg layer function.  <a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a0331e6b2b68ea76e9415f7f148d92601">More...</a><br /></td></tr>
<tr class="separator:a0331e6b2b68ea76e9415f7f148d92601"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad1922deea021647290d0c206723e6c73"><td class="memTemplParams" colspan="2">template&lt;typename ReshapeLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:ad1922deea021647290d0c206723e6c73"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; IFunction &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ad1922deea021647290d0c206723e6c73">create_reshape_layer</a> (ReshapeLayerNode &amp;node)</td></tr>
<tr class="memdesc:ad1922deea021647290d0c206723e6c73"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend reshape layer function.  <a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ad1922deea021647290d0c206723e6c73">More...</a><br /></td></tr>
<tr class="separator:ad1922deea021647290d0c206723e6c73"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb3a9be16de941b0f601e16c8ac76533"><td class="memTemplParams" colspan="2">template&lt;typename ResizeLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:adb3a9be16de941b0f601e16c8ac76533"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; IFunction &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#adb3a9be16de941b0f601e16c8ac76533">create_resize_layer</a> (ResizeLayerNode &amp;node)</td></tr>
<tr class="memdesc:adb3a9be16de941b0f601e16c8ac76533"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend resize layer function.  <a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#adb3a9be16de941b0f601e16c8ac76533">More...</a><br /></td></tr>
<tr class="separator:adb3a9be16de941b0f601e16c8ac76533"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adef77d1f64203fe2828b3f992c87f5df"><td class="memTemplParams" colspan="2">template&lt;typename ROIAlignLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:adef77d1f64203fe2828b3f992c87f5df"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; IFunction &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#adef77d1f64203fe2828b3f992c87f5df">create_roi_align_layer</a> (ROIAlignLayerNode &amp;node)</td></tr>
<tr class="memdesc:adef77d1f64203fe2828b3f992c87f5df"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend ROI align layer function.  <a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#adef77d1f64203fe2828b3f992c87f5df">More...</a><br /></td></tr>
<tr class="separator:adef77d1f64203fe2828b3f992c87f5df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69a819dc92f559ed0b788392391da602"><td class="memTemplParams" colspan="2">template&lt;typename SliceLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:a69a819dc92f559ed0b788392391da602"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; IFunction &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a69a819dc92f559ed0b788392391da602">create_slice_layer</a> (SliceLayerNode &amp;node)</td></tr>
<tr class="memdesc:a69a819dc92f559ed0b788392391da602"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend slice layer function.  <a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a69a819dc92f559ed0b788392391da602">More...</a><br /></td></tr>
<tr class="separator:a69a819dc92f559ed0b788392391da602"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5271c97b6bef5972c5e259307d52a4da"><td class="memTemplParams" colspan="2">template&lt;typename SoftmaxLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:a5271c97b6bef5972c5e259307d52a4da"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; IFunction &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a5271c97b6bef5972c5e259307d52a4da">create_softmax_layer</a> (SoftmaxLayerNode &amp;node, GraphContext &amp;ctx)</td></tr>
<tr class="memdesc:a5271c97b6bef5972c5e259307d52a4da"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend softmax layer function.  <a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a5271c97b6bef5972c5e259307d52a4da">More...</a><br /></td></tr>
<tr class="separator:a5271c97b6bef5972c5e259307d52a4da"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae157076aa533f9db0960dea1d5fc5014"><td class="memTemplParams" colspan="2">template&lt;typename StackLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:ae157076aa533f9db0960dea1d5fc5014"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_i_function.xhtml">arm_compute::IFunction</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ae157076aa533f9db0960dea1d5fc5014">create_stack_layer</a> (StackLayerNode &amp;node)</td></tr>
<tr class="memdesc:ae157076aa533f9db0960dea1d5fc5014"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend layer stack function.  <a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#ae157076aa533f9db0960dea1d5fc5014">More...</a><br /></td></tr>
<tr class="separator:ae157076aa533f9db0960dea1d5fc5014"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a15a83bd3d4be8671bf012385eb508c8f"><td class="memTemplParams" colspan="2">template&lt;typename StridedSliceLayerFunction , typename TargetInfo &gt; </td></tr>
<tr class="memitem:a15a83bd3d4be8671bf012385eb508c8f"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; IFunction &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a15a83bd3d4be8671bf012385eb508c8f">create_strided_slice_layer</a> (StridedSliceLayerNode &amp;node)</td></tr>
<tr class="memdesc:a15a83bd3d4be8671bf012385eb508c8f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a backend slice layer function.  <a href="namespacearm__compute_1_1graph_1_1backends_1_1detail.xhtml#a15a83bd3d4be8671bf012385eb508c8f">More...</a><br /></td></tr>
<tr class="separator:a15a83bd3d4be8671bf012385eb508c8f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_214608ef36d61442cb2b0c1c4e9a7def.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="dir_99ae3712d1eecd2a93fc4d38b59a99ba.xhtml">graph</a></li><li class="navelem"><a class="el" href="dir_59b2231210c554f4cc243709030bf1f8.xhtml">backends</a></li><li class="navelem"><a class="el" href="_function_helpers_8h.xhtml">FunctionHelpers.h</a></li>
    <li class="footer">Generated on Wed Jul 5 2023 11:29:21 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
