<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/cpu/kernels/elementwise_binary/generic/neon/impl.h File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('elementwise__binary_2generic_2neon_2impl_8h.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#namespaces">Namespaces</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">impl.h File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="_n_e_asymm_8h_source.xhtml">src/core/NEON/NEAsymm.h</a>&quot;</code><br />
</div>
<p><a href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:namespacearm__compute"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></td></tr>
<tr class="memdesc:namespacearm__compute"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copyright (c) 2017-2023 Arm Limited. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1cpu"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml">arm_compute::cpu</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:abbfe5d27e11d8842fdb4cef411832f8e"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op, typename VectorType &gt; </td></tr>
<tr class="memitem:abbfe5d27e11d8842fdb4cef411832f8e"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">VectorType::type</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#abbfe5d27e11d8842fdb4cef411832f8e">elementwise_arithm_op</a> (const typename <a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">VectorType::type</a> &amp;a, const typename <a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">VectorType::type</a> &amp;b)</td></tr>
<tr class="separator:abbfe5d27e11d8842fdb4cef411832f8e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e4a309149d475d17fdfd2d11c26b916"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op, typename ScalarType , typename VectorType &gt; </td></tr>
<tr class="memitem:a6e4a309149d475d17fdfd2d11c26b916"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">VectorType::type</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a6e4a309149d475d17fdfd2d11c26b916">elementwise_arithm_op_broadcast</a> (const typename <a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">VectorType::type</a> &amp;a, const ScalarType &amp;broadcast_value, const bool reorder)</td></tr>
<tr class="separator:a6e4a309149d475d17fdfd2d11c26b916"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a82713bd9209865da67e8624a162ef9c1"><td class="memTemplParams" colspan="2">template&lt;typename InputScalarType , typename OutputScalarType , typename InputVectorType &gt; </td></tr>
<tr class="memitem:a82713bd9209865da67e8624a162ef9c1"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a82713bd9209865da67e8624a162ef9c1">elementwise_op</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window, OutputScalarType(*scalar_func)(const InputScalarType &amp;, const InputScalarType &amp;), int(*broadcast_func)(int, int, int, const InputScalarType *, const InputScalarType &amp;, OutputScalarType *, const bool), int(*neon_func)(int, int, int, const InputScalarType *, const InputScalarType *, OutputScalarType *))</td></tr>
<tr class="separator:a82713bd9209865da67e8624a162ef9c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c0ec3e8fab2ea0202cedcc94da53f25"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op, typename ScalarType &gt; </td></tr>
<tr class="memitem:a4c0ec3e8fab2ea0202cedcc94da53f25"><td class="memTemplItemLeft" align="right" valign="top">ScalarType&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a4c0ec3e8fab2ea0202cedcc94da53f25">elementwise_arithm_op_scalar</a> (const ScalarType &amp;a, const ScalarType &amp;b)</td></tr>
<tr class="separator:a4c0ec3e8fab2ea0202cedcc94da53f25"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2dd8a3579e2536f06cbda2c602ff6261"><td class="memItemLeft" align="right" valign="top">template&lt;&gt; </td></tr>
<tr class="memitem:a2dd8a3579e2536f06cbda2c602ff6261"><td class="memTemplItemLeft" align="right" valign="top">int32x4_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a2dd8a3579e2536f06cbda2c602ff6261">elementwise_arithm_op&lt; ArithmeticOperation::DIV, typename wrapper::traits::neon_vector&lt; int32_t, 4 &gt; &gt;</a> (const int32x4_t &amp;a, const int32x4_t &amp;b)</td></tr>
<tr class="separator:a2dd8a3579e2536f06cbda2c602ff6261"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad3c3a3a2edcc9ae7274708f1babf305a"><td class="memItemLeft" align="right" valign="top">template&lt;&gt; </td></tr>
<tr class="memitem:ad3c3a3a2edcc9ae7274708f1babf305a"><td class="memTemplItemLeft" align="right" valign="top">float32x4_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ad3c3a3a2edcc9ae7274708f1babf305a">elementwise_arithm_op&lt; ArithmeticOperation::DIV, typename wrapper::traits::neon_vector&lt; float, 4 &gt; &gt;</a> (const float32x4_t &amp;a, const float32x4_t &amp;b)</td></tr>
<tr class="separator:ad3c3a3a2edcc9ae7274708f1babf305a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7232f84a3d1ac94e631f1abf4f1fdca"><td class="memItemLeft" align="right" valign="top">template&lt;&gt; </td></tr>
<tr class="memitem:af7232f84a3d1ac94e631f1abf4f1fdca"><td class="memTemplItemLeft" align="right" valign="top">float32x4_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#af7232f84a3d1ac94e631f1abf4f1fdca">elementwise_arithm_op&lt; ArithmeticOperation::POWER, typename wrapper::traits::neon_vector&lt; float, 4 &gt; &gt;</a> (const float32x4_t &amp;a, const float32x4_t &amp;b)</td></tr>
<tr class="separator:af7232f84a3d1ac94e631f1abf4f1fdca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ecfb489f7d67ef4d8c1ba77e1060702"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op, typename ScalarType , typename VectorType &gt; </td></tr>
<tr class="memitem:a7ecfb489f7d67ef4d8c1ba77e1060702"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a7ecfb489f7d67ef4d8c1ba77e1060702">elementwise_arithm_op_loop</a> (int window_start_x, int window_end_x, int window_step_x, const ScalarType *input1_ptr, const ScalarType *input2_ptr, ScalarType *output_ptr)</td></tr>
<tr class="separator:a7ecfb489f7d67ef4d8c1ba77e1060702"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d55687f004c1a3302485b2cb8da093b"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op, typename ScalarType , typename VectorType &gt; </td></tr>
<tr class="memitem:a1d55687f004c1a3302485b2cb8da093b"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a1d55687f004c1a3302485b2cb8da093b">elementwise_arithm_op_broadcast_loop</a> (int window_start_x, int window_end_x, int window_step_x, const ScalarType *non_broadcast_input_ptr, const ScalarType &amp;broadcast_value, ScalarType *output_ptr, const bool reorder)</td></tr>
<tr class="separator:a1d55687f004c1a3302485b2cb8da093b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a29b215a8ed4583d1d4ac5d1e226bf9ef"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op, typename VectorType &gt; </td></tr>
<tr class="memitem:a29b215a8ed4583d1d4ac5d1e226bf9ef"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a29b215a8ed4583d1d4ac5d1e226bf9ef">elementwise_arithm_op</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a29b215a8ed4583d1d4ac5d1e226bf9ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb34d4000c420ca4fed96903be0fdc64"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op, typename InputScalarType &gt; </td></tr>
<tr class="memitem:abb34d4000c420ca4fed96903be0fdc64"><td class="memTemplItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#abb34d4000c420ca4fed96903be0fdc64">elementwise_comp_op_scalar</a> (const InputScalarType &amp;a, const InputScalarType &amp;b)</td></tr>
<tr class="separator:abb34d4000c420ca4fed96903be0fdc64"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac758cf39f9e6885c73b6814ac80ff0ec"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op, typename InputVectorType , typename OutputVectorType &gt; </td></tr>
<tr class="memitem:ac758cf39f9e6885c73b6814ac80ff0ec"><td class="memTemplItemLeft" align="right" valign="top">OutputVectorType&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ac758cf39f9e6885c73b6814ac80ff0ec">elementwise_comp_op</a> (const InputVectorType &amp;a, const InputVectorType &amp;b)</td></tr>
<tr class="separator:ac758cf39f9e6885c73b6814ac80ff0ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae6f48be843bb47d4779d6613cd3ce68d"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op, typename InputScalarType , typename InputVectorType , typename OutputVectorType &gt; </td></tr>
<tr class="memitem:ae6f48be843bb47d4779d6613cd3ce68d"><td class="memTemplItemLeft" align="right" valign="top">OutputVectorType&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ae6f48be843bb47d4779d6613cd3ce68d">elementwise_comp_op_broadcast</a> (const InputVectorType &amp;a, const InputScalarType &amp;broadcast_value, const bool reorder)</td></tr>
<tr class="separator:ae6f48be843bb47d4779d6613cd3ce68d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2a62b7914c8bff0e139b376ec38dbe7"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op, typename InputScalarType , typename InputVectorType &gt; </td></tr>
<tr class="memitem:ad2a62b7914c8bff0e139b376ec38dbe7"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ad2a62b7914c8bff0e139b376ec38dbe7">elementwise_comp_op_broadcast_8_loop</a> (int window_start_x, int window_end_x, int window_step_x, const InputScalarType *non_broadcast_input_ptr, const InputScalarType &amp;broadcast_value, uint8_t *output_ptr, const bool reorder)</td></tr>
<tr class="separator:ad2a62b7914c8bff0e139b376ec38dbe7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a324f99e84c7277809b5a774363197382"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op, typename InputScalarType , typename InputVectorType &gt; </td></tr>
<tr class="memitem:a324f99e84c7277809b5a774363197382"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a324f99e84c7277809b5a774363197382">elementwise_comp_op_broadcast_16_loop</a> (int window_start_x, int window_end_x, int window_step_x, const InputScalarType *non_broadcast_input_ptr, const InputScalarType &amp;broadcast_value, uint8_t *output_ptr, const bool reorder)</td></tr>
<tr class="separator:a324f99e84c7277809b5a774363197382"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a15e0926812301b45c7e24e7eea269ab2"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op, typename InputScalarType , typename InputVectorType &gt; </td></tr>
<tr class="memitem:a15e0926812301b45c7e24e7eea269ab2"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a15e0926812301b45c7e24e7eea269ab2">elementwise_comp_op_broadcast_32_loop</a> (int window_start_x, int window_end_x, int window_step_x, const InputScalarType *non_broadcast_input_ptr, const InputScalarType &amp;broadcast_value, uint8_t *output_ptr, const bool reorder)</td></tr>
<tr class="separator:a15e0926812301b45c7e24e7eea269ab2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0df077147bf38575572e36582af9f573"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op, typename InputScalarType , typename InputVectorType &gt; </td></tr>
<tr class="memitem:a0df077147bf38575572e36582af9f573"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a0df077147bf38575572e36582af9f573">elementwise_comp_op_8_loop</a> (int window_start_x, int window_end_x, int window_step_x, const InputScalarType *input1_ptr, const InputScalarType *input2_ptr, uint8_t *output_ptr)</td></tr>
<tr class="separator:a0df077147bf38575572e36582af9f573"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a550901088b6a737a17d7eeb052ba9ef6"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op, typename InputScalarType , typename InputVectorType &gt; </td></tr>
<tr class="memitem:a550901088b6a737a17d7eeb052ba9ef6"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a550901088b6a737a17d7eeb052ba9ef6">elementwise_comp_op_16_loop</a> (int window_start_x, int window_end_x, int window_step_x, const InputScalarType *input1_ptr, const InputScalarType *input2_ptr, uint8_t *output_ptr)</td></tr>
<tr class="separator:a550901088b6a737a17d7eeb052ba9ef6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae64977c9bd4690e8e3607e6fea754199"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op, typename InputScalarType , typename InputVectorType &gt; </td></tr>
<tr class="memitem:ae64977c9bd4690e8e3607e6fea754199"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ae64977c9bd4690e8e3607e6fea754199">elementwise_comp_op_32_loop</a> (int window_start_x, int window_end_x, int window_step_x, const InputScalarType *input1_ptr, const InputScalarType *input2_ptr, uint8_t *output_ptr)</td></tr>
<tr class="separator:ae64977c9bd4690e8e3607e6fea754199"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8cc8f4068cf9120bf433df94926221f"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op, typename InputScalarType , typename InputVectorType &gt; </td></tr>
<tr class="memitem:af8cc8f4068cf9120bf433df94926221f"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#af8cc8f4068cf9120bf433df94926221f">elementwise_comp_op_8</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:af8cc8f4068cf9120bf433df94926221f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38e6bb15e7ac2da0795f3cfef2f29d6d"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op, typename InputScalarType , typename InputVectorType &gt; </td></tr>
<tr class="memitem:a38e6bb15e7ac2da0795f3cfef2f29d6d"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a38e6bb15e7ac2da0795f3cfef2f29d6d">elementwise_comp_op_16</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a38e6bb15e7ac2da0795f3cfef2f29d6d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b186f6a61b072a9952403a3ef8548b4"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op, typename InputScalarType , typename InputVectorType &gt; </td></tr>
<tr class="memitem:a3b186f6a61b072a9952403a3ef8548b4"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3b186f6a61b072a9952403a3ef8548b4">elementwise_comp_op_32</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a3b186f6a61b072a9952403a3ef8548b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae239dc51a686a455c70ff87fce9ea5aa"><td class="memItemLeft" align="right" valign="top">float32x4x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ae239dc51a686a455c70ff87fce9ea5aa">load_quantized</a> (const uint8_t *input1_ptr, const int32x4_t &amp;<a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, const float32x4_t &amp;scale)</td></tr>
<tr class="separator:ae239dc51a686a455c70ff87fce9ea5aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5bb53d2922eed568fcd9de9081faeeb7"><td class="memItemLeft" align="right" valign="top">float32x4x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a5bb53d2922eed568fcd9de9081faeeb7">load_quantized_signed</a> (const int8_t *input1_ptr, const int32x4_t &amp;<a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, const float32x4_t &amp;scale)</td></tr>
<tr class="separator:a5bb53d2922eed568fcd9de9081faeeb7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a981cf35141a952f493df0398da0b3d99"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a981cf35141a952f493df0398da0b3d99">store_quantized</a> (uint8_t *output_ptr, const uint32x4x4_t &amp;out)</td></tr>
<tr class="separator:a981cf35141a952f493df0398da0b3d99"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0460ff15e5977217b8fae5cf6abed0b1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a0460ff15e5977217b8fae5cf6abed0b1">store_quantized</a> (uint8_t *output_ptr, const int32x4x4_t &amp;out)</td></tr>
<tr class="separator:a0460ff15e5977217b8fae5cf6abed0b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a83e9db0e07a3f67c702e65cc54fa9119"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a83e9db0e07a3f67c702e65cc54fa9119">store_quantized</a> (uint8_t *output_ptr, const float32x4x4_t &amp;rf, const float32x4_t &amp;<a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, const float32x4_t &amp;invscale)</td></tr>
<tr class="separator:a83e9db0e07a3f67c702e65cc54fa9119"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac9f2850a80f033f33e04660ac3bbd08"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aac9f2850a80f033f33e04660ac3bbd08">store_quantized_signed</a> (int8_t *output_ptr, const int32x4x4_t &amp;out)</td></tr>
<tr class="separator:aac9f2850a80f033f33e04660ac3bbd08"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af77016f5946f5a276e68576bb1b68877"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#af77016f5946f5a276e68576bb1b68877">store_quantized_signed</a> (int8_t *output_ptr, const float32x4x4_t &amp;rf, const float32x4_t &amp;<a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, const float32x4_t &amp;invscale)</td></tr>
<tr class="separator:af77016f5946f5a276e68576bb1b68877"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06083700f047b600de212931e66daab7"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op&gt; </td></tr>
<tr class="memitem:a06083700f047b600de212931e66daab7"><td class="memTemplItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a06083700f047b600de212931e66daab7">elementwise_arithm_op_quantized_scalar</a> (const float &amp;a, const float &amp;b, UniformQuantizationInfo qinfo)</td></tr>
<tr class="separator:a06083700f047b600de212931e66daab7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d0c8d90c3c46f6f1eb5f80e1a82254c"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op&gt; </td></tr>
<tr class="memitem:a1d0c8d90c3c46f6f1eb5f80e1a82254c"><td class="memTemplItemLeft" align="right" valign="top">int8_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a1d0c8d90c3c46f6f1eb5f80e1a82254c">elementwise_arithm_op_quantized_signed_scalar</a> (const float &amp;a, const float &amp;b, UniformQuantizationInfo qinfo)</td></tr>
<tr class="separator:a1d0c8d90c3c46f6f1eb5f80e1a82254c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a53285ac0836360e8a03088185fd669bc"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op&gt; </td></tr>
<tr class="memitem:a53285ac0836360e8a03088185fd669bc"><td class="memTemplItemLeft" align="right" valign="top">float32x4x4_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a53285ac0836360e8a03088185fd669bc">elementwise_arithm_op</a> (const float32x4x4_t &amp;a, const float32x4x4_t &amp;b)</td></tr>
<tr class="separator:a53285ac0836360e8a03088185fd669bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac216018d489f5f9ea7d1907f593a039e"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op&gt; </td></tr>
<tr class="memitem:ac216018d489f5f9ea7d1907f593a039e"><td class="memTemplItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ac216018d489f5f9ea7d1907f593a039e">elementwise_comp_op_quantized_scalar</a> (const float &amp;a, const float &amp;b, UniformQuantizationInfo qinfo)</td></tr>
<tr class="separator:ac216018d489f5f9ea7d1907f593a039e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afaa460d8a451197db97d0af703bf8316"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op&gt; </td></tr>
<tr class="memitem:afaa460d8a451197db97d0af703bf8316"><td class="memTemplItemLeft" align="right" valign="top">uint32x4x4_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#afaa460d8a451197db97d0af703bf8316">elementwise_comp_op</a> (const float32x4x4_t &amp;a, const float32x4x4_t &amp;b)</td></tr>
<tr class="separator:afaa460d8a451197db97d0af703bf8316"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a918ccd824090fc763e31459310bdea53"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op&gt; </td></tr>
<tr class="memitem:a918ccd824090fc763e31459310bdea53"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a918ccd824090fc763e31459310bdea53">elementwise_arithm_op_quantized_loop</a> (int window_start_x, int window_end_x, int window_step_x, const uint8_t *input1_ptr, const uint8_t *input2_ptr, uint8_t *output_ptr, int32x4_t voffset1, int32x4_t voffset2, float32x4_t vscale1, float32x4_t vscale2, float32x4_t voffseto, float32x4_t invvscaleo)</td></tr>
<tr class="separator:a918ccd824090fc763e31459310bdea53"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a136ae2cf27f2d1d2aac2da4c33d24c1c"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op&gt; </td></tr>
<tr class="memitem:a136ae2cf27f2d1d2aac2da4c33d24c1c"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a136ae2cf27f2d1d2aac2da4c33d24c1c">elementwise_arithm_op_quantized_singed_loop</a> (int window_start_x, int window_end_x, int window_step_x, const int8_t *input1_ptr, const int8_t *input2_ptr, int8_t *output_ptr, int32x4_t voffset1, int32x4_t voffset2, float32x4_t vscale1, float32x4_t vscale2, float32x4_t voffseto, float32x4_t invvscaleo)</td></tr>
<tr class="separator:a136ae2cf27f2d1d2aac2da4c33d24c1c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab1893a2a9fc472d75b5fe897e63c5a41"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op&gt; </td></tr>
<tr class="memitem:ab1893a2a9fc472d75b5fe897e63c5a41"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ab1893a2a9fc472d75b5fe897e63c5a41">elementwise_arithm_op_quantized_broadcast_loop</a> (int window_start_x, int window_end_x, int window_step_x, const uint8_t *non_broadcast_input_ptr, float32x4x4_t broadcast_vector, uint8_t *output_ptr, int32x4_t voffset_non_broadcast, float32x4_t vscale_non_broadcast, float32x4_t voffseto, float32x4_t invvscaleo, bool reorder)</td></tr>
<tr class="separator:ab1893a2a9fc472d75b5fe897e63c5a41"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a77a76d4cabb3dcbb44ecb12034a28e46"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op&gt; </td></tr>
<tr class="memitem:a77a76d4cabb3dcbb44ecb12034a28e46"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a77a76d4cabb3dcbb44ecb12034a28e46">elementwise_arithm_op_quantized_signed_broadcast_loop</a> (int window_start_x, int window_end_x, int window_step_x, const int8_t *non_broadcast_input_ptr, float32x4x4_t broadcast_vector, int8_t *output_ptr, int32x4_t voffset_non_broadcast, float32x4_t vscale_non_broadcast, float32x4_t voffseto, float32x4_t invvscaleo, bool reorder)</td></tr>
<tr class="separator:a77a76d4cabb3dcbb44ecb12034a28e46"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c8d923ab1f2263472ff1815a0655701"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op&gt; </td></tr>
<tr class="memitem:a4c8d923ab1f2263472ff1815a0655701"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a4c8d923ab1f2263472ff1815a0655701">elementwise_comp_op_quantized_loop</a> (int window_start_x, int window_end_x, int window_step_x, const uint8_t *input1_ptr, const uint8_t *input2_ptr, uint8_t *output_ptr, int32x4_t voffset1, int32x4_t voffset2, float32x4_t vscale1, float32x4_t vscale2, float32x4_t voffseto, float32x4_t invvscaleo)</td></tr>
<tr class="separator:a4c8d923ab1f2263472ff1815a0655701"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c7874a7ad657bd64f21bc52840ce4ee"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op&gt; </td></tr>
<tr class="memitem:a4c7874a7ad657bd64f21bc52840ce4ee"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a4c7874a7ad657bd64f21bc52840ce4ee">elementwise_comp_op_quantized_signed_loop</a> (int window_start_x, int window_end_x, int window_step_x, const int8_t *input1_ptr, const int8_t *input2_ptr, uint8_t *output_ptr, int32x4_t voffset1, int32x4_t voffset2, float32x4_t vscale1, float32x4_t vscale2, float32x4_t voffseto, float32x4_t invvscaleo)</td></tr>
<tr class="separator:a4c7874a7ad657bd64f21bc52840ce4ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26d9b05aae3ad0b55e92cde353d3bd15"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op&gt; </td></tr>
<tr class="memitem:a26d9b05aae3ad0b55e92cde353d3bd15"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a26d9b05aae3ad0b55e92cde353d3bd15">elementwise_comp_op_quantized_broadcast_loop</a> (int window_start_x, int window_end_x, int window_step_x, const uint8_t *non_broadcast_input_ptr, float32x4x4_t broadcast_vector, uint8_t *output_ptr, int32x4_t voffset_non_broadcast, float32x4_t vscale_non_broadcast, float32x4_t voffseto, float32x4_t invvscaleo, bool reorder)</td></tr>
<tr class="separator:a26d9b05aae3ad0b55e92cde353d3bd15"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30b6a7350fda90e0f6d8dc86df9d586f"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op&gt; </td></tr>
<tr class="memitem:a30b6a7350fda90e0f6d8dc86df9d586f"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a30b6a7350fda90e0f6d8dc86df9d586f">elementwise_comp_op_quantized_signed_broadcast_loop</a> (int window_start_x, int window_end_x, int window_step_x, const int8_t *non_broadcast_input_ptr, float32x4x4_t broadcast_vector, uint8_t *output_ptr, int32x4_t voffset_non_broadcast, float32x4_t vscale_non_broadcast, float32x4_t voffseto, float32x4_t invvscaleo, bool reorder)</td></tr>
<tr class="separator:a30b6a7350fda90e0f6d8dc86df9d586f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae3f4470575b8ef973d136101ea80b68"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aae3f4470575b8ef973d136101ea80b68">elementwise_op_quantized</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window, uint8_t(*scalar_func)(const float &amp;, const float &amp;, UniformQuantizationInfo), int(*broadcast_func)(int, int, int, const uint8_t *, float32x4x4_t, uint8_t *, int32x4_t, float32x4_t, float32x4_t, float32x4_t, const bool), int(*neon_func)(int, int, int, const uint8_t *, const uint8_t *, uint8_t *, int32x4_t, int32x4_t, float32x4_t, float32x4_t, float32x4_t, float32x4_t))</td></tr>
<tr class="separator:aae3f4470575b8ef973d136101ea80b68"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d498841f133c2ce4c31076a6f700a4f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8d498841f133c2ce4c31076a6f700a4f">elementwise_comp_quantized_signed</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window, uint8_t(*scalar_func)(const float &amp;, const float &amp;, UniformQuantizationInfo), int(*broadcast_func)(int, int, int, const int8_t *, float32x4x4_t, uint8_t *, int32x4_t, float32x4_t, float32x4_t, float32x4_t, const bool), int(*neon_func)(int, int, int, const int8_t *, const int8_t *, uint8_t *, int32x4_t, int32x4_t, float32x4_t, float32x4_t, float32x4_t, float32x4_t))</td></tr>
<tr class="separator:a8d498841f133c2ce4c31076a6f700a4f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1806b9850ee209fa95836d94e33e176f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a1806b9850ee209fa95836d94e33e176f">elementwise_op_quantized_signed</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window, int8_t(*scalar_func)(const float &amp;, const float &amp;, UniformQuantizationInfo), int(*broadcast_func)(int, int, int, const int8_t *, float32x4x4_t, int8_t *, int32x4_t, float32x4_t, float32x4_t, float32x4_t, const bool), int(*neon_func)(int, int, int, const int8_t *, const int8_t *, int8_t *, int32x4_t, int32x4_t, float32x4_t, float32x4_t, float32x4_t, float32x4_t))</td></tr>
<tr class="separator:a1806b9850ee209fa95836d94e33e176f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9627c97b4adec6501e3b1f23ec750fbc"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op&gt; </td></tr>
<tr class="memitem:a9627c97b4adec6501e3b1f23ec750fbc"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a9627c97b4adec6501e3b1f23ec750fbc">elementwise_arithm_op_quantized</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a9627c97b4adec6501e3b1f23ec750fbc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9953a8057dee990456f905a5099c9730"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op&gt; </td></tr>
<tr class="memitem:a9953a8057dee990456f905a5099c9730"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a9953a8057dee990456f905a5099c9730">elementwise_arithm_op_quantized_signed</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a9953a8057dee990456f905a5099c9730"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0cc9dbc4c9cc16127d546998da1bd4c7"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op&gt; </td></tr>
<tr class="memitem:a0cc9dbc4c9cc16127d546998da1bd4c7"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a0cc9dbc4c9cc16127d546998da1bd4c7">elementwise_comp_op_quantized</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a0cc9dbc4c9cc16127d546998da1bd4c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aada344073480d0eb85f751181cef6d8e"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op&gt; </td></tr>
<tr class="memitem:aada344073480d0eb85f751181cef6d8e"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aada344073480d0eb85f751181cef6d8e">elementwise_comp_op_quantized_signed</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:aada344073480d0eb85f751181cef6d8e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_2c61f424fd391396db977702a2beee9a.xhtml">cpu</a></li><li class="navelem"><a class="el" href="dir_1de7bcbbdec2bf3559cb3c688662d4f5.xhtml">kernels</a></li><li class="navelem"><a class="el" href="dir_66520ab4814343cef4d99a57e61c0978.xhtml">elementwise_binary</a></li><li class="navelem"><a class="el" href="dir_8009c81bd03a5456d0f628033db7357f.xhtml">generic</a></li><li class="navelem"><a class="el" href="dir_6a94b41c7969531305f6d4628e056858.xhtml">neon</a></li><li class="navelem"><a class="el" href="elementwise__binary_2generic_2neon_2impl_8h.xhtml">impl.h</a></li>
    <li class="footer">Generated on Tue Nov 21 2023 16:31:11 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
