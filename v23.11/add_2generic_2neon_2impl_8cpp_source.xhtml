<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/cpu/kernels/add/generic/neon/impl.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('add_2generic_2neon_2impl_8cpp_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">impl.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="add_2generic_2neon_2impl_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2020-2023 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160; </div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="add_2generic_2neon_2impl_8h.xhtml">src/cpu/kernels/add/generic/neon/impl.h</a>&quot;</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160; </div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_helpers_8h.xhtml">arm_compute/core/Helpers.h</a>&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2utils_2misc_2_traits_8h.xhtml">arm_compute/core/utils/misc/Traits.h</a>&quot;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160; </div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="wrapper_8h.xhtml">src/core/NEON/wrapper/wrapper.h</a>&quot;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;{</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">namespace </span>cpu</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div>
<div class="line"><a name="l00035"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#adcf3f09a8f78441a9d5899398238e4e6">   35</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#adcf3f09a8f78441a9d5899398238e4e6">sub_q8_neon_fixedpoint_possible</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *src0, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *src1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>)</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a6584a40cba8021fe443986524b98319b">add_sub_q8_neon_fixedpoint_possible</a>(src0, src1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, <span class="keyword">false</span>);</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;}</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160; </div>
<div class="line"><a name="l00040"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a5d12d4b685a01367a23a1e201300e06b">   40</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a5d12d4b685a01367a23a1e201300e06b">add_q8_neon_fixedpoint_possible</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *src0, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *src1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>)</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a6584a40cba8021fe443986524b98319b">add_sub_q8_neon_fixedpoint_possible</a>(src0, src1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, <span class="keyword">true</span>);</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;}</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160; </div>
<div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a6584a40cba8021fe443986524b98319b">   45</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a6584a40cba8021fe443986524b98319b">add_sub_q8_neon_fixedpoint_possible</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *src0,</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *src1,</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>,</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;                                         <span class="keywordtype">bool</span>               is_addition)</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;{</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> iq0 = src0-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">quantization_info</a>().<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>();</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> iq1 = src1-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">quantization_info</a>().<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>();</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> oq  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160; </div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> scale0 = iq0.scale / oq.scale;</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> scale1 = iq1.scale / oq.scale;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160; </div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keywordflow">if</span> (scale0 &lt; -15.f || scale0 &gt; 15.f || scale1 &lt; -15.f || scale1 &gt; 15.f)</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    {</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        <span class="comment">// The scale factor cannot be stored as 5.11 signed fixed-point number.</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    }</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160; </div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> = float(oq.offset) - scale0 * float(iq0.offset) - scale1 * float(iq1.offset);</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160; </div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> max_acc = is_addition ? ((std::abs(scale0) + std::abs(scale1)) * 256.f + std::abs(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>))</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                                     : ((std::abs(scale0) - std::abs(scale1)) * 256.f + std::abs(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>));</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160; </div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keywordflow">if</span> (max_acc &gt; 1048575.f) <span class="comment">// 2^20 - 1</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    {</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="comment">// It might not be possible to store the result as 21.11 signed fixed-point number.</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    }</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160; </div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;}</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160; </div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> ScalarType&gt;</div>
<div class="line"><a name="l00078"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a4c5290cc7856ef99db64d9a6b475dba2">   78</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a4c5290cc7856ef99db64d9a6b475dba2">add_q8_neon_fixedpoint</a>(</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;{</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    add_sub_q8_neon_fixedpoint&lt;ScalarType&gt;(src0, src1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, policy, window, <span class="keyword">true</span> <span class="comment">/*is_addition*/</span>);</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;}</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160; </div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> ScalarType&gt;</div>
<div class="line"><a name="l00085"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a400fdac6bb36c02b9bf3ab5936a3fbd1">   85</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a400fdac6bb36c02b9bf3ab5936a3fbd1">add_sub_q8_neon_fixedpoint</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>       *src0,</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                                <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>       *src1,</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                                <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>             *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>,</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                                <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy,</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                                <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a>        &amp;window,</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                                <span class="keywordtype">bool</span>                 is_addition)</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;{</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(policy);</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160; </div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> in0_info = src0-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>();</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> in1_info = src1-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>();</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160; </div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> &amp;in0_shape = in0_info-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>();</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> &amp;in1_shape = in1_info-&gt;tensor_shape();</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160; </div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="comment">// Create input windows.</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> in0_win = window.<a class="code" href="classarm__compute_1_1_window.xhtml#ae20ec28555d4473419cae37cf120f35d">broadcast_if_dimension_le_one</a>(in0_shape);</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> in1_win = window.<a class="code" href="classarm__compute_1_1_window.xhtml#ae20ec28555d4473419cae37cf120f35d">broadcast_if_dimension_le_one</a>(in1_shape);</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160; </div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="comment">// Clear the x dimension on the execution window as we process the whole row each iteration.</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> win = window;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    win.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 1, 1));</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160; </div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    constexpr <span class="keywordtype">int</span> window_step_x         = 16;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>    window_start_x        = window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>();</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>    window_end_x          = window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">end</a>();</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>    is_broadcast_across_x = in0_shape.x() != in1_shape.x();</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160; </div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> iq0_info  = in0_info-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> iq1_info  = in1_info-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> oq_info   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> in0_scale = iq0_info.scale / oq_info.scale;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> in1_scale = is_addition ? (iq1_info.scale / oq_info.scale) : (-(iq1_info.scale / oq_info.scale));</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> = float(oq_info.offset) - in0_scale * float(iq0_info.offset) - in1_scale * float(iq1_info.offset);</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160; </div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    constexpr <span class="keywordtype">float</span> _2pow11        = 2048;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      in0_scale_5p11 = <span class="keyword">static_cast&lt;</span>int16_t<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a452ce01d9794d6b04de3699ddbf4d2d0">support::cpp11::lround</a>(in0_scale * _2pow11));</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      in1_scale_5p11 = <span class="keyword">static_cast&lt;</span>int16_t<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a452ce01d9794d6b04de3699ddbf4d2d0">support::cpp11::lround</a>(in1_scale * _2pow11));</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      offset_21p11   = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a452ce01d9794d6b04de3699ddbf4d2d0">support::cpp11::lround</a>(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> * _2pow11));</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160; </div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    constexpr uint8_t shift_amount_remainder = 3;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160; </div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keywordflow">if</span> (is_broadcast_across_x)</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    {</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        <span class="comment">// Prefix: a = non-broadcast, b = broadcast.</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160; </div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> is_broadcast_input_1 = in1_win.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">step</a>() == 0;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <span class="keyword">auto</span>       a_win                = is_broadcast_input_1 ? in0_win : in1_win;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <span class="keyword">auto</span>       b_win                = is_broadcast_input_1 ? in1_win : in0_win;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> a_tensor             = is_broadcast_input_1 ? src0 : src1;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> b_tensor             = is_broadcast_input_1 ? src1 : src0;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160; </div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> a_scale_5p11  = is_broadcast_input_1 ? in0_scale_5p11 : in1_scale_5p11;</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> b_scale       = is_broadcast_input_1 ? in1_scale : in0_scale;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> a_vscale_5p11 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(a_scale_5p11, <a class="code" href="structarm__compute_1_1wrapper_1_1traits_1_1vector__64__tag.xhtml">wrapper::traits::vector_64_tag</a>());</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160; </div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="preprocessor">#ifndef __aarch64__</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> a_scale = is_broadcast_input_1 ? in0_scale : in1_scale;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="preprocessor">#endif // __aarch64__</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160; </div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        <span class="comment">// Clear the x dimension on the execution window as we process the whole row each iteration.</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        a_win.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 1, 1));</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160; </div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> a_input_it(a_tensor, a_win);</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> b_input_it(b_tensor, b_win);</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> out_it(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win);</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160; </div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            win,</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;)</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            {</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> a_ptr   = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(a_input_it.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>());</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> b_ptr   = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(b_input_it.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>());</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> out_ptr = <span class="keyword">reinterpret_cast&lt;</span>ScalarType *<span class="keyword">&gt;</span>(out_it.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>());</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160; </div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> b_val                   = *b_ptr;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> b_scaled                = b_scale * b_val;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> b_scaled_21p11          = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a452ce01d9794d6b04de3699ddbf4d2d0">support::cpp11::lround</a>(b_scaled * _2pow11));</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> b_scaled_offseted_21p11 = b_scaled_21p11 + offset_21p11;</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> b_vscaled_offseted_21p11 =</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                    <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(b_scaled_offseted_21p11, <a class="code" href="structarm__compute_1_1wrapper_1_1traits_1_1vector__128__tag.xhtml">wrapper::traits::vector_128_tag</a>());</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160; </div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="preprocessor">#ifndef __aarch64__</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> b_scaled_offseted = b_scaled + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="preprocessor">#endif // __aarch64__</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160; </div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160; </div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                {</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                    <span class="comment">// Load the input.</span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> a_vin_8p0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(a_ptr + x);</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160; </div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                    <span class="comment">// Widen the non-broadcast elements to signed 16-bit regardless of the input signedness.</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> a_vin_16p0_0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(a_vin_8p0)));</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> a_vin_16p0_1 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(a_vin_8p0)));</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160; </div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                    <span class="comment">// Multiply the non-broadcast elements by the scale factor, add the scaled broadcast elements and the offset.</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                    <span class="comment">// Widen and store the result in 32-bit integer.</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vout_21p11_00 =</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66d15db8e989b58b61603ce73d8696b5">wrapper::vmlal</a>(b_vscaled_offseted_21p11, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(a_vin_16p0_0), a_vscale_5p11);</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vout_21p11_01 =</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66d15db8e989b58b61603ce73d8696b5">wrapper::vmlal</a>(b_vscaled_offseted_21p11, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(a_vin_16p0_0), a_vscale_5p11);</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vout_21p11_10 =</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66d15db8e989b58b61603ce73d8696b5">wrapper::vmlal</a>(b_vscaled_offseted_21p11, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(a_vin_16p0_1), a_vscale_5p11);</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vout_21p11_11 =</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66d15db8e989b58b61603ce73d8696b5">wrapper::vmlal</a>(b_vscaled_offseted_21p11, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(a_vin_16p0_1), a_vscale_5p11);</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160; </div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                    <span class="comment">// Remove 3 bits of the fractional part, round, narrow to 16-bit and saturate the result.</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vout_8p8_0 =</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">wrapper::vcombine</a>(wrapper::vqrshrn_ex&lt;shift_amount_remainder, ScalarType&gt;(vout_21p11_00),</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                                          wrapper::vqrshrn_ex&lt;shift_amount_remainder, ScalarType&gt;(vout_21p11_01));</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vout_8p8_1 =</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">wrapper::vcombine</a>(wrapper::vqrshrn_ex&lt;shift_amount_remainder, ScalarType&gt;(vout_21p11_10),</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                                          wrapper::vqrshrn_ex&lt;shift_amount_remainder, ScalarType&gt;(vout_21p11_11));</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160; </div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                    <span class="comment">// Remove 8 bits of the fractional part, round, narrow to 8-bit and saturate the result.</span></div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vout_8p0 =</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">wrapper::vcombine</a>(wrapper::vqrshrn&lt;8&gt;(vout_8p8_0), wrapper::vqrshrn&lt;8&gt;(vout_8p8_1));</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160; </div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                    <span class="comment">// Store the result.</span></div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                    <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(out_ptr + x, vout_8p0);</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                }</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160; </div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                <span class="comment">// Process the left-over elements.</span></div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                {</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                    out_ptr[x] = wrapper::vqrshrn&lt;8&gt;(wrapper::vqrshrn_ex&lt;shift_amount_remainder, ScalarType&gt;(</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                        int32_t(a_ptr[x]) * a_scale_5p11 + b_scaled_offseted_21p11));</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="preprocessor">#else  // __aarch64__</span></div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                    out_ptr[x] = utility::clamp&lt;int, ScalarType&gt;(</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                        <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a452ce01d9794d6b04de3699ddbf4d2d0">support::cpp11::lround</a>(<span class="keywordtype">float</span>(a_ptr[x]) * a_scale + b_scaled_offseted));</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="preprocessor">#endif // __aarch64__</span></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                }</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            },</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;            b_input_it, a_input_it, out_it);</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    }</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    {</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> vscale0_5p11  = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(in0_scale_5p11, <a class="code" href="structarm__compute_1_1wrapper_1_1traits_1_1vector__64__tag.xhtml">wrapper::traits::vector_64_tag</a>());</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> vscale1_5p11  = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(in1_scale_5p11, <a class="code" href="structarm__compute_1_1wrapper_1_1traits_1_1vector__64__tag.xhtml">wrapper::traits::vector_64_tag</a>());</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> voffset_21p11 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(offset_21p11, <a class="code" href="structarm__compute_1_1wrapper_1_1traits_1_1vector__128__tag.xhtml">wrapper::traits::vector_128_tag</a>());</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160; </div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        <span class="comment">// Clear the x dimension on the execution window as we process the whole row each iteration.</span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        in0_win.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 1, 1));</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        in1_win.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 1, 1));</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160; </div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> in0_it(src0, in0_win);</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> in1_it(src1, in1_win);</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> out_it(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win);</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160; </div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;            win,</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;            [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;)</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;            {</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> in0_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(in0_it.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>());</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> in1_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(in1_it.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>());</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> out_ptr = <span class="keyword">reinterpret_cast&lt;</span>ScalarType *<span class="keyword">&gt;</span>(out_it.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>());</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160; </div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160; </div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                {</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                    <span class="comment">// Load the inputs.</span></div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vin0_8p0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(in0_ptr + x);</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vin1_8p0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(in1_ptr + x);</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160; </div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                    <span class="comment">// Widen the input elements to signed 16-bit regardless of the input signedness.</span></div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vin0_16p0_0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(vin0_8p0)));</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vin0_16p0_1 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(vin0_8p0)));</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vin1_16p0_0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(vin1_8p0)));</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vin1_16p0_1 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(vin1_8p0)));</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160; </div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                    <span class="comment">// Multiply the input elements by the scale factor and add the offset.</span></div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                    <span class="comment">// Widen and store the result in 32-bit integer.</span></div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vscaled0_offseted_21p11_00 =</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66d15db8e989b58b61603ce73d8696b5">wrapper::vmlal</a>(voffset_21p11, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(vin0_16p0_0), vscale0_5p11);</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vscaled0_offseted_21p11_01 =</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66d15db8e989b58b61603ce73d8696b5">wrapper::vmlal</a>(voffset_21p11, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(vin0_16p0_0), vscale0_5p11);</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vscaled0_offseted_21p11_10 =</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66d15db8e989b58b61603ce73d8696b5">wrapper::vmlal</a>(voffset_21p11, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(vin0_16p0_1), vscale0_5p11);</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vscaled0_offseted_21p11_11 =</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66d15db8e989b58b61603ce73d8696b5">wrapper::vmlal</a>(voffset_21p11, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(vin0_16p0_1), vscale0_5p11);</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160; </div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vout_21p11_00 =</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66d15db8e989b58b61603ce73d8696b5">wrapper::vmlal</a>(vscaled0_offseted_21p11_00, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(vin1_16p0_0), vscale1_5p11);</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vout_21p11_01 =</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66d15db8e989b58b61603ce73d8696b5">wrapper::vmlal</a>(vscaled0_offseted_21p11_01, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(vin1_16p0_0), vscale1_5p11);</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vout_21p11_10 =</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66d15db8e989b58b61603ce73d8696b5">wrapper::vmlal</a>(vscaled0_offseted_21p11_10, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(vin1_16p0_1), vscale1_5p11);</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vout_21p11_11 =</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66d15db8e989b58b61603ce73d8696b5">wrapper::vmlal</a>(vscaled0_offseted_21p11_11, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(vin1_16p0_1), vscale1_5p11);</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160; </div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                    <span class="comment">// Remove 3 bits of the fractional part, round, narrow to 16-bit and saturate the result.</span></div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vout_8p8_0 =</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">wrapper::vcombine</a>(wrapper::vqrshrn_ex&lt;shift_amount_remainder, ScalarType&gt;(vout_21p11_00),</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                                          wrapper::vqrshrn_ex&lt;shift_amount_remainder, ScalarType&gt;(vout_21p11_01));</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vout_8p8_1 =</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">wrapper::vcombine</a>(wrapper::vqrshrn_ex&lt;shift_amount_remainder, ScalarType&gt;(vout_21p11_10),</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                                          wrapper::vqrshrn_ex&lt;shift_amount_remainder, ScalarType&gt;(vout_21p11_11));</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160; </div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                    <span class="comment">// Remove 8 bits of the fractional part, round, narrow to 8-bit and saturate the result.</span></div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vout_8p0 =</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">wrapper::vcombine</a>(wrapper::vqrshrn&lt;8&gt;(vout_8p8_0), wrapper::vqrshrn&lt;8&gt;(vout_8p8_1));</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160; </div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                    <span class="comment">// Store the result.</span></div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                    <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(out_ptr + x, vout_8p0);</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                }</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160; </div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                <span class="comment">// Process the left-over elements.</span></div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                {</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                    out_ptr[x] = wrapper::vqrshrn&lt;8&gt;(wrapper::vqrshrn_ex&lt;shift_amount_remainder, ScalarType&gt;(</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                        int32_t(in0_ptr[x]) * in0_scale_5p11 + int32_t(in1_ptr[x]) * in1_scale_5p11 + offset_21p11));</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;<span class="preprocessor">#else  // __aarch64__</span></div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                    out_ptr[x] = utility::clamp&lt;int, ScalarType&gt;(</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                        <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a452ce01d9794d6b04de3699ddbf4d2d0">support::cpp11::lround</a>(<span class="keywordtype">float</span>(in0_ptr[x]) * in0_scale + <span class="keywordtype">float</span>(in1_ptr[x]) * in1_scale + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>));</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;<span class="preprocessor">#endif // __aarch64__</span></div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                }</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;            },</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;            in0_it, in1_it, out_it);</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    }</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;}</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160; </div>
<div class="line"><a name="l00311"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a990ee09727a5f2205afa13a59576e98d">  311</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a990ee09727a5f2205afa13a59576e98d">add_sub_qasymm8_neon</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>       *src0,</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                          <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>       *src1,</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                          <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>             *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>,</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                          <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy,</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                          <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a>        &amp;window,</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                          <span class="keywordtype">bool</span>                 is_addition)</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;{</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(policy);</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160; </div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    <span class="comment">// Create input windows</span></div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> input1_win = window.<a class="code" href="classarm__compute_1_1_window.xhtml#ae20ec28555d4473419cae37cf120f35d">broadcast_if_dimension_le_one</a>(src0-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>());</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> input2_win = window.<a class="code" href="classarm__compute_1_1_window.xhtml#ae20ec28555d4473419cae37cf120f35d">broadcast_if_dimension_le_one</a>(src1-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>());</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160; </div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> win = window;</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    win.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 1, 1));</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160; </div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    constexpr <span class="keywordtype">int</span> window_step_x         = 16;</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>    window_start_x        = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>());</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>    window_end_x          = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">end</a>());</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span>    is_broadcast_across_x = src0-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">x</a>() != src1-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">x</a>();</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160; </div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> iq1_info = src0-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">quantization_info</a>().<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>();</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> iq2_info = src1-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">quantization_info</a>().<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>();</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> oq_info  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160; </div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> scale1 = iq1_info.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a> / oq_info.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a>;</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> scale2 = is_addition ? (iq2_info.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a> / oq_info.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a>) : (-(iq2_info.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a> / oq_info.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a>));</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> = float(oq_info.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">offset</a>) - scale1 * float(iq1_info.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">offset</a>) - scale2 * float(iq2_info.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">offset</a>);</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160; </div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="keywordflow">if</span> (is_broadcast_across_x)</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    {</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span>     is_broadcast_input_2 = input2_win.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">step</a>() == 0;</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a>         broadcast_win        = is_broadcast_input_2 ? input2_win : input1_win;</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a>         non_broadcast_win    = !is_broadcast_input_2 ? input2_win : input1_win;</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *broadcast_tensor     = is_broadcast_input_2 ? src1 : src0;</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *non_broadcast_tensor = !is_broadcast_input_2 ? src1 : src0;</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160; </div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> af_scale = is_broadcast_input_2 ? scale1 : scale2;</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> bf_scale = is_broadcast_input_2 ? scale2 : scale1;</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> vscale1  = vdupq_n_f32(af_scale);</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160; </div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;        non_broadcast_win.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 1, 1));</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160; </div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> broadcast_input(broadcast_tensor, broadcast_win);</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> non_broadcast_input(non_broadcast_tensor, non_broadcast_win);</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win);</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160; </div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;            win,</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;            [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;)</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;            {</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_input_ptr = non_broadcast_input.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>();</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr              = output.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>();</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160; </div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> broadcast_value = *broadcast_input.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>();</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> bf              = vdupq_n_f32(<span class="keywordtype">float</span>(broadcast_value) * scale2 + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>);</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>             = float(broadcast_value) * bf_scale + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>;</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160; </div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                <span class="comment">// Compute S elements per iteration</span></div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                {</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;                    <span class="keyword">const</span> uint8x16_t a = vld1q_u8(non_broadcast_input_ptr + x);</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160; </div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> a_u16_0 = vmovl_u8(vget_low_u8(a));</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> a_u16_1 = vmovl_u8(vget_high_u8(a));</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160; </div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_0 = vmlaq_f32(bf, vcvtq_f32_u32(vmovl_u16(vget_low_u16(a_u16_0))), vscale1);</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_1 = vmlaq_f32(bf, vcvtq_f32_u32(vmovl_u16(vget_high_u16(a_u16_0))), vscale1);</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_2 = vmlaq_f32(bf, vcvtq_f32_u32(vmovl_u16(vget_low_u16(a_u16_1))), vscale1);</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_3 = vmlaq_f32(bf, vcvtq_f32_u32(vmovl_u16(vget_high_u16(a_u16_1))), vscale1);</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160; </div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;                    int32x4_t rf_0{};</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;                    int32x4_t rf_1{};</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                    int32x4_t rf_2{};</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                    int32x4_t rf_3{};</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160; </div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                    rf_0 = vcvtnq_s32_f32(af_0);</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                    rf_1 = vcvtnq_s32_f32(af_1);</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                    rf_2 = vcvtnq_s32_f32(af_2);</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                    rf_3 = vcvtnq_s32_f32(af_3);</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;<span class="preprocessor">#else  //__aarch64__</span></div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;                    rf_0          = vcvtq_s32_f32(af_0);</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                    rf_1          = vcvtq_s32_f32(af_1);</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                    rf_2          = vcvtq_s32_f32(af_2);</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                    rf_3          = vcvtq_s32_f32(af_3);</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;<span class="preprocessor">#endif //__aarch64__</span></div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160; </div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;                    <span class="keyword">const</span> uint8x8_t pa = vqmovun_s16(vcombine_s16(vqmovn_s32(rf_0), vqmovn_s32(rf_1)));</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                    <span class="keyword">const</span> uint8x8_t pb = vqmovun_s16(vcombine_s16(vqmovn_s32(rf_2), vqmovn_s32(rf_3)));</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;                    vst1q_u8(output_ptr + x, vcombine_u8(pa, pb));</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;                }</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160; </div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                <span class="comment">// Compute left-over elements</span></div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;                <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;                {</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> result = float(non_broadcast_input_ptr[x]) * af_scale + <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>;</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;                    output_ptr[x] = utility::clamp&lt;int, uint8_t&gt;(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a452ce01d9794d6b04de3699ddbf4d2d0">support::cpp11::lround</a>(result));</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;<span class="preprocessor">#else  // __aarch64__</span></div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;                    output_ptr[x] = utility::clamp&lt;int, uint8_t&gt;(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ae04d407202e3d50ce6a4c79ac00a5d59">support::cpp11::trunc</a>(result));</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;<span class="preprocessor">#endif // __aarch64__</span></div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;                }</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;            },</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;            broadcast_input, non_broadcast_input, output);</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    }</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    {</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;        input1_win.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 1, 1));</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;        input2_win.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 1, 1));</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160; </div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> input1(src0, input1_win);</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> input2(src1, input2_win);</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win);</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160; </div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> vscale1 = vdupq_n_f32(scale1);</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> vscale2 = vdupq_n_f32(scale2);</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> voffset = vdupq_n_f32(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>);</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160; </div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;            win,</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;            [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;)</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;            {</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input1_ptr = input1.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>();</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input2_ptr = input2.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>();</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = output.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>();</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160; </div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;                <span class="comment">// Compute S elements per iteration</span></div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;                <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;                <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;                {</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;                    <span class="keyword">const</span> uint8x16_t a = vld1q_u8(input1_ptr + x);</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;                    <span class="keyword">const</span> uint8x16_t <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> = vld1q_u8(input2_ptr + x);</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160; </div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> a_u16_0 = vmovl_u8(vget_low_u8(a));</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> a_u16_1 = vmovl_u8(vget_high_u8(a));</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> b_u16_0 = vmovl_u8(vget_low_u8(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>));</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> b_u16_1 = vmovl_u8(vget_high_u8(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>));</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160; </div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_0 = vmlaq_f32(voffset, vcvtq_f32_u32(vmovl_u16(vget_low_u16(a_u16_0))), vscale1);</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_1 = vmlaq_f32(voffset, vcvtq_f32_u32(vmovl_u16(vget_high_u16(a_u16_0))), vscale1);</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_2 = vmlaq_f32(voffset, vcvtq_f32_u32(vmovl_u16(vget_low_u16(a_u16_1))), vscale1);</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_3 = vmlaq_f32(voffset, vcvtq_f32_u32(vmovl_u16(vget_high_u16(a_u16_1))), vscale1);</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160; </div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> bf_0 = vmlaq_f32(af_0, vcvtq_f32_u32(vmovl_u16(vget_low_u16(b_u16_0))), vscale2);</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> bf_1 = vmlaq_f32(af_1, vcvtq_f32_u32(vmovl_u16(vget_high_u16(b_u16_0))), vscale2);</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> bf_2 = vmlaq_f32(af_2, vcvtq_f32_u32(vmovl_u16(vget_low_u16(b_u16_1))), vscale2);</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> bf_3 = vmlaq_f32(af_3, vcvtq_f32_u32(vmovl_u16(vget_high_u16(b_u16_1))), vscale2);</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160; </div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;                    int32x4_t rf_0{};</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;                    int32x4_t rf_1{};</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;                    int32x4_t rf_2{};</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;                    int32x4_t rf_3{};</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160; </div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;                    rf_0 = vcvtnq_s32_f32(bf_0);</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;                    rf_1 = vcvtnq_s32_f32(bf_1);</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;                    rf_2 = vcvtnq_s32_f32(bf_2);</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;                    rf_3 = vcvtnq_s32_f32(bf_3);</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;<span class="preprocessor">#else  //__aarch64__</span></div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;                    rf_0          = vcvtq_s32_f32(bf_0);</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;                    rf_1          = vcvtq_s32_f32(bf_1);</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;                    rf_2          = vcvtq_s32_f32(bf_2);</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;                    rf_3          = vcvtq_s32_f32(bf_3);</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;<span class="preprocessor">#endif //__aarch64__</span></div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160; </div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;                    <span class="keyword">const</span> uint8x8_t pa = vqmovun_s16(vcombine_s16(vqmovn_s32(rf_0), vqmovn_s32(rf_1)));</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;                    <span class="keyword">const</span> uint8x8_t pb = vqmovun_s16(vcombine_s16(vqmovn_s32(rf_2), vqmovn_s32(rf_3)));</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;                    vst1q_u8(output_ptr + x, vcombine_u8(pa, pb));</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;                }</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160; </div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;                <span class="comment">// Compute left-over elements</span></div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;                <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;                {</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> result = float(input1_ptr[x]) * scale1 + float(input2_ptr[x]) * scale2 + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>;</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;                    output_ptr[x] = utility::clamp&lt;int, uint8_t&gt;(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a452ce01d9794d6b04de3699ddbf4d2d0">support::cpp11::lround</a>(result));</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;<span class="preprocessor">#else  // __aarch64__</span></div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;                    output_ptr[x] = utility::clamp&lt;int, uint8_t&gt;(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ae04d407202e3d50ce6a4c79ac00a5d59">support::cpp11::trunc</a>(result));</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;<span class="preprocessor">#endif // __aarch64__</span></div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;                }</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;            },</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;            input1, input2, output);</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    }</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;}</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160; </div>
<div class="line"><a name="l00501"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a4555abacb6f1b8d4510a0c38b2675778">  501</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a4555abacb6f1b8d4510a0c38b2675778">add_sub_qasymm8_signed_neon</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>       *src0,</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;                                 <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>       *src1,</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;                                 <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>             *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>,</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;                                 <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy,</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;                                 <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a>        &amp;window,</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;                                 <span class="keywordtype">bool</span>                 is_addition)</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;{</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(policy);</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160; </div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    <span class="comment">// Create input windows</span></div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> input1_win = window.<a class="code" href="classarm__compute_1_1_window.xhtml#ae20ec28555d4473419cae37cf120f35d">broadcast_if_dimension_le_one</a>(src0-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>());</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> input2_win = window.<a class="code" href="classarm__compute_1_1_window.xhtml#ae20ec28555d4473419cae37cf120f35d">broadcast_if_dimension_le_one</a>(src1-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>());</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160; </div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> win = window;</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;    win.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 1, 1));</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160; </div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    constexpr <span class="keywordtype">int</span> window_step_x         = 16;</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>    window_start_x        = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>());</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>    window_end_x          = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">end</a>());</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span>    is_broadcast_across_x = src0-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">x</a>() != src1-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">x</a>();</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160; </div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> iq1_info = src0-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">quantization_info</a>().<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>();</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> iq2_info = src1-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">quantization_info</a>().<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>();</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> oq_info  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160; </div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> scale1 = iq1_info.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a> / oq_info.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a>;</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> scale2 = is_addition ? (iq2_info.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a> / oq_info.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a>) : (-(iq2_info.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a> / oq_info.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a>));</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> = float(oq_info.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">offset</a>) - scale1 * float(iq1_info.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">offset</a>) - scale2 * float(iq2_info.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">offset</a>);</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160; </div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;    <span class="keywordflow">if</span> (is_broadcast_across_x)</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;    {</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span>     is_broadcast_input_2 = input2_win.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">step</a>() == 0;</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;        <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a>         broadcast_win        = is_broadcast_input_2 ? input2_win : input1_win;</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;        <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a>         non_broadcast_win    = !is_broadcast_input_2 ? input2_win : input1_win;</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *broadcast_tensor     = is_broadcast_input_2 ? src1 : src0;</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *non_broadcast_tensor = !is_broadcast_input_2 ? src1 : src0;</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160; </div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> af_scale = is_broadcast_input_2 ? scale1 : scale2;</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> bf_scale = is_broadcast_input_2 ? scale2 : scale1;</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> vscale1  = vdupq_n_f32(af_scale);</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160; </div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;        non_broadcast_win.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 1, 1));</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160; </div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> broadcast_input(broadcast_tensor, broadcast_win);</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> non_broadcast_input(non_broadcast_tensor, non_broadcast_win);</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win);</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160; </div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;            win,</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;            [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;)</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;            {</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_input_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(non_broadcast_input.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>());</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr              = <span class="keyword">reinterpret_cast&lt;</span>int8_t *<span class="keyword">&gt;</span>(output.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>());</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160; </div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> broadcast_value = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(broadcast_input.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>());</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> bf              = vdupq_n_f32(<span class="keywordtype">float</span>(broadcast_value) * scale2 + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>);</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>             = float(broadcast_value) * bf_scale + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>;</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160; </div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;                <span class="comment">// Compute S elements per iteration</span></div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;                <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;                <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;                {</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;                    <span class="keyword">const</span> int8x16_t a = vld1q_s8(non_broadcast_input_ptr + x);</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160; </div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> a_s16_0 = vmovl_s8(vget_low_s8(a));</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> a_s16_1 = vmovl_s8(vget_high_s8(a));</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160; </div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_0 = vmlaq_f32(bf, vcvtq_f32_s32(vmovl_s16(vget_low_s16(a_s16_0))), vscale1);</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_1 = vmlaq_f32(bf, vcvtq_f32_s32(vmovl_s16(vget_high_s16(a_s16_0))), vscale1);</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_2 = vmlaq_f32(bf, vcvtq_f32_s32(vmovl_s16(vget_low_s16(a_s16_1))), vscale1);</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_3 = vmlaq_f32(bf, vcvtq_f32_s32(vmovl_s16(vget_high_s16(a_s16_1))), vscale1);</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160; </div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;                    int32x4_t rf_0{};</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;                    int32x4_t rf_1{};</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;                    int32x4_t rf_2{};</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;                    int32x4_t rf_3{};</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160; </div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;                    rf_0 = vcvtnq_s32_f32(af_0);</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;                    rf_1 = vcvtnq_s32_f32(af_1);</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;                    rf_2 = vcvtnq_s32_f32(af_2);</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;                    rf_3 = vcvtnq_s32_f32(af_3);</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;<span class="preprocessor">#else  //__aarch64__</span></div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;                    rf_0          = vcvtq_s32_f32(af_0);</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;                    rf_1          = vcvtq_s32_f32(af_1);</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;                    rf_2          = vcvtq_s32_f32(af_2);</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;                    rf_3          = vcvtq_s32_f32(af_3);</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;<span class="preprocessor">#endif //__aarch64__</span></div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160; </div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;                    <span class="keyword">const</span> int8x8_t pa = vqmovn_s16(vcombine_s16(vqmovn_s32(rf_0), vqmovn_s32(rf_1)));</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;                    <span class="keyword">const</span> int8x8_t pb = vqmovn_s16(vcombine_s16(vqmovn_s32(rf_2), vqmovn_s32(rf_3)));</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;                    vst1q_s8(output_ptr + x, vcombine_s8(pa, pb));</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;                }</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160; </div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;                <span class="comment">// Compute left-over elements</span></div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;                <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;                {</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> result = float(non_broadcast_input_ptr[x]) * af_scale + <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>;</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;                    output_ptr[x] = utility::clamp&lt;int, int8_t&gt;(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a452ce01d9794d6b04de3699ddbf4d2d0">support::cpp11::lround</a>(result));</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;<span class="preprocessor">#else  // __aarch64__</span></div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;                    output_ptr[x] = utility::clamp&lt;int, int8_t&gt;(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ae04d407202e3d50ce6a4c79ac00a5d59">support::cpp11::trunc</a>(result));</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;<span class="preprocessor">#endif // __aarch64__</span></div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;                }</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;            },</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;            broadcast_input, non_broadcast_input, output);</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;    }</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;    {</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;        input1_win.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 1, 1));</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;        input2_win.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 1, 1));</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160; </div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> input1(src0, input1_win);</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> input2(src1, input2_win);</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win);</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160; </div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> vscale1 = vdupq_n_f32(scale1);</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> vscale2 = vdupq_n_f32(scale2);</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> voffset = vdupq_n_f32(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>);</div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160; </div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;            win,</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;            [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;)</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;            {</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input1_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(input1.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>());</div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input2_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(input2.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>());</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span>int8_t *<span class="keyword">&gt;</span>(output.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>());</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160; </div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;                <span class="comment">// Compute S elements per iteration</span></div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;                <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;                <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;                {</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;                    <span class="keyword">const</span> int8x16_t a = vld1q_s8(input1_ptr + x);</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;                    <span class="keyword">const</span> int8x16_t <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> = vld1q_s8(input2_ptr + x);</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160; </div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> a_s16_0 = vmovl_s8(vget_low_s8(a));</div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> a_s16_1 = vmovl_s8(vget_high_s8(a));</div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> b_s16_0 = vmovl_s8(vget_low_s8(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>));</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> b_s16_1 = vmovl_s8(vget_high_s8(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>));</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160; </div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_0 = vmlaq_f32(voffset, vcvtq_f32_s32(vmovl_s16(vget_low_s16(a_s16_0))), vscale1);</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_1 = vmlaq_f32(voffset, vcvtq_f32_s32(vmovl_s16(vget_high_s16(a_s16_0))), vscale1);</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_2 = vmlaq_f32(voffset, vcvtq_f32_s32(vmovl_s16(vget_low_s16(a_s16_1))), vscale1);</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_3 = vmlaq_f32(voffset, vcvtq_f32_s32(vmovl_s16(vget_high_s16(a_s16_1))), vscale1);</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160; </div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> bf_0 = vmlaq_f32(af_0, vcvtq_f32_s32(vmovl_s16(vget_low_s16(b_s16_0))), vscale2);</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> bf_1 = vmlaq_f32(af_1, vcvtq_f32_s32(vmovl_s16(vget_high_s16(b_s16_0))), vscale2);</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> bf_2 = vmlaq_f32(af_2, vcvtq_f32_s32(vmovl_s16(vget_low_s16(b_s16_1))), vscale2);</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> bf_3 = vmlaq_f32(af_3, vcvtq_f32_s32(vmovl_s16(vget_high_s16(b_s16_1))), vscale2);</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160; </div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;                    int32x4_t rf_0{};</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;                    int32x4_t rf_1{};</div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;                    int32x4_t rf_2{};</div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;                    int32x4_t rf_3{};</div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160; </div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;                    rf_0 = vcvtnq_s32_f32(bf_0);</div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;                    rf_1 = vcvtnq_s32_f32(bf_1);</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;                    rf_2 = vcvtnq_s32_f32(bf_2);</div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;                    rf_3 = vcvtnq_s32_f32(bf_3);</div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;<span class="preprocessor">#else  //__aarch64__</span></div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;                    rf_0          = vcvtq_s32_f32(bf_0);</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;                    rf_1          = vcvtq_s32_f32(bf_1);</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;                    rf_2          = vcvtq_s32_f32(bf_2);</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;                    rf_3          = vcvtq_s32_f32(bf_3);</div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;<span class="preprocessor">#endif //__aarch64__</span></div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160; </div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;                    <span class="keyword">const</span> int8x8_t pa = vqmovn_s16(vcombine_s16(vqmovn_s32(rf_0), vqmovn_s32(rf_1)));</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;                    <span class="keyword">const</span> int8x8_t pb = vqmovn_s16(vcombine_s16(vqmovn_s32(rf_2), vqmovn_s32(rf_3)));</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;                    vst1q_s8(output_ptr + x, vcombine_s8(pa, pb));</div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;                }</div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160; </div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;                <span class="comment">// Compute left-over elements</span></div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;                <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;                {</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> result = float(input1_ptr[x]) * scale1 + float(input2_ptr[x]) * scale2 + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>;</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;                    output_ptr[x] = utility::clamp&lt;int, int8_t&gt;(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a452ce01d9794d6b04de3699ddbf4d2d0">support::cpp11::lround</a>(result));</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;<span class="preprocessor">#else  // __aarch64__</span></div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;                    output_ptr[x] = utility::clamp&lt;int, int8_t&gt;(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ae04d407202e3d50ce6a4c79ac00a5d59">support::cpp11::trunc</a>(result));</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;<span class="preprocessor">#endif // __aarch64__</span></div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;                }</div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;            },</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;            input1, input2, output);</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;    }</div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;}</div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160; </div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;<span class="keyword">template</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#af5ab9358391aa54ff6cd6934a6cfc6b2">add_q8_neon_fixedpoint&lt;int8_t&gt;</a>(</div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window);</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;<span class="keyword">template</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#abfd7331f875669695cb9af58b5921275">add_q8_neon_fixedpoint&lt;uint8_t&gt;</a>(</div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window);</div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160; </div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;<span class="keyword">template</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a9a8774284dc5c784b77e14670087e590">add_sub_q8_neon_fixedpoint&lt;int8_t&gt;</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>       *src0,</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;                                                 <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>       *src1,</div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;                                                 <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>             *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>,</div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;                                                 <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy,</div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;                                                 <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a>        &amp;window,</div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;                                                 <span class="keywordtype">bool</span>                 is_addition);</div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;<span class="keyword">template</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a2d36ee278add50c2b9f29cc6746206f1">add_sub_q8_neon_fixedpoint&lt;uint8_t&gt;</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>       *src0,</div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;                                                  <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>       *src1,</div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;                                                  <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>             *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>,</div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;                                                  <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy,</div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;                                                  <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a>        &amp;window,</div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;                                                  <span class="keywordtype">bool</span>                 is_addition);</div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160; </div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a990ee09727a5f2205afa13a59576e98d">add_sub_qasymm8_neon</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>       *src0,</div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;                          <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>       *src1,</div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;                          <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>             *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>,</div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;                          <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy,</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;                          <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a>        &amp;window,</div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;                          <span class="keywordtype">bool</span>                 is_addition);</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a4555abacb6f1b8d4510a0c38b2675778">add_sub_qasymm8_signed_neon</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>       *src0,</div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;                                 <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>       *src1,</div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;                                 <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>             *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>,</div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;                                 <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy,</div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;                                 <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a>        &amp;window,</div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;                                 <span class="keywordtype">bool</span>                 is_addition);</div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160; </div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;} <span class="comment">// namespace cpu</span></div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;} <span class="comment">// namespace arm_compute</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassarm__compute_1_1_window_1_1_dimension_xhtml_ab24e31d1a4830bf79564ee902ec6c060"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">arm_compute::Window::Dimension::start</a></div><div class="ttdeci">constexpr int start() const</div><div class="ttdoc">Return the start of the dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00096">Window.h:96</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_uniform_quantization_info_xhtml_a97bd6c077f3c7769f575b82988b9b668"><div class="ttname"><a href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">arm_compute::UniformQuantizationInfo::offset</a></div><div class="ttdeci">int32_t offset</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00063">QuantizationInfo.h:63</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_info_xhtml_a7c66505457d00ece3aa4b34cab80757d"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">arm_compute::ITensorInfo::tensor_shape</a></div><div class="ttdeci">virtual const TensorShape &amp; tensor_shape() const =0</div><div class="ttdoc">Size for each dimension of the tensor.</div></div>
<div class="ttc" id="aarm__compute_2core_2_helpers_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_helpers_8h.xhtml">Helpers.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a8dbba1731c32d176ae6635be1c65cbd6"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">arm_compute::wrapper::vmovl</a></div><div class="ttdeci">uint16x8_t vmovl(const uint8x8_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="movl_8h_source.xhtml#l00039">movl.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_af5ab9358391aa54ff6cd6934a6cfc6b2"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#af5ab9358391aa54ff6cd6934a6cfc6b2">arm_compute::cpu::add_q8_neon_fixedpoint&lt; int8_t &gt;</a></div><div class="ttdeci">template void add_q8_neon_fixedpoint&lt; int8_t &gt;(const ITensor *src0, const ITensor *src1, ITensor *dst, const ConvertPolicy &amp;policy, const Window &amp;window)</div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_1_1_dimension_xhtml_a918580dc9188825d67dbb203a43d02fe"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">arm_compute::Window::Dimension::step</a></div><div class="ttdeci">constexpr int step() const</div><div class="ttdoc">Return the step of the dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00106">Window.h:106</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_aa96e81276ee4f87ab386cd05a5539a7d"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">arm_compute::Window::DimX</a></div><div class="ttdeci">static constexpr size_t DimX</div><div class="ttdoc">Alias for dimension 0 also known as X dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00043">Window.h:43</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_adcf3f09a8f78441a9d5899398238e4e6"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#adcf3f09a8f78441a9d5899398238e4e6">arm_compute::cpu::sub_q8_neon_fixedpoint_possible</a></div><div class="ttdeci">bool sub_q8_neon_fixedpoint_possible(const ITensorInfo *src0, const ITensorInfo *src1, const ITensorInfo *dst)</div><div class="ttdef"><b>Definition:</b> <a href="add_2generic_2neon_2impl_8cpp_source.xhtml#l00035">impl.cpp:35</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml">arm_compute::ITensor</a></div><div class="ttdoc">Interface for CPU tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_8h_source.xhtml#l00036">ITensor.h:36</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a77f54eded7fef436d3a4f21ad5a00da6"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">arm_compute::wrapper::vloadq</a></div><div class="ttdeci">uint8x16_t vloadq(const uint8_t *ptr)</div><div class="ttdef"><b>Definition:</b> <a href="load_8h_source.xhtml#l00058">load.h:58</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a6584a40cba8021fe443986524b98319b"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a6584a40cba8021fe443986524b98319b">arm_compute::cpu::add_sub_q8_neon_fixedpoint_possible</a></div><div class="ttdeci">bool add_sub_q8_neon_fixedpoint_possible(const ITensorInfo *src0, const ITensorInfo *src1, const ITensorInfo *dst, bool is_addition)</div><div class="ttdef"><b>Definition:</b> <a href="add_2generic_2neon_2impl_8cpp_source.xhtml#l00045">impl.cpp:45</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_uniform_quantization_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_uniform_quantization_info.xhtml">arm_compute::UniformQuantizationInfo</a></div><div class="ttdoc">Quantization info when assuming per layer quantization.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00042">QuantizationInfo.h:42</a></div></div>
<div class="ttc" id="awrapper_8h_xhtml"><div class="ttname"><a href="wrapper_8h.xhtml">wrapper.h</a></div><div class="ttdoc">Includes all wrapper headers at once.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_xhtml_a0e95dc1e53c361348314873b168ae237"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">arm_compute::ITensor::info</a></div><div class="ttdeci">virtual ITensorInfo * info() const =0</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor's metadata.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_iterator_xhtml_ab260e292b1df3944bc1d55a9b2301e41"><div class="ttname"><a href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">arm_compute::Iterator::ptr</a></div><div class="ttdeci">constexpr uint8_t * ptr() const</div><div class="ttdoc">Return a pointer to the current pixel.</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00147">Helpers.inl:147</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1support_1_1cpp11_xhtml_ae04d407202e3d50ce6a4c79ac00a5d59"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ae04d407202e3d50ce6a4c79ac00a5d59">arm_compute::support::cpp11::trunc</a></div><div class="ttdeci">T trunc(T value)</div><div class="ttdoc">Truncate floating-point value.</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00216">ToolchainSupport.h:216</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a6c0dcc38187027dcb89cd9724bc5a823"><div class="ttname"><a href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;...iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00074">Helpers.inl:74</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a57b24ba39d5191e1946dcc87a7e88b10"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">arm_compute::wrapper::vreinterpret</a></div><div class="ttdeci">int16x4_t vreinterpret(const uint16x4_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="reinterpret_8h_source.xhtml#l00044">reinterpret.h:44</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_iterator_xhtml"><div class="ttname"><a href="classarm__compute_1_1_iterator.xhtml">arm_compute::Iterator</a></div><div class="ttdoc">Iterator updated by execute_window_loop for each window element.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00046">Helpers.h:46</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a2d36ee278add50c2b9f29cc6746206f1"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a2d36ee278add50c2b9f29cc6746206f1">arm_compute::cpu::add_sub_q8_neon_fixedpoint&lt; uint8_t &gt;</a></div><div class="ttdeci">template void add_sub_q8_neon_fixedpoint&lt; uint8_t &gt;(const ITensor *src0, const ITensor *src1, ITensor *dst, const ConvertPolicy &amp;policy, const Window &amp;window, bool is_addition)</div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a1598e7eb12a58fc53559332cd0c3ab6f"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">arm_compute::wrapper::vcombine</a></div><div class="ttdeci">uint8x16_t vcombine(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="combine_8h_source.xhtml#l00039">combine.h:39</a></div></div>
<div class="ttc" id="asrc_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a009469e4d9b8fce3b6d5e97d2077827d"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a></div><div class="ttdeci">__global uchar * offset(const Image *img, int x, int y)</div><div class="ttdoc">Get the pointer position of a Image.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01128">helpers.h:1128</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_dimensions_xhtml_aa87f8fc26981b0f3228a78c83b95b802"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">arm_compute::Dimensions::x</a></div><div class="ttdeci">T x() const</div><div class="ttdoc">Alias to access the size of the first dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00086">Dimensions.h:86</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_quantization_info_xhtml_a706fc156bcd4c45441bcaad05884b57d"><div class="ttname"><a href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">arm_compute::QuantizationInfo::uniform</a></div><div class="ttdeci">UniformQuantizationInfo uniform() const</div><div class="ttdoc">Return per layer quantization info.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00140">QuantizationInfo.h:140</a></div></div>
<div class="ttc" id="aadd_2generic_2neon_2impl_8h_xhtml"><div class="ttname"><a href="add_2generic_2neon_2impl_8h.xhtml">impl.h</a></div></div>
<div class="ttc" id="astructarm__compute_1_1wrapper_1_1traits_1_1vector__64__tag_xhtml"><div class="ttname"><a href="structarm__compute_1_1wrapper_1_1traits_1_1vector__64__tag.xhtml">arm_compute::wrapper::traits::vector_64_tag</a></div><div class="ttdoc">64-bit vector tag</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_n_e_o_n_2wrapper_2_traits_8h_source.xhtml#l00052">traits.h:52</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a4555abacb6f1b8d4510a0c38b2675778"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a4555abacb6f1b8d4510a0c38b2675778">arm_compute::cpu::add_sub_qasymm8_signed_neon</a></div><div class="ttdeci">void add_sub_qasymm8_signed_neon(const ITensor *src0, const ITensor *src1, ITensor *dst, const ConvertPolicy &amp;policy, const Window &amp;window, bool is_addition)</div><div class="ttdef"><b>Definition:</b> <a href="add_2generic_2neon_2impl_8cpp_source.xhtml#l00501">impl.cpp:501</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00151">Error.h:151</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a9a8774284dc5c784b77e14670087e590"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a9a8774284dc5c784b77e14670087e590">arm_compute::cpu::add_sub_q8_neon_fixedpoint&lt; int8_t &gt;</a></div><div class="ttdeci">template void add_sub_q8_neon_fixedpoint&lt; int8_t &gt;(const ITensor *src0, const ITensor *src1, ITensor *dst, const ConvertPolicy &amp;policy, const Window &amp;window, bool is_addition)</div></div>
<div class="ttc" id="aclassarm__compute_1_1_coordinates_xhtml"><div class="ttname"><a href="classarm__compute_1_1_coordinates.xhtml">arm_compute::Coordinates</a></div><div class="ttdoc">Coordinates of an item.</div><div class="ttdef"><b>Definition:</b> <a href="_coordinates_8h_source.xhtml#l00037">Coordinates.h:37</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_1_1_dimension_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml">arm_compute::Window::Dimension</a></div><div class="ttdoc">Describe one of the image's dimensions with a start, end and step.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00079">Window.h:79</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_acd3d2bba51cb84d34dd7656ad2375a6e"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">arm_compute::Window::set</a></div><div class="ttdeci">void set(size_t dimension, const Dimension &amp;dim)</div><div class="ttdoc">Set the values of a given dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00053">Window.inl:53</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_info_xhtml_a3f3e1a3200223e6a304a533b1016e749"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">arm_compute::ITensorInfo::quantization_info</a></div><div class="ttdeci">virtual QuantizationInfo quantization_info() const =0</div><div class="ttdoc">Get the quantization settings (scale and offset) of the tensor.</div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a66d15db8e989b58b61603ce73d8696b5"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a66d15db8e989b58b61603ce73d8696b5">arm_compute::wrapper::vmlal</a></div><div class="ttdeci">uint16x8_t vmlal(const uint16x8_t &amp;a, const uint8x8_t &amp;b, const uint8x8_t &amp;c)</div><div class="ttdef"><b>Definition:</b> <a href="mla_8h_source.xhtml#l00076">mla.h:76</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a4c5290cc7856ef99db64d9a6b475dba2"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a4c5290cc7856ef99db64d9a6b475dba2">arm_compute::cpu::add_q8_neon_fixedpoint</a></div><div class="ttdeci">void add_q8_neon_fixedpoint(const ITensor *src0, const ITensor *src1, ITensor *dst, const ConvertPolicy &amp;policy, const Window &amp;window)</div><div class="ttdef"><b>Definition:</b> <a href="add_2generic_2neon_2impl_8cpp_source.xhtml#l00078">impl.cpp:78</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_uniform_quantization_info_xhtml_a1d28dec57cce925ad92342891bd71e7c"><div class="ttname"><a href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">arm_compute::UniformQuantizationInfo::scale</a></div><div class="ttdeci">float scale</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00062">QuantizationInfo.h:62</a></div></div>
<div class="ttc" id="astructarm__compute_1_1wrapper_1_1traits_1_1vector__128__tag_xhtml"><div class="ttname"><a href="structarm__compute_1_1wrapper_1_1traits_1_1vector__128__tag.xhtml">arm_compute::wrapper::traits::vector_128_tag</a></div><div class="ttdoc">128-bit vector tag</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_n_e_o_n_2wrapper_2_traits_8h_source.xhtml#l00054">traits.h:54</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a2902775707bc7bf7d6da1bda1cc15783"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">arm_compute::wrapper::vgetlow</a></div><div class="ttdeci">uint8x8_t vgetlow(const uint8x16_t val)</div><div class="ttdef"><b>Definition:</b> <a href="getlow_8h_source.xhtml#l00039">getlow.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_abfd7331f875669695cb9af58b5921275"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#abfd7331f875669695cb9af58b5921275">arm_compute::cpu::add_q8_neon_fixedpoint&lt; uint8_t &gt;</a></div><div class="ttdeci">template void add_q8_neon_fixedpoint&lt; uint8_t &gt;(const ITensor *src0, const ITensor *src1, ITensor *dst, const ConvertPolicy &amp;policy, const Window &amp;window)</div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_ae7943ea9c1f74dc72c62d4cc3966a459"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">arm_compute::wrapper::vstore</a></div><div class="ttdeci">void vstore(uint8_t *ptr, uint8x8_t val)</div><div class="ttdef"><b>Definition:</b> <a href="store_8h_source.xhtml#l00039">store.h:39</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml">arm_compute::Window</a></div><div class="ttdoc">Describe a multidimensional execution window.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00039">Window.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2023 Arm Limited.</div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a82b8ac759c804bc1fb4e2d21e178fb6f"><div class="ttname"><a href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">arm_compute::ConvertPolicy</a></div><div class="ttdeci">ConvertPolicy</div><div class="ttdoc">Policy to handle integer overflow.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00353">Types.h:353</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_ae20ec28555d4473419cae37cf120f35d"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#ae20ec28555d4473419cae37cf120f35d">arm_compute::Window::broadcast_if_dimension_le_one</a></div><div class="ttdeci">Window broadcast_if_dimension_le_one(const TensorShape &amp;shape) const</div><div class="ttdoc">Don't advance in the dimension where shape is less equal to 1.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00134">Window.inl:134</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00044">ITensorInfo.h:44</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_aa1c6a4a70ded6258fff31b3de53dfb8f"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">arm_compute::graph::bfs</a></div><div class="ttdeci">std::vector&lt; NodeID &gt; bfs(Graph &amp;g)</div><div class="ttdoc">Breadth first search traversal.</div><div class="ttdef"><b>Definition:</b> <a href="_topological_sort_8cpp_source.xhtml#l00072">TopologicalSort.cpp:72</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_1_1_dimension_xhtml_a0f590bfcf19110f44efc502e7b5c1d9e"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">arm_compute::Window::Dimension::end</a></div><div class="ttdeci">constexpr int end() const</div><div class="ttdoc">Return the end of the dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00101">Window.h:101</a></div></div>
<div class="ttc" id="aarm__compute_2core_2utils_2misc_2_traits_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2utils_2misc_2_traits_8h.xhtml">Traits.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a95ee388aa7c5bccab918235dc538a6b3"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">arm_compute::wrapper::vgethigh</a></div><div class="ttdeci">uint8x8_t vgethigh(const uint8x16_t val)</div><div class="ttdef"><b>Definition:</b> <a href="gethigh_8h_source.xhtml#l00039">gethigh.h:39</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_a273fd2ecdd45169b2f702f01a7e5e382"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">arm_compute::Window::x</a></div><div class="ttdeci">constexpr const Dimension &amp; x() const</div><div class="ttdoc">Alias to access the first dimension of the window.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00158">Window.h:158</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a5d12d4b685a01367a23a1e201300e06b"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a5d12d4b685a01367a23a1e201300e06b">arm_compute::cpu::add_q8_neon_fixedpoint_possible</a></div><div class="ttdeci">bool add_q8_neon_fixedpoint_possible(const ITensorInfo *src0, const ITensorInfo *src1, const ITensorInfo *dst)</div><div class="ttdef"><b>Definition:</b> <a href="add_2generic_2neon_2impl_8cpp_source.xhtml#l00040">impl.cpp:40</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a39e87435be178fba49b76f49426ef873"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">arm_compute::wrapper::vdup_n</a></div><div class="ttdeci">uint8x8_t vdup_n(uint8_t value, traits::vector_64_tag)</div><div class="ttdef"><b>Definition:</b> <a href="dup__n_8h_source.xhtml#l00041">dup_n.h:41</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a990ee09727a5f2205afa13a59576e98d"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a990ee09727a5f2205afa13a59576e98d">arm_compute::cpu::add_sub_qasymm8_neon</a></div><div class="ttdeci">void add_sub_qasymm8_neon(const ITensor *src0, const ITensor *src1, ITensor *dst, const ConvertPolicy &amp;policy, const Window &amp;window, bool is_addition)</div><div class="ttdef"><b>Definition:</b> <a href="add_2generic_2neon_2impl_8cpp_source.xhtml#l00311">impl.cpp:311</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1support_1_1cpp11_xhtml_a452ce01d9794d6b04de3699ddbf4d2d0"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a452ce01d9794d6b04de3699ddbf4d2d0">arm_compute::support::cpp11::lround</a></div><div class="ttdeci">long lround(T value)</div><div class="ttdoc">Round floating-point value with half value rounding away from zero and cast to long.</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00201">ToolchainSupport.h:201</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a400fdac6bb36c02b9bf3ab5936a3fbd1"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a400fdac6bb36c02b9bf3ab5936a3fbd1">arm_compute::cpu::add_sub_q8_neon_fixedpoint</a></div><div class="ttdeci">void add_sub_q8_neon_fixedpoint(const ITensor *src0, const ITensor *src1, ITensor *dst, const ConvertPolicy &amp;policy, const Window &amp;window, bool is_addition)</div><div class="ttdef"><b>Definition:</b> <a href="add_2generic_2neon_2impl_8cpp_source.xhtml#l00085">impl.cpp:85</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_2c61f424fd391396db977702a2beee9a.xhtml">cpu</a></li><li class="navelem"><a class="el" href="dir_1de7bcbbdec2bf3559cb3c688662d4f5.xhtml">kernels</a></li><li class="navelem"><a class="el" href="dir_7f0c74cf3e327840dbe789f241faca2d.xhtml">add</a></li><li class="navelem"><a class="el" href="dir_b53f57400ea055fa5d0efec8ea5037d2.xhtml">generic</a></li><li class="navelem"><a class="el" href="dir_b7c35eccc6b31413e4d25a6054171f61.xhtml">neon</a></li><li class="navelem"><a class="el" href="add_2generic_2neon_2impl_8cpp.xhtml">impl.cpp</a></li>
    <li class="footer">Generated on Tue Nov 21 2023 16:31:03 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
