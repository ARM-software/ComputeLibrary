<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/CL/cl_kernels/common/gemm_utils.cl Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('gemm__utils_8cl_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">gemm_utils.cl</div>  </div>
</div><!--header-->
<div class="contents">
<a href="gemm__utils_8cl.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017-2021 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="gemm__helpers_8h.xhtml">gemm_helpers.h</a>&quot;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml">helpers.h</a>&quot;</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="repeat_8h.xhtml">repeat.h</a>&quot;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="tile__helpers_8h.xhtml">tile_helpers.h</a>&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160; </div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#if defined(RESHAPE_LHS_NT)</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">/** This OpenCL kernel reshapes the lhs input matrix. The kernel splits the input matrix in blocks of size M0xK0 and stores each one (not transposed) in</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment"> *  the output matrix unrolling the values.</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment"> * @note The data type must be passed at compile time using -DDATA_TYPE (e.g. -DDATA_TYPE=float)</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment"> * @note The width of the input tensor must be passed at compile time using -DSRC_WIDTH (e.g. -DSRC_WIDTH=16)</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment"> * @note The height of the input tensor must be passed at compile time using -DSRC_HEIGHT (e.g. -DSRC_HEIGHT=16)</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment"> * @note The block&#39;s dimensions (M0 and K0) must be passed at compile time using -DM0 and -DK0 (e.g. -DM0=2, -DK0=2).</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment"> * @note The size of the partial load block in y must be passed at compile time using -DPARTIAL_M0 (e.g. -DPARTIAL_M0=1)</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment"> * @note The size of the partial load block in x must be passed at compile time using -DPARTIAL_K0 (e.g. -DPARTIAL_K0=1)</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment"> * @note Only the following values for M0, K0 and V0 are supported:</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment"> *                                      M0: 2,3,4,5,6,7,8</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment"> *                                      K0: 2,3,4,8,16</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment"> *                                      V0: greater than 0</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment"> * @note If the M0xK0 blocks have to be interleaved, the option -DINTERLEAVE must passed at compile time.</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment"> * @param[in] src_ptr                           Pointer to the source tensor. Supported data types: All</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment"> * @param[in] src_stride_y                      Stride of the source tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment"> * @param[in] src_stride_z                      Stride of the source tensor in Z dimension (in bytes)</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment"> * @param[in] src_w                             The size of the width dimension of the source tensor</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment"> * @param[in] src_h                             The size of the height dimension of the source tensor</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment"> * @param[in] src_n                             The size of the depth dimension of the source tensor</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment"> * @param[in] src_offset_first_element_in_bytes The offset of the first element in the source tensor</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment"> * @param[in] dst_ptr                           Pointer to the destination tensor. Supported data types: All</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment"> * @param[in] dst_stride_y                      Stride of the destination tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment"> * @param[in] dst_stride_z                      Stride of the destination tensor in Z dimension (in bytes)</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment"> * @param[in] dst_w                             The size of the width dimension of the destination tensor</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment"> * @param[in] dst_h                             The size of the height dimension of the destination tensor</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment"> * @param[in] dst_n                             The size of the depth dimension of the destination tensor</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment"> * @param[in] dst_offset_first_element_in_bytes The offset of the first element in the destination tensor</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment"> * @param[in] M                                 The size of height dimension of the source tensor, affected by reinterpret_input_as_3d</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment"> * @param[in] V0                                The number of blocks to place on the same row. It must be greater than 0.</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;__kernel <span class="keywordtype">void</span> gemm_reshape_lhs_matrix_nt(<a class="code" href="tile__helpers_8h.xhtml#aebcece1e7d624a61ef24217c754cb6fe">TENSOR3D_T</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, BUFFER),</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                                         <a class="code" href="tile__helpers_8h.xhtml#aebcece1e7d624a61ef24217c754cb6fe">TENSOR3D_T</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, BUFFER),</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                                         <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a68dc0bf731afd0463b8e8cc4ed81c0f8">M</a>,</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                                         <span class="keyword">const</span> <span class="keywordtype">int</span> V0)</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;{</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="comment">// Block size</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="preprocessor">#define BLOCK_SIZE ((M0) * (K0))</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160; </div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="comment">// Output offset X</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="preprocessor">#if defined(INTERLEAVE)</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="preprocessor">#define OUTPUT_OFFSET_X (K0)</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="preprocessor">#else // defined(INTERLEAVE)</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="preprocessor">#define OUTPUT_OFFSET_X (BLOCK_SIZE)</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="preprocessor">#endif // defined(INTERLEAVE)</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160; </div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="comment">// Output step X</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="preprocessor">#if defined(INTERLEAVE)</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="preprocessor">#define OUTPUT_STEP_X (K0) * (V0)</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="preprocessor">#else // Do not interleave</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="preprocessor">#define OUTPUT_STEP_X (K0)</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="preprocessor">#endif // defined(INTERLEAVE)</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160; </div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> x = <a class="code" href="tile__helpers_8h.xhtml#ad7108f3c35d805762fb3a8989d0b641f">GET_SPATIAL_IDX</a>(0, 1, 0); <span class="comment">// K</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> y = <a class="code" href="tile__helpers_8h.xhtml#ad7108f3c35d805762fb3a8989d0b641f">GET_SPATIAL_IDX</a>(1, 1, 0); <span class="comment">// M</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> z = <a class="code" href="tile__helpers_8h.xhtml#ad7108f3c35d805762fb3a8989d0b641f">GET_SPATIAL_IDX</a>(2, 1, 0); <span class="comment">// Batch size</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160; </div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> xi = x * K0;</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> yi = y * M0;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160; </div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> xo = x * <a class="code" href="premultiply_8cpp.xhtml#ad51ded0bbd705f02f73fc60c0b721ced">BLOCK_SIZE</a> * V0 + (y % V0) * OUTPUT_OFFSET_X;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> yo = (y / V0);</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160; </div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="comment">// src_stride_z is expressed as M * src_stride_y, to handle case where reinterpret_input_as_3d=true</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    src_offset_first_element_in_bytes += yi * src_stride_y + z * <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a68dc0bf731afd0463b8e8cc4ed81c0f8">M</a> * src_stride_y;</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    dst_offset_first_element_in_bytes += yo * dst_stride_y + z * dst_stride_z;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160; </div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#a1b7124ed4713f1c104761e8deba36004">TILE</a>(DATA_TYPE, M0, K0, in);</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160; </div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="comment">// Initialize the input tile to zero</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#af5e0dc11a939b317bb77a58beb291fe7">LOOP_UNROLLING</a>(<span class="keywordtype">int</span>, _i, 0, 1, M0,</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    {</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        in[_i].v = 0;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    });</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160; </div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keywordtype">bool</span> x_cond = (xi + K0 &gt;= src_w) &amp;&amp; (PARTIAL_K0 != 0);</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keywordtype">bool</span> y_cond = (yi + M0 &gt;= <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a68dc0bf731afd0463b8e8cc4ed81c0f8">M</a>) &amp;&amp; (PARTIAL_M0 != 0);</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="comment">// Load input tile</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#a1b7124ed4713f1c104761e8deba36004">TILE</a>(uint, M0, 1, in_indirect_y);</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#af5e0dc11a939b317bb77a58beb291fe7">LOOP_UNROLLING</a>(<span class="keywordtype">int</span>, _i, 0, 1, M0,</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    {</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        in_indirect_y[_i].v = _i;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160; </div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    });</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="preprocessor">#if PARTIAL_M0 != 0</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keywordflow">if</span>(y_cond)</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    {</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        <a class="code" href="tile__helpers_8h.xhtml#af6126fba8a26cdfa91efb85dd2defafe">T_LOAD_INDIRECT_WIDTH_SELECT</a>(DATA_TYPE, PARTIAL_M0, K0, PARTIAL_K0, BUFFER, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, xi, src_stride_y, x_cond, in, in_indirect_y);</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    }</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="preprocessor">#endif // PARTIAL_M0 != 0</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    {</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        <a class="code" href="tile__helpers_8h.xhtml#af6126fba8a26cdfa91efb85dd2defafe">T_LOAD_INDIRECT_WIDTH_SELECT</a>(DATA_TYPE, M0, K0, PARTIAL_K0, BUFFER, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, xi, src_stride_y, x_cond, in, in_indirect_y);</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    }</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160; </div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="comment">// Store output tile</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#a1b7124ed4713f1c104761e8deba36004">TILE</a>(uint, M0, 1, dst_indirect_y);</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#af5e0dc11a939b317bb77a58beb291fe7">LOOP_UNROLLING</a>(<span class="keywordtype">int</span>, _i, 0, 1, M0,</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    {</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        dst_indirect_y[_i].v = _i;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    });</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160; </div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#af5933c5bb4531ec2371957cb67518c9e">T_STORE_INDIRECT_WIDTH_SELECT</a>(DATA_TYPE, M0, K0, 0, BUFFER, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, xo, (OUTPUT_STEP_X * <span class="keyword">sizeof</span>(DATA_TYPE)), <span class="keyword">false</span>, in, dst_indirect_y);</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="preprocessor">#undef BLOCK_SIZE</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="preprocessor">#undef OUTPUT_OFFSET_X</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="preprocessor">#undef OUTPUT_STEP_X</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;}</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="preprocessor">#endif // defined(RESHAPE_LHS_NT)</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160; </div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="preprocessor">#if defined(RESHAPE_LHS_T)</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment">/** This OpenCL kernel reshapes the lhs input matrix. The kernel splits the input matrix in blocks of size M0xK0 and stores each one (transposed) in</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment"> *  the output matrix unrolling the values.</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment"> * @note The data type must be passed at compile time using -DDATA_TYPE (e.g. -DDATA_TYPE=float)</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment"> * @note The width of the input tensor must be passed at compile time using -DSRC_WIDTH (e.g. -DSRC_WIDTH=16)</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment"> * @note The height of the input tensor must be passed at compile time using -DSRC_HEIGHT (e.g. -DSRC_HEIGHT=16)</span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment"> * @note The block&#39;s dimensions (M0 and K0) must be passed at compile time using -DM0 and -DK0 (e.g. -DM0=2, -DK0=2).</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment"> * @note The size of the partial load block in y must be passed at compile time using -DPARTIAL_M0 (e.g. -DPARTIAL_M0=1)</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment"> * @note The size of the partial load block in x must be passed at compile time using -DPARTIAL_K0 (e.g. -DPARTIAL_K0=1)</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment"> * @note Only the following values for M0, K0 and V0 are supported:</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment"> *                                      M0: 2,3,4,8,16</span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment"> *                                      K0: 2,3,4,8,16</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment"> *                                      V0: greater than 0</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment"> * @note If the M0xK0 blocks have to be interleaved, the option -DINTERLEAVE must passed at compile time.</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment"> * @param[in] src_ptr                           Pointer to the source tensor. Supported data types: All</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment"> * @param[in] src_stride_y                      Stride of the source tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment"> * @param[in] src_stride_z                      Stride of the source tensor in Z dimension (in bytes)</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment"> * @param[in] src_w                             The size of the width dimension of the source tensor</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment"> * @param[in] src_h                             The size of the height dimension of the source tensor</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="comment"> * @param[in] src_n                             The size of the depth dimension of the source tensor</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="comment"> * @param[in] src_offset_first_element_in_bytes The offset of the first element in the source tensor</span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment"> * @param[in] dst_ptr                           Pointer to the destination tensor. Supported data types: All</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="comment"> * @param[in] dst_stride_y                      Stride of the destination tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment"> * @param[in] dst_stride_z                      Stride of the destination tensor in Z dimension (in bytes)</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment"> * @param[in] dst_w                             The size of the width dimension of the destination tensor</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment"> * @param[in] dst_h                             The size of the height dimension of the destination tensor</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment"> * @param[in] dst_n                             The size of the depth dimension of the destination tensor</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment"> * @param[in] dst_offset_first_element_in_bytes The offset of the first element in the destination tensor</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment"> * @param[in] M                                 The size of height dimension of the source tensor, affected by reinterpret_input_as_3d</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment"> * @param[in] V0                                The number of blocks to place on the same row. It must be greater than 0</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;__kernel <span class="keywordtype">void</span> gemm_reshape_lhs_matrix_t(<a class="code" href="tile__helpers_8h.xhtml#aebcece1e7d624a61ef24217c754cb6fe">TENSOR3D_T</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, BUFFER),</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                                        <a class="code" href="tile__helpers_8h.xhtml#aebcece1e7d624a61ef24217c754cb6fe">TENSOR3D_T</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, BUFFER),</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                                        <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a68dc0bf731afd0463b8e8cc4ed81c0f8">M</a>,</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                                        <span class="keyword">const</span> <span class="keywordtype">int</span> V0)</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;{</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="comment">// Block size</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="preprocessor">#define BLOCK_SIZE ((M0) * (K0))</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160; </div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="comment">// Output offset X</span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="preprocessor">#if defined(INTERLEAVE)</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="preprocessor">#define OUTPUT_OFFSET_X (M0)</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="preprocessor">#else // defined(INTERLEAVE)</span></div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="preprocessor">#define OUTPUT_OFFSET_X (BLOCK_SIZE)</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="preprocessor">#endif // defined(INTERLEAVE)</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160; </div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="comment">// Output step X</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="preprocessor">#if defined(INTERLEAVE)</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="preprocessor">#define OUTPUT_STEP_X (M0) * (V0)</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="preprocessor">#else // Do not interleave</span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="preprocessor">#define OUTPUT_STEP_X (M0)</span></div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="preprocessor">#endif // defined(INTERLEAVE)</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160; </div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> x = <a class="code" href="tile__helpers_8h.xhtml#ad7108f3c35d805762fb3a8989d0b641f">GET_SPATIAL_IDX</a>(0, 1, 0); <span class="comment">// K</span></div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> y = <a class="code" href="tile__helpers_8h.xhtml#ad7108f3c35d805762fb3a8989d0b641f">GET_SPATIAL_IDX</a>(1, 1, 0); <span class="comment">// M</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> z = <a class="code" href="tile__helpers_8h.xhtml#ad7108f3c35d805762fb3a8989d0b641f">GET_SPATIAL_IDX</a>(2, 1, 0); <span class="comment">// Batch size</span></div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160; </div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> xi = x * K0;</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> yi = y * M0;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160; </div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> xo = x * <a class="code" href="premultiply_8cpp.xhtml#ad51ded0bbd705f02f73fc60c0b721ced">BLOCK_SIZE</a> * V0 + ((y % V0) * OUTPUT_OFFSET_X);</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> yo = (y / V0);</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160; </div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="comment">// src_stride_z is expressed as M * src_stride_y, to handle case where reinterpret_input_as_3d=true</span></div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    src_offset_first_element_in_bytes += yi * src_stride_y + z * <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a68dc0bf731afd0463b8e8cc4ed81c0f8">M</a> * src_stride_y;</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    dst_offset_first_element_in_bytes += yo * dst_stride_y + z * dst_stride_z;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160; </div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#a1b7124ed4713f1c104761e8deba36004">TILE</a>(DATA_TYPE, M0, K0, in);</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#a1b7124ed4713f1c104761e8deba36004">TILE</a>(DATA_TYPE, K0, M0, in_tr);</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160; </div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="comment">// Initialize the tile to zero</span></div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#af5e0dc11a939b317bb77a58beb291fe7">LOOP_UNROLLING</a>(<span class="keywordtype">int</span>, _i, 0, 1, M0,</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    {</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        in[_i].v = 0;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    });</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160; </div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="comment">// Load input tile</span></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keywordtype">bool</span> x_cond = (xi + K0 &gt;= src_w) &amp;&amp; (PARTIAL_K0 != 0);</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <span class="keywordtype">bool</span> y_cond = (yi + M0 &gt;= <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a68dc0bf731afd0463b8e8cc4ed81c0f8">M</a>) &amp;&amp; (PARTIAL_M0 != 0);</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160; </div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#a1b7124ed4713f1c104761e8deba36004">TILE</a>(uint, M0, 1, in_indirect_y);</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#af5e0dc11a939b317bb77a58beb291fe7">LOOP_UNROLLING</a>(<span class="keywordtype">int</span>, _i, 0, 1, M0,</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    {</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        in_indirect_y[_i].v = _i;</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160; </div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    });</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="preprocessor">#if PARTIAL_M0 != 0</span></div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="keywordflow">if</span>(y_cond)</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    {</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        <a class="code" href="tile__helpers_8h.xhtml#af6126fba8a26cdfa91efb85dd2defafe">T_LOAD_INDIRECT_WIDTH_SELECT</a>(DATA_TYPE, PARTIAL_M0, K0, PARTIAL_K0, BUFFER, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, xi, src_stride_y, x_cond, in, in_indirect_y);</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    }</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="preprocessor">#endif // PARTIAL_M0 != 0</span></div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    {</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        <a class="code" href="tile__helpers_8h.xhtml#af6126fba8a26cdfa91efb85dd2defafe">T_LOAD_INDIRECT_WIDTH_SELECT</a>(DATA_TYPE, M0, K0, PARTIAL_K0, BUFFER, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, xi, src_stride_y, x_cond, in, in_indirect_y);</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    }</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="comment">// Transpose input tile</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#af5e0dc11a939b317bb77a58beb291fe7">LOOP_UNROLLING</a>(<span class="keywordtype">int</span>, m0, 0, 1, M0,</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    {</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        <a class="code" href="tile__helpers_8h.xhtml#af5e0dc11a939b317bb77a58beb291fe7">LOOP_UNROLLING</a>(<span class="keywordtype">int</span>, k0, 0, 1, K0,</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        {</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;            in_tr[k0].s[m0] = in[m0].s[k0];</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        })</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    });</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160; </div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#a1b7124ed4713f1c104761e8deba36004">TILE</a>(uint, K0, 1, dst_indirect_y);</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#af5e0dc11a939b317bb77a58beb291fe7">LOOP_UNROLLING</a>(<span class="keywordtype">int</span>, _i, 0, 1, K0,</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    {</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        dst_indirect_y[_i].v = _i;</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    });</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160; </div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="comment">// Store output tile</span></div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#af5933c5bb4531ec2371957cb67518c9e">T_STORE_INDIRECT_WIDTH_SELECT</a>(DATA_TYPE, K0, M0, 0, BUFFER, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, xo, (OUTPUT_STEP_X * <span class="keyword">sizeof</span>(DATA_TYPE)), <span class="keyword">false</span>, in_tr, dst_indirect_y);</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160; </div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="preprocessor">#undef BLOCK_SIZE</span></div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="preprocessor">#undef OUTPUT_OFFSET_X</span></div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="preprocessor">#undef OUTPUT_STEP_X</span></div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;}</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="preprocessor">#endif // defined(RESHAPE_LHS_T)</span></div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160; </div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="preprocessor">#if defined(RESHAPE_RHS_NT)</span></div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="comment">/** This OpenCL kernel reshapes the rhs input matrix. The kernel splits the input matrix in blocks of size K0xN0 and stores each one (not transposed) in</span></div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="comment"> *  the output matrix unrolling the values.</span></div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="comment"> * @note The data type must be passed at compile time using -DDATA_TYPE (e.g. -DDATA_TYPE=float)</span></div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="comment"> * @note The block&#39;s dimensions (K0 and N0) must be passed at compile time using -DK0 and -DN0 (e.g. -DK0=2, -DN0=2).</span></div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="comment"> * @note If the K0xN0 blocks have to be interleaved, the option -DINTERLEAVE must passed at compile time.</span></div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="comment"> * @note Only the following values for K0, N0 and H0 are supported:</span></div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="comment"> *                                      N0: 2,3,4,8,16</span></div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="comment"> *                                      K0: 1,2,3,4,8,16</span></div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="comment"> *                                      H0: greater than 0</span></div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="comment"> * @param[in] src_ptr                           Pointer to the source tensor. Supported data types: All</span></div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="comment"> * @param[in] src_stride_y                      Stride of the source tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="comment"> * @param[in] src_stride_z                      Stride of the source tensor in Z dimension (in bytes)</span></div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="comment"> * @param[in] src_w                             The size of the width dimension of the source tensor</span></div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="comment"> * @param[in] src_h                             The size of the height dimension of the source tensor</span></div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="comment"> * @param[in] src_n                             The size of the depth dimension of the source tensor</span></div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="comment"> * @param[in] src_offset_first_element_in_bytes The offset of the first element in the source tensor</span></div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="comment"> * @param[in] dst_ptr                           Pointer to the destination tensor. Supported data types: All</span></div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="comment"> * @param[in] dst_stride_y                      Stride of the destination tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="comment"> * @param[in] dst_stride_z                      Stride of the destination tensor in Z dimension (in bytes)</span></div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="comment"> * @param[in] dst_w                             The size of the width dimension of the destination tensor</span></div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="comment"> * @param[in] dst_h                             The size of the height dimension of the destination tensor</span></div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="comment"> * @param[in] dst_n                             The size of the depth dimension of the destination tensor</span></div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="comment"> * @param[in] dst_offset_first_element_in_bytes The offset of the first element in the destination tensor</span></div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="comment"> * @param[in] H0                                The number of blocks to place on the same row. It must be greater than 0</span></div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;__kernel <span class="keywordtype">void</span> gemm_reshape_rhs_matrix_nt(<a class="code" href="tile__helpers_8h.xhtml#aebcece1e7d624a61ef24217c754cb6fe">TENSOR3D_T</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, BUFFER),</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                                         <a class="code" href="tile__helpers_8h.xhtml#aebcece1e7d624a61ef24217c754cb6fe">TENSOR3D_T</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, BUFFER),</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                                         <span class="keyword">const</span> <span class="keywordtype">int</span> H0)</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;{</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <span class="comment">// Block size</span></div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="preprocessor">#define BLOCK_SIZE ((K0) * (N0))</span></div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160; </div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <span class="comment">// Output offset X</span></div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="preprocessor">#if defined(INTERLEAVE)</span></div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;<span class="preprocessor">#define OUTPUT_OFFSET_X (N0)</span></div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;<span class="preprocessor">#else // defined(INTERLEAVE)</span></div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;<span class="preprocessor">#define OUTPUT_OFFSET_X (BLOCK_SIZE)</span></div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="preprocessor">#endif // defined(INTERLEAVE)</span></div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160; </div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <span class="comment">// Output step X</span></div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="preprocessor">#if defined(INTERLEAVE)</span></div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<span class="preprocessor">#define OUTPUT_STEP_X (N0) * (H0)</span></div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="preprocessor">#else // Do not interleave</span></div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="preprocessor">#define OUTPUT_STEP_X (N0)</span></div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="preprocessor">#endif // defined(INTERLEAVE)</span></div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160; </div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> x = <a class="code" href="tile__helpers_8h.xhtml#ad7108f3c35d805762fb3a8989d0b641f">GET_SPATIAL_IDX</a>(0, 1, 0);</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> y = <a class="code" href="tile__helpers_8h.xhtml#ad7108f3c35d805762fb3a8989d0b641f">GET_SPATIAL_IDX</a>(1, 1, 0);</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> z = <a class="code" href="tile__helpers_8h.xhtml#ad7108f3c35d805762fb3a8989d0b641f">GET_SPATIAL_IDX</a>(2, 1, 0);</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160; </div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> xi = x * N0;</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> yi = y * K0;</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160; </div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> xo = y * <a class="code" href="premultiply_8cpp.xhtml#ad51ded0bbd705f02f73fc60c0b721ced">BLOCK_SIZE</a> * H0 + (x % H0) * OUTPUT_OFFSET_X;</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> yo = (x / H0);</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160; </div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    src_offset_first_element_in_bytes += yi * src_stride_y + z * src_stride_z;</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    dst_offset_first_element_in_bytes += yo * dst_stride_y + z * dst_stride_z;</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160; </div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#a1b7124ed4713f1c104761e8deba36004">TILE</a>(DATA_TYPE, K0, N0, in);</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160; </div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    <span class="comment">// Initialize the tile to zero</span></div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; K0; ++i)</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    {</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        in[i].v = 0;</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    }</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160; </div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    <span class="comment">// Load input tile</span></div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; K0; ++i)</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    {</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;        <span class="keywordflow">if</span>(yi + i &lt; src_h)</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;        {</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;            in[i].v = <a class="code" href="tile__helpers_8h.xhtml#a2f9a690628885b2e9cbb2186532f614e">V_LOAD</a>(DATA_TYPE, N0, BUFFER, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, xi, i, src_stride_y);</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        }</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    }</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160; </div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#a1b7124ed4713f1c104761e8deba36004">TILE</a>(uint, K0, 1, dst_indirect_y);</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; K0; ++i)</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    {</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        dst_indirect_y[i].v = i;</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    }</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160; </div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#af5933c5bb4531ec2371957cb67518c9e">T_STORE_INDIRECT_WIDTH_SELECT</a>(DATA_TYPE, K0, N0, 0, BUFFER, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, xo, (OUTPUT_STEP_X * <span class="keyword">sizeof</span>(DATA_TYPE)), <span class="keyword">false</span>, in, dst_indirect_y);</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160; </div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;<span class="preprocessor">#undef BLOCK_SIZE</span></div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;<span class="preprocessor">#undef OUTPUT_OFFSET_X</span></div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;<span class="preprocessor">#undef OUTPUT_STEP_X</span></div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;}</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;<span class="preprocessor">#endif // defined(RESHAPE_RHS_NT)</span></div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160; </div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="preprocessor">#if defined(RESHAPE_RHS_T)</span></div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;<span class="comment">/** This OpenCL kernel reshapes the rhs input matrix. The kernel splits the input matrix in blocks of size K0xN0 and stores each one (transposed) in</span></div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;<span class="comment"> *  the output matrix unrolling the values.</span></div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;<span class="comment"> * @note The data type must be passed at compile time using -DDATA_TYPE (e.g. -DDATA_TYPE=float)</span></div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;<span class="comment"> * @note The block&#39;s dimensions (K0 and N0) must be passed at compile time using -DK0 and -DN0 (e.g. -DK0=2, -DN0=2).</span></div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;<span class="comment"> * @note If the K0xN0 blocks have to be interleaved, the option -DINTERLEAVE must passed at compile time.</span></div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;<span class="comment"> * @note The option -DTRANSPOSE must passed at compile time.</span></div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;<span class="comment"> * @note Only the following values for K0, N0 and H0 are supported:</span></div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;<span class="comment"> *                                      N0: 2,3,4,8,16</span></div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;<span class="comment"> *                                      K0: 2,3,4,8,16</span></div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;<span class="comment"> *                                      H0: greater than 0</span></div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;<span class="comment"> * @param[in] src_ptr                           Pointer to the source tensor. Supported data types: All</span></div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;<span class="comment"> * @param[in] src_stride_y                      Stride of the source tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;<span class="comment"> * @param[in] src_stride_z                      Stride of the source tensor in Z dimension (in bytes)</span></div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;<span class="comment"> * @param[in] src_w                             The size of the width dimension of the source tensor</span></div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;<span class="comment"> * @param[in] src_h                             The size of the height dimension of the source tensor</span></div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;<span class="comment"> * @param[in] src_n                             The size of the depth dimension of the source tensor</span></div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;<span class="comment"> * @param[in] src_offset_first_element_in_bytes The offset of the first element in the source tensor</span></div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;<span class="comment"> * @param[in] dst_ptr                           Pointer to the destination tensor. Supported data types: All</span></div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;<span class="comment"> * @param[in] dst_stride_y                      Stride of the destination tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;<span class="comment"> * @param[in] dst_stride_z                      Stride of the destination tensor in Z dimension (in bytes)</span></div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;<span class="comment"> * @param[in] dst_w                             The size of the width dimension of the destination tensor</span></div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;<span class="comment"> * @param[in] dst_h                             The size of the height dimension of the destination tensor</span></div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;<span class="comment"> * @param[in] dst_n                             The size of the depth dimension of the destination tensor</span></div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;<span class="comment"> * @param[in] dst_offset_first_element_in_bytes The offset of the first element in the destination tensor</span></div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;<span class="comment"> * @param[in] H0                                The number of blocks to place on the same row. It must be greater than 0.</span></div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;__kernel <span class="keywordtype">void</span> gemm_reshape_rhs_matrix_t(<a class="code" href="tile__helpers_8h.xhtml#aebcece1e7d624a61ef24217c754cb6fe">TENSOR3D_T</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, BUFFER),</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;                                        <a class="code" href="tile__helpers_8h.xhtml#aebcece1e7d624a61ef24217c754cb6fe">TENSOR3D_T</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, BUFFER),</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;                                        <span class="keyword">const</span> <span class="keywordtype">int</span> H0)</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;{</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    <span class="comment">// Block size</span></div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;<span class="preprocessor">#define BLOCK_SIZE ((K0) * (N0))</span></div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160; </div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    <span class="comment">// Output offset X</span></div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;<span class="preprocessor">#if defined(INTERLEAVE)</span></div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;<span class="preprocessor">#define OUTPUT_OFFSET_X (K0)</span></div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;<span class="preprocessor">#else // defined(INTERLEAVE)</span></div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;<span class="preprocessor">#define OUTPUT_OFFSET_X (BLOCK_SIZE)</span></div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;<span class="preprocessor">#endif // defined(INTERLEAVE)</span></div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160; </div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    <span class="comment">// Output step X</span></div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;<span class="preprocessor">#if defined(INTERLEAVE)</span></div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;<span class="preprocessor">#define OUTPUT_STEP_X (K0) * (H0)</span></div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;<span class="preprocessor">#else // Do not interleave</span></div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;<span class="preprocessor">#define OUTPUT_STEP_X (K0)</span></div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;<span class="preprocessor">#endif // defined(INTERLEAVE)</span></div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160; </div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> x = <a class="code" href="tile__helpers_8h.xhtml#ad7108f3c35d805762fb3a8989d0b641f">GET_SPATIAL_IDX</a>(0, 1, 0);</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> y = <a class="code" href="tile__helpers_8h.xhtml#ad7108f3c35d805762fb3a8989d0b641f">GET_SPATIAL_IDX</a>(1, 1, 0);</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> z = <a class="code" href="tile__helpers_8h.xhtml#ad7108f3c35d805762fb3a8989d0b641f">GET_SPATIAL_IDX</a>(2, 1, 0);</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160; </div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> xi = x * N0;</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> yi = y * K0;</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160; </div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> xo = y * <a class="code" href="premultiply_8cpp.xhtml#ad51ded0bbd705f02f73fc60c0b721ced">BLOCK_SIZE</a> * H0 + (x % H0) * OUTPUT_OFFSET_X;</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> yo = (x / H0);</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160; </div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    src_offset_first_element_in_bytes += yi * src_stride_y + z * src_stride_z;</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    dst_offset_first_element_in_bytes += yo * dst_stride_y + z * dst_stride_z;</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160; </div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#a1b7124ed4713f1c104761e8deba36004">TILE</a>(DATA_TYPE, K0, N0, in);</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#a1b7124ed4713f1c104761e8deba36004">TILE</a>(DATA_TYPE, N0, K0, in_tr);</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160; </div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    <span class="comment">// Initialize the tile to zero</span></div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; K0; ++i)</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    {</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;        in[i].v = 0;</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    }</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160; </div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    <span class="comment">// Load input tile</span></div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; K0; ++i)</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    {</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;        <span class="keywordflow">if</span>(yi + i &lt; src_h)</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;        {</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;            in[i].v = <a class="code" href="tile__helpers_8h.xhtml#a2f9a690628885b2e9cbb2186532f614e">V_LOAD</a>(DATA_TYPE, N0, BUFFER, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, xi, i, src_stride_y);</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;        }</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    }</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160; </div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    <span class="comment">// Transpose input tile</span></div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k0 = 0; k0 &lt; K0; ++k0)</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    {</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> n0 = 0; n0 &lt; N0; ++n0)</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;        {</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;            in_tr[n0].s[k0] = in[k0].s[n0];</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;        }</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    }</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160; </div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#a1b7124ed4713f1c104761e8deba36004">TILE</a>(uint, N0, 1, dst_indirect_y);</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; N0; ++i)</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    {</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;        dst_indirect_y[i].v = i;</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    }</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160; </div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#af5933c5bb4531ec2371957cb67518c9e">T_STORE_INDIRECT_WIDTH_SELECT</a>(DATA_TYPE, N0, K0, 0, BUFFER, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, xo, (OUTPUT_STEP_X * <span class="keyword">sizeof</span>(DATA_TYPE)), <span class="keyword">false</span>, in_tr, dst_indirect_y);</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160; </div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;<span class="preprocessor">#undef BLOCK_SIZE</span></div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;<span class="preprocessor">#undef OUTPUT_OFFSET_X</span></div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;<span class="preprocessor">#undef OUTPUT_STEP_X</span></div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;}</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160; </div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;<span class="preprocessor">#endif // defined(RESHAPE_RHS_T)</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="agemm__helpers_8h_xhtml"><div class="ttname"><a href="gemm__helpers_8h.xhtml">gemm_helpers.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="atile__helpers_8h_xhtml_ad7108f3c35d805762fb3a8989d0b641f"><div class="ttname"><a href="tile__helpers_8h.xhtml#ad7108f3c35d805762fb3a8989d0b641f">GET_SPATIAL_IDX</a></div><div class="ttdeci">#define GET_SPATIAL_IDX(IDX, N0, PARTIAL_N0)</div><div class="ttdoc">Get the get_global_id with partial N0.</div><div class="ttdef"><b>Definition:</b> <a href="tile__helpers_8h_source.xhtml#l00352">tile_helpers.h:352</a></div></div>
<div class="ttc" id="arepeat_8h_xhtml"><div class="ttname"><a href="repeat_8h.xhtml">repeat.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="apremultiply_8cpp_xhtml_ad51ded0bbd705f02f73fc60c0b721ced"><div class="ttname"><a href="premultiply_8cpp.xhtml#ad51ded0bbd705f02f73fc60c0b721ced">BLOCK_SIZE</a></div><div class="ttdeci">#define BLOCK_SIZE</div><div class="ttdef"><b>Definition:</b> <a href="premultiply_8cpp_source.xhtml#l00028">premultiply.cpp:28</a></div></div>
<div class="ttc" id="atile__helpers_8h_xhtml_aebcece1e7d624a61ef24217c754cb6fe"><div class="ttname"><a href="tile__helpers_8h.xhtml#aebcece1e7d624a61ef24217c754cb6fe">TENSOR3D_T</a></div><div class="ttdeci">#define TENSOR3D_T(name, type)</div><div class="ttdef"><b>Definition:</b> <a href="tile__helpers_8h_source.xhtml#l00191">tile_helpers.h:191</a></div></div>
<div class="ttc" id="atile__helpers_8h_xhtml_af6126fba8a26cdfa91efb85dd2defafe"><div class="ttname"><a href="tile__helpers_8h.xhtml#af6126fba8a26cdfa91efb85dd2defafe">T_LOAD_INDIRECT_WIDTH_SELECT</a></div><div class="ttdeci">#define T_LOAD_INDIRECT_WIDTH_SELECT(DATA_TYPE, HEIGHT, WIDTH0, WIDTH1, TENSOR_TYPE, TENSOR, X, STRIDE_Y, WIDTH1_CONDITION, dst, indirect_y)</div><div class="ttdoc">Load a tile from global memory (tensor) using an indirect Y index tile and conditionally use a differ...</div><div class="ttdef"><b>Definition:</b> <a href="tile__helpers_8h_source.xhtml#l00675">tile_helpers.h:675</a></div></div>
<div class="ttc" id="atile__helpers_8h_xhtml_af5933c5bb4531ec2371957cb67518c9e"><div class="ttname"><a href="tile__helpers_8h.xhtml#af5933c5bb4531ec2371957cb67518c9e">T_STORE_INDIRECT_WIDTH_SELECT</a></div><div class="ttdeci">#define T_STORE_INDIRECT_WIDTH_SELECT(DATA_TYPE, HEIGHT, WIDTH0, WIDTH1, TENSOR_TYPE, TENSOR, X, STRIDE_Y, WIDTH1_CONDITION, src, indirect_y)</div><div class="ttdoc">Store a tile to global memory (tensor) using an indirect Y index tile and conditionally use a differe...</div><div class="ttdef"><b>Definition:</b> <a href="tile__helpers_8h_source.xhtml#l00899">tile_helpers.h:899</a></div></div>
<div class="ttc" id="atile__helpers_8h_xhtml_af5e0dc11a939b317bb77a58beb291fe7"><div class="ttname"><a href="tile__helpers_8h.xhtml#af5e0dc11a939b317bb77a58beb291fe7">LOOP_UNROLLING</a></div><div class="ttdeci">#define LOOP_UNROLLING(type, idx, start, step, num, macro)</div><div class="ttdef"><b>Definition:</b> <a href="tile__helpers_8h_source.xhtml#l00340">tile_helpers.h:340</a></div></div>
<div class="ttc" id="atile__helpers_8h_xhtml"><div class="ttname"><a href="tile__helpers_8h.xhtml">tile_helpers.h</a></div></div>
<div class="ttc" id="a_cpu_gemm_assembly_dispatch_8cpp_xhtml_a68dc0bf731afd0463b8e8cc4ed81c0f8"><div class="ttname"><a href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a68dc0bf731afd0463b8e8cc4ed81c0f8">M</a></div><div class="ttdeci">unsigned int M</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00102">CpuGemmAssemblyDispatch.cpp:102</a></div></div>
<div class="ttc" id="atile__helpers_8h_xhtml_a2f9a690628885b2e9cbb2186532f614e"><div class="ttname"><a href="tile__helpers_8h.xhtml#a2f9a690628885b2e9cbb2186532f614e">V_LOAD</a></div><div class="ttdeci">#define V_LOAD(DATA_TYPE, WIDTH, TENSOR_TYPE, TENSOR, X, Y, STRIDE_Y)</div><div class="ttdoc">Load a vector from global memory (tensor)</div><div class="ttdef"><b>Definition:</b> <a href="tile__helpers_8h_source.xhtml#l00492">tile_helpers.h:492</a></div></div>
<div class="ttc" id="asrc_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml">helpers.h</a></div></div>
<div class="ttc" id="atile__helpers_8h_xhtml_a1b7124ed4713f1c104761e8deba36004"><div class="ttname"><a href="tile__helpers_8h.xhtml#a1b7124ed4713f1c104761e8deba36004">TILE</a></div><div class="ttdeci">#define TILE(DATA_TYPE, H, W, BASENAME)</div><div class="ttdoc">Tile object A tile object is a 2D memory block and can be accessed using the following syntax:</div><div class="ttdef"><b>Definition:</b> <a href="tile__helpers_8h_source.xhtml#l00074">tile_helpers.h:74</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_8c278f79c760e5c5fbd911f9870614c1.xhtml">CL</a></li><li class="navelem"><a class="el" href="dir_25885286e9dad4fa105b7b25a8031bbf.xhtml">cl_kernels</a></li><li class="navelem"><a class="el" href="dir_a50b9933354d81525095b5e7ad336497.xhtml">common</a></li><li class="navelem"><a class="el" href="gemm__utils_8cl.xhtml">gemm_utils.cl</a></li>
    <li class="footer">Generated on Tue Nov 21 2023 16:31:00 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
