<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute/runtime/CL/functions/CLElementwiseUnaryLayer.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_c_l_elementwise_unary_layer_8h_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">CLElementwiseUnaryLayer.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_c_l_elementwise_unary_layer_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2018-2021 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_CLELEMENTWISEUNARYLAYER_H</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define ARM_COMPUTE_CLELEMENTWISEUNARYLAYER_H</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160; </div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_types_8h.xhtml">arm_compute/core/Types.h</a>&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_function_8h.xhtml">arm_compute/runtime/IFunction.h</a>&quot;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160; </div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160; </div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;{</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">class </span>CLCompileContext;</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">class </span>ICLTensor;</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">class </span>ITensorInfo;</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">/** Basic function to perform inverse square root on an input tensor. */</span></div>
<div class="line"><a name="l00039"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_rsqrt_layer.xhtml">   39</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1_c_l_rsqrt_layer.xhtml">CLRsqrtLayer</a> : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1_i_function.xhtml">IFunction</a></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">    /** Default Constructor */</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_rsqrt_layer.xhtml#accbe3d51641d2d47fe122dbffa2e446e">CLRsqrtLayer</a>();<span class="comment"></span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">    /** Default Destructor */</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_rsqrt_layer.xhtml#ad05e111e7872fb0ffd3eeb3c6faaeda4">~CLRsqrtLayer</a>();<span class="comment"></span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">    /** Prevent instances of this class from being copied (As this class contains pointers) */</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_rsqrt_layer.xhtml#accbe3d51641d2d47fe122dbffa2e446e">CLRsqrtLayer</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_l_rsqrt_layer.xhtml">CLRsqrtLayer</a> &amp;) = <span class="keyword">delete</span>;<span class="comment"></span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">    /** Default move constructor */</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_rsqrt_layer.xhtml#accbe3d51641d2d47fe122dbffa2e446e">CLRsqrtLayer</a>(<a class="code" href="classarm__compute_1_1_c_l_rsqrt_layer.xhtml">CLRsqrtLayer</a> &amp;&amp;);<span class="comment"></span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">    /** Prevent instances of this class from being copied (As this class contains pointers) */</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_rsqrt_layer.xhtml">CLRsqrtLayer</a> &amp;<a class="code" href="classarm__compute_1_1_c_l_rsqrt_layer.xhtml#ac48874400fcb243d69f87d250922e8f2">operator=</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_l_rsqrt_layer.xhtml">CLRsqrtLayer</a> &amp;) = <span class="keyword">delete</span>;<span class="comment"></span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">    /** Default move assignment operator */</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_rsqrt_layer.xhtml">CLRsqrtLayer</a> &amp;<a class="code" href="classarm__compute_1_1_c_l_rsqrt_layer.xhtml#ac48874400fcb243d69f87d250922e8f2">operator=</a>(<a class="code" href="classarm__compute_1_1_c_l_rsqrt_layer.xhtml">CLRsqrtLayer</a> &amp;&amp;);<span class="comment"></span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment">    /** Initialize the function</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment">     * Valid data layouts:</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">     * - All</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">     * Valid data type configurations:</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment">     * |src            |dst            |</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">     * |:--------------|:--------------|</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment">     * |F16            |F16            |</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment">     * |F32            |F32            |</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment">     * @param[in]  input  Input tensor. Data types supported: F16/F32.</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment">     * @param[out] output Output tensor. Data types supported: same as @p input.</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_rsqrt_layer.xhtml#a074e10cfb217e657b9e81adeca2abc68">configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *output);<span class="comment"></span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment">    /** Initialize the function</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment">     * @param[in]  compile_context The compile context to be used.</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">     * @param[in]  input           Input tensor. Data types supported: F16/F32.</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment">     * @param[out] output          Output tensor. Data types supported: same as @p input.</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_rsqrt_layer.xhtml#a074e10cfb217e657b9e81adeca2abc68">configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_l_compile_context.xhtml">CLCompileContext</a> &amp;compile_context, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *output);<span class="comment"></span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">    /** Static function to check if given info will lead to a valid configuration of @ref CLRsqrtLayer</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">     * @param[in] input  First tensor input info. Data types supported: F16/F32.</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment">     * @param[in] output Output tensor info. Data types supported: Same as @p input.</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment">     * @return a status</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keyword">static</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="classarm__compute_1_1_c_l_rsqrt_layer.xhtml#a968b23a6ef327fcfb5b99d58e3fbe883">validate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output);</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160; </div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="comment">// Inherited methods overridden:</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_rsqrt_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>() <span class="keyword">override</span>;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160; </div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keyword">struct </span>Impl;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    std::unique_ptr&lt;Impl&gt; _impl;</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;};</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment">/** Basic function to perform exponential on an input tensor. */</span></div>
<div class="line"><a name="l00094"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_exp_layer.xhtml">   94</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1_c_l_exp_layer.xhtml">CLExpLayer</a> : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1_i_function.xhtml">IFunction</a></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;{</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment">    /** Default Constructor */</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_exp_layer.xhtml#ac933209c5a6409b09cb4cb7a6573cb6d">CLExpLayer</a>();<span class="comment"></span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment">    /** Default Destructor */</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_exp_layer.xhtml#ae039ac0c564e67f64c1d6e73789a505c">~CLExpLayer</a>();<span class="comment"></span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment">    /** Prevent instances of this class from being copied (As this class contains pointers) */</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_exp_layer.xhtml#ac933209c5a6409b09cb4cb7a6573cb6d">CLExpLayer</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_l_exp_layer.xhtml">CLExpLayer</a> &amp;) = <span class="keyword">delete</span>;<span class="comment"></span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment">    /** Default move constructor */</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_exp_layer.xhtml#ac933209c5a6409b09cb4cb7a6573cb6d">CLExpLayer</a>(<a class="code" href="classarm__compute_1_1_c_l_exp_layer.xhtml">CLExpLayer</a> &amp;&amp;);<span class="comment"></span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">    /** Prevent instances of this class from being copied (As this class contains pointers) */</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_exp_layer.xhtml">CLExpLayer</a> &amp;<a class="code" href="classarm__compute_1_1_c_l_exp_layer.xhtml#a1eade9b656c40c04a5d7531a279103b1">operator=</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_l_exp_layer.xhtml">CLExpLayer</a> &amp;) = <span class="keyword">delete</span>;<span class="comment"></span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment">    /** Default move assignment operator */</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_exp_layer.xhtml">CLExpLayer</a> &amp;<a class="code" href="classarm__compute_1_1_c_l_exp_layer.xhtml#a1eade9b656c40c04a5d7531a279103b1">operator=</a>(<a class="code" href="classarm__compute_1_1_c_l_exp_layer.xhtml">CLExpLayer</a> &amp;&amp;);<span class="comment"></span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">    /** Initialize the function</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment">     * Valid data layouts:</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment">     * - All</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">     * Valid data type configurations:</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment">     * |src            |dst            |</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">     * |:--------------|:--------------|</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">     * |F16            |F16            |</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment">     * |F32            |F32            |</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment">     * @param[in]  input  Input tensor. Data types supported: F16/F32.</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment">     * @param[out] output Output tensor. Data types supported: same as @p input.</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_exp_layer.xhtml#a074e10cfb217e657b9e81adeca2abc68">configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *output);<span class="comment"></span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment">    /** Initialize the function</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment">     * @param[in]  compile_context The compile context to be used.</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment">     * @param[in]  input           Input tensor. Data types supported: F16/F32.</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">     * @param[out] output          Output tensor. Data types supported: same as @p input.</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_exp_layer.xhtml#a074e10cfb217e657b9e81adeca2abc68">configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_l_compile_context.xhtml">CLCompileContext</a> &amp;compile_context, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *output);<span class="comment"></span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment">    /** Static function to check if given info will lead to a valid configuration of @ref CLExpLayer</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment">     * @param[in] input  First tensor input info. Data types supported: F16/F32.</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment">     * @param[in] output Output tensor info. Data types supported: Same as @p input.</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment">     * @return a status</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keyword">static</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="classarm__compute_1_1_c_l_exp_layer.xhtml#a968b23a6ef327fcfb5b99d58e3fbe883">validate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output);</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160; </div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="comment">// Inherited methods overridden:</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_exp_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>() <span class="keyword">override</span>;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160; </div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keyword">struct </span>Impl;</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    std::unique_ptr&lt;Impl&gt; _impl;</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;};</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment">/** Basic function to negate an input tensor. */</span></div>
<div class="line"><a name="l00149"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_neg_layer.xhtml">  149</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1_c_l_neg_layer.xhtml">CLNegLayer</a> : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1_i_function.xhtml">IFunction</a></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;{</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment">    /** Default Constructor */</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_neg_layer.xhtml#a2568ef81d36c7401a4071c44d6cf6d3b">CLNegLayer</a>();<span class="comment"></span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment">    /** Default Destructor */</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_neg_layer.xhtml#a4b440cc4e5a611c0031de55f37f3ccd2">~CLNegLayer</a>();<span class="comment"></span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment">    /** Prevent instances of this class from being copied (As this class contains pointers) */</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_neg_layer.xhtml#a2568ef81d36c7401a4071c44d6cf6d3b">CLNegLayer</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_l_neg_layer.xhtml">CLNegLayer</a> &amp;) = <span class="keyword">delete</span>;<span class="comment"></span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment">    /** Default move constructor */</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_neg_layer.xhtml#a2568ef81d36c7401a4071c44d6cf6d3b">CLNegLayer</a>(<a class="code" href="classarm__compute_1_1_c_l_neg_layer.xhtml">CLNegLayer</a> &amp;&amp;);<span class="comment"></span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment">    /** Prevent instances of this class from being copied (As this class contains pointers) */</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_neg_layer.xhtml">CLNegLayer</a> &amp;<a class="code" href="classarm__compute_1_1_c_l_neg_layer.xhtml#ac7318213bc9419e9f803e5b49a10e44e">operator=</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_l_neg_layer.xhtml">CLNegLayer</a> &amp;) = <span class="keyword">delete</span>;<span class="comment"></span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="comment">    /** Default move assignment operator */</span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_neg_layer.xhtml">CLNegLayer</a> &amp;<a class="code" href="classarm__compute_1_1_c_l_neg_layer.xhtml#ac7318213bc9419e9f803e5b49a10e44e">operator=</a>(<a class="code" href="classarm__compute_1_1_c_l_neg_layer.xhtml">CLNegLayer</a> &amp;&amp;);<span class="comment"></span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="comment">    /** Initialize the function</span></div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment">     * Valid data layouts:</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment">     * - All</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment">     * Valid data type configurations:</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment">     * |src            |dst            |</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment">     * |:--------------|:--------------|</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment">     * |F16            |F16            |</span></div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="comment">     * |F32            |F32            |</span></div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment">     * |S32            |S32            |</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="comment">     * @param[in]  input  Input tensor. Data types supported: F16/F32/S32</span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment">     * @param[out] output Output tensor. Data types supported: same as @p input.</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_neg_layer.xhtml#a074e10cfb217e657b9e81adeca2abc68">configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *output);<span class="comment"></span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment">    /** Initialize the function</span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment">     * @param[in]  compile_context The compile context to be used.</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment">     * @param[in]  input           Input tensor. Data types supported: F16/F32/S32</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="comment">     * @param[out] output          Output tensor. Data types supported: same as @p input.</span></div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_neg_layer.xhtml#a074e10cfb217e657b9e81adeca2abc68">configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_l_compile_context.xhtml">CLCompileContext</a> &amp;compile_context, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *output);<span class="comment"></span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment">    /** Static function to check if given info will lead to a valid configuration of @ref CLNegLayer</span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment">     * @param[in] input  First tensor input info. Data types supported: F16/F32/S32</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment">     * @param[in] output Output tensor info. Data types supported: Same as @p input.</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="comment">     * @return a status</span></div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="keyword">static</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="classarm__compute_1_1_c_l_neg_layer.xhtml#a968b23a6ef327fcfb5b99d58e3fbe883">validate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output);</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160; </div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="comment">// Inherited methods overridden:</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_neg_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>() <span class="keyword">override</span>;</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160; </div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="keyword">struct </span>Impl;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    std::unique_ptr&lt;Impl&gt; _impl;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;};</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="comment">/** Basic function to calculate sine of an input tensor. */</span></div>
<div class="line"><a name="l00205"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_sin_layer.xhtml">  205</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1_c_l_sin_layer.xhtml">CLSinLayer</a> : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1_i_function.xhtml">IFunction</a></div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;{</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="comment">    /** Default Constructor */</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_sin_layer.xhtml#a533548787f021909ec0955e1730ce96c">CLSinLayer</a>();<span class="comment"></span></div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="comment">    /** Default Destructor */</span></div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_sin_layer.xhtml#abda8140e374c1f150c5ac67f743f750d">~CLSinLayer</a>();<span class="comment"></span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="comment">    /** Prevent instances of this class from being copied (As this class contains pointers) */</span></div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_sin_layer.xhtml#a533548787f021909ec0955e1730ce96c">CLSinLayer</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_l_sin_layer.xhtml">CLSinLayer</a> &amp;) = <span class="keyword">delete</span>;<span class="comment"></span></div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="comment">    /** Default move constructor */</span></div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_sin_layer.xhtml#a533548787f021909ec0955e1730ce96c">CLSinLayer</a>(<a class="code" href="classarm__compute_1_1_c_l_sin_layer.xhtml">CLSinLayer</a> &amp;&amp;);<span class="comment"></span></div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="comment">    /** Prevent instances of this class from being copied (As this class contains pointers) */</span></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_sin_layer.xhtml">CLSinLayer</a> &amp;<a class="code" href="classarm__compute_1_1_c_l_sin_layer.xhtml#a45d350c098dfa32bd02f949c85f79eb0">operator=</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_l_sin_layer.xhtml">CLSinLayer</a> &amp;) = <span class="keyword">delete</span>;<span class="comment"></span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="comment">    /** Default move assignment operator */</span></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_sin_layer.xhtml">CLSinLayer</a> &amp;<a class="code" href="classarm__compute_1_1_c_l_sin_layer.xhtml#a45d350c098dfa32bd02f949c85f79eb0">operator=</a>(<a class="code" href="classarm__compute_1_1_c_l_sin_layer.xhtml">CLSinLayer</a> &amp;&amp;);<span class="comment"></span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="comment">    /** Initialize the function</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="comment">     * Valid data layouts:</span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="comment">     * - All</span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="comment">     * Valid data type configurations:</span></div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="comment">     * |src            |dst            |</span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="comment">     * |:--------------|:--------------|</span></div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment">     * |F16            |F16            |</span></div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment">     * |F32            |F32            |</span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="comment">     * @param[in]  input  Input tensor. Data types supported: F16/F32.</span></div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="comment">     * @param[out] output Output tensor. Data types supported: same as @p input.</span></div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_sin_layer.xhtml#a074e10cfb217e657b9e81adeca2abc68">configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *output);<span class="comment"></span></div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="comment">    /** Initialize the function</span></div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="comment">     * @param[in]  compile_context The compile context to be used.</span></div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="comment">     * @param[in]  input           Input tensor. Data types supported: F16/F32.</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="comment">     * @param[out] output          Output tensor. Data types supported: same as @p input.</span></div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_sin_layer.xhtml#a074e10cfb217e657b9e81adeca2abc68">configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_l_compile_context.xhtml">CLCompileContext</a> &amp;compile_context, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *output);<span class="comment"></span></div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="comment">    /** Static function to check if given info will lead to a valid configuration of @ref CLSinLayer</span></div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="comment">     * @param[in] input  First tensor input info. Data types supported: F16/F32.</span></div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="comment">     * @param[in] output Output tensor info. Data types supported: Same as @p input.</span></div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="comment">     * @return a status</span></div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="keyword">static</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="classarm__compute_1_1_c_l_sin_layer.xhtml#a968b23a6ef327fcfb5b99d58e3fbe883">validate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output);</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160; </div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="comment">// Inherited methods overridden:</span></div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_sin_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>() <span class="keyword">override</span>;</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160; </div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keyword">struct </span>Impl;</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    std::unique_ptr&lt;Impl&gt; _impl;</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;};</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="comment">/** Basic function to perform elementwise log on an input tensor. */</span></div>
<div class="line"><a name="l00260"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_log_layer.xhtml">  260</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1_c_l_log_layer.xhtml">CLLogLayer</a> : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1_i_function.xhtml">IFunction</a></div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;{</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="comment">    /** Default Constructor */</span></div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_log_layer.xhtml#a0ad879feaf25e84887600c9e7e9e83ad">CLLogLayer</a>();<span class="comment"></span></div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="comment">    /** Default Destructor */</span></div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_log_layer.xhtml#a5ab19cede020eef12632c11ea2b7af95">~CLLogLayer</a>();<span class="comment"></span></div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="comment">    /** Prevent instances of this class from being copied (As this class contains pointers) */</span></div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_log_layer.xhtml#a0ad879feaf25e84887600c9e7e9e83ad">CLLogLayer</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_l_log_layer.xhtml">CLLogLayer</a> &amp;) = <span class="keyword">delete</span>;<span class="comment"></span></div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="comment">    /** Default move constructor */</span></div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_log_layer.xhtml#a0ad879feaf25e84887600c9e7e9e83ad">CLLogLayer</a>(<a class="code" href="classarm__compute_1_1_c_l_log_layer.xhtml">CLLogLayer</a> &amp;&amp;);<span class="comment"></span></div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="comment">    /** Prevent instances of this class from being copied (As this class contains pointers) */</span></div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_log_layer.xhtml">CLLogLayer</a> &amp;<a class="code" href="classarm__compute_1_1_c_l_log_layer.xhtml#a30bf961550fc8fdf30728c872161c5b4">operator=</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_l_log_layer.xhtml">CLLogLayer</a> &amp;) = <span class="keyword">delete</span>;<span class="comment"></span></div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="comment">    /** Default move assignment operator */</span></div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_log_layer.xhtml">CLLogLayer</a> &amp;<a class="code" href="classarm__compute_1_1_c_l_log_layer.xhtml#a30bf961550fc8fdf30728c872161c5b4">operator=</a>(<a class="code" href="classarm__compute_1_1_c_l_log_layer.xhtml">CLLogLayer</a> &amp;&amp;);<span class="comment"></span></div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="comment">    /** Initialize the function</span></div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="comment">     * Valid data layouts:</span></div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="comment">     * - All</span></div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="comment">     * Valid data type configurations:</span></div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="comment">     * |src            |dst            |</span></div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="comment">     * |:--------------|:--------------|</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="comment">     * |F16            |F16            |</span></div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="comment">     * |F32            |F32            |</span></div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="comment">     * @param[in]  input  Input tensor. Data types supported: F16/F32.</span></div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="comment">     * @param[out] output Output tensor. Data types supported: same as @p input.</span></div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_log_layer.xhtml#a074e10cfb217e657b9e81adeca2abc68">configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *output);<span class="comment"></span></div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="comment">    /** Initialize the function</span></div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="comment">     * @param[in]  compile_context The compile context to be used.</span></div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="comment">     * @param[in]  input           Input tensor. Data types supported: F16/F32.</span></div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="comment">     * @param[out] output          Output tensor. Data types supported: same as @p input.</span></div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_log_layer.xhtml#a074e10cfb217e657b9e81adeca2abc68">configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_l_compile_context.xhtml">CLCompileContext</a> &amp;compile_context, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *output);<span class="comment"></span></div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="comment">    /** Static function to check if given info will lead to a valid configuration of @ref CLLogLayer</span></div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;<span class="comment">     * @param[in] input  First tensor input info. Data types supported: F16/F32.</span></div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;<span class="comment">     * @param[in] output Output tensor info. Data types supported: Same as @p input.</span></div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="comment">     * @return a status</span></div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <span class="keyword">static</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="classarm__compute_1_1_c_l_log_layer.xhtml#a968b23a6ef327fcfb5b99d58e3fbe883">validate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output);</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160; </div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <span class="comment">// Inherited methods overridden:</span></div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_log_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>() <span class="keyword">override</span>;</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160; </div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    <span class="keyword">struct </span>Impl;</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    std::unique_ptr&lt;Impl&gt; _impl;</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;};</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="comment">/** Basic function to get the absolute value of an input tensor. */</span></div>
<div class="line"><a name="l00315"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_abs_layer.xhtml">  315</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1_c_l_abs_layer.xhtml">CLAbsLayer</a> : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1_i_function.xhtml">IFunction</a></div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;{</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;<span class="comment">    /** Default Constructor */</span></div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_abs_layer.xhtml#ae62b1659cd1c50f12cc03f2175028ae7">CLAbsLayer</a>();<span class="comment"></span></div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;<span class="comment">    /** Default Destructor */</span></div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_abs_layer.xhtml#ac6f802436534fd366407a05e6abbd589">~CLAbsLayer</a>();<span class="comment"></span></div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;<span class="comment">    /** Prevent instances of this class from being copied (As this class contains pointers) */</span></div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_abs_layer.xhtml#ae62b1659cd1c50f12cc03f2175028ae7">CLAbsLayer</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_l_abs_layer.xhtml">CLAbsLayer</a> &amp;) = <span class="keyword">delete</span>;<span class="comment"></span></div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;<span class="comment">    /** Default move constructor */</span></div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_abs_layer.xhtml#ae62b1659cd1c50f12cc03f2175028ae7">CLAbsLayer</a>(<a class="code" href="classarm__compute_1_1_c_l_abs_layer.xhtml">CLAbsLayer</a> &amp;&amp;);<span class="comment"></span></div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;<span class="comment">    /** Prevent instances of this class from being copied (As this class contains pointers) */</span></div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_abs_layer.xhtml">CLAbsLayer</a> &amp;<a class="code" href="classarm__compute_1_1_c_l_abs_layer.xhtml#ad9727105870d6e87f50a82403d6f1aaa">operator=</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_l_abs_layer.xhtml">CLAbsLayer</a> &amp;) = <span class="keyword">delete</span>;<span class="comment"></span></div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="comment">    /** Default move assignment operator */</span></div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_abs_layer.xhtml">CLAbsLayer</a> &amp;<a class="code" href="classarm__compute_1_1_c_l_abs_layer.xhtml#ad9727105870d6e87f50a82403d6f1aaa">operator=</a>(<a class="code" href="classarm__compute_1_1_c_l_abs_layer.xhtml">CLAbsLayer</a> &amp;&amp;);<span class="comment"></span></div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="comment">    /** Initialize the function</span></div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;<span class="comment">     * Valid data layouts:</span></div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;<span class="comment">     * - All</span></div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;<span class="comment">     * Valid data type configurations:</span></div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;<span class="comment">     * |src            |dst            |</span></div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;<span class="comment">     * |:--------------|:--------------|</span></div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;<span class="comment">     * |F16            |F16            |</span></div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;<span class="comment">     * |F32            |F32            |</span></div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;<span class="comment">     * @param[in]  input  Input tensor. Data types supported: F16/F32.</span></div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;<span class="comment">     * @param[out] output Output tensor. Data types supported: same as @p input.</span></div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_abs_layer.xhtml#a074e10cfb217e657b9e81adeca2abc68">configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *output);<span class="comment"></span></div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;<span class="comment">    /** Initialize the function</span></div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;<span class="comment">     * @param[in]  compile_context The compile context to be used.</span></div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;<span class="comment">     * @param[in]  input           Input tensor. Data types supported: F16/F32.</span></div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;<span class="comment">     * @param[out] output          Output tensor. Data types supported: same as @p input.</span></div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_abs_layer.xhtml#a074e10cfb217e657b9e81adeca2abc68">configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_l_compile_context.xhtml">CLCompileContext</a> &amp;compile_context, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *output);<span class="comment"></span></div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;<span class="comment">    /** Static function to check if given info will lead to a valid configuration of @ref CLAbsLayer</span></div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;<span class="comment">     * @param[in] input  First tensor input info. Data types supported: F16/F32.</span></div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="comment">     * @param[in] output Output tensor info. Data types supported: Same as @p input.</span></div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;<span class="comment">     * @return a status</span></div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    <span class="keyword">static</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="classarm__compute_1_1_c_l_abs_layer.xhtml#a968b23a6ef327fcfb5b99d58e3fbe883">validate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output);</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160; </div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    <span class="comment">// Inherited methods overridden:</span></div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_abs_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>() <span class="keyword">override</span>;</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160; </div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    <span class="keyword">struct </span>Impl;</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    std::unique_ptr&lt;Impl&gt; _impl;</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;};</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;<span class="comment">/** Basic function to get the round (to the nearest even) value of an input tensor. */</span></div>
<div class="line"><a name="l00370"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_round_layer.xhtml">  370</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1_c_l_round_layer.xhtml">CLRoundLayer</a> : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1_i_function.xhtml">IFunction</a></div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;{</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;<span class="comment">    /** Default Constructor */</span></div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_round_layer.xhtml#a7d132663d25399356998bd14af378d87">CLRoundLayer</a>();<span class="comment"></span></div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;<span class="comment">    /** Default Destructor */</span></div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_round_layer.xhtml#a0da46dbd4030b4dec1e5e34358e3b5c5">~CLRoundLayer</a>();<span class="comment"></span></div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;<span class="comment">    /** Prevent instances of this class from being copied (As this class contains pointers) */</span></div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_round_layer.xhtml#a7d132663d25399356998bd14af378d87">CLRoundLayer</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_l_round_layer.xhtml">CLRoundLayer</a> &amp;) = <span class="keyword">delete</span>;<span class="comment"></span></div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;<span class="comment">    /** Default move constructor */</span></div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_round_layer.xhtml#a7d132663d25399356998bd14af378d87">CLRoundLayer</a>(<a class="code" href="classarm__compute_1_1_c_l_round_layer.xhtml">CLRoundLayer</a> &amp;&amp;);<span class="comment"></span></div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;<span class="comment">    /** Prevent instances of this class from being copied (As this class contains pointers) */</span></div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_round_layer.xhtml">CLRoundLayer</a> &amp;<a class="code" href="classarm__compute_1_1_c_l_round_layer.xhtml#a6f7f001a2f2ba055109972c15298a3ec">operator=</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_l_round_layer.xhtml">CLRoundLayer</a> &amp;) = <span class="keyword">delete</span>;<span class="comment"></span></div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;<span class="comment">    /** Default move assignment operator */</span></div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_round_layer.xhtml">CLRoundLayer</a> &amp;<a class="code" href="classarm__compute_1_1_c_l_round_layer.xhtml#a6f7f001a2f2ba055109972c15298a3ec">operator=</a>(<a class="code" href="classarm__compute_1_1_c_l_round_layer.xhtml">CLRoundLayer</a> &amp;&amp;);<span class="comment"></span></div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;<span class="comment">    /** Initialize the function</span></div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;<span class="comment">     * Valid data layouts:</span></div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;<span class="comment">     * - All</span></div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;<span class="comment">     * Valid data type configurations:</span></div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;<span class="comment">     * |src            |dst            |</span></div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;<span class="comment">     * |:--------------|:--------------|</span></div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;<span class="comment">     * |F16            |F16            |</span></div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;<span class="comment">     * |F32            |F32            |</span></div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;<span class="comment">     * @param[in]  input  Input tensor. Data types supported: F16/F32.</span></div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;<span class="comment">     * @param[out] output Output tensor. Data types supported: same as @p input.</span></div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_round_layer.xhtml#a074e10cfb217e657b9e81adeca2abc68">configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *output);<span class="comment"></span></div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;<span class="comment">    /** Initialize the function</span></div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;<span class="comment">     * @param[in]  compile_context The compile context to be used.</span></div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;<span class="comment">     * @param[in]  input           Input tensor. Data types supported: F16/F32.</span></div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;<span class="comment">     * @param[out] output          Output tensor. Data types supported: same as @p input.</span></div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_round_layer.xhtml#a074e10cfb217e657b9e81adeca2abc68">configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_l_compile_context.xhtml">CLCompileContext</a> &amp;compile_context, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *output);<span class="comment"></span></div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;<span class="comment">    /** Static function to check if given info will lead to a valid configuration of @ref CLRoundLayer</span></div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;<span class="comment">     * @param[in] input  First tensor input info. Data types supported: F16/F32.</span></div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;<span class="comment">     * @param[in] output Output tensor info. Data types supported: Same as @p input.</span></div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;<span class="comment">     * @return a status</span></div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    <span class="keyword">static</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="classarm__compute_1_1_c_l_round_layer.xhtml#a968b23a6ef327fcfb5b99d58e3fbe883">validate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output);</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160; </div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    <span class="comment">// Inherited methods overridden:</span></div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_round_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>() <span class="keyword">override</span>;</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160; </div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    <span class="keyword">struct </span>Impl;</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    std::unique_ptr&lt;Impl&gt; _impl;</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;};</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;} <span class="comment">// namespace arm_compute</span></div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_CLELEMENTWISEUNARYLAYER_H */</span><span class="preprocessor"></span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassarm__compute_1_1_c_l_neg_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_neg_layer.xhtml">arm_compute::CLNegLayer</a></div><div class="ttdoc">Basic function to negate an input tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_unary_layer_8h_source.xhtml#l00149">CLElementwiseUnaryLayer.h:149</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_round_layer_xhtml_a0da46dbd4030b4dec1e5e34358e3b5c5"><div class="ttname"><a href="classarm__compute_1_1_c_l_round_layer.xhtml#a0da46dbd4030b4dec1e5e34358e3b5c5">arm_compute::CLRoundLayer::~CLRoundLayer</a></div><div class="ttdeci">~CLRoundLayer()</div><div class="ttdoc">Default Destructor.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_sin_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_sin_layer.xhtml">arm_compute::CLSinLayer</a></div><div class="ttdoc">Basic function to calculate sine of an input tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_unary_layer_8h_source.xhtml#l00205">CLElementwiseUnaryLayer.h:205</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_exp_layer_xhtml_a1eade9b656c40c04a5d7531a279103b1"><div class="ttname"><a href="classarm__compute_1_1_c_l_exp_layer.xhtml#a1eade9b656c40c04a5d7531a279103b1">arm_compute::CLExpLayer::operator=</a></div><div class="ttdeci">CLExpLayer &amp; operator=(const CLExpLayer &amp;)=delete</div><div class="ttdoc">Prevent instances of this class from being copied (As this class contains pointers)</div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_rsqrt_layer_xhtml_accbe3d51641d2d47fe122dbffa2e446e"><div class="ttname"><a href="classarm__compute_1_1_c_l_rsqrt_layer.xhtml#accbe3d51641d2d47fe122dbffa2e446e">arm_compute::CLRsqrtLayer::CLRsqrtLayer</a></div><div class="ttdeci">CLRsqrtLayer()</div><div class="ttdoc">Default Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_unary_layer_8cpp_source.xhtml#l00041">CLElementwiseUnaryLayer.cpp:41</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_function_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_function.xhtml">arm_compute::IFunction</a></div><div class="ttdoc">Base class for all functions.</div><div class="ttdef"><b>Definition:</b> <a href="_i_function_8h_source.xhtml#l00030">IFunction.h:30</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_abs_layer_xhtml_ad9727105870d6e87f50a82403d6f1aaa"><div class="ttname"><a href="classarm__compute_1_1_c_l_abs_layer.xhtml#ad9727105870d6e87f50a82403d6f1aaa">arm_compute::CLAbsLayer::operator=</a></div><div class="ttdeci">CLAbsLayer &amp; operator=(const CLAbsLayer &amp;)=delete</div><div class="ttdoc">Prevent instances of this class from being copied (As this class contains pointers)</div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_round_layer_xhtml_ad1717410afd0be936c6213a63c8005fb"><div class="ttname"><a href="classarm__compute_1_1_c_l_round_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">arm_compute::CLRoundLayer::run</a></div><div class="ttdeci">void run() override</div><div class="ttdoc">Run the kernels contained in the function.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_unary_layer_8cpp_source.xhtml#l00308">CLElementwiseUnaryLayer.cpp:308</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_types_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_log_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_log_layer.xhtml">arm_compute::CLLogLayer</a></div><div class="ttdoc">Basic function to perform elementwise log on an input tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_unary_layer_8h_source.xhtml#l00260">CLElementwiseUnaryLayer.h:260</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_c_l_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_tensor.xhtml">arm_compute::ICLTensor</a></div><div class="ttdoc">Interface for OpenCL tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_i_c_l_tensor_8h_source.xhtml#l00041">ICLTensor.h:41</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_round_layer_xhtml_a074e10cfb217e657b9e81adeca2abc68"><div class="ttname"><a href="classarm__compute_1_1_c_l_round_layer.xhtml#a074e10cfb217e657b9e81adeca2abc68">arm_compute::CLRoundLayer::configure</a></div><div class="ttdeci">void configure(const ICLTensor *input, ICLTensor *output)</div><div class="ttdoc">Initialize the function.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_unary_layer_8cpp_source.xhtml#l00291">CLElementwiseUnaryLayer.cpp:291</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_rsqrt_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_rsqrt_layer.xhtml">arm_compute::CLRsqrtLayer</a></div><div class="ttdoc">Basic function to perform inverse square root on an input tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_unary_layer_8h_source.xhtml#l00039">CLElementwiseUnaryLayer.h:39</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_abs_layer_xhtml_ad1717410afd0be936c6213a63c8005fb"><div class="ttname"><a href="classarm__compute_1_1_c_l_abs_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">arm_compute::CLAbsLayer::run</a></div><div class="ttdeci">void run() override</div><div class="ttdoc">Run the kernels contained in the function.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_unary_layer_8cpp_source.xhtml#l00228">CLElementwiseUnaryLayer.cpp:228</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_round_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_round_layer.xhtml">arm_compute::CLRoundLayer</a></div><div class="ttdoc">Basic function to get the round (to the nearest even) value of an input tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_unary_layer_8h_source.xhtml#l00370">CLElementwiseUnaryLayer.h:370</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_round_layer_xhtml_a968b23a6ef327fcfb5b99d58e3fbe883"><div class="ttname"><a href="classarm__compute_1_1_c_l_round_layer.xhtml#a968b23a6ef327fcfb5b99d58e3fbe883">arm_compute::CLRoundLayer::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input, const ITensorInfo *output)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CLRoundLayer.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_unary_layer_8cpp_source.xhtml#l00303">CLElementwiseUnaryLayer.cpp:303</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_abs_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_abs_layer.xhtml">arm_compute::CLAbsLayer</a></div><div class="ttdoc">Basic function to get the absolute value of an input tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_unary_layer_8h_source.xhtml#l00315">CLElementwiseUnaryLayer.h:315</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_abs_layer_xhtml_ac6f802436534fd366407a05e6abbd589"><div class="ttname"><a href="classarm__compute_1_1_c_l_abs_layer.xhtml#ac6f802436534fd366407a05e6abbd589">arm_compute::CLAbsLayer::~CLAbsLayer</a></div><div class="ttdeci">~CLAbsLayer()</div><div class="ttdoc">Default Destructor.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_neg_layer_xhtml_ac7318213bc9419e9f803e5b49a10e44e"><div class="ttname"><a href="classarm__compute_1_1_c_l_neg_layer.xhtml#ac7318213bc9419e9f803e5b49a10e44e">arm_compute::CLNegLayer::operator=</a></div><div class="ttdeci">CLNegLayer &amp; operator=(const CLNegLayer &amp;)=delete</div><div class="ttdoc">Prevent instances of this class from being copied (As this class contains pointers)</div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_sin_layer_xhtml_a074e10cfb217e657b9e81adeca2abc68"><div class="ttname"><a href="classarm__compute_1_1_c_l_sin_layer.xhtml#a074e10cfb217e657b9e81adeca2abc68">arm_compute::CLSinLayer::configure</a></div><div class="ttdeci">void configure(const ICLTensor *input, ICLTensor *output)</div><div class="ttdoc">Initialize the function.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_unary_layer_8cpp_source.xhtml#l00171">CLElementwiseUnaryLayer.cpp:171</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_exp_layer_xhtml_a074e10cfb217e657b9e81adeca2abc68"><div class="ttname"><a href="classarm__compute_1_1_c_l_exp_layer.xhtml#a074e10cfb217e657b9e81adeca2abc68">arm_compute::CLExpLayer::configure</a></div><div class="ttdeci">void configure(const ICLTensor *input, ICLTensor *output)</div><div class="ttdoc">Initialize the function.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_unary_layer_8cpp_source.xhtml#l00090">CLElementwiseUnaryLayer.cpp:90</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_sin_layer_xhtml_a968b23a6ef327fcfb5b99d58e3fbe883"><div class="ttname"><a href="classarm__compute_1_1_c_l_sin_layer.xhtml#a968b23a6ef327fcfb5b99d58e3fbe883">arm_compute::CLSinLayer::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input, const ITensorInfo *output)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CLSinLayer.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_unary_layer_8cpp_source.xhtml#l00183">CLElementwiseUnaryLayer.cpp:183</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_exp_layer_xhtml_ac933209c5a6409b09cb4cb7a6573cb6d"><div class="ttname"><a href="classarm__compute_1_1_c_l_exp_layer.xhtml#ac933209c5a6409b09cb4cb7a6573cb6d">arm_compute::CLExpLayer::CLExpLayer</a></div><div class="ttdeci">CLExpLayer()</div><div class="ttdoc">Default Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_unary_layer_8cpp_source.xhtml#l00082">CLElementwiseUnaryLayer.cpp:82</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_sin_layer_xhtml_a533548787f021909ec0955e1730ce96c"><div class="ttname"><a href="classarm__compute_1_1_c_l_sin_layer.xhtml#a533548787f021909ec0955e1730ce96c">arm_compute::CLSinLayer::CLSinLayer</a></div><div class="ttdeci">CLSinLayer()</div><div class="ttdoc">Default Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_unary_layer_8cpp_source.xhtml#l00163">CLElementwiseUnaryLayer.cpp:163</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_exp_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_exp_layer.xhtml">arm_compute::CLExpLayer</a></div><div class="ttdoc">Basic function to perform exponential on an input tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_unary_layer_8h_source.xhtml#l00094">CLElementwiseUnaryLayer.h:94</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_exp_layer_xhtml_a968b23a6ef327fcfb5b99d58e3fbe883"><div class="ttname"><a href="classarm__compute_1_1_c_l_exp_layer.xhtml#a968b23a6ef327fcfb5b99d58e3fbe883">arm_compute::CLExpLayer::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input, const ITensorInfo *output)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CLExpLayer.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_unary_layer_8cpp_source.xhtml#l00103">CLElementwiseUnaryLayer.cpp:103</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_compile_context_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_compile_context.xhtml">arm_compute::CLCompileContext</a></div><div class="ttdoc">CLCompileContext class.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_c_l_2_c_l_compile_context_8h_source.xhtml#l00204">CLCompileContext.h:204</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_rsqrt_layer_xhtml_a968b23a6ef327fcfb5b99d58e3fbe883"><div class="ttname"><a href="classarm__compute_1_1_c_l_rsqrt_layer.xhtml#a968b23a6ef327fcfb5b99d58e3fbe883">arm_compute::CLRsqrtLayer::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input, const ITensorInfo *output)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CLRsqrtLayer.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_unary_layer_8cpp_source.xhtml#l00062">CLElementwiseUnaryLayer.cpp:62</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_sin_layer_xhtml_a45d350c098dfa32bd02f949c85f79eb0"><div class="ttname"><a href="classarm__compute_1_1_c_l_sin_layer.xhtml#a45d350c098dfa32bd02f949c85f79eb0">arm_compute::CLSinLayer::operator=</a></div><div class="ttdeci">CLSinLayer &amp; operator=(const CLSinLayer &amp;)=delete</div><div class="ttdoc">Prevent instances of this class from being copied (As this class contains pointers)</div></div>
<div class="ttc" id="aclassarm__compute_1_1_status_xhtml"><div class="ttname"><a href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a></div><div class="ttdoc">Status class.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00052">Error.h:52</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_abs_layer_xhtml_ae62b1659cd1c50f12cc03f2175028ae7"><div class="ttname"><a href="classarm__compute_1_1_c_l_abs_layer.xhtml#ae62b1659cd1c50f12cc03f2175028ae7">arm_compute::CLAbsLayer::CLAbsLayer</a></div><div class="ttdeci">CLAbsLayer()</div><div class="ttdoc">Default Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_unary_layer_8cpp_source.xhtml#l00203">CLElementwiseUnaryLayer.cpp:203</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_exp_layer_xhtml_ad1717410afd0be936c6213a63c8005fb"><div class="ttname"><a href="classarm__compute_1_1_c_l_exp_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">arm_compute::CLExpLayer::run</a></div><div class="ttdeci">void run() override</div><div class="ttdoc">Run the kernels contained in the function.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_unary_layer_8cpp_source.xhtml#l00108">CLElementwiseUnaryLayer.cpp:108</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_log_layer_xhtml_a968b23a6ef327fcfb5b99d58e3fbe883"><div class="ttname"><a href="classarm__compute_1_1_c_l_log_layer.xhtml#a968b23a6ef327fcfb5b99d58e3fbe883">arm_compute::CLLogLayer::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input, const ITensorInfo *output)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CLLogLayer.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_unary_layer_8cpp_source.xhtml#l00263">CLElementwiseUnaryLayer.cpp:263</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_neg_layer_xhtml_a2568ef81d36c7401a4071c44d6cf6d3b"><div class="ttname"><a href="classarm__compute_1_1_c_l_neg_layer.xhtml#a2568ef81d36c7401a4071c44d6cf6d3b">arm_compute::CLNegLayer::CLNegLayer</a></div><div class="ttdeci">CLNegLayer()</div><div class="ttdoc">Default Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_unary_layer_8cpp_source.xhtml#l00123">CLElementwiseUnaryLayer.cpp:123</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_log_layer_xhtml_a30bf961550fc8fdf30728c872161c5b4"><div class="ttname"><a href="classarm__compute_1_1_c_l_log_layer.xhtml#a30bf961550fc8fdf30728c872161c5b4">arm_compute::CLLogLayer::operator=</a></div><div class="ttdeci">CLLogLayer &amp; operator=(const CLLogLayer &amp;)=delete</div><div class="ttdoc">Prevent instances of this class from being copied (As this class contains pointers)</div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_rsqrt_layer_xhtml_a074e10cfb217e657b9e81adeca2abc68"><div class="ttname"><a href="classarm__compute_1_1_c_l_rsqrt_layer.xhtml#a074e10cfb217e657b9e81adeca2abc68">arm_compute::CLRsqrtLayer::configure</a></div><div class="ttdeci">void configure(const ICLTensor *input, ICLTensor *output)</div><div class="ttdoc">Initialize the function.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_unary_layer_8cpp_source.xhtml#l00049">CLElementwiseUnaryLayer.cpp:49</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_log_layer_xhtml_a0ad879feaf25e84887600c9e7e9e83ad"><div class="ttname"><a href="classarm__compute_1_1_c_l_log_layer.xhtml#a0ad879feaf25e84887600c9e7e9e83ad">arm_compute::CLLogLayer::CLLogLayer</a></div><div class="ttdeci">CLLogLayer()</div><div class="ttdoc">Default Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_unary_layer_8cpp_source.xhtml#l00243">CLElementwiseUnaryLayer.cpp:243</a></div></div>
<div class="ttc" id="a_i_function_8h_xhtml"><div class="ttname"><a href="_i_function_8h.xhtml">IFunction.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_exp_layer_xhtml_ae039ac0c564e67f64c1d6e73789a505c"><div class="ttname"><a href="classarm__compute_1_1_c_l_exp_layer.xhtml#ae039ac0c564e67f64c1d6e73789a505c">arm_compute::CLExpLayer::~CLExpLayer</a></div><div class="ttdeci">~CLExpLayer()</div><div class="ttdoc">Default Destructor.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_round_layer_xhtml_a7d132663d25399356998bd14af378d87"><div class="ttname"><a href="classarm__compute_1_1_c_l_round_layer.xhtml#a7d132663d25399356998bd14af378d87">arm_compute::CLRoundLayer::CLRoundLayer</a></div><div class="ttdeci">CLRoundLayer()</div><div class="ttdoc">Default Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_unary_layer_8cpp_source.xhtml#l00283">CLElementwiseUnaryLayer.cpp:283</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_log_layer_xhtml_a074e10cfb217e657b9e81adeca2abc68"><div class="ttname"><a href="classarm__compute_1_1_c_l_log_layer.xhtml#a074e10cfb217e657b9e81adeca2abc68">arm_compute::CLLogLayer::configure</a></div><div class="ttdeci">void configure(const ICLTensor *input, ICLTensor *output)</div><div class="ttdoc">Initialize the function.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_unary_layer_8cpp_source.xhtml#l00251">CLElementwiseUnaryLayer.cpp:251</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2023 Arm Limited.</div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_rsqrt_layer_xhtml_ad1717410afd0be936c6213a63c8005fb"><div class="ttname"><a href="classarm__compute_1_1_c_l_rsqrt_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">arm_compute::CLRsqrtLayer::run</a></div><div class="ttdeci">void run() override</div><div class="ttdoc">Run the kernels contained in the function.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_unary_layer_8cpp_source.xhtml#l00067">CLElementwiseUnaryLayer.cpp:67</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_log_layer_xhtml_a5ab19cede020eef12632c11ea2b7af95"><div class="ttname"><a href="classarm__compute_1_1_c_l_log_layer.xhtml#a5ab19cede020eef12632c11ea2b7af95">arm_compute::CLLogLayer::~CLLogLayer</a></div><div class="ttdeci">~CLLogLayer()</div><div class="ttdoc">Default Destructor.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_rsqrt_layer_xhtml_ac48874400fcb243d69f87d250922e8f2"><div class="ttname"><a href="classarm__compute_1_1_c_l_rsqrt_layer.xhtml#ac48874400fcb243d69f87d250922e8f2">arm_compute::CLRsqrtLayer::operator=</a></div><div class="ttdeci">CLRsqrtLayer &amp; operator=(const CLRsqrtLayer &amp;)=delete</div><div class="ttdoc">Prevent instances of this class from being copied (As this class contains pointers)</div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_neg_layer_xhtml_a074e10cfb217e657b9e81adeca2abc68"><div class="ttname"><a href="classarm__compute_1_1_c_l_neg_layer.xhtml#a074e10cfb217e657b9e81adeca2abc68">arm_compute::CLNegLayer::configure</a></div><div class="ttdeci">void configure(const ICLTensor *input, ICLTensor *output)</div><div class="ttdoc">Initialize the function.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_unary_layer_8cpp_source.xhtml#l00131">CLElementwiseUnaryLayer.cpp:131</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00044">ITensorInfo.h:44</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_log_layer_xhtml_ad1717410afd0be936c6213a63c8005fb"><div class="ttname"><a href="classarm__compute_1_1_c_l_log_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">arm_compute::CLLogLayer::run</a></div><div class="ttdeci">void run() override</div><div class="ttdoc">Run the kernels contained in the function.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_unary_layer_8cpp_source.xhtml#l00268">CLElementwiseUnaryLayer.cpp:268</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_neg_layer_xhtml_a4b440cc4e5a611c0031de55f37f3ccd2"><div class="ttname"><a href="classarm__compute_1_1_c_l_neg_layer.xhtml#a4b440cc4e5a611c0031de55f37f3ccd2">arm_compute::CLNegLayer::~CLNegLayer</a></div><div class="ttdeci">~CLNegLayer()</div><div class="ttdoc">Default Destructor.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_abs_layer_xhtml_a968b23a6ef327fcfb5b99d58e3fbe883"><div class="ttname"><a href="classarm__compute_1_1_c_l_abs_layer.xhtml#a968b23a6ef327fcfb5b99d58e3fbe883">arm_compute::CLAbsLayer::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input, const ITensorInfo *output)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CLAbsLayer.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_unary_layer_8cpp_source.xhtml#l00223">CLElementwiseUnaryLayer.cpp:223</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_neg_layer_xhtml_ad1717410afd0be936c6213a63c8005fb"><div class="ttname"><a href="classarm__compute_1_1_c_l_neg_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">arm_compute::CLNegLayer::run</a></div><div class="ttdeci">void run() override</div><div class="ttdoc">Run the kernels contained in the function.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_unary_layer_8cpp_source.xhtml#l00148">CLElementwiseUnaryLayer.cpp:148</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_sin_layer_xhtml_abda8140e374c1f150c5ac67f743f750d"><div class="ttname"><a href="classarm__compute_1_1_c_l_sin_layer.xhtml#abda8140e374c1f150c5ac67f743f750d">arm_compute::CLSinLayer::~CLSinLayer</a></div><div class="ttdeci">~CLSinLayer()</div><div class="ttdoc">Default Destructor.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_round_layer_xhtml_a6f7f001a2f2ba055109972c15298a3ec"><div class="ttname"><a href="classarm__compute_1_1_c_l_round_layer.xhtml#a6f7f001a2f2ba055109972c15298a3ec">arm_compute::CLRoundLayer::operator=</a></div><div class="ttdeci">CLRoundLayer &amp; operator=(const CLRoundLayer &amp;)=delete</div><div class="ttdoc">Prevent instances of this class from being copied (As this class contains pointers)</div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_neg_layer_xhtml_a968b23a6ef327fcfb5b99d58e3fbe883"><div class="ttname"><a href="classarm__compute_1_1_c_l_neg_layer.xhtml#a968b23a6ef327fcfb5b99d58e3fbe883">arm_compute::CLNegLayer::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input, const ITensorInfo *output)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CLNegLayer.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_unary_layer_8cpp_source.xhtml#l00143">CLElementwiseUnaryLayer.cpp:143</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">LSTMLayerQuantized.cpp:486</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_abs_layer_xhtml_a074e10cfb217e657b9e81adeca2abc68"><div class="ttname"><a href="classarm__compute_1_1_c_l_abs_layer.xhtml#a074e10cfb217e657b9e81adeca2abc68">arm_compute::CLAbsLayer::configure</a></div><div class="ttdeci">void configure(const ICLTensor *input, ICLTensor *output)</div><div class="ttdoc">Initialize the function.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_unary_layer_8cpp_source.xhtml#l00211">CLElementwiseUnaryLayer.cpp:211</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_rsqrt_layer_xhtml_ad05e111e7872fb0ffd3eeb3c6faaeda4"><div class="ttname"><a href="classarm__compute_1_1_c_l_rsqrt_layer.xhtml#ad05e111e7872fb0ffd3eeb3c6faaeda4">arm_compute::CLRsqrtLayer::~CLRsqrtLayer</a></div><div class="ttdeci">~CLRsqrtLayer()</div><div class="ttdoc">Default Destructor.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_sin_layer_xhtml_ad1717410afd0be936c6213a63c8005fb"><div class="ttname"><a href="classarm__compute_1_1_c_l_sin_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">arm_compute::CLSinLayer::run</a></div><div class="ttdeci">void run() override</div><div class="ttdoc">Run the kernels contained in the function.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_elementwise_unary_layer_8cpp_source.xhtml#l00188">CLElementwiseUnaryLayer.cpp:188</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_214608ef36d61442cb2b0c1c4e9a7def.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="dir_8bc26130589aa16388b5a02f17abf2c2.xhtml">runtime</a></li><li class="navelem"><a class="el" href="dir_b986aa98f9b6490bb4fc7918500346fb.xhtml">CL</a></li><li class="navelem"><a class="el" href="dir_251c63bc3f70b60acf43edd6d870a3ef.xhtml">functions</a></li><li class="navelem"><a class="el" href="_c_l_elementwise_unary_layer_8h.xhtml">CLElementwiseUnaryLayer.h</a></li>
    <li class="footer">Generated on Tue Nov 21 2023 16:30:58 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
