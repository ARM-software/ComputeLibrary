<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/CL/cl_kernels/common/gemmlowp.cl Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('gemmlowp_8cl_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">gemmlowp.cl</div>  </div>
</div><!--header-->
<div class="contents">
<a href="gemmlowp_8cl.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017-2022 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="gemm__helpers_8h.xhtml">gemm_helpers.h</a>&quot;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="helpers__asymm_8h.xhtml">helpers_asymm.h</a>&quot;</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="repeat_8h.xhtml">repeat.h</a>&quot;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="tile__helpers_8h.xhtml">tile_helpers.h</a>&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160; </div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#if defined(DATA_TYPE) &amp;&amp; defined(ACC_DATA_TYPE)</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160; </div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#if defined(ARM_COMPUTE_OPENCL_DOT8_ENABLED) &amp;&amp; defined(cl_arm_integer_dot_product_int8)</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#if defined(ARM_COMPUTE_OPENCL_DOT8_ACC_ENABLED) &amp;&amp; defined(cl_arm_integer_dot_product_accumulate_int8)</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#define ARM_DOT(x, y, val) val = arm_dot_acc((x), (y), (val));</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#else // defined(ARM_COMPUTE_OPENCL_DOT8_ACC_ENABLED) &amp;&amp; defined(cl_arm_integer_dot_product_accumulate_int8)</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#define ARM_DOT(x, y, val) val += arm_dot((x), (y));</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#endif // defined(ARM_COMPUTE_OPENCL_DOT8_ACC_ENABLED) &amp;&amp; defined(cl_arm_integer_dot_product_accumulate_int8)</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#endif // defined(ARM_COMPUTE_OPENCL_DOT8_ENABLED) &amp;&amp; defined(cl_arm_integer_dot_product_int8)</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160; </div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#if defined(ARM_COMPUTE_OPENCL_DOT8_ENABLED) &amp;&amp; defined(cl_arm_integer_dot_product_int8)</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160; </div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor">#define ARM_DOT1(a, b, c)                                                                                                                               \</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor">    ({                                                                                                                                                  \</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor">        ARM_DOT((VEC_DATA_TYPE(DATA_TYPE, 4))(a, (VEC_DATA_TYPE(DATA_TYPE, 3))0), (VEC_DATA_TYPE(DATA_TYPE, 4))(b, (VEC_DATA_TYPE(DATA_TYPE, 3))0), c); \</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor">#define ARM_DOT2(a, b, c)                                                                                                                               \</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="preprocessor">    ({                                                                                                                                                  \</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="preprocessor">        ARM_DOT((VEC_DATA_TYPE(DATA_TYPE, 4))(a, (VEC_DATA_TYPE(DATA_TYPE, 2))0), (VEC_DATA_TYPE(DATA_TYPE, 4))(b, (VEC_DATA_TYPE(DATA_TYPE, 2))0), c); \</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="preprocessor">#define ARM_DOT3(a, b, c)                                                                                           \</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="preprocessor">    ({                                                                                                              \</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="preprocessor">        ARM_DOT((VEC_DATA_TYPE(DATA_TYPE, 4))(a, (DATA_TYPE)0), (VEC_DATA_TYPE(DATA_TYPE, 4))(b, (DATA_TYPE)0), c); \</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="preprocessor">#define ARM_DOT4(a, b, c) \</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="preprocessor">    ({                    \</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="preprocessor">        ARM_DOT(a, b, c); \</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="preprocessor">#define ARM_DOT8(a, b, c)            \</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="preprocessor">    ({                               \</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="preprocessor">        ARM_DOT4((a.lo), (b.lo), c); \</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="preprocessor">        ARM_DOT4((a.hi), (b.hi), c); \</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="preprocessor">#define ARM_DOT16(a, b, c)           \</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="preprocessor">    ({                               \</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="preprocessor">        ARM_DOT8((a.lo), (b.lo), c); \</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="preprocessor">        ARM_DOT8((a.hi), (b.hi), c); \</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160; </div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="preprocessor">#else // defined(ARM_COMPUTE_OPENCL_DOT8_ENABLED) &amp;&amp; defined(cl_arm_integer_dot_product_int8)</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment">/** Specialized macros to perform the dot product instruction between two vectors of size K0 [1,16] without using the dot8 instruction. */</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="preprocessor">#define ARM_DOT1(a, b, c)          \</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="preprocessor">    ({                             \</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="preprocessor">        c += (ACC_DATA_TYPE)a * b; \</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="preprocessor">#define ARM_DOT2(a, b, c)                \</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="preprocessor">    ({                                   \</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="preprocessor">        c += (ACC_DATA_TYPE)a.s0 * b.s0; \</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="preprocessor">        c += (ACC_DATA_TYPE)a.s1 * b.s1; \</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="preprocessor">#define ARM_DOT3(a, b, c)                \</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="preprocessor">    ({                                   \</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="preprocessor">        ARM_DOT2(a, b, c);               \</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="preprocessor">        c += (ACC_DATA_TYPE)a.s2 * b.s2; \</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="preprocessor">#define ARM_DOT4(a, b, c)                \</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="preprocessor">    ({                                   \</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="preprocessor">        ARM_DOT3(a, b, c);               \</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="preprocessor">        c += (ACC_DATA_TYPE)a.s3 * b.s3; \</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="preprocessor">#define ARM_DOT8(a, b, c)            \</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="preprocessor">    ({                               \</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="preprocessor">        ARM_DOT4((a.lo), (b.lo), c); \</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="preprocessor">        ARM_DOT4((a.hi), (b.hi), c); \</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="preprocessor">#define ARM_DOT16(a, b, c)           \</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="preprocessor">    ({                               \</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="preprocessor">        ARM_DOT8((a.lo), (b.lo), c); \</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="preprocessor">        ARM_DOT8((a.hi), (b.hi), c); \</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="preprocessor">#endif // defined(ARM_COMPUTE_OPENCL_DOT8_ENABLED) &amp;&amp; defined(cl_arm_integer_dot_product_int8)</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment">/** Specialized macros to perform a broadcast dot product operation between one vector &quot;a&quot; and N0 vectors &quot;b&quot; of size K0 [1,16] */</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="preprocessor">#define ARM_DOT_K0X1(k0, a, b, c)         \</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="preprocessor">    ({                                    \</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="preprocessor">        ARM_DOT_K0(k0, (a), (b##0), (c)); \</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="preprocessor">#define ARM_DOT_K0X2(k0, a, b, c)            \</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="preprocessor">    ({                                       \</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="preprocessor">        ARM_DOT_K0(k0, (a), (b##0), (c.s0)); \</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="preprocessor">        ARM_DOT_K0(k0, (a), (b##1), (c.s1)); \</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="preprocessor">#define ARM_DOT_K0X3(k0, a, b, c)            \</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="preprocessor">    ({                                       \</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="preprocessor">        ARM_DOT_K0X2(k0, a, b, c);           \</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="preprocessor">        ARM_DOT_K0(k0, (a), (b##2), (c.s2)); \</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="preprocessor">#define ARM_DOT_K0X4(k0, a, b, c)            \</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="preprocessor">    ({                                       \</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="preprocessor">        ARM_DOT_K0X3(k0, a, b, c);           \</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="preprocessor">        ARM_DOT_K0(k0, (a), (b##3), (c.s3)); \</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="preprocessor">#define ARM_DOT_K0X8(k0, a, b, c)            \</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="preprocessor">    ({                                       \</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="preprocessor">        ARM_DOT_K0X4(k0, a, b, c);           \</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="preprocessor">        ARM_DOT_K0(k0, (a), (b##4), (c.s4)); \</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="preprocessor">        ARM_DOT_K0(k0, (a), (b##5), (c.s5)); \</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="preprocessor">        ARM_DOT_K0(k0, (a), (b##6), (c.s6)); \</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="preprocessor">        ARM_DOT_K0(k0, (a), (b##7), (c.s7)); \</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="preprocessor">#define ARM_DOT_K0X16(k0, a, b, c)           \</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="preprocessor">    ({                                       \</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="preprocessor">        ARM_DOT_K0X8(k0, a, b, c);           \</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="preprocessor">        ARM_DOT_K0(k0, (a), (b##8), (c.s8)); \</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="preprocessor">        ARM_DOT_K0(k0, (a), (b##9), (c.s9)); \</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="preprocessor">        ARM_DOT_K0(k0, (a), (b##A), (c.sA)); \</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="preprocessor">        ARM_DOT_K0(k0, (a), (b##B), (c.sB)); \</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="preprocessor">        ARM_DOT_K0(k0, (a), (b##C), (c.sC)); \</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="preprocessor">        ARM_DOT_K0(k0, (a), (b##D), (c.sD)); \</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="preprocessor">        ARM_DOT_K0(k0, (a), (b##E), (c.sE)); \</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="preprocessor">        ARM_DOT_K0(k0, (a), (b##F), (c.sF)); \</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment">/** Specialized macros to perform a partial matrix multiplication with dimensions M0,N0,K0 */</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="preprocessor">#define ARM_MM_K0XN0X1(n0, k0, a, b, c)           \</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="preprocessor">    ({                                            \</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="preprocessor">        ARM_DOT_K0XN0(n0, k0, (a##0), b, (c##0)); \</span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="preprocessor">#define ARM_MM_K0XN0X2(n0, k0, a, b, c)           \</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="preprocessor">    ({                                            \</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="preprocessor">        ARM_MM_K0XN0X1(n0, k0, a, b, c);          \</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="preprocessor">        ARM_DOT_K0XN0(n0, k0, (a##1), b, (c##1)); \</span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="preprocessor">#define ARM_MM_K0XN0X3(n0, k0, a, b, c)           \</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="preprocessor">    ({                                            \</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="preprocessor">        ARM_MM_K0XN0X2(n0, k0, a, b, c);          \</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="preprocessor">        ARM_DOT_K0XN0(n0, k0, (a##2), b, (c##2)); \</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="preprocessor">#define ARM_MM_K0XN0X4(n0, k0, a, b, c)           \</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="preprocessor">    ({                                            \</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="preprocessor">        ARM_MM_K0XN0X3(n0, k0, a, b, c);          \</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="preprocessor">        ARM_DOT_K0XN0(n0, k0, (a##3), b, (c##3)); \</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="preprocessor">#define ARM_MM_K0XN0X5(n0, k0, a, b, c)           \</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="preprocessor">    ({                                            \</span></div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="preprocessor">        ARM_MM_K0XN0X4(n0, k0, a, b, c);          \</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="preprocessor">        ARM_DOT_K0XN0(n0, k0, (a##4), b, (c##4)); \</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="preprocessor">#define ARM_MM_K0XN0X6(n0, k0, a, b, c)           \</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="preprocessor">    ({                                            \</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="preprocessor">        ARM_MM_K0XN0X5(n0, k0, a, b, c);          \</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="preprocessor">        ARM_DOT_K0XN0(n0, k0, (a##5), b, (c##5)); \</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="preprocessor">#define ARM_MM_K0XN0X7(n0, k0, a, b, c)           \</span></div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="preprocessor">    ({                                            \</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="preprocessor">        ARM_MM_K0XN0X6(n0, k0, a, b, c);          \</span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="preprocessor">        ARM_DOT_K0XN0(n0, k0, (a##6), b, (c##6)); \</span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="preprocessor">#define ARM_MM_K0XN0X8(n0, k0, a, b, c)           \</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="preprocessor">    ({                                            \</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="preprocessor">        ARM_MM_K0XN0X7(n0, k0, a, b, c);          \</span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="preprocessor">        ARM_DOT_K0XN0(n0, k0, (a##7), b, (c##7)); \</span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160; </div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="preprocessor">#define ARM_DOT_K0(k0, a, b, c) \</span></div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="preprocessor">    ({                          \</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="preprocessor">        CONCAT(ARM_DOT, k0)     \</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="preprocessor">        ((a), (b), (c));        \</span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160; </div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="preprocessor">#define ARM_DOT_K0XN0(n0, k0, a, b, c) \</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="preprocessor">    ({                                 \</span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="preprocessor">        CONCAT(ARM_DOT_K0X, n0)        \</span></div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="preprocessor">        (k0, (a), b, (c));             \</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160; </div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="preprocessor">#define ARM_MM_K0XN0XM0(m0, n0, k0, a, b, c) \</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="preprocessor">    ({                                       \</span></div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="preprocessor">        CONCAT(ARM_MM_K0XN0X, m0)            \</span></div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="preprocessor">        (n0, k0, a, b, c);                   \</span></div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="comment">/** Specialized macros to perform a broadcast dot product operation between one vector &quot;a&quot; and N0 vectors &quot;b&quot; of size K0 [1,16] */</span></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="preprocessor">#define ARM_MUL_N0X1(VECTOR_ACC_TYPE, a, b, c)   \</span></div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="preprocessor">    ({                                           \</span></div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="preprocessor">        c += CONVERT(b##0, VECTOR_ACC_TYPE) * a; \</span></div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="preprocessor">#define ARM_MUL_N0X2(VECTOR_ACC_TYPE, a, b, c)        \</span></div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="preprocessor">    ({                                                \</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="preprocessor">        c += CONVERT(b##0, VECTOR_ACC_TYPE) * a.s##0; \</span></div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="preprocessor">        c += CONVERT(b##1, VECTOR_ACC_TYPE) * a.s##1; \</span></div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="preprocessor">#define ARM_MUL_N0X3(VECTOR_ACC_TYPE, a, b, c)        \</span></div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="preprocessor">    ({                                                \</span></div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="preprocessor">        ARM_MUL_N0X2(VECTOR_ACC_TYPE, a, b, c);       \</span></div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="preprocessor">        c += CONVERT(b##2, VECTOR_ACC_TYPE) * a.s##2; \</span></div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="preprocessor">#define ARM_MUL_N0X4(VECTOR_ACC_TYPE, a, b, c)        \</span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="preprocessor">    ({                                                \</span></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="preprocessor">        ARM_MUL_N0X3(VECTOR_ACC_TYPE, a, b, c);       \</span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="preprocessor">        c += CONVERT(b##3, VECTOR_ACC_TYPE) * a.s##3; \</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="preprocessor">#define ARM_MUL_N0X8(VECTOR_ACC_TYPE, a, b, c)        \</span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="preprocessor">    ({                                                \</span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="preprocessor">        ARM_MUL_N0X4(VECTOR_ACC_TYPE, a, b, c);       \</span></div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="preprocessor">        c += CONVERT(b##4, VECTOR_ACC_TYPE) * a.s##4; \</span></div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="preprocessor">        c += CONVERT(b##5, VECTOR_ACC_TYPE) * a.s##5; \</span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="preprocessor">        c += CONVERT(b##6, VECTOR_ACC_TYPE) * a.s##6; \</span></div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="preprocessor">        c += CONVERT(b##7, VECTOR_ACC_TYPE) * a.s##7; \</span></div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="preprocessor">#define ARM_MUL_N0X16(VECTOR_ACC_TYPE, a, b, c)       \</span></div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="preprocessor">    ({                                                \</span></div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="preprocessor">        ARM_MUL_N0X8(VECTOR_ACC_TYPE, a, b, c);       \</span></div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="preprocessor">        c += CONVERT(b##8, VECTOR_ACC_TYPE) * a.s##8; \</span></div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="preprocessor">        c += CONVERT(b##9, VECTOR_ACC_TYPE) * a.s##9; \</span></div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="preprocessor">        c += CONVERT(b##A, VECTOR_ACC_TYPE) * a.s##A; \</span></div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="preprocessor">        c += CONVERT(b##B, VECTOR_ACC_TYPE) * a.s##B; \</span></div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="preprocessor">        c += CONVERT(b##C, VECTOR_ACC_TYPE) * a.s##C; \</span></div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="preprocessor">        c += CONVERT(b##D, VECTOR_ACC_TYPE) * a.s##D; \</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="preprocessor">        c += CONVERT(b##E, VECTOR_ACC_TYPE) * a.s##E; \</span></div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="preprocessor">        c += CONVERT(b##F, VECTOR_ACC_TYPE) * a.s##F; \</span></div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="comment">/** Specialized macros to perform a a partial matrix multiplication with dimensions M0,N0,K0 */</span></div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="preprocessor">#define ARM_MM_NATIVE_N0XK0X1(VECTOR_ACC_TYPE, k0, a, b, c)    \</span></div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="preprocessor">    ({                                                         \</span></div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="preprocessor">        ARM_MUL_N0XK0(VECTOR_ACC_TYPE, k0, (a##0), b, (c##0)); \</span></div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="preprocessor">#define ARM_MM_NATIVE_N0XK0X2(VECTOR_ACC_TYPE, k0, a, b, c)    \</span></div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="preprocessor">    ({                                                         \</span></div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="preprocessor">        ARM_MM_NATIVE_N0XK0X1(VECTOR_ACC_TYPE, k0, a, b, c);   \</span></div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="preprocessor">        ARM_MUL_N0XK0(VECTOR_ACC_TYPE, k0, (a##1), b, (c##1)); \</span></div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="preprocessor">#define ARM_MM_NATIVE_N0XK0X3(VECTOR_ACC_TYPE, k0, a, b, c)    \</span></div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="preprocessor">    ({                                                         \</span></div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="preprocessor">        ARM_MM_NATIVE_N0XK0X2(VECTOR_ACC_TYPE, k0, a, b, c);   \</span></div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="preprocessor">        ARM_MUL_N0XK0(VECTOR_ACC_TYPE, k0, (a##2), b, (c##2)); \</span></div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="preprocessor">#define ARM_MM_NATIVE_N0XK0X4(VECTOR_ACC_TYPE, k0, a, b, c)    \</span></div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="preprocessor">    ({                                                         \</span></div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="preprocessor">        ARM_MM_NATIVE_N0XK0X3(VECTOR_ACC_TYPE, k0, a, b, c);   \</span></div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="preprocessor">        ARM_MUL_N0XK0(VECTOR_ACC_TYPE, k0, (a##3), b, (c##3)); \</span></div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="preprocessor">#define ARM_MM_NATIVE_N0XK0X5(VECTOR_ACC_TYPE, k0, a, b, c)    \</span></div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="preprocessor">    ({                                                         \</span></div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="preprocessor">        ARM_MM_NATIVE_N0XK0X4(VECTOR_ACC_TYPE, k0, a, b, c);   \</span></div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="preprocessor">        ARM_MUL_N0XK0(VECTOR_ACC_TYPE, k0, (a##4), b, (c##4)); \</span></div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="preprocessor">#define ARM_MM_NATIVE_N0XK0X6(VECTOR_ACC_TYPE, k0, a, b, c)    \</span></div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="preprocessor">    ({                                                         \</span></div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="preprocessor">        ARM_MM_NATIVE_N0XK0X5(VECTOR_ACC_TYPE, k0, a, b, c);   \</span></div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="preprocessor">        ARM_MUL_N0XK0(VECTOR_ACC_TYPE, k0, (a##5), b, (c##5)); \</span></div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="preprocessor">#define ARM_MM_NATIVE_N0XK0X7(VECTOR_ACC_TYPE, k0, a, b, c)    \</span></div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="preprocessor">    ({                                                         \</span></div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="preprocessor">        ARM_MM_NATIVE_N0XK0X6(VECTOR_ACC_TYPE, k0, a, b, c);   \</span></div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="preprocessor">        ARM_MUL_N0XK0(VECTOR_ACC_TYPE, k0, (a##6), b, (c##6)); \</span></div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="preprocessor">#define ARM_MM_NATIVE_N0XK0X8(VECTOR_ACC_TYPE, k0, a, b, c)    \</span></div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="preprocessor">    ({                                                         \</span></div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="preprocessor">        ARM_MM_NATIVE_N0XK0X7(VECTOR_ACC_TYPE, k0, a, b, c);   \</span></div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="preprocessor">        ARM_MUL_N0XK0(VECTOR_ACC_TYPE, k0, (a##7), b, (c##7)); \</span></div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="preprocessor">#define ARM_MUL_N0XK0(VECTOR_ACC_TYPE, k0, a, b, c) \</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="preprocessor">    ({                                              \</span></div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="preprocessor">        CONCAT(ARM_MUL_N0X, k0)                     \</span></div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="preprocessor">        (VECTOR_ACC_TYPE, (a), b, (c));             \</span></div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="preprocessor">#define ARM_MM_NATIVE_N0XK0XM0(VECTOR_ACC_TYPE, m0, k0, a, b, c) \</span></div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="preprocessor">    ({                                                           \</span></div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="preprocessor">        CONCAT(ARM_MM_NATIVE_N0XK0X, m0)                         \</span></div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="preprocessor">        (VECTOR_ACC_TYPE, k0, a, b, c);                          \</span></div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160; </div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="preprocessor">#if defined(GEMMLOWP_MM_RESHAPED_LHS_NT_RHS_T)</span></div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="comment">/** This OpenCL kernel computes the matrix multiplication between 2 matrices with QASYMM/QASYMM_SIGNED data type.</span></div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="comment"> *  The LHS matrix must be reshaped with @ref CLGEMMReshapeLHSMatrixKernel and the M0xK0 must be NOT transposed</span></div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;<span class="comment"> *  The RHS matrix must be reshaped with @ref CLGEMMReshapeRHSMatrixKernel and the K0xN0 must be transposed</span></div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="comment"> * @note The input data type must be passed at compile time using -DDATA_TYPE (i.e. -DDATA_TYPE=uchar)</span></div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;<span class="comment"> * @note The accumulator data type must be passed at compile time using -DACC_DATA_TYPE (i.e. -DACC_DATA_TYPE=uint)</span></div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;<span class="comment"> * @note If the first two dimensions of NDRange have been dispatched with &quot;dummy_work_items&quot; support, the option -DDUMMY_WORK_ITEMS must be passed at compile time.</span></div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;<span class="comment"> * @note The GEMM&#39;s dimensions M and N must be passed at compile time using -DM and -DN (i.e. -DM=52 and -DN=90).</span></div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="comment"> * @note The block&#39;s dimensions used for reshaping the LHS matrix and the RHS matrix (M0, N0 and K0) must be passed at compile time using -DM0, -DN0 and -DK0 (i.e. -DM0=4, -DN0=8, -DK0=4).</span></div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="comment"> * @note The number of M0xK0 vertical blocks stored on the same output row of the reshaped LHS matrix must be passed at compile time using -DV0 (i.e. -DV0=2)</span></div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;<span class="comment"> * @note The number of K0xN0 horizontal blocks stored on the same output row of the reshaped RHS matrix must be passed at compile time using -DH0 (i.e. -DH0=2)</span></div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="comment"> * @note If the M0xK0 blocks in the reshaped LHS matrix have been interleaved, the option -DLHS_INTERLEAVE must passed at compile time.</span></div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<span class="comment"> * @note If the K0xN0 blocks in the reshaped RHS matrix have been interleaved, the option -DRHS_INTERLEAVE must passed at compile time.</span></div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="comment"> * @note Only the following configurations of M0, N0 and K0 are currently supported:</span></div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="comment"> *  - M0 = 2, 3, 4, 5, 6, 7, 8</span></div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="comment"> *  - N0 = 2, 3, 4, 8, 16</span></div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="comment"> *  - K0 = 2, 3, 4, 8, 16</span></div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;<span class="comment"> *  - V0 &gt;= 1</span></div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="comment"> *  - H0 &gt;= 1</span></div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="comment"> * @note In case the output has to be reinterpreted as a 3D tensor (i.e. output of convolution layer), the following information must be passed at compile time:</span></div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="comment"> *       -# REINTERPRET_OUTPUT_AS_3D: To reinterpret the output as 3D</span></div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="comment"> *       -# HEIGHT_GEMM3D: The height of the output in case it has to be reinterpreted as a 3D tensor.</span></div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;<span class="comment"> *       -# DEPTH_GEMM3D: The depth of the output in case it has to be reinterpreted as a 3D tensor</span></div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;<span class="comment"> *          (HEIGHT_GEMM3D * DEPTH_GEMM3D) = columns LHS matrix NOT reshaped</span></div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;<span class="comment"> * @param[in]  lhs_ptr                           Pointer to the LHS reshaped matrix. Supported data type: QASYMM8/QASYMM_SIGNED</span></div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="comment"> * @param[in]  lhs_stride_x                      Stride of the LHS reshaped matrix in X dimension (in bytes)</span></div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;<span class="comment"> * @param[in]  lhs_step_x                        src_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<span class="comment"> * @param[in]  lhs_stride_y                      Stride of the LHS reshaped matrix in Y dimension (in bytes)</span></div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;<span class="comment"> * @param[in]  lhs_step_y                        src_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;<span class="comment"> * @param[in]  lhs_offset_first_element_in_bytes The offset of the first element in the LHS reshaped matrix</span></div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;<span class="comment"> * @param[in]  rhs_ptr                           Pointer to the RHS reshaped matrix. Supported data type: same as @p lhs_ptr</span></div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;<span class="comment"> * @param[in]  rhs_stride_x                      Stride of the RHS reshaped matrix in X dimension (in bytes)</span></div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="comment"> * @param[in]  rhs_step_x                        src_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="comment"> * @param[in]  rhs_stride_y                      Stride of the RHS reshaped matrix in Y dimension (in bytes)</span></div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="comment"> * @param[in]  rhs_step_y                        src_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="comment"> * @param[in]  rhs_offset_first_element_in_bytes The offset of the first element in the RHS reshaped matrix</span></div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;<span class="comment"> * @param[out] dst_ptr                           Pointer to the destination matrix Supported data type: S32</span></div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;<span class="comment"> * @param[in]  dst_stride_x                      Stride of the destination matrix in X dimension (in bytes)</span></div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;<span class="comment"> * @param[in]  dst_step_x                        dst_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;<span class="comment"> * @param[in]  dst_stride_y                      Stride of the destination matrix in Y dimension (in bytes)</span></div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;<span class="comment"> * @param[in]  dst_step_y                        dst_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;<span class="comment"> * @param[in]  dst_offset_first_element_in_bytes The offset of the first element in the destination matrix</span></div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;<span class="comment"> * @param[in]  k                                 Number of columns in LHS matrix and rows in RHS matrix not reshaped.</span></div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;<span class="comment"> * @param[in]  lhs_stride_z                      Stride of the LHS reshaped matrix in Z dimension (in bytes)</span></div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;<span class="comment"> * @param[in]  rhs_stride_z                      Stride of the RHS reshaped matrix in Z dimension (in bytes)</span></div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;<span class="comment"> * @param[in]  dst_stride_z                      Stride of the destination tensor in Z dimension (in bytes)</span></div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;<span class="comment"> * @param[in]  dst_cross_plane_pad               (Optional) Bottom paddings in unit of elements (only if defined REINTERPRET_OUTPUT_AS_3D)</span></div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;__kernel <span class="keywordtype">void</span> gemmlowp_mm_reshaped_lhs_nt_rhs_t(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(lhs),</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                                                <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(rhs),</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                                                <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>),</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                                                uint k,</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                                                uint lhs_stride_z,</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                                                uint rhs_stride_z,</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                                                uint dst_stride_z</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;#<span class="keywordflow">if</span> defined(REINTERPRET_OUTPUT_AS_3D)</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                                                ,</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                                                uint dst_cross_plane_pad</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;#endif <span class="comment">// REINTERPRET_OUTPUT_AS_3D</span></div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                                               )</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;{</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    <span class="comment">// Block size</span></div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;<span class="preprocessor">#define LHS_BLOCK_SIZE ((K0) * (M0))</span></div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160; </div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;<span class="preprocessor">#if defined(LHS_INTERLEAVE)</span></div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;<span class="preprocessor">#define LHS_OFFSET_X (K0)</span></div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;<span class="preprocessor">#define LHS_STEP_X ((K0) * (V0))</span></div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;<span class="preprocessor">#define LHS_STEP_LOOP (1)</span></div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;<span class="preprocessor">#else // defined(INTERLEAVE)</span></div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;<span class="preprocessor">#define LHS_OFFSET_X (LHS_BLOCK_SIZE)</span></div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;<span class="preprocessor">#define LHS_STEP_X (K0)</span></div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;<span class="preprocessor">#define LHS_STEP_LOOP (V0)</span></div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;<span class="preprocessor">#endif // defined(INTERLEAVE)</span></div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160; </div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    <span class="comment">// Block size</span></div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;<span class="preprocessor">#define RHS_BLOCK_SIZE ((K0) * (N0))</span></div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160; </div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    <span class="comment">// RHS offset and step X</span></div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;<span class="preprocessor">#if defined(RHS_INTERLEAVE)</span></div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;<span class="preprocessor">#define RHS_OFFSET_X (K0)</span></div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;<span class="preprocessor">#define RHS_STEP_X ((K0) * (H0))</span></div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;<span class="preprocessor">#define RHS_STEP_LOOP (1)</span></div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;<span class="preprocessor">#else // defined(RHS_INTERLEAVE)</span></div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;<span class="preprocessor">#define RHS_OFFSET_X (RHS_BLOCK_SIZE)</span></div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;<span class="preprocessor">#define RHS_STEP_X (K0)</span></div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;<span class="preprocessor">#define RHS_STEP_LOOP (H0)</span></div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;<span class="preprocessor">#endif // defined(RHS_INTERLEAVE)</span></div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160; </div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    uint x = get_global_id(0);</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    uint y = get_global_id(1);</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    uint z = get_global_id(2);</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160; </div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;<span class="preprocessor">#if defined(DUMMY_WORK_ITEMS)</span></div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    <span class="keywordflow">if</span>((x * N0 &gt;= <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ae8b170dcb376fe60270f4675f84e4477">N</a>) || (y * M0 &gt;= <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a68dc0bf731afd0463b8e8cc4ed81c0f8">M</a>))</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    {</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    }</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;<span class="preprocessor">#endif // defined(DUMMY_WORK_ITEMS)</span></div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160; </div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    <span class="comment">// Compute LHS matrix address</span></div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    __global DATA_TYPE *lhs_addr = (__global DATA_TYPE *)(lhs_ptr + lhs_offset_first_element_in_bytes + (y % V0) * (uint)LHS_OFFSET_X + (y / V0) * (uint)lhs_stride_y + (z * lhs_stride_z));</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160; </div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    <span class="comment">// Compute RHS matrix address</span></div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    __global DATA_TYPE *rhs_addr = (__global DATA_TYPE *)(rhs_ptr + rhs_offset_first_element_in_bytes + (x % H0) * (uint)RHS_OFFSET_X + (x / (uint)H0) * rhs_stride_y);</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160; </div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;<span class="preprocessor">#if defined(MATRIX_B_DEPTH)</span></div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    <span class="comment">// Do not slide matrix B if the matrix B has 3 dimensions and matrix A more than 3</span></div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    rhs_addr += (z % MATRIX_B_DEPTH) * rhs_stride_z;</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;<span class="preprocessor">#else  // defined(MATRIX_B_DEPTH)</span></div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    rhs_addr += z * rhs_stride_z;</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;<span class="preprocessor">#endif // defined(MATRIX_B_DEPTH)</span></div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160; </div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    <a class="code" href="repeat_8h.xhtml#a4a61a8df72f9bc1b1dcc4cc4ec6ac3b9">REPEAT_VAR_INIT_TO_CONST</a>(8, uint, zlhs, 0); <span class="comment">//uint zout0=0,zout1=0,zout2=0,... zout7=0;</span></div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    <a class="code" href="repeat_8h.xhtml#a4a61a8df72f9bc1b1dcc4cc4ec6ac3b9">REPEAT_VAR_INIT_TO_CONST</a>(16, uint, zrhs, 0);</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160; </div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    <span class="comment">// Initialize the accumulators</span></div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    <a class="code" href="repeat_8h.xhtml#a4a61a8df72f9bc1b1dcc4cc4ec6ac3b9">REPEAT_VAR_INIT_TO_CONST</a>(M0, <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(ACC_DATA_TYPE, N0), c, 0); <span class="comment">//VEC_DATA_TYPE(ACC_DATA_TYPE, N0)    c0=0,c1=0,c2=0,... c(M0-1)=0;</span></div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160; </div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; k; i += K0)</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    {</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;        <span class="comment">// Load values from LHS matrix</span></div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;        <a class="code" href="gemm__helpers_8h.xhtml#a9fe7ded27e552f48fa285d34fb00427d">LOAD_BLOCK</a>(M0, K0, DATA_TYPE, a, lhs_addr, 0, LHS_STEP_X, zlhs);</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160; </div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;        <span class="comment">// Load values from RHS matrix</span></div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;        <a class="code" href="gemm__helpers_8h.xhtml#a9fe7ded27e552f48fa285d34fb00427d">LOAD_BLOCK</a>(N0, K0, DATA_TYPE, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, rhs_addr, 0, RHS_STEP_X, zrhs);</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160; </div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;        <span class="comment">// Partial matrix multiplication M0,N0,K0</span></div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;        ARM_MM_K0XN0XM0(M0, N0, K0, a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, c);</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160; </div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;        <span class="comment">// Update address</span></div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;        lhs_addr += (M0 * LHS_STEP_X * LHS_STEP_LOOP);</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;        rhs_addr += (N0 * RHS_STEP_X * RHS_STEP_LOOP);</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    }</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160; </div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    __global uchar *dst_addr = dst_ptr + dst_offset_first_element_in_bytes + (x * (uint)N0 * <span class="keyword">sizeof</span>(<span class="keywordtype">int</span>)) + (y * (uint)M0 * dst_stride_y);</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160; </div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    <a class="code" href="repeat_8h.xhtml#a4a61a8df72f9bc1b1dcc4cc4ec6ac3b9">REPEAT_VAR_INIT_TO_CONST</a>(8, uint, zout, 0); <span class="comment">//uint zout0=0,zout1=0,zout2=0,... zout7=0;</span></div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160; </div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;<span class="preprocessor">#if defined(REINTERPRET_OUTPUT_AS_3D)</span></div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    <span class="comment">// The plane (zout) is calculated dividing M (y * M0) by HEIGHT_GEMM3D</span></div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    <a class="code" href="gemm__helpers_8h.xhtml#ade58486d6b2d13d7941106a9d2ec86d3">CALCULATE_Z_OFFSET</a>(M0, uint, zout, y * M0, HEIGHT_GEMM3D, DEPTH_GEMM3D, dst_cross_plane_pad, dst_stride_y);</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160; </div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    <span class="comment">// Add offset for batched GEMM. The batches will be in the fourth dimension and for this reason we</span></div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    <span class="comment">// multiply dst_stride_z by DEPTH_GEMM3D</span></div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    dst_addr += z * dst_stride_z * DEPTH_GEMM3D;</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160; </div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;<span class="preprocessor">#else // defined(REINTERPRET_OUTPUT_AS_3D)</span></div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160; </div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    <span class="comment">// Add offset for batched GEMM</span></div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    dst_addr += z * dst_stride_z;</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160; </div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;<span class="preprocessor">#endif // defined(REINTERPRET_OUTPUT_AS_3D)</span></div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160; </div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    <span class="comment">// Convert and store output block</span></div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> cond_y = ((get_global_id(1) + 1) * M0 &gt;= <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a68dc0bf731afd0463b8e8cc4ed81c0f8">M</a>);</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> cond_x = ((get_global_id(0) + 1) * N0 &gt;= <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ae8b170dcb376fe60270f4675f84e4477">N</a>);</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160; </div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    <span class="comment">// Store output block</span></div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    <a class="code" href="repeat_8h.xhtml#a14853d375c486c36ccec84906086ffb9">REPEAT_VAR_INIT_CONVERT_SAT</a>(M0, <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<span class="keywordtype">int</span>, N0), c, c_lp);</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    STORE_BLOCK_BOUNDARY_AWARE(M0, N0, <span class="keywordtype">int</span>, c_lp, dst_addr, dst_stride_y, zout, <a class="code" href="transpose_8cl.xhtml#a202537333048b910de7fc7ad58567200">PARTIAL_STORE_M0</a>, <a class="code" href="transpose_8cl.xhtml#a384384e4aff4a5ab95d1e0f9e3808924">PARTIAL_STORE_N0</a>, cond_y, cond_x);</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160; </div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;<span class="preprocessor">#undef LHS_BLOCK_SIZE</span></div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;<span class="preprocessor">#undef LHS_OFFSET_X</span></div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;<span class="preprocessor">#undef LHS_STEP_X</span></div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;<span class="preprocessor">#undef RHS_BLOCK_SIZE</span></div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;<span class="preprocessor">#undef RHS_OFFSET_X</span></div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;<span class="preprocessor">#undef RHS_STEP_X</span></div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;}</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;<span class="preprocessor">#endif // defined(GEMMLOWP_MM_RESHAPED_LHS_NT_RHS_T)</span></div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160; </div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;<span class="preprocessor">#if defined(GEMMLOWP_MM_RESHAPED_ONLY_RHS_T_FUSED_OUTPUT_STAGE_FIXEDPOINT) || defined(GEMMLOWP_MM_RESHAPED_ONLY_RHS_T)</span></div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;<span class="preprocessor">#if defined(RESULT_OFFSET) &amp;&amp; defined(RESULT_MULTIPLIER) &amp;&amp; defined(RESULT_SHIFT)</span></div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;<span class="preprocessor">#define FUSED_OUTPUT_STAGE_FIXED_POINT</span></div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;<span class="preprocessor">#endif // defined(RESULT_OFFSET) &amp;&amp; defined(RESULT_MULTIPLIER) &amp;&amp; defined(RESULT_SHIFT)</span></div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;<span class="comment">/** This OpenCL kernel computes the matrix multiplication between 2 matrices with fused output stage using fixed-point arithmetic.</span></div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;<span class="comment"> *  The LHS matrix is NOT reshaped</span></div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;<span class="comment"> *  The RHS matrix is reshaped with @ref CLGEMMReshapeRHSMatrixKernel and the block K0xN0 is transposed</span></div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;<span class="comment"> * @note The input data type must be passed at compile time using -DDATA_TYPE (i.e. -DDATA_TYPE=uchar)</span></div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;<span class="comment"> * @note The accumulator data type must be passed at compile time using -DACC_DATA_TYPE (i.e. -DACC_DATA_TYPE=uint)</span></div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;<span class="comment"> * @note The number of columns of LHS matrix must be passed at compile time using -DK (i.e. -DK=64)</span></div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;<span class="comment"> * @note The block&#39;s dimensions used for reshaping the RHS matrix (N0 and K0) must be passed at compile time using -DN0 and -DK0 (i.e. -DN0=8, -DK0=4).</span></div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;<span class="comment"> * @note The number of M0 rows to process must be passed at compile time using -DM0 (i.e. -DM0=2)</span></div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;<span class="comment"> * @note The number of K0xN0 horizontal blocks stored on the same output row of the reshaped RHS matrix must be passed at compile time using -DH0 (i.e. -DH0=2)</span></div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;<span class="comment"> * @note If the K0xN0 blocks in the reshaped RHS matrix have been interleaved, the option -DRHS_INTERLEAVE must passed at compile time.</span></div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;<span class="comment"> * @note Only the following configurations of M0, N0 and K0 are currently supported:</span></div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;<span class="comment"> *  - M0 = 1, 2, 3, 4, 5, 6, 7, 8</span></div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;<span class="comment"> *  - N0 = 2, 3, 4, 8, 16</span></div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;<span class="comment"> *  - K0 = 2, 3, 4, 8, 16</span></div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;<span class="comment"> *  - H0 &gt;= 1</span></div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;<span class="comment"> * @note In case the input or output have to be reinterpreted as a 3D tensor, the following information must be passed at compile time:</span></div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;<span class="comment"> *       -# REINTERPRET_INPUT_AS_3D: To reinterpret the input as 3D</span></div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;<span class="comment"> *       -# REINTERPRET_OUTPUT_AS_3D: To reinterpret the output as 3D</span></div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;<span class="comment"> *       -# HEIGHT_GEMM3D: The height of the output in case it has to be reinterpreted as a 3D tensor.</span></div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;<span class="comment"> *       -# DEPTH_GEMM3D: The depth of the output in case it has to be reinterpreted as a 3D tensor</span></div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;<span class="comment"> *          (HEIGHT_GEMM3D * DEPTH_GEMM3D) = columns LHS matrix</span></div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;<span class="comment"> * @note The offset, scalar scale factor and number of bits to shift right of output tensor must be passed at compile time using -DRESULT_OFFSET, -RESULT_MULTIPLIER and -DRESULT_SHIFT</span></div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;<span class="comment"> * @note In case the addition of int32 biases is required, -DADD_BIAS should be passed at compile time</span></div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;<span class="comment"> * @note The output datatype should be passed at compile time using -DOUTPUT_DATA_TYPE</span></div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;<span class="comment"> * @note In case the clamping of the result is required, the min and max bounds can be passed at compile time using -DMIN_BOUND and -DMAX_BOUND.</span></div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;<span class="comment"> *       These values can be used to implement &quot;rectified linear unit&quot; activation functions</span></div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;<span class="comment"> * @note In case of per-channel quantization of matrix B, -DPER_CHANNEL_QUANTIZATION must be passed at compile time.</span></div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;<span class="comment"> * @param[in]  lhs_ptr                                          Pointer to the LHS reshaped matrix. Supported data type: QASYMM8/QASYMM8_SIGNED</span></div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;<span class="comment"> * @param[in]  lhs_stride_x                                     Stride of the LHS reshaped matrix in X dimension (in bytes)</span></div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;<span class="comment"> * @param[in]  lhs_step_x                                       src_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;<span class="comment"> * @param[in]  lhs_stride_y                                     Stride of the LHS reshaped matrix in Y dimension (in bytes)</span></div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;<span class="comment"> * @param[in]  lhs_step_y                                       src_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;<span class="comment"> * @param[in]  lhs_offset_first_element_in_bytes                The offset of the first element in the LHS reshaped matrix</span></div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;<span class="comment"> * @param[in]  rhs_ptr                                          Pointer to the RHS reshaped matrix. Supported data type: same as @p lhs_ptr</span></div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;<span class="comment"> * @param[in]  rhs_stride_x                                     Stride of the RHS reshaped matrix in X dimension (in bytes)</span></div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;<span class="comment"> * @param[in]  rhs_step_x                                       src_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;<span class="comment"> * @param[in]  rhs_stride_y                                     Stride of the RHS reshaped matrix in Y dimension (in bytes)</span></div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;<span class="comment"> * @param[in]  rhs_step_y                                       src_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;<span class="comment"> * @param[in]  rhs_offset_first_element_in_bytes                The offset of the first element in the RHS reshaped matrix</span></div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;<span class="comment"> * @param[out] dst_ptr                                          Pointer to the destination matrix Supported data type: same as @p lhs_ptr</span></div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;<span class="comment"> * @param[in]  dst_stride_x                                     Stride of the destination matrix in X dimension (in bytes)</span></div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;<span class="comment"> * @param[in]  dst_step_x                                       dst_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;<span class="comment"> * @param[in]  dst_stride_y                                     Stride of the destination matrix in Y dimension (in bytes)</span></div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;<span class="comment"> * @param[in]  dst_step_y                                       dst_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;<span class="comment"> * @param[in]  dst_offset_first_element_in_bytes                The offset of the first element in the destination matrix</span></div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;<span class="comment"> * @param[in]  lhs_stride_z                                     Stride of the LHS reshaped matrix in Z dimension (in bytes)</span></div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;<span class="comment"> * @param[in]  rhs_stride_z                                     Stride of the RHS reshaped matrix in Z dimension (in bytes)</span></div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;<span class="comment"> * @param[in]  dst_stride_z                                     Stride of the destination tensor in Z dimension (in bytes)</span></div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;<span class="comment"> * @param[in]  lhs_cross_plane_pad                              (Optional) Bottom paddings for LHS matrix in unit of elements (only if defined REINTERPRET_INPUT_AS_3D)</span></div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;<span class="comment"> * @param[in]  dst_cross_plane_pad                              (Optional) Bottom paddings for the output matrix in unit of elements (only if defined REINTERPRET_OUTPUT_AS_3D)</span></div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;<span class="comment"> * @param[in]  sum_col_ptr                                      (Optional) Pointer to the source tensor. Supported data type: S32</span></div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;<span class="comment"> * @param[in]  sum_col_stride_x                                 (Optional) Stride of the source tensor in X dimension (in bytes)</span></div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;<span class="comment"> * @param[in]  sum_col_step_x                                   (Optional) sum_col_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;<span class="comment"> * @param[in]  sum_col_stride_y                                 (Optional) Stride of the source tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;<span class="comment"> * @param[in]  sum_col_step_y                                   (Optional) sum_col_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;<span class="comment"> * @param[in]  sum_col_offset_first_element_in_bytes            (Optional) The offset of the first element in the source tensor</span></div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;<span class="comment"> * @param[in]  sum_row_ptr                                      (Optional) Pointer to the source tensor. Supported data type: S32</span></div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;<span class="comment"> * @param[in]  sum_row_stride_x                                 (Optional) Stride of the source tensor in X dimension (in bytes)</span></div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;<span class="comment"> * @param[in]  sum_row_step_x                                   (Optional) sum_row_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;<span class="comment"> * @param[in]  sum_row_stride_y                                 (Optional) Stride of the source tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;<span class="comment"> * @param[in]  sum_row_step_y                                   (Optional) sum_row_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;<span class="comment"> * @param[in]  sum_row_offset_first_element_in_bytes            (Optional) The offset of the first element in the source tensor</span></div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;<span class="comment"> * @param[in]  biases_ptr                                       (Optional) Pointer to the biases tensor. Supported data type: S32</span></div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;<span class="comment"> * @param[in]  biases_stride_x                                  (Optional) Stride of the biases tensor in X dimension (in bytes)</span></div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;<span class="comment"> * @param[in]  biases_step_x                                    (Optional) biases_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;<span class="comment"> * @param[in]  biases_offset_first_element_in_bytes             (Optional) The offset of the first element in the biases tensor</span></div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;<span class="comment"> * @param[in]  result_multipliers_ptr                           (Optional) Pointer to the output multipliers vector for per-channel quantization. Supported data types: S32</span></div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;<span class="comment"> * @param[in]  result_multipliers_stride_x                      (Optional) Stride of the output multipliers vector in X dimension (in bytes)</span></div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;<span class="comment"> * @param[in]  result_multipliers_step_x                        (Optional) output_multipliers_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;<span class="comment"> * @param[in]  result_multipliers_offset_first_element_in_bytes (Optional) The offset of the first element in the output multipliers vector</span></div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;<span class="comment"> * @param[in]  result_shifts_ptr                                (Optional) Pointer to the output shifts vector for per-channel quantization. Supported data types: S32</span></div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;<span class="comment"> * @param[in]  result_shifts_stride_x                           (Optional) Stride of the output shifts vector in X dimension (in bytes)</span></div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;<span class="comment"> * @param[in]  result_shifts_step_x                             (Optional) output_shifts_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;<span class="comment"> * @param[in]  result_shifts_offset_first_element_in_bytes      (Optional) The offset of the first element in the output shifts vector</span></div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;<span class="preprocessor">#if defined(GEMMLOWP_MM_RESHAPED_ONLY_RHS_T_FUSED_OUTPUT_STAGE_FIXEDPOINT)</span></div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;__kernel <span class="keywordtype">void</span> gemmlowp_mm_reshaped_only_rhs_t_fused_output_stage_fixedpoint</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;<span class="preprocessor">#elif defined(GEMMLOWP_MM_RESHAPED_ONLY_RHS_T) // defined(GEMMLOWP_MM_RESHAPED_ONLY_RHS_T_FUSED_OUTPUT_STAGE_FIXEDPOINT)</span></div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;__kernel <span class="keywordtype">void</span> gemmlowp_mm_reshaped_only_rhs_t</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;<span class="preprocessor">#endif                                         // defined(GEMMLOWP_MM_RESHAPED_ONLY_RHS_T)</span></div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(lhs),</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160; <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(rhs),</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160; <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>),</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160; uint lhs_stride_z,</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160; uint rhs_stride_z,</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160; uint dst_stride_z</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;<span class="preprocessor">#if defined(REINTERPRET_INPUT_AS_3D)</span></div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160; ,</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160; uint lhs_cross_plane_pad</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;<span class="preprocessor">#endif // REINTERPRET_INPUT_AS_3D</span></div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;<span class="preprocessor">#if defined(REINTERPRET_OUTPUT_AS_3D)</span></div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160; ,</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160; uint dst_cross_plane_pad</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;<span class="preprocessor">#endif // REINTERPRET_OUTPUT_AS_3D</span></div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;<span class="preprocessor">#if defined(A_OFFSET)</span></div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160; ,</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160; <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(sum_col)</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;<span class="preprocessor">#endif // defined(A_OFFSET)</span></div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;<span class="preprocessor">#if defined(B_OFFSET)</span></div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160; ,</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160; <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(sum_row)</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;<span class="preprocessor">#endif // defined(B_OFFSET)</span></div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;<span class="preprocessor">#if defined(ADD_BIAS)</span></div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160; ,</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160; <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(biases)</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;<span class="preprocessor">#endif // defined(ADD_BIAS)</span></div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;<span class="preprocessor">#if defined(PER_CHANNEL_QUANTIZATION)</span></div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160; ,</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160; <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(result_multipliers),</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160; <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(result_shifts)</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;<span class="preprocessor">#endif // defined(PER_CHANNEL_QUANTIZATION)</span></div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;)</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;{</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;    <span class="comment">// @note: replace with (DIMENSION + PAD) once we pass the relevant info at compile time</span></div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;<span class="preprocessor">#define FULL_LHS_HEIGHT (lhs_stride_z / lhs_stride_y)</span></div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;<span class="preprocessor">#define FULL_DST_HEIGHT (dst_stride_z / dst_stride_y)</span></div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160; </div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;    <span class="comment">// RHS offset and step X</span></div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;<span class="preprocessor">#if defined(RHS_INTERLEAVE)</span></div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;<span class="preprocessor">#define RHS_OFFSET_X (K0)</span></div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;<span class="preprocessor">#define RHS_STEP_X (K0 * H0)</span></div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;<span class="preprocessor">#else // defined(RHS_INTERLEAVE)</span></div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;<span class="preprocessor">#define RHS_OFFSET_X (K0 * N0)</span></div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;<span class="preprocessor">#define RHS_STEP_X (K0)</span></div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;<span class="preprocessor">#endif // defined(RHS_INTERLEAVE)</span></div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;<span class="preprocessor">#define RHS_STEP_LOOP (N0 * K0 * H0)</span></div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160; </div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;    uint x  = <a class="code" href="tile__helpers_8h.xhtml#ad7108f3c35d805762fb3a8989d0b641f">GET_SPATIAL_IDX</a>(0, 1, 1);</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;    uint y  = <a class="code" href="tile__helpers_8h.xhtml#ad7108f3c35d805762fb3a8989d0b641f">GET_SPATIAL_IDX</a>(1, M0, <a class="code" href="transpose_8cl.xhtml#a202537333048b910de7fc7ad58567200">PARTIAL_STORE_M0</a>);</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;    uint z  = <a class="code" href="tile__helpers_8h.xhtml#ad7108f3c35d805762fb3a8989d0b641f">GET_SPATIAL_IDX</a>(2, 1, 1);</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;    <span class="keywordtype">int</span>  xo = (x * N0);</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160; </div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;<span class="preprocessor">#if defined(DUMMY_WORK_ITEMS)</span></div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;    <span class="keywordflow">if</span>((xo &gt;= <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ae8b170dcb376fe60270f4675f84e4477">N</a>) || (y &gt;= <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a68dc0bf731afd0463b8e8cc4ed81c0f8">M</a>))</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;    {</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;    }</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;<span class="preprocessor">#endif // defined(DUMMY_WORK_ITEMS)</span></div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160; </div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;    <span class="comment">// Compute LHS matrix address</span></div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;    uint lhs_y = y + z * FULL_LHS_HEIGHT;</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160; </div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;    <span class="comment">// Compute RHS matrix address</span></div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    uint rhs_offset_x = (x % H0) * RHS_OFFSET_X;</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;    uint rhs_offset_y = (x / H0) * rhs_stride_y;</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160; </div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;<span class="preprocessor">#if defined(MATRIX_B_DEPTH)</span></div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;    <span class="comment">// Do not slide matrix B if the matrix B has 3 dimensions and matrix A more than 3</span></div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;    rhs_offset_y += (z % MATRIX_B_DEPTH) * rhs_stride_z;</div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;<span class="preprocessor">#else  // defined(MATRIX_B_DEPTH)</span></div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;    rhs_offset_y += z * rhs_stride_z;</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;<span class="preprocessor">#endif // defined(MATRIX_B_DEPTH)</span></div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160; </div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;    <span class="comment">// Initialize the accumulators</span></div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#a1b7124ed4713f1c104761e8deba36004">TILE</a>(ACC_DATA_TYPE, M0, N0, c);</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#af5e0dc11a939b317bb77a58beb291fe7">LOOP_UNROLLING</a>(<span class="keywordtype">int</span>, i, 0, 1, M0,</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;    {</div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;        c[i].v = 0;</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    })</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160; </div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;    <span class="keywordtype">int</span> i = 0;</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;    <span class="keywordflow">for</span>(; i &lt;= (<a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a42247993f81d6a8f73d2e0cb805c663b">K</a> - K0); i += K0)</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;    {</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;        <a class="code" href="tile__helpers_8h.xhtml#a1b7124ed4713f1c104761e8deba36004">TILE</a>(DATA_TYPE, M0, K0, a);</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;        <a class="code" href="tile__helpers_8h.xhtml#a1b7124ed4713f1c104761e8deba36004">TILE</a>(DATA_TYPE, N0, K0, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160; </div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;        <span class="comment">// Load values from LHS matrix</span></div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;        <a class="code" href="tile__helpers_8h.xhtml#a9e74d0f555507a56c1bf98a497f1ed6c">T_LOAD</a>(DATA_TYPE, M0, K0, BUFFER, lhs, i, lhs_y, 1, lhs_stride_y, a);</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160; </div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;        <span class="comment">// // Load values from RHS matrix</span></div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;        <a class="code" href="tile__helpers_8h.xhtml#af5e0dc11a939b317bb77a58beb291fe7">LOOP_UNROLLING</a>(<span class="keywordtype">int</span>, _i, 0, 1, N0,</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;        {</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>[_i].v = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(K0)(0, (__global DATA_TYPE *)(rhs_ptr + rhs_offset_first_element_in_bytes + rhs_offset_x + rhs_offset_y + _i * RHS_STEP_X));</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;        })</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160; </div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;        <span class="comment">// Partial matrix multiplication M0,N0,K0</span></div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;        <a class="code" href="tile__helpers_8h.xhtml#a00d8171420bb5b00639be9e0776262f5">T_MMUL</a>(DATA_TYPE, DATA_TYPE, ACC_DATA_TYPE, M0, N0, K0, NT, T, a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, c);</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160; </div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;        rhs_offset_x += RHS_STEP_LOOP;</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;    }</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160; </div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;<span class="preprocessor">#if((K % K0) != 0)</span></div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160; </div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;    <span class="comment">// Left-over accumulations</span></div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;    <span class="keywordflow">for</span>(; i &lt; <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a42247993f81d6a8f73d2e0cb805c663b">K</a>; ++i)</div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;    {</div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;        <a class="code" href="tile__helpers_8h.xhtml#a1b7124ed4713f1c104761e8deba36004">TILE</a>(DATA_TYPE, M0, 1, a);</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;        <a class="code" href="tile__helpers_8h.xhtml#a1b7124ed4713f1c104761e8deba36004">TILE</a>(DATA_TYPE, N0, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160; </div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;        <span class="comment">// Load values from LHS matrix</span></div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;        <a class="code" href="tile__helpers_8h.xhtml#a9e74d0f555507a56c1bf98a497f1ed6c">T_LOAD</a>(DATA_TYPE, M0, 1, BUFFER, lhs, i, lhs_y, 1, lhs_stride_y, a);</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160; </div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;        <a class="code" href="tile__helpers_8h.xhtml#af5e0dc11a939b317bb77a58beb291fe7">LOOP_UNROLLING</a>(<span class="keywordtype">int</span>, _i, 0, 1, N0,</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;        {</div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>[_i].v = *(__global DATA_TYPE *)(rhs_ptr + rhs_offset_first_element_in_bytes + rhs_offset_x + rhs_offset_y + _i * RHS_STEP_X);</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;        })</div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160; </div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;        <a class="code" href="tile__helpers_8h.xhtml#a00d8171420bb5b00639be9e0776262f5">T_MMUL</a>(DATA_TYPE, DATA_TYPE, ACC_DATA_TYPE, M0, N0, 1, NT, T, a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, c);</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160; </div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;        rhs_offset_x += 1;</div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;    }</div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;<span class="preprocessor">#endif // ((K % K0) != 0)</span></div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160; </div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;<span class="preprocessor">#if defined(FUSED_OUTPUT_STAGE_FIXED_POINT)</span></div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160; </div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#a1b7124ed4713f1c104761e8deba36004">TILE</a>(<span class="keywordtype">int</span>, M0, N0, c_int);</div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#a1b7124ed4713f1c104761e8deba36004">TILE</a>(<span class="keywordtype">int</span>, M0, N0, offset_s32);</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#af5e0dc11a939b317bb77a58beb291fe7">LOOP_UNROLLING</a>(<span class="keywordtype">int</span>, i, 0, 1, M0,</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;    {</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;        offset_s32[i].v = (<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<span class="keywordtype">int</span>, N0))K_OFFSET;</div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;    })</div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160; </div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#af5e0dc11a939b317bb77a58beb291fe7">LOOP_UNROLLING</a>(<span class="keywordtype">int</span>, i, 0, 1, M0,</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;    {</div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;        c_int[i].v = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a23fb01b6f3453cc0e48a026fd44f6acd">CONVERT_SAT</a>(c[i].v, <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<span class="keywordtype">int</span>, N0));</div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;    })</div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160; </div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;#<span class="keywordflow">if</span> defined(A_OFFSET)</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160; </div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;<span class="preprocessor">#if defined(SUM_COL_HAS_BATCHES)</span></div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;    <span class="keywordtype">int</span> sum_col_y = z;</div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;<span class="preprocessor">#else  // defined(SUM_COL_HAS_BATCHES)</span></div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;    <span class="keywordtype">int</span> sum_col_y = 0;</div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;<span class="preprocessor">#endif // defined(SUM_COL_HAS_BATCHES)</span></div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#a1b7124ed4713f1c104761e8deba36004">TILE</a>(<span class="keywordtype">int</span>, 1, N0, a_offset_s32);</div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160; </div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#a9e74d0f555507a56c1bf98a497f1ed6c">T_LOAD</a>(<span class="keywordtype">int</span>, 1, N0, BUFFER, sum_col, xo, sum_col_y, 1, sum_col_stride_y, a_offset_s32);</div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160; </div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;    a_offset_s32[0].v *= A_OFFSET;</div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160; </div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#abf7882e0ece57c1f08b93465e5b62d40">T_ELTWISE_BROADCAST_ADD_X</a>(<span class="keywordtype">int</span>, M0, N0, offset_s32, a_offset_s32, offset_s32);</div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;<span class="preprocessor">#endif // defined(A_OFFSET)</span></div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160; </div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;<span class="preprocessor">#if defined(B_OFFSET)</span></div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;    <span class="comment">// Compute the offset contribution due to B_OFFSET</span></div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;    <span class="comment">// Note: The sum_row tensor is generated through CLGEMMLowpMatrixAReductionKernel which</span></div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;    <span class="comment">// does not introduce paddings. For this reason is safe to access the tensor in this manner</span></div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;    <span class="comment">// without considering that the coordinate &quot;y&quot; could come from an input 3D tensor</span></div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#a1b7124ed4713f1c104761e8deba36004">TILE</a>(<span class="keywordtype">int</span>, M0, N0, b_offset_s32);</div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160; </div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#a9e74d0f555507a56c1bf98a497f1ed6c">T_LOAD</a>(<span class="keywordtype">int</span>, M0, 1, BUFFER, sum_row, y + z * (sum_row_stride_y / <span class="keyword">sizeof</span>(<span class="keywordtype">int</span>)), 0, 1, sum_row_stride_x, b_offset_s32);</div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160; </div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#af5e0dc11a939b317bb77a58beb291fe7">LOOP_UNROLLING</a>(<span class="keywordtype">int</span>, i, 0, 1, M0,</div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;    {</div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;        offset_s32[i].v += b_offset_s32[i].v *B_OFFSET;</div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;    })</div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160; </div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;#endif <span class="comment">// defined(B_OFFSET)</span></div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160; </div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;#<span class="keywordflow">if</span> defined(ADD_BIAS)</div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160; </div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#a1b7124ed4713f1c104761e8deba36004">TILE</a>(<span class="keywordtype">int</span>, 1, N0, <a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>);</div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160; </div>
<div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#a9e74d0f555507a56c1bf98a497f1ed6c">T_LOAD</a>(<span class="keywordtype">int</span>, 1, N0, BUFFER, biases, xo, 0, 1, 0, <a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>);</div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160; </div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#abf7882e0ece57c1f08b93465e5b62d40">T_ELTWISE_BROADCAST_ADD_X</a>(<span class="keywordtype">int</span>, M0, N0, offset_s32, <a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, offset_s32);</div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;<span class="preprocessor">#endif // defined(ADD_BIAS)</span></div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160; </div>
<div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#af5e0dc11a939b317bb77a58beb291fe7">LOOP_UNROLLING</a>(<span class="keywordtype">int</span>, i, 0, 1, M0,</div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;    {</div>
<div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;        c_int[i].v += offset_s32[i].v;</div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;    })</div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160; </div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#a1b7124ed4713f1c104761e8deba36004">TILE</a>(DATA_TYPE, M0, N0, c_lp);</div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160; </div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;    <span class="comment">// Multiply by result_mult_int and shift</span></div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;<span class="preprocessor">#if defined(PER_CHANNEL_QUANTIZATION)</span></div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#a1b7124ed4713f1c104761e8deba36004">TILE</a>(<span class="keywordtype">int</span>, 1, N0, res_mul);</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#a1b7124ed4713f1c104761e8deba36004">TILE</a>(<span class="keywordtype">int</span>, 1, N0, res_shift);</div>
<div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160; </div>
<div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#a9e74d0f555507a56c1bf98a497f1ed6c">T_LOAD</a>(<span class="keywordtype">int</span>, 1, N0, BUFFER, result_multipliers, xo, 0, 0, 0, res_mul);</div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#a9e74d0f555507a56c1bf98a497f1ed6c">T_LOAD</a>(<span class="keywordtype">int</span>, 1, N0, BUFFER, result_shifts, xo, 0, 0, 0, res_shift);</div>
<div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160; </div>
<div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#a6f18c9f4dce3e2975d093c7cff9e6106">T_QUANTIZE8</a>(<span class="keywordtype">int</span>, DATA_TYPE, PER_CHANNEL, M0, N0, RESULT_OFFSET, RESULT_SHIFT, RESULT_MULTIPLIER, c_int, res_mul, res_shift, c_lp);</div>
<div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;<span class="preprocessor">#else  // defined(PER_CHANNEL_QUANTIZATION)</span></div>
<div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#a6f18c9f4dce3e2975d093c7cff9e6106">T_QUANTIZE8</a>(<span class="keywordtype">int</span>, DATA_TYPE, PER_TENSOR, M0, N0, RESULT_OFFSET, RESULT_SHIFT, RESULT_MULTIPLIER, c_int, 0, 0, c_lp);</div>
<div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;<span class="preprocessor">#endif // defined(PER_CHANNEL_QUANTIZATION)</span></div>
<div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160; </div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;<span class="preprocessor">#if defined(MIN_BOUND)</span></div>
<div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#af5e0dc11a939b317bb77a58beb291fe7">LOOP_UNROLLING</a>(<span class="keywordtype">int</span>, i, 0, 1, M0,</div>
<div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;    {</div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;        c_lp[i].v = max(c_lp[i].v, (<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, N0))MIN_BOUND);</div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;    })</div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;#endif <span class="comment">// defined(MIN_BOUND)</span></div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;#<span class="keywordflow">if</span> defined(MAX_BOUND)</div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#af5e0dc11a939b317bb77a58beb291fe7">LOOP_UNROLLING</a>(<span class="keywordtype">int</span>, i, 0, 1, M0,</div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;    {</div>
<div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;        c_lp[i].v = min(c_lp[i].v, (<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, N0))MAX_BOUND);</div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;    })</div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;#endif <span class="comment">// defined(MAX_BOUND)</span></div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160; </div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;#<span class="keywordflow">else</span>  <span class="comment">// defined(FUSED_OUTPUT_STAGE_FIXED_POINT)</span></div>
<div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#a1b7124ed4713f1c104761e8deba36004">TILE</a>(<span class="keywordtype">int</span>, M0, N0, c_lp);</div>
<div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160; </div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#af5e0dc11a939b317bb77a58beb291fe7">LOOP_UNROLLING</a>(<span class="keywordtype">int</span>, i, 0, 1, M0,</div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;    {</div>
<div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;        c_lp[i].v = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a23fb01b6f3453cc0e48a026fd44f6acd">CONVERT_SAT</a>(c[i].v, <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<span class="keywordtype">int</span>, N0));</div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;    })</div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;#endif <span class="comment">// defined(FUSED_OUTPUT_STAGE_FIXED_POINT)</span></div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160; </div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#a1b7124ed4713f1c104761e8deba36004">TILE</a>(uint, M0, 1, dst_indirect_y);</div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160; </div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#af5e0dc11a939b317bb77a58beb291fe7">LOOP_UNROLLING</a>(<span class="keywordtype">int</span>, i, 0, 1, M0,</div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;    {</div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;<span class="preprocessor">#if defined(REINTERPRET_OUTPUT_AS_3D)</span></div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;        dst_indirect_y[i].v = (uint)min((<span class="keywordtype">int</span>)((y + i) % HEIGHT_GEMM3D), (<span class="keywordtype">int</span>)HEIGHT_GEMM3D - 1);</div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;        dst_indirect_y[i].v += (uint)min((<span class="keywordtype">int</span>)((y + i) / HEIGHT_GEMM3D), (int)DEPTH_GEMM3D - 1) * FULL_DST_HEIGHT;</div>
<div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;        dst_indirect_y[i].v += z *FULL_DST_HEIGHT *DEPTH_GEMM3D;</div>
<div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;<span class="preprocessor">#else  // (REINTERPRET_OUTPUT_AS_3D)</span></div>
<div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;        dst_indirect_y[i].v = (uint)min((<span class="keywordtype">int</span>)y + i, (int)<a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a68dc0bf731afd0463b8e8cc4ed81c0f8">M</a> - 1) + z *FULL_DST_HEIGHT;</div>
<div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;<span class="preprocessor">#endif // defined(REINTERPRET_OUTPUT_AS_3D)</span></div>
<div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;    })</div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160; </div>
<div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> cond_x = (xo &gt; (<a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ae8b170dcb376fe60270f4675f84e4477">N</a> - N0)) &amp; (<a class="code" href="transpose_8cl.xhtml#a384384e4aff4a5ab95d1e0f9e3808924">PARTIAL_STORE_N0</a> != 0);</div>
<div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160; </div>
<div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;<span class="preprocessor">#if defined(FUSED_OUTPUT_STAGE_FIXED_POINT)</span></div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#af5933c5bb4531ec2371957cb67518c9e">T_STORE_INDIRECT_WIDTH_SELECT</a>(DATA_TYPE, M0, N0, <a class="code" href="transpose_8cl.xhtml#a384384e4aff4a5ab95d1e0f9e3808924">PARTIAL_STORE_N0</a>, BUFFER, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, xo, dst_stride_y, cond_x, c_lp, dst_indirect_y);</div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;<span class="preprocessor">#else  // defined(FUSED_OUTPUT_STAGE_FIXED_POINT)</span></div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#af5933c5bb4531ec2371957cb67518c9e">T_STORE_INDIRECT_WIDTH_SELECT</a>(<span class="keywordtype">int</span>, M0, N0, <a class="code" href="transpose_8cl.xhtml#a384384e4aff4a5ab95d1e0f9e3808924">PARTIAL_STORE_N0</a>, BUFFER, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, xo, dst_stride_y, cond_x, c_lp, dst_indirect_y);</div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;<span class="preprocessor">#endif // defined(FUSED_OUTPUT_STAGE_FIXED_POINT)</span></div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160; </div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;<span class="preprocessor">#undef RHS_OFFSET_X</span></div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;<span class="preprocessor">#undef RHS_STEP_X</span></div>
<div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;<span class="preprocessor">#undef RHS_STEP_LOOP</span></div>
<div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;}</div>
<div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;<span class="preprocessor">#endif // defined(GEMMLOWP_MM_RESHAPED_ONLY_RHS_T_FUSED_OUTPUT_STAGE_FIXEDPOINT) || defined(GEMMLOWP_MM_RESHAPED_ONLY_RHS_T)</span></div>
<div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160; </div>
<div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;<span class="preprocessor">#if defined(GEMMLOWP_MM_NATIVE)</span></div>
<div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;<span class="comment">/** This OpenCL kernel computes the matrix multiplication between 2 matrices.</span></div>
<div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;<span class="comment"> *  The LHS matrix is NOT reshaped</span></div>
<div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;<span class="comment"> *  The RHS matrix is NOT reshaped</span></div>
<div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;<span class="comment"> * @note The input data type must be passed at compile time using -DDATA_TYPE (i.e. -DDATA_TYPE=uchar)</span></div>
<div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;<span class="comment"> * @note The accumulator data type must be passed at compile time using -DACC_DATA_TYPE (i.e. -DACC_DATA_TYPE=uint)</span></div>
<div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;<span class="comment"> * @note The number of columns of LHS matrix must be passed at compile time using -DK (i.e. -DK=64)</span></div>
<div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;<span class="comment"> * @note The number of M0 rows to process must be passed at compile time using -DM0 (i.e. -DM0=2)</span></div>
<div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;<span class="comment"> * @note The number of N0 columns to process must be passed at compile time using -DN0 (i.e. -DN0=2)</span></div>
<div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;<span class="comment"> * @note The number of K0 partial accumulations must be passed at compile time using -DK0 (i.e., -DK0=2)</span></div>
<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;<span class="comment"> * @note Only the following configurations of M0, N0 and K0 are currently supported:</span></div>
<div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;<span class="comment"> *  - M0 = 1, 2, 3, 4, 5, 6, 7, 8</span></div>
<div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;<span class="comment"> *  - N0 = 2, 3, 4, 8, 16</span></div>
<div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;<span class="comment"> *  - K0 = 2, 3, 4, 8, 16</span></div>
<div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;<span class="comment"> * @note In case the input or output have to be reinterpreted as a 3D tensor, the following information must be passed at compile time:</span></div>
<div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;<span class="comment"> *       -# REINTERPRET_INPUT_AS_3D: To reinterpret the input as 3D</span></div>
<div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;<span class="comment"> *       -# REINTERPRET_OUTPUT_AS_3D: To reinterpret the output as 3D</span></div>
<div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;<span class="comment"> *       -# HEIGHT_GEMM3D: The height of the output in case it has to be reinterpreted as a 3D tensor.</span></div>
<div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;<span class="comment"> *       -# DEPTH_GEMM3D: The depth of the output in case it has to be reinterpreted as a 3D tensor</span></div>
<div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;<span class="comment"> *          (HEIGHT_GEMM3D * DEPTH_GEMM3D) = columns LHS matrix</span></div>
<div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;<span class="comment"> * @param[in]  lhs_ptr                           Pointer to the LHS reshaped matrix. Supported data type: QASYMM8</span></div>
<div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;<span class="comment"> * @param[in]  lhs_stride_x                      Stride of the LHS reshaped matrix in X dimension (in bytes)</span></div>
<div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;<span class="comment"> * @param[in]  lhs_step_x                        src_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;<span class="comment"> * @param[in]  lhs_stride_y                      Stride of the LHS reshaped matrix in Y dimension (in bytes)</span></div>
<div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;<span class="comment"> * @param[in]  lhs_step_y                        src_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;<span class="comment"> * @param[in]  lhs_offset_first_element_in_bytes The offset of the first element in the LHS reshaped matrix</span></div>
<div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;<span class="comment"> * @param[in]  rhs_ptr                           Pointer to the RHS reshaped matrix. Supported data type: same as @p lhs_ptr</span></div>
<div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;<span class="comment"> * @param[in]  rhs_stride_x                      Stride of the RHS reshaped matrix in X dimension (in bytes)</span></div>
<div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;<span class="comment"> * @param[in]  rhs_step_x                        src_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;<span class="comment"> * @param[in]  rhs_stride_y                      Stride of the RHS reshaped matrix in Y dimension (in bytes)</span></div>
<div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;<span class="comment"> * @param[in]  rhs_step_y                        src_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;<span class="comment"> * @param[in]  rhs_offset_first_element_in_bytes The offset of the first element in the RHS reshaped matrix</span></div>
<div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;<span class="comment"> * @param[out] dst_ptr                           Pointer to the destination matrix Supported data type: S32</span></div>
<div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;<span class="comment"> * @param[in]  dst_stride_x                      Stride of the destination matrix in X dimension (in bytes)</span></div>
<div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;<span class="comment"> * @param[in]  dst_step_x                        dst_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;<span class="comment"> * @param[in]  dst_stride_y                      Stride of the destination matrix in Y dimension (in bytes)</span></div>
<div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;<span class="comment"> * @param[in]  dst_step_y                        dst_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;<span class="comment"> * @param[in]  dst_offset_first_element_in_bytes The offset of the first element in the destination matrix</span></div>
<div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;<span class="comment"> * @param[in]  lhs_stride_z                      Stride of the LHS reshaped matrix in Z dimension (in bytes)</span></div>
<div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;<span class="comment"> * @param[in]  rhs_stride_z                      Stride of the RHS reshaped matrix in Z dimension (in bytes)</span></div>
<div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;<span class="comment"> * @param[in]  dst_stride_z                      Stride of the destination tensor in Z dimension (in bytes)</span></div>
<div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;<span class="comment"> * @param[in]  lhs_cross_plane_pad               (Optional) Bottom paddings for LHS matrix in unit of elements (only if defined REINTERPRET_INPUT_AS_3D)</span></div>
<div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;<span class="comment"> * @param[in]  dst_cross_plane_pad               (Optional) Bottom paddings for the output matrix in unit of elements (only if defined REINTERPRET_OUTPUT_AS_3D)</span></div>
<div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;__kernel <span class="keywordtype">void</span> gemmlowp_mm_native(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(lhs),</div>
<div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;                                 <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(rhs),</div>
<div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;                                 <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>),</div>
<div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;                                 uint lhs_stride_z,</div>
<div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;                                 uint rhs_stride_z,</div>
<div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;                                 uint dst_stride_z</div>
<div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;#<span class="keywordflow">if</span> defined(REINTERPRET_INPUT_AS_3D)</div>
<div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;                                 ,</div>
<div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;                                 uint lhs_cross_plane_pad</div>
<div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;#endif <span class="comment">// REINTERPRET_INPUT_AS_3D</span></div>
<div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;#<span class="keywordflow">if</span> defined(REINTERPRET_OUTPUT_AS_3D)</div>
<div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;                                 ,</div>
<div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;                                 uint dst_cross_plane_pad</div>
<div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;#endif <span class="comment">// REINTERPRET_OUTPUT_AS_3D</span></div>
<div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;                                )</div>
<div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;{</div>
<div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;    uint x = get_global_id(0);</div>
<div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;    uint y = get_global_id(1);</div>
<div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;    uint z = get_global_id(2);</div>
<div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160; </div>
<div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;<span class="preprocessor">#if defined(DUMMY_WORK_ITEMS)</span></div>
<div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;    <span class="keywordflow">if</span>((x * N0 &gt;= <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ae8b170dcb376fe60270f4675f84e4477">N</a>) || (y * M0 &gt;= <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a68dc0bf731afd0463b8e8cc4ed81c0f8">M</a>))</div>
<div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;    {</div>
<div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;    }</div>
<div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;<span class="preprocessor">#endif // defined(DUMMY_WORK_ITEMS)</span></div>
<div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160; </div>
<div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;    <span class="comment">// Compute LHS matrix address</span></div>
<div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;    uint lhs_offset = lhs_offset_first_element_in_bytes + <a class="code" href="load__store__utility_8h.xhtml#aa67f21cebb5ef7733af9fe64a140038f">COMPUTE_M0_START_ROW</a>(y, M0, <a class="code" href="transpose_8cl.xhtml#a202537333048b910de7fc7ad58567200">PARTIAL_STORE_M0</a>) * (uint)lhs_stride_y;</div>
<div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160; </div>
<div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;    <span class="comment">// Compute RHS matrix address</span></div>
<div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;    uint rhs_offset = rhs_offset_first_element_in_bytes + x * N0 * <span class="keyword">sizeof</span>(DATA_TYPE);</div>
<div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160; </div>
<div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;<span class="preprocessor">#if defined(MATRIX_B_DEPTH)</span></div>
<div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;    <span class="comment">// Do not slide matrix B if the matrix B has 3 dimensions and matrix A more than 3</span></div>
<div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;    rhs_offset += (z % MATRIX_B_DEPTH) * rhs_stride_z;</div>
<div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;<span class="preprocessor">#else  // defined(MATRIX_B_DEPTH)</span></div>
<div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;    rhs_offset += z * rhs_stride_z;</div>
<div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;<span class="preprocessor">#endif // defined(MATRIX_B_DEPTH)</span></div>
<div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160; </div>
<div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;    <a class="code" href="repeat_8h.xhtml#a4a61a8df72f9bc1b1dcc4cc4ec6ac3b9">REPEAT_VAR_INIT_TO_CONST</a>(8, uint, zlhs, 0);</div>
<div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;    <a class="code" href="repeat_8h.xhtml#a4a61a8df72f9bc1b1dcc4cc4ec6ac3b9">REPEAT_VAR_INIT_TO_CONST</a>(16, uint, zrhs, 0);</div>
<div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160; </div>
<div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;<span class="preprocessor">#if defined(REINTERPRET_INPUT_AS_3D)</span></div>
<div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;    <span class="comment">// The plane (zlhs) is calculated dividing M (y * M0) by HEIGHT_GEMM3D</span></div>
<div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;    <a class="code" href="gemm__helpers_8h.xhtml#ade58486d6b2d13d7941106a9d2ec86d3">CALCULATE_Z_OFFSET</a>(M0, uint, zlhs, <a class="code" href="load__store__utility_8h.xhtml#aa67f21cebb5ef7733af9fe64a140038f">COMPUTE_M0_START_ROW</a>(y, M0, <a class="code" href="transpose_8cl.xhtml#a202537333048b910de7fc7ad58567200">PARTIAL_STORE_M0</a>), HEIGHT_GEMM3D, DEPTH_GEMM3D, lhs_cross_plane_pad, lhs_stride_y);</div>
<div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160; </div>
<div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;    <span class="comment">// Add offset for batched GEMM. The batches will be in the fourth dimension and for this reason we</span></div>
<div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;    <span class="comment">// multiply lhs_stride_z by DEPTH_GEMM3D</span></div>
<div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;    lhs_offset += z * lhs_stride_z * DEPTH_GEMM3D;</div>
<div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160; </div>
<div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;<span class="preprocessor">#else // defined(REINTERPRET_INPUT_AS_3D)</span></div>
<div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160; </div>
<div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;    <span class="comment">// Add offset for batched GEMM</span></div>
<div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;    lhs_offset += z * lhs_stride_z;</div>
<div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160; </div>
<div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;<span class="preprocessor">#endif // defined(REINTERPRET_INPUT_AS_3D)</span></div>
<div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160; </div>
<div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;    <span class="comment">// Initialize the accumulators</span></div>
<div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;    <a class="code" href="repeat_8h.xhtml#a4a61a8df72f9bc1b1dcc4cc4ec6ac3b9">REPEAT_VAR_INIT_TO_CONST</a>(M0, <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(ACC_DATA_TYPE, N0), c, 0); <span class="comment">//VEC_DATA_TYPE(ACC_DATA_TYPE, N0)    c0=0,c1=0,c2=0,... c(M0-1)=0;</span></div>
<div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160; </div>
<div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;    <span class="keywordtype">int</span> i = 0;</div>
<div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160; </div>
<div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;    <span class="keywordflow">for</span>(; i &lt;= (<a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a42247993f81d6a8f73d2e0cb805c663b">K</a> - K0); i += K0)</div>
<div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;    {</div>
<div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;        <span class="comment">// Load values from LHS matrix</span></div>
<div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;        <a class="code" href="gemm__helpers_8h.xhtml#a9fe7ded27e552f48fa285d34fb00427d">LOAD_BLOCK</a>(M0, K0, DATA_TYPE, a, lhs_ptr, lhs_offset, lhs_stride_y, zlhs);</div>
<div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160; </div>
<div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;        <span class="comment">// Load values from RHS matrix</span></div>
<div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;        <a class="code" href="gemm__helpers_8h.xhtml#a9fe7ded27e552f48fa285d34fb00427d">LOAD_BLOCK</a>(K0, N0, DATA_TYPE, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, rhs_ptr, rhs_offset, rhs_stride_y, zrhs);</div>
<div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160; </div>
<div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;        <span class="comment">// Partial matrix multiplication M0,N0,K0</span></div>
<div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;<span class="preprocessor">#if(GPU_ARCH == GPU_ARCH_MIDGARD)</span></div>
<div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;        ARM_MM_NATIVE_N0XK0XM0(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(ACC_DATA_TYPE, N0), M0, K0, a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, c);</div>
<div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;<span class="preprocessor">#else  // GPU_ARCH == GPU_ARCH_MIDGARD</span></div>
<div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;        <span class="comment">// Transpose the values from RHS matrix</span></div>
<div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;        <a class="code" href="gemm__helpers_8h.xhtml#af5a34192cbaedff0a43d6389815c676a">TRANSPOSE_K0XN0</a>(K0, N0, b_t, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, DATA_TYPE);</div>
<div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160; </div>
<div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;        ARM_MM_K0XN0XM0(M0, N0, K0, a, b_t, c);</div>
<div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;<span class="preprocessor">#endif // GPU_ARCH == GPU_ARCH_MIDGARD</span></div>
<div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160; </div>
<div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;        <span class="comment">// Update the offset</span></div>
<div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;        lhs_offset += K0;</div>
<div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;        rhs_offset += K0 * rhs_stride_y;</div>
<div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;    }</div>
<div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160; </div>
<div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;    <span class="comment">// Left-over for loop</span></div>
<div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;    <span class="keywordflow">for</span>(; i &lt; <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a42247993f81d6a8f73d2e0cb805c663b">K</a>; ++i)</div>
<div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;    {</div>
<div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;        <span class="comment">// Load values from LHS matrix</span></div>
<div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;        <a class="code" href="gemm__helpers_8h.xhtml#a9fe7ded27e552f48fa285d34fb00427d">LOAD_BLOCK</a>(M0, 1, DATA_TYPE, a, lhs_ptr, lhs_offset, lhs_stride_y, zlhs);</div>
<div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160; </div>
<div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;        <span class="comment">// Load values from RHS matrix</span></div>
<div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;        <a class="code" href="gemm__helpers_8h.xhtml#a9fe7ded27e552f48fa285d34fb00427d">LOAD_BLOCK</a>(1, N0, DATA_TYPE, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, rhs_ptr, rhs_offset, rhs_stride_y, zrhs);</div>
<div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160; </div>
<div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;        <span class="comment">// Partial matrix multiplication M0,N0,1</span></div>
<div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;<span class="preprocessor">#if(GPU_ARCH == GPU_ARCH_MIDGARD)</span></div>
<div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;        ARM_MM_NATIVE_N0XK0XM0(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(ACC_DATA_TYPE, N0), M0, 1, a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, c);</div>
<div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;<span class="preprocessor">#else  // GPU_ARCH == GPU_ARCH_MIDGARD</span></div>
<div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;        <span class="comment">// Transpose the values from RHS matrix</span></div>
<div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;        <a class="code" href="gemm__helpers_8h.xhtml#af5a34192cbaedff0a43d6389815c676a">TRANSPOSE_K0XN0</a>(1, N0, b_t, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, DATA_TYPE);</div>
<div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160; </div>
<div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;        ARM_MM_K0XN0XM0(M0, N0, 1, a, b_t, c);</div>
<div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;<span class="preprocessor">#endif // GPU_ARCH == GPU_ARCH_MIDGARD</span></div>
<div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160; </div>
<div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;        <span class="comment">// Update the offset</span></div>
<div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;        lhs_offset += 1;</div>
<div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;        rhs_offset += rhs_stride_y;</div>
<div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;    }</div>
<div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160; </div>
<div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;    __global uchar *dst_addr = dst_ptr + dst_offset_first_element_in_bytes + (x * (uint)N0 * <span class="keyword">sizeof</span>(<span class="keywordtype">int</span>)) + (<a class="code" href="load__store__utility_8h.xhtml#aa67f21cebb5ef7733af9fe64a140038f">COMPUTE_M0_START_ROW</a>(y, M0, <a class="code" href="transpose_8cl.xhtml#a202537333048b910de7fc7ad58567200">PARTIAL_STORE_M0</a>) * dst_stride_y);</div>
<div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160; </div>
<div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;    <a class="code" href="repeat_8h.xhtml#a4a61a8df72f9bc1b1dcc4cc4ec6ac3b9">REPEAT_VAR_INIT_TO_CONST</a>(M0, uint, zout, 0); <span class="comment">//uint zout0=0,zout1=0,zout2=0,... zout7=0;</span></div>
<div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160; </div>
<div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;<span class="preprocessor">#if defined(REINTERPRET_OUTPUT_AS_3D)</span></div>
<div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;    <span class="comment">// The plane (zout) is calculated dividing M (y * M0) by HEIGHT_GEMM3D</span></div>
<div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;    <a class="code" href="gemm__helpers_8h.xhtml#ade58486d6b2d13d7941106a9d2ec86d3">CALCULATE_Z_OFFSET</a>(M0, uint, zout, <a class="code" href="load__store__utility_8h.xhtml#aa67f21cebb5ef7733af9fe64a140038f">COMPUTE_M0_START_ROW</a>(y, M0, <a class="code" href="transpose_8cl.xhtml#a202537333048b910de7fc7ad58567200">PARTIAL_STORE_M0</a>), HEIGHT_GEMM3D, DEPTH_GEMM3D, dst_cross_plane_pad, dst_stride_y);</div>
<div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160; </div>
<div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;    <span class="comment">// Add offset for batched GEMM. The batches will be in the fourth dimension and for this reason we</span></div>
<div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;    <span class="comment">// multiply dst_stride_z by DEPTH_GEMM3D</span></div>
<div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;    dst_addr += z * dst_stride_z * DEPTH_GEMM3D;</div>
<div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160; </div>
<div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;<span class="preprocessor">#else // defined(REINTERPRET_OUTPUT_AS_3D)</span></div>
<div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160; </div>
<div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;    <span class="comment">// Add offset for batched GEMM</span></div>
<div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;    dst_addr += z * dst_stride_z;</div>
<div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160; </div>
<div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;<span class="preprocessor">#endif // defined(REINTERPRET_OUTPUT_AS_3D)</span></div>
<div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> cond_y = y == 0;</div>
<div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> cond_x = ((x + 1) * N0 &gt;= <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ae8b170dcb376fe60270f4675f84e4477">N</a>);</div>
<div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160; </div>
<div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;    <span class="comment">// Convert and store output block</span></div>
<div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;    <a class="code" href="repeat_8h.xhtml#ad158a4337b01d9e95c8b953780c40fc8">REPEAT_VAR_INIT_CONVERT</a>(M0, <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<span class="keywordtype">int</span>, N0), c, res); <span class="comment">// resN = CONVERT(cN, VEC_DATA_TYPE(int, N0));</span></div>
<div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;    STORE_BLOCK_BOUNDARY_AWARE(M0, N0, <span class="keywordtype">int</span>, res, dst_addr, dst_stride_y, zout, <a class="code" href="transpose_8cl.xhtml#a202537333048b910de7fc7ad58567200">PARTIAL_STORE_M0</a>, <a class="code" href="transpose_8cl.xhtml#a384384e4aff4a5ab95d1e0f9e3808924">PARTIAL_STORE_N0</a>, cond_y, cond_x);</div>
<div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;}</div>
<div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;<span class="preprocessor">#endif // defined(GEMMLOWP_MM_NATIVE)</span></div>
<div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160; </div>
<div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;<span class="preprocessor">#if defined(GEMMLOWP_MATRIX_A_REDUCTION)</span></div>
<div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;<span class="comment">/** OpenCL kernel used to compute the row-vectors of sums of all the entries in each row of Matrix A.</span></div>
<div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;<span class="comment"> * It is also possible to multiply each reduced row by a scalar value, if SCALAR is passed at compile time.</span></div>
<div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;<span class="comment"> * @note This stage is needed to handle the offset of matrix product</span></div>
<div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;<span class="comment"> *       https://github.com/google/gemmlowp/blob/master/doc/low-precision.md</span></div>
<div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;<span class="comment"> * @attention The number of matrix A columns needs to be passed at compile time using -DCOLS_A</span></div>
<div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;<span class="comment"> * @note The input data type must be passed at compile time using -DDATA_TYPE (i.e. -DDATA_TYPE=uchar)</span></div>
<div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;<span class="comment"> * @note The data type for the accumulation must be passed at compile time using -DACC_DATA_TYPE (i.e. -DACC_DATA_TYPE=uint)</span></div>
<div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;<span class="comment"> * @note In case of scaling the scalar value must be passed at compile time using -DSCALAR (e.g. -DSCALAR=3)</span></div>
<div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;<span class="comment"> * @param[in]  src_ptr                           Pointer to the source tensor. Supported data type: QASYMM8/QASYMM8_SIGNED/QSYMM8</span></div>
<div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;<span class="comment"> * @param[in]  src_stride_x                      Stride of the source tensor in X dimension (in bytes)</span></div>
<div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;<span class="comment"> * @param[in]  src_step_x                        src_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;<span class="comment"> * @param[in]  src_stride_y                      Stride of the source tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;<span class="comment"> * @param[in]  src_step_y                        src_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;<span class="comment"> * @param[in]  src_stride_z                      Stride of the source tensor in Z dimension (in bytes)</span></div>
<div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;<span class="comment"> * @param[in]  src_step_z                        src_stride_z * number of elements along Z processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;<span class="comment"> * @param[in]  src_offset_first_element_in_bytes The offset of the first element in the source tensor</span></div>
<div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;<span class="comment"> * @param[out] dst_ptr                           Pointer to the destination tensor Supported data type: S32</span></div>
<div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;<span class="comment"> * @param[in]  dst_stride_x                      Stride of the destination tensor in X dimension (in bytes)</span></div>
<div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;<span class="comment"> * @param[in]  dst_step_x                        dst_gx_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;<span class="comment"> * @param[in]  dst_stride_y                      Stride of the destination tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;<span class="comment"> * @param[in]  dst_step_y                        dst_gx_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;<span class="comment"> * @param[in]  dst_offset_first_element_in_bytes The offset of the first element in the destination tensor</span></div>
<div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;__kernel <span class="keywordtype">void</span> gemmlowp_matrix_a_reduction(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>),</div>
<div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;                                          <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>))</div>
<div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;{</div>
<div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;    <span class="comment">// Compute source and destination addresses</span></div>
<div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;    <a class="code" href="struct_tensor3_d.xhtml">Tensor3D</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a> = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a31c8c760f08fb1a331b16b7c204321dc">CONVERT_TO_TENSOR3D_STRUCT</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>);</div>
<div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a>    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a> = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);</div>
<div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160; </div>
<div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(ACC_DATA_TYPE, 4)</div>
<div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;    sum_row_32            = (<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(ACC_DATA_TYPE, 4))0;</div>
<div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;    ACC_DATA_TYPE sum_row = 0;</div>
<div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160; </div>
<div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;    __global const DATA_TYPE *matrix_a = (__global const DATA_TYPE *)(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>.ptr + get_global_id(0) * src_stride_y + get_global_id(1) * src_stride_z);</div>
<div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160; </div>
<div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;    <span class="keywordtype">int</span> i = 0;</div>
<div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160; </div>
<div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;    <span class="comment">// This for loop performs 16 accumulations</span></div>
<div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a0886942393a3ba0dfefaa7516b159784">for</a>(; i &lt;= ((<span class="keywordtype">int</span>)COLS_A - 16); i += 16)</div>
<div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;    {</div>
<div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;        <span class="keyword">const</span> <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 16) a0 = vload16(0, matrix_a + i);</div>
<div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160; </div>
<div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;        sum_row_32 += <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(a0.s0123, <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(ACC_DATA_TYPE, 4)) + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(a0.s4567, <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(ACC_DATA_TYPE, 4)) + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(a0.s89AB, <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(ACC_DATA_TYPE, 4)) + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(a0.sCDEF,</div>
<div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;                      <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(ACC_DATA_TYPE, 4));</div>
<div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;    }</div>
<div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160; </div>
<div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;    <span class="comment">// This for loop performs the leftover accumulations</span></div>
<div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a0886942393a3ba0dfefaa7516b159784">for</a>(; i &lt; COLS_A; ++i)</div>
<div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;    {</div>
<div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;        sum_row += (ACC_DATA_TYPE)matrix_a[i];</div>
<div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;    }</div>
<div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160; </div>
<div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;    sum_row += sum_row_32.s0 + sum_row_32.s1 + sum_row_32.s2 + sum_row_32.s3;</div>
<div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160; </div>
<div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;<span class="preprocessor">#if defined(SCALAR)</span></div>
<div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;    sum_row *= (int)SCALAR;</div>
<div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;<span class="preprocessor">#endif // defined(SCALAR)</span></div>
<div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;    *((__global <span class="keywordtype">int</span> *)<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.ptr) = (int)sum_row;</div>
<div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;}</div>
<div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;<span class="preprocessor">#endif // defined(GEMMLOWP_MATRIX_A_REDUCTION)</span></div>
<div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160; </div>
<div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;<span class="preprocessor">#if defined(GEMMLOWP_MATRIX_A_REDUCTION_DOT8)</span></div>
<div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;<span class="comment">/** OpenCL kernel used to compute the row-vectors of sums of all the entries in each row of Matrix A using the arm dot product instruction.</span></div>
<div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;<span class="comment"> * It is also possible to multiply each reduced row by a scalar value, if SCALAR is passed at compile time.</span></div>
<div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;<span class="comment"> * @note This stage is needed to handle the offset of matrix product</span></div>
<div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;<span class="comment"> *       https://github.com/google/gemmlowp/blob/master/doc/low-precision.md</span></div>
<div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;<span class="comment"> * @attention The number of matrix A columns needs to be passed at compile time using -DCOLS_A</span></div>
<div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;<span class="comment"> * @note The input data type must be passed at compile time using -DDATA_TYPE (i.e. -DDATA_TYPE=uchar)</span></div>
<div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;<span class="comment"> * @note The data type for the accumulation must be passed at compile time using -DACC_DATA_TYPE (i.e. -DACC_DATA_TYPE=uint)</span></div>
<div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;<span class="comment"> * @note In case of scaling the scalar value must be passed at compile time using -DSCALAR (e.g. -DSCALAR=3)</span></div>
<div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;<span class="comment"> * @param[in]  src_ptr                           Pointer to the source tensor. Supported data type: QASYMM8/QASYMM8_SIGNED/QSYMM8</span></div>
<div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;<span class="comment"> * @param[in]  src_stride_x                      Stride of the source tensor in X dimension (in bytes)</span></div>
<div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;<span class="comment"> * @param[in]  src_step_x                        src_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;<span class="comment"> * @param[in]  src_stride_y                      Stride of the source tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;<span class="comment"> * @param[in]  src_step_y                        src_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;<span class="comment"> * @param[in]  src_stride_z                      Stride of the source tensor in Z dimension (in bytes)</span></div>
<div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;<span class="comment"> * @param[in]  src_step_z                        src_stride_z * number of elements along Z processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;<span class="comment"> * @param[in]  src_offset_first_element_in_bytes The offset of the first element in the source tensor</span></div>
<div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;<span class="comment"> * @param[out] dst_ptr                           Pointer to the destination tensor Supported data type: S32</span></div>
<div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;<span class="comment"> * @param[in]  dst_stride_x                      Stride of the destination tensor in X dimension (in bytes)</span></div>
<div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;<span class="comment"> * @param[in]  dst_step_x                        dst_gx_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;<span class="comment"> * @param[in]  dst_stride_y                      Stride of the destination tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;<span class="comment"> * @param[in]  dst_step_y                        dst_gx_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;<span class="comment"> * @param[in]  dst_offset_first_element_in_bytes The offset of the first element in the destination tensor</span></div>
<div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;__kernel <span class="keywordtype">void</span> gemmlowp_matrix_a_reduction_dot8(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>),</div>
<div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;                                               <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>))</div>
<div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;{</div>
<div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;    <span class="comment">// Compute source and destination addresses</span></div>
<div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;    <a class="code" href="struct_tensor3_d.xhtml">Tensor3D</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a> = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a31c8c760f08fb1a331b16b7c204321dc">CONVERT_TO_TENSOR3D_STRUCT</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>);</div>
<div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a>    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a> = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);</div>
<div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160; </div>
<div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;    ACC_DATA_TYPE sum_row = 0;</div>
<div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160; </div>
<div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;    __global <span class="keyword">const</span> DATA_TYPE *matrix_a = (__global <span class="keyword">const</span> DATA_TYPE *)(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>.ptr + get_global_id(0) * src_stride_y + get_global_id(1) * src_stride_z);</div>
<div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160; </div>
<div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;    <span class="keywordtype">int</span> i = 0;</div>
<div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160; </div>
<div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;    <span class="comment">// This for loop performs 16 accumulations</span></div>
<div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;    <span class="keywordflow">for</span>(; i &lt;= ((int)COLS_A - 32); i += 32)</div>
<div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;    {</div>
<div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;        <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 16)</div>
<div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;        a0 = vload16(0, matrix_a + i);</div>
<div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160; </div>
<div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;        <a class="code" href="tile__helpers_8h.xhtml#a43dcca5c53dde0299bb551a4cfcc9284">DOT_PRODUCT4_INTEGER8</a>(DATA_TYPE, DATA_TYPE, DATA_TYPE, a0.s0123, (<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 4))(1), sum_row);</div>
<div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;        <a class="code" href="tile__helpers_8h.xhtml#a43dcca5c53dde0299bb551a4cfcc9284">DOT_PRODUCT4_INTEGER8</a>(DATA_TYPE, DATA_TYPE, DATA_TYPE, a0.s4567, (<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 4))(1), sum_row);</div>
<div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;        <a class="code" href="tile__helpers_8h.xhtml#a43dcca5c53dde0299bb551a4cfcc9284">DOT_PRODUCT4_INTEGER8</a>(DATA_TYPE, DATA_TYPE, DATA_TYPE, a0.s89AB, (<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 4))(1), sum_row);</div>
<div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;        <a class="code" href="tile__helpers_8h.xhtml#a43dcca5c53dde0299bb551a4cfcc9284">DOT_PRODUCT4_INTEGER8</a>(DATA_TYPE, DATA_TYPE, DATA_TYPE, a0.sCDEF, (<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 4))(1), sum_row);</div>
<div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160; </div>
<div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;        a0 = vload16(1, matrix_a + i);</div>
<div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160; </div>
<div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;        <a class="code" href="tile__helpers_8h.xhtml#a43dcca5c53dde0299bb551a4cfcc9284">DOT_PRODUCT4_INTEGER8</a>(DATA_TYPE, DATA_TYPE, DATA_TYPE, a0.s0123, (<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 4))(1), sum_row);</div>
<div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;        <a class="code" href="tile__helpers_8h.xhtml#a43dcca5c53dde0299bb551a4cfcc9284">DOT_PRODUCT4_INTEGER8</a>(DATA_TYPE, DATA_TYPE, DATA_TYPE, a0.s4567, (<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 4))(1), sum_row);</div>
<div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;        <a class="code" href="tile__helpers_8h.xhtml#a43dcca5c53dde0299bb551a4cfcc9284">DOT_PRODUCT4_INTEGER8</a>(DATA_TYPE, DATA_TYPE, DATA_TYPE, a0.s89AB, (<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 4))(1), sum_row);</div>
<div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;        <a class="code" href="tile__helpers_8h.xhtml#a43dcca5c53dde0299bb551a4cfcc9284">DOT_PRODUCT4_INTEGER8</a>(DATA_TYPE, DATA_TYPE, DATA_TYPE, a0.sCDEF, (<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 4))(1), sum_row);</div>
<div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;    }</div>
<div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160; </div>
<div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;    <span class="comment">// This for loop performs the leftover accumulations</span></div>
<div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a0886942393a3ba0dfefaa7516b159784">for</a>(; i &lt; COLS_A; ++i)</div>
<div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;    {</div>
<div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;        sum_row += (ACC_DATA_TYPE)matrix_a[i];</div>
<div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;    }</div>
<div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160; </div>
<div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;<span class="preprocessor">#if defined(SCALAR)</span></div>
<div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;    sum_row *= (int)SCALAR;</div>
<div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;<span class="preprocessor">#endif // defined(SCALAR)</span></div>
<div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;    *((__global <span class="keywordtype">int</span> *)<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.ptr) = (int)sum_row;</div>
<div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;}</div>
<div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;<span class="preprocessor">#endif // defined(GEMMLOWP_MATRIX_A_REDUCTION_DOT8)</span></div>
<div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160; </div>
<div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;<span class="preprocessor">#if defined(GEMMLOWP_MATRIX_B_REDUCTION)</span></div>
<div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;<span class="comment">/** OpenCL kernel used to compute the row-vectors of sums of all the entries in each column of Matrix B.</span></div>
<div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;<span class="comment"> * It is also possible to multiply each reduced column by a scalar value, if SCALAR is passed at compile time.</span></div>
<div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;<span class="comment"> * @note This stage is needed to handle the offset of matrix product</span></div>
<div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;<span class="comment"> *       https://github.com/google/gemmlowp/blob/master/doc/low-precision.md</span></div>
<div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;<span class="comment"> * @attention The number of matrix B columns and rows needs to be passed at compile time using -DCOLS_B and -DROWS_B</span></div>
<div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;<span class="comment"> * @note The input data type must be passed at compile time using -DDATA_TYPE (i.e. -DDATA_TYPE=uchar)</span></div>
<div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;<span class="comment"> * @note The data type for the accumulation must be passed at compile time using -DACC_DATA_TYPE (i.e. -DACC_DATA_TYPE=uint)</span></div>
<div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;<span class="comment"> * @note In case of scaling the scalar value must be passed at compile time using -DSCALAR (i.e. -DSCALAR=3)</span></div>
<div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;<span class="comment"> * @note Vector size should be given as a preprocessor argument using -DVEC_SIZE=size. e.g. -DVEC_SIZE=16</span></div>
<div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;<span class="comment"> * @note Leftover vector size has to be passed at compile time using -DVEC_SIZE_LEFTOVER. e.g. -DVEC_SIZE_LEFTOVER=3. It is defined as the remainder between the input&#39;s first dimension and VEC_SIZE</span></div>
<div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;<span class="comment"> * @param[in]  src_ptr                           Pointer to the source tensor. Supported data type: QASYMM8/QASYMM8_SIGNED/QSYMM8/QSYMM8_PER_CHANNEL</span></div>
<div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;<span class="comment"> * @param[in]  src_stride_x                      Stride of the source tensor in X dimension (in bytes)</span></div>
<div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;<span class="comment"> * @param[in]  src_step_x                        src_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;<span class="comment"> * @param[in]  src_stride_y                      Stride of the source tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;<span class="comment"> * @param[in]  src_step_y                        src_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;<span class="comment"> * @param[in]  src_stride_z                      Stride of the source tensor in Z dimension (in bytes)</span></div>
<div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;<span class="comment"> * @param[in]  src_step_z                        src_stride_z * number of elements along Z processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;<span class="comment"> * @param[in]  src_offset_first_element_in_bytes The offset of the first element in the source tensor</span></div>
<div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;<span class="comment"> * @param[out] dst_ptr                           Pointer to the destination tensor Supported data type: S32</span></div>
<div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160;<span class="comment"> * @param[in]  dst_stride_x                      Stride of the destination tensor in X dimension (in bytes)</span></div>
<div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;<span class="comment"> * @param[in]  dst_step_x                        dst_gx_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;<span class="comment"> * @param[in]  dst_stride_y                      Stride of the destination tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;<span class="comment"> * @param[in]  dst_step_y                        dst_gx_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160;<span class="comment"> * @param[in]  dst_offset_first_element_in_bytes The offset of the first element in the destination tensor</span></div>
<div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;__kernel <span class="keywordtype">void</span> gemmlowp_matrix_b_reduction(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>),</div>
<div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;                                          <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>))</div>
<div class="line"><a name="l01156"></a><span class="lineno"> 1156</span>&#160;{</div>
<div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;    <span class="comment">// Compute source and destination addresses</span></div>
<div class="line"><a name="l01158"></a><span class="lineno"> 1158</span>&#160;    <span class="keyword">const</span> uint x_offs = max((<span class="keywordtype">int</span>)(get_global_id(0) * <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a> - (<a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a> - VEC_SIZE_LEFTOVER) % <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>), 0);</div>
<div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160;    <span class="keyword">const</span> uint y      = get_global_id(1);</div>
<div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160; </div>
<div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;    __global <span class="keyword">const</span> DATA_TYPE *matrix_b = (__global <span class="keyword">const</span> DATA_TYPE *)(src_ptr + src_offset_first_element_in_bytes + x_offs * <span class="keyword">sizeof</span>(DATA_TYPE) + y * src_step_y + y * src_stride_z);</div>
<div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;    __global uchar *dst_addr           = dst_ptr + dst_offset_first_element_in_bytes + x_offs * <span class="keyword">sizeof</span>(int) + y * dst_stride_y;</div>
<div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160; </div>
<div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(ACC_DATA_TYPE, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)</div>
<div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;    sum_col_32 = (<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(ACC_DATA_TYPE, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>))0;</div>
<div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160; </div>
<div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;    <span class="keywordtype">int</span> i = 0;</div>
<div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;    <span class="comment">// This for loop performs 4 accumulations</span></div>
<div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;    <span class="keywordflow">for</span>(; i &lt;= ((int)ROWS_B - 4); i += 4)</div>
<div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;    {</div>
<div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;        <span class="keyword">const</span> <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)</div>
<div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;        b0 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(<a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)(0, matrix_b + 0 * src_stride_y);</div>
<div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;        <span class="keyword">const</span> <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)</div>
<div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;        b1 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(<a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)(0, matrix_b + 1 * src_stride_y);</div>
<div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;        <span class="keyword">const</span> <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)</div>
<div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;        b2 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(<a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)(0, matrix_b + 2 * src_stride_y);</div>
<div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160;        <span class="keyword">const</span> <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)</div>
<div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160;        b3 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(<a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)(0, matrix_b + 3 * src_stride_y);</div>
<div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160; </div>
<div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;        sum_col_32 += <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(b0, <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(ACC_DATA_TYPE, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)) + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(b1, <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(ACC_DATA_TYPE, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)) + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(b2, <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(ACC_DATA_TYPE, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)) + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(b3,</div>
<div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;                      <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(ACC_DATA_TYPE, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>));</div>
<div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160; </div>
<div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;        matrix_b += 4 * src_stride_y;</div>
<div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;    }</div>
<div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160; </div>
<div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;    <span class="comment">// This for loop perfoms the leftover accumulations</span></div>
<div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;    <span class="keywordflow">for</span>(; i &lt; (int)ROWS_B; ++i)</div>
<div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;    {</div>
<div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;        <span class="keyword">const</span> <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)</div>
<div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;        b0 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(<a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)(0, matrix_b);</div>
<div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160; </div>
<div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;        sum_col_32 += <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(b0, <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(ACC_DATA_TYPE, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>));</div>
<div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160; </div>
<div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160;        matrix_b += src_stride_y;</div>
<div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;    }</div>
<div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160; </div>
<div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;<span class="preprocessor">#if defined(SCALAR)</span></div>
<div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;    sum_col_32 *= (<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(ACC_DATA_TYPE, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>))SCALAR;</div>
<div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;<span class="preprocessor">#endif // defined(SCALAR)</span></div>
<div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<span class="keywordtype">int</span>, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)</div>
<div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;    res0 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(sum_col_32, <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<span class="keywordtype">int</span>, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>));</div>
<div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160; </div>
<div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;    <a class="code" href="load__store__utility_8h.xhtml#a270acb3e45f182ebb6526f3e85eadd14">STORE_VECTOR_SELECT</a>(res, <span class="keywordtype">int</span>, dst_addr, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>, VEC_SIZE_LEFTOVER, VEC_SIZE_LEFTOVER != 0 &amp;&amp; get_global_id(0) == 0)</div>
<div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;}</div>
<div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;<span class="preprocessor">#endif // defined(GEMMLOWP_MATRIX_B_REDUCTION)</span></div>
<div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160; </div>
<div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;<span class="preprocessor">#endif // defined(DATA_TYPE) &amp;&amp; defined(ACC_DATA_TYPE)</span></div>
<div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160; </div>
<div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;<span class="preprocessor">#if defined(K_OFFSET) &amp;&amp; defined(VEC_SIZE) &amp;&amp; defined(VEC_SIZE_LEFTOVER)</span></div>
<div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160; </div>
<div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;<span class="preprocessor">#define VEC_INT VEC_DATA_TYPE(int, VEC_SIZE)</span></div>
<div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160; </div>
<div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;<span class="comment">/* Helper function used to calculate the offset contribution after matrix multiplication.</span></div>
<div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;<span class="comment"> * This kernel takes a final int32 accumulator value (the output of matrix multiplication),</span></div>
<div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;<span class="comment"> * and calculates the offset contribution of matrix A and matrix B.</span></div>
<div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;<span class="comment"> * @attention The k_offset = a_offset * b_offset * k (where k is the number of matrix A columns) needs to be passed at compile time using -DK_OFFSET (i.e. -DK_OFFSET=1200)</span></div>
<div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;<span class="comment"> * @note In case the offset contribution due to a_offset is required, a_offset needs to be passed at compile time using -DA_OFFSET (i.e. -DA_OFFSET=1)</span></div>
<div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;<span class="comment"> * @note In case the offset contribution due to b_offset is required, b_offset needs to be passed at compile time using -DB_OFFSET (i.e. -DB_OFFSET=6)</span></div>
<div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;<span class="comment"> * @note In case sum_col has batches, -DSUM_COL_HAS_BATCHES must be passed at compile time. Usually if gemmlowp is used to accelerate convolution layer, sum_col will not have batches</span></div>
<div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;<span class="comment"> * @note Vector size should be given as a preprocessor argument using -DVEC_SIZE=size. e.g. -DVEC_SIZE=16</span></div>
<div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;<span class="comment"> * @note Leftover vector size has to be passed at compile time using -DVEC_SIZE_LEFTOVER. e.g. -DVEC_SIZE_LEFTOVER=3. It is defined as the remainder between the input&#39;s first dimension and VEC_SIZE</span></div>
<div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;<span class="comment"> * @param[in] x                                     max((int)(get_global_id(0) * VEC_SIZE - (VEC_SIZE - VEC_SIZE_LEFTOVER) % VEC_SIZE), 0)</span></div>
<div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;<span class="comment"> * @param[in] y                                     get_global_id(1)</span></div>
<div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;<span class="comment"> * @param[in] z                                     get_global_id(2)</span></div>
<div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;<span class="comment"> * @param[in] sum_col_ptr                           (Optional) Pointer to the source tensor. Supported data type: same as @p mm_result_ptr</span></div>
<div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;<span class="comment"> * @param[in] sum_col_stride_x                      (Optional) Stride of the source tensor in X dimension (in bytes)</span></div>
<div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;<span class="comment"> * @param[in] sum_col_step_x                        (Optional) sum_col_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;<span class="comment"> * @param[in] sum_col_stride_y                      (Optional) Stride of the source tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;<span class="comment"> * @param[in] sum_col_step_y                        (Optional) sum_col_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;<span class="comment"> * @param[in] sum_col_offset_first_element_in_bytes (Optional) The offset of the first element in the source tensor</span></div>
<div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;<span class="comment"> * @param[in] sum_row_ptr                           (Optional) Pointer to the source tensor. Supported data type: same as @p mm_result_ptr</span></div>
<div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;<span class="comment"> * @param[in] sum_row_stride_x                      (Optional) Stride of the source tensor in X dimension (in bytes)</span></div>
<div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;<span class="comment"> * @param[in] sum_row_step_x                        (Optional) sum_row_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;<span class="comment"> * @param[in] sum_row_stride_y                      (Optional) Stride of the source tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;<span class="comment"> * @param[in] sum_row_step_y                        (Optional) sum_row_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;<span class="comment"> * @param[in] sum_row_offset_first_element_in_bytes (Optional) The offset of the first element in the source tensor</span></div>
<div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;<span class="comment"> * @param[in] biases_ptr                            (Optional) Pointer to the biases tensor. Supported data type: same as @p src_ptr</span></div>
<div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;<span class="comment"> * @param[in] biases_stride_x                       (Optional) Stride of the biases tensor in X dimension (in bytes)</span></div>
<div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;<span class="comment"> * @param[in] biases_step_x                         (Optional) biases_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;<span class="comment"> * @param[in] biases_offset_first_element_in_bytes  (Optional) The offset of the first element in the biases tensor</span></div>
<div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;<span class="keyword">inline</span> VEC_INT offset_contribution(</div>
<div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;    <span class="keywordtype">int</span> x,</div>
<div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;    <span class="keywordtype">int</span> y,</div>
<div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;    <span class="keywordtype">int</span> z</div>
<div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;#<span class="keywordflow">if</span> defined(A_OFFSET)</div>
<div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;    ,</div>
<div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(sum_col)</div>
<div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;#endif <span class="comment">// defined(A_OFFSET)</span></div>
<div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;#<span class="keywordflow">if</span> defined(B_OFFSET)</div>
<div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;    ,</div>
<div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(sum_row)</div>
<div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;#endif <span class="comment">// defined(B_OFFSET)</span></div>
<div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;#<span class="keywordflow">if</span> defined(ADD_BIAS)</div>
<div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;    ,</div>
<div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(biases)</div>
<div class="line"><a name="l01260"></a><span class="lineno"> 1260</span>&#160;#endif <span class="comment">// defined(ADD_BIAS)</span></div>
<div class="line"><a name="l01261"></a><span class="lineno"> 1261</span>&#160;)</div>
<div class="line"><a name="l01262"></a><span class="lineno"> 1262</span>&#160;{</div>
<div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;    VEC_INT a_offset_s32 = (VEC_INT)0;</div>
<div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160;    VEC_INT b_offset_s32 = (VEC_INT)0;</div>
<div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160; </div>
<div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;    <span class="keywordtype">int</span> batch_id = z;</div>
<div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;<span class="preprocessor">#if defined(DEPTH_INPUT3D)</span></div>
<div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160;    batch_id /= (int)DEPTH_INPUT3D;</div>
<div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;<span class="preprocessor">#endif // defined(DEPTH_INPUT3D)</span></div>
<div class="line"><a name="l01270"></a><span class="lineno"> 1270</span>&#160; </div>
<div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160;<span class="preprocessor">#if defined(A_OFFSET)</span></div>
<div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;    <span class="comment">// Compute the offset contribution due to A_OFFSET</span></div>
<div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;    __global uchar *sum_col_addr = sum_col_ptr + sum_col_offset_first_element_in_bytes + x * <span class="keyword">sizeof</span>(int);</div>
<div class="line"><a name="l01274"></a><span class="lineno"> 1274</span>&#160; </div>
<div class="line"><a name="l01275"></a><span class="lineno"> 1275</span>&#160;    <span class="comment">// Compute the offset contribution due to A_OFFSET</span></div>
<div class="line"><a name="l01276"></a><span class="lineno"> 1276</span>&#160;<span class="preprocessor">#if defined(SUM_COL_HAS_BATCHES)</span></div>
<div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;    a_offset_s32 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(<a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)(0, (__global <span class="keywordtype">int</span> *)(sum_col_addr + batch_id * sum_col_stride_y));</div>
<div class="line"><a name="l01278"></a><span class="lineno"> 1278</span>&#160;<span class="preprocessor">#else  // defined(SUM_COL_HAS_BATCHES)</span></div>
<div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;    a_offset_s32 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(<a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)(0, (__global <span class="keywordtype">int</span> *)sum_col_addr);</div>
<div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;<span class="preprocessor">#endif // defined(SUM_COL_HAS_BATCHES)</span></div>
<div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160; </div>
<div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;    a_offset_s32 *= (VEC_INT)A_OFFSET;</div>
<div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;<span class="preprocessor">#endif // defined(A_OFFSET)</span></div>
<div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160; </div>
<div class="line"><a name="l01285"></a><span class="lineno"> 1285</span>&#160;<span class="preprocessor">#if defined(B_OFFSET)</span></div>
<div class="line"><a name="l01286"></a><span class="lineno"> 1286</span>&#160;    <span class="comment">// Compute the offset contribution due to A_OFFSET</span></div>
<div class="line"><a name="l01287"></a><span class="lineno"> 1287</span>&#160;    __global uchar *sum_row_addr = sum_row_ptr + sum_row_offset_first_element_in_bytes + y * <span class="keyword">sizeof</span>(int);</div>
<div class="line"><a name="l01288"></a><span class="lineno"> 1288</span>&#160; </div>
<div class="line"><a name="l01289"></a><span class="lineno"> 1289</span>&#160;    <span class="comment">// Compute the offset contribution due to B_OFFSET</span></div>
<div class="line"><a name="l01290"></a><span class="lineno"> 1290</span>&#160;<span class="preprocessor">#if defined(HEIGHT_INPUT3D) &amp;&amp; defined(DEPTH_INPUT3D)</span></div>
<div class="line"><a name="l01291"></a><span class="lineno"> 1291</span>&#160;    b_offset_s32 = (VEC_INT) * (((__global <span class="keywordtype">int</span> *)(sum_row_addr + batch_id * sum_row_stride_y)) + (z % (int)DEPTH_INPUT3D) * (int)HEIGHT_INPUT3D);</div>
<div class="line"><a name="l01292"></a><span class="lineno"> 1292</span>&#160;<span class="preprocessor">#else  // defined(HEIGHT_INPUT3D) &amp;&amp; defined(DEPTH_INPUT3D)</span></div>
<div class="line"><a name="l01293"></a><span class="lineno"> 1293</span>&#160;    b_offset_s32 = (VEC_INT) * (((__global <span class="keywordtype">int</span> *)(sum_row_addr + batch_id * sum_row_stride_y)));</div>
<div class="line"><a name="l01294"></a><span class="lineno"> 1294</span>&#160;<span class="preprocessor">#endif // defined(HEIGHT_INPUT3D) &amp;&amp; defined(DEPTH_INPUT3D)</span></div>
<div class="line"><a name="l01295"></a><span class="lineno"> 1295</span>&#160;    b_offset_s32 *= (VEC_INT)B_OFFSET;</div>
<div class="line"><a name="l01296"></a><span class="lineno"> 1296</span>&#160;<span class="preprocessor">#endif // defined(B_OFFSET)</span></div>
<div class="line"><a name="l01297"></a><span class="lineno"> 1297</span>&#160; </div>
<div class="line"><a name="l01298"></a><span class="lineno"> 1298</span>&#160;<span class="preprocessor">#if defined(ADD_BIAS)</span></div>
<div class="line"><a name="l01299"></a><span class="lineno"> 1299</span>&#160;    <span class="comment">// Add bias</span></div>
<div class="line"><a name="l01300"></a><span class="lineno"> 1300</span>&#160;    __global uchar *bias_addr = biases_ptr + biases_offset_first_element_in_bytes + x * <span class="keyword">sizeof</span>(int);</div>
<div class="line"><a name="l01301"></a><span class="lineno"> 1301</span>&#160; </div>
<div class="line"><a name="l01302"></a><span class="lineno"> 1302</span>&#160;    VEC_INT biases_values = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(<a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)(0, (__global <span class="keywordtype">int</span> *)bias_addr);</div>
<div class="line"><a name="l01303"></a><span class="lineno"> 1303</span>&#160;    b_offset_s32 += (VEC_INT)biases_values;</div>
<div class="line"><a name="l01304"></a><span class="lineno"> 1304</span>&#160;<span class="preprocessor">#endif // defined(ADD_BIAS)</span></div>
<div class="line"><a name="l01305"></a><span class="lineno"> 1305</span>&#160; </div>
<div class="line"><a name="l01306"></a><span class="lineno"> 1306</span>&#160;    <span class="keywordflow">return</span> (VEC_INT)K_OFFSET + a_offset_s32 + b_offset_s32;</div>
<div class="line"><a name="l01307"></a><span class="lineno"> 1307</span>&#160;}</div>
<div class="line"><a name="l01308"></a><span class="lineno"> 1308</span>&#160; </div>
<div class="line"><a name="l01309"></a><span class="lineno"> 1309</span>&#160;<span class="preprocessor">#if defined(GEMMLOWP_OFFSET_CONTRIBUTION)</span></div>
<div class="line"><a name="l01310"></a><span class="lineno"> 1310</span>&#160;<span class="comment">/* OpenCL kernel used to add the offset contribution after matrix multiplication. The computation is performed in-place</span></div>
<div class="line"><a name="l01311"></a><span class="lineno"> 1311</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01312"></a><span class="lineno"> 1312</span>&#160;<span class="comment"> * This kernel takes a final int32 accumulator value (the output of matrix multiplication),</span></div>
<div class="line"><a name="l01313"></a><span class="lineno"> 1313</span>&#160;<span class="comment"> * and adds to it the offset contribution of matrix A and matrix B in-place.</span></div>
<div class="line"><a name="l01314"></a><span class="lineno"> 1314</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01315"></a><span class="lineno"> 1315</span>&#160;<span class="comment"> * @attention The k_offset = a_offset * b_offset * k (where k is the number of matrix A columns) needs to be passed at compile time using -DK_OFFSET (i.e. -DK_OFFSET=1200)</span></div>
<div class="line"><a name="l01316"></a><span class="lineno"> 1316</span>&#160;<span class="comment"> * @note In case the offset contribution due to a_offset is required, a_offset needs to be passed at compile time using -DA_OFFSET (i.e. -DA_OFFSET=1)</span></div>
<div class="line"><a name="l01317"></a><span class="lineno"> 1317</span>&#160;<span class="comment"> * @note In case the offset contribution due to b_offset is required, b_offset needs to be passed at compile time using -DB_OFFSET (i.e. -DB_OFFSET=6)</span></div>
<div class="line"><a name="l01318"></a><span class="lineno"> 1318</span>&#160;<span class="comment"> * @note In case sum_col has batches, -DSUM_COL_HAS_BATCHES must be passed at compile time. Usually if gemmlowp is used to accelerate convolution layer, sum_col will not have batches</span></div>
<div class="line"><a name="l01319"></a><span class="lineno"> 1319</span>&#160;<span class="comment"> * @note Vector size should be given as a preprocessor argument using -DVEC_SIZE=size. e.g. -DVEC_SIZE=16</span></div>
<div class="line"><a name="l01320"></a><span class="lineno"> 1320</span>&#160;<span class="comment"> * @note Leftover vector size has to be passed at compile time using -DVEC_SIZE_LEFTOVER. e.g. -DVEC_SIZE_LEFTOVER=3. It is defined as the remainder between the input&#39;s first dimension and VEC_SIZE</span></div>
<div class="line"><a name="l01321"></a><span class="lineno"> 1321</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01322"></a><span class="lineno"> 1322</span>&#160;<span class="comment"> * The final result is:</span></div>
<div class="line"><a name="l01323"></a><span class="lineno"> 1323</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01324"></a><span class="lineno"> 1324</span>&#160;<span class="comment"> * mm_result[i][k] = mm_result[i][k] +</span></div>
<div class="line"><a name="l01325"></a><span class="lineno"> 1325</span>&#160;<span class="comment"> *                   (sum_col[k] * A_OFFSET) +</span></div>
<div class="line"><a name="l01326"></a><span class="lineno"> 1326</span>&#160;<span class="comment"> *                   (sum_row[i] * B_OFFSET) +</span></div>
<div class="line"><a name="l01327"></a><span class="lineno"> 1327</span>&#160;<span class="comment"> *                   (K_OFFSET)</span></div>
<div class="line"><a name="l01328"></a><span class="lineno"> 1328</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160;<span class="comment"> * @param[in] mm_result_ptr                           Pointer to the source tensor. Supported data type: S32</span></div>
<div class="line"><a name="l01330"></a><span class="lineno"> 1330</span>&#160;<span class="comment"> * @param[in] mm_result_stride_x                      Stride of the source tensor in X dimension (in bytes)</span></div>
<div class="line"><a name="l01331"></a><span class="lineno"> 1331</span>&#160;<span class="comment"> * @param[in] mm_result_step_x                        mm_result_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01332"></a><span class="lineno"> 1332</span>&#160;<span class="comment"> * @param[in] mm_result_stride_y                      Stride of the source tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l01333"></a><span class="lineno"> 1333</span>&#160;<span class="comment"> * @param[in] mm_result_step_y                        mm_result_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01334"></a><span class="lineno"> 1334</span>&#160;<span class="comment"> * @param[in] mm_result_stride_z                      Stride of the source tensor in Z dimension (in bytes)</span></div>
<div class="line"><a name="l01335"></a><span class="lineno"> 1335</span>&#160;<span class="comment"> * @param[in] mm_result_step_z                        mm_result_stride_z * number of elements along Z processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01336"></a><span class="lineno"> 1336</span>&#160;<span class="comment"> * @param[in] mm_result_offset_first_element_in_bytes The offset of the first element in the source tensor</span></div>
<div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;<span class="comment"> * @param[in] sum_col_ptr                             (Optional) Pointer to the source tensor. Supported data type: same as @p mm_result_ptr</span></div>
<div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160;<span class="comment"> * @param[in] sum_col_stride_x                        (Optional) Stride of the source tensor in X dimension (in bytes)</span></div>
<div class="line"><a name="l01339"></a><span class="lineno"> 1339</span>&#160;<span class="comment"> * @param[in] sum_col_step_x                          (Optional) sum_col_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01340"></a><span class="lineno"> 1340</span>&#160;<span class="comment"> * @param[in] sum_col_stride_y                        (Optional) Stride of the source tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l01341"></a><span class="lineno"> 1341</span>&#160;<span class="comment"> * @param[in] sum_col_step_y                          (Optional) sum_col_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01342"></a><span class="lineno"> 1342</span>&#160;<span class="comment"> * @param[in] sum_col_offset_first_element_in_bytes   (Optional) The offset of the first element in the source tensor</span></div>
<div class="line"><a name="l01343"></a><span class="lineno"> 1343</span>&#160;<span class="comment"> * @param[in] sum_row_ptr                             (Optional) Pointer to the source tensor. Supported data type: same as @p mm_result_ptr</span></div>
<div class="line"><a name="l01344"></a><span class="lineno"> 1344</span>&#160;<span class="comment"> * @param[in] sum_row_stride_x                        (Optional) Stride of the source tensor in X dimension (in bytes)</span></div>
<div class="line"><a name="l01345"></a><span class="lineno"> 1345</span>&#160;<span class="comment"> * @param[in] sum_row_step_x                          (Optional) sum_row_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01346"></a><span class="lineno"> 1346</span>&#160;<span class="comment"> * @param[in] sum_row_stride_y                        (Optional) Stride of the source tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l01347"></a><span class="lineno"> 1347</span>&#160;<span class="comment"> * @param[in] sum_row_step_y                          (Optional) sum_row_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;<span class="comment"> * @param[in] sum_row_offset_first_element_in_bytes   (Optional) The offset of the first element in the source tensor</span></div>
<div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160;<span class="comment"> * @param[in] biases_ptr                              (Optional) Pointer to the biases tensor. Supported data type: same as @p src_ptr</span></div>
<div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;<span class="comment"> * @param[in] biases_stride_x                         (Optional) Stride of the biases tensor in X dimension (in bytes)</span></div>
<div class="line"><a name="l01351"></a><span class="lineno"> 1351</span>&#160;<span class="comment"> * @param[in] biases_step_x                           (Optional) biases_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01352"></a><span class="lineno"> 1352</span>&#160;<span class="comment"> * @param[in] biases_offset_first_element_in_bytes    (Optional) The offset of the first element in the biases tensor</span></div>
<div class="line"><a name="l01353"></a><span class="lineno"> 1353</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l01354"></a><span class="lineno"> 1354</span>&#160;__kernel <span class="keywordtype">void</span> gemmlowp_offset_contribution(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(mm_result)</div>
<div class="line"><a name="l01355"></a><span class="lineno"> 1355</span>&#160;#<span class="keywordflow">if</span> defined(A_OFFSET)</div>
<div class="line"><a name="l01356"></a><span class="lineno"> 1356</span>&#160;                                           ,</div>
<div class="line"><a name="l01357"></a><span class="lineno"> 1357</span>&#160;                                           <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(sum_col)</div>
<div class="line"><a name="l01358"></a><span class="lineno"> 1358</span>&#160;#endif <span class="comment">// defined(A_OFFSET)</span></div>
<div class="line"><a name="l01359"></a><span class="lineno"> 1359</span>&#160;#<span class="keywordflow">if</span> defined(B_OFFSET)</div>
<div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160;                                           ,</div>
<div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;                                           <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(sum_row)</div>
<div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;#endif <span class="comment">// defined(B_OFFSET)</span></div>
<div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;#<span class="keywordflow">if</span> defined(ADD_BIAS)</div>
<div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160;                                           ,</div>
<div class="line"><a name="l01365"></a><span class="lineno"> 1365</span>&#160;                                           <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(biases)</div>
<div class="line"><a name="l01366"></a><span class="lineno"> 1366</span>&#160;#endif <span class="comment">// defined(ADD_BIAS))</span></div>
<div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;                                          )</div>
<div class="line"><a name="l01368"></a><span class="lineno"> 1368</span>&#160;{</div>
<div class="line"><a name="l01369"></a><span class="lineno"> 1369</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> x = max((<span class="keywordtype">int</span>)(get_global_id(0) * <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a> - (<a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a> - VEC_SIZE_LEFTOVER) % <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>), 0);</div>
<div class="line"><a name="l01370"></a><span class="lineno"> 1370</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> y = get_global_id(1);</div>
<div class="line"><a name="l01371"></a><span class="lineno"> 1371</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> z = get_global_id(2);</div>
<div class="line"><a name="l01372"></a><span class="lineno"> 1372</span>&#160; </div>
<div class="line"><a name="l01373"></a><span class="lineno"> 1373</span>&#160;    <span class="comment">// Compute offset contribution</span></div>
<div class="line"><a name="l01374"></a><span class="lineno"> 1374</span>&#160;    VEC_INT offset_term_s32 = offset_contribution(</div>
<div class="line"><a name="l01375"></a><span class="lineno"> 1375</span>&#160;                                  x, y, z</div>
<div class="line"><a name="l01376"></a><span class="lineno"> 1376</span>&#160;#<span class="keywordflow">if</span> defined(A_OFFSET)</div>
<div class="line"><a name="l01377"></a><span class="lineno"> 1377</span>&#160;                                  ,</div>
<div class="line"><a name="l01378"></a><span class="lineno"> 1378</span>&#160;                                  sum_col_ptr,</div>
<div class="line"><a name="l01379"></a><span class="lineno"> 1379</span>&#160;                                  sum_col_stride_x,</div>
<div class="line"><a name="l01380"></a><span class="lineno"> 1380</span>&#160;                                  sum_col_step_x,</div>
<div class="line"><a name="l01381"></a><span class="lineno"> 1381</span>&#160;                                  sum_col_stride_y,</div>
<div class="line"><a name="l01382"></a><span class="lineno"> 1382</span>&#160;                                  sum_col_step_y,</div>
<div class="line"><a name="l01383"></a><span class="lineno"> 1383</span>&#160;                                  sum_col_offset_first_element_in_bytes</div>
<div class="line"><a name="l01384"></a><span class="lineno"> 1384</span>&#160;#endif <span class="comment">// defined(A_OFFSET)</span></div>
<div class="line"><a name="l01385"></a><span class="lineno"> 1385</span>&#160;#<span class="keywordflow">if</span> defined(B_OFFSET)</div>
<div class="line"><a name="l01386"></a><span class="lineno"> 1386</span>&#160;                                  ,</div>
<div class="line"><a name="l01387"></a><span class="lineno"> 1387</span>&#160;                                  sum_row_ptr,</div>
<div class="line"><a name="l01388"></a><span class="lineno"> 1388</span>&#160;                                  sum_row_stride_x,</div>
<div class="line"><a name="l01389"></a><span class="lineno"> 1389</span>&#160;                                  sum_row_step_x,</div>
<div class="line"><a name="l01390"></a><span class="lineno"> 1390</span>&#160;                                  sum_row_stride_y,</div>
<div class="line"><a name="l01391"></a><span class="lineno"> 1391</span>&#160;                                  sum_row_step_y,</div>
<div class="line"><a name="l01392"></a><span class="lineno"> 1392</span>&#160;                                  sum_row_offset_first_element_in_bytes</div>
<div class="line"><a name="l01393"></a><span class="lineno"> 1393</span>&#160;#endif <span class="comment">// defined(B_OFFSET)</span></div>
<div class="line"><a name="l01394"></a><span class="lineno"> 1394</span>&#160;#<span class="keywordflow">if</span> defined(ADD_BIAS)</div>
<div class="line"><a name="l01395"></a><span class="lineno"> 1395</span>&#160;                                  ,</div>
<div class="line"><a name="l01396"></a><span class="lineno"> 1396</span>&#160;                                  biases_ptr,</div>
<div class="line"><a name="l01397"></a><span class="lineno"> 1397</span>&#160;                                  biases_stride_x,</div>
<div class="line"><a name="l01398"></a><span class="lineno"> 1398</span>&#160;                                  biases_step_x,</div>
<div class="line"><a name="l01399"></a><span class="lineno"> 1399</span>&#160;                                  biases_offset_first_element_in_bytes</div>
<div class="line"><a name="l01400"></a><span class="lineno"> 1400</span>&#160;#endif <span class="comment">// defined(ADD_BIAS)</span></div>
<div class="line"><a name="l01401"></a><span class="lineno"> 1401</span>&#160;                              );</div>
<div class="line"><a name="l01402"></a><span class="lineno"> 1402</span>&#160; </div>
<div class="line"><a name="l01403"></a><span class="lineno"> 1403</span>&#160;    __global uchar *mm_result_addr = mm_result_ptr + mm_result_offset_first_element_in_bytes + x * <span class="keyword">sizeof</span>(int) + y * mm_result_stride_y + z * mm_result_stride_z;</div>
<div class="line"><a name="l01404"></a><span class="lineno"> 1404</span>&#160; </div>
<div class="line"><a name="l01405"></a><span class="lineno"> 1405</span>&#160;    VEC_INT in_s32_0 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(<a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)(0, (__global <span class="keywordtype">int</span> *)mm_result_addr);</div>
<div class="line"><a name="l01406"></a><span class="lineno"> 1406</span>&#160; </div>
<div class="line"><a name="l01407"></a><span class="lineno"> 1407</span>&#160;    <span class="comment">// Add the offset terms to GEMM&#39;s result</span></div>
<div class="line"><a name="l01408"></a><span class="lineno"> 1408</span>&#160;    in_s32_0 += offset_term_s32;</div>
<div class="line"><a name="l01409"></a><span class="lineno"> 1409</span>&#160; </div>
<div class="line"><a name="l01410"></a><span class="lineno"> 1410</span>&#160;    <span class="comment">// Store the result with the offset contribution</span></div>
<div class="line"><a name="l01411"></a><span class="lineno"> 1411</span>&#160;    <a class="code" href="load__store__utility_8h.xhtml#a270acb3e45f182ebb6526f3e85eadd14">STORE_VECTOR_SELECT</a>(in_s32_, <span class="keywordtype">int</span>, mm_result_addr, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>, VEC_SIZE_LEFTOVER, VEC_SIZE_LEFTOVER != 0 &amp;&amp; get_global_id(0) == 0)</div>
<div class="line"><a name="l01412"></a><span class="lineno"> 1412</span>&#160;}</div>
<div class="line"><a name="l01413"></a><span class="lineno"> 1413</span>&#160;<span class="preprocessor">#endif // defined(GEMMLOWP_OFFSET_CONTRIBUTION)</span></div>
<div class="line"><a name="l01414"></a><span class="lineno"> 1414</span>&#160; </div>
<div class="line"><a name="l01415"></a><span class="lineno"> 1415</span>&#160;<span class="preprocessor">#if defined(GEMMLOWP_OFFSET_CONTRIBUTION_QUANTIZE_DOWN)</span></div>
<div class="line"><a name="l01416"></a><span class="lineno"> 1416</span>&#160;<span class="comment">/* OpenCL kernel used to add the offset contribution after @ref CLGEMMLowpMatrixMultiplyKernel and it quantizes down to uint8.</span></div>
<div class="line"><a name="l01417"></a><span class="lineno"> 1417</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01418"></a><span class="lineno"> 1418</span>&#160;<span class="comment"> * This kernel takes a final int32 accumulator value (the output of @CLGEMMLowpMatrixMultiplyKernel), adds to it the offset contribution of matrix A and matrix B and quantizes to uint8 through the output stage.</span></div>
<div class="line"><a name="l01419"></a><span class="lineno"> 1419</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01420"></a><span class="lineno"> 1420</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01421"></a><span class="lineno"> 1421</span>&#160;<span class="comment"> * @attention The k_offset = a_offset * b_offset * k (where k is the number of matrix A columns) needs to be passed at compile time using -DK_OFFSET (i.e. -DK_OFFSET=1200)</span></div>
<div class="line"><a name="l01422"></a><span class="lineno"> 1422</span>&#160;<span class="comment"> * @note In case the offset contribution due to a_offset is required, a_offset needs to be passed at compile time using -DA_OFFSET (i.e. -DA_OFFSET=1)</span></div>
<div class="line"><a name="l01423"></a><span class="lineno"> 1423</span>&#160;<span class="comment"> * @note In case the offset contribution due to b_offset is required, b_offset needs to be passed at compile time using -DB_OFFSET (i.e. -DB_OFFSET=6)</span></div>
<div class="line"><a name="l01424"></a><span class="lineno"> 1424</span>&#160;<span class="comment"> * @note In case sum_col has batches, -DSUM_COL_HAS_BATCHES must be passed at compile time. Usually if gemmlowp is used to accelerate convolution layer, sum_col will not have batches</span></div>
<div class="line"><a name="l01425"></a><span class="lineno"> 1425</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01426"></a><span class="lineno"> 1426</span>&#160;<span class="comment"> * The result before the output stage is:</span></div>
<div class="line"><a name="l01427"></a><span class="lineno"> 1427</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01428"></a><span class="lineno"> 1428</span>&#160;<span class="comment"> * mm_result[i][k] = mm_result[i][k] +</span></div>
<div class="line"><a name="l01429"></a><span class="lineno"> 1429</span>&#160;<span class="comment"> *                   (sum_col[k] * A_OFFSET) +</span></div>
<div class="line"><a name="l01430"></a><span class="lineno"> 1430</span>&#160;<span class="comment"> *                   (sum_row[i] * B_OFFSET) +</span></div>
<div class="line"><a name="l01431"></a><span class="lineno"> 1431</span>&#160;<span class="comment"> *                   (K_OFFSET)</span></div>
<div class="line"><a name="l01432"></a><span class="lineno"> 1432</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01433"></a><span class="lineno"> 1433</span>&#160;<span class="comment"> * This result is quantized down to uint8/int8 using the output stage. The output stage computes the following operations:</span></div>
<div class="line"><a name="l01434"></a><span class="lineno"> 1434</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01435"></a><span class="lineno"> 1435</span>&#160;<span class="comment"> *  -# Add offset terms to final result</span></div>
<div class="line"><a name="l01436"></a><span class="lineno"> 1436</span>&#160;<span class="comment"> *  -# Multiply each entry of result by result_mult_int</span></div>
<div class="line"><a name="l01437"></a><span class="lineno"> 1437</span>&#160;<span class="comment"> *  -# Add bias to final result (if -DADD_BIAS is passed at compile time)</span></div>
<div class="line"><a name="l01438"></a><span class="lineno"> 1438</span>&#160;<span class="comment"> *  -# Shift the int32 accumulator by result_shift</span></div>
<div class="line"><a name="l01439"></a><span class="lineno"> 1439</span>&#160;<span class="comment"> *  -# Clamp the value between the specified min and max bounds (if -DMIN_BOUND and/or -DMAX_BOUND are passed at compile time)</span></div>
<div class="line"><a name="l01440"></a><span class="lineno"> 1440</span>&#160;<span class="comment"> *  -# Clamp the resulting int32 values:</span></div>
<div class="line"><a name="l01441"></a><span class="lineno"> 1441</span>&#160;<span class="comment"> *      - to the [0..255] range and cast to QASYMM8.</span></div>
<div class="line"><a name="l01442"></a><span class="lineno"> 1442</span>&#160;<span class="comment"> *      - to the [-128..127] range and cast to QASYMM8_SIGNED.</span></div>
<div class="line"><a name="l01443"></a><span class="lineno"> 1443</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01444"></a><span class="lineno"> 1444</span>&#160;<span class="comment"> * @attention The offset, scalar scale factor and number of bits to shift right of output tensor must be passed at compile time using -DRESULT_OFFSET, -RESULT_MULT_INT and -DRESULT_SHIFT</span></div>
<div class="line"><a name="l01445"></a><span class="lineno"> 1445</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01446"></a><span class="lineno"> 1446</span>&#160;<span class="comment"> * @note In case the addition of int32 biases is required, -DADD_BIAS should be passed at compile time</span></div>
<div class="line"><a name="l01447"></a><span class="lineno"> 1447</span>&#160;<span class="comment"> * @note The output datatype should be passed at compile time using -DOUTPUT_DATA_TYPE</span></div>
<div class="line"><a name="l01448"></a><span class="lineno"> 1448</span>&#160;<span class="comment"> * @note In case the clamping of the result is required, the min and max bounds can be passed at compile time using -DMIN_BOUND and -DMAX_BOUND.</span></div>
<div class="line"><a name="l01449"></a><span class="lineno"> 1449</span>&#160;<span class="comment"> *       These values can be used to implement &quot;rectified linear unit&quot; activation functions</span></div>
<div class="line"><a name="l01450"></a><span class="lineno"> 1450</span>&#160;<span class="comment"> * @note Vector size should be given as a preprocessor argument using -DVEC_SIZE=size. e.g. -DVEC_SIZE=16</span></div>
<div class="line"><a name="l01451"></a><span class="lineno"> 1451</span>&#160;<span class="comment"> * @note Leftover vector size has to be passed at compile time using -DVEC_SIZE_LEFTOVER. e.g. -DVEC_SIZE_LEFTOVER=3. It is defined as the remainder between the input&#39;s first dimension and VEC_SIZE</span></div>
<div class="line"><a name="l01452"></a><span class="lineno"> 1452</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01453"></a><span class="lineno"> 1453</span>&#160;<span class="comment"> * @param[in]  mm_result_ptr                                    Pointer to the source tensor. Supported data type: S32</span></div>
<div class="line"><a name="l01454"></a><span class="lineno"> 1454</span>&#160;<span class="comment"> * @param[in]  mm_result_stride_x                               Stride of the source tensor in X dimension (in bytes)</span></div>
<div class="line"><a name="l01455"></a><span class="lineno"> 1455</span>&#160;<span class="comment"> * @param[in]  mm_result_step_x                                 mm_result_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01456"></a><span class="lineno"> 1456</span>&#160;<span class="comment"> * @param[in]  mm_result_stride_y                               Stride of the source tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l01457"></a><span class="lineno"> 1457</span>&#160;<span class="comment"> * @param[in]  mm_result_step_y                                 mm_result_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01458"></a><span class="lineno"> 1458</span>&#160;<span class="comment"> * @param[in]  mm_result_stride_z                               Stride of the source tensor in Z dimension (in bytes)</span></div>
<div class="line"><a name="l01459"></a><span class="lineno"> 1459</span>&#160;<span class="comment"> * @param[in]  mm_result_step_z                                 mm_result_stride_z * number of elements along Z processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01460"></a><span class="lineno"> 1460</span>&#160;<span class="comment"> * @param[in]  mm_result_offset_first_element_in_bytes          The offset of the first element in the source tensor</span></div>
<div class="line"><a name="l01461"></a><span class="lineno"> 1461</span>&#160;<span class="comment"> * @param[in]  sum_col_ptr                                      (Optional) Pointer to the source tensor. Supported data type: same as @p mm_result_ptr</span></div>
<div class="line"><a name="l01462"></a><span class="lineno"> 1462</span>&#160;<span class="comment"> * @param[in]  sum_col_stride_x                                 (Optional) Stride of the source tensor in X dimension (in bytes)</span></div>
<div class="line"><a name="l01463"></a><span class="lineno"> 1463</span>&#160;<span class="comment"> * @param[in]  sum_col_step_x                                   (Optional) sum_col_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01464"></a><span class="lineno"> 1464</span>&#160;<span class="comment"> * @param[in]  sum_col_stride_y                                 (Optional) Stride of the source tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l01465"></a><span class="lineno"> 1465</span>&#160;<span class="comment"> * @param[in]  sum_col_step_y                                   (Optional) sum_col_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01466"></a><span class="lineno"> 1466</span>&#160;<span class="comment"> * @param[in]  sum_col_offset_first_element_in_bytes            (Optional) The offset of the first element in the source tensor</span></div>
<div class="line"><a name="l01467"></a><span class="lineno"> 1467</span>&#160;<span class="comment"> * @param[in]  sum_row_ptr                                      (Optional) Pointer to the source tensor. Supported data type: same as @p mm_result_ptr</span></div>
<div class="line"><a name="l01468"></a><span class="lineno"> 1468</span>&#160;<span class="comment"> * @param[in]  sum_row_stride_x                                 (Optional) Stride of the source tensor in X dimension (in bytes)</span></div>
<div class="line"><a name="l01469"></a><span class="lineno"> 1469</span>&#160;<span class="comment"> * @param[in]  sum_row_step_x                                   (Optional) sum_row_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01470"></a><span class="lineno"> 1470</span>&#160;<span class="comment"> * @param[in]  sum_row_stride_y                                 (Optional) Stride of the source tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l01471"></a><span class="lineno"> 1471</span>&#160;<span class="comment"> * @param[in]  sum_row_step_y                                   (Optional) sum_row_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01472"></a><span class="lineno"> 1472</span>&#160;<span class="comment"> * @param[in]  sum_row_offset_first_element_in_bytes            (Optional) The offset of the first element in the source tensor</span></div>
<div class="line"><a name="l01473"></a><span class="lineno"> 1473</span>&#160;<span class="comment"> * @param[in]  biases_ptr                                       (Optional) Pointer to the biases tensor. Supported data type: same as @p src_ptr</span></div>
<div class="line"><a name="l01474"></a><span class="lineno"> 1474</span>&#160;<span class="comment"> * @param[in]  biases_stride_x                                  (Optional) Stride of the biases tensor in X dimension (in bytes)</span></div>
<div class="line"><a name="l01475"></a><span class="lineno"> 1475</span>&#160;<span class="comment"> * @param[in]  biases_step_x                                    (Optional) biases_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01476"></a><span class="lineno"> 1476</span>&#160;<span class="comment"> * @param[in]  biases_offset_first_element_in_bytes             (Optional) The offset of the first element in the biases tensor</span></div>
<div class="line"><a name="l01477"></a><span class="lineno"> 1477</span>&#160;<span class="comment"> * @param[out] dst_ptr                                          Pointer to the destination tensor Supported data type: QASYMM8/QASYMM8_SIGNED</span></div>
<div class="line"><a name="l01478"></a><span class="lineno"> 1478</span>&#160;<span class="comment"> * @param[in]  dst_stride_x                                     Stride of the destination tensor in X dimension (in bytes)</span></div>
<div class="line"><a name="l01479"></a><span class="lineno"> 1479</span>&#160;<span class="comment"> * @param[in]  dst_step_x                                       dst_gx_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01480"></a><span class="lineno"> 1480</span>&#160;<span class="comment"> * @param[in]  dst_stride_y                                     Stride of the destination tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l01481"></a><span class="lineno"> 1481</span>&#160;<span class="comment"> * @param[in]  dst_step_y                                       dst_gx_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01482"></a><span class="lineno"> 1482</span>&#160;<span class="comment"> * @param[in]  dst_stride_z                                     Stride of the source tensor in Z dimension (in bytes)</span></div>
<div class="line"><a name="l01483"></a><span class="lineno"> 1483</span>&#160;<span class="comment"> * @param[in]  dst_step_z                                       src_stride_z * number of elements along Z processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01484"></a><span class="lineno"> 1484</span>&#160;<span class="comment"> * @param[in]  dst_offset_first_element_in_bytes                The offset of the first element in the destination tensor</span></div>
<div class="line"><a name="l01485"></a><span class="lineno"> 1485</span>&#160;<span class="comment"> * @param[in]  result_multipliers_ptr                           (Optional) Pointer to the output multipliers vector for per-channel quantization. Supported data types: S32</span></div>
<div class="line"><a name="l01486"></a><span class="lineno"> 1486</span>&#160;<span class="comment"> * @param[in]  result_multipliers_stride_x                      (Optional) Stride of the output multipliers vector in X dimension (in bytes)</span></div>
<div class="line"><a name="l01487"></a><span class="lineno"> 1487</span>&#160;<span class="comment"> * @param[in]  result_multipliers_step_x                        (Optional) output_multipliers_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01488"></a><span class="lineno"> 1488</span>&#160;<span class="comment"> * @param[in]  result_multipliers_offset_first_element_in_bytes (Optional) The offset of the first element in the output multipliers vector</span></div>
<div class="line"><a name="l01489"></a><span class="lineno"> 1489</span>&#160;<span class="comment"> * @param[in]  result_shifts_ptr                                (Optional) Pointer to the output shifts vector for per-channel quantization. Supported data types: S32</span></div>
<div class="line"><a name="l01490"></a><span class="lineno"> 1490</span>&#160;<span class="comment"> * @param[in]  result_shifts_stride_x                           (Optional) Stride of the output shifts vector in X dimension (in bytes)</span></div>
<div class="line"><a name="l01491"></a><span class="lineno"> 1491</span>&#160;<span class="comment"> * @param[in]  result_shifts_step_x                             (Optional) output_shifts_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01492"></a><span class="lineno"> 1492</span>&#160;<span class="comment"> * @param[in]  result_shifts_offset_first_element_in_bytes      (Optional) The offset of the first element in the output shifts vector</span></div>
<div class="line"><a name="l01493"></a><span class="lineno"> 1493</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l01494"></a><span class="lineno"> 1494</span>&#160;__kernel <span class="keywordtype">void</span> gemmlowp_offset_contribution_quantize_down(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(mm_result)</div>
<div class="line"><a name="l01495"></a><span class="lineno"> 1495</span>&#160;#<span class="keywordflow">if</span> defined(A_OFFSET)</div>
<div class="line"><a name="l01496"></a><span class="lineno"> 1496</span>&#160;                                                         ,</div>
<div class="line"><a name="l01497"></a><span class="lineno"> 1497</span>&#160;                                                         <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(sum_col)</div>
<div class="line"><a name="l01498"></a><span class="lineno"> 1498</span>&#160;#endif <span class="comment">// defined(A_OFFSET)</span></div>
<div class="line"><a name="l01499"></a><span class="lineno"> 1499</span>&#160;#<span class="keywordflow">if</span> defined(B_OFFSET)</div>
<div class="line"><a name="l01500"></a><span class="lineno"> 1500</span>&#160;                                                         ,</div>
<div class="line"><a name="l01501"></a><span class="lineno"> 1501</span>&#160;                                                         <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(sum_row)</div>
<div class="line"><a name="l01502"></a><span class="lineno"> 1502</span>&#160;#endif <span class="comment">// defined(B_OFFSET)</span></div>
<div class="line"><a name="l01503"></a><span class="lineno"> 1503</span>&#160;                                                         ,</div>
<div class="line"><a name="l01504"></a><span class="lineno"> 1504</span>&#160;#<span class="keywordflow">if</span> defined(ADD_BIAS)</div>
<div class="line"><a name="l01505"></a><span class="lineno"> 1505</span>&#160;                                                         <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(biases),</div>
<div class="line"><a name="l01506"></a><span class="lineno"> 1506</span>&#160;#endif <span class="comment">// defined(ADD_BIAS)</span></div>
<div class="line"><a name="l01507"></a><span class="lineno"> 1507</span>&#160;                                                         <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>)</div>
<div class="line"><a name="l01508"></a><span class="lineno"> 1508</span>&#160;#<span class="keywordflow">if</span> defined(PER_CHANNEL_QUANTIZATION)</div>
<div class="line"><a name="l01509"></a><span class="lineno"> 1509</span>&#160;                                                         ,</div>
<div class="line"><a name="l01510"></a><span class="lineno"> 1510</span>&#160;                                                         <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(result_multipliers),</div>
<div class="line"><a name="l01511"></a><span class="lineno"> 1511</span>&#160;                                                         <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(result_shifts)</div>
<div class="line"><a name="l01512"></a><span class="lineno"> 1512</span>&#160;#endif <span class="comment">// defined(PER_CHANNEL_QUANTIZATION)</span></div>
<div class="line"><a name="l01513"></a><span class="lineno"> 1513</span>&#160;                                                        )</div>
<div class="line"><a name="l01514"></a><span class="lineno"> 1514</span>&#160;{</div>
<div class="line"><a name="l01515"></a><span class="lineno"> 1515</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> x = max((<span class="keywordtype">int</span>)(get_global_id(0) * <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a> - (<a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a> - VEC_SIZE_LEFTOVER) % <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>), 0);</div>
<div class="line"><a name="l01516"></a><span class="lineno"> 1516</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> y = get_global_id(1);</div>
<div class="line"><a name="l01517"></a><span class="lineno"> 1517</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> z = get_global_id(2);</div>
<div class="line"><a name="l01518"></a><span class="lineno"> 1518</span>&#160; </div>
<div class="line"><a name="l01519"></a><span class="lineno"> 1519</span>&#160;    __global uchar *dst_addr = dst_ptr + dst_offset_first_element_in_bytes + x + y * dst_stride_y + z * dst_stride_z;</div>
<div class="line"><a name="l01520"></a><span class="lineno"> 1520</span>&#160; </div>
<div class="line"><a name="l01521"></a><span class="lineno"> 1521</span>&#160;    <span class="comment">// Compute offset contribution</span></div>
<div class="line"><a name="l01522"></a><span class="lineno"> 1522</span>&#160;    VEC_INT offset_term_s32 = offset_contribution(</div>
<div class="line"><a name="l01523"></a><span class="lineno"> 1523</span>&#160;                                  x, y, z</div>
<div class="line"><a name="l01524"></a><span class="lineno"> 1524</span>&#160;#<span class="keywordflow">if</span> defined(A_OFFSET)</div>
<div class="line"><a name="l01525"></a><span class="lineno"> 1525</span>&#160;                                  ,</div>
<div class="line"><a name="l01526"></a><span class="lineno"> 1526</span>&#160;                                  sum_col_ptr,</div>
<div class="line"><a name="l01527"></a><span class="lineno"> 1527</span>&#160;                                  sum_col_stride_x,</div>
<div class="line"><a name="l01528"></a><span class="lineno"> 1528</span>&#160;                                  sum_col_step_x,</div>
<div class="line"><a name="l01529"></a><span class="lineno"> 1529</span>&#160;                                  sum_col_stride_y,</div>
<div class="line"><a name="l01530"></a><span class="lineno"> 1530</span>&#160;                                  sum_col_step_y,</div>
<div class="line"><a name="l01531"></a><span class="lineno"> 1531</span>&#160;                                  sum_col_offset_first_element_in_bytes</div>
<div class="line"><a name="l01532"></a><span class="lineno"> 1532</span>&#160;#endif <span class="comment">// defined(A_OFFSET)</span></div>
<div class="line"><a name="l01533"></a><span class="lineno"> 1533</span>&#160;#<span class="keywordflow">if</span> defined(B_OFFSET)</div>
<div class="line"><a name="l01534"></a><span class="lineno"> 1534</span>&#160;                                  ,</div>
<div class="line"><a name="l01535"></a><span class="lineno"> 1535</span>&#160;                                  sum_row_ptr,</div>
<div class="line"><a name="l01536"></a><span class="lineno"> 1536</span>&#160;                                  sum_row_stride_x,</div>
<div class="line"><a name="l01537"></a><span class="lineno"> 1537</span>&#160;                                  sum_row_step_x,</div>
<div class="line"><a name="l01538"></a><span class="lineno"> 1538</span>&#160;                                  sum_row_stride_y,</div>
<div class="line"><a name="l01539"></a><span class="lineno"> 1539</span>&#160;                                  sum_row_step_y,</div>
<div class="line"><a name="l01540"></a><span class="lineno"> 1540</span>&#160;                                  sum_row_offset_first_element_in_bytes</div>
<div class="line"><a name="l01541"></a><span class="lineno"> 1541</span>&#160;#endif <span class="comment">// defined(B_OFFSET)</span></div>
<div class="line"><a name="l01542"></a><span class="lineno"> 1542</span>&#160;#<span class="keywordflow">if</span> defined(ADD_BIAS)</div>
<div class="line"><a name="l01543"></a><span class="lineno"> 1543</span>&#160;                                  ,</div>
<div class="line"><a name="l01544"></a><span class="lineno"> 1544</span>&#160;                                  biases_ptr,</div>
<div class="line"><a name="l01545"></a><span class="lineno"> 1545</span>&#160;                                  biases_stride_x,</div>
<div class="line"><a name="l01546"></a><span class="lineno"> 1546</span>&#160;                                  biases_step_x,</div>
<div class="line"><a name="l01547"></a><span class="lineno"> 1547</span>&#160;                                  biases_offset_first_element_in_bytes</div>
<div class="line"><a name="l01548"></a><span class="lineno"> 1548</span>&#160;#endif <span class="comment">// defined(ADD_BIAS)</span></div>
<div class="line"><a name="l01549"></a><span class="lineno"> 1549</span>&#160;                              );</div>
<div class="line"><a name="l01550"></a><span class="lineno"> 1550</span>&#160; </div>
<div class="line"><a name="l01551"></a><span class="lineno"> 1551</span>&#160;    __global uchar *mm_result_addr = mm_result_ptr + mm_result_offset_first_element_in_bytes + x * <span class="keyword">sizeof</span>(int) + y * mm_result_stride_y + z * mm_result_stride_z;</div>
<div class="line"><a name="l01552"></a><span class="lineno"> 1552</span>&#160; </div>
<div class="line"><a name="l01553"></a><span class="lineno"> 1553</span>&#160;    VEC_INT in_s32 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(<a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)(0, (__global <span class="keywordtype">int</span> *)mm_result_addr);</div>
<div class="line"><a name="l01554"></a><span class="lineno"> 1554</span>&#160; </div>
<div class="line"><a name="l01555"></a><span class="lineno"> 1555</span>&#160;    <span class="comment">// Add the offset terms to GEMM&#39;s result</span></div>
<div class="line"><a name="l01556"></a><span class="lineno"> 1556</span>&#160;    in_s32 += offset_term_s32;</div>
<div class="line"><a name="l01557"></a><span class="lineno"> 1557</span>&#160; </div>
<div class="line"><a name="l01558"></a><span class="lineno"> 1558</span>&#160;    <span class="comment">// -------------- OUTPUT STAGE</span></div>
<div class="line"><a name="l01559"></a><span class="lineno"> 1559</span>&#160; </div>
<div class="line"><a name="l01560"></a><span class="lineno"> 1560</span>&#160;    <span class="comment">// Add the offset terms to GEMM&#39;s result</span></div>
<div class="line"><a name="l01561"></a><span class="lineno"> 1561</span>&#160;    in_s32 += (VEC_INT)RESULT_OFFSET;</div>
<div class="line"><a name="l01562"></a><span class="lineno"> 1562</span>&#160; </div>
<div class="line"><a name="l01563"></a><span class="lineno"> 1563</span>&#160;    <span class="comment">// Multiply by result_mult_int and shift</span></div>
<div class="line"><a name="l01564"></a><span class="lineno"> 1564</span>&#160;<span class="preprocessor">#if defined(PER_CHANNEL_QUANTIZATION)</span></div>
<div class="line"><a name="l01565"></a><span class="lineno"> 1565</span>&#160;    __global uchar *result_multipliers_addr   = result_multipliers_ptr + result_multipliers_offset_first_element_in_bytes + x * <span class="keyword">sizeof</span>(int);</div>
<div class="line"><a name="l01566"></a><span class="lineno"> 1566</span>&#160;    __global uchar *result_shifts_addr        = result_shifts_ptr + result_shifts_offset_first_element_in_bytes + x * <span class="keyword">sizeof</span>(int);</div>
<div class="line"><a name="l01567"></a><span class="lineno"> 1567</span>&#160;    VEC_INT         result_multipliers_values = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(<a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)(0, (__global <span class="keywordtype">int</span> *)result_multipliers_addr);</div>
<div class="line"><a name="l01568"></a><span class="lineno"> 1568</span>&#160;    VEC_INT         result_shifts_values      = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(<a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)(0, (__global <span class="keywordtype">int</span> *)result_shifts_addr);</div>
<div class="line"><a name="l01569"></a><span class="lineno"> 1569</span>&#160; </div>
<div class="line"><a name="l01570"></a><span class="lineno"> 1570</span>&#160;    in_s32 *= result_multipliers_values;</div>
<div class="line"><a name="l01571"></a><span class="lineno"> 1571</span>&#160;    in_s32 &gt;&gt;= result_shifts_values;</div>
<div class="line"><a name="l01572"></a><span class="lineno"> 1572</span>&#160;<span class="preprocessor">#else  // defined(PER_CHANNEL_QUANTIZATION)</span></div>
<div class="line"><a name="l01573"></a><span class="lineno"> 1573</span>&#160;    in_s32 *= RESULT_MULTIPLIER;</div>
<div class="line"><a name="l01574"></a><span class="lineno"> 1574</span>&#160; </div>
<div class="line"><a name="l01575"></a><span class="lineno"> 1575</span>&#160;    in_s32 &gt;&gt;= RESULT_SHIFT;</div>
<div class="line"><a name="l01576"></a><span class="lineno"> 1576</span>&#160;<span class="preprocessor">#endif // defined(PER_CHANNEL_QUANTIZATION)</span></div>
<div class="line"><a name="l01577"></a><span class="lineno"> 1577</span>&#160; </div>
<div class="line"><a name="l01578"></a><span class="lineno"> 1578</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(OUTPUT_DATA_TYPE, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)</div>
<div class="line"><a name="l01579"></a><span class="lineno"> 1579</span>&#160;    res0 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a23fb01b6f3453cc0e48a026fd44f6acd">CONVERT_SAT</a>(in_s32, <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(OUTPUT_DATA_TYPE, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>));</div>
<div class="line"><a name="l01580"></a><span class="lineno"> 1580</span>&#160; </div>
<div class="line"><a name="l01581"></a><span class="lineno"> 1581</span>&#160;<span class="preprocessor">#if defined(MIN_BOUND)</span></div>
<div class="line"><a name="l01582"></a><span class="lineno"> 1582</span>&#160;    res0 = max(res0, (<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(OUTPUT_DATA_TYPE, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>))MIN_BOUND);</div>
<div class="line"><a name="l01583"></a><span class="lineno"> 1583</span>&#160;<span class="preprocessor">#endif // defined(MIN_BOUND)</span></div>
<div class="line"><a name="l01584"></a><span class="lineno"> 1584</span>&#160;<span class="preprocessor">#if defined(MAX_BOUND)</span></div>
<div class="line"><a name="l01585"></a><span class="lineno"> 1585</span>&#160;    res0 = min(res0, (<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(OUTPUT_DATA_TYPE, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>))MAX_BOUND);</div>
<div class="line"><a name="l01586"></a><span class="lineno"> 1586</span>&#160;<span class="preprocessor">#endif // defined(MAX_BOUND)</span></div>
<div class="line"><a name="l01587"></a><span class="lineno"> 1587</span>&#160; </div>
<div class="line"><a name="l01588"></a><span class="lineno"> 1588</span>&#160;    <span class="comment">// Store the result</span></div>
<div class="line"><a name="l01589"></a><span class="lineno"> 1589</span>&#160;    <a class="code" href="load__store__utility_8h.xhtml#a270acb3e45f182ebb6526f3e85eadd14">STORE_VECTOR_SELECT</a>(res, OUTPUT_DATA_TYPE, dst_addr, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>, VEC_SIZE_LEFTOVER, VEC_SIZE_LEFTOVER != 0 &amp;&amp; get_global_id(0) == 0)</div>
<div class="line"><a name="l01590"></a><span class="lineno"> 1590</span>&#160;}</div>
<div class="line"><a name="l01591"></a><span class="lineno"> 1591</span>&#160;<span class="preprocessor">#endif // defined(GEMMLOWP_OFFSET_CONTRIBUTION_QUANTIZE_DOWN)</span></div>
<div class="line"><a name="l01592"></a><span class="lineno"> 1592</span>&#160; </div>
<div class="line"><a name="l01593"></a><span class="lineno"> 1593</span>&#160;<span class="preprocessor">#if defined(GEMMLOWP_OFFSET_CONTRIBUTION_QUANTIZE_DOWN_FIXEDPOINT)</span></div>
<div class="line"><a name="l01594"></a><span class="lineno"> 1594</span>&#160;<span class="comment">/* OpenCL kernel used to add the offset contribution after matrix multiplication and it quantizes down to uint8.</span></div>
<div class="line"><a name="l01595"></a><span class="lineno"> 1595</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01596"></a><span class="lineno"> 1596</span>&#160;<span class="comment"> * This kernel takes a final int32 accumulator value (the output of matrix multiplication), adds to it the offset contribution of matrix A and matrix B and quantizes to uint8 through the output stage.</span></div>
<div class="line"><a name="l01597"></a><span class="lineno"> 1597</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01598"></a><span class="lineno"> 1598</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01599"></a><span class="lineno"> 1599</span>&#160;<span class="comment"> * @attention The k_offset = a_offset * b_offset * k (where k is the number of matrix A columns) needs to be passed at compile time using -DK_OFFSET (i.e. -DK_OFFSET=1200)</span></div>
<div class="line"><a name="l01600"></a><span class="lineno"> 1600</span>&#160;<span class="comment"> * @note In case the offset contribution due to a_offset is required, a_offset needs to be passed at compile time using -DA_OFFSET (i.e. -DA_OFFSET=1)</span></div>
<div class="line"><a name="l01601"></a><span class="lineno"> 1601</span>&#160;<span class="comment"> * @note In case the offset contribution due to b_offset is required, b_offset needs to be passed at compile time using -DB_OFFSET (i.e. -DB_OFFSET=6)</span></div>
<div class="line"><a name="l01602"></a><span class="lineno"> 1602</span>&#160;<span class="comment"> * @note In case sum_col has batches, -DSUM_COL_HAS_BATCHES must be passed at compile time. Usually if gemmlowp is used to accelerate convolution layer, sum_col will not have batches</span></div>
<div class="line"><a name="l01603"></a><span class="lineno"> 1603</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01604"></a><span class="lineno"> 1604</span>&#160;<span class="comment"> * The result before the output stage is:</span></div>
<div class="line"><a name="l01605"></a><span class="lineno"> 1605</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01606"></a><span class="lineno"> 1606</span>&#160;<span class="comment"> * mm_result[i][k] = mm_result[i][k] +</span></div>
<div class="line"><a name="l01607"></a><span class="lineno"> 1607</span>&#160;<span class="comment"> *                   (sum_col[k] * A_OFFSET) +</span></div>
<div class="line"><a name="l01608"></a><span class="lineno"> 1608</span>&#160;<span class="comment"> *                   (sum_row[i] * B_OFFSET) +</span></div>
<div class="line"><a name="l01609"></a><span class="lineno"> 1609</span>&#160;<span class="comment"> *                   (K_OFFSET)</span></div>
<div class="line"><a name="l01610"></a><span class="lineno"> 1610</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01611"></a><span class="lineno"> 1611</span>&#160;<span class="comment"> * This result is quantized down to uint8/int8 using the output stage. The output stage computes the following operations:</span></div>
<div class="line"><a name="l01612"></a><span class="lineno"> 1612</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01613"></a><span class="lineno"> 1613</span>&#160;<span class="comment"> *  -# Compute fixed point multiplication between each entry of input by result_fixedpoint_multiplier</span></div>
<div class="line"><a name="l01614"></a><span class="lineno"> 1614</span>&#160;<span class="comment"> *  -# Add bias to final result if bias tensor is not a nullptr</span></div>
<div class="line"><a name="l01615"></a><span class="lineno"> 1615</span>&#160;<span class="comment"> *  -# Round to nearest division by a power-of-two using result_shift</span></div>
<div class="line"><a name="l01616"></a><span class="lineno"> 1616</span>&#160;<span class="comment"> *  -# Add offset to each result</span></div>
<div class="line"><a name="l01617"></a><span class="lineno"> 1617</span>&#160;<span class="comment"> *  -# Clamp the value between the specified min and max bounds</span></div>
<div class="line"><a name="l01618"></a><span class="lineno"> 1618</span>&#160;<span class="comment"> *  -# Clamp the resulting int32 values:</span></div>
<div class="line"><a name="l01619"></a><span class="lineno"> 1619</span>&#160;<span class="comment"> *      - to the [0..255] range and cast to QASYMM8.</span></div>
<div class="line"><a name="l01620"></a><span class="lineno"> 1620</span>&#160;<span class="comment"> *      - to the [-128..127] range and cast to QASYMM8_SIGNED.</span></div>
<div class="line"><a name="l01621"></a><span class="lineno"> 1621</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01622"></a><span class="lineno"> 1622</span>&#160;<span class="comment"> * @attention The offset, scalar scale factor and number of bits to shift right of output tensor must be passed at compile time using -DRESULT_OFFSET, -RESULT_MULT_INT and -DRESULT_SHIFT</span></div>
<div class="line"><a name="l01623"></a><span class="lineno"> 1623</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01624"></a><span class="lineno"> 1624</span>&#160;<span class="comment"> * @note In case the addition of int32 biases is required, -DADD_BIAS should be passed at compile time</span></div>
<div class="line"><a name="l01625"></a><span class="lineno"> 1625</span>&#160;<span class="comment"> * @note The output datatype should be passed at compile time using -DOUTPUT_DATA_TYPE</span></div>
<div class="line"><a name="l01626"></a><span class="lineno"> 1626</span>&#160;<span class="comment"> * @note In case the clamping of the result is required, the min and max bounds can be passed at compile time using -DMIN_BOUND and -DMAX_BOUND.</span></div>
<div class="line"><a name="l01627"></a><span class="lineno"> 1627</span>&#160;<span class="comment"> *       These values can be used to implement &quot;rectified linear unit&quot; activation functions</span></div>
<div class="line"><a name="l01628"></a><span class="lineno"> 1628</span>&#160;<span class="comment"> * @note Vector size should be given as a preprocessor argument using -DVEC_SIZE=size. e.g. -DVEC_SIZE=16</span></div>
<div class="line"><a name="l01629"></a><span class="lineno"> 1629</span>&#160;<span class="comment"> * @note Leftover vector size has to be passed at compile time using -DVEC_SIZE_LEFTOVER. e.g. -DVEC_SIZE_LEFTOVER=3. It is defined as the remainder between the input&#39;s first dimension and VEC_SIZE</span></div>
<div class="line"><a name="l01630"></a><span class="lineno"> 1630</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01631"></a><span class="lineno"> 1631</span>&#160;<span class="comment"> * @param[in]  mm_result_ptr                                    Pointer to the source tensor. Supported data type: S32</span></div>
<div class="line"><a name="l01632"></a><span class="lineno"> 1632</span>&#160;<span class="comment"> * @param[in]  mm_result_stride_x                               Stride of the source tensor in X dimension (in bytes)</span></div>
<div class="line"><a name="l01633"></a><span class="lineno"> 1633</span>&#160;<span class="comment"> * @param[in]  mm_result_step_x                                 mm_result_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01634"></a><span class="lineno"> 1634</span>&#160;<span class="comment"> * @param[in]  mm_result_stride_y                               Stride of the source tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l01635"></a><span class="lineno"> 1635</span>&#160;<span class="comment"> * @param[in]  mm_result_step_y                                 mm_result_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01636"></a><span class="lineno"> 1636</span>&#160;<span class="comment"> * @param[in]  mm_result_stride_z                               Stride of the source tensor in Z dimension (in bytes)</span></div>
<div class="line"><a name="l01637"></a><span class="lineno"> 1637</span>&#160;<span class="comment"> * @param[in]  mm_result_step_z                                 mm_result_stride_z * number of elements along Z processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01638"></a><span class="lineno"> 1638</span>&#160;<span class="comment"> * @param[in]  mm_result_offset_first_element_in_bytes          The offset of the first element in the source tensor</span></div>
<div class="line"><a name="l01639"></a><span class="lineno"> 1639</span>&#160;<span class="comment"> * @param[in]  sum_col_ptr                                      (Optional) Pointer to the source tensor. Supported data type: same as @p mm_result_ptr</span></div>
<div class="line"><a name="l01640"></a><span class="lineno"> 1640</span>&#160;<span class="comment"> * @param[in]  sum_col_stride_x                                 (Optional) Stride of the source tensor in X dimension (in bytes)</span></div>
<div class="line"><a name="l01641"></a><span class="lineno"> 1641</span>&#160;<span class="comment"> * @param[in]  sum_col_step_x                                   (Optional) sum_col_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01642"></a><span class="lineno"> 1642</span>&#160;<span class="comment"> * @param[in]  sum_col_stride_y                                 (Optional) Stride of the source tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l01643"></a><span class="lineno"> 1643</span>&#160;<span class="comment"> * @param[in]  sum_col_step_y                                   (Optional) sum_col_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01644"></a><span class="lineno"> 1644</span>&#160;<span class="comment"> * @param[in]  sum_col_offset_first_element_in_bytes            (Optional) The offset of the first element in the source tensor</span></div>
<div class="line"><a name="l01645"></a><span class="lineno"> 1645</span>&#160;<span class="comment"> * @param[in]  sum_row_ptr                                      (Optional) Pointer to the source tensor. Supported data type: same as @p mm_result_ptr</span></div>
<div class="line"><a name="l01646"></a><span class="lineno"> 1646</span>&#160;<span class="comment"> * @param[in]  sum_row_stride_x                                 (Optional) Stride of the source tensor in X dimension (in bytes)</span></div>
<div class="line"><a name="l01647"></a><span class="lineno"> 1647</span>&#160;<span class="comment"> * @param[in]  sum_row_step_x                                   (Optional) sum_row_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01648"></a><span class="lineno"> 1648</span>&#160;<span class="comment"> * @param[in]  sum_row_stride_y                                 (Optional) Stride of the source tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l01649"></a><span class="lineno"> 1649</span>&#160;<span class="comment"> * @param[in]  sum_row_step_y                                   (Optional) sum_row_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01650"></a><span class="lineno"> 1650</span>&#160;<span class="comment"> * @param[in]  sum_row_offset_first_element_in_bytes            (Optional) The offset of the first element in the source tensor</span></div>
<div class="line"><a name="l01651"></a><span class="lineno"> 1651</span>&#160;<span class="comment"> * @param[in]  biases_ptr                                       (Optional) Pointer to the biases tensor. Supported data type: same as @p src_ptr</span></div>
<div class="line"><a name="l01652"></a><span class="lineno"> 1652</span>&#160;<span class="comment"> * @param[in]  biases_stride_x                                  (Optional) Stride of the biases tensor in X dimension (in bytes)</span></div>
<div class="line"><a name="l01653"></a><span class="lineno"> 1653</span>&#160;<span class="comment"> * @param[in]  biases_step_x                                    (Optional) biases_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01654"></a><span class="lineno"> 1654</span>&#160;<span class="comment"> * @param[in]  biases_offset_first_element_in_bytes             (Optional) The offset of the first element in the biases tensor</span></div>
<div class="line"><a name="l01655"></a><span class="lineno"> 1655</span>&#160;<span class="comment"> * @param[out] dst_ptr                                          Pointer to the destination tensor Supported data type: QASYMM8/QASYMM8_SIGNED</span></div>
<div class="line"><a name="l01656"></a><span class="lineno"> 1656</span>&#160;<span class="comment"> * @param[in]  dst_stride_x                                     Stride of the destination tensor in X dimension (in bytes)</span></div>
<div class="line"><a name="l01657"></a><span class="lineno"> 1657</span>&#160;<span class="comment"> * @param[in]  dst_step_x                                       dst_gx_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01658"></a><span class="lineno"> 1658</span>&#160;<span class="comment"> * @param[in]  dst_stride_y                                     Stride of the destination tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l01659"></a><span class="lineno"> 1659</span>&#160;<span class="comment"> * @param[in]  dst_step_y                                       dst_gx_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01660"></a><span class="lineno"> 1660</span>&#160;<span class="comment"> * @param[in]  dst_stride_z                                     Stride of the source tensor in Z dimension (in bytes)</span></div>
<div class="line"><a name="l01661"></a><span class="lineno"> 1661</span>&#160;<span class="comment"> * @param[in]  dst_step_z                                       src_stride_z * number of elements along Z processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01662"></a><span class="lineno"> 1662</span>&#160;<span class="comment"> * @param[in]  dst_offset_first_element_in_bytes                The offset of the first element in the destination tensor</span></div>
<div class="line"><a name="l01663"></a><span class="lineno"> 1663</span>&#160;<span class="comment"> * @param[in]  result_multipliers_ptr                           (Optional) Pointer to the output multipliers vector for per-channel quantization. Supported data types: S32</span></div>
<div class="line"><a name="l01664"></a><span class="lineno"> 1664</span>&#160;<span class="comment"> * @param[in]  result_multipliers_stride_x                      (Optional) Stride of the output multipliers vector in X dimension (in bytes)</span></div>
<div class="line"><a name="l01665"></a><span class="lineno"> 1665</span>&#160;<span class="comment"> * @param[in]  result_multipliers_step_x                        (Optional) output_multipliers_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01666"></a><span class="lineno"> 1666</span>&#160;<span class="comment"> * @param[in]  result_multipliers_offset_first_element_in_bytes (Optional) The offset of the first element in the output multipliers vector</span></div>
<div class="line"><a name="l01667"></a><span class="lineno"> 1667</span>&#160;<span class="comment"> * @param[in]  result_shifts_ptr                                (Optional) Pointer to the output shifts vector for per-channel quantization. Supported data types: S32</span></div>
<div class="line"><a name="l01668"></a><span class="lineno"> 1668</span>&#160;<span class="comment"> * @param[in]  result_shifts_stride_x                           (Optional) Stride of the output shifts vector in X dimension (in bytes)</span></div>
<div class="line"><a name="l01669"></a><span class="lineno"> 1669</span>&#160;<span class="comment"> * @param[in]  result_shifts_step_x                             (Optional) output_shifts_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01670"></a><span class="lineno"> 1670</span>&#160;<span class="comment"> * @param[in]  result_shifts_offset_first_element_in_bytes      (Optional) The offset of the first element in the output shifts vector</span></div>
<div class="line"><a name="l01671"></a><span class="lineno"> 1671</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l01672"></a><span class="lineno"> 1672</span>&#160;__kernel <span class="keywordtype">void</span> gemmlowp_offset_contribution_quantize_down_fixedpoint(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(mm_result)</div>
<div class="line"><a name="l01673"></a><span class="lineno"> 1673</span>&#160;#<span class="keywordflow">if</span> defined(A_OFFSET)</div>
<div class="line"><a name="l01674"></a><span class="lineno"> 1674</span>&#160;                                                                    ,</div>
<div class="line"><a name="l01675"></a><span class="lineno"> 1675</span>&#160;                                                                    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(sum_col)</div>
<div class="line"><a name="l01676"></a><span class="lineno"> 1676</span>&#160;#endif <span class="comment">// defined(A_OFFSET)</span></div>
<div class="line"><a name="l01677"></a><span class="lineno"> 1677</span>&#160;#<span class="keywordflow">if</span> defined(B_OFFSET)</div>
<div class="line"><a name="l01678"></a><span class="lineno"> 1678</span>&#160;                                                                    ,</div>
<div class="line"><a name="l01679"></a><span class="lineno"> 1679</span>&#160;                                                                    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(sum_row)</div>
<div class="line"><a name="l01680"></a><span class="lineno"> 1680</span>&#160;#endif <span class="comment">// defined(B_OFFSET)</span></div>
<div class="line"><a name="l01681"></a><span class="lineno"> 1681</span>&#160;                                                                    ,</div>
<div class="line"><a name="l01682"></a><span class="lineno"> 1682</span>&#160;#<span class="keywordflow">if</span> defined(ADD_BIAS)</div>
<div class="line"><a name="l01683"></a><span class="lineno"> 1683</span>&#160;                                                                    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(biases),</div>
<div class="line"><a name="l01684"></a><span class="lineno"> 1684</span>&#160;#endif <span class="comment">// defined(ADD_BIAS)</span></div>
<div class="line"><a name="l01685"></a><span class="lineno"> 1685</span>&#160;                                                                    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>)</div>
<div class="line"><a name="l01686"></a><span class="lineno"> 1686</span>&#160;#<span class="keywordflow">if</span> defined(PER_CHANNEL_QUANTIZATION)</div>
<div class="line"><a name="l01687"></a><span class="lineno"> 1687</span>&#160;                                                                    ,</div>
<div class="line"><a name="l01688"></a><span class="lineno"> 1688</span>&#160;                                                                    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(result_multipliers),</div>
<div class="line"><a name="l01689"></a><span class="lineno"> 1689</span>&#160;                                                                    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(result_shifts)</div>
<div class="line"><a name="l01690"></a><span class="lineno"> 1690</span>&#160;#endif <span class="comment">// defined(PER_CHANNEL_QUANTIZATION)</span></div>
<div class="line"><a name="l01691"></a><span class="lineno"> 1691</span>&#160;                                                                   )</div>
<div class="line"><a name="l01692"></a><span class="lineno"> 1692</span>&#160;{</div>
<div class="line"><a name="l01693"></a><span class="lineno"> 1693</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> x = max((<span class="keywordtype">int</span>)(get_global_id(0) * <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a> - (<a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a> - VEC_SIZE_LEFTOVER) % <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>), 0);</div>
<div class="line"><a name="l01694"></a><span class="lineno"> 1694</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> y = get_global_id(1);</div>
<div class="line"><a name="l01695"></a><span class="lineno"> 1695</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> z = get_global_id(2);</div>
<div class="line"><a name="l01696"></a><span class="lineno"> 1696</span>&#160; </div>
<div class="line"><a name="l01697"></a><span class="lineno"> 1697</span>&#160;    <span class="comment">// Compute offset contribution</span></div>
<div class="line"><a name="l01698"></a><span class="lineno"> 1698</span>&#160;    VEC_INT offset_term_s32 = offset_contribution(</div>
<div class="line"><a name="l01699"></a><span class="lineno"> 1699</span>&#160;                                  x, y, z</div>
<div class="line"><a name="l01700"></a><span class="lineno"> 1700</span>&#160;#<span class="keywordflow">if</span> defined(A_OFFSET)</div>
<div class="line"><a name="l01701"></a><span class="lineno"> 1701</span>&#160;                                  ,</div>
<div class="line"><a name="l01702"></a><span class="lineno"> 1702</span>&#160;                                  sum_col_ptr,</div>
<div class="line"><a name="l01703"></a><span class="lineno"> 1703</span>&#160;                                  sum_col_stride_x,</div>
<div class="line"><a name="l01704"></a><span class="lineno"> 1704</span>&#160;                                  sum_col_step_x,</div>
<div class="line"><a name="l01705"></a><span class="lineno"> 1705</span>&#160;                                  sum_col_stride_y,</div>
<div class="line"><a name="l01706"></a><span class="lineno"> 1706</span>&#160;                                  sum_col_step_y,</div>
<div class="line"><a name="l01707"></a><span class="lineno"> 1707</span>&#160;                                  sum_col_offset_first_element_in_bytes</div>
<div class="line"><a name="l01708"></a><span class="lineno"> 1708</span>&#160;#endif <span class="comment">// defined(A_OFFSET)</span></div>
<div class="line"><a name="l01709"></a><span class="lineno"> 1709</span>&#160;#<span class="keywordflow">if</span> defined(B_OFFSET)</div>
<div class="line"><a name="l01710"></a><span class="lineno"> 1710</span>&#160;                                  ,</div>
<div class="line"><a name="l01711"></a><span class="lineno"> 1711</span>&#160;                                  sum_row_ptr,</div>
<div class="line"><a name="l01712"></a><span class="lineno"> 1712</span>&#160;                                  sum_row_stride_x,</div>
<div class="line"><a name="l01713"></a><span class="lineno"> 1713</span>&#160;                                  sum_row_step_x,</div>
<div class="line"><a name="l01714"></a><span class="lineno"> 1714</span>&#160;                                  sum_row_stride_y,</div>
<div class="line"><a name="l01715"></a><span class="lineno"> 1715</span>&#160;                                  sum_row_step_y,</div>
<div class="line"><a name="l01716"></a><span class="lineno"> 1716</span>&#160;                                  sum_row_offset_first_element_in_bytes</div>
<div class="line"><a name="l01717"></a><span class="lineno"> 1717</span>&#160;#endif <span class="comment">// defined(B_OFFSET)</span></div>
<div class="line"><a name="l01718"></a><span class="lineno"> 1718</span>&#160;#<span class="keywordflow">if</span> defined(ADD_BIAS)</div>
<div class="line"><a name="l01719"></a><span class="lineno"> 1719</span>&#160;                                  ,</div>
<div class="line"><a name="l01720"></a><span class="lineno"> 1720</span>&#160;                                  biases_ptr,</div>
<div class="line"><a name="l01721"></a><span class="lineno"> 1721</span>&#160;                                  biases_stride_x,</div>
<div class="line"><a name="l01722"></a><span class="lineno"> 1722</span>&#160;                                  biases_step_x,</div>
<div class="line"><a name="l01723"></a><span class="lineno"> 1723</span>&#160;                                  biases_offset_first_element_in_bytes</div>
<div class="line"><a name="l01724"></a><span class="lineno"> 1724</span>&#160;#endif <span class="comment">// defined(ADD_BIAS)</span></div>
<div class="line"><a name="l01725"></a><span class="lineno"> 1725</span>&#160;                              );</div>
<div class="line"><a name="l01726"></a><span class="lineno"> 1726</span>&#160; </div>
<div class="line"><a name="l01727"></a><span class="lineno"> 1727</span>&#160;    __global uchar *mm_result_addr = mm_result_ptr + mm_result_offset_first_element_in_bytes + x * <span class="keyword">sizeof</span>(int) + y * mm_result_stride_y + z * mm_result_stride_z;</div>
<div class="line"><a name="l01728"></a><span class="lineno"> 1728</span>&#160; </div>
<div class="line"><a name="l01729"></a><span class="lineno"> 1729</span>&#160;    __global uchar *dst_addr = dst_ptr + dst_offset_first_element_in_bytes + x + y * dst_stride_y + z * dst_stride_z;</div>
<div class="line"><a name="l01730"></a><span class="lineno"> 1730</span>&#160; </div>
<div class="line"><a name="l01731"></a><span class="lineno"> 1731</span>&#160;    VEC_INT in_s32 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(<a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)(0, (__global <span class="keywordtype">int</span> *)mm_result_addr);</div>
<div class="line"><a name="l01732"></a><span class="lineno"> 1732</span>&#160; </div>
<div class="line"><a name="l01733"></a><span class="lineno"> 1733</span>&#160;    <span class="comment">// Add the offset terms to GEMM&#39;s result</span></div>
<div class="line"><a name="l01734"></a><span class="lineno"> 1734</span>&#160;    in_s32 += offset_term_s32;</div>
<div class="line"><a name="l01735"></a><span class="lineno"> 1735</span>&#160; </div>
<div class="line"><a name="l01736"></a><span class="lineno"> 1736</span>&#160;    <span class="comment">// -------------- OUTPUT STAGE</span></div>
<div class="line"><a name="l01737"></a><span class="lineno"> 1737</span>&#160; </div>
<div class="line"><a name="l01738"></a><span class="lineno"> 1738</span>&#160;    <span class="comment">// Multiply by result_mult_int and shift</span></div>
<div class="line"><a name="l01739"></a><span class="lineno"> 1739</span>&#160;<span class="preprocessor">#if defined(PER_CHANNEL_QUANTIZATION)</span></div>
<div class="line"><a name="l01740"></a><span class="lineno"> 1740</span>&#160;    __global uchar *result_multipliers_addr   = result_multipliers_ptr + result_multipliers_offset_first_element_in_bytes + x * <span class="keyword">sizeof</span>(int);</div>
<div class="line"><a name="l01741"></a><span class="lineno"> 1741</span>&#160;    __global uchar *result_shifts_addr        = result_shifts_ptr + result_shifts_offset_first_element_in_bytes + x * <span class="keyword">sizeof</span>(int);</div>
<div class="line"><a name="l01742"></a><span class="lineno"> 1742</span>&#160;    VEC_INT         result_multipliers_values = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(<a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)(0, (__global <span class="keywordtype">int</span> *)result_multipliers_addr);</div>
<div class="line"><a name="l01743"></a><span class="lineno"> 1743</span>&#160;    VEC_INT         result_shifts_values      = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(<a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)(0, (__global <span class="keywordtype">int</span> *)result_shifts_addr);</div>
<div class="line"><a name="l01744"></a><span class="lineno"> 1744</span>&#160; </div>
<div class="line"><a name="l01745"></a><span class="lineno"> 1745</span>&#160;    VEC_INT in_s32_shift_lt0 = <a class="code" href="helpers__asymm_8h.xhtml#aa1e2d1a27e885c3840b9258f5416078d">ASYMM_MULT_BY_QUANT_MULTIPLIER_GREATER_THAN_ONE</a>(in_s32, result_multipliers_values, result_shifts_values, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>);</div>
<div class="line"><a name="l01746"></a><span class="lineno"> 1746</span>&#160;    VEC_INT in_s32_shift_gt0 = <a class="code" href="helpers__asymm_8h.xhtml#a86de0ffca367bfcf27a8ae5dd1fdef2d">ASYMM_MULT_BY_QUANT_MULTIPLIER_LESS_THAN_ONE</a>(in_s32, result_multipliers_values, result_shifts_values, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>);</div>
<div class="line"><a name="l01747"></a><span class="lineno"> 1747</span>&#160;    in_s32                   = <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a27e22718d532b621774aca14ce8b1101">select</a>(in_s32_shift_lt0, in_s32_shift_gt0, result_shifts_values &gt;= 0);</div>
<div class="line"><a name="l01748"></a><span class="lineno"> 1748</span>&#160;<span class="preprocessor">#else // defined(PER_CHANNEL_QUANTIZATION)</span></div>
<div class="line"><a name="l01749"></a><span class="lineno"> 1749</span>&#160; </div>
<div class="line"><a name="l01750"></a><span class="lineno"> 1750</span>&#160;<span class="preprocessor">#if RESULT_SHIFT &lt; 0</span></div>
<div class="line"><a name="l01751"></a><span class="lineno"> 1751</span>&#160;    in_s32 = <a class="code" href="helpers__asymm_8h.xhtml#aa1e2d1a27e885c3840b9258f5416078d">ASYMM_MULT_BY_QUANT_MULTIPLIER_GREATER_THAN_ONE</a>(in_s32, RESULT_MULTIPLIER, RESULT_SHIFT, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>);</div>
<div class="line"><a name="l01752"></a><span class="lineno"> 1752</span>&#160;<span class="preprocessor">#else  // RESULT_SHIFT &gt;= 0</span></div>
<div class="line"><a name="l01753"></a><span class="lineno"> 1753</span>&#160;    in_s32 = <a class="code" href="helpers__asymm_8h.xhtml#a86de0ffca367bfcf27a8ae5dd1fdef2d">ASYMM_MULT_BY_QUANT_MULTIPLIER_LESS_THAN_ONE</a>(in_s32, RESULT_MULTIPLIER, RESULT_SHIFT, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>);</div>
<div class="line"><a name="l01754"></a><span class="lineno"> 1754</span>&#160;<span class="preprocessor">#endif // RESULT_SHIFT &lt; 0</span></div>
<div class="line"><a name="l01755"></a><span class="lineno"> 1755</span>&#160; </div>
<div class="line"><a name="l01756"></a><span class="lineno"> 1756</span>&#160;<span class="preprocessor">#endif // defined(PER_CHANNEL_QUANTIZATION)</span></div>
<div class="line"><a name="l01757"></a><span class="lineno"> 1757</span>&#160; </div>
<div class="line"><a name="l01758"></a><span class="lineno"> 1758</span>&#160;    <span class="comment">// Add the offset terms to GEMM&#39;s result</span></div>
<div class="line"><a name="l01759"></a><span class="lineno"> 1759</span>&#160;    in_s32 += (VEC_INT)RESULT_OFFSET;</div>
<div class="line"><a name="l01760"></a><span class="lineno"> 1760</span>&#160; </div>
<div class="line"><a name="l01761"></a><span class="lineno"> 1761</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(OUTPUT_DATA_TYPE, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)</div>
<div class="line"><a name="l01762"></a><span class="lineno"> 1762</span>&#160;    res0 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a23fb01b6f3453cc0e48a026fd44f6acd">CONVERT_SAT</a>(in_s32, <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(OUTPUT_DATA_TYPE, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>));</div>
<div class="line"><a name="l01763"></a><span class="lineno"> 1763</span>&#160; </div>
<div class="line"><a name="l01764"></a><span class="lineno"> 1764</span>&#160;<span class="preprocessor">#if defined(MIN_BOUND)</span></div>
<div class="line"><a name="l01765"></a><span class="lineno"> 1765</span>&#160;    res0 = max(res0, (<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(OUTPUT_DATA_TYPE, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>))MIN_BOUND);</div>
<div class="line"><a name="l01766"></a><span class="lineno"> 1766</span>&#160;<span class="preprocessor">#endif // defined(MIN_BOUND)</span></div>
<div class="line"><a name="l01767"></a><span class="lineno"> 1767</span>&#160;<span class="preprocessor">#if defined(MAX_BOUND)</span></div>
<div class="line"><a name="l01768"></a><span class="lineno"> 1768</span>&#160;    res0 = min(res0, (<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(OUTPUT_DATA_TYPE, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>))MAX_BOUND);</div>
<div class="line"><a name="l01769"></a><span class="lineno"> 1769</span>&#160;<span class="preprocessor">#endif // defined(MAX_BOUND)</span></div>
<div class="line"><a name="l01770"></a><span class="lineno"> 1770</span>&#160; </div>
<div class="line"><a name="l01771"></a><span class="lineno"> 1771</span>&#160;    <span class="comment">// Store the result</span></div>
<div class="line"><a name="l01772"></a><span class="lineno"> 1772</span>&#160;    <a class="code" href="load__store__utility_8h.xhtml#a270acb3e45f182ebb6526f3e85eadd14">STORE_VECTOR_SELECT</a>(res, OUTPUT_DATA_TYPE, dst_addr, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>, VEC_SIZE_LEFTOVER, VEC_SIZE_LEFTOVER != 0 &amp;&amp; get_global_id(0) == 0)</div>
<div class="line"><a name="l01773"></a><span class="lineno"> 1773</span>&#160;}</div>
<div class="line"><a name="l01774"></a><span class="lineno"> 1774</span>&#160;<span class="preprocessor">#endif // defined(GEMMLOWP_OFFSET_CONTRIBUTION_QUANTIZE_DOWN_FIXEDPOINT)</span></div>
<div class="line"><a name="l01775"></a><span class="lineno"> 1775</span>&#160; </div>
<div class="line"><a name="l01776"></a><span class="lineno"> 1776</span>&#160;<span class="preprocessor">#undef VEC_INT</span></div>
<div class="line"><a name="l01777"></a><span class="lineno"> 1777</span>&#160; </div>
<div class="line"><a name="l01778"></a><span class="lineno"> 1778</span>&#160;<span class="preprocessor">#endif // defined(K_OFFSET) &amp;&amp; defined(VEC_SIZE) &amp;&amp; defined(VEC_SIZE_LEFTOVER)</span></div>
<div class="line"><a name="l01779"></a><span class="lineno"> 1779</span>&#160; </div>
<div class="line"><a name="l01780"></a><span class="lineno"> 1780</span>&#160;<span class="preprocessor">#if defined(GEMMLOWP_OUTPUT_STAGE_QUANTIZE_DOWN)</span></div>
<div class="line"><a name="l01781"></a><span class="lineno"> 1781</span>&#160;<span class="comment">/** This OpenCL kernel is used to quantize down the int32 accumulator values of GEMMLowp to QASYMM8/QASYMM8_SIGNED</span></div>
<div class="line"><a name="l01782"></a><span class="lineno"> 1782</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01783"></a><span class="lineno"> 1783</span>&#160;<span class="comment"> * This kernel takes a final int32 accumulator value and processes it to obtain the final QASYMM8/QASYMM8_SIGNED value.</span></div>
<div class="line"><a name="l01784"></a><span class="lineno"> 1784</span>&#160;<span class="comment"> * The following computations will be performed by the kernel:</span></div>
<div class="line"><a name="l01785"></a><span class="lineno"> 1785</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01786"></a><span class="lineno"> 1786</span>&#160;<span class="comment"> *  -# Add offset terms to final result</span></div>
<div class="line"><a name="l01787"></a><span class="lineno"> 1787</span>&#160;<span class="comment"> *  -# Multiply each entry of result by result_mult_int</span></div>
<div class="line"><a name="l01788"></a><span class="lineno"> 1788</span>&#160;<span class="comment"> *  -# Add bias to final result (if -DADD_BIAS is passed at compile time)</span></div>
<div class="line"><a name="l01789"></a><span class="lineno"> 1789</span>&#160;<span class="comment"> *  -# Shift the int32 accumulator by result_shift</span></div>
<div class="line"><a name="l01790"></a><span class="lineno"> 1790</span>&#160;<span class="comment"> *  -# Clamp the value between the specified min and max bounds (if -DMIN_BOUND and/or -DMAX_BOUND are passed at compile time)</span></div>
<div class="line"><a name="l01791"></a><span class="lineno"> 1791</span>&#160;<span class="comment"> *  -# Clamp the resulting int32 values:</span></div>
<div class="line"><a name="l01792"></a><span class="lineno"> 1792</span>&#160;<span class="comment"> *  -#  - to the [0..255] range and cast to QASYMM8.</span></div>
<div class="line"><a name="l01793"></a><span class="lineno"> 1793</span>&#160;<span class="comment"> *  -#  - to the [-128..127] range and cast to QASYMM8_SIGNED.</span></div>
<div class="line"><a name="l01794"></a><span class="lineno"> 1794</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01795"></a><span class="lineno"> 1795</span>&#160;<span class="comment"> * @attention The offset, scalar scale factor and number of bits to shift right of output tensor must be passed at compile time using -DRESULT_OFFSET, -RESULT_MULT_INT and -DRESULT_SHIFT</span></div>
<div class="line"><a name="l01796"></a><span class="lineno"> 1796</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01797"></a><span class="lineno"> 1797</span>&#160;<span class="comment"> * @note In case the addition of int32 biases is required, -DADD_BIAS should be passed at compile time</span></div>
<div class="line"><a name="l01798"></a><span class="lineno"> 1798</span>&#160;<span class="comment"> * @note The output datatype should be passed at compile time using -DOUTPUT_DATA_TYPE</span></div>
<div class="line"><a name="l01799"></a><span class="lineno"> 1799</span>&#160;<span class="comment"> * @note In case the clamping of the result is required, the min and max bounds can be passed at compile time using -DMIN_BOUND and -DMAX_BOUND.</span></div>
<div class="line"><a name="l01800"></a><span class="lineno"> 1800</span>&#160;<span class="comment"> *       These values can be used to implement &quot;rectified linear unit&quot; activation functions</span></div>
<div class="line"><a name="l01801"></a><span class="lineno"> 1801</span>&#160;<span class="comment"> * @note Leftover vector size has to be passed at compile time using -DVEC_SIZE_LEFTOVER. e.g. -DVEC_SIZE_LEFTOVER=3. It is defined as the remainder between the input&#39;s first dimension and VEC_SIZE</span></div>
<div class="line"><a name="l01802"></a><span class="lineno"> 1802</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01803"></a><span class="lineno"> 1803</span>&#160;<span class="comment"> * @param[in]  src_ptr                              Pointer to the source tensor. Supported data type: S32</span></div>
<div class="line"><a name="l01804"></a><span class="lineno"> 1804</span>&#160;<span class="comment"> * @param[in]  src_stride_x                         Stride of the source tensor in X dimension (in bytes)</span></div>
<div class="line"><a name="l01805"></a><span class="lineno"> 1805</span>&#160;<span class="comment"> * @param[in]  src_step_x                           src_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01806"></a><span class="lineno"> 1806</span>&#160;<span class="comment"> * @param[in]  src_stride_y                         Stride of the source tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l01807"></a><span class="lineno"> 1807</span>&#160;<span class="comment"> * @param[in]  src_step_y                           src_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01808"></a><span class="lineno"> 1808</span>&#160;<span class="comment"> * @param[in]  src_stride_z                         Stride of the source tensor in Z dimension (in bytes)</span></div>
<div class="line"><a name="l01809"></a><span class="lineno"> 1809</span>&#160;<span class="comment"> * @param[in]  src_step_z                           src_stride_z * number of elements along Z processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01810"></a><span class="lineno"> 1810</span>&#160;<span class="comment"> * @param[in]  src_offset_first_element_in_bytes    The offset of the first element in the source tensor</span></div>
<div class="line"><a name="l01811"></a><span class="lineno"> 1811</span>&#160;<span class="comment"> * @param[in]  biases_ptr                           (Optional) Pointer to the biases tensor. Supported data type: same as @p src_ptr</span></div>
<div class="line"><a name="l01812"></a><span class="lineno"> 1812</span>&#160;<span class="comment"> * @param[in]  biases_stride_x                      (Optional) Stride of the biases tensor in X dimension (in bytes)</span></div>
<div class="line"><a name="l01813"></a><span class="lineno"> 1813</span>&#160;<span class="comment"> * @param[in]  biases_step_x                        (Optional) biases_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01814"></a><span class="lineno"> 1814</span>&#160;<span class="comment"> * @param[in]  biases_offset_first_element_in_bytes (Optional) The offset of the first element in the biases tensor</span></div>
<div class="line"><a name="l01815"></a><span class="lineno"> 1815</span>&#160;<span class="comment"> * @param[out] dst_ptr                              Pointer to the destination tensor Supported data type: QASYMM8/QASYMM8_SIGNED</span></div>
<div class="line"><a name="l01816"></a><span class="lineno"> 1816</span>&#160;<span class="comment"> * @param[in]  dst_stride_x                         Stride of the destination tensor in X dimension (in bytes)</span></div>
<div class="line"><a name="l01817"></a><span class="lineno"> 1817</span>&#160;<span class="comment"> * @param[in]  dst_step_x                           dst_gx_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01818"></a><span class="lineno"> 1818</span>&#160;<span class="comment"> * @param[in]  dst_stride_y                         Stride of the destination tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l01819"></a><span class="lineno"> 1819</span>&#160;<span class="comment"> * @param[in]  dst_step_y                           dst_gx_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01820"></a><span class="lineno"> 1820</span>&#160;<span class="comment"> * @param[in]  dst_stride_z                         Stride of the source tensor in Z dimension (in bytes)</span></div>
<div class="line"><a name="l01821"></a><span class="lineno"> 1821</span>&#160;<span class="comment"> * @param[in]  dst_step_z                           src_stride_z * number of elements along Z processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01822"></a><span class="lineno"> 1822</span>&#160;<span class="comment"> * @param[in]  dst_offset_first_element_in_bytes    The offset of the first element in the destination tensor</span></div>
<div class="line"><a name="l01823"></a><span class="lineno"> 1823</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l01824"></a><span class="lineno"> 1824</span>&#160;__kernel <span class="keywordtype">void</span> gemmlowp_output_stage_quantize_down(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>),</div>
<div class="line"><a name="l01825"></a><span class="lineno"> 1825</span>&#160;#<span class="keywordflow">if</span> defined(ADD_BIAS)</div>
<div class="line"><a name="l01826"></a><span class="lineno"> 1826</span>&#160;                                                  <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(biases),</div>
<div class="line"><a name="l01827"></a><span class="lineno"> 1827</span>&#160;#endif <span class="comment">// defined(ADD_BIAS)</span></div>
<div class="line"><a name="l01828"></a><span class="lineno"> 1828</span>&#160;                                                  <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>))</div>
<div class="line"><a name="l01829"></a><span class="lineno"> 1829</span>&#160;{</div>
<div class="line"><a name="l01830"></a><span class="lineno"> 1830</span>&#160;    <span class="comment">// Compute source and destination addresses</span></div>
<div class="line"><a name="l01831"></a><span class="lineno"> 1831</span>&#160;    <span class="keywordtype">int</span> x = max((<span class="keywordtype">int</span>)(get_global_id(0) * <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a> - (<a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a> - VEC_SIZE_LEFTOVER) % <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>), 0);</div>
<div class="line"><a name="l01832"></a><span class="lineno"> 1832</span>&#160;    <span class="keywordtype">int</span> y = get_global_id(1);</div>
<div class="line"><a name="l01833"></a><span class="lineno"> 1833</span>&#160;    <span class="keywordtype">int</span> z = get_global_id(2);</div>
<div class="line"><a name="l01834"></a><span class="lineno"> 1834</span>&#160; </div>
<div class="line"><a name="l01835"></a><span class="lineno"> 1835</span>&#160;    __global uchar *src_addr = src_ptr + src_offset_first_element_in_bytes + x * <span class="keyword">sizeof</span>(int) + y * src_stride_y + z * src_stride_z;</div>
<div class="line"><a name="l01836"></a><span class="lineno"> 1836</span>&#160; </div>
<div class="line"><a name="l01837"></a><span class="lineno"> 1837</span>&#160;    __global uchar *dst_addr = dst_ptr + dst_offset_first_element_in_bytes + x + y * dst_stride_y + z * dst_stride_z;</div>
<div class="line"><a name="l01838"></a><span class="lineno"> 1838</span>&#160; </div>
<div class="line"><a name="l01839"></a><span class="lineno"> 1839</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<span class="keywordtype">int</span>, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)</div>
<div class="line"><a name="l01840"></a><span class="lineno"> 1840</span>&#160;    input_values = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(<a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)(0, (__global <span class="keywordtype">int</span> *)src_addr);</div>
<div class="line"><a name="l01841"></a><span class="lineno"> 1841</span>&#160; </div>
<div class="line"><a name="l01842"></a><span class="lineno"> 1842</span>&#160;<span class="preprocessor">#if defined(ADD_BIAS)</span></div>
<div class="line"><a name="l01843"></a><span class="lineno"> 1843</span>&#160;    <span class="comment">// Add bias</span></div>
<div class="line"><a name="l01844"></a><span class="lineno"> 1844</span>&#160;    __global uchar *bias_addr = biases_ptr + biases_offset_first_element_in_bytes + x * <span class="keyword">sizeof</span>(int);</div>
<div class="line"><a name="l01845"></a><span class="lineno"> 1845</span>&#160; </div>
<div class="line"><a name="l01846"></a><span class="lineno"> 1846</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<span class="keywordtype">int</span>, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)</div>
<div class="line"><a name="l01847"></a><span class="lineno"> 1847</span>&#160;    biases_values = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(<a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)(0, (__global <span class="keywordtype">int</span> *)bias_addr);</div>
<div class="line"><a name="l01848"></a><span class="lineno"> 1848</span>&#160;    input_values += biases_values;</div>
<div class="line"><a name="l01849"></a><span class="lineno"> 1849</span>&#160;<span class="preprocessor">#endif // defined(ADD_BIAS)</span></div>
<div class="line"><a name="l01850"></a><span class="lineno"> 1850</span>&#160; </div>
<div class="line"><a name="l01851"></a><span class="lineno"> 1851</span>&#160;    <span class="comment">// Add the offset terms to GEMM&#39;s result</span></div>
<div class="line"><a name="l01852"></a><span class="lineno"> 1852</span>&#160;    input_values += (<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<span class="keywordtype">int</span>, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>))RESULT_OFFSET;</div>
<div class="line"><a name="l01853"></a><span class="lineno"> 1853</span>&#160; </div>
<div class="line"><a name="l01854"></a><span class="lineno"> 1854</span>&#160;    <span class="comment">// Multiply by result_mult_int and shift</span></div>
<div class="line"><a name="l01855"></a><span class="lineno"> 1855</span>&#160;    input_values *= RESULT_MULT_INT;</div>
<div class="line"><a name="l01856"></a><span class="lineno"> 1856</span>&#160; </div>
<div class="line"><a name="l01857"></a><span class="lineno"> 1857</span>&#160;<span class="preprocessor">#if RESULT_SHIFT &lt; 0</span></div>
<div class="line"><a name="l01858"></a><span class="lineno"> 1858</span>&#160;    input_values &gt;&gt;= -RESULT_SHIFT;</div>
<div class="line"><a name="l01859"></a><span class="lineno"> 1859</span>&#160;<span class="preprocessor">#else  // RESULT_SHIFT &gt;= 0</span></div>
<div class="line"><a name="l01860"></a><span class="lineno"> 1860</span>&#160;    input_values &gt;&gt;= RESULT_SHIFT;</div>
<div class="line"><a name="l01861"></a><span class="lineno"> 1861</span>&#160;<span class="preprocessor">#endif // RESULT_SHIFT &lt; 0</span></div>
<div class="line"><a name="l01862"></a><span class="lineno"> 1862</span>&#160; </div>
<div class="line"><a name="l01863"></a><span class="lineno"> 1863</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(OUTPUT_DATA_TYPE, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)</div>
<div class="line"><a name="l01864"></a><span class="lineno"> 1864</span>&#160;    res0 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a23fb01b6f3453cc0e48a026fd44f6acd">CONVERT_SAT</a>(input_values, <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(OUTPUT_DATA_TYPE, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>));</div>
<div class="line"><a name="l01865"></a><span class="lineno"> 1865</span>&#160; </div>
<div class="line"><a name="l01866"></a><span class="lineno"> 1866</span>&#160;<span class="preprocessor">#if defined(MIN_BOUND)</span></div>
<div class="line"><a name="l01867"></a><span class="lineno"> 1867</span>&#160;    res0 = max(res0, (<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(OUTPUT_DATA_TYPE, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>))MIN_BOUND);</div>
<div class="line"><a name="l01868"></a><span class="lineno"> 1868</span>&#160;<span class="preprocessor">#endif // defined(MIN_BOUND)</span></div>
<div class="line"><a name="l01869"></a><span class="lineno"> 1869</span>&#160;<span class="preprocessor">#if defined(MAX_BOUND)</span></div>
<div class="line"><a name="l01870"></a><span class="lineno"> 1870</span>&#160;    res0 = min(res0, (<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(OUTPUT_DATA_TYPE, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>))MAX_BOUND);</div>
<div class="line"><a name="l01871"></a><span class="lineno"> 1871</span>&#160;<span class="preprocessor">#endif // defined(MAX_BOUND)</span></div>
<div class="line"><a name="l01872"></a><span class="lineno"> 1872</span>&#160; </div>
<div class="line"><a name="l01873"></a><span class="lineno"> 1873</span>&#160;    <span class="comment">// Store the result</span></div>
<div class="line"><a name="l01874"></a><span class="lineno"> 1874</span>&#160;    <a class="code" href="load__store__utility_8h.xhtml#a270acb3e45f182ebb6526f3e85eadd14">STORE_VECTOR_SELECT</a>(res, OUTPUT_DATA_TYPE, dst_addr, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>, VEC_SIZE_LEFTOVER, VEC_SIZE_LEFTOVER != 0 &amp;&amp; get_global_id(0) == 0)</div>
<div class="line"><a name="l01875"></a><span class="lineno"> 1875</span>&#160;}</div>
<div class="line"><a name="l01876"></a><span class="lineno"> 1876</span>&#160;<span class="preprocessor">#endif // defined(GEMMLOWP_OUTPUT_STAGE_QUANTIZE_DOWN)</span></div>
<div class="line"><a name="l01877"></a><span class="lineno"> 1877</span>&#160; </div>
<div class="line"><a name="l01878"></a><span class="lineno"> 1878</span>&#160;<span class="preprocessor">#if defined(GEMMLOWP_OUTPUT_STAGE_QUANTIZE_DOWN_FIXEDPOINT)</span></div>
<div class="line"><a name="l01879"></a><span class="lineno"> 1879</span>&#160;<span class="comment">/** This OpenCL kernel is used to quantize down the int32 accumulator values of GEMMLowp to QASYMM8/QASYMM8_SIGNED</span></div>
<div class="line"><a name="l01880"></a><span class="lineno"> 1880</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01881"></a><span class="lineno"> 1881</span>&#160;<span class="comment"> * This kernel takes a final int32 accumulator value (the output of matrix multiplication), and processes it to obtain the final QASYMM8/QASYMM8_SIGNED value.</span></div>
<div class="line"><a name="l01882"></a><span class="lineno"> 1882</span>&#160;<span class="comment"> * The following computations will be performed by the kernel:</span></div>
<div class="line"><a name="l01883"></a><span class="lineno"> 1883</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01884"></a><span class="lineno"> 1884</span>&#160;<span class="comment"> *  -# Compute fixed point multiplication between each entry of input by result_fixedpoint_multiplier</span></div>
<div class="line"><a name="l01885"></a><span class="lineno"> 1885</span>&#160;<span class="comment"> *  -# Add bias to final result if bias tensor is not a nullptr</span></div>
<div class="line"><a name="l01886"></a><span class="lineno"> 1886</span>&#160;<span class="comment"> *  -# Round to nearest division by a power-of-two using result_shift</span></div>
<div class="line"><a name="l01887"></a><span class="lineno"> 1887</span>&#160;<span class="comment"> *  -# Add offset to each result</span></div>
<div class="line"><a name="l01888"></a><span class="lineno"> 1888</span>&#160;<span class="comment"> *  -# Clamp the value between the specified min and max bounds</span></div>
<div class="line"><a name="l01889"></a><span class="lineno"> 1889</span>&#160;<span class="comment"> *  -# Clamp the resulting int32 values:</span></div>
<div class="line"><a name="l01890"></a><span class="lineno"> 1890</span>&#160;<span class="comment"> *      - to the [0..255] range and cast to QASYMM8.</span></div>
<div class="line"><a name="l01891"></a><span class="lineno"> 1891</span>&#160;<span class="comment"> *      - to the [-128..127] range and cast to QASYMM8_SIGNED.</span></div>
<div class="line"><a name="l01892"></a><span class="lineno"> 1892</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01893"></a><span class="lineno"> 1893</span>&#160;<span class="comment"> * @attention The offset, scalar scale factor and number of bits to shift right of output tensor must be passed at compile time using -DRESULT_OFFSET_AFTER_SHIFT, -DRESULT_FIXEDPOINT_MULTIPLIER and -DRESULT_SHIFT</span></div>
<div class="line"><a name="l01894"></a><span class="lineno"> 1894</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01895"></a><span class="lineno"> 1895</span>&#160;<span class="comment"> * @note In case the addition of int32 biases is required, -DADD_BIAS should be passed at compile time</span></div>
<div class="line"><a name="l01896"></a><span class="lineno"> 1896</span>&#160;<span class="comment"> * @note The output datatype should be passed at compile time using -DOUTPUT_DATA_TYPE</span></div>
<div class="line"><a name="l01897"></a><span class="lineno"> 1897</span>&#160;<span class="comment"> * @note In case the clamping of the result is required, the min and max bounds can be passed at compile time using -DMIN_BOUND and -DMAX_BOUND.</span></div>
<div class="line"><a name="l01898"></a><span class="lineno"> 1898</span>&#160;<span class="comment"> *       These values can be used to implement &quot;rectified linear unit&quot; activation functions</span></div>
<div class="line"><a name="l01899"></a><span class="lineno"> 1899</span>&#160;<span class="comment"> * @note Vector size should be given as a preprocessor argument using -DVEC_SIZE=size. e.g. -DVEC_SIZE=16</span></div>
<div class="line"><a name="l01900"></a><span class="lineno"> 1900</span>&#160;<span class="comment"> * @note Leftover vector size has to be passed at compile time using -DVEC_SIZE_LEFTOVER. e.g. -DVEC_SIZE_LEFTOVER=3. It is defined as the remainder between the input&#39;s first dimension and VEC_SIZE</span></div>
<div class="line"><a name="l01901"></a><span class="lineno"> 1901</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01902"></a><span class="lineno"> 1902</span>&#160;<span class="comment"> * @param[in]  src_ptr                              Pointer to the source tensor. Supported data type: S32</span></div>
<div class="line"><a name="l01903"></a><span class="lineno"> 1903</span>&#160;<span class="comment"> * @param[in]  src_stride_x                         Stride of the source tensor in X dimension (in bytes)</span></div>
<div class="line"><a name="l01904"></a><span class="lineno"> 1904</span>&#160;<span class="comment"> * @param[in]  src_step_x                           src_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01905"></a><span class="lineno"> 1905</span>&#160;<span class="comment"> * @param[in]  src_stride_y                         Stride of the source tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l01906"></a><span class="lineno"> 1906</span>&#160;<span class="comment"> * @param[in]  src_step_y                           src_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01907"></a><span class="lineno"> 1907</span>&#160;<span class="comment"> * @param[in]  src_stride_z                         Stride of the source tensor in Z dimension (in bytes)</span></div>
<div class="line"><a name="l01908"></a><span class="lineno"> 1908</span>&#160;<span class="comment"> * @param[in]  src_step_z                           src_stride_z * number of elements along Z processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01909"></a><span class="lineno"> 1909</span>&#160;<span class="comment"> * @param[in]  src_offset_first_element_in_bytes    The offset of the first element in the source tensor</span></div>
<div class="line"><a name="l01910"></a><span class="lineno"> 1910</span>&#160;<span class="comment"> * @param[in]  biases_ptr                           (Optional) Pointer to the biases tensor. Supported data type: same as @p src_ptr</span></div>
<div class="line"><a name="l01911"></a><span class="lineno"> 1911</span>&#160;<span class="comment"> * @param[in]  biases_stride_x                      (Optional) Stride of the biases tensor in X dimension (in bytes)</span></div>
<div class="line"><a name="l01912"></a><span class="lineno"> 1912</span>&#160;<span class="comment"> * @param[in]  biases_step_x                        (Optional) biases_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01913"></a><span class="lineno"> 1913</span>&#160;<span class="comment"> * @param[in]  biases_offset_first_element_in_bytes (Optional) The offset of the first element in the biases tensor</span></div>
<div class="line"><a name="l01914"></a><span class="lineno"> 1914</span>&#160;<span class="comment"> * @param[out] dst_ptr                              Pointer to the destination tensor Supported data type: QASYMM8/QASYMM8_SIGNED</span></div>
<div class="line"><a name="l01915"></a><span class="lineno"> 1915</span>&#160;<span class="comment"> * @param[in]  dst_stride_x                         Stride of the destination tensor in X dimension (in bytes)</span></div>
<div class="line"><a name="l01916"></a><span class="lineno"> 1916</span>&#160;<span class="comment"> * @param[in]  dst_step_x                           dst_gx_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01917"></a><span class="lineno"> 1917</span>&#160;<span class="comment"> * @param[in]  dst_stride_y                         Stride of the destination tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l01918"></a><span class="lineno"> 1918</span>&#160;<span class="comment"> * @param[in]  dst_step_y                           dst_gx_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01919"></a><span class="lineno"> 1919</span>&#160;<span class="comment"> * @param[in]  dst_stride_z                         Stride of the source tensor in Z dimension (in bytes)</span></div>
<div class="line"><a name="l01920"></a><span class="lineno"> 1920</span>&#160;<span class="comment"> * @param[in]  dst_step_z                           src_stride_z * number of elements along Z processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01921"></a><span class="lineno"> 1921</span>&#160;<span class="comment"> * @param[in]  dst_offset_first_element_in_bytes    The offset of the first element in the destination tensor</span></div>
<div class="line"><a name="l01922"></a><span class="lineno"> 1922</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l01923"></a><span class="lineno"> 1923</span>&#160;__kernel <span class="keywordtype">void</span> gemmlowp_output_stage_quantize_down_fixedpoint(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>),</div>
<div class="line"><a name="l01924"></a><span class="lineno"> 1924</span>&#160;#<span class="keywordflow">if</span> defined(ADD_BIAS)</div>
<div class="line"><a name="l01925"></a><span class="lineno"> 1925</span>&#160;                                                             <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(biases),</div>
<div class="line"><a name="l01926"></a><span class="lineno"> 1926</span>&#160;#endif <span class="comment">// defined(ADD_BIAS)</span></div>
<div class="line"><a name="l01927"></a><span class="lineno"> 1927</span>&#160;                                                             <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>))</div>
<div class="line"><a name="l01928"></a><span class="lineno"> 1928</span>&#160;{</div>
<div class="line"><a name="l01929"></a><span class="lineno"> 1929</span>&#160;    <span class="comment">// Compute source and destination addresses</span></div>
<div class="line"><a name="l01930"></a><span class="lineno"> 1930</span>&#160;    <span class="keywordtype">int</span> x = max((<span class="keywordtype">int</span>)(get_global_id(0) * <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a> - (<a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a> - VEC_SIZE_LEFTOVER) % <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>), 0);</div>
<div class="line"><a name="l01931"></a><span class="lineno"> 1931</span>&#160;    <span class="keywordtype">int</span> y = get_global_id(1);</div>
<div class="line"><a name="l01932"></a><span class="lineno"> 1932</span>&#160;    <span class="keywordtype">int</span> z = get_global_id(2);</div>
<div class="line"><a name="l01933"></a><span class="lineno"> 1933</span>&#160; </div>
<div class="line"><a name="l01934"></a><span class="lineno"> 1934</span>&#160;    __global uchar *src_addr = src_ptr + src_offset_first_element_in_bytes + x * <span class="keyword">sizeof</span>(int) + y * src_stride_y + z * src_stride_z;</div>
<div class="line"><a name="l01935"></a><span class="lineno"> 1935</span>&#160; </div>
<div class="line"><a name="l01936"></a><span class="lineno"> 1936</span>&#160;    __global uchar *dst_addr = dst_ptr + dst_offset_first_element_in_bytes + x + y * dst_stride_y + z * dst_stride_z;</div>
<div class="line"><a name="l01937"></a><span class="lineno"> 1937</span>&#160; </div>
<div class="line"><a name="l01938"></a><span class="lineno"> 1938</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<span class="keywordtype">int</span>, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)</div>
<div class="line"><a name="l01939"></a><span class="lineno"> 1939</span>&#160;    input_values = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(<a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)(0, (__global <span class="keywordtype">int</span> *)src_addr);</div>
<div class="line"><a name="l01940"></a><span class="lineno"> 1940</span>&#160; </div>
<div class="line"><a name="l01941"></a><span class="lineno"> 1941</span>&#160;<span class="preprocessor">#if defined(ADD_BIAS)</span></div>
<div class="line"><a name="l01942"></a><span class="lineno"> 1942</span>&#160;    <span class="comment">// Add bias</span></div>
<div class="line"><a name="l01943"></a><span class="lineno"> 1943</span>&#160;    __global uchar *bias_addr = biases_ptr + biases_offset_first_element_in_bytes + x * <span class="keyword">sizeof</span>(int);</div>
<div class="line"><a name="l01944"></a><span class="lineno"> 1944</span>&#160; </div>
<div class="line"><a name="l01945"></a><span class="lineno"> 1945</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<span class="keywordtype">int</span>, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)</div>
<div class="line"><a name="l01946"></a><span class="lineno"> 1946</span>&#160;    biases_values = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(<a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)(0, (__global <span class="keywordtype">int</span> *)bias_addr);</div>
<div class="line"><a name="l01947"></a><span class="lineno"> 1947</span>&#160;    input_values += biases_values;</div>
<div class="line"><a name="l01948"></a><span class="lineno"> 1948</span>&#160;<span class="preprocessor">#endif // defined(ADD_BIAS)</span></div>
<div class="line"><a name="l01949"></a><span class="lineno"> 1949</span>&#160; </div>
<div class="line"><a name="l01950"></a><span class="lineno"> 1950</span>&#160;    <span class="comment">// Multiply by result_mult_int and shift</span></div>
<div class="line"><a name="l01951"></a><span class="lineno"> 1951</span>&#160;<span class="preprocessor">#if RESULT_SHIFT &lt; 0</span></div>
<div class="line"><a name="l01952"></a><span class="lineno"> 1952</span>&#160;    input_values = <a class="code" href="helpers__asymm_8h.xhtml#aa1e2d1a27e885c3840b9258f5416078d">ASYMM_MULT_BY_QUANT_MULTIPLIER_GREATER_THAN_ONE</a>(input_values, RESULT_FIXEDPOINT_MULTIPLIER, RESULT_SHIFT, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>);</div>
<div class="line"><a name="l01953"></a><span class="lineno"> 1953</span>&#160;<span class="preprocessor">#else  // RESULT_SHIFT &gt;= 0</span></div>
<div class="line"><a name="l01954"></a><span class="lineno"> 1954</span>&#160;    input_values = <a class="code" href="helpers__asymm_8h.xhtml#a86de0ffca367bfcf27a8ae5dd1fdef2d">ASYMM_MULT_BY_QUANT_MULTIPLIER_LESS_THAN_ONE</a>(input_values, RESULT_FIXEDPOINT_MULTIPLIER, RESULT_SHIFT, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>);</div>
<div class="line"><a name="l01955"></a><span class="lineno"> 1955</span>&#160;<span class="preprocessor">#endif // RESULT_SHIFT &lt; 0</span></div>
<div class="line"><a name="l01956"></a><span class="lineno"> 1956</span>&#160; </div>
<div class="line"><a name="l01957"></a><span class="lineno"> 1957</span>&#160;    <span class="comment">// Add the offset terms to GEMM&#39;s result</span></div>
<div class="line"><a name="l01958"></a><span class="lineno"> 1958</span>&#160;    input_values += (<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<span class="keywordtype">int</span>, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>))RESULT_OFFSET_AFTER_SHIFT;</div>
<div class="line"><a name="l01959"></a><span class="lineno"> 1959</span>&#160; </div>
<div class="line"><a name="l01960"></a><span class="lineno"> 1960</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(OUTPUT_DATA_TYPE, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)</div>
<div class="line"><a name="l01961"></a><span class="lineno"> 1961</span>&#160;    res0 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a23fb01b6f3453cc0e48a026fd44f6acd">CONVERT_SAT</a>(input_values, <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(OUTPUT_DATA_TYPE, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>));</div>
<div class="line"><a name="l01962"></a><span class="lineno"> 1962</span>&#160; </div>
<div class="line"><a name="l01963"></a><span class="lineno"> 1963</span>&#160;<span class="preprocessor">#if defined(MIN_BOUND)</span></div>
<div class="line"><a name="l01964"></a><span class="lineno"> 1964</span>&#160;    res0 = max(res0, (<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(OUTPUT_DATA_TYPE, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>))MIN_BOUND);</div>
<div class="line"><a name="l01965"></a><span class="lineno"> 1965</span>&#160;<span class="preprocessor">#endif // defined(MIN_BOUND)</span></div>
<div class="line"><a name="l01966"></a><span class="lineno"> 1966</span>&#160;<span class="preprocessor">#if defined(MAX_BOUND)</span></div>
<div class="line"><a name="l01967"></a><span class="lineno"> 1967</span>&#160;    res0 = min(res0, (<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(OUTPUT_DATA_TYPE, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>))MAX_BOUND);</div>
<div class="line"><a name="l01968"></a><span class="lineno"> 1968</span>&#160;<span class="preprocessor">#endif // defined(MAX_BOUND)</span></div>
<div class="line"><a name="l01969"></a><span class="lineno"> 1969</span>&#160; </div>
<div class="line"><a name="l01970"></a><span class="lineno"> 1970</span>&#160;    <span class="comment">// Store the result</span></div>
<div class="line"><a name="l01971"></a><span class="lineno"> 1971</span>&#160;    <a class="code" href="load__store__utility_8h.xhtml#a270acb3e45f182ebb6526f3e85eadd14">STORE_VECTOR_SELECT</a>(res, OUTPUT_DATA_TYPE, dst_addr, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>, VEC_SIZE_LEFTOVER, VEC_SIZE_LEFTOVER != 0 &amp;&amp; get_global_id(0) == 0)</div>
<div class="line"><a name="l01972"></a><span class="lineno"> 1972</span>&#160;}</div>
<div class="line"><a name="l01973"></a><span class="lineno"> 1973</span>&#160;<span class="preprocessor">#endif // defined(GEMMLOWP_OUTPUT_STAGE_QUANTIZE_DOWN_FIXEDPOINT)</span></div>
<div class="line"><a name="l01974"></a><span class="lineno"> 1974</span>&#160; </div>
<div class="line"><a name="l01975"></a><span class="lineno"> 1975</span>&#160;<span class="preprocessor">#if defined(GEMMLOWP_OUTPUT_STAGE_QUANTIZE_DOWN_FIXEDPOINT_QSYMM16)</span></div>
<div class="line"><a name="l01976"></a><span class="lineno"> 1976</span>&#160;<span class="comment">/** This OpenCL kernel is used to quantize down the int32 accumulator values of GEMMLowp to QSYMM16</span></div>
<div class="line"><a name="l01977"></a><span class="lineno"> 1977</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01978"></a><span class="lineno"> 1978</span>&#160;<span class="comment"> * This kernel takes a final int32 accumulator value (the output of matrix multiplication), and processes it to obtain the final QSYMM16 value.</span></div>
<div class="line"><a name="l01979"></a><span class="lineno"> 1979</span>&#160;<span class="comment"> * The following computations will be performed by the kernel:</span></div>
<div class="line"><a name="l01980"></a><span class="lineno"> 1980</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01981"></a><span class="lineno"> 1981</span>&#160;<span class="comment"> *  -# Compute fixed point multiplication between each entry of input by result_fixedpoint_multiplier</span></div>
<div class="line"><a name="l01982"></a><span class="lineno"> 1982</span>&#160;<span class="comment"> *  -# Add bias to final result if bias tensor is not a nullptr</span></div>
<div class="line"><a name="l01983"></a><span class="lineno"> 1983</span>&#160;<span class="comment"> *  -# Round to nearest division by a power-of-two using result_shift</span></div>
<div class="line"><a name="l01984"></a><span class="lineno"> 1984</span>&#160;<span class="comment"> *  -# Add offset to each result</span></div>
<div class="line"><a name="l01985"></a><span class="lineno"> 1985</span>&#160;<span class="comment"> *  -# Clamp the value between the specified min and max bounds</span></div>
<div class="line"><a name="l01986"></a><span class="lineno"> 1986</span>&#160;<span class="comment"> *  -# Clamp the resulting int32 values to the [-32768..32767] range and cast to QSYMM16.</span></div>
<div class="line"><a name="l01987"></a><span class="lineno"> 1987</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01988"></a><span class="lineno"> 1988</span>&#160;<span class="comment"> * @attention The offset, scalar scale factor and number of bits to shift right of output tensor must be passed at compile time using -DRESULT_FIXEDPOINT_MULTIPLIER and -DRESULT_SHIFT</span></div>
<div class="line"><a name="l01989"></a><span class="lineno"> 1989</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01990"></a><span class="lineno"> 1990</span>&#160;<span class="comment"> * @note In case the addition of int32 biases is required, -DADD_BIAS should be passed at compile time</span></div>
<div class="line"><a name="l01991"></a><span class="lineno"> 1991</span>&#160;<span class="comment"> * @note In case the clamping of the result is required, the min and max bounds can be passed at compile time using -DMIN_BOUND and -DMAX_BOUND.</span></div>
<div class="line"><a name="l01992"></a><span class="lineno"> 1992</span>&#160;<span class="comment"> *       These values can be used to implement &quot;rectified linear unit&quot; activation functions</span></div>
<div class="line"><a name="l01993"></a><span class="lineno"> 1993</span>&#160;<span class="comment"> * @note Vector size should be given as a preprocessor argument using -DVEC_SIZE=size. e.g. -DVEC_SIZE=16</span></div>
<div class="line"><a name="l01994"></a><span class="lineno"> 1994</span>&#160;<span class="comment"> * @note Leftover vector size has to be passed at compile time using -DVEC_SIZE_LEFTOVER. e.g. -DVEC_SIZE_LEFTOVER=3. It is defined as the remainder between the input&#39;s first dimension and VEC_SIZE</span></div>
<div class="line"><a name="l01995"></a><span class="lineno"> 1995</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l01996"></a><span class="lineno"> 1996</span>&#160;<span class="comment"> * @param[in]  src_ptr                              Pointer to the source tensor. Supported data type: S32</span></div>
<div class="line"><a name="l01997"></a><span class="lineno"> 1997</span>&#160;<span class="comment"> * @param[in]  src_stride_x                         Stride of the source tensor in X dimension (in bytes)</span></div>
<div class="line"><a name="l01998"></a><span class="lineno"> 1998</span>&#160;<span class="comment"> * @param[in]  src_step_x                           src_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l01999"></a><span class="lineno"> 1999</span>&#160;<span class="comment"> * @param[in]  src_stride_y                         Stride of the source tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l02000"></a><span class="lineno"> 2000</span>&#160;<span class="comment"> * @param[in]  src_step_y                           src_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l02001"></a><span class="lineno"> 2001</span>&#160;<span class="comment"> * @param[in]  src_stride_z                         Stride of the source tensor in Z dimension (in bytes)</span></div>
<div class="line"><a name="l02002"></a><span class="lineno"> 2002</span>&#160;<span class="comment"> * @param[in]  src_step_z                           src_stride_z * number of elements along Z processed per workitem(in bytes)</span></div>
<div class="line"><a name="l02003"></a><span class="lineno"> 2003</span>&#160;<span class="comment"> * @param[in]  src_offset_first_element_in_bytes    The offset of the first element in the source tensor</span></div>
<div class="line"><a name="l02004"></a><span class="lineno"> 2004</span>&#160;<span class="comment"> * @param[in]  biases_ptr                           (Optional) Pointer to the biases tensor. Supported data type: same as @p src_ptr</span></div>
<div class="line"><a name="l02005"></a><span class="lineno"> 2005</span>&#160;<span class="comment"> * @param[in]  biases_stride_x                      (Optional) Stride of the biases tensor in X dimension (in bytes)</span></div>
<div class="line"><a name="l02006"></a><span class="lineno"> 2006</span>&#160;<span class="comment"> * @param[in]  biases_step_x                        (Optional) biases_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l02007"></a><span class="lineno"> 2007</span>&#160;<span class="comment"> * @param[in]  biases_offset_first_element_in_bytes (Optional) The offset of the first element in the biases tensor</span></div>
<div class="line"><a name="l02008"></a><span class="lineno"> 2008</span>&#160;<span class="comment"> * @param[out] dst_ptr                              Pointer to the destination tensor Supported data type: QSYMM16</span></div>
<div class="line"><a name="l02009"></a><span class="lineno"> 2009</span>&#160;<span class="comment"> * @param[in]  dst_stride_x                         Stride of the destination tensor in X dimension (in bytes)</span></div>
<div class="line"><a name="l02010"></a><span class="lineno"> 2010</span>&#160;<span class="comment"> * @param[in]  dst_step_x                           dst_gx_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l02011"></a><span class="lineno"> 2011</span>&#160;<span class="comment"> * @param[in]  dst_stride_y                         Stride of the destination tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l02012"></a><span class="lineno"> 2012</span>&#160;<span class="comment"> * @param[in]  dst_step_y                           dst_gx_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l02013"></a><span class="lineno"> 2013</span>&#160;<span class="comment"> * @param[in]  dst_stride_z                         Stride of the source tensor in Z dimension (in bytes)</span></div>
<div class="line"><a name="l02014"></a><span class="lineno"> 2014</span>&#160;<span class="comment"> * @param[in]  dst_step_z                           src_stride_z * number of elements along Z processed per workitem(in bytes)</span></div>
<div class="line"><a name="l02015"></a><span class="lineno"> 2015</span>&#160;<span class="comment"> * @param[in]  dst_offset_first_element_in_bytes    The offset of the first element in the destination tensor</span></div>
<div class="line"><a name="l02016"></a><span class="lineno"> 2016</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l02017"></a><span class="lineno"> 2017</span>&#160;__kernel <span class="keywordtype">void</span> gemmlowp_output_stage_quantize_down_fixedpoint_qsymm16(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>),</div>
<div class="line"><a name="l02018"></a><span class="lineno"> 2018</span>&#160;#<span class="keywordflow">if</span> defined(ADD_BIAS)</div>
<div class="line"><a name="l02019"></a><span class="lineno"> 2019</span>&#160;                                                                     <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(biases),</div>
<div class="line"><a name="l02020"></a><span class="lineno"> 2020</span>&#160;#endif <span class="comment">// defined(ADD_BIAS)</span></div>
<div class="line"><a name="l02021"></a><span class="lineno"> 2021</span>&#160;                                                                     <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>))</div>
<div class="line"><a name="l02022"></a><span class="lineno"> 2022</span>&#160;{</div>
<div class="line"><a name="l02023"></a><span class="lineno"> 2023</span>&#160;    <span class="comment">// Compute source and destination addresses</span></div>
<div class="line"><a name="l02024"></a><span class="lineno"> 2024</span>&#160;    <span class="keywordtype">int</span> x = max((<span class="keywordtype">int</span>)(get_global_id(0) * <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a> - (<a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a> - VEC_SIZE_LEFTOVER) % <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>), 0);</div>
<div class="line"><a name="l02025"></a><span class="lineno"> 2025</span>&#160;    <span class="keywordtype">int</span> y = get_global_id(1);</div>
<div class="line"><a name="l02026"></a><span class="lineno"> 2026</span>&#160;    <span class="keywordtype">int</span> z = get_global_id(2);</div>
<div class="line"><a name="l02027"></a><span class="lineno"> 2027</span>&#160; </div>
<div class="line"><a name="l02028"></a><span class="lineno"> 2028</span>&#160;    __global uchar *src_addr = src_ptr + src_offset_first_element_in_bytes + x * <span class="keyword">sizeof</span>(int) + y * src_stride_y + z * src_stride_z;</div>
<div class="line"><a name="l02029"></a><span class="lineno"> 2029</span>&#160; </div>
<div class="line"><a name="l02030"></a><span class="lineno"> 2030</span>&#160;    __global uchar *dst_addr = dst_ptr + dst_offset_first_element_in_bytes + x * <span class="keyword">sizeof</span>(short) + y * dst_stride_y + z * dst_stride_z;</div>
<div class="line"><a name="l02031"></a><span class="lineno"> 2031</span>&#160; </div>
<div class="line"><a name="l02032"></a><span class="lineno"> 2032</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<span class="keywordtype">int</span>, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)</div>
<div class="line"><a name="l02033"></a><span class="lineno"> 2033</span>&#160;    input_values = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(<a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)(0, (__global <span class="keywordtype">int</span> *)src_addr);</div>
<div class="line"><a name="l02034"></a><span class="lineno"> 2034</span>&#160; </div>
<div class="line"><a name="l02035"></a><span class="lineno"> 2035</span>&#160;<span class="preprocessor">#if defined(ADD_BIAS)</span></div>
<div class="line"><a name="l02036"></a><span class="lineno"> 2036</span>&#160;    <span class="comment">// Add bias</span></div>
<div class="line"><a name="l02037"></a><span class="lineno"> 2037</span>&#160;    __global uchar *bias_addr = biases_ptr + biases_offset_first_element_in_bytes + x * <span class="keyword">sizeof</span>(int);</div>
<div class="line"><a name="l02038"></a><span class="lineno"> 2038</span>&#160; </div>
<div class="line"><a name="l02039"></a><span class="lineno"> 2039</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<span class="keywordtype">int</span>, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)</div>
<div class="line"><a name="l02040"></a><span class="lineno"> 2040</span>&#160;    biases_values = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(<a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)(0, (__global <span class="keywordtype">int</span> *)bias_addr);</div>
<div class="line"><a name="l02041"></a><span class="lineno"> 2041</span>&#160;    input_values += biases_values;</div>
<div class="line"><a name="l02042"></a><span class="lineno"> 2042</span>&#160;<span class="preprocessor">#endif // defined(ADD_BIAS)</span></div>
<div class="line"><a name="l02043"></a><span class="lineno"> 2043</span>&#160; </div>
<div class="line"><a name="l02044"></a><span class="lineno"> 2044</span>&#160;    <span class="comment">// Multiply by result_mult_int and shift</span></div>
<div class="line"><a name="l02045"></a><span class="lineno"> 2045</span>&#160;<span class="preprocessor">#if RESULT_SHIFT &lt; 0</span></div>
<div class="line"><a name="l02046"></a><span class="lineno"> 2046</span>&#160;    input_values = <a class="code" href="helpers__asymm_8h.xhtml#aa1e2d1a27e885c3840b9258f5416078d">ASYMM_MULT_BY_QUANT_MULTIPLIER_GREATER_THAN_ONE</a>(input_values, RESULT_FIXEDPOINT_MULTIPLIER, RESULT_SHIFT, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>);</div>
<div class="line"><a name="l02047"></a><span class="lineno"> 2047</span>&#160;<span class="preprocessor">#else  // RESULT_SHIFT &gt;= 0</span></div>
<div class="line"><a name="l02048"></a><span class="lineno"> 2048</span>&#160;    input_values = <a class="code" href="helpers__asymm_8h.xhtml#a86de0ffca367bfcf27a8ae5dd1fdef2d">ASYMM_MULT_BY_QUANT_MULTIPLIER_LESS_THAN_ONE</a>(input_values, RESULT_FIXEDPOINT_MULTIPLIER, RESULT_SHIFT, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>);</div>
<div class="line"><a name="l02049"></a><span class="lineno"> 2049</span>&#160;<span class="preprocessor">#endif // RESULT_SHIFT &lt; 0</span></div>
<div class="line"><a name="l02050"></a><span class="lineno"> 2050</span>&#160; </div>
<div class="line"><a name="l02051"></a><span class="lineno"> 2051</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<span class="keywordtype">short</span>, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)</div>
<div class="line"><a name="l02052"></a><span class="lineno"> 2052</span>&#160;    res0 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a23fb01b6f3453cc0e48a026fd44f6acd">CONVERT_SAT</a>(input_values, <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<span class="keywordtype">short</span>, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>));</div>
<div class="line"><a name="l02053"></a><span class="lineno"> 2053</span>&#160; </div>
<div class="line"><a name="l02054"></a><span class="lineno"> 2054</span>&#160;<span class="preprocessor">#if defined(MIN_BOUND)</span></div>
<div class="line"><a name="l02055"></a><span class="lineno"> 2055</span>&#160;    res0 = max(res0, (<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<span class="keywordtype">short</span>, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>))MIN_BOUND);</div>
<div class="line"><a name="l02056"></a><span class="lineno"> 2056</span>&#160;<span class="preprocessor">#endif // defined(MIN_BOUND)</span></div>
<div class="line"><a name="l02057"></a><span class="lineno"> 2057</span>&#160;<span class="preprocessor">#if defined(MAX_BOUND)</span></div>
<div class="line"><a name="l02058"></a><span class="lineno"> 2058</span>&#160;    res0 = min(res0, (<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<span class="keywordtype">short</span>, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>))MAX_BOUND);</div>
<div class="line"><a name="l02059"></a><span class="lineno"> 2059</span>&#160;<span class="preprocessor">#endif // defined(MAX_BOUND)</span></div>
<div class="line"><a name="l02060"></a><span class="lineno"> 2060</span>&#160; </div>
<div class="line"><a name="l02061"></a><span class="lineno"> 2061</span>&#160;    <span class="comment">// Store the result</span></div>
<div class="line"><a name="l02062"></a><span class="lineno"> 2062</span>&#160;    <a class="code" href="load__store__utility_8h.xhtml#a270acb3e45f182ebb6526f3e85eadd14">STORE_VECTOR_SELECT</a>(res, <span class="keywordtype">short</span>, dst_addr, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>, VEC_SIZE_LEFTOVER, VEC_SIZE_LEFTOVER != 0 &amp;&amp; get_global_id(0) == 0)</div>
<div class="line"><a name="l02063"></a><span class="lineno"> 2063</span>&#160;}</div>
<div class="line"><a name="l02064"></a><span class="lineno"> 2064</span>&#160;<span class="preprocessor">#endif // defined(GEMMLOWP_OUTPUT_STAGE_QUANTIZE_DOWN_FIXEDPOINT_QSYMM16)</span></div>
<div class="line"><a name="l02065"></a><span class="lineno"> 2065</span>&#160; </div>
<div class="line"><a name="l02066"></a><span class="lineno"> 2066</span>&#160;<span class="preprocessor">#if defined(GEMMLOWP_OUTPUT_STAGE_QUANTIZE_DOWN_FLOAT)</span></div>
<div class="line"><a name="l02067"></a><span class="lineno"> 2067</span>&#160;<span class="comment">/** This OpenCL kernel is used to quantize down the int32 accumulator values of GEMMLowp to QASYMM8/QASYMM8_SIGNED</span></div>
<div class="line"><a name="l02068"></a><span class="lineno"> 2068</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l02069"></a><span class="lineno"> 2069</span>&#160;<span class="comment"> * This kernel takes a final int32 accumulator value (the output of matrix multiplication), and processes it to obtain the final QASYMM8/QASYMM8_SIGNED value.</span></div>
<div class="line"><a name="l02070"></a><span class="lineno"> 2070</span>&#160;<span class="comment"> * The following computations will be performed by the kernel:</span></div>
<div class="line"><a name="l02071"></a><span class="lineno"> 2071</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l02072"></a><span class="lineno"> 2072</span>&#160;<span class="comment"> *  -# Compute fixed point multiplication between each entry of input by result_fixedpoint_multiplier</span></div>
<div class="line"><a name="l02073"></a><span class="lineno"> 2073</span>&#160;<span class="comment"> *  -# Add bias to final result if bias tensor is not a nullptr</span></div>
<div class="line"><a name="l02074"></a><span class="lineno"> 2074</span>&#160;<span class="comment"> *  -# Requantize</span></div>
<div class="line"><a name="l02075"></a><span class="lineno"> 2075</span>&#160;<span class="comment"> *  -# Add offset to each result</span></div>
<div class="line"><a name="l02076"></a><span class="lineno"> 2076</span>&#160;<span class="comment"> *  -# Clamp the value between the specified min and max bounds</span></div>
<div class="line"><a name="l02077"></a><span class="lineno"> 2077</span>&#160;<span class="comment"> *  -# Clamp the resulting int32 values:</span></div>
<div class="line"><a name="l02078"></a><span class="lineno"> 2078</span>&#160;<span class="comment"> *      - to the [0..255] range and cast to QASYMM8.</span></div>
<div class="line"><a name="l02079"></a><span class="lineno"> 2079</span>&#160;<span class="comment"> *      - to the [-128..127] range and cast to QASYMM8_SIGNED.</span></div>
<div class="line"><a name="l02080"></a><span class="lineno"> 2080</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l02081"></a><span class="lineno"> 2081</span>&#160;<span class="comment"> * @attention The offset and scalar scale factor must be passed at compile time using -DRESULT_OFFSET, -DREAL_MULTIPLIER</span></div>
<div class="line"><a name="l02082"></a><span class="lineno"> 2082</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l02083"></a><span class="lineno"> 2083</span>&#160;<span class="comment"> * @note In case the addition of int32 biases is required, -DADD_BIAS should be passed at compile time</span></div>
<div class="line"><a name="l02084"></a><span class="lineno"> 2084</span>&#160;<span class="comment"> * @note The output datatype should be passed at compile time using -DOUTPUT_DATA_TYPE</span></div>
<div class="line"><a name="l02085"></a><span class="lineno"> 2085</span>&#160;<span class="comment"> * @note In case the clamping of the result is required, the min and max bounds can be passed at compile time using -DMIN_BOUND and -DMAX_BOUND.</span></div>
<div class="line"><a name="l02086"></a><span class="lineno"> 2086</span>&#160;<span class="comment"> *       These values can be used to implement &quot;rectified linear unit&quot; activation functions</span></div>
<div class="line"><a name="l02087"></a><span class="lineno"> 2087</span>&#160;<span class="comment"> * @note Vector size should be given as a preprocessor argument using -DVEC_SIZE=size. e.g. -DVEC_SIZE=16</span></div>
<div class="line"><a name="l02088"></a><span class="lineno"> 2088</span>&#160;<span class="comment"> * @note Leftover vector size has to be passed at compile time using -DVEC_SIZE_LEFTOVER. e.g. -DVEC_SIZE_LEFTOVER=3. It is defined as the remainder between the input&#39;s first dimension and VEC_SIZE</span></div>
<div class="line"><a name="l02089"></a><span class="lineno"> 2089</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l02090"></a><span class="lineno"> 2090</span>&#160;<span class="comment"> * @param[in]  src_ptr                              Pointer to the source tensor. Supported data type: S32</span></div>
<div class="line"><a name="l02091"></a><span class="lineno"> 2091</span>&#160;<span class="comment"> * @param[in]  src_stride_x                         Stride of the source tensor in X dimension (in bytes)</span></div>
<div class="line"><a name="l02092"></a><span class="lineno"> 2092</span>&#160;<span class="comment"> * @param[in]  src_step_x                           src_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l02093"></a><span class="lineno"> 2093</span>&#160;<span class="comment"> * @param[in]  src_stride_y                         Stride of the source tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l02094"></a><span class="lineno"> 2094</span>&#160;<span class="comment"> * @param[in]  src_step_y                           src_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l02095"></a><span class="lineno"> 2095</span>&#160;<span class="comment"> * @param[in]  src_stride_z                         Stride of the source tensor in Z dimension (in bytes)</span></div>
<div class="line"><a name="l02096"></a><span class="lineno"> 2096</span>&#160;<span class="comment"> * @param[in]  src_step_z                           src_stride_z * number of elements along Z processed per workitem(in bytes)</span></div>
<div class="line"><a name="l02097"></a><span class="lineno"> 2097</span>&#160;<span class="comment"> * @param[in]  src_offset_first_element_in_bytes    The offset of the first element in the source tensor</span></div>
<div class="line"><a name="l02098"></a><span class="lineno"> 2098</span>&#160;<span class="comment"> * @param[in]  biases_ptr                           Pointer to the biases tensor. Supported data type: same as @p src_ptr</span></div>
<div class="line"><a name="l02099"></a><span class="lineno"> 2099</span>&#160;<span class="comment"> * @param[in]  biases_stride_x                      Stride of the biases tensor in X dimension (in bytes)</span></div>
<div class="line"><a name="l02100"></a><span class="lineno"> 2100</span>&#160;<span class="comment"> * @param[in]  biases_step_x                        biases_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l02101"></a><span class="lineno"> 2101</span>&#160;<span class="comment"> * @param[in]  biases_offset_first_element_in_bytes The offset of the first element in the biases tensor</span></div>
<div class="line"><a name="l02102"></a><span class="lineno"> 2102</span>&#160;<span class="comment"> * @param[out] dst_ptr                              Pointer to the destination tensor Supported data type: QASYMM8</span></div>
<div class="line"><a name="l02103"></a><span class="lineno"> 2103</span>&#160;<span class="comment"> * @param[in]  dst_stride_x                         Stride of the destination tensor in X dimension (in bytes)</span></div>
<div class="line"><a name="l02104"></a><span class="lineno"> 2104</span>&#160;<span class="comment"> * @param[in]  dst_step_x                           dst_gx_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l02105"></a><span class="lineno"> 2105</span>&#160;<span class="comment"> * @param[in]  dst_stride_y                         Stride of the destination tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l02106"></a><span class="lineno"> 2106</span>&#160;<span class="comment"> * @param[in]  dst_step_y                           dst_gx_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l02107"></a><span class="lineno"> 2107</span>&#160;<span class="comment"> * @param[in]  dst_stride_z                         Stride of the source tensor in Z dimension (in bytes)</span></div>
<div class="line"><a name="l02108"></a><span class="lineno"> 2108</span>&#160;<span class="comment"> * @param[in]  dst_step_z                           src_stride_z * number of elements along Z processed per workitem(in bytes)</span></div>
<div class="line"><a name="l02109"></a><span class="lineno"> 2109</span>&#160;<span class="comment"> * @param[in]  dst_stride_w                         Stride of the source tensor in W dimension (in bytes)</span></div>
<div class="line"><a name="l02110"></a><span class="lineno"> 2110</span>&#160;<span class="comment"> * @param[in]  dst_step_w                           src_stride_w * number of elements along W processed per workitem(in bytes)</span></div>
<div class="line"><a name="l02111"></a><span class="lineno"> 2111</span>&#160;<span class="comment"> * @param[in]  dst_offset_first_element_in_bytes    The offset of the first element in the destination tensor</span></div>
<div class="line"><a name="l02112"></a><span class="lineno"> 2112</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l02113"></a><span class="lineno"> 2113</span>&#160;__kernel <span class="keywordtype">void</span> gemmlowp_output_stage_quantize_down_float(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>),</div>
<div class="line"><a name="l02114"></a><span class="lineno"> 2114</span>&#160;#<span class="keywordflow">if</span> defined(ADD_BIAS)</div>
<div class="line"><a name="l02115"></a><span class="lineno"> 2115</span>&#160;                                                        <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(biases),</div>
<div class="line"><a name="l02116"></a><span class="lineno"> 2116</span>&#160;#endif <span class="comment">// defined(ADD_BIAS)</span></div>
<div class="line"><a name="l02117"></a><span class="lineno"> 2117</span>&#160;#<span class="keywordflow">if</span> defined(DST_HEIGHT)</div>
<div class="line"><a name="l02118"></a><span class="lineno"> 2118</span>&#160;                                                        <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a481bdc6d61b3df9dcdbdb244f0f97790">TENSOR4D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>))</div>
<div class="line"><a name="l02119"></a><span class="lineno"> 2119</span>&#160;<span class="preprocessor">#else  // defined(DST_HEIGHT)</span></div>
<div class="line"><a name="l02120"></a><span class="lineno"> 2120</span>&#160;                                                        <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>))</div>
<div class="line"><a name="l02121"></a><span class="lineno"> 2121</span>&#160;#endif <span class="comment">// defined(DST_HEIGHT)</span></div>
<div class="line"><a name="l02122"></a><span class="lineno"> 2122</span>&#160;{</div>
<div class="line"><a name="l02123"></a><span class="lineno"> 2123</span>&#160;    <span class="comment">// Compute source and destination addresses</span></div>
<div class="line"><a name="l02124"></a><span class="lineno"> 2124</span>&#160;    <span class="keywordtype">int</span> x = max((<span class="keywordtype">int</span>)(get_global_id(0) * <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a> - (<a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a> - VEC_SIZE_LEFTOVER) % <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>), 0);</div>
<div class="line"><a name="l02125"></a><span class="lineno"> 2125</span>&#160;    <span class="keywordtype">int</span> y = get_global_id(1);</div>
<div class="line"><a name="l02126"></a><span class="lineno"> 2126</span>&#160;    <span class="keywordtype">int</span> z = get_global_id(2);</div>
<div class="line"><a name="l02127"></a><span class="lineno"> 2127</span>&#160; </div>
<div class="line"><a name="l02128"></a><span class="lineno"> 2128</span>&#160;    __global uchar *src_addr = src_ptr + src_offset_first_element_in_bytes + x * <span class="keyword">sizeof</span>(int) + y * src_stride_y + z * src_stride_z;</div>
<div class="line"><a name="l02129"></a><span class="lineno"> 2129</span>&#160; </div>
<div class="line"><a name="l02130"></a><span class="lineno"> 2130</span>&#160;    __global uchar *dst_addr = dst_ptr + dst_offset_first_element_in_bytes + x + y * dst_stride_y + z * dst_stride_z;</div>
<div class="line"><a name="l02131"></a><span class="lineno"> 2131</span>&#160; </div>
<div class="line"><a name="l02132"></a><span class="lineno"> 2132</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<span class="keywordtype">int</span>, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)</div>
<div class="line"><a name="l02133"></a><span class="lineno"> 2133</span>&#160;    input_values = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(<a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)(0, (__global <span class="keywordtype">int</span> *)src_addr);</div>
<div class="line"><a name="l02134"></a><span class="lineno"> 2134</span>&#160; </div>
<div class="line"><a name="l02135"></a><span class="lineno"> 2135</span>&#160;<span class="preprocessor">#if defined(ADD_BIAS)</span></div>
<div class="line"><a name="l02136"></a><span class="lineno"> 2136</span>&#160;    <span class="comment">// Add bias</span></div>
<div class="line"><a name="l02137"></a><span class="lineno"> 2137</span>&#160;    __global uchar *bias_addr = biases_ptr + biases_offset_first_element_in_bytes + x * <span class="keyword">sizeof</span>(int);</div>
<div class="line"><a name="l02138"></a><span class="lineno"> 2138</span>&#160; </div>
<div class="line"><a name="l02139"></a><span class="lineno"> 2139</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<span class="keywordtype">int</span>, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)</div>
<div class="line"><a name="l02140"></a><span class="lineno"> 2140</span>&#160;    biases_values = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(<a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)(0, (__global <span class="keywordtype">int</span> *)bias_addr);</div>
<div class="line"><a name="l02141"></a><span class="lineno"> 2141</span>&#160;    input_values += (<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<span class="keywordtype">int</span>, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>))biases_values;</div>
<div class="line"><a name="l02142"></a><span class="lineno"> 2142</span>&#160;<span class="preprocessor">#endif // defined(ADD_BIAS)</span></div>
<div class="line"><a name="l02143"></a><span class="lineno"> 2143</span>&#160; </div>
<div class="line"><a name="l02144"></a><span class="lineno"> 2144</span>&#160;    <span class="comment">// Convert to float</span></div>
<div class="line"><a name="l02145"></a><span class="lineno"> 2145</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<span class="keywordtype">float</span>, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)</div>
<div class="line"><a name="l02146"></a><span class="lineno"> 2146</span>&#160;    input_values_f = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(input_values, <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<span class="keywordtype">float</span>, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>));</div>
<div class="line"><a name="l02147"></a><span class="lineno"> 2147</span>&#160;    input_values_f = <a class="code" href="namespacearm__compute.xhtml#aaae2b6b1c3f4404121346a4c27b22647">round</a>(input_values_f * (<span class="keywordtype">float</span>)REAL_MULTIPLIER + (<span class="keywordtype">float</span>)OUTPUT_OFFSET);</div>
<div class="line"><a name="l02148"></a><span class="lineno"> 2148</span>&#160; </div>
<div class="line"><a name="l02149"></a><span class="lineno"> 2149</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(OUTPUT_DATA_TYPE, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>)</div>
<div class="line"><a name="l02150"></a><span class="lineno"> 2150</span>&#160;    res0 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a23fb01b6f3453cc0e48a026fd44f6acd">CONVERT_SAT</a>(input_values_f, <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(OUTPUT_DATA_TYPE, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>));</div>
<div class="line"><a name="l02151"></a><span class="lineno"> 2151</span>&#160; </div>
<div class="line"><a name="l02152"></a><span class="lineno"> 2152</span>&#160;<span class="preprocessor">#if defined(MIN_BOUND)</span></div>
<div class="line"><a name="l02153"></a><span class="lineno"> 2153</span>&#160;    res0 = max(res0, (<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(OUTPUT_DATA_TYPE, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>))MIN_BOUND);</div>
<div class="line"><a name="l02154"></a><span class="lineno"> 2154</span>&#160;<span class="preprocessor">#endif // defined(MIN_BOUND)</span></div>
<div class="line"><a name="l02155"></a><span class="lineno"> 2155</span>&#160;<span class="preprocessor">#if defined(MAX_BOUND)</span></div>
<div class="line"><a name="l02156"></a><span class="lineno"> 2156</span>&#160;    res0 = min(res0, (<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(OUTPUT_DATA_TYPE, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>))MAX_BOUND);</div>
<div class="line"><a name="l02157"></a><span class="lineno"> 2157</span>&#160;<span class="preprocessor">#endif // defined(MAX_BOUND)</span></div>
<div class="line"><a name="l02158"></a><span class="lineno"> 2158</span>&#160; </div>
<div class="line"><a name="l02159"></a><span class="lineno"> 2159</span>&#160;    <span class="comment">// Store the result</span></div>
<div class="line"><a name="l02160"></a><span class="lineno"> 2160</span>&#160;    <a class="code" href="load__store__utility_8h.xhtml#a270acb3e45f182ebb6526f3e85eadd14">STORE_VECTOR_SELECT</a>(res, OUTPUT_DATA_TYPE, dst_addr, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>, VEC_SIZE_LEFTOVER, VEC_SIZE_LEFTOVER != 0 &amp;&amp; get_global_id(0) == 0)</div>
<div class="line"><a name="l02161"></a><span class="lineno"> 2161</span>&#160;}</div>
<div class="line"><a name="l02162"></a><span class="lineno"> 2162</span>&#160;<span class="preprocessor">#endif // defined(GEMMLOWP_OUTPUT_STAGE_QUANTIZE_DOWN_FLOAT)</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="agemm__helpers_8h_xhtml"><div class="ttname"><a href="gemm__helpers_8h.xhtml">gemm_helpers.h</a></div></div>
<div class="ttc" id="atile__helpers_8h_xhtml_a9e74d0f555507a56c1bf98a497f1ed6c"><div class="ttname"><a href="tile__helpers_8h.xhtml#a9e74d0f555507a56c1bf98a497f1ed6c">T_LOAD</a></div><div class="ttdeci">#define T_LOAD(DATA_TYPE, HEIGHT, WIDTH, TENSOR_TYPE, TENSOR, X, Y, YI_MULTIPLIER, STRIDE_Y, dst)</div><div class="ttdoc">Load a tile from global memory (tensor)</div><div class="ttdef"><b>Definition:</b> <a href="tile__helpers_8h_source.xhtml#l00534">tile_helpers.h:534</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="a_cpu_gemm_assembly_dispatch_8cpp_xhtml_ae8b170dcb376fe60270f4675f84e4477"><div class="ttname"><a href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ae8b170dcb376fe60270f4675f84e4477">N</a></div><div class="ttdeci">unsigned int N</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00103">CpuGemmAssemblyDispatch.cpp:103</a></div></div>
<div class="ttc" id="atile__helpers_8h_xhtml_ad7108f3c35d805762fb3a8989d0b641f"><div class="ttname"><a href="tile__helpers_8h.xhtml#ad7108f3c35d805762fb3a8989d0b641f">GET_SPATIAL_IDX</a></div><div class="ttdeci">#define GET_SPATIAL_IDX(IDX, N0, PARTIAL_N0)</div><div class="ttdoc">Get the get_global_id with partial N0.</div><div class="ttdef"><b>Definition:</b> <a href="tile__helpers_8h_source.xhtml#l00352">tile_helpers.h:352</a></div></div>
<div class="ttc" id="asrc_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a23fb01b6f3453cc0e48a026fd44f6acd"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a23fb01b6f3453cc0e48a026fd44f6acd">CONVERT_SAT</a></div><div class="ttdeci">#define CONVERT_SAT(x, type)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00770">helpers.h:770</a></div></div>
<div class="ttc" id="arepeat_8h_xhtml_a4a61a8df72f9bc1b1dcc4cc4ec6ac3b9"><div class="ttname"><a href="repeat_8h.xhtml#a4a61a8df72f9bc1b1dcc4cc4ec6ac3b9">REPEAT_VAR_INIT_TO_CONST</a></div><div class="ttdeci">#define REPEAT_VAR_INIT_TO_CONST(N, TYPE, VAR, VAL)</div><div class="ttdef"><b>Definition:</b> <a href="repeat_8h_source.xhtml#l00138">repeat.h:138</a></div></div>
<div class="ttc" id="arepeat_8h_xhtml"><div class="ttname"><a href="repeat_8h.xhtml">repeat.h</a></div></div>
<div class="ttc" id="agemm__helpers_8h_xhtml_ade58486d6b2d13d7941106a9d2ec86d3"><div class="ttname"><a href="gemm__helpers_8h.xhtml#ade58486d6b2d13d7941106a9d2ec86d3">CALCULATE_Z_OFFSET</a></div><div class="ttdeci">#define CALCULATE_Z_OFFSET(M0, DATA_TYPE, Z, Y, HEIGHT_GEMM3D, DEPTH_GEMM3D, CROSS_PLANE_PAD, STRIDE_Y)</div><div class="ttdef"><b>Definition:</b> <a href="gemm__helpers_8h_source.xhtml#l01212">gemm_helpers.h:1212</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="atile__helpers_8h_xhtml_a00d8171420bb5b00639be9e0776262f5"><div class="ttname"><a href="tile__helpers_8h.xhtml#a00d8171420bb5b00639be9e0776262f5">T_MMUL</a></div><div class="ttdeci">#define T_MMUL(LHS_DATA_TYPE, RHS_DATA_TYPE, DST_DATA_TYPE, M0, N0, K0, LHS_LAYOUT, RHS_LAYOUT, lhs, rhs, dst)</div><div class="ttdoc">Matrix multiplication.</div><div class="ttdef"><b>Definition:</b> <a href="tile__helpers_8h_source.xhtml#l01367">tile_helpers.h:1367</a></div></div>
<div class="ttc" id="atile__helpers_8h_xhtml_abf7882e0ece57c1f08b93465e5b62d40"><div class="ttname"><a href="tile__helpers_8h.xhtml#abf7882e0ece57c1f08b93465e5b62d40">T_ELTWISE_BROADCAST_ADD_X</a></div><div class="ttdeci">#define T_ELTWISE_BROADCAST_ADD_X(DST_DATA_TYPE, M0, N0, lhs, rhs, dst)</div><div class="ttdef"><b>Definition:</b> <a href="tile__helpers_8h_source.xhtml#l01228">tile_helpers.h:1228</a></div></div>
<div class="ttc" id="aqlstm__layer__normalization_8cl_xhtml_a3fffea119c04c7680f2e9cf3fadf63b4"><div class="ttname"><a href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a></div><div class="ttdeci">#define VEC_SIZE</div><div class="ttdef"><b>Definition:</b> <a href="qlstm__layer__normalization_8cl_source.xhtml#l00054">qlstm_layer_normalization.cl:54</a></div></div>
<div class="ttc" id="asrc_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a31c8c760f08fb1a331b16b7c204321dc"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a31c8c760f08fb1a331b16b7c204321dc">CONVERT_TO_TENSOR3D_STRUCT</a></div><div class="ttdeci">#define CONVERT_TO_TENSOR3D_STRUCT(name)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00893">helpers.h:893</a></div></div>
<div class="ttc" id="asrc_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a36f754c05b6fddf6df0d8d0a74f8159f"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a></div><div class="ttdeci">#define VEC_DATA_TYPE(type, size)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00764">helpers.h:764</a></div></div>
<div class="ttc" id="astruct_image_xhtml"><div class="ttname"><a href="struct_image.xhtml">Image</a></div><div class="ttdoc">Structure to hold Image information.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00923">helpers.h:923</a></div></div>
<div class="ttc" id="arepeat_8h_xhtml_ad158a4337b01d9e95c8b953780c40fc8"><div class="ttname"><a href="repeat_8h.xhtml#ad158a4337b01d9e95c8b953780c40fc8">REPEAT_VAR_INIT_CONVERT</a></div><div class="ttdeci">#define REPEAT_VAR_INIT_CONVERT(N, TYPE_OUT, VAR_IN, VAR_OUT)</div><div class="ttdef"><b>Definition:</b> <a href="repeat_8h_source.xhtml#l00142">repeat.h:142</a></div></div>
<div class="ttc" id="agemm__helpers_8h_xhtml_af5a34192cbaedff0a43d6389815c676a"><div class="ttname"><a href="gemm__helpers_8h.xhtml#af5a34192cbaedff0a43d6389815c676a">TRANSPOSE_K0XN0</a></div><div class="ttdeci">#define TRANSPOSE_K0XN0(K0, N0, BASENAME, BS, TYPE)</div><div class="ttdoc">Create transposed vectors form the given source vectors.</div><div class="ttdef"><b>Definition:</b> <a href="gemm__helpers_8h_source.xhtml#l01435">gemm_helpers.h:1435</a></div></div>
<div class="ttc" id="atranspose_8cl_xhtml_a202537333048b910de7fc7ad58567200"><div class="ttname"><a href="transpose_8cl.xhtml#a202537333048b910de7fc7ad58567200">PARTIAL_STORE_M0</a></div><div class="ttdeci">#define PARTIAL_STORE_M0</div><div class="ttdef"><b>Definition:</b> <a href="transpose_8cl_source.xhtml#l00024">transpose.cl:24</a></div></div>
<div class="ttc" id="aload__store__utility_8h_xhtml_a270acb3e45f182ebb6526f3e85eadd14"><div class="ttname"><a href="load__store__utility_8h.xhtml#a270acb3e45f182ebb6526f3e85eadd14">STORE_VECTOR_SELECT</a></div><div class="ttdeci">#define STORE_VECTOR_SELECT(basename, data_type, ptr, vec_size, leftover, cond)</div><div class="ttdef"><b>Definition:</b> <a href="load__store__utility_8h_source.xhtml#l00594">load_store_utility.h:594</a></div></div>
<div class="ttc" id="aload__store__utility_8h_xhtml_aa67f21cebb5ef7733af9fe64a140038f"><div class="ttname"><a href="load__store__utility_8h.xhtml#aa67f21cebb5ef7733af9fe64a140038f">COMPUTE_M0_START_ROW</a></div><div class="ttdeci">#define COMPUTE_M0_START_ROW(y, M0, PARTIAL_STORE_M0)</div><div class="ttdef"><b>Definition:</b> <a href="load__store__utility_8h_source.xhtml#l00575">load_store_utility.h:575</a></div></div>
<div class="ttc" id="astruct_tensor3_d_xhtml"><div class="ttname"><a href="struct_tensor3_d.xhtml">Tensor3D</a></div><div class="ttdoc">Structure to hold 3D tensor information.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00932">helpers.h:932</a></div></div>
<div class="ttc" id="asrc_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a287e2fc366c312b468382c95bb90f91f"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a></div><div class="ttdeci">#define VLOAD(size)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00204">helpers.h:204</a></div></div>
<div class="ttc" id="asrc_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a6b83038822d1ae7ab619b684ed3b7fc0"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a></div><div class="ttdeci">#define TENSOR3D_DECLARATION(name)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00852">helpers.h:852</a></div></div>
<div class="ttc" id="asrc_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a40a6eb9f2a7712f08d6bb8ff6c9e6ca7"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a></div><div class="ttdeci">#define VECTOR_DECLARATION(name)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00845">helpers.h:845</a></div></div>
<div class="ttc" id="ahelpers__asymm_8h_xhtml"><div class="ttname"><a href="helpers__asymm_8h.xhtml">helpers_asymm.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_aaae2b6b1c3f4404121346a4c27b22647"><div class="ttname"><a href="namespacearm__compute.xhtml#aaae2b6b1c3f4404121346a4c27b22647">arm_compute::round</a></div><div class="ttdeci">int round(float x, RoundingPolicy rounding_policy)</div><div class="ttdoc">Return a rounded value of x.</div><div class="ttdef"><b>Definition:</b> <a href="_rounding_8cpp_source.xhtml#l00036">Rounding.cpp:36</a></div></div>
<div class="ttc" id="atranspose_8cl_xhtml_a384384e4aff4a5ab95d1e0f9e3808924"><div class="ttname"><a href="transpose_8cl.xhtml#a384384e4aff4a5ab95d1e0f9e3808924">PARTIAL_STORE_N0</a></div><div class="ttdeci">#define PARTIAL_STORE_N0</div><div class="ttdef"><b>Definition:</b> <a href="transpose_8cl_source.xhtml#l00025">transpose.cl:25</a></div></div>
<div class="ttc" id="ahelpers__asymm_8h_xhtml_a86de0ffca367bfcf27a8ae5dd1fdef2d"><div class="ttname"><a href="helpers__asymm_8h.xhtml#a86de0ffca367bfcf27a8ae5dd1fdef2d">ASYMM_MULT_BY_QUANT_MULTIPLIER_LESS_THAN_ONE</a></div><div class="ttdeci">#define ASYMM_MULT_BY_QUANT_MULTIPLIER_LESS_THAN_ONE(x, quantized_multiplier, right_shift, size)</div><div class="ttdef"><b>Definition:</b> <a href="helpers__asymm_8h_source.xhtml#l00408">helpers_asymm.h:408</a></div></div>
<div class="ttc" id="asrc_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_aebe814363556c244be043b13e7969197"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aebe814363556c244be043b13e7969197">CONVERT_TO_IMAGE_STRUCT</a></div><div class="ttdeci">#define CONVERT_TO_IMAGE_STRUCT(name)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00872">helpers.h:872</a></div></div>
<div class="ttc" id="aworking__space_8hpp_xhtml_a1fb7b822a92dd3ab6e7ab15c67b0ff9e"><div class="ttname"><a href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a></div><div class="ttdeci">const int32_t * bias</div><div class="ttdef"><b>Definition:</b> <a href="working__space_8hpp_source.xhtml#l00322">working_space.hpp:322</a></div></div>
<div class="ttc" id="a_cpu_gemm_assembly_dispatch_8cpp_xhtml_a42247993f81d6a8f73d2e0cb805c663b"><div class="ttname"><a href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a42247993f81d6a8f73d2e0cb805c663b">K</a></div><div class="ttdeci">unsigned int K</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00104">CpuGemmAssemblyDispatch.cpp:104</a></div></div>
<div class="ttc" id="atile__helpers_8h_xhtml_af5933c5bb4531ec2371957cb67518c9e"><div class="ttname"><a href="tile__helpers_8h.xhtml#af5933c5bb4531ec2371957cb67518c9e">T_STORE_INDIRECT_WIDTH_SELECT</a></div><div class="ttdeci">#define T_STORE_INDIRECT_WIDTH_SELECT(DATA_TYPE, HEIGHT, WIDTH0, WIDTH1, TENSOR_TYPE, TENSOR, X, STRIDE_Y, WIDTH1_CONDITION, src, indirect_y)</div><div class="ttdoc">Store a tile to global memory (tensor) using an indirect Y index tile and conditionally use a differe...</div><div class="ttdef"><b>Definition:</b> <a href="tile__helpers_8h_source.xhtml#l00899">tile_helpers.h:899</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a0886942393a3ba0dfefaa7516b159784"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a0886942393a3ba0dfefaa7516b159784">arm_compute::test::validation::for</a></div><div class="ttdeci">for(size_t k=0;k&lt; _target.size();++k)</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_unstack_8cpp_source.xhtml#l00091">Unstack.cpp:91</a></div></div>
<div class="ttc" id="atile__helpers_8h_xhtml_af5e0dc11a939b317bb77a58beb291fe7"><div class="ttname"><a href="tile__helpers_8h.xhtml#af5e0dc11a939b317bb77a58beb291fe7">LOOP_UNROLLING</a></div><div class="ttdeci">#define LOOP_UNROLLING(type, idx, start, step, num, macro)</div><div class="ttdef"><b>Definition:</b> <a href="tile__helpers_8h_source.xhtml#l00340">tile_helpers.h:340</a></div></div>
<div class="ttc" id="atile__helpers_8h_xhtml"><div class="ttname"><a href="tile__helpers_8h.xhtml">tile_helpers.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_a27e22718d532b621774aca14ce8b1101"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a27e22718d532b621774aca14ce8b1101">arm_compute::test::validation::reference::select</a></div><div class="ttdeci">SimpleTensor&lt; T &gt; select(const SimpleTensor&lt; uint8_t &gt; &amp;c, const SimpleTensor&lt; T &gt; &amp;x, const SimpleTensor&lt; T &gt; &amp;y)</div><div class="ttdef"><b>Definition:</b> <a href="reference_2_select_8cpp_source.xhtml#l00038">Select.cpp:38</a></div></div>
<div class="ttc" id="arepeat_8h_xhtml_a14853d375c486c36ccec84906086ffb9"><div class="ttname"><a href="repeat_8h.xhtml#a14853d375c486c36ccec84906086ffb9">REPEAT_VAR_INIT_CONVERT_SAT</a></div><div class="ttdeci">#define REPEAT_VAR_INIT_CONVERT_SAT(N, TYPE_OUT, VAR_IN, VAR_OUT)</div><div class="ttdef"><b>Definition:</b> <a href="repeat_8h_source.xhtml#l00146">repeat.h:146</a></div></div>
<div class="ttc" id="a_cpu_gemm_assembly_dispatch_8cpp_xhtml_a68dc0bf731afd0463b8e8cc4ed81c0f8"><div class="ttname"><a href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a68dc0bf731afd0463b8e8cc4ed81c0f8">M</a></div><div class="ttdeci">unsigned int M</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00102">CpuGemmAssemblyDispatch.cpp:102</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="agemm__helpers_8h_xhtml_a9fe7ded27e552f48fa285d34fb00427d"><div class="ttname"><a href="gemm__helpers_8h.xhtml#a9fe7ded27e552f48fa285d34fb00427d">LOAD_BLOCK</a></div><div class="ttdeci">#define LOAD_BLOCK(M0, N0, DATA_TYPE, BASENAME, PTR, OFFSET, STRIDE_Y, Z)</div><div class="ttdef"><b>Definition:</b> <a href="gemm__helpers_8h_source.xhtml#l00402">gemm_helpers.h:402</a></div></div>
<div class="ttc" id="atile__helpers_8h_xhtml_a43dcca5c53dde0299bb551a4cfcc9284"><div class="ttname"><a href="tile__helpers_8h.xhtml#a43dcca5c53dde0299bb551a4cfcc9284">DOT_PRODUCT4_INTEGER8</a></div><div class="ttdeci">#define DOT_PRODUCT4_INTEGER8(A_DATA_TYPE, B_DATA_TYPE, C_DATA_TYPE, x, y, val)</div><div class="ttdef"><b>Definition:</b> <a href="tile__helpers_8h_source.xhtml#l00395">tile_helpers.h:395</a></div></div>
<div class="ttc" id="asrc_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_aa8d95ba04fc73845abc6045952cae5be"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a></div><div class="ttdeci">#define CONVERT(x, type)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00767">helpers.h:767</a></div></div>
<div class="ttc" id="atile__helpers_8h_xhtml_a6f18c9f4dce3e2975d093c7cff9e6106"><div class="ttname"><a href="tile__helpers_8h.xhtml#a6f18c9f4dce3e2975d093c7cff9e6106">T_QUANTIZE8</a></div><div class="ttdeci">#define T_QUANTIZE8(SRC_DATA_TYPE, DST_DATA_TYPE, QUANTIZATION_TYPE, M0, N0, DST_OFFSET, DST_SHIFT, DST_MULTIPLIER, src, dst_multipliers, dst_shifts, dst)</div><div class="ttdoc">8-bit quantization with fixed-point scale</div><div class="ttdef"><b>Definition:</b> <a href="tile__helpers_8h_source.xhtml#l00966">tile_helpers.h:966</a></div></div>
<div class="ttc" id="asrc_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a22f42fcf2077d951271df83b55c1a71a"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a></div><div class="ttdeci">#define IMAGE_DECLARATION(name)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00848">helpers.h:848</a></div></div>
<div class="ttc" id="asrc_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a481bdc6d61b3df9dcdbdb244f0f97790"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a481bdc6d61b3df9dcdbdb244f0f97790">TENSOR4D_DECLARATION</a></div><div class="ttdeci">#define TENSOR4D_DECLARATION(name)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00856">helpers.h:856</a></div></div>
<div class="ttc" id="atile__helpers_8h_xhtml_a1b7124ed4713f1c104761e8deba36004"><div class="ttname"><a href="tile__helpers_8h.xhtml#a1b7124ed4713f1c104761e8deba36004">TILE</a></div><div class="ttdeci">#define TILE(DATA_TYPE, H, W, BASENAME)</div><div class="ttdoc">Tile object A tile object is a 2D memory block and can be accessed using the following syntax:</div><div class="ttdef"><b>Definition:</b> <a href="tile__helpers_8h_source.xhtml#l00074">tile_helpers.h:74</a></div></div>
<div class="ttc" id="ahelpers__asymm_8h_xhtml_aa1e2d1a27e885c3840b9258f5416078d"><div class="ttname"><a href="helpers__asymm_8h.xhtml#aa1e2d1a27e885c3840b9258f5416078d">ASYMM_MULT_BY_QUANT_MULTIPLIER_GREATER_THAN_ONE</a></div><div class="ttdeci">#define ASYMM_MULT_BY_QUANT_MULTIPLIER_GREATER_THAN_ONE(x, quantized_multiplier, left_shift, size)</div><div class="ttdef"><b>Definition:</b> <a href="helpers__asymm_8h_source.xhtml#l00406">helpers_asymm.h:406</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_8c278f79c760e5c5fbd911f9870614c1.xhtml">CL</a></li><li class="navelem"><a class="el" href="dir_25885286e9dad4fa105b7b25a8031bbf.xhtml">cl_kernels</a></li><li class="navelem"><a class="el" href="dir_a50b9933354d81525095b5e7ad336497.xhtml">common</a></li><li class="navelem"><a class="el" href="gemmlowp_8cl.xhtml">gemmlowp.cl</a></li>
    <li class="footer">Generated on Tue Nov 21 2023 16:31:00 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
