<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/CL/cl_kernels/nhwc/im2col.cl Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('nhwc_2im2col_8cl_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">im2col.cl</div>  </div>
</div><!--header-->
<div class="contents">
<a href="nhwc_2im2col_8cl.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2018-2021 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml">helpers.h</a>&quot;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160; </div>
<div class="line"><a name="l00026"></a><span class="lineno"><a class="line" href="nhwc_2im2col_8cl.xhtml#aa6a1a5e263ffe3fabde82fc7534d0e10">   26</a></span>&#160;<span class="preprocessor">#define VECTOR_N VEC_DATA_TYPE(DATA_TYPE, VECTOR_SIZE)</span></div>
<div class="line"><a name="l00027"></a><span class="lineno"><a class="line" href="nhwc_2im2col_8cl.xhtml#ae56939fc95de880b4c4431a77fa7d5b5">   27</a></span>&#160;<span class="preprocessor">#define COND_N SIGNED_INT_VEC_DATA_TYPE(DATA_TYPE, VECTOR_SIZE)</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160; </div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#if defined(IM2COL_3X3) || defined(IM2COL_9X9)</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">/** Store a 1x9 row or a 3x3 block in a boundary-aware manner to avoid paddings in the channel dimension</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment"> *  @name IM2COL1X9_NHWC_STORE</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment"> *  @note To use this macro for a 3x3 block, @p ROW has to be 0</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment"> * @param[in] VECTOR_SIZE          The non-boundary vector width of @p DATA. Supported: 1(scalar), 2, 3, 4, 8, 16</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment"> * @param[in] BOUNDARY_VECTOR_SIZE The boundary vector width of @p DATA. Supported: 1-16, but has to be &lt;= @p size</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment"> * @param[in] DATA_TYPE            Data type of @p DATA</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment"> * @param[in] SRC_DEPTH            Input channel size / depth</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment"> * @param[in] DATA                 Value variable base name</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment"> * @param[in] ROW                  The row number to store. Supported: 0-8</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment"> * @param[in] OUTPUT_PTR           Output pointer</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment"> * @{</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="preprocessor">#if defined(VECTOR_SIZE) &amp;&amp; defined(BOUNDARY_VECTOR_SIZE) &amp;&amp; BOUNDARY_VECTOR_SIZE &lt; VECTOR_SIZE</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor">#define IM2COL1X9_NHWC_STORE(VECTOR_SIZE, BOUNDARY_VECTOR_SIZE, DATA_TYPE, SRC_DEPTH, DATA, ROW, OUTPUT_PTR)         \</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="preprocessor">    const bool at_channel_boundary = get_global_id(0) == 0;                                                          \</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="preprocessor">    if(at_channel_boundary)                                                                                          \</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="preprocessor">    {                                                                                                                \</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="preprocessor">        IM2COL1X9_NHWC_STORE_PARTIAL(VECTOR_SIZE, BOUNDARY_VECTOR_SIZE, DATA_TYPE, SRC_DEPTH, DATA, ROW, OUTPUT_PTR) \</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="preprocessor">    }                                                                                                                \</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="preprocessor">    else                                                                                                             \</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="preprocessor">    {                                                                                                                \</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="preprocessor">        IM2COL1X9_NHWC_STORE_NONPARTIAL(VECTOR_SIZE, DATA_TYPE, SRC_DEPTH, DATA, ROW, OUTPUT_PTR)                    \</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="preprocessor">    }</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="preprocessor">#else // defined(VECTOR_SIZE) &amp;&amp; defined(BOUNDARY_VECTOR_SIZE) &amp;&amp; BOUNDARY_VECTOR_SIZE &lt; VECTOR_SIZE</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="preprocessor">#define IM2COL1X9_NHWC_STORE(VECTOR_SIZE, BOUNDARY_VECTOR_SIZE, DATA_TYPE, SRC_DEPTH, DATA, ROW, OUTPUT_PTR) \</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="preprocessor">    IM2COL1X9_NHWC_STORE_NONPARTIAL(VECTOR_SIZE, DATA_TYPE, SRC_DEPTH, DATA, ROW, OUTPUT_PTR)</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="preprocessor">#endif // defined(VECTOR_SIZE) &amp;&amp; defined(BOUNDARY_VECTOR_SIZE) &amp;&amp; BOUNDARY_VECTOR_SIZE &lt; VECTOR_SIZE</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160; </div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="preprocessor">#define IM2COL1X9_NHWC_STORE_NONPARTIAL(VECTOR_SIZE, DATA_TYPE, SRC_DEPTH, DATA, ROW, OUTPUT_PTR) \</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="preprocessor">    VSTORE(VECTOR_SIZE)                                                                           \</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="preprocessor">    (DATA##0, 0, (__global DATA_TYPE *)(OUTPUT_PTR) + (0 + ROW * 9) * SRC_DEPTH);                 \</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="preprocessor">    VSTORE(VECTOR_SIZE)                                                                           \</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="preprocessor">    (DATA##1, 0, (__global DATA_TYPE *)(OUTPUT_PTR) + (1 + ROW * 9) * SRC_DEPTH);                 \</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="preprocessor">    VSTORE(VECTOR_SIZE)                                                                           \</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="preprocessor">    (DATA##2, 0, (__global DATA_TYPE *)(OUTPUT_PTR) + (2 + ROW * 9) * SRC_DEPTH);                 \</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="preprocessor">    VSTORE(VECTOR_SIZE)                                                                           \</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="preprocessor">    (DATA##3, 0, (__global DATA_TYPE *)(OUTPUT_PTR) + (3 + ROW * 9) * SRC_DEPTH);                 \</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="preprocessor">    VSTORE(VECTOR_SIZE)                                                                           \</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="preprocessor">    (DATA##4, 0, (__global DATA_TYPE *)(OUTPUT_PTR) + (4 + ROW * 9) * SRC_DEPTH);                 \</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="preprocessor">    VSTORE(VECTOR_SIZE)                                                                           \</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="preprocessor">    (DATA##5, 0, (__global DATA_TYPE *)(OUTPUT_PTR) + (5 + ROW * 9) * SRC_DEPTH);                 \</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="preprocessor">    VSTORE(VECTOR_SIZE)                                                                           \</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="preprocessor">    (DATA##6, 0, (__global DATA_TYPE *)(OUTPUT_PTR) + (6 + ROW * 9) * SRC_DEPTH);                 \</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="preprocessor">    VSTORE(VECTOR_SIZE)                                                                           \</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="preprocessor">    (DATA##7, 0, (__global DATA_TYPE *)(OUTPUT_PTR) + (7 + ROW * 9) * SRC_DEPTH);                 \</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="preprocessor">    VSTORE(VECTOR_SIZE)                                                                           \</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="preprocessor">    (DATA##8, 0, (__global DATA_TYPE *)(OUTPUT_PTR) + (8 + ROW * 9) * SRC_DEPTH);</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160; </div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="preprocessor">#define IM2COL1X9_NHWC_STORE_PARTIAL(VECTOR_SIZE, BOUNDARY_VECTOR_SIZE, DATA_TYPE, SRC_DEPTH, DATA, ROW, OUTPUT_PTR) \</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="preprocessor">    VSTORE_PARTIAL(VECTOR_SIZE, BOUNDARY_VECTOR_SIZE)                                                                \</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="preprocessor">    (DATA##0, 0, (__global DATA_TYPE *)(OUTPUT_PTR) + (0 + ROW * 9) * SRC_DEPTH);                                    \</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="preprocessor">    VSTORE_PARTIAL(VECTOR_SIZE, BOUNDARY_VECTOR_SIZE)                                                                \</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="preprocessor">    (DATA##1, 0, (__global DATA_TYPE *)(OUTPUT_PTR) + (1 + ROW * 9) * SRC_DEPTH);                                    \</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="preprocessor">    VSTORE_PARTIAL(VECTOR_SIZE, BOUNDARY_VECTOR_SIZE)                                                                \</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="preprocessor">    (DATA##2, 0, (__global DATA_TYPE *)(OUTPUT_PTR) + (2 + ROW * 9) * SRC_DEPTH);                                    \</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="preprocessor">    VSTORE_PARTIAL(VECTOR_SIZE, BOUNDARY_VECTOR_SIZE)                                                                \</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="preprocessor">    (DATA##3, 0, (__global DATA_TYPE *)(OUTPUT_PTR) + (3 + ROW * 9) * SRC_DEPTH);                                    \</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="preprocessor">    VSTORE_PARTIAL(VECTOR_SIZE, BOUNDARY_VECTOR_SIZE)                                                                \</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="preprocessor">    (DATA##4, 0, (__global DATA_TYPE *)(OUTPUT_PTR) + (4 + ROW * 9) * SRC_DEPTH);                                    \</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="preprocessor">    VSTORE_PARTIAL(VECTOR_SIZE, BOUNDARY_VECTOR_SIZE)                                                                \</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="preprocessor">    (DATA##5, 0, (__global DATA_TYPE *)(OUTPUT_PTR) + (5 + ROW * 9) * SRC_DEPTH);                                    \</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="preprocessor">    VSTORE_PARTIAL(VECTOR_SIZE, BOUNDARY_VECTOR_SIZE)                                                                \</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="preprocessor">    (DATA##6, 0, (__global DATA_TYPE *)(OUTPUT_PTR) + (6 + ROW * 9) * SRC_DEPTH);                                    \</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="preprocessor">    VSTORE_PARTIAL(VECTOR_SIZE, BOUNDARY_VECTOR_SIZE)                                                                \</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="preprocessor">    (DATA##7, 0, (__global DATA_TYPE *)(OUTPUT_PTR) + (7 + ROW * 9) * SRC_DEPTH);                                    \</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="preprocessor">    VSTORE_PARTIAL(VECTOR_SIZE, BOUNDARY_VECTOR_SIZE)                                                                \</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="preprocessor">    (DATA##8, 0, (__global DATA_TYPE *)(OUTPUT_PTR) + (8 + ROW * 9) * SRC_DEPTH);</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment">/** @}*/</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="preprocessor">#endif // defined(IM2COL_3X3) || defined(IM2COL_9X9)</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160; </div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="preprocessor">#if defined(IM2COL_3X3)</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment">/** This kernel performs im2col when the kernel size is 3x3 and the data layout is NHWC</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment"> * @note This kernel computes VECTOR_SIZE elements</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment"> * @note This kernel stores VECTOR_SIZE or BOUNDARY_VECTOR_SIZE (if at boundary) elements</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment"> * @note The vector size must be passed at compile time using -DVECTOR_SIZE: e.g. -DVECTOR_SIZE=2</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment"> * @note The boundary vector size must be passed at compile time using -DBOUNDARY_VECTOR_SIZE: e.g. -DBOUNDARY_VECTOR_SIZE=1</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment"> * @note The data type must be passed at compile time using -DDATA_TYPE: e.g. -DDATA_TYPE=float</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment"> * @note The width of output tensor after matrix multiplication must be passed at compile time using -DCONVOLVED_WIDTH: e.g. -DCONVOLVED_WIDTH=34</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment"> * @note The kernel depth must be passed at compile time using -DSRC_DEPTH: e.g. -DSRC_DEPTH=3</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment"> * @note The stride along the Y direction must be passed at compile time using -DSTRIDE_Y: e.g. -DSTRIDE_Y=1</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment"> * @note In case biases will be added to the convolution -DHAS_BIAS has to be passed to append the final matrix with 1 in each row.</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment"> * @param[in]  src_ptr                           Pointer to the source tensor. Supported data types: QASYMM8_SIGNED/QASYMM8/F16/F32</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment"> * @param[in]  src_stride_x                      Stride of the source tensor in X dimension (in bytes)</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment"> * @param[in]  src_step_x                        src_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment"> * @param[in]  src_stride_y                      Stride of the source tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment"> * @param[in]  src_step_y                        src_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment"> * @param[in]  src_stride_z                      Stride of the source tensor in Z dimension (in bytes)</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment"> * @param[in]  src_step_z                        src_stride_z * number of elements along Z processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment"> * @param[in]  src_offset_first_element_in_bytes The offset of the first element in the source tensor</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment"> * @param[out] dst_ptr                           Pointer to the destination tensor. Supported data types: same as @p src_ptr</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment"> * @param[in]  dst_stride_x                      Stride of the destination tensor in X dimension (in bytes)</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment"> * @param[in]  dst_step_x                        dst_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment"> * @param[in]  dst_stride_y                      Stride of the destination tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment"> * @param[in]  dst_step_y                        dst_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment"> * @param[in]  dst_offset_first_element_in_bytes The offset of the first element in the destination tensor</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment"> * @param[in]  src_stride_w                      Stride of the source tensor in W dimension (in bytes).</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment"> * @param[in]  dst_stride_w                      Stride of the destination tensor in W dimension (in bytes).</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;__kernel <span class="keywordtype">void</span> im2col3x3_nhwc(</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>),</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>),</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    uint src_stride_w,</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    uint dst_stride_w)</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;{</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="comment">// input feature map, boundary-corrected (shift all non-boundary vectors by shift_amount) to avoid padding</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> shift_amount = (int)VECTOR_SIZE - (<span class="keywordtype">int</span>)BOUNDARY_VECTOR_SIZE;</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> ch           = max((<span class="keywordtype">int</span>)(get_global_id(0) * VECTOR_SIZE) - shift_amount, 0);</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> yo           = get_global_id(1);</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> batch        = get_global_id(2); <span class="comment">// batch size</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160; </div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="comment">// Calculate input indices</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> xi = (get_global_id(1) % CONVOLVED_WIDTH) * STRIDE_X;</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> yi = (get_global_id(1) / (int)CONVOLVED_WIDTH) * STRIDE_Y;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160; </div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="comment">// Get input and output address</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    __global uchar *input_ptr  = src_ptr + src_offset_first_element_in_bytes + ch * <span class="keyword">sizeof</span>(DATA_TYPE) + batch * (<span class="keywordtype">int</span>)src_stride_w;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    __global uchar *output_ptr = dst_ptr + dst_offset_first_element_in_bytes + ch * <span class="keyword">sizeof</span>(DATA_TYPE) + yo * (<span class="keywordtype">int</span>)dst_stride_y + batch * (int)dst_stride_w;</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160; </div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keywordtype">int</span>  yi_coord = 0;</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    int3 <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>   = 0;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160; </div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="comment">// Clamp xi</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    int3 xi_offset = ((int3)xi + (int3)(0, 1, 2) * DILATION_X - (int3)PAD_LEFT);</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="preprocessor">#if PAD_LEFT != 0 || PAD_RIGHT != 0</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="preprocessor">#define CLAMP(x, min_val, max_val) min(max(x, min_val), max_val)</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    xi_offset = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aabdbe431f2713c5c2604cb9872b66aab">CLAMP</a>(xi_offset, (int3)0, (int3)(SRC_WIDTH - 1));</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="preprocessor">#endif // PAD_LEFT != 0 || PAD_RIGHT != 0</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="comment">// Multiply by src_stride_y as the width (X) dimension here is the second (y) dimension in src NHWC tensor</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    xi_offset *= (int3)src_stride_y;</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160; </div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="comment">// Out-of-bound condition for X</span></div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    int3 x_cond = (((int3)xi + (int3)(0, 1, 2) * DILATION_X - (int3)PAD_LEFT) &lt; (int3)0) || (((int3)xi + (int3)(0, 1, 2) * DILATION_X - (int3)PAD_LEFT) &gt;= (int3)SRC_WIDTH);</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160; </div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="comment">// yi == 0</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="comment">// Clamp yi</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="comment">// yi_coord is casted to unsigned int in order to use just a min() operation</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="comment">// A &quot;-1&quot; 32 bit signed variable converted to unsigned gives 4294967295</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="comment">// This is a trick so that the values loaded in the padding areas are always from the last row (SRC_HEIGHT - 1),</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="comment">// because of the negative yi_coord wrap-around, but it gets overwritten by PAD_VALUE immediately as the wrap-around</span></div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="comment">// also causes y_cond (y padding condition) to be satisfied</span></div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    yi_coord = yi - (int)PAD_TOP;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160; </div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="comment">// Clamp only if PAD_TOP or PAD_BOTTOM is not equal to 0</span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="preprocessor">#if PAD_TOP != 0 || PAD_BOTTOM != 0</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    yi_coord = min((uint)yi_coord, (uint)(SRC_HEIGHT - 1));</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="preprocessor">#endif // PAD_TOP != 0 || PAD_BOTTOM != 0</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160; </div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="comment">// Compute offset</span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> = xi_offset + (yi_coord * (int)src_stride_z);</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160; </div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="comment">// Load input values</span></div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <a class="code" href="nhwc_2im2col_8cl.xhtml#aa6a1a5e263ffe3fabde82fc7534d0e10">VECTOR_N</a> values0 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VECTOR_SIZE)(0, (__global DATA_TYPE *)(input_ptr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>.s0));</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <a class="code" href="nhwc_2im2col_8cl.xhtml#aa6a1a5e263ffe3fabde82fc7534d0e10">VECTOR_N</a> values1 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VECTOR_SIZE)(0, (__global DATA_TYPE *)(input_ptr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>.s1));</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <a class="code" href="nhwc_2im2col_8cl.xhtml#aa6a1a5e263ffe3fabde82fc7534d0e10">VECTOR_N</a> values2 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VECTOR_SIZE)(0, (__global DATA_TYPE *)(input_ptr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>.s2));</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160; </div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="preprocessor">#if PAD_TOP != 0 || PAD_LEFT != 0 || PAD_BOTTOM != 0 || PAD_RIGHT != 0</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="comment">// Replace invalid values with PAD_VALUE</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="keywordtype">int</span> y_cond = (int)((uint)(yi - (int)PAD_TOP) &gt;= (uint)(SRC_HEIGHT));</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    values0    = <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a27e22718d532b621774aca14ce8b1101">select</a>(values0, (<a class="code" href="nhwc_2im2col_8cl.xhtml#aa6a1a5e263ffe3fabde82fc7534d0e10">VECTOR_N</a>)PAD_VALUE, (<a class="code" href="nhwc_2im2col_8cl.xhtml#ae56939fc95de880b4c4431a77fa7d5b5">COND_N</a>)((<a class="code" href="nhwc_2im2col_8cl.xhtml#ae56939fc95de880b4c4431a77fa7d5b5">COND_N</a>)y_cond || (<a class="code" href="nhwc_2im2col_8cl.xhtml#ae56939fc95de880b4c4431a77fa7d5b5">COND_N</a>)(x_cond.s0)));</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    values1    = <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a27e22718d532b621774aca14ce8b1101">select</a>(values1, (<a class="code" href="nhwc_2im2col_8cl.xhtml#aa6a1a5e263ffe3fabde82fc7534d0e10">VECTOR_N</a>)PAD_VALUE, (<a class="code" href="nhwc_2im2col_8cl.xhtml#ae56939fc95de880b4c4431a77fa7d5b5">COND_N</a>)((<a class="code" href="nhwc_2im2col_8cl.xhtml#ae56939fc95de880b4c4431a77fa7d5b5">COND_N</a>)y_cond || (<a class="code" href="nhwc_2im2col_8cl.xhtml#ae56939fc95de880b4c4431a77fa7d5b5">COND_N</a>)(x_cond.s1)));</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    values2    = <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a27e22718d532b621774aca14ce8b1101">select</a>(values2, (<a class="code" href="nhwc_2im2col_8cl.xhtml#aa6a1a5e263ffe3fabde82fc7534d0e10">VECTOR_N</a>)PAD_VALUE, (<a class="code" href="nhwc_2im2col_8cl.xhtml#ae56939fc95de880b4c4431a77fa7d5b5">COND_N</a>)((<a class="code" href="nhwc_2im2col_8cl.xhtml#ae56939fc95de880b4c4431a77fa7d5b5">COND_N</a>)y_cond || (<a class="code" href="nhwc_2im2col_8cl.xhtml#ae56939fc95de880b4c4431a77fa7d5b5">COND_N</a>)(x_cond.s2)));</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="preprocessor">#endif // PAD_TOP != 0 || PAD_LEFT != 0 || PAD_BOTTOM != 0 || PAD_RIGHT != 0</span></div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160; </div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="comment">// yi == 1</span></div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="comment">// Clamp yi_coord (it can be negative if PAD_TOP &gt; 1)</span></div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    yi_coord = yi - (int)PAD_TOP + 1 * DILATION_Y;</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160; </div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="comment">// Clamp only if PAD_TOP or PAD_BOTTOM is not equal to 0</span></div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="preprocessor">#if PAD_TOP != 0 || PAD_BOTTOM != 0</span></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    yi_coord = min((uint)yi_coord, (uint)(SRC_HEIGHT - 1));</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="preprocessor">#endif // PAD_TOP != 0 || PAD_BOTTOM != 0</span></div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160; </div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="comment">// Compute offset</span></div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> = xi_offset + (yi_coord * (int)src_stride_z);</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160; </div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="comment">// Load input values</span></div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <a class="code" href="nhwc_2im2col_8cl.xhtml#aa6a1a5e263ffe3fabde82fc7534d0e10">VECTOR_N</a> values3 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VECTOR_SIZE)(0, (__global DATA_TYPE *)(input_ptr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>.s0));</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <a class="code" href="nhwc_2im2col_8cl.xhtml#aa6a1a5e263ffe3fabde82fc7534d0e10">VECTOR_N</a> values4 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VECTOR_SIZE)(0, (__global DATA_TYPE *)(input_ptr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>.s1));</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <a class="code" href="nhwc_2im2col_8cl.xhtml#aa6a1a5e263ffe3fabde82fc7534d0e10">VECTOR_N</a> values5 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VECTOR_SIZE)(0, (__global DATA_TYPE *)(input_ptr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>.s2));</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160; </div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="preprocessor">#if PAD_TOP != 0 || PAD_LEFT != 0 || PAD_BOTTOM != 0 || PAD_RIGHT != 0</span></div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="comment">// Replace invalid values with zeros</span></div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    y_cond  = (int)((uint)(yi - (int)PAD_TOP + 1 * DILATION_Y) &gt;= (uint)(SRC_HEIGHT));</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    values3 = <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a27e22718d532b621774aca14ce8b1101">select</a>(values3, (<a class="code" href="nhwc_2im2col_8cl.xhtml#aa6a1a5e263ffe3fabde82fc7534d0e10">VECTOR_N</a>)PAD_VALUE, (<a class="code" href="nhwc_2im2col_8cl.xhtml#ae56939fc95de880b4c4431a77fa7d5b5">COND_N</a>)((<a class="code" href="nhwc_2im2col_8cl.xhtml#ae56939fc95de880b4c4431a77fa7d5b5">COND_N</a>)y_cond || (<a class="code" href="nhwc_2im2col_8cl.xhtml#ae56939fc95de880b4c4431a77fa7d5b5">COND_N</a>)(x_cond.s0)));</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    values4 = <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a27e22718d532b621774aca14ce8b1101">select</a>(values4, (<a class="code" href="nhwc_2im2col_8cl.xhtml#aa6a1a5e263ffe3fabde82fc7534d0e10">VECTOR_N</a>)PAD_VALUE, (<a class="code" href="nhwc_2im2col_8cl.xhtml#ae56939fc95de880b4c4431a77fa7d5b5">COND_N</a>)((<a class="code" href="nhwc_2im2col_8cl.xhtml#ae56939fc95de880b4c4431a77fa7d5b5">COND_N</a>)y_cond || (<a class="code" href="nhwc_2im2col_8cl.xhtml#ae56939fc95de880b4c4431a77fa7d5b5">COND_N</a>)(x_cond.s1)));</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    values5 = <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a27e22718d532b621774aca14ce8b1101">select</a>(values5, (<a class="code" href="nhwc_2im2col_8cl.xhtml#aa6a1a5e263ffe3fabde82fc7534d0e10">VECTOR_N</a>)PAD_VALUE, (<a class="code" href="nhwc_2im2col_8cl.xhtml#ae56939fc95de880b4c4431a77fa7d5b5">COND_N</a>)((<a class="code" href="nhwc_2im2col_8cl.xhtml#ae56939fc95de880b4c4431a77fa7d5b5">COND_N</a>)y_cond || (<a class="code" href="nhwc_2im2col_8cl.xhtml#ae56939fc95de880b4c4431a77fa7d5b5">COND_N</a>)(x_cond.s2)));</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="preprocessor">#endif // PAD_TOP != 0 || PAD_LEFT != 0 || PAD_BOTTOM != 0 || PAD_RIGHT != 0</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160; </div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="comment">// yi == 2</span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="comment">// Clamp yi_coord</span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    yi_coord = yi - (int)PAD_TOP + 2 * DILATION_Y;</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160; </div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="comment">// Clamp only if PAD_TOP or PAD_BOTTOM is not equal to 0</span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="preprocessor">#if PAD_TOP != 0 || PAD_BOTTOM != 0</span></div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    yi_coord = min((uint)yi_coord, (uint)(SRC_HEIGHT - 1));</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="preprocessor">#endif // PAD_TOP != 0 || PAD_BOTTOM != 0</span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160; </div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="comment">// Compute offset</span></div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> = xi_offset + (yi_coord * (int)src_stride_z);</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160; </div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="comment">// Load input values</span></div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <a class="code" href="nhwc_2im2col_8cl.xhtml#aa6a1a5e263ffe3fabde82fc7534d0e10">VECTOR_N</a> values6 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VECTOR_SIZE)(0, (__global DATA_TYPE *)(input_ptr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>.s0));</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <a class="code" href="nhwc_2im2col_8cl.xhtml#aa6a1a5e263ffe3fabde82fc7534d0e10">VECTOR_N</a> values7 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VECTOR_SIZE)(0, (__global DATA_TYPE *)(input_ptr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>.s1));</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <a class="code" href="nhwc_2im2col_8cl.xhtml#aa6a1a5e263ffe3fabde82fc7534d0e10">VECTOR_N</a> values8 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VECTOR_SIZE)(0, (__global DATA_TYPE *)(input_ptr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>.s2));</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160; </div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="preprocessor">#if PAD_TOP != 0 || PAD_LEFT != 0 || PAD_BOTTOM != 0 || PAD_RIGHT != 0</span></div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="comment">// Replace invalid values with PAD_VALUE</span></div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    y_cond  = (int)((uint)(yi - (int)PAD_TOP + 2 * DILATION_Y) &gt;= (uint)(SRC_HEIGHT));</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    values6 = <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a27e22718d532b621774aca14ce8b1101">select</a>(values6, (<a class="code" href="nhwc_2im2col_8cl.xhtml#aa6a1a5e263ffe3fabde82fc7534d0e10">VECTOR_N</a>)PAD_VALUE, (<a class="code" href="nhwc_2im2col_8cl.xhtml#ae56939fc95de880b4c4431a77fa7d5b5">COND_N</a>)((<a class="code" href="nhwc_2im2col_8cl.xhtml#ae56939fc95de880b4c4431a77fa7d5b5">COND_N</a>)y_cond || (<a class="code" href="nhwc_2im2col_8cl.xhtml#ae56939fc95de880b4c4431a77fa7d5b5">COND_N</a>)(x_cond.s0)));</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    values7 = <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a27e22718d532b621774aca14ce8b1101">select</a>(values7, (<a class="code" href="nhwc_2im2col_8cl.xhtml#aa6a1a5e263ffe3fabde82fc7534d0e10">VECTOR_N</a>)PAD_VALUE, (<a class="code" href="nhwc_2im2col_8cl.xhtml#ae56939fc95de880b4c4431a77fa7d5b5">COND_N</a>)((<a class="code" href="nhwc_2im2col_8cl.xhtml#ae56939fc95de880b4c4431a77fa7d5b5">COND_N</a>)y_cond || (<a class="code" href="nhwc_2im2col_8cl.xhtml#ae56939fc95de880b4c4431a77fa7d5b5">COND_N</a>)(x_cond.s1)));</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    values8 = <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a27e22718d532b621774aca14ce8b1101">select</a>(values8, (<a class="code" href="nhwc_2im2col_8cl.xhtml#aa6a1a5e263ffe3fabde82fc7534d0e10">VECTOR_N</a>)PAD_VALUE, (<a class="code" href="nhwc_2im2col_8cl.xhtml#ae56939fc95de880b4c4431a77fa7d5b5">COND_N</a>)((<a class="code" href="nhwc_2im2col_8cl.xhtml#ae56939fc95de880b4c4431a77fa7d5b5">COND_N</a>)y_cond || (<a class="code" href="nhwc_2im2col_8cl.xhtml#ae56939fc95de880b4c4431a77fa7d5b5">COND_N</a>)(x_cond.s2)));</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="preprocessor">#endif // PAD_TOP != 0 || PAD_LEFT != 0 || PAD_BOTTOM != 0 || PAD_RIGHT != 0</span></div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160; </div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="comment">// Store in a boundary-aware way to avoid padding</span></div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    IM2COL1X9_NHWC_STORE(VECTOR_SIZE, BOUNDARY_VECTOR_SIZE, DATA_TYPE, SRC_DEPTH, values, 0, output_ptr)</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160; </div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="preprocessor">#ifdef HAS_BIAS</span></div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="comment">// We can use VECTOR_SIZE instead of BOUNDARY_VECTOR_SIZE even if it&#39;s at the boundary. This is because the bias is</span></div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="comment">// added at the end of the channel, while the boundary vec is at the beginning of the channel.</span></div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="comment">// The only case where the boundary vec is at the end of the channel is when there&#39;s only a single boundary vec in</span></div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="comment">// the whole channel dimension, but in that case VECTOR_SIZE is also equal to BOUNDARY_VECTOR_SIZE</span></div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="comment">// See the value of num_elems_processed_per_iteration in configure_opencl_kernel method in CLIm2ColKernel.cpp</span></div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="keywordflow">if</span>((ch + VECTOR_SIZE) &gt;= SRC_DEPTH)</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    {</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        *((__global DATA_TYPE *)(output_ptr) - ch + SRC_DEPTH * 9) = 1.0f;</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    }</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="preprocessor">#endif // HAS_BIAS</span></div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;}</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="preprocessor">#endif // defined(IM2COL_3X3)</span></div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160; </div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="preprocessor">#if defined(IM2COL_9X9)</span></div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="preprocessor">#if PAD_TOP != 0 || PAD_LEFT != 0 || PAD_BOTTOM != 0 || PAD_RIGHT != 0</span></div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="preprocessor">#define IM2COL1x9(i)                                                                                         \</span></div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="preprocessor">    ({                                                                                                       \</span></div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="preprocessor">        yi_coord = yi - (int)PAD_TOP + i * DILATION_Y;                                                       \</span></div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="preprocessor">        yi_coord = min((uint)yi_coord, (uint)(SRC_HEIGHT - 1));                                              \</span></div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="preprocessor">        \</span></div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="preprocessor">        offset0 = xi_offset0 + (yi_coord * (int)src_stride_z);                                               \</span></div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="preprocessor">        offset1 = xi_offset1 + (yi_coord * (int)src_stride_z);                                               \</span></div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="preprocessor">        \</span></div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="preprocessor">        VECTOR_N values0 = VLOAD(VECTOR_SIZE)(0, (__global DATA_TYPE *)(input_ptr + offset0.s0));            \</span></div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="preprocessor">        VECTOR_N values1 = VLOAD(VECTOR_SIZE)(0, (__global DATA_TYPE *)(input_ptr + offset0.s1));            \</span></div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="preprocessor">        VECTOR_N values2 = VLOAD(VECTOR_SIZE)(0, (__global DATA_TYPE *)(input_ptr + offset0.s2));            \</span></div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="preprocessor">        VECTOR_N values3 = VLOAD(VECTOR_SIZE)(0, (__global DATA_TYPE *)(input_ptr + offset0.s3));            \</span></div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="preprocessor">        VECTOR_N values4 = VLOAD(VECTOR_SIZE)(0, (__global DATA_TYPE *)(input_ptr + offset0.s4));            \</span></div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="preprocessor">        VECTOR_N values5 = VLOAD(VECTOR_SIZE)(0, (__global DATA_TYPE *)(input_ptr + offset0.s5));            \</span></div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="preprocessor">        VECTOR_N values6 = VLOAD(VECTOR_SIZE)(0, (__global DATA_TYPE *)(input_ptr + offset0.s6));            \</span></div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="preprocessor">        VECTOR_N values7 = VLOAD(VECTOR_SIZE)(0, (__global DATA_TYPE *)(input_ptr + offset0.s7));            \</span></div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="preprocessor">        VECTOR_N values8 = VLOAD(VECTOR_SIZE)(0, (__global DATA_TYPE *)(input_ptr + offset1));               \</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="preprocessor">        \</span></div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="preprocessor">        int y_cond = (int)((uint)(yi - (int)PAD_TOP + i * DILATION_Y) &gt;= (uint)(SRC_HEIGHT));                \</span></div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="preprocessor">        values0    = select(values0, (VECTOR_N)PAD_VALUE, (COND_N)((COND_N)y_cond || (COND_N)(x_cond0.s0))); \</span></div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="preprocessor">        values1    = select(values1, (VECTOR_N)PAD_VALUE, (COND_N)((COND_N)y_cond || (COND_N)(x_cond0.s1))); \</span></div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="preprocessor">        values2    = select(values2, (VECTOR_N)PAD_VALUE, (COND_N)((COND_N)y_cond || (COND_N)(x_cond0.s2))); \</span></div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="preprocessor">        values3    = select(values3, (VECTOR_N)PAD_VALUE, (COND_N)((COND_N)y_cond || (COND_N)(x_cond0.s3))); \</span></div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="preprocessor">        values4    = select(values4, (VECTOR_N)PAD_VALUE, (COND_N)((COND_N)y_cond || (COND_N)(x_cond0.s4))); \</span></div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="preprocessor">        values5    = select(values5, (VECTOR_N)PAD_VALUE, (COND_N)((COND_N)y_cond || (COND_N)(x_cond0.s5))); \</span></div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="preprocessor">        values6    = select(values6, (VECTOR_N)PAD_VALUE, (COND_N)((COND_N)y_cond || (COND_N)(x_cond0.s6))); \</span></div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="preprocessor">        values7    = select(values7, (VECTOR_N)PAD_VALUE, (COND_N)((COND_N)y_cond || (COND_N)(x_cond0.s7))); \</span></div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="preprocessor">        values8    = select(values8, (VECTOR_N)PAD_VALUE, (COND_N)((COND_N)y_cond || (COND_N)(x_cond1)));    \</span></div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="preprocessor">        \</span></div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="preprocessor">        IM2COL1X9_NHWC_STORE(VECTOR_SIZE, BOUNDARY_VECTOR_SIZE, DATA_TYPE, SRC_DEPTH, values, i, output_ptr) \</span></div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="preprocessor">#else // PAD_TOP != 0 || PAD_LEFT != 0 || PAD_BOTTOM != 0 || PAD_RIGHT != 0</span></div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="preprocessor">#define IM2COL1x9(i)                                                                                         \</span></div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;<span class="preprocessor">    ({                                                                                                       \</span></div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;<span class="preprocessor">        yi_coord = yi - (int)PAD_TOP + i * DILATION_Y;                                                       \</span></div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;<span class="preprocessor">        yi_coord = min((uint)yi_coord, (uint)(SRC_HEIGHT - 1));                                              \</span></div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="preprocessor">        \</span></div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="preprocessor">        offset0 = xi_offset0 + (yi_coord * (int)src_stride_z);                                               \</span></div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;<span class="preprocessor">        offset1 = xi_offset1 + (yi_coord * (int)src_stride_z);                                               \</span></div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="preprocessor">        \</span></div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<span class="preprocessor">        VECTOR_N values0 = VLOAD(VECTOR_SIZE)(0, (__global DATA_TYPE *)(input_ptr + offset0.s0));            \</span></div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="preprocessor">        VECTOR_N values1 = VLOAD(VECTOR_SIZE)(0, (__global DATA_TYPE *)(input_ptr + offset0.s1));            \</span></div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="preprocessor">        VECTOR_N values2 = VLOAD(VECTOR_SIZE)(0, (__global DATA_TYPE *)(input_ptr + offset0.s2));            \</span></div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="preprocessor">        VECTOR_N values3 = VLOAD(VECTOR_SIZE)(0, (__global DATA_TYPE *)(input_ptr + offset0.s3));            \</span></div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="preprocessor">        VECTOR_N values4 = VLOAD(VECTOR_SIZE)(0, (__global DATA_TYPE *)(input_ptr + offset0.s4));            \</span></div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;<span class="preprocessor">        VECTOR_N values5 = VLOAD(VECTOR_SIZE)(0, (__global DATA_TYPE *)(input_ptr + offset0.s5));            \</span></div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="preprocessor">        VECTOR_N values6 = VLOAD(VECTOR_SIZE)(0, (__global DATA_TYPE *)(input_ptr + offset0.s6));            \</span></div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="preprocessor">        VECTOR_N values7 = VLOAD(VECTOR_SIZE)(0, (__global DATA_TYPE *)(input_ptr + offset0.s7));            \</span></div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="preprocessor">        VECTOR_N values8 = VLOAD(VECTOR_SIZE)(0, (__global DATA_TYPE *)(input_ptr + offset1));               \</span></div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="preprocessor">        \</span></div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="preprocessor">        IM2COL1X9_NHWC_STORE(VECTOR_SIZE, BOUNDARY_VECTOR_SIZE, DATA_TYPE, SRC_DEPTH, values, i, output_ptr) \</span></div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;<span class="preprocessor">    })</span></div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;<span class="preprocessor">#endif // PAD_TOP != 0 || PAD_LEFT != 0 || PAD_BOTTOM != 0 || PAD_RIGHT != 0</span></div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;<span class="comment">/** This kernel performs im2col when the kernel size is 9x9 and the data layout is NHWC</span></div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;<span class="comment"> * @note This kernel computes VECTOR_SIZE elements</span></div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<span class="comment"> * @note This kernel stores VECTOR_SIZE or BOUNDARY_VECTOR_SIZE (if at boundary) elements</span></div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;<span class="comment"> * @note The vector size must be passed at compile time using -DVECTOR_SIZE: e.g. -DVECTOR_SIZE=2</span></div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;<span class="comment"> * @note The boundary vector size must be passed at compile time using -DBOUNDARY_VECTOR_SIZE: e.g. -DBOUNDARY_VECTOR_SIZE=1</span></div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;<span class="comment"> * @note The data type must be passed at compile time using -DDATA_TYPE: e.g. -DDATA_TYPE=float</span></div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;<span class="comment"> * @note The width of output tensor after matrix multiplication must be passed at compile time using -DCONVOLVED_WIDTH: e.g. -DCONVOLVED_WIDTH=34</span></div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="comment"> * @note The kernel depth must be passed at compile time using -DSRC_DEPTH: e.g. -DSRC_DEPTH=3</span></div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="comment"> * @note The stride along the Y direction must be passed at compile time using -DSTRIDE_Y: e.g. -DSTRIDE_Y=1</span></div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="comment"> * @note In case biases will be added to the convolution -DHAS_BIAS has to be passed to append the final matrix with 1 in each row.</span></div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;<span class="comment"> * @param[in]  src_ptr                           Pointer to the source tensor. Supported data types: QASYMM8_SIGNED/QASYMM8/F16/F32</span></div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;<span class="comment"> * @param[in]  src_stride_x                      Stride of the source tensor in X dimension (in bytes)</span></div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;<span class="comment"> * @param[in]  src_step_x                        src_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;<span class="comment"> * @param[in]  src_stride_y                      Stride of the source tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;<span class="comment"> * @param[in]  src_step_y                        src_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;<span class="comment"> * @param[in]  src_stride_z                      Stride of the source tensor in Z dimension (in bytes)</span></div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;<span class="comment"> * @param[in]  src_step_z                        src_stride_z * number of elements along Z processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;<span class="comment"> * @param[in]  src_offset_first_element_in_bytes The offset of the first element in the source tensor</span></div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;<span class="comment"> * @param[out] dst_ptr                           Pointer to the destination tensor. Supported data types: same as @p src_ptr</span></div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;<span class="comment"> * @param[in]  dst_stride_x                      Stride of the destination tensor in X dimension (in bytes)</span></div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;<span class="comment"> * @param[in]  dst_step_x                        dst_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;<span class="comment"> * @param[in]  dst_stride_y                      Stride of the destination tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;<span class="comment"> * @param[in]  dst_step_y                        dst_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;<span class="comment"> * @param[in]  dst_offset_first_element_in_bytes The offset of the first element in the destination tensor</span></div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;<span class="comment"> * @param[in]  src_stride_w                      Stride of the source tensor in W dimension (in bytes).</span></div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;<span class="comment"> * @param[in]  dst_stride_w                      Stride of the destination tensor in W dimension (in bytes).</span></div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;__kernel <span class="keywordtype">void</span> im2col9x9_nhwc(</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>),</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>),</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    uint src_stride_w,</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    uint dst_stride_w)</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;{</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    <span class="comment">// input feature map, boundary-corrected (shift all non-boundary vectors by shift_amount) to avoid padding</span></div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> shift_amount = (int)VECTOR_SIZE - (<span class="keywordtype">int</span>)BOUNDARY_VECTOR_SIZE;</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> ch           = max((<span class="keywordtype">int</span>)(get_global_id(0) * VECTOR_SIZE) - shift_amount, 0);</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> yo           = get_global_id(1);</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> batch        = get_global_id(2); <span class="comment">// batch size</span></div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160; </div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    <span class="comment">// Calculate input indices</span></div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> xi = (get_global_id(1) % CONVOLVED_WIDTH) * STRIDE_X;</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> yi = (get_global_id(1) / (int)CONVOLVED_WIDTH) * STRIDE_Y;</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160; </div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    <span class="comment">// Get input and output address</span></div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    __global uchar *input_ptr  = src_ptr + src_offset_first_element_in_bytes + ch * <span class="keyword">sizeof</span>(DATA_TYPE) + batch * (<span class="keywordtype">int</span>)src_stride_w;</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    __global uchar *output_ptr = dst_ptr + dst_offset_first_element_in_bytes + ch * <span class="keyword">sizeof</span>(DATA_TYPE) + yo * (<span class="keywordtype">int</span>)dst_stride_y + batch * (int)dst_stride_w;</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160; </div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    <span class="keywordtype">int</span>  yi_coord = 0;</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    int8 offset0  = 0;</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    <span class="keywordtype">int</span>  offset1  = 0;</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160; </div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    <span class="comment">// Clamp xi</span></div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    int8 xi_offset0 = ((int8)xi + (int8)(0, 1, 2, 3, 4, 5, 6, 7) * DILATION_X - (int8)PAD_LEFT);</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <span class="keywordtype">int</span>  xi_offset1 = ((int)xi + (<span class="keywordtype">int</span>)(8) * DILATION_X - (<span class="keywordtype">int</span>)PAD_LEFT);</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160; </div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;<span class="preprocessor">#if PAD_LEFT != 0 || PAD_RIGHT != 0</span></div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;<span class="preprocessor">#define CLAMP(x, min_val, max_val) min(max(x, min_val), max_val)</span></div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    xi_offset0 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aabdbe431f2713c5c2604cb9872b66aab">CLAMP</a>(xi_offset0, (int8)0, (int8)(SRC_WIDTH - 1));</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    xi_offset1 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aabdbe431f2713c5c2604cb9872b66aab">CLAMP</a>(xi_offset1, (<span class="keywordtype">int</span>)0, (<span class="keywordtype">int</span>)(SRC_WIDTH - 1));</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;<span class="preprocessor">#endif // PAD_LEFT != 0 || PAD_RIGHT != 0</span></div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    xi_offset0 *= (int8)src_stride_y;</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    xi_offset1 *= (int)src_stride_y;</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160; </div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    <span class="comment">// Out-of-bound condition for X</span></div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    int8 x_cond0 = (((int8)xi + (int8)(0, 1, 2, 3, 4, 5, 6, 7) * DILATION_X - (int8)PAD_LEFT) &lt; (int8)0) || (((int8)xi + (int8)(0, 1, 2, 3, 4, 5, 6, 7) * DILATION_X - (int8)PAD_LEFT) &gt;= (int8)SRC_WIDTH);</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    <span class="keywordtype">int</span>  x_cond1 = (((int)xi + (<span class="keywordtype">int</span>)(8) * DILATION_X - (<span class="keywordtype">int</span>)PAD_LEFT) &lt; (<span class="keywordtype">int</span>)0) || (((<span class="keywordtype">int</span>)xi + (int)(8) * DILATION_X - (int)PAD_LEFT) &gt;= (int)SRC_WIDTH);</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160; </div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    IM2COL1x9(0);</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    IM2COL1x9(1);</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    IM2COL1x9(2);</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    IM2COL1x9(3);</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    IM2COL1x9(4);</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    IM2COL1x9(5);</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    IM2COL1x9(6);</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    IM2COL1x9(7);</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    IM2COL1x9(8);</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160; </div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;<span class="preprocessor">#ifdef HAS_BIAS</span></div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    <span class="comment">// We can use VECTOR_SIZE instead of BOUNDARY_VECTOR_SIZE even if it&#39;s at the boundary. This is because the bias is</span></div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    <span class="comment">// added at the end of the channel, while the boundary vec is at the beginning of the channel.</span></div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    <span class="comment">// The only case where the boundary vec is at the end of the channel is when there&#39;s only a single boundary vec in</span></div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    <span class="comment">// the whole channel dimension, but in that case VECTOR_SIZE is also equal to BOUNDARY_VECTOR_SIZE</span></div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    <span class="comment">// See the value of num_elems_processed_per_iteration in configure_opencl_kernel method in CLIm2ColKernel.cpp</span></div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    <span class="keywordflow">if</span>((ch + VECTOR_SIZE) &gt;= SRC_DEPTH)</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    {</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;        *((__global DATA_TYPE *)(output_ptr) - ch + SRC_DEPTH * 81) = 1.0f;</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    }</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;<span class="preprocessor">#endif // HAS_BIAS</span></div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;}</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;<span class="preprocessor">#endif // defined(IM2COL_9X9)</span></div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160; </div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;<span class="preprocessor">#if defined(IM2COL_GENERIC)</span></div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;<span class="comment">/** This opencl kernel performs a generic im2col implementation when the data layout is NHWC</span></div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;<span class="comment"> * @note This kernel computes VECTOR_SIZE elements</span></div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;<span class="comment"> * @note This kernel stores VECTOR_SIZE or BOUNDARY_VECTOR_SIZE (if at boundary) elements</span></div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;<span class="comment"> * @note The vector size must be passed at compile time using -DVECTOR_SIZE: e.g. -DVECTOR_SIZE=2</span></div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;<span class="comment"> * @note The boundary vector size must be passed at compile time using -DBOUNDARY_VECTOR_SIZE: e.g. -DBOUNDARY_VECTOR_SIZE=1</span></div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;<span class="comment"> * @note The data type must be passed at compile time using -DDATA_TYPE: e.g. -DDATA_TYPE=float</span></div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;<span class="comment"> * @note The width and height of the input tensor must be passed at compile time using -DSRC_WIDTH and -DSRC_HEIGHT: e.g. -DSRC_WIDTH=128 and -DSRC_HEIGHT=128</span></div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;<span class="comment"> * @note The width of output tensor after matrix multiplication must be passed at compile time using -DCONVOLVED_WIDTH: e.g. -DCONVOLVED_WIDTH=34</span></div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;<span class="comment"> * @note The kernel width, height and depth must be passed at compile time using -DKERNEL_WIDTH, -DKERNEL_HEIGHT and -DSRC_DEPTH: e.g. -DKERNEL_WIDTH=3, -DKERNEL_HEIGHT=3 and -DSRC_DEPTH=64</span></div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;<span class="comment"> * @note The pad_left, pad_right, pad_top and pad_bottom must be passed at compile time using -DPAD_LEFT, -DPAD_RIGHT, -DPAD_TOP and -DPAD_BOTTOM: e.g. -DPAD_LEFT=1, -DPAD_RIGHT=2, -DPAD_TOP=3 and -DPAD_BOTTOM=2</span></div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;<span class="comment"> * @note The zero value to store in case we load values out-of-bounds must be passed at compile time using -DPAD_VALUE: e.g. -DPAD_VALUE=0.0</span></div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;<span class="comment"> * @note The stride along the X and Y directions must be passed at compile time using -DSTRIDE_X and -DSTRIDE_Y: e.g. -DSTRIDE_X=1 and -DSTRIDE_Y=1</span></div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;<span class="comment"> * @note The dilation_x and dilation_y must be passed at compile time using -DDILATION_X and -DDILATION_Y: e.g. -DDILATION_X=1, -DDILATION_Y=1</span></div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;<span class="comment"> * @note In case biases will be added to the convolution -DHAS_BIAS has to be passed to append the final matrix with 1 in each row.</span></div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;<span class="comment"> * @param[in]  src_ptr                           Pointer to the source tensor. Supported data types: QASYMM8_SIGNED/QASYMM8/F16/F32</span></div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;<span class="comment"> * @param[in]  src_stride_x                      Stride of the source tensor in X dimension (in bytes)</span></div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;<span class="comment"> * @param[in]  src_step_x                        src_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;<span class="comment"> * @param[in]  src_stride_y                      Stride of the source tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;<span class="comment"> * @param[in]  src_step_y                        src_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;<span class="comment"> * @param[in]  src_stride_z                      Stride of the source tensor in Z dimension (in bytes)</span></div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;<span class="comment"> * @param[in]  src_step_z                        src_stride_z * number of elements along Z processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;<span class="comment"> * @param[in]  src_offset_first_element_in_bytes The offset of the first element in the source tensor</span></div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;<span class="comment"> * @param[out] dst_ptr                           Pointer to the destination tensor. Supported data types: same as @p src_ptr</span></div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;<span class="comment"> * @param[in]  dst_stride_x                      Stride of the destination tensor in X dimension (in bytes)</span></div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;<span class="comment"> * @param[in]  dst_step_x                        dst_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;<span class="comment"> * @param[in]  dst_stride_y                      Stride of the destination tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;<span class="comment"> * @param[in]  dst_step_y                        dst_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;<span class="comment"> * @param[in]  dst_offset_first_element_in_bytes The offset of the first element in the destination tensor</span></div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;<span class="comment"> * @param[in]  src_stride_w                      Stride of the source tensor in W dimension (in bytes).</span></div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;<span class="comment"> * @param[in]  dst_stride_w                      Stride of the destination tensor in W dimension (in bytes).</span></div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;__kernel <span class="keywordtype">void</span> im2col_generic_nhwc(</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>),</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>),</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    uint src_stride_w,</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    uint dst_stride_w)</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;{</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    <span class="comment">// input feature map, boundary-corrected (shift all non-boundary vectors by shift_amount) to avoid padding</span></div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> shift_amount = (int)VECTOR_SIZE - (<span class="keywordtype">int</span>)BOUNDARY_VECTOR_SIZE;</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> ch           = max((<span class="keywordtype">int</span>)(get_global_id(0) * VECTOR_SIZE) - shift_amount, 0);</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> yo           = get_global_id(1);</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> batch        = get_global_id(2); <span class="comment">// batch size</span></div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160; </div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    <span class="comment">// Calculate input indices</span></div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> xi = (yo % CONVOLVED_WIDTH) * STRIDE_X;</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> yi = (yo / (int)CONVOLVED_WIDTH) * STRIDE_Y;</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160; </div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    <span class="comment">// Get input and output address</span></div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> stride_x         = ch * <span class="keyword">sizeof</span>(DATA_TYPE);</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    __global uchar *input_ptr  = src_ptr + src_offset_first_element_in_bytes + stride_x + batch * (int)src_stride_w;</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    __global uchar *output_ptr = dst_ptr + dst_offset_first_element_in_bytes + stride_x + yo * (int)dst_stride_y + batch * (<span class="keywordtype">int</span>)dst_stride_w;</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160; </div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    <span class="keywordtype">int</span> i = 0;</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> yk = 0; yk &lt; KERNEL_HEIGHT; ++yk)</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    {</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;        <span class="comment">// Clamp yi_coord</span></div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;        <span class="keywordtype">int</span> yi_coord = yi + yk * DILATION_Y - (int)PAD_TOP;</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;        yi_coord     = <a class="code" href="namespacearm__compute_1_1utility.xhtml#a96efecf997f13a914609ddf1eb67f624">clamp</a>(yi_coord, (<span class="keywordtype">int</span>)0, (<span class="keywordtype">int</span>)(SRC_HEIGHT - 1));</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160; </div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;        <span class="comment">// Out-of-bound condition for Y</span></div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;        <span class="keywordtype">int</span> y_border_condition = ((yi + yk * DILATION_Y - (int)PAD_TOP) &lt; (int)0) || ((yi + yk * DILATION_Y - (int)PAD_TOP) &gt;= (int)SRC_HEIGHT);</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160; </div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> xk = 0; xk &lt; KERNEL_WIDTH; ++xk)</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;        {</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;            <span class="comment">// Clamp xi_coord</span></div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;            <span class="keywordtype">int</span> xi_coord = (xi + xk * DILATION_X - (int)PAD_LEFT);</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;            xi_coord     = <a class="code" href="namespacearm__compute_1_1utility.xhtml#a96efecf997f13a914609ddf1eb67f624">clamp</a>(xi_coord, (<span class="keywordtype">int</span>)0, (<span class="keywordtype">int</span>)(SRC_WIDTH - 1));</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160; </div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;            <span class="comment">// Out-of-bound condition for X</span></div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;            <span class="keywordtype">int</span> x_border_condition = ((xi + xk * DILATION_X - (int)PAD_LEFT) &lt; (int)0) || ((xi + xk * DILATION_X - (int)PAD_LEFT) &gt;= (int)SRC_WIDTH);</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160; </div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;            <span class="keywordtype">int</span> <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> = xi_coord * (int)src_stride_y + (yi_coord * (<span class="keywordtype">int</span>)src_stride_z);</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160; </div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;            <a class="code" href="nhwc_2im2col_8cl.xhtml#aa6a1a5e263ffe3fabde82fc7534d0e10">VECTOR_N</a> values0 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(VECTOR_SIZE)(0, (__global DATA_TYPE *)(input_ptr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>));</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160; </div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;<span class="preprocessor">#if PAD_LEFT != 0 || PAD_TOP != 0 || PAD_RIGHT != 0 || PAD_BOTTOM != 0</span></div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;            <span class="comment">// Replace with PAD_VALUE if the value is out-of-bound</span></div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;            values0 = <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a27e22718d532b621774aca14ce8b1101">select</a>(values0, (<a class="code" href="nhwc_2im2col_8cl.xhtml#aa6a1a5e263ffe3fabde82fc7534d0e10">VECTOR_N</a>)PAD_VALUE, (<a class="code" href="nhwc_2im2col_8cl.xhtml#ae56939fc95de880b4c4431a77fa7d5b5">COND_N</a>)((<a class="code" href="nhwc_2im2col_8cl.xhtml#ae56939fc95de880b4c4431a77fa7d5b5">COND_N</a>)x_border_condition || (<a class="code" href="nhwc_2im2col_8cl.xhtml#ae56939fc95de880b4c4431a77fa7d5b5">COND_N</a>)(y_border_condition)));</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;<span class="preprocessor">#endif // PAD_LEFT != 0 || PAD_TOP != 0 || PAD_RIGHT != 0 || PAD_BOTTOM != 0</span></div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160; </div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;            <span class="comment">// Store in a boundary-aware way to avoid padding</span></div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;<span class="preprocessor">#if BOUNDARY_VECTOR_SIZE != VECTOR_SIZE</span></div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">bool</span> at_channel_boundary = get_global_id(0) == 0;</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;            <span class="keywordflow">if</span>(at_channel_boundary)</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;            {</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;                <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a2afdc4c751404e64315ecd22021abe9c">VSTORE_PARTIAL</a>(VECTOR_SIZE, BOUNDARY_VECTOR_SIZE)</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;                (values0, 0, (__global DATA_TYPE *)(output_ptr) + i * (int)SRC_DEPTH);</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;            }</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;            <span class="keywordflow">else</span> <span class="comment">// at_channel_boundary</span></div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;<span class="preprocessor">#endif           // BOUNDARY_VECTOR_SIZE != VECTOR_SIZE</span></div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;            {</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;                <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#acb282042d1edeeaa3cc979a206f78b54">VSTORE</a>(VECTOR_SIZE)</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;                (values0, 0, (__global DATA_TYPE *)(output_ptr) + i * (int)SRC_DEPTH);</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;            }</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;            i++;</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;        }</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    }</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160; </div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;<span class="preprocessor">#ifdef HAS_BIAS</span></div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    <span class="comment">// We can use VECTOR_SIZE instead of BOUNDARY_VECTOR_SIZE even if it&#39;s at the boundary. This is because the bias is</span></div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;    <span class="comment">// added at the end of the channel, while the boundary vec is at the beginning of the channel.</span></div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    <span class="comment">// The only case where the boundary vec is at the end of the channel is when there&#39;s only a single boundary vec in</span></div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    <span class="comment">// the whole channel dimension, but in that case VECTOR_SIZE is also equal to BOUNDARY_VECTOR_SIZE</span></div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    <span class="comment">// See the value of num_elems_processed_per_iteration in configure_opencl_kernel method in CLIm2ColKernel.cpp</span></div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    <span class="keywordflow">if</span>((ch + VECTOR_SIZE) &gt;= SRC_DEPTH)</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    {</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;        *((__global DATA_TYPE *)(output_ptr) - ch + SRC_DEPTH * KERNEL_WIDTH * KERNEL_HEIGHT) = 1.0f;</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    }</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;<span class="preprocessor">#endif // HAS_BIAS</span></div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;}</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;<span class="preprocessor">#endif // defined(IM2COL_GENERIC)</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="anhwc_2im2col_8cl_xhtml_aa6a1a5e263ffe3fabde82fc7534d0e10"><div class="ttname"><a href="nhwc_2im2col_8cl.xhtml#aa6a1a5e263ffe3fabde82fc7534d0e10">VECTOR_N</a></div><div class="ttdeci">#define VECTOR_N</div><div class="ttdef"><b>Definition:</b> <a href="nhwc_2im2col_8cl_source.xhtml#l00026">im2col.cl:26</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1utility_xhtml_a96efecf997f13a914609ddf1eb67f624"><div class="ttname"><a href="namespacearm__compute_1_1utility.xhtml#a96efecf997f13a914609ddf1eb67f624">arm_compute::utility::clamp</a></div><div class="ttdeci">DataType clamp(const DataType &amp;n, const DataType &amp;lower=std::numeric_limits&lt; RangeType &gt;::lowest(), const DataType &amp;upper=std::numeric_limits&lt; RangeType &gt;::max())</div><div class="ttdoc">Performs clamping among a lower and upper value.</div><div class="ttdef"><b>Definition:</b> <a href="_utility_8h_source.xhtml#l00102">Utility.h:102</a></div></div>
<div class="ttc" id="asrc_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a287e2fc366c312b468382c95bb90f91f"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a></div><div class="ttdeci">#define VLOAD(size)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00204">helpers.h:204</a></div></div>
<div class="ttc" id="asrc_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_acb282042d1edeeaa3cc979a206f78b54"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#acb282042d1edeeaa3cc979a206f78b54">VSTORE</a></div><div class="ttdeci">#define VSTORE(size)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00500">helpers.h:500</a></div></div>
<div class="ttc" id="asrc_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a6b83038822d1ae7ab619b684ed3b7fc0"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a></div><div class="ttdeci">#define TENSOR3D_DECLARATION(name)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00852">helpers.h:852</a></div></div>
<div class="ttc" id="asrc_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a009469e4d9b8fce3b6d5e97d2077827d"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a></div><div class="ttdeci">__global uchar * offset(const Image *img, int x, int y)</div><div class="ttdoc">Get the pointer position of a Image.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01128">helpers.h:1128</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_a27e22718d532b621774aca14ce8b1101"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a27e22718d532b621774aca14ce8b1101">arm_compute::test::validation::reference::select</a></div><div class="ttdeci">SimpleTensor&lt; T &gt; select(const SimpleTensor&lt; uint8_t &gt; &amp;c, const SimpleTensor&lt; T &gt; &amp;x, const SimpleTensor&lt; T &gt; &amp;y)</div><div class="ttdef"><b>Definition:</b> <a href="reference_2_select_8cpp_source.xhtml#l00038">Select.cpp:38</a></div></div>
<div class="ttc" id="asrc_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a22f42fcf2077d951271df83b55c1a71a"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a></div><div class="ttdeci">#define IMAGE_DECLARATION(name)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00848">helpers.h:848</a></div></div>
<div class="ttc" id="asrc_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_aabdbe431f2713c5c2604cb9872b66aab"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aabdbe431f2713c5c2604cb9872b66aab">CLAMP</a></div><div class="ttdeci">#define CLAMP(x, min_val, max_val)</div><div class="ttdoc">Clamp the given value between an upper and lower bound.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00074">helpers.h:74</a></div></div>
<div class="ttc" id="anhwc_2im2col_8cl_xhtml_ae56939fc95de880b4c4431a77fa7d5b5"><div class="ttname"><a href="nhwc_2im2col_8cl.xhtml#ae56939fc95de880b4c4431a77fa7d5b5">COND_N</a></div><div class="ttdeci">#define COND_N</div><div class="ttdef"><b>Definition:</b> <a href="nhwc_2im2col_8cl_source.xhtml#l00027">im2col.cl:27</a></div></div>
<div class="ttc" id="asrc_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml">helpers.h</a></div></div>
<div class="ttc" id="asrc_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a2afdc4c751404e64315ecd22021abe9c"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a2afdc4c751404e64315ecd22021abe9c">VSTORE_PARTIAL</a></div><div class="ttdeci">#define VSTORE_PARTIAL(size, store_size)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00533">helpers.h:533</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_8c278f79c760e5c5fbd911f9870614c1.xhtml">CL</a></li><li class="navelem"><a class="el" href="dir_25885286e9dad4fa105b7b25a8031bbf.xhtml">cl_kernels</a></li><li class="navelem"><a class="el" href="dir_ea393a19e66e9555cdc004c345ac8654.xhtml">nhwc</a></li><li class="navelem"><a class="el" href="nhwc_2im2col_8cl.xhtml">im2col.cl</a></li>
    <li class="footer">Generated on Tue Nov 21 2023 16:31:00 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
