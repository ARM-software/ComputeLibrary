<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/Utils.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('src_2core_2_utils_8cpp_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Utils.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="src_2core_2_utils_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2016-2023 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160; </div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_utils_8h.xhtml">arm_compute/core/Utils.h</a>&quot;</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160; </div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_helpers_8h.xhtml">arm_compute/core/Helpers.h</a>&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_string_utils_8h.xhtml">arm_compute/core/utils/StringUtils.h</a>&quot;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_activation_layer_info_8h.xhtml">arm_compute/function_info/ActivationLayerInfo.h</a>&quot;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160; </div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;cmath&gt;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &lt;cstdint&gt;</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &lt;fstream&gt;</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &lt;map&gt;</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160; </div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div>
<div class="line"><a name="l00040"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#ae0d288429eb20baf6da6109f3a21e6bb">   40</a></span>&#160;std::string <a class="code" href="namespacearm__compute.xhtml#ae0d288429eb20baf6da6109f3a21e6bb">read_file</a>(<span class="keyword">const</span> std::string &amp;filename, <span class="keywordtype">bool</span> binary)</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    std::string   out;</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    std::ifstream fs;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160; </div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_EXCEPTIONS_DISABLED</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keywordflow">try</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    {</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_EXCEPTIONS_DISABLED */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        fs.exceptions(std::ifstream::failbit | std::ifstream::badbit);</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        std::ios_base::openmode <a class="code" href="namespaceclang__tidy__rules.xhtml#a1a6b6fb557d8d37d59700faf4e4c9167">mode</a> = std::ios::in;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="keywordflow">if</span> (binary)</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        {</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            <a class="code" href="namespaceclang__tidy__rules.xhtml#a1a6b6fb557d8d37d59700faf4e4c9167">mode</a> |= std::ios::binary;</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        }</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160; </div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        fs.open(filename, <a class="code" href="namespaceclang__tidy__rules.xhtml#a1a6b6fb557d8d37d59700faf4e4c9167">mode</a>);</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160; </div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        <span class="comment">// Go to the end of the file</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        fs.seekg(0, <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">std::ios::end</a>);</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <span class="comment">// Reserve the memory required to store the file&#39;s content</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        out.reserve(fs.tellg());</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="comment">// Go back to the beginning of the file</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        fs.seekg(0, std::ios::beg);</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="comment">// Copy the content of the file</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        out.assign(std::istreambuf_iterator&lt;char&gt;(fs), std::istreambuf_iterator&lt;char&gt;());</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_EXCEPTIONS_DISABLED</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    }</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordflow">catch</span> (<span class="keyword">const</span> std::ifstream::failure &amp;e)</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    {</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <a class="code" href="_error_8h.xhtml#abd040a16dc0dbc75733e07aff93048a8">ARM_COMPUTE_ERROR_VAR</a>(<span class="stringliteral">&quot;Accessing %s: %s&quot;</span>, filename.c_str(), e.what());</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    }</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_EXCEPTIONS_DISABLED */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160; </div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordflow">return</span> out;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;}</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160; </div>
<div class="line"><a name="l00078"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#af0dfcd19fb6510cd3c303db6c4583ee6">   78</a></span>&#160;<span class="keyword">const</span> std::string &amp;<a class="code" href="namespacearm__compute.xhtml#af0dfcd19fb6510cd3c303db6c4583ee6">string_from_channel</a>(<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a> channel)</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;{</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keyword">static</span> std::map&lt;Channel, const std::string&gt; channels_map = {{<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa696b031073e74bf2cb98e5ef201d4aa3">Channel::UNKNOWN</a>, <span class="stringliteral">&quot;UNKNOWN&quot;</span>},</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                                                                {<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aae1e1d3d40573127e9ee0480caf1283d6">Channel::R</a>, <span class="stringliteral">&quot;R&quot;</span>},</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                                                                {<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aadfcf28d0734569a6a693bc8194de62bf">Channel::G</a>, <span class="stringliteral">&quot;G&quot;</span>},</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                                                                {<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa9d5ed678fe57bcca610140957afab571">Channel::B</a>, <span class="stringliteral">&quot;B&quot;</span>},</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                                                                {<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa7fc56270e7a70fa81a5935b72eacbe29">Channel::A</a>, <span class="stringliteral">&quot;A&quot;</span>},</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                                                                {<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa57cec4137b614c87cb4e24a3d003a3e0">Channel::Y</a>, <span class="stringliteral">&quot;Y&quot;</span>},</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                                                                {<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">Channel::U</a>, <span class="stringliteral">&quot;U&quot;</span>},</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                                                                {<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa5206560a306a2e085a437fd258eb57ce">Channel::V</a>, <span class="stringliteral">&quot;V&quot;</span>},</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                                                                {<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa9c5959e6f08f10d0edbadf5be1f33c53">Channel::C0</a>, <span class="stringliteral">&quot;C0&quot;</span>},</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                                                                {<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa1a2ddc2db4693cfd16d534cde5572cc1">Channel::C1</a>, <span class="stringliteral">&quot;C1&quot;</span>},</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                                                                {<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aaf1a543f5a2c5d49bc5dde298fcf716e4">Channel::C2</a>, <span class="stringliteral">&quot;C2&quot;</span>},</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                                                                {<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa3abe124ecc82bf2c2e22e6058f38c50c">Channel::C3</a>, <span class="stringliteral">&quot;C3&quot;</span>}};</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160; </div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keywordflow">return</span> channels_map[channel];</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;}</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160; </div>
<div class="line"><a name="l00096"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#ae0204b49ec236bbaedb1cf96def276d4">   96</a></span>&#160;<span class="keyword">const</span> std::string &amp;<a class="code" href="namespacearm__compute.xhtml#ae0204b49ec236bbaedb1cf96def276d4">string_from_border_mode</a>(<a class="code" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> border_mode)</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;{</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keyword">static</span> std::map&lt;BorderMode, const std::string&gt; border_mode_map = {</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        {<a class="code" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a0db45d2a4141101bdfe48e3314cfbca3">BorderMode::UNDEFINED</a>, <span class="stringliteral">&quot;UNDEFINED&quot;</span>},</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        {<a class="code" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a8d6b5cada83510220f59e00ce86d4d92">BorderMode::CONSTANT</a>, <span class="stringliteral">&quot;CONSTANT&quot;</span>},</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        {<a class="code" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a4ef59320fbe90fe47d40f1f71e4c5daa">BorderMode::REPLICATE</a>, <span class="stringliteral">&quot;REPLICATE&quot;</span>},</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    };</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160; </div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keywordflow">return</span> border_mode_map[border_mode];</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;}</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160; </div>
<div class="line"><a name="l00107"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a0569839ee85ad0e35edaaf3b4c80d706">  107</a></span>&#160;<span class="keyword">const</span> std::string &amp;<a class="code" href="namespacearm__compute.xhtml#a0569839ee85ad0e35edaaf3b4c80d706">string_from_norm_type</a>(<a class="code" href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59ca">NormType</a> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a>)</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;{</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keyword">static</span> std::map&lt;NormType, const std::string&gt; norm_type_map = {</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        {<a class="code" href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59caaca2475ab7883ebb9f125241141896190">NormType::IN_MAP_1D</a>, <span class="stringliteral">&quot;IN_MAP_1D&quot;</span>},</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        {<a class="code" href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59caa6ff8bd96743aae9fd283cd822b84278e">NormType::IN_MAP_2D</a>, <span class="stringliteral">&quot;IN_MAP_2D&quot;</span>},</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        {<a class="code" href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59caa980fef040549733973683b1a868f96e5">NormType::CROSS_MAP</a>, <span class="stringliteral">&quot;CROSS_MAP&quot;</span>},</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    };</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160; </div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keywordflow">return</span> norm_type_map[<a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a>];</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;}</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160; </div>
<div class="line"><a name="l00118"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a1040394085749e4d02a0d4350493ec94">  118</a></span>&#160;<span class="keyword">const</span> std::string &amp;<a class="code" href="namespacearm__compute.xhtml#a1040394085749e4d02a0d4350493ec94">string_from_pooling_type</a>(<a class="code" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93">PoolingType</a> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a>)</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;{</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keyword">static</span> std::map&lt;PoolingType, const std::string&gt; pool_type_map = {</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        {<a class="code" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93a26a4b44a837bf97b972628509912b4a5">PoolingType::MAX</a>, <span class="stringliteral">&quot;MAX&quot;</span>},</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        {<a class="code" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93afcefd647d6a866603c627b11347c707a">PoolingType::AVG</a>, <span class="stringliteral">&quot;AVG&quot;</span>},</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        {<a class="code" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93a7e6aa2d53f6ee2b1a34b017fa403cb76">PoolingType::L2</a>, <span class="stringliteral">&quot;L2&quot;</span>},</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    };</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160; </div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keywordflow">return</span> pool_type_map[<a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a>];</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;}</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160; </div>
<div class="line"><a name="l00129"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a1a598d7174a66371ea772d4101760c25">  129</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute.xhtml#a1a598d7174a66371ea772d4101760c25">is_pool_region_entirely_outside_input</a>(<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>)</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;{</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.is_global_pooling || <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.exclude_padding || <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.pool_size.x() == 0 || <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.pool_size.y() == 0)</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    {</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    }</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> ps                = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.pad_stride_info;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> pool_le_padding_x = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.pool_size.x() &lt;= std::max({ps.pad_left(), ps.pad_right()});</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> pool_le_padding_y = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.pool_size.y() &lt;= std::max({ps.pad_top(), ps.pad_bottom()});</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keywordflow">return</span> pool_le_padding_x || pool_le_padding_y;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;}</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160; </div>
<div class="line"><a name="l00141"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a7664c9a93a7007e06a991bb22a42c08e">  141</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute.xhtml#a7664c9a93a7007e06a991bb22a42c08e">is_pool_3d_region_entirely_outside_input</a>(<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml">Pooling3dLayerInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>)</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;{</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.is_global_pooling || <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.pool_size.x() == 0 || <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.pool_size.y() == 0 || <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.pool_size.z() == 0)</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    {</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    }</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> ps                = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.padding;</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> pool_le_padding_x = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.pool_size.x() &lt;= std::max({ps.left, ps.right});</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> pool_le_padding_y = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.pool_size.y() &lt;= std::max({ps.top, ps.bottom});</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> pool_le_padding_z = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.pool_size.z() &lt;= std::max({ps.front, ps.back});</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="keywordflow">return</span> pool_le_padding_x || pool_le_padding_y || pool_le_padding_z;</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;}</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160; </div>
<div class="line"><a name="l00154"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a291164a04581bf953aa65ae87cc201a2">  154</a></span>&#160;<span class="keyword">const</span> std::string &amp;<a class="code" href="namespacearm__compute.xhtml#a291164a04581bf953aa65ae87cc201a2">string_from_gemmlowp_output_stage</a>(<a class="code" href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864">GEMMLowpOutputStageType</a> <a class="code" href="working__space_8hpp.xhtml#aa2b9b52a4827eeb41f97f92a3781eee8">output_stage</a>)</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;{</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="keyword">static</span> std::map&lt;GEMMLowpOutputStageType, const std::string&gt; output_stage_map = {</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        {<a class="code" href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864ab50339a10e1de285ac99d4c3990b8693">GEMMLowpOutputStageType::NONE</a>, <span class="stringliteral">&quot;&quot;</span>},</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        {<a class="code" href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864a079e2ddc95b344b5cb0188bed9a80d8b">GEMMLowpOutputStageType::QUANTIZE_DOWN</a>, <span class="stringliteral">&quot;quantize_down&quot;</span>},</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        {<a class="code" href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864ab300cae200f67712c1eb9234e28158ca">GEMMLowpOutputStageType::QUANTIZE_DOWN_FIXEDPOINT</a>, <span class="stringliteral">&quot;quantize_down_fixedpoint&quot;</span>},</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        {<a class="code" href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864aad664ac5008f135e38afeb391e524f9c">GEMMLowpOutputStageType::QUANTIZE_DOWN_FLOAT</a>, <span class="stringliteral">&quot;quantize_down_float&quot;</span>}};</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160; </div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keywordflow">return</span> output_stage_map[<a class="code" href="working__space_8hpp.xhtml#aa2b9b52a4827eeb41f97f92a3781eee8">output_stage</a>];</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;}</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160; </div>
<div class="line"><a name="l00165"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#ad6eaf2181f8a8c418acaf3af76239997">  165</a></span>&#160;std::string <a class="code" href="namespacearm__compute.xhtml#ad6eaf2181f8a8c418acaf3af76239997">string_from_pixel_value</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> &amp;value, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>)</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;{</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    std::stringstream <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a>;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    std::string       converted_string;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160; </div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="keywordflow">switch</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>)</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    {</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>:</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>:</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            <span class="comment">// Needs conversion to 32 bit, otherwise interpreted as ASCII values</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a> &lt;&lt; uint32_t(value.<a class="code" href="classarm__compute_1_1_pixel_value.xhtml#a66c4c1f8b1962d71162d7ac0b3ef65bc">get</a>&lt;uint8_t&gt;());</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            converted_string = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a>.str();</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">DataType::S8</a>:</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">DataType::QASYMM8_SIGNED</a>:</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a34f500e941c4df30b870126ec868ebd5">DataType::QSYMM8_PER_CHANNEL</a>:</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            <span class="comment">// Needs conversion to 32 bit, otherwise interpreted as ASCII values</span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a> &lt;&lt; int32_t(value.<a class="code" href="classarm__compute_1_1_pixel_value.xhtml#a66c4c1f8b1962d71162d7ac0b3ef65bc">get</a>&lt;int8_t&gt;());</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;            converted_string = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a>.str();</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aef9ef3ebca4d2b64b6ec83808bafa5f2">DataType::U16</a>:</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3b989c6b5398b3b9538ad103a324205e">DataType::QASYMM16</a>:</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a> &lt;&lt; value.<a class="code" href="classarm__compute_1_1_pixel_value.xhtml#a66c4c1f8b1962d71162d7ac0b3ef65bc">get</a>&lt;uint16_t&gt;();</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            converted_string = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a>.str();</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>:</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">DataType::QSYMM16</a>:</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a> &lt;&lt; value.<a class="code" href="classarm__compute_1_1_pixel_value.xhtml#a66c4c1f8b1962d71162d7ac0b3ef65bc">get</a>&lt;int16_t&gt;();</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            converted_string = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a>.str();</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6ac8bd5bedff8ef192d39a962afc0e19ee">DataType::U32</a>:</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a> &lt;&lt; value.<a class="code" href="classarm__compute_1_1_pixel_value.xhtml#a66c4c1f8b1962d71162d7ac0b3ef65bc">get</a>&lt;uint32_t&gt;();</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            converted_string = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a>.str();</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>:</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a> &lt;&lt; value.<a class="code" href="classarm__compute_1_1_pixel_value.xhtml#a66c4c1f8b1962d71162d7ac0b3ef65bc">get</a>&lt;int32_t&gt;();</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            converted_string = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a>.str();</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>:</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            converted_string = <a class="code" href="namespacearm__compute.xhtml#a59cc7dde3c479fa90260c12c992f2cae">float_to_string_with_full_precision</a>(value.<a class="code" href="classarm__compute_1_1_pixel_value.xhtml#a66c4c1f8b1962d71162d7ac0b3ef65bc">get</a>&lt;<span class="keywordtype">float</span>&gt;());</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94">DataType::F16</a>:</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;            static_assert(<span class="keyword">sizeof</span>(<a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a>) == 2, <span class="stringliteral">&quot;Half must be 16 bit&quot;</span>);</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a> &lt;&lt; value.<a class="code" href="classarm__compute_1_1_pixel_value.xhtml#a66c4c1f8b1962d71162d7ac0b3ef65bc">get</a>&lt;<a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a>&gt;();</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            converted_string = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a>.str();</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Not handled&quot;</span>);</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    }</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160; </div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="keywordflow">return</span> converted_string;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;}</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160; </div>
<div class="line"><a name="l00218"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#aa6d4f0b9fedd979c5b768f9b34fda9f6">  218</a></span>&#160;<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> <a class="code" href="namespacearm__compute.xhtml#aa6d4f0b9fedd979c5b768f9b34fda9f6">calculate_same_pad</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>                  <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af78b3c8c9ad65dcb4bfa1d2fee424308">input_shape</a>,</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                                 <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>                  weights_shape,</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                                 <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>                <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>,</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                                 <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>                   <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>,</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                                 <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>                &amp;dilation,</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                                 <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849a">DimensionRoundingType</a> &amp;rounding_type)</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;{</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> &amp;strides = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.stride();</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>((strides.first &lt; 1 || strides.second &lt; 1),</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                             <span class="stringliteral">&quot;Stride values should be greater than or equal to 1.&quot;</span>);</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160; </div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a2daf774ab1f2b95de283245a361d455f">width_idx</a>     = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">DataLayoutDimension::WIDTH</a>);</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#aa6d92f521dc4f05ac7f4c856dcfe263e">height_idx</a>    = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">DataLayoutDimension::HEIGHT</a>);</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> in_width      = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af78b3c8c9ad65dcb4bfa1d2fee424308">input_shape</a>[<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a2daf774ab1f2b95de283245a361d455f">width_idx</a>];</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> in_height     = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#af78b3c8c9ad65dcb4bfa1d2fee424308">input_shape</a>[<a class="code" href="namespacearm__compute_1_1cpu.xhtml#aa6d92f521dc4f05ac7f4c856dcfe263e">height_idx</a>];</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kernel_width  = weights_shape[<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a2daf774ab1f2b95de283245a361d455f">width_idx</a>];</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kernel_height = weights_shape[<a class="code" href="namespacearm__compute_1_1cpu.xhtml#aa6d92f521dc4f05ac7f4c856dcfe263e">height_idx</a>];</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160; </div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <span class="comment">// Calculate output dimensions</span></div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>         is_ceil    = <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(rounding_type == <a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa5bdce8e6d9dc3efbbd31e90a8a181dff">DimensionRoundingType::CEIL</a>);</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> out_width  = ((in_width - is_ceil) + strides.first - 1) / strides.first + is_ceil;</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> out_height = ((in_height - is_ceil) + strides.second - 1) / strides.second + is_ceil;</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160; </div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="comment">// Calculate effective weights sizes</span></div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> real_weight_width  = (kernel_width - 1) * dilation.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a94b8468af876f5ab54020d5e9787a4f0">x</a>() + 1;</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> real_weight_height = (kernel_height - 1) * dilation.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#aaaeb4853150b7d0e8b685fd08052924f">y</a>() + 1;</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160; </div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="comment">// Calculate total pad</span></div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_width = std::max(0, <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>((out_width - 1) * strides.first + real_weight_width - in_width));</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_height =</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        std::max(0, <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>((out_height - 1) * strides.second + real_weight_height - in_height));</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160; </div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="comment">// Calculate individual paddings</span></div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_left   = pad_width / 2;</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_top    = pad_height / 2;</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_right  = pad_width - pad_left;</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_bottom = pad_height - pad_top;</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160; </div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> same_info(strides.first, strides.second, pad_left, pad_right, pad_top, pad_bottom, rounding_type);</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160; </div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="comment">// Check for correctness of predicted output shape against the one calculated using the generated info</span></div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> out_dims = <a class="code" href="namespacearm__compute.xhtml#a138beaeb1260b90cb03bc3f761628724">scaled_dimensions</a>(in_width, in_height, kernel_width, kernel_height, same_info, dilation);</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(out_dims.first != out_width || out_dims.second != out_height);</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(out_dims);</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160; </div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <span class="keywordflow">return</span> same_info;</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;}</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160; </div>
<div class="line"><a name="l00266"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a1a0b7ff66a946db6252d2a4c40c04fa7">  266</a></span>&#160;std::pair&lt;unsigned int, unsigned int&gt; <a class="code" href="namespacearm__compute.xhtml#a1a0b7ff66a946db6252d2a4c40c04fa7">deconvolution_output_dimensions</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>         in_width,</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                                                                      <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>         in_height,</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                                                                      <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>         kernel_width,</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                                                                      <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>         kernel_height,</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                                                                      <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;pad_stride_info)</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;{</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_left   = pad_stride_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a7144874ab401f5c4e249a1115dfb5166">pad_left</a>();</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_top    = pad_stride_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a3fea0ce4e6eeee7bf3a511c31b51d44f">pad_top</a>();</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_right  = pad_stride_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a3860caeeaa259d59ccf69c3aea23f549">pad_right</a>();</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_bottom = pad_stride_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#ac49df0924d183da42cffc04cf9aba1f8">pad_bottom</a>();</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> stride_x   = pad_stride_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a6e324c1bd1111876469ea247da156147">stride</a>().first;</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> stride_y   = pad_stride_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a6e324c1bd1111876469ea247da156147">stride</a>().second;</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160; </div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(in_width &lt; 1 || in_height &lt; 1);</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(((in_width - 1) * stride_x + kernel_width) &lt; (pad_left + pad_right));</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(((in_height - 1) * stride_y + kernel_height) &lt; (pad_top + pad_bottom));</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a> = stride_x * (in_width - 1) + kernel_width - (pad_left + pad_right);</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> h = stride_y * (in_height - 1) + kernel_height - (pad_top + pad_bottom);</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160; </div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <span class="keywordflow">return</span> std::make_pair&lt;unsigned int, unsigned int&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>, h);</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;}</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160; </div>
<div class="line"><a name="l00288"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a138beaeb1260b90cb03bc3f761628724">  288</a></span>&#160;std::pair&lt;unsigned int, unsigned int&gt; <a class="code" href="namespacearm__compute.xhtml#a138beaeb1260b90cb03bc3f761628724">scaled_dimensions</a>(<span class="keywordtype">int</span>                  width,</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                                                        <span class="keywordtype">int</span>                  height,</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                                                        <span class="keywordtype">int</span>                  kernel_width,</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                                                        <span class="keywordtype">int</span>                  kernel_height,</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                                                        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;pad_stride_info,</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                                                        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>        &amp;dilation)</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;{</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> dilation_x = dilation.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a94b8468af876f5ab54020d5e9787a4f0">x</a>();</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> dilation_y = dilation.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#aaaeb4853150b7d0e8b685fd08052924f">y</a>();</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_left   = pad_stride_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a7144874ab401f5c4e249a1115dfb5166">pad_left</a>();</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_top    = pad_stride_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a3fea0ce4e6eeee7bf3a511c31b51d44f">pad_top</a>();</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_right  = pad_stride_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a3860caeeaa259d59ccf69c3aea23f549">pad_right</a>();</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_bottom = pad_stride_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#ac49df0924d183da42cffc04cf9aba1f8">pad_bottom</a>();</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> stride_x   = pad_stride_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a6e324c1bd1111876469ea247da156147">stride</a>().first;</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> stride_y   = pad_stride_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a6e324c1bd1111876469ea247da156147">stride</a>().second;</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    <span class="keywordtype">int</span>       <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>          = 0;</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <span class="keywordtype">int</span>       h          = 0;</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <span class="keywordflow">switch</span> (pad_stride_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a711b72c2817604dfbb9d20d142882bab">round</a>())</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    {</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">DimensionRoundingType::FLOOR</a>:</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a> = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(std::floor(</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                (<span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(width + pad_left + pad_right - (dilation_x * (kernel_width - 1) + 1)) / stride_x) +</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                1));</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;            h = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                std::floor((<span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(height + pad_top + pad_bottom - (dilation_y * (kernel_height - 1) + 1)) /</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                            stride_y) +</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                           1));</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa5bdce8e6d9dc3efbbd31e90a8a181dff">DimensionRoundingType::CEIL</a>:</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a> = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(std::ceil(</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                (<span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(width + pad_left + pad_right - (dilation_x * (kernel_width - 1) + 1)) / stride_x) +</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                1));</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;            h = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;                std::ceil((<span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(height + pad_top + pad_bottom - (dilation_y * (kernel_height - 1) + 1)) /</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;                           stride_y) +</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;                          1));</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported rounding type&quot;</span>);</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    }</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160; </div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a> = std::max(1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>);</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    h = std::max(1, h);</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    <span class="keywordflow">return</span> std::make_pair(<span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>), <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(h));</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;}</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160; </div>
<div class="line"><a name="l00334"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a1d8da22845d57d4aacb55b7d5ae6c013">  334</a></span>&#160;std::pair&lt;int, int&gt; <a class="code" href="namespacearm__compute.xhtml#a1d8da22845d57d4aacb55b7d5ae6c013">scaled_dimensions_signed</a>(</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    <span class="keywordtype">int</span> width, <span class="keywordtype">int</span> height, <span class="keywordtype">int</span> kernel_width, <span class="keywordtype">int</span> kernel_height, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;pad_stride_info)</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;{</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_left   = pad_stride_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a7144874ab401f5c4e249a1115dfb5166">pad_left</a>();</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_top    = pad_stride_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a3fea0ce4e6eeee7bf3a511c31b51d44f">pad_top</a>();</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_right  = pad_stride_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a3860caeeaa259d59ccf69c3aea23f549">pad_right</a>();</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_bottom = pad_stride_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#ac49df0924d183da42cffc04cf9aba1f8">pad_bottom</a>();</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> stride_x   = pad_stride_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a6e324c1bd1111876469ea247da156147">stride</a>().first;</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> stride_y   = pad_stride_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a6e324c1bd1111876469ea247da156147">stride</a>().second;</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    <span class="keywordtype">int</span>       <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>          = 0;</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    <span class="keywordtype">int</span>       h          = 0;</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    <span class="keywordflow">switch</span> (pad_stride_info.<a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml#a711b72c2817604dfbb9d20d142882bab">round</a>())</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    {</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">DimensionRoundingType::FLOOR</a>:</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a> = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                std::floor((<span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(width + pad_left + pad_right - kernel_width) / stride_x) + 1));</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;            h = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                std::floor((<span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(height + pad_top + pad_bottom - kernel_height) / stride_y) + 1));</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa5bdce8e6d9dc3efbbd31e90a8a181dff">DimensionRoundingType::CEIL</a>:</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a> = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                std::ceil((<span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(width + pad_left + pad_right - kernel_width) / stride_x) + 1));</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;            h = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                std::ceil((<span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(height + pad_top + pad_bottom - kernel_height) / stride_y) + 1));</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported rounding type&quot;</span>);</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    }</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160; </div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    <span class="keywordflow">return</span> std::make_pair(<span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>), <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(h));</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;}</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160; </div>
<div class="line"><a name="l00366"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a7058bee3ed710f07d96cb0d856de3bec">  366</a></span>&#160;std::tuple&lt;int, int, int&gt; <a class="code" href="namespacearm__compute.xhtml#a7058bee3ed710f07d96cb0d856de3bec">scaled_3d_dimensions_signed</a>(<span class="keywordtype">int</span>                       width,</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                                                      <span class="keywordtype">int</span>                       height,</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                                                      <span class="keywordtype">int</span>                       depth,</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                                                      <span class="keywordtype">int</span>                       kernel_width,</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                                                      <span class="keywordtype">int</span>                       kernel_height,</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                                                      <span class="keywordtype">int</span>                       kernel_depth,</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                                                      <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml">Pooling3dLayerInfo</a> &amp;pool3d_info)</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;{</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_left   = pool3d_info.<a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a51ba0498913f8c74b9ba8938694d09bf">padding</a>.<a class="code" href="structarm__compute_1_1_padding3_d.xhtml#a951236a0702535ba18ba51db69428658">left</a>;</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_top    = pool3d_info.<a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a51ba0498913f8c74b9ba8938694d09bf">padding</a>.<a class="code" href="structarm__compute_1_1_padding3_d.xhtml#ab9332a87d0af5aa12cac847eff68b7af">top</a>;</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_right  = pool3d_info.<a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a51ba0498913f8c74b9ba8938694d09bf">padding</a>.<a class="code" href="structarm__compute_1_1_padding3_d.xhtml#aa022cff9934a1a99bd77c49ca6a135a2">right</a>;</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_bottom = pool3d_info.<a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a51ba0498913f8c74b9ba8938694d09bf">padding</a>.<a class="code" href="structarm__compute_1_1_padding3_d.xhtml#a859088de403805f35d826df5ef39ee80">bottom</a>;</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_front  = pool3d_info.<a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a51ba0498913f8c74b9ba8938694d09bf">padding</a>.<a class="code" href="structarm__compute_1_1_padding3_d.xhtml#a1052a747170eed194bab868f0fce68ad">front</a>;</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_back   = pool3d_info.<a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a51ba0498913f8c74b9ba8938694d09bf">padding</a>.<a class="code" href="structarm__compute_1_1_padding3_d.xhtml#aa185c5e9eee32898d06143bbd95f77a8">back</a>;</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> stride_x   = pool3d_info.<a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a8552c72afa19c3cb09f61e2ac730f504">stride</a>.<a class="code" href="classarm__compute_1_1_size3_d.xhtml#a94b8468af876f5ab54020d5e9787a4f0">x</a>();</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> stride_y   = pool3d_info.<a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a8552c72afa19c3cb09f61e2ac730f504">stride</a>.<a class="code" href="classarm__compute_1_1_size3_d.xhtml#aaaeb4853150b7d0e8b685fd08052924f">y</a>();</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> stride_z   = pool3d_info.<a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a8552c72afa19c3cb09f61e2ac730f504">stride</a>.<a class="code" href="classarm__compute_1_1_size3_d.xhtml#a43852fa64fdbd5efa153e5c1e1e27ba4">z</a>();</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    <span class="keywordtype">int</span>       <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>          = 0;</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    <span class="keywordtype">int</span>       h          = 0;</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    <span class="keywordtype">int</span>       d          = 0;</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160; </div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    <span class="keywordflow">switch</span> (pool3d_info.<a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#acfcc7a243b3338bedc78c7c645d972fd">round_type</a>)</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    {</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">DimensionRoundingType::FLOOR</a>:</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a> = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                std::floor((<span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(width + pad_left + pad_right - kernel_width) / stride_x) + 1));</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;            h = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                std::floor((<span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(height + pad_top + pad_bottom - kernel_height) / stride_y) + 1));</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;            d = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                std::floor((<span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(depth + pad_front + pad_back - kernel_depth) / stride_z) + 1));</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa5bdce8e6d9dc3efbbd31e90a8a181dff">DimensionRoundingType::CEIL</a>:</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a> = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                std::ceil((<span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(width + pad_left + pad_right - kernel_width) / stride_x) + 1));</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;            h = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                std::ceil((<span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(height + pad_top + pad_bottom - kernel_height) / stride_y) + 1));</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;            d = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                std::ceil((<span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(depth + pad_front + pad_back - kernel_depth) / stride_z) + 1));</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported rounding type&quot;</span>);</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    }</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160; </div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    <span class="keywordflow">return</span> std::make_tuple(<span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>), <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(h), <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(d));</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;}</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160; </div>
<div class="line"><a name="l00412"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a28029771f7c2cd8bbe2855303d38f71f">  412</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute.xhtml#a28029771f7c2cd8bbe2855303d38f71f">needs_serialized_reduction</a>(<a class="code" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45b">ReductionOperation</a> op, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> axis)</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;{</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_min_max        = (op == <a class="code" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45ba26a4b44a837bf97b972628509912b4a5">ReductionOperation::MAX</a> || op == <a class="code" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45bace31e2a082d17e038fcc6e3006166653">ReductionOperation::MIN</a>);</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_quantized_type = <a class="code" href="namespacearm__compute.xhtml#a0bee325b210f81bb89fe1f9e15badf9c">is_data_type_quantized</a>(<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>);</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_first_dim      = (axis == 0);</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160; </div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    <span class="keywordflow">return</span> !is_first_dim || (is_quantized_type &amp;&amp; !is_min_max);</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;}</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160; </div>
<div class="line"><a name="l00421"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a1dcccbff6075b2fad30ebd2a0da6b995">  421</a></span>&#160;<a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> <a class="code" href="namespacearm__compute.xhtml#a1dcccbff6075b2fad30ebd2a0da6b995">get_softmax_output_quantization_info</a>(<a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> input_type, <span class="keywordtype">bool</span> is_log)</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;{</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    <span class="comment">// Note: Output quantization info for softmax should always have</span></div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <span class="comment">// * Softmax with QASYMM8: scale = 1/256, offset = 0</span></div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    <span class="comment">// * Softmax with QASYMM8_SIGNED: scale = 1/256, offset = -128</span></div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    <span class="comment">// * LogSoftmax with QASYMM8: scale = 1/256, offset = 0</span></div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    <span class="comment">// * LogSoftmax with QASYMM8_SIGNED: scale = 16/256, offset = 127</span></div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute.xhtml#ab801dca7a1e1cfb228bb169e846b74f9">is_data_type_quantized_asymmetric_signed</a>(input_type))</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    {</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;        <span class="keywordflow">if</span> (is_log)</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;        {</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>(16.f / 256, 127);</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;        }</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;        {</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>(1.f / 256, -128);</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;        }</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    }</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>(1.f / 256, 0);</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;}</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160; </div>
<div class="line"><a name="l00442"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a549f4d59cb7f823d884ffe2424079c3a">  442</a></span>&#160;std::pair&lt;int32_t, int32_t&gt; <a class="code" href="namespacearm__compute.xhtml#a549f4d59cb7f823d884ffe2424079c3a">get_quantized_activation_min_max</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>,</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;                                                             <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>                   <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>,</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;                                                             <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a>    oq_info)</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;{</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_qasymm8_signed = <a class="code" href="namespacearm__compute.xhtml#ab801dca7a1e1cfb228bb169e846b74f9">is_data_type_quantized_asymmetric_signed</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>);</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> a                 = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.a();</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>                 = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.b();</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  a_int          = is_qasymm8_signed ? <a class="code" href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">quantize_qasymm8_signed</a>(a, oq_info) : <a class="code" href="namespacearm__compute.xhtml#ab8cef8b31b552b532a14ab8815e06285">quantize_qasymm8</a>(a, oq_info);</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  b_int          = is_qasymm8_signed ? <a class="code" href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">quantize_qasymm8_signed</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, oq_info) : <a class="code" href="namespacearm__compute.xhtml#ab8cef8b31b552b532a14ab8815e06285">quantize_qasymm8</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, oq_info);</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> type_max_value = std::get&lt;1&gt;(<a class="code" href="namespacearm__compute.xhtml#ae69217acf0f0b5d4de030a09ad50a0bc">get_min_max</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>)).get&lt;int32_t&gt;();</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160; </div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    <span class="keyword">const</span> int32_t min_activation =</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.activation() != ActivationLayerInfo::ActivationFunction::LU_BOUNDED_RELU ? oq_info.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">offset</a> : b_int;</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    <span class="keyword">const</span> int32_t max_activation =</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.activation() == ActivationLayerInfo::ActivationFunction::RELU ? type_max_value : a_int;</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160; </div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    <span class="keywordflow">return</span> std::make_pair(min_activation, max_activation);</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;}</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160; </div>
<div class="line"><a name="l00461"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a5f708f4acd49beb7d02d2ec9c2b7552f">  461</a></span>&#160;std::unordered_map&lt;const ITensorInfo *, PaddingSize&gt; <a class="code" href="namespacearm__compute.xhtml#a456cc0b26fb17eee9942c8970f1c71db">get_padding_info</a>(std::initializer_list&lt;const ITensor *&gt; tensors)</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;{</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    std::unordered_map&lt;const ITensorInfo *, PaddingSize&gt; res;</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160; </div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> : tensors)</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    {</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;        {</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;            res.insert({<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>(), <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#a79e20eacb1e963e24a21ebd7369effd7">padding</a>()});</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;        }</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    }</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160; </div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    <span class="keywordflow">return</span> res;</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;}</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160; </div>
<div class="line"><a name="l00476"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a456cc0b26fb17eee9942c8970f1c71db">  476</a></span>&#160;std::unordered_map&lt;const ITensorInfo *, PaddingSize&gt; <a class="code" href="namespacearm__compute.xhtml#a456cc0b26fb17eee9942c8970f1c71db">get_padding_info</a>(std::initializer_list&lt;const ITensorInfo *&gt; infos)</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;{</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;    std::unordered_map&lt;const ITensorInfo *, PaddingSize&gt; res;</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160; </div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a> : infos)</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    {</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>)</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;        {</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;            res.insert({<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>-&gt;padding()});</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;        }</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    }</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160; </div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    <span class="keywordflow">return</span> res;</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;}</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160; </div>
<div class="line"><a name="l00491"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a7d5ebe14ba3526c8e2ed3c6949669f9c">  491</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute.xhtml#a7d5ebe14ba3526c8e2ed3c6949669f9c">has_padding_changed</a>(<span class="keyword">const</span> std::unordered_map&lt;const ITensorInfo *, PaddingSize&gt; &amp;padding_map)</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;{</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    <span class="keywordflow">return</span> std::find_if(padding_map.begin(), padding_map.end(),</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;                        [](<span class="keyword">const</span> std::pair&lt;const ITensorInfo *, PaddingSize&gt; &amp;padding_info)</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;                        { return (padding_info.first-&gt;padding() != padding_info.second); }) != padding_map.end();</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;}</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160; </div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;<span class="preprocessor">#ifdef ARM_COMPUTE_ASSERTS_ENABLED</span></div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;<span class="keywordtype">void</span> print_consecutive_elements(std::ostream      &amp;s,</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;                                <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>           <a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>,</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;                                <span class="keyword">const</span> uint8_t     *ptr,</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;                                <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>       n,</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;                                <span class="keywordtype">int</span>                stream_width,</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;                                <span class="keyword">const</span> std::string &amp;element_delim)</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;{</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;    <span class="keywordflow">switch</span> (<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>)</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;    {</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>:</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>:</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;            print_consecutive_elements_impl&lt;uint8_t&gt;(s, ptr, n, stream_width, element_delim);</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">DataType::S8</a>:</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a5f007421a4becd11c0666c2058b0b36c">DataType::QSYMM8</a>:</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">DataType::QASYMM8_SIGNED</a>:</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a34f500e941c4df30b870126ec868ebd5">DataType::QSYMM8_PER_CHANNEL</a>:</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;            print_consecutive_elements_impl&lt;int8_t&gt;(s, <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(ptr), n, stream_width,</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;                                                    element_delim);</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aef9ef3ebca4d2b64b6ec83808bafa5f2">DataType::U16</a>:</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3b989c6b5398b3b9538ad103a324205e">DataType::QASYMM16</a>:</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;            print_consecutive_elements_impl&lt;uint16_t&gt;(s, <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint16_t *<span class="keyword">&gt;</span>(ptr), n, stream_width,</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;                                                      element_delim);</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>:</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">DataType::QSYMM16</a>:</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;            print_consecutive_elements_impl&lt;int16_t&gt;(s, <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int16_t *<span class="keyword">&gt;</span>(ptr), n, stream_width,</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;                                                     element_delim);</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6ac8bd5bedff8ef192d39a962afc0e19ee">DataType::U32</a>:</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;            print_consecutive_elements_impl&lt;uint32_t&gt;(s, <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint32_t *<span class="keyword">&gt;</span>(ptr), n, stream_width,</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;                                                      element_delim);</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>:</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;            print_consecutive_elements_impl&lt;int32_t&gt;(s, <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int32_t *<span class="keyword">&gt;</span>(ptr), n, stream_width,</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;                                                     element_delim);</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a31d65cccd6593e4101db93fb878abcaa">DataType::U64</a>:</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;            print_consecutive_elements_impl&lt;uint64_t&gt;(s, <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint64_t *<span class="keyword">&gt;</span>(ptr), n, stream_width,</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;                                                      element_delim);</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a115dca124dc6423c7a400b8a8a0270cc">DataType::S64</a>:</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;            print_consecutive_elements_impl&lt;int64_t&gt;(s, <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int64_t *<span class="keyword">&gt;</span>(ptr), n, stream_width,</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;                                                     element_delim);</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa4b19a06b5361a32b32759aa26ffdbab">DataType::BFLOAT16</a>:</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;            print_consecutive_elements_impl&lt;bfloat16&gt;(s, <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><a class="code" href="namespacearm__gemm.xhtml#ac882ca3f500a8e83c76a8acc59831255">bfloat16</a> *<span class="keyword">&gt;</span>(ptr), n, stream_width,</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;                                                      element_delim);</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94">DataType::F16</a>:</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;            print_consecutive_elements_impl&lt;half&gt;(s, <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *<span class="keyword">&gt;</span>(ptr), n, stream_width,</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;                                                  element_delim);</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>:</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;            print_consecutive_elements_impl&lt;float&gt;(s, <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(ptr), n, stream_width,</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;                                                   element_delim);</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Undefined element size for given data type&quot;</span>);</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;    }</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;}</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160; </div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;<span class="keywordtype">int</span> max_consecutive_elements_display_width(std::ostream &amp;s, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>, <span class="keyword">const</span> uint8_t *ptr, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n)</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;{</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;    <span class="keywordflow">switch</span> (<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>)</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;    {</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>:</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>:</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;            <span class="keywordflow">return</span> max_consecutive_elements_display_width_impl&lt;uint8_t&gt;(s, ptr, n);</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">DataType::S8</a>:</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a5f007421a4becd11c0666c2058b0b36c">DataType::QSYMM8</a>:</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">DataType::QASYMM8_SIGNED</a>:</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a34f500e941c4df30b870126ec868ebd5">DataType::QSYMM8_PER_CHANNEL</a>:</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;            <span class="keywordflow">return</span> max_consecutive_elements_display_width_impl&lt;int8_t&gt;(s, <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(ptr), n);</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aef9ef3ebca4d2b64b6ec83808bafa5f2">DataType::U16</a>:</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3b989c6b5398b3b9538ad103a324205e">DataType::QASYMM16</a>:</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;            <span class="keywordflow">return</span> max_consecutive_elements_display_width_impl&lt;uint16_t&gt;(s, <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint16_t *<span class="keyword">&gt;</span>(ptr), n);</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>:</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">DataType::QSYMM16</a>:</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;            <span class="keywordflow">return</span> max_consecutive_elements_display_width_impl&lt;int16_t&gt;(s, <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int16_t *<span class="keyword">&gt;</span>(ptr), n);</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6ac8bd5bedff8ef192d39a962afc0e19ee">DataType::U32</a>:</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;            <span class="keywordflow">return</span> max_consecutive_elements_display_width_impl&lt;uint32_t&gt;(s, <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint32_t *<span class="keyword">&gt;</span>(ptr), n);</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>:</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;            <span class="keywordflow">return</span> max_consecutive_elements_display_width_impl&lt;int32_t&gt;(s, <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int32_t *<span class="keyword">&gt;</span>(ptr), n);</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a31d65cccd6593e4101db93fb878abcaa">DataType::U64</a>:</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;            <span class="keywordflow">return</span> max_consecutive_elements_display_width_impl&lt;uint64_t&gt;(s, <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint64_t *<span class="keyword">&gt;</span>(ptr), n);</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a115dca124dc6423c7a400b8a8a0270cc">DataType::S64</a>:</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;            <span class="keywordflow">return</span> max_consecutive_elements_display_width_impl&lt;int64_t&gt;(s, <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int64_t *<span class="keyword">&gt;</span>(ptr), n);</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa4b19a06b5361a32b32759aa26ffdbab">DataType::BFLOAT16</a>:</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;            <span class="keywordflow">return</span> max_consecutive_elements_display_width_impl&lt;bfloat16&gt;(s, <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><a class="code" href="namespacearm__gemm.xhtml#ac882ca3f500a8e83c76a8acc59831255">bfloat16</a> *<span class="keyword">&gt;</span>(ptr), n);</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94">DataType::F16</a>:</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;            <span class="keywordflow">return</span> max_consecutive_elements_display_width_impl&lt;half&gt;(s, <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *<span class="keyword">&gt;</span>(ptr), n);</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>:</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;            <span class="keywordflow">return</span> max_consecutive_elements_display_width_impl&lt;float&gt;(s, <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(ptr), n);</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Undefined element size for given data type&quot;</span>);</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;    }</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;}</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_ASSERTS_ENABLED */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160; </div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;} <span class="comment">// namespace arm_compute</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="anamespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa5206560a306a2e085a437fd258eb57ce"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa5206560a306a2e085a437fd258eb57ce">arm_compute::Channel::V</a></div><div class="ttdeci">@ V</div><div class="ttdoc">Cr/V/Value channel.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a34f500e941c4df30b870126ec868ebd5"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a34f500e941c4df30b870126ec868ebd5">arm_compute::DataType::QSYMM8_PER_CHANNEL</a></div><div class="ttdeci">@ QSYMM8_PER_CHANNEL</div><div class="ttdoc">quantized, symmetric per channel fixed-point 8-bit number</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a3b989c6b5398b3b9538ad103a324205e"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3b989c6b5398b3b9538ad103a324205e">arm_compute::DataType::QASYMM16</a></div><div class="ttdeci">@ QASYMM16</div><div class="ttdoc">quantized, asymmetric fixed-point 16-bit number</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a15a05537a472ee742404821851529327a8d6b5cada83510220f59e00ce86d4d92"><div class="ttname"><a href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a8d6b5cada83510220f59e00ce86d4d92">arm_compute::BorderMode::CONSTANT</a></div><div class="ttdeci">@ CONSTANT</div><div class="ttdoc">Pixels outside the image are assumed to have a constant value.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_size2_d_xhtml_aaaeb4853150b7d0e8b685fd08052924f"><div class="ttname"><a href="classarm__compute_1_1_size2_d.xhtml#aaaeb4853150b7d0e8b685fd08052924f">arm_compute::Size2D::y</a></div><div class="ttdeci">size_t y() const</div><div class="ttdoc">Semantic accessor for height as y.</div><div class="ttdef"><b>Definition:</b> <a href="_size2_d_8h_source.xhtml#l00082">Size2D.h:82</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a31d65cccd6593e4101db93fb878abcaa"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a31d65cccd6593e4101db93fb878abcaa">arm_compute::DataType::U64</a></div><div class="ttdeci">@ U64</div><div class="ttdoc">unsigned 64-bit number</div></div>
<div class="ttc" id="astructarm__compute_1_1_uniform_quantization_info_xhtml_a97bd6c077f3c7769f575b82988b9b668"><div class="ttname"><a href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">arm_compute::UniformQuantizationInfo::offset</a></div><div class="ttdeci">int32_t offset</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00063">QuantizationInfo.h:63</a></div></div>
<div class="ttc" id="agemm__interleaved_8hpp_xhtml_a6fbca3dca9ecb372332fc525529cc086"><div class="ttname"><a href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></div><div class="ttdeci">decltype(strategy::transforms) typedef type</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00261">gemm_interleaved.hpp:261</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6aa4b19a06b5361a32b32759aa26ffdbab"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa4b19a06b5361a32b32759aa26ffdbab">arm_compute::DataType::BFLOAT16</a></div><div class="ttdeci">@ BFLOAT16</div><div class="ttdoc">16-bit brain floating-point number</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a5827eb9cb394e74af87f74bd354fb45bace31e2a082d17e038fcc6e3006166653"><div class="ttname"><a href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45bace31e2a082d17e038fcc6e3006166653">arm_compute::ReductionOperation::MIN</a></div><div class="ttdeci">@ MIN</div><div class="ttdoc">Min.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1040394085749e4d02a0d4350493ec94"><div class="ttname"><a href="namespacearm__compute.xhtml#a1040394085749e4d02a0d4350493ec94">arm_compute::string_from_pooling_type</a></div><div class="ttdeci">const std::string &amp; string_from_pooling_type(PoolingType type)</div><div class="ttdoc">Translates a given pooling type to a string.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_utils_8cpp_source.xhtml#l00118">Utils.cpp:118</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a7664c9a93a7007e06a991bb22a42c08e"><div class="ttname"><a href="namespacearm__compute.xhtml#a7664c9a93a7007e06a991bb22a42c08e">arm_compute::is_pool_3d_region_entirely_outside_input</a></div><div class="ttdeci">bool is_pool_3d_region_entirely_outside_input(const Pooling3dLayerInfo &amp;info)</div><div class="ttdoc">Check if the 3d pool region is entirely outside the input tensor.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_utils_8cpp_source.xhtml#l00141">Utils.cpp:141</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a9172da722f0a434e5cc07c0a3c115d93a7e6aa2d53f6ee2b1a34b017fa403cb76"><div class="ttname"><a href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93a7e6aa2d53f6ee2b1a34b017fa403cb76">arm_compute::PoolingType::L2</a></div><div class="ttdeci">@ L2</div><div class="ttdoc">L2 Pooling.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_quantization_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_quantization_info.xhtml">arm_compute::QuantizationInfo</a></div><div class="ttdoc">Quantization information.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00067">QuantizationInfo.h:67</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_pixel_value_xhtml"><div class="ttname"><a href="classarm__compute_1_1_pixel_value.xhtml">arm_compute::PixelValue</a></div><div class="ttdoc">Class describing the value of a pixel for any image format.</div><div class="ttdef"><b>Definition:</b> <a href="_pixel_value_8h_source.xhtml#l00035">PixelValue.h:35</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_helpers_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_helpers_8h.xhtml">Helpers.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">arm_compute::DataLayout</a></div><div class="ttdeci">DataLayout</div><div class="ttdoc">[DataLayout enum definition]</div><div class="ttdef"><b>Definition:</b> <a href="_core_types_8h_source.xhtml#l00110">CoreTypes.h:110</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_pad_stride_info_xhtml_a3860caeeaa259d59ccf69c3aea23f549"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml#a3860caeeaa259d59ccf69c3aea23f549">arm_compute::PadStrideInfo::pad_right</a></div><div class="ttdeci">unsigned int pad_right() const</div><div class="ttdoc">Get the right padding.</div><div class="ttdef"><b>Definition:</b> <a href="_core_types_8h_source.xhtml#l00223">CoreTypes.h:223</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_pad_stride_info_xhtml_a711b72c2817604dfbb9d20d142882bab"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml#a711b72c2817604dfbb9d20d142882bab">arm_compute::PadStrideInfo::round</a></div><div class="ttdeci">DimensionRoundingType round() const</div><div class="ttdoc">Get the rounding type.</div><div class="ttdef"><b>Definition:</b> <a href="_core_types_8h_source.xhtml#l00239">CoreTypes.h:239</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a5558e2cc22f7f4771653d992c8ad8864aad664ac5008f135e38afeb391e524f9c"><div class="ttname"><a href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864aad664ac5008f135e38afeb391e524f9c">arm_compute::GEMMLowpOutputStageType::QUANTIZE_DOWN_FLOAT</a></div><div class="ttdeci">@ QUANTIZE_DOWN_FLOAT</div><div class="ttdoc">Quantize using a floating point multiplication.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1a0b7ff66a946db6252d2a4c40c04fa7"><div class="ttname"><a href="namespacearm__compute.xhtml#a1a0b7ff66a946db6252d2a4c40c04fa7">arm_compute::deconvolution_output_dimensions</a></div><div class="ttdeci">std::pair&lt; unsigned int, unsigned int &gt; deconvolution_output_dimensions(unsigned int in_width, unsigned int in_height, unsigned int kernel_width, unsigned int kernel_height, const PadStrideInfo &amp;pad_stride_info)</div><div class="ttdoc">Returns expected width and height of the deconvolution's output tensor.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_utils_8cpp_source.xhtml#l00266">Utils.cpp:266</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_pooling3d_layer_info_xhtml_a8552c72afa19c3cb09f61e2ac730f504"><div class="ttname"><a href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a8552c72afa19c3cb09f61e2ac730f504">arm_compute::Pooling3dLayerInfo::stride</a></div><div class="ttdeci">Size3D stride</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01250">Types.h:1250</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad4bb8dabdbf8ad75e34220cc666b59caaca2475ab7883ebb9f125241141896190"><div class="ttname"><a href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59caaca2475ab7883ebb9f125241141896190">arm_compute::NormType::IN_MAP_1D</a></div><div class="ttdeci">@ IN_MAP_1D</div><div class="ttdoc">Normalization applied within the same map in 1D region.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a15a05537a472ee742404821851529327a0db45d2a4141101bdfe48e3314cfbca3"><div class="ttname"><a href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a0db45d2a4141101bdfe48e3314cfbca3">arm_compute::BorderMode::UNDEFINED</a></div><div class="ttdeci">@ UNDEFINED</div><div class="ttdoc">Borders are left undefined.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">arm_compute::DataType::QASYMM8</a></div><div class="ttdeci">@ QASYMM8</div><div class="ttdoc">quantized, asymmetric fixed-point 8-bit number unsigned</div></div>
<div class="ttc" id="aclassarm__compute_1_1_pixel_value_xhtml_a66c4c1f8b1962d71162d7ac0b3ef65bc"><div class="ttname"><a href="classarm__compute_1_1_pixel_value.xhtml#a66c4c1f8b1962d71162d7ac0b3ef65bc">arm_compute::PixelValue::get</a></div><div class="ttdeci">void get(uint8_t &amp;v) const</div><div class="ttdoc">Interpret the pixel value as a U8.</div><div class="ttdef"><b>Definition:</b> <a href="_pixel_value_8h_source.xhtml#l00228">PixelValue.h:228</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6aef9ef3ebca4d2b64b6ec83808bafa5f2"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aef9ef3ebca4d2b64b6ec83808bafa5f2">arm_compute::DataType::U16</a></div><div class="ttdeci">@ U16</div><div class="ttdoc">unsigned 16-bit number</div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml">arm_compute::TensorShape</a></div><div class="ttdoc">Shape of a tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00039">TensorShape.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_aa6d4f0b9fedd979c5b768f9b34fda9f6"><div class="ttname"><a href="namespacearm__compute.xhtml#aa6d4f0b9fedd979c5b768f9b34fda9f6">arm_compute::calculate_same_pad</a></div><div class="ttdeci">PadStrideInfo calculate_same_pad(TensorShape input_shape, TensorShape weights_shape, PadStrideInfo conv_info, DataLayout data_layout=DataLayout::NCHW, const Size2D &amp;dilation=Size2D(1u, 1u), const DimensionRoundingType &amp;rounding_type=DimensionRoundingType::FLOOR)</div><div class="ttdoc">Calculate padding requirements in case of SAME padding.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_utils_8cpp_source.xhtml#l00218">Utils.cpp:218</a></div></div>
<div class="ttc" id="a_activation_layer_info_8h_xhtml"><div class="ttname"><a href="_activation_layer_info_8h.xhtml">ActivationLayerInfo.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad6eaf2181f8a8c418acaf3af76239997"><div class="ttname"><a href="namespacearm__compute.xhtml#ad6eaf2181f8a8c418acaf3af76239997">arm_compute::string_from_pixel_value</a></div><div class="ttdeci">std::string string_from_pixel_value(const PixelValue &amp;value, const DataType data_type)</div><div class="ttdoc">Convert a PixelValue to a string, represented through the specific data type.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_utils_8cpp_source.xhtml#l00165">Utils.cpp:165</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_abd040a16dc0dbc75733e07aff93048a8"><div class="ttname"><a href="_error_8h.xhtml#abd040a16dc0dbc75733e07aff93048a8">ARM_COMPUTE_ERROR_VAR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_VAR(msg,...)</div><div class="ttdoc">Print the given message then throw an std::runtime_error.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00348">Error.h:348</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a549f4d59cb7f823d884ffe2424079c3a"><div class="ttname"><a href="namespacearm__compute.xhtml#a549f4d59cb7f823d884ffe2424079c3a">arm_compute::get_quantized_activation_min_max</a></div><div class="ttdeci">std::pair&lt; int32_t, int32_t &gt; get_quantized_activation_min_max(const ActivationLayerInfo &amp;act_info, DataType data_type, UniformQuantizationInfo oq_info)</div><div class="ttdoc">Returns a pair of minimum and maximum values for a quantized activation.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_utils_8cpp_source.xhtml#l00442">Utils.cpp:442</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a5f007421a4becd11c0666c2058b0b36c"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a5f007421a4becd11c0666c2058b0b36c">arm_compute::DataType::QSYMM8</a></div><div class="ttdeci">@ QSYMM8</div><div class="ttdoc">quantized, symmetric fixed-point 8-bit number</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ab8cef8b31b552b532a14ab8815e06285"><div class="ttname"><a href="namespacearm__compute.xhtml#ab8cef8b31b552b532a14ab8815e06285">arm_compute::quantize_qasymm8</a></div><div class="ttdeci">uint8_t quantize_qasymm8(float value, const INFO_TYPE &amp;qinfo, RoundingPolicy rounding_policy=RoundingPolicy::TO_NEAREST_UP)</div><div class="ttdoc">Quantize a value given an unsigned 8-bit asymmetric quantization scheme.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00295">QuantizationInfo.h:295</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00354">Error.h:354</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a138beaeb1260b90cb03bc3f761628724"><div class="ttname"><a href="namespacearm__compute.xhtml#a138beaeb1260b90cb03bc3f761628724">arm_compute::scaled_dimensions</a></div><div class="ttdeci">std::pair&lt; unsigned int, unsigned int &gt; scaled_dimensions(int width, int height, int kernel_width, int kernel_height, const PadStrideInfo &amp;pad_stride_info, const Size2D &amp;dilation=Size2D(1U, 1U))</div><div class="ttdoc">Returns expected width and height of output scaled tensor depending on dimensions rounding mode.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_utils_8cpp_source.xhtml#l00288">Utils.cpp:288</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_size2_d_xhtml"><div class="ttname"><a href="classarm__compute_1_1_size2_d.xhtml">arm_compute::Size2D</a></div><div class="ttdoc">Class for specifying the size of an image or rectangle.</div><div class="ttdef"><b>Definition:</b> <a href="_size2_d_8h_source.xhtml#l00034">Size2D.h:34</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ae0204b49ec236bbaedb1cf96def276d4"><div class="ttname"><a href="namespacearm__compute.xhtml#ae0204b49ec236bbaedb1cf96def276d4">arm_compute::string_from_border_mode</a></div><div class="ttdeci">const std::string &amp; string_from_border_mode(BorderMode border_mode)</div><div class="ttdoc">Translates a given border mode policy to a string.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_utils_8cpp_source.xhtml#l00096">Utils.cpp:96</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa57cec4137b614c87cb4e24a3d003a3e0"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa57cec4137b614c87cb4e24a3d003a3e0">arm_compute::Channel::Y</a></div><div class="ttdeci">@ Y</div><div class="ttdoc">Luma channel.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml">arm_compute::ITensor</a></div><div class="ttdoc">Interface for CPU tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_8h_source.xhtml#l00036">ITensor.h:36</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_size3_d_xhtml_a94b8468af876f5ab54020d5e9787a4f0"><div class="ttname"><a href="classarm__compute_1_1_size3_d.xhtml#a94b8468af876f5ab54020d5e9787a4f0">arm_compute::Size3D::x</a></div><div class="ttdeci">size_t x() const</div><div class="ttdoc">Semantic accessor for width as x.</div><div class="ttdef"><b>Definition:</b> <a href="_size3_d_8h_source.xhtml#l00057">Size3D.h:57</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a5827eb9cb394e74af87f74bd354fb45ba26a4b44a837bf97b972628509912b4a5"><div class="ttname"><a href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45ba26a4b44a837bf97b972628509912b4a5">arm_compute::ReductionOperation::MAX</a></div><div class="ttdeci">@ MAX</div><div class="ttdoc">Max.</div></div>
<div class="ttc" id="astructarm__compute_1_1_pooling3d_layer_info_xhtml_a51ba0498913f8c74b9ba8938694d09bf"><div class="ttname"><a href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a51ba0498913f8c74b9ba8938694d09bf">arm_compute::Pooling3dLayerInfo::padding</a></div><div class="ttdeci">Padding3D padding</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01251">Types.h:1251</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1fece1bd804e64f39f602d1c3969849aa5bdce8e6d9dc3efbbd31e90a8a181dff"><div class="ttname"><a href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa5bdce8e6d9dc3efbbd31e90a8a181dff">arm_compute::DimensionRoundingType::CEIL</a></div><div class="ttdeci">@ CEIL</div><div class="ttdoc">Ceil rounding.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1fece1bd804e64f39f602d1c3969849a"><div class="ttname"><a href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849a">arm_compute::DimensionRoundingType</a></div><div class="ttdeci">DimensionRoundingType</div><div class="ttdoc">Dimension rounding type when down-scaling on CNNs.</div><div class="ttdef"><b>Definition:</b> <a href="_core_types_8h_source.xhtml#l00133">CoreTypes.h:133</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_uniform_quantization_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_uniform_quantization_info.xhtml">arm_compute::UniformQuantizationInfo</a></div><div class="ttdoc">Quantization info when assuming per layer quantization.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00042">QuantizationInfo.h:42</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_af0dfcd19fb6510cd3c303db6c4583ee6"><div class="ttname"><a href="namespacearm__compute.xhtml#af0dfcd19fb6510cd3c303db6c4583ee6">arm_compute::string_from_channel</a></div><div class="ttdeci">const std::string &amp; string_from_channel(Channel channel)</div><div class="ttdoc">Convert a channel identity into a string.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_utils_8cpp_source.xhtml#l00078">Utils.cpp:78</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a5827eb9cb394e74af87f74bd354fb45b"><div class="ttname"><a href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45b">arm_compute::ReductionOperation</a></div><div class="ttdeci">ReductionOperation</div><div class="ttdoc">Available reduction operations.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00408">Types.h:408</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aadfcf28d0734569a6a693bc8194de62bf"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aadfcf28d0734569a6a693bc8194de62bf">arm_compute::Channel::G</a></div><div class="ttdeci">@ G</div><div class="ttdoc">Green channel.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">arm_compute::DataType::S8</a></div><div class="ttdeci">@ S8</div><div class="ttdoc">signed 8-bit number</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ae0d288429eb20baf6da6109f3a21e6bb"><div class="ttname"><a href="namespacearm__compute.xhtml#ae0d288429eb20baf6da6109f3a21e6bb">arm_compute::read_file</a></div><div class="ttdeci">std::string read_file(const std::string &amp;filename, bool binary)</div><div class="ttdoc">Load an entire file in memory.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_utils_8cpp_source.xhtml#l00040">Utils.cpp:40</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_info_xhtml_a79e20eacb1e963e24a21ebd7369effd7"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#a79e20eacb1e963e24a21ebd7369effd7">arm_compute::TensorInfo::padding</a></div><div class="ttdeci">PaddingSize padding() const override</div><div class="ttdoc">Padding of tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00265">TensorInfo.h:265</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">arm_compute::DataLayoutDimension::WIDTH</a></div><div class="ttdeci">@ WIDTH</div><div class="ttdoc">width</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1d8da22845d57d4aacb55b7d5ae6c013"><div class="ttname"><a href="namespacearm__compute.xhtml#a1d8da22845d57d4aacb55b7d5ae6c013">arm_compute::scaled_dimensions_signed</a></div><div class="ttdeci">std::pair&lt; int, int &gt; scaled_dimensions_signed(int width, int height, int kernel_width, int kernel_height, const PadStrideInfo &amp;pad_stride_info)</div><div class="ttdoc">Returns calculated width and height of output scaled tensor depending on dimensions rounding mode.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_utils_8cpp_source.xhtml#l00334">Utils.cpp:334</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a443d09c5e20d13e6f4063d0f60616fb5"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">arm_compute::cpu::data_layout</a></div><div class="ttdeci">constexpr auto data_layout</div><div class="ttdef"><b>Definition:</b> <a href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00036">impl.h:36</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">arm_compute::DataType::QSYMM16</a></div><div class="ttdeci">@ QSYMM16</div><div class="ttdoc">quantized, symmetric fixed-point 16-bit number</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a291164a04581bf953aa65ae87cc201a2"><div class="ttname"><a href="namespacearm__compute.xhtml#a291164a04581bf953aa65ae87cc201a2">arm_compute::string_from_gemmlowp_output_stage</a></div><div class="ttdeci">const std::string &amp; string_from_gemmlowp_output_stage(GEMMLowpOutputStageType output_stage)</div><div class="ttdoc">Translates a given GEMMLowp output stage to a string.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_utils_8cpp_source.xhtml#l00154">Utils.cpp:154</a></div></div>
<div class="ttc" id="a_string_utils_8h_xhtml"><div class="ttname"><a href="_string_utils_8h.xhtml">StringUtils.h</a></div></div>
<div class="ttc" id="aworking__space_8hpp_xhtml_aa2b9b52a4827eeb41f97f92a3781eee8"><div class="ttname"><a href="working__space_8hpp.xhtml#aa2b9b52a4827eeb41f97f92a3781eee8">output_stage</a></div><div class="ttdeci">const OutputStage &amp; output_stage</div><div class="ttdef"><b>Definition:</b> <a href="working__space_8hpp_source.xhtml#l00107">working_space.hpp:107</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_activation_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml">arm_compute::ActivationLayerInfo</a></div><div class="ttdoc">Activation Layer Information class.</div><div class="ttdef"><b>Definition:</b> <a href="_activation_layer_info_8h_source.xhtml#l00055">ActivationLayerInfo.h:55</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a5558e2cc22f7f4771653d992c8ad8864a079e2ddc95b344b5cb0188bed9a80d8b"><div class="ttname"><a href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864a079e2ddc95b344b5cb0188bed9a80d8b">arm_compute::GEMMLowpOutputStageType::QUANTIZE_DOWN</a></div><div class="ttdeci">@ QUANTIZE_DOWN</div><div class="ttdoc">Quantize using an integer multiplication.</div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a1f8aca235c095df227e7444f6b237eb1"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">arm_compute::test::validation::act_info</a></div><div class="ttdeci">act_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">DirectConvolutionLayer.cpp:547</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a73e2825fd61d349c5ca2f5313e3c8ea1"><div class="ttname"><a href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">arm_compute::half</a></div><div class="ttdeci">half_float::half half</div><div class="ttdoc">16-bit floating point type</div><div class="ttdef"><b>Definition:</b> <a href="_core_types_8h_source.xhtml#l00036">CoreTypes.h:36</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_size3_d_xhtml_aaaeb4853150b7d0e8b685fd08052924f"><div class="ttname"><a href="classarm__compute_1_1_size3_d.xhtml#aaaeb4853150b7d0e8b685fd08052924f">arm_compute::Size3D::y</a></div><div class="ttdeci">size_t y() const</div><div class="ttdoc">Semantic accessor for height as y.</div><div class="ttdef"><b>Definition:</b> <a href="_size3_d_8h_source.xhtml#l00066">Size3D.h:66</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1dcccbff6075b2fad30ebd2a0da6b995"><div class="ttname"><a href="namespacearm__compute.xhtml#a1dcccbff6075b2fad30ebd2a0da6b995">arm_compute::get_softmax_output_quantization_info</a></div><div class="ttdeci">QuantizationInfo get_softmax_output_quantization_info(DataType input_type, bool is_log)</div><div class="ttdoc">Returns output quantization information for softmax layer.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_utils_8cpp_source.xhtml#l00421">Utils.cpp:421</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6ac8bd5bedff8ef192d39a962afc0e19ee"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6ac8bd5bedff8ef192d39a962afc0e19ee">arm_compute::DataType::U32</a></div><div class="ttdeci">@ U32</div><div class="ttdoc">unsigned 32-bit number</div></div>
<div class="ttc" id="astructarm__compute_1_1_padding3_d_xhtml_ab9332a87d0af5aa12cac847eff68b7af"><div class="ttname"><a href="structarm__compute_1_1_padding3_d.xhtml#ab9332a87d0af5aa12cac847eff68b7af">arm_compute::Padding3D::top</a></div><div class="ttdeci">size_t top</div><div class="ttdoc">Padding across the height dimenstion on the top, in elements.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00640">Types.h:640</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a02110ece50ffc08b8ae07c7a63eb10df"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">arm_compute::test::validation::ss</a></div><div class="ttdeci">std::stringstream ss(mlgo_str)</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa9d5ed678fe57bcca610140957afab571"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa9d5ed678fe57bcca610140957afab571">arm_compute::Channel::B</a></div><div class="ttdeci">@ B</div><div class="ttdoc">Blue channel.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">arm_compute::DataLayoutDimension::HEIGHT</a></div><div class="ttdeci">@ HEIGHT</div><div class="ttdoc">height</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a464ea9027ae01e64014040d69302800f"><div class="ttname"><a href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">arm_compute::quantize_qasymm8_signed</a></div><div class="ttdeci">int8_t quantize_qasymm8_signed(float value, const INFO_TYPE &amp;qinfo, RoundingPolicy rounding_policy=RoundingPolicy::TO_NEAREST_UP)</div><div class="ttdoc">Quantize a value given a signed 8-bit asymmetric quantization scheme.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00309">QuantizationInfo.h:309</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a0b0eb3235749a2909dc5a101afe59a1b"><div class="ttname"><a href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond, msg)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00456">Error.h:456</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a9172da722f0a434e5cc07c0a3c115d93afcefd647d6a866603c627b11347c707a"><div class="ttname"><a href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93afcefd647d6a866603c627b11347c707a">arm_compute::PoolingType::AVG</a></div><div class="ttdeci">@ AVG</div><div class="ttdoc">Average Pooling.</div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a1a367830ae09bf6138df822888ec1d71"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">arm_compute::test::validation::w</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; w</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00156">DFT.cpp:156</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ab801dca7a1e1cfb228bb169e846b74f9"><div class="ttname"><a href="namespacearm__compute.xhtml#ab801dca7a1e1cfb228bb169e846b74f9">arm_compute::is_data_type_quantized_asymmetric_signed</a></div><div class="ttdeci">bool is_data_type_quantized_asymmetric_signed(DataType dt)</div><div class="ttdoc">Check if a given data type is of asymmetric quantized signed type.</div><div class="ttdef"><b>Definition:</b> <a href="_data_type_utils_8h_source.xhtml#l00365">DataTypeUtils.h:365</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a6669348b484e3008dca2bfa8e85e40b5"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6669348b484e3008dca2bfa8e85e40b5">arm_compute::DataType::U8</a></div><div class="ttdeci">@ U8</div><div class="ttdoc">unsigned 8-bit number</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a6e0b0886efb94aec797f6b830329b72c"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6e0b0886efb94aec797f6b830329b72c">arm_compute::DataType::S16</a></div><div class="ttdeci">@ S16</div><div class="ttdoc">signed 16-bit number</div></div>
<div class="ttc" id="astructarm__compute_1_1_pooling_layer_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_pooling_layer_info.xhtml">arm_compute::PoolingLayerInfo</a></div><div class="ttdoc">Pooling Layer Information struct.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01043">Types.h:1043</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">arm_compute::DataType::QASYMM8_SIGNED</a></div><div class="ttdeci">@ QASYMM8_SIGNED</div><div class="ttdoc">quantized, asymmetric fixed-point 8-bit number signed</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa1a2ddc2db4693cfd16d534cde5572cc1"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa1a2ddc2db4693cfd16d534cde5572cc1">arm_compute::Channel::C1</a></div><div class="ttdeci">@ C1</div><div class="ttdoc">Second channel (used by formats with unknown channel types).</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a15a05537a472ee742404821851529327a4ef59320fbe90fe47d40f1f71e4c5daa"><div class="ttname"><a href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a4ef59320fbe90fe47d40f1f71e4c5daa">arm_compute::BorderMode::REPLICATE</a></div><div class="ttdeci">@ REPLICATE</div><div class="ttdoc">Pixels outside the image are assumed to have the same value as the closest image pixel.</div></div>
<div class="ttc" id="anamespacearm__gemm_xhtml_ac882ca3f500a8e83c76a8acc59831255"><div class="ttname"><a href="namespacearm__gemm.xhtml#ac882ca3f500a8e83c76a8acc59831255">arm_gemm::bfloat16</a></div><div class="ttdeci">arm_compute::bfloat16 bfloat16</div><div class="ttdef"><b>Definition:</b> <a href="bfloat_8hpp_source.xhtml#l00030">bfloat.hpp:30</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a0569839ee85ad0e35edaaf3b4c80d706"><div class="ttname"><a href="namespacearm__compute.xhtml#a0569839ee85ad0e35edaaf3b4c80d706">arm_compute::string_from_norm_type</a></div><div class="ttdeci">const std::string &amp; string_from_norm_type(NormType type)</div><div class="ttdoc">Translates a given normalization type to a string.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_utils_8cpp_source.xhtml#l00107">Utils.cpp:107</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a59cc7dde3c479fa90260c12c992f2cae"><div class="ttname"><a href="namespacearm__compute.xhtml#a59cc7dde3c479fa90260c12c992f2cae">arm_compute::float_to_string_with_full_precision</a></div><div class="ttdeci">std::string float_to_string_with_full_precision(float val)</div><div class="ttdoc">Create a string with the float in full precision.</div><div class="ttdef"><b>Definition:</b> <a href="_string_utils_8cpp_source.xhtml#l00052">StringUtils.cpp:52</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a9172da722f0a434e5cc07c0a3c115d93"><div class="ttname"><a href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93">arm_compute::PoolingType</a></div><div class="ttdeci">PoolingType</div><div class="ttdoc">Available pooling types.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00480">Types.h:480</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_padding3_d_xhtml_aa185c5e9eee32898d06143bbd95f77a8"><div class="ttname"><a href="structarm__compute_1_1_padding3_d.xhtml#aa185c5e9eee32898d06143bbd95f77a8">arm_compute::Padding3D::back</a></div><div class="ttdeci">size_t back</div><div class="ttdoc">Padding across the depth dimenstion on the back, in elements.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00643">Types.h:643</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_padding3_d_xhtml_a1052a747170eed194bab868f0fce68ad"><div class="ttname"><a href="structarm__compute_1_1_padding3_d.xhtml#a1052a747170eed194bab868f0fce68ad">arm_compute::Padding3D::front</a></div><div class="ttdeci">size_t front</div><div class="ttdoc">Padding across the depth dimenstion on the front, in elements.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00642">Types.h:642</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa9c5959e6f08f10d0edbadf5be1f33c53"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa9c5959e6f08f10d0edbadf5be1f33c53">arm_compute::Channel::C0</a></div><div class="ttdeci">@ C0</div><div class="ttdoc">Unknown channel format.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad4bb8dabdbf8ad75e34220cc666b59caa6ff8bd96743aae9fd283cd822b84278e"><div class="ttname"><a href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59caa6ff8bd96743aae9fd283cd822b84278e">arm_compute::NormType::IN_MAP_2D</a></div><div class="ttdeci">@ IN_MAP_2D</div><div class="ttdoc">Normalization applied within the same map in 2D region.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aaf1a543f5a2c5d49bc5dde298fcf716e4"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aaf1a543f5a2c5d49bc5dde298fcf716e4">arm_compute::Channel::C2</a></div><div class="ttdeci">@ C2</div><div class="ttdoc">Third channel (used by formats with unknown channel types).</div></div>
<div class="ttc" id="astructarm__compute_1_1_pooling3d_layer_info_xhtml_acfcc7a243b3338bedc78c7c645d972fd"><div class="ttname"><a href="structarm__compute_1_1_pooling3d_layer_info.xhtml#acfcc7a243b3338bedc78c7c645d972fd">arm_compute::Pooling3dLayerInfo::round_type</a></div><div class="ttdeci">DimensionRoundingType round_type</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01255">Types.h:1255</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_size2_d_xhtml_a94b8468af876f5ab54020d5e9787a4f0"><div class="ttname"><a href="classarm__compute_1_1_size2_d.xhtml#a94b8468af876f5ab54020d5e9787a4f0">arm_compute::Size2D::x</a></div><div class="ttdeci">size_t x() const</div><div class="ttdoc">Semantic accessor for width as x.</div><div class="ttdef"><b>Definition:</b> <a href="_size2_d_8h_source.xhtml#l00073">Size2D.h:73</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00151">Error.h:151</a></div></div>
<div class="ttc" id="a_n_e_batch_normalization_layer_kernel_8cpp_xhtml_aa36901a4911e511f25f42e191df3526d"><div class="ttname"><a href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a></div><div class="ttdeci">DataType dt</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00050">NEBatchNormalizationLayerKernel.cpp:50</a></div></div>
<div class="ttc" id="a_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00067">ClWorkloadRuntime.cpp:67</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_size3_d_xhtml_a43852fa64fdbd5efa153e5c1e1e27ba4"><div class="ttname"><a href="classarm__compute_1_1_size3_d.xhtml#a43852fa64fdbd5efa153e5c1e1e27ba4">arm_compute::Size3D::z</a></div><div class="ttdeci">size_t z() const</div><div class="ttdoc">Semantic accessor for depth as z.</div><div class="ttdef"><b>Definition:</b> <a href="_size3_d_8h_source.xhtml#l00075">Size3D.h:75</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_pad_stride_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml">arm_compute::PadStrideInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_core_types_8h_source.xhtml#l00139">CoreTypes.h:139</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a5558e2cc22f7f4771653d992c8ad8864ab50339a10e1de285ac99d4c3990b8693"><div class="ttname"><a href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864ab50339a10e1de285ac99d4c3990b8693">arm_compute::GEMMLowpOutputStageType::NONE</a></div><div class="ttdeci">@ NONE</div><div class="ttdoc">No quantization.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455a"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">arm_compute::Channel</a></div><div class="ttdeci">Channel</div><div class="ttdoc">Available channels.</div><div class="ttdef"><b>Definition:</b> <a href="_core_types_8h_source.xhtml#l00041">CoreTypes.h:41</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a5f5b6c4337eac9e2e0046ca2304d80dc"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">arm_compute::test::validation::data_type</a></div><div class="ttdeci">data_type</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_cast_8cpp_source.xhtml#l00222">Cast.cpp:222</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a5558e2cc22f7f4771653d992c8ad8864"><div class="ttname"><a href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864">arm_compute::GEMMLowpOutputStageType</a></div><div class="ttdeci">GEMMLowpOutputStageType</div><div class="ttdoc">GEMMLowp output stage type.</div><div class="ttdef"><b>Definition:</b> <a href="_g_e_m_m_info_8h_source.xhtml#l00036">GEMMInfo.h:36</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_af78b3c8c9ad65dcb4bfa1d2fee424308"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#af78b3c8c9ad65dcb4bfa1d2fee424308">arm_compute::test::validation::input_shape</a></div><div class="ttdeci">TensorShape input_shape</div><div class="ttdoc">Validate test suite is to test ARM_COMPUTE_RETURN_ON_* macros we use to check the validity of given a...</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00466">LSTMLayerQuantized.cpp:466</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_pooling3d_layer_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_pooling3d_layer_info.xhtml">arm_compute::Pooling3dLayerInfo</a></div><div class="ttdoc">Pooling Layer Information struct.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01156">Types.h:1156</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_pad_stride_info_xhtml_a7144874ab401f5c4e249a1115dfb5166"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml#a7144874ab401f5c4e249a1115dfb5166">arm_compute::PadStrideInfo::pad_left</a></div><div class="ttdeci">unsigned int pad_left() const</div><div class="ttdoc">Get the left padding.</div><div class="ttdef"><b>Definition:</b> <a href="_core_types_8h_source.xhtml#l00218">CoreTypes.h:218</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_utils_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_utils_8h.xhtml">Utils.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_adfef6f05588c3d40195488620ab54b97"><div class="ttname"><a href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">arm_compute::get_data_layout_dimension_index</a></div><div class="ttdeci">size_t get_data_layout_dimension_index(const DataLayout &amp;data_layout, const DataLayoutDimension &amp;data_layout_dimension)</div><div class="ttdoc">Get the index of the given dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00201">Helpers.inl:201</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_padding3_d_xhtml_a951236a0702535ba18ba51db69428658"><div class="ttname"><a href="structarm__compute_1_1_padding3_d.xhtml#a951236a0702535ba18ba51db69428658">arm_compute::Padding3D::left</a></div><div class="ttdeci">size_t left</div><div class="ttdoc">Padding across the width dimenstion on the left, in elements.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00638">Types.h:638</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa696b031073e74bf2cb98e5ef201d4aa3"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa696b031073e74bf2cb98e5ef201d4aa3">arm_compute::Channel::UNKNOWN</a></div><div class="ttdeci">@ UNKNOWN</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe"><div class="ttname"><a href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">arm_compute::DimensionRoundingType::FLOOR</a></div><div class="ttdeci">@ FLOOR</div><div class="ttdoc">Floor rounding.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a9172da722f0a434e5cc07c0a3c115d93a26a4b44a837bf97b972628509912b4a5"><div class="ttname"><a href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93a26a4b44a837bf97b972628509912b4a5">arm_compute::PoolingType::MAX</a></div><div class="ttdeci">@ MAX</div><div class="ttdoc">Max Pooling.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_pad_stride_info_xhtml_ac49df0924d183da42cffc04cf9aba1f8"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml#ac49df0924d183da42cffc04cf9aba1f8">arm_compute::PadStrideInfo::pad_bottom</a></div><div class="ttdeci">unsigned int pad_bottom() const</div><div class="ttdoc">Get the bottom padding.</div><div class="ttdef"><b>Definition:</b> <a href="_core_types_8h_source.xhtml#l00233">CoreTypes.h:233</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a115dca124dc6423c7a400b8a8a0270cc"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a115dca124dc6423c7a400b8a8a0270cc">arm_compute::DataType::S64</a></div><div class="ttdeci">@ S64</div><div class="ttdoc">signed 64-bit number</div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa7fc56270e7a70fa81a5935b72eacbe29"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa7fc56270e7a70fa81a5935b72eacbe29">arm_compute::Channel::A</a></div><div class="ttdeci">@ A</div><div class="ttdoc">Alpha channel.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2023 Arm Limited.</div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a7058bee3ed710f07d96cb0d856de3bec"><div class="ttname"><a href="namespacearm__compute.xhtml#a7058bee3ed710f07d96cb0d856de3bec">arm_compute::scaled_3d_dimensions_signed</a></div><div class="ttdeci">std::tuple&lt; int, int, int &gt; scaled_3d_dimensions_signed(int width, int height, int depth, int kernel_width, int kernel_height, int kernel_depth, const Pooling3dLayerInfo &amp;pool3d_info)</div><div class="ttdoc">Returns calculated width, height and depth of output scaled tensor depending on dimensions rounding m...</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_utils_8cpp_source.xhtml#l00366">Utils.cpp:366</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a00525ff582f16038a1d3819aa44a23a3"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">arm_compute::test::validation::conv_info</a></div><div class="ttdeci">conv_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">DirectConvolutionLayer.cpp:547</a></div></div>
<div class="ttc" id="anamespaceclang__tidy__rules_xhtml_a1a6b6fb557d8d37d59700faf4e4c9167"><div class="ttname"><a href="namespaceclang__tidy__rules.xhtml#a1a6b6fb557d8d37d59700faf4e4c9167">clang_tidy_rules.mode</a></div><div class="ttdeci">mode</div><div class="ttdef"><b>Definition:</b> <a href="clang__tidy__rules_8py_source.xhtml#l00196">clang_tidy_rules.py:196</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94">arm_compute::DataType::F16</a></div><div class="ttdeci">@ F16</div><div class="ttdoc">16-bit floating-point number</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1a598d7174a66371ea772d4101760c25"><div class="ttname"><a href="namespacearm__compute.xhtml#a1a598d7174a66371ea772d4101760c25">arm_compute::is_pool_region_entirely_outside_input</a></div><div class="ttdeci">bool is_pool_region_entirely_outside_input(const PoolingLayerInfo &amp;info)</div><div class="ttdoc">Check if the pool region is entirely outside the input tensor.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_utils_8cpp_source.xhtml#l00129">Utils.cpp:129</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aae1e1d3d40573127e9ee0480caf1283d6"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aae1e1d3d40573127e9ee0480caf1283d6">arm_compute::Channel::R</a></div><div class="ttdeci">@ R</div><div class="ttdoc">Red channel.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a7d5ebe14ba3526c8e2ed3c6949669f9c"><div class="ttname"><a href="namespacearm__compute.xhtml#a7d5ebe14ba3526c8e2ed3c6949669f9c">arm_compute::has_padding_changed</a></div><div class="ttdeci">bool has_padding_changed(const std::unordered_map&lt; const ITensorInfo *, PaddingSize &gt; &amp;padding_map)</div><div class="ttdoc">Check if the previously stored padding info has changed after configuring a kernel.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_utils_8cpp_source.xhtml#l00491">Utils.cpp:491</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad4bb8dabdbf8ad75e34220cc666b59caa980fef040549733973683b1a868f96e5"><div class="ttname"><a href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59caa980fef040549733973683b1a868f96e5">arm_compute::NormType::CROSS_MAP</a></div><div class="ttdeci">@ CROSS_MAP</div><div class="ttdoc">Normalization applied cross maps.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::DataType::S32</a></div><div class="ttdeci">@ S32</div><div class="ttdoc">signed 32-bit number</div></div>
<div class="ttc" id="anamespacearm__compute_1_1mlgo_1_1parser_xhtml_a9fe67a1da3e2628bade473115ecbb5be"><div class="ttname"><a href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">arm_compute::mlgo::parser::end</a></div><div class="ttdeci">void end(TokenStream &amp;in, bool &amp;valid)</div><div class="ttdef"><b>Definition:</b> <a href="_m_l_g_o_parser_8cpp_source.xhtml#l00283">MLGOParser.cpp:283</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">arm_compute::Channel::U</a></div><div class="ttdeci">@ U</div><div class="ttdoc">Cb/U channel.</div></div>
<div class="ttc" id="astructarm__compute_1_1_padding3_d_xhtml_aa022cff9934a1a99bd77c49ca6a135a2"><div class="ttname"><a href="structarm__compute_1_1_padding3_d.xhtml#aa022cff9934a1a99bd77c49ca6a135a2">arm_compute::Padding3D::right</a></div><div class="ttdeci">size_t right</div><div class="ttdoc">Padding across the width dimenstion on the right, in elements.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00639">Types.h:639</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a15a05537a472ee742404821851529327"><div class="ttname"><a href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">arm_compute::BorderMode</a></div><div class="ttdeci">BorderMode</div><div class="ttdoc">Methods available to handle borders.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00231">Types.h:231</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_tensor_xhtml_ad45f0c01a0713dfb6bd7232c7f396fc4"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">arm_compute::CLTensor::info</a></div><div class="ttdeci">TensorInfo * info() const override</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2_cl_tensor_8cpp_source.xhtml#l00041">CLTensor.cpp:41</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a0bee325b210f81bb89fe1f9e15badf9c"><div class="ttname"><a href="namespacearm__compute.xhtml#a0bee325b210f81bb89fe1f9e15badf9c">arm_compute::is_data_type_quantized</a></div><div class="ttdeci">bool is_data_type_quantized(DataType dt)</div><div class="ttdoc">Check if a given data type is of quantized type.</div><div class="ttdef"><b>Definition:</b> <a href="_data_type_utils_8h_source.xhtml#l00324">DataTypeUtils.h:324</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_padding3_d_xhtml_a859088de403805f35d826df5ef39ee80"><div class="ttname"><a href="structarm__compute_1_1_padding3_d.xhtml#a859088de403805f35d826df5ef39ee80">arm_compute::Padding3D::bottom</a></div><div class="ttdeci">size_t bottom</div><div class="ttdoc">Padding across the height dimenstion on the bottom, in elements.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00641">Types.h:641</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00044">ITensorInfo.h:44</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::DataType::F32</a></div><div class="ttdeci">@ F32</div><div class="ttdoc">32-bit floating-point number</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad4bb8dabdbf8ad75e34220cc666b59ca"><div class="ttname"><a href="namespacearm__compute.xhtml#ad4bb8dabdbf8ad75e34220cc666b59ca">arm_compute::NormType</a></div><div class="ttdeci">NormType</div><div class="ttdoc">The normalization type used for the normalization layer.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00456">Types.h:456</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a2daf774ab1f2b95de283245a361d455f"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a2daf774ab1f2b95de283245a361d455f">arm_compute::cpu::width_idx</a></div><div class="ttdeci">const size_t width_idx</div><div class="ttdef"><b>Definition:</b> <a href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00037">impl.h:37</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ae69217acf0f0b5d4de030a09ad50a0bc"><div class="ttname"><a href="namespacearm__compute.xhtml#ae69217acf0f0b5d4de030a09ad50a0bc">arm_compute::get_min_max</a></div><div class="ttdeci">std::tuple&lt; PixelValue, PixelValue &gt; get_min_max(DataType dt)</div><div class="ttdoc">Compute the mininum and maximum values a data type can take.</div><div class="ttdef"><b>Definition:</b> <a href="_data_type_utils_8h_source.xhtml#l00195">DataTypeUtils.h:195</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_ac57b92957968088a392021cac1d2076b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a></div><div class="ttdeci">ScaleKernelInfo info(interpolation_policy, default_border_mode, PixelValue(), sampling_policy, false)</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a28029771f7c2cd8bbe2855303d38f71f"><div class="ttname"><a href="namespacearm__compute.xhtml#a28029771f7c2cd8bbe2855303d38f71f">arm_compute::needs_serialized_reduction</a></div><div class="ttdeci">bool needs_serialized_reduction(ReductionOperation op, DataType dt, unsigned int axis)</div><div class="ttdoc">Check if the given reduction operation should be handled in a serial way.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_utils_8cpp_source.xhtml#l00412">Utils.cpp:412</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa3abe124ecc82bf2c2e22e6058f38c50c"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa3abe124ecc82bf2c2e22e6058f38c50c">arm_compute::Channel::C3</a></div><div class="ttdeci">@ C3</div><div class="ttdoc">Fourth channel (used by formats with unknown channel types).</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a5558e2cc22f7f4771653d992c8ad8864ab300cae200f67712c1eb9234e28158ca"><div class="ttname"><a href="namespacearm__compute.xhtml#a5558e2cc22f7f4771653d992c8ad8864ab300cae200f67712c1eb9234e28158ca">arm_compute::GEMMLowpOutputStageType::QUANTIZE_DOWN_FIXEDPOINT</a></div><div class="ttdeci">@ QUANTIZE_DOWN_FIXEDPOINT</div><div class="ttdoc">Quantize using a fixed point multiplication.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">arm_compute::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdoc">Available data types.</div><div class="ttdef"><b>Definition:</b> <a href="_core_types_8h_source.xhtml#l00083">CoreTypes.h:83</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a456cc0b26fb17eee9942c8970f1c71db"><div class="ttname"><a href="namespacearm__compute.xhtml#a456cc0b26fb17eee9942c8970f1c71db">arm_compute::get_padding_info</a></div><div class="ttdeci">std::unordered_map&lt; const ITensorInfo *, PaddingSize &gt; get_padding_info(std::initializer_list&lt; const ITensorInfo * &gt; infos)</div><div class="ttdoc">Stores padding information before configuring a kernel.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_utils_8cpp_source.xhtml#l00476">Utils.cpp:476</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_pad_stride_info_xhtml_a3fea0ce4e6eeee7bf3a511c31b51d44f"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml#a3fea0ce4e6eeee7bf3a511c31b51d44f">arm_compute::PadStrideInfo::pad_top</a></div><div class="ttdeci">unsigned int pad_top() const</div><div class="ttdoc">Get the top padding.</div><div class="ttdef"><b>Definition:</b> <a href="_core_types_8h_source.xhtml#l00228">CoreTypes.h:228</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_pad_stride_info_xhtml_a6e324c1bd1111876469ea247da156147"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml#a6e324c1bd1111876469ea247da156147">arm_compute::PadStrideInfo::stride</a></div><div class="ttdeci">std::pair&lt; unsigned int, unsigned int &gt; stride() const</div><div class="ttdoc">Get the stride.</div><div class="ttdef"><b>Definition:</b> <a href="_core_types_8h_source.xhtml#l00192">CoreTypes.h:192</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_aa6d92f521dc4f05ac7f4c856dcfe263e"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#aa6d92f521dc4f05ac7f4c856dcfe263e">arm_compute::cpu::height_idx</a></div><div class="ttdeci">const size_t height_idx</div><div class="ttdef"><b>Definition:</b> <a href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00038">impl.h:38</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="src_2core_2_utils_8cpp.xhtml">Utils.cpp</a></li>
    <li class="footer">Generated on Tue Nov 21 2023 16:31:01 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
