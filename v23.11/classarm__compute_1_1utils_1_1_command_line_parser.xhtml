<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: CommandLineParser Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classarm__compute_1_1utils_1_1_command_line_parser.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">CommandLineParser Class Reference<span class="mlabels"><span class="mlabel">final</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p>Class to parse command line arguments.  
 <a href="classarm__compute_1_1utils_1_1_command_line_parser.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_command_line_parser_8h_source.xhtml">CommandLineParser.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a169ae39f7c9da9fee21c577ae5d7954f"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1_command_line_parser.xhtml#a169ae39f7c9da9fee21c577ae5d7954f">CommandLineParser</a> ()=default</td></tr>
<tr class="memdesc:a169ae39f7c9da9fee21c577ae5d7954f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="classarm__compute_1_1utils_1_1_command_line_parser.xhtml#a169ae39f7c9da9fee21c577ae5d7954f">More...</a><br /></td></tr>
<tr class="separator:a169ae39f7c9da9fee21c577ae5d7954f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a533951910a8df4f26eac7e534a226c5f"><td class="memTemplParams" colspan="2">template&lt;typename T , typename... As&gt; </td></tr>
<tr class="memitem:a533951910a8df4f26eac7e534a226c5f"><td class="memTemplItemLeft" align="right" valign="top">T *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1_command_line_parser.xhtml#a533951910a8df4f26eac7e534a226c5f">add_option</a> (const std::string &amp;<a class="el" href="_n_e_select_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a>, As &amp;&amp;...args)</td></tr>
<tr class="memdesc:a533951910a8df4f26eac7e534a226c5f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to add a new option to the parser.  <a href="classarm__compute_1_1utils_1_1_command_line_parser.xhtml#a533951910a8df4f26eac7e534a226c5f">More...</a><br /></td></tr>
<tr class="separator:a533951910a8df4f26eac7e534a226c5f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a079cbecac60787502777460ef65491c0"><td class="memTemplParams" colspan="2">template&lt;typename T , typename... As&gt; </td></tr>
<tr class="memitem:a079cbecac60787502777460ef65491c0"><td class="memTemplItemLeft" align="right" valign="top">T *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1_command_line_parser.xhtml#a079cbecac60787502777460ef65491c0">add_positional_option</a> (As &amp;&amp;...args)</td></tr>
<tr class="memdesc:a079cbecac60787502777460ef65491c0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to add a new positional argument to the parser.  <a href="classarm__compute_1_1utils_1_1_command_line_parser.xhtml#a079cbecac60787502777460ef65491c0">More...</a><br /></td></tr>
<tr class="separator:a079cbecac60787502777460ef65491c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a66fa8f960eac1bf561ba2cb8be0cc58a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1_command_line_parser.xhtml#a66fa8f960eac1bf561ba2cb8be0cc58a">parse</a> (int argc, char **argv)</td></tr>
<tr class="memdesc:a66fa8f960eac1bf561ba2cb8be0cc58a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parses the command line arguments and updates the options accordingly.  <a href="classarm__compute_1_1utils_1_1_command_line_parser.xhtml#a66fa8f960eac1bf561ba2cb8be0cc58a">More...</a><br /></td></tr>
<tr class="separator:a66fa8f960eac1bf561ba2cb8be0cc58a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3566e1a9ec7fedc6e4fc47fab7c18532"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1_command_line_parser.xhtml#a3566e1a9ec7fedc6e4fc47fab7c18532">validate</a> () const</td></tr>
<tr class="memdesc:a3566e1a9ec7fedc6e4fc47fab7c18532"><td class="mdescLeft">&#160;</td><td class="mdescRight">Validates the previously parsed command line arguments.  <a href="classarm__compute_1_1utils_1_1_command_line_parser.xhtml#a3566e1a9ec7fedc6e4fc47fab7c18532">More...</a><br /></td></tr>
<tr class="separator:a3566e1a9ec7fedc6e4fc47fab7c18532"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5da3e535faa6847a0da40fe7fb28383"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1_command_line_parser.xhtml#aa5da3e535faa6847a0da40fe7fb28383">print_help</a> (const std::string &amp;program_name) const</td></tr>
<tr class="memdesc:aa5da3e535faa6847a0da40fe7fb28383"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prints a help message for all configured options.  <a href="classarm__compute_1_1utils_1_1_command_line_parser.xhtml#aa5da3e535faa6847a0da40fe7fb28383">More...</a><br /></td></tr>
<tr class="separator:aa5da3e535faa6847a0da40fe7fb28383"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Class to parse command line arguments. </p>

<p class="definition">Definition at line <a class="el" href="_command_line_parser_8h_source.xhtml#l00044">44</a> of file <a class="el" href="_command_line_parser_8h_source.xhtml">CommandLineParser.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a169ae39f7c9da9fee21c577ae5d7954f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a169ae39f7c9da9fee21c577ae5d7954f">&#9670;&nbsp;</a></span>CommandLineParser()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1utils_1_1_command_line_parser.xhtml">CommandLineParser</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default constructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a533951910a8df4f26eac7e534a226c5f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a533951910a8df4f26eac7e534a226c5f">&#9670;&nbsp;</a></span>add_option()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T * add_option </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">As &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function to add a new option to the parser. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">name</td><td>Name of the option. Will be available under &ndash;name=VALUE. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">args</td><td><a class="el" href="classarm__compute_1_1utils_1_1_option.xhtml" title="Abstract base class for a command line option.">Option</a> specific configuration arguments.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Pointer to the option. The option is owned by the parser. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_command_line_parser_8h_source.xhtml#l00103">103</a> of file <a class="el" href="_command_line_parser_8h_source.xhtml">CommandLineParser.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;{</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keyword">auto</span> result = _options.emplace(<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a>, std::make_unique&lt;T&gt;(<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a>, std::forward&lt;As&gt;(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)...));</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>T *<span class="keyword">&gt;</span>(result.first-&gt;second.get());</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner::args</a>, and <a class="el" href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00066">name</a>.</p>

</div>
</div>
<a id="a079cbecac60787502777460ef65491c0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a079cbecac60787502777460ef65491c0">&#9670;&nbsp;</a></span>add_positional_option()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T * add_positional_option </td>
          <td>(</td>
          <td class="paramtype">As &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function to add a new positional argument to the parser. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">args</td><td><a class="el" href="classarm__compute_1_1utils_1_1_option.xhtml" title="Abstract base class for a command line option.">Option</a> specific configuration arguments.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Pointer to the option. The option is owned by the parser. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_command_line_parser_8h_source.xhtml#l00110">110</a> of file <a class="el" href="_command_line_parser_8h_source.xhtml">CommandLineParser.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;{</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    _positional_options.emplace_back(std::make_unique&lt;T&gt;(std::forward&lt;As&gt;(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)...));</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>T *<span class="keyword">&gt;</span>(_positional_options.back().get());</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner::args</a>.</p>

</div>
</div>
<a id="a66fa8f960eac1bf561ba2cb8be0cc58a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a66fa8f960eac1bf561ba2cb8be0cc58a">&#9670;&nbsp;</a></span>parse()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void parse </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char **&#160;</td>
          <td class="paramname"><em>argv</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Parses the command line arguments and updates the options accordingly. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">argc</td><td>Number of arguments. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">argv</td><td>Arguments. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_command_line_parser_8h_source.xhtml#l00116">116</a> of file <a class="el" href="_command_line_parser_8h_source.xhtml">CommandLineParser.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;{</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keyword">const</span> std::regex option_regex{<span class="stringliteral">&quot;--((?:no-)?)([^=]+)(?:=(.*))?&quot;</span>};</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160; </div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> set_option = [&amp;](<span class="keyword">const</span> std::string &amp;option, <span class="keyword">const</span> std::string &amp;<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a>, <span class="keyword">const</span> std::string &amp;value)</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    {</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        <span class="keywordflow">if</span> (_options.find(<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a>) == _options.end())</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        {</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            _unknown_options.push_back(option);</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        }</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160; </div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span> success = _options[<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a>]-&gt;parse(value);</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160; </div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        <span class="keywordflow">if</span> (!success)</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        {</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            _invalid_options.push_back(option);</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        }</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    };</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160; </div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> positional_index = 0;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160; </div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt; argc; ++i)</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    {</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        std::string mixed_case_opt{argv[i]};</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        <span class="keywordtype">int</span>         equal_sign = mixed_case_opt.find(<span class="charliteral">&#39;=&#39;</span>);</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        <span class="keywordtype">int</span>         pos        = (equal_sign == -1) ? strlen(argv[i]) : equal_sign;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160; </div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        <span class="keyword">const</span> std::string option =</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            <a class="code" href="namespacearm__compute_1_1utility.xhtml#abb96ad5c7071ec3a47ea5f07e817a636">arm_compute::utility::tolower</a>(mixed_case_opt.substr(0, pos)) + mixed_case_opt.substr(pos);</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        std::smatch option_matches;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160; </div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        <span class="keywordflow">if</span> (std::regex_match(option, option_matches, option_regex))</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        {</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            <span class="comment">// Boolean option</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            <span class="keywordflow">if</span> (option_matches.str(3).empty())</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            {</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                set_option(option, option_matches.str(2), option_matches.str(1).empty() ? <span class="stringliteral">&quot;true&quot;</span> : <span class="stringliteral">&quot;false&quot;</span>);</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            }</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            {</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                <span class="comment">// Can&#39;t have &quot;no-&quot; and a value</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                <span class="keywordflow">if</span> (!option_matches.str(1).empty())</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                {</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                    _invalid_options.emplace_back(option);</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                }</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                {</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                    set_option(option, option_matches.str(2), option_matches.str(3));</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                }</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            }</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        }</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        {</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            <span class="keywordflow">if</span> (positional_index &gt;= _positional_options.size())</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            {</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                _invalid_options.push_back(mixed_case_opt);</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            }</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            {</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                _positional_options[positional_index]-&gt;parse(mixed_case_opt);</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                ++positional_index;</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            }</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        }</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    }</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00066">name</a>, and <a class="el" href="_utility_8h_source.xhtml#l00204">arm_compute::utility::tolower()</a>.</p>

</div>
</div>
<a id="aa5da3e535faa6847a0da40fe7fb28383"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa5da3e535faa6847a0da40fe7fb28383">&#9670;&nbsp;</a></span>print_help()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void print_help </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>program_name</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prints a help message for all configured options. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">program_name</td><td>Name of the program to be used in the help message. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_command_line_parser_8h_source.xhtml#l00218">218</a> of file <a class="el" href="_command_line_parser_8h_source.xhtml">CommandLineParser.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;{</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;usage: &quot;</span> &lt;&lt; program_name &lt;&lt; <span class="stringliteral">&quot; \n&quot;</span>;</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160; </div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;option : _options)</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    {</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        std::cout &lt;&lt; option.second-&gt;help() &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    }</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160; </div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;option : _positional_options)</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    {</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        std::string help_to_print;</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160; </div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        <span class="comment">// Extract help sub-string</span></div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        <span class="keyword">const</span> std::string help_str = option-&gt;help();</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">size_t</span>      help_pos = help_str.find(<span class="stringliteral">&quot; - &quot;</span>);</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        <span class="keywordflow">if</span> (help_pos != std::string::npos)</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        {</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;            help_to_print = help_str.substr(help_pos);</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        }</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160; </div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        std::cout &lt;&lt; option-&gt;name() &lt;&lt; help_to_print &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    }</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a3566e1a9ec7fedc6e4fc47fab7c18532"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3566e1a9ec7fedc6e4fc47fab7c18532">&#9670;&nbsp;</a></span>validate()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool validate </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Validates the previously parsed command line arguments. </p>
<p>Validation fails if not all required options are provided. Additionally warnings are generated for options that have illegal values or unknown options.</p>
<dl class="section return"><dt>Returns</dt><dd>True if all required options have been provided. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_command_line_parser_8h_source.xhtml#l00183">183</a> of file <a class="el" href="_command_line_parser_8h_source.xhtml">CommandLineParser.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;{</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7b1d0df736739f38994ed29f54cffdf3">is_valid</a> = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160; </div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;option : _options)</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    {</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        <span class="keywordflow">if</span> (option.second-&gt;is_required() &amp;&amp; !option.second-&gt;is_set())</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        {</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7b1d0df736739f38994ed29f54cffdf3">is_valid</a> = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            std::cerr &lt;&lt; <span class="stringliteral">&quot;ERROR: Option &#39;&quot;</span> &lt;&lt; option.second-&gt;name() &lt;&lt; <span class="stringliteral">&quot;&#39; is required but not given!\n&quot;</span>;</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        }</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    }</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160; </div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;option : _positional_options)</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    {</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        <span class="keywordflow">if</span> (option-&gt;is_required() &amp;&amp; !option-&gt;is_set())</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        {</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7b1d0df736739f38994ed29f54cffdf3">is_valid</a> = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            std::cerr &lt;&lt; <span class="stringliteral">&quot;ERROR: Option &#39;&quot;</span> &lt;&lt; option-&gt;name() &lt;&lt; <span class="stringliteral">&quot;&#39; is required but not given!\n&quot;</span>;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        }</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    }</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160; </div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;option : _unknown_options)</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    {</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        std::cerr &lt;&lt; <span class="stringliteral">&quot;WARNING: Skipping unknown option &#39;&quot;</span> &lt;&lt; option &lt;&lt; <span class="stringliteral">&quot;&#39;!\n&quot;</span>;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    }</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160; </div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;option : _invalid_options)</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    {</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        std::cerr &lt;&lt; <span class="stringliteral">&quot;WARNING: Skipping invalid option &#39;&quot;</span> &lt;&lt; option &lt;&lt; <span class="stringliteral">&quot;&#39;!\n&quot;</span>;</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    }</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160; </div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7b1d0df736739f38994ed29f54cffdf3">is_valid</a>;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_direct_conv2d_8cpp_source.xhtml#l00162">arm_compute::test::validation::is_valid</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>utils/command_line/<a class="el" href="_command_line_parser_8h_source.xhtml">CommandLineParser.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="anamespace_gemm_tuner_xhtml_a8187411843a6284ffb964ef3fb9fcab3"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">GemmTuner.args</a></div><div class="ttdeci">args</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner.py:679</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1utility_xhtml_abb96ad5c7071ec3a47ea5f07e817a636"><div class="ttname"><a href="namespacearm__compute_1_1utility.xhtml#abb96ad5c7071ec3a47ea5f07e817a636">arm_compute::utility::tolower</a></div><div class="ttdeci">std::string tolower(std::string string)</div><div class="ttdoc">Convert string to lower case.</div><div class="ttdef"><b>Definition:</b> <a href="_utility_8h_source.xhtml#l00204">Utility.h:204</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a7b1d0df736739f38994ed29f54cffdf3"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a7b1d0df736739f38994ed29f54cffdf3">arm_compute::test::validation::is_valid</a></div><div class="ttdeci">bool is_valid</div><div class="ttdef"><b>Definition:</b> <a href="_direct_conv2d_8cpp_source.xhtml#l00162">DirectConv2d.cpp:162</a></div></div>
<div class="ttc" id="a_n_e_batch_normalization_layer_kernel_8cpp_xhtml_a8f8f80d37794cde9472343e4487ba3eb"><div class="ttname"><a href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a></div><div class="ttdeci">const char * name</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00066">NEBatchNormalizationLayerKernel.cpp:66</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1utils.xhtml">utils</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1utils_1_1_command_line_parser.xhtml">CommandLineParser</a></li>
    <li class="footer">Generated on Tue Nov 21 2023 16:31:21 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
