<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/cpu/kernels/gemm_matrix_mul/generic/neon/fp16.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('cpu_2kernels_2gemm__matrix__mul_2generic_2neon_2fp16_8cpp_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">fp16.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="cpu_2kernels_2gemm__matrix__mul_2generic_2neon_2fp16_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2022-2023 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifdef __ARM_FEATURE_FP16_VECTOR_ARITHMETIC</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160; </div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="float__ops_8h.xhtml">src/core/utils/helpers/float_ops.h</a>&quot;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="gemm__matrix__mul_2generic_2neon_2impl_8h.xhtml">src/cpu/kernels/gemm_matrix_mul/generic/neon/impl.h</a>&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160; </div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;arm_neon.h&gt;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160; </div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;{</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">namespace </span>cpu</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keywordtype">void</span> vector_matrix_multiply_f16(</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keyword">const</span> ITensor *lhs, <span class="keyword">const</span> ITensor *rhs, ITensor *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, <span class="keyword">const</span> Window &amp;window, <span class="keyword">const</span> ThreadInfo &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>, <span class="keywordtype">float</span> alpha)</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> width_matrix_b  = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;dimension(0));</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> in_b_stride     = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(rhs-&gt;info()-&gt;strides_in_bytes()[1] / rhs-&gt;info()-&gt;element_size());</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> num_elems_vec_a = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(lhs-&gt;info()-&gt;dimension(0));</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160; </div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="comment">// The implementation computes 32 elements per iteration</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> window_start_x = 32 * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.thread_id;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> window_step_x  = 32 * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.num_threads;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> window_end_x   = <a class="code" href="namespacearm__compute.xhtml#ab237a0a375cf382d52b61653248d3d4a">ceil_to_multiple</a>(width_matrix_b - window_start_x, window_step_x) + window_start_x;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>((window_end_x - window_start_x) % window_step_x,</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;                             <span class="stringliteral">&quot; (window_end_x - window_start_x) must be multiple of window_step_x&quot;</span>);</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160; </div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    Window win_out(window);</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    win_out.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    win_out.set(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160; </div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    Window win_a(window);</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    win_a.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 0, 0));</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    win_a.set(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, Window::Dimension(0, 0, 0));</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160; </div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    Window win_b;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="comment">// Don&#39;t slice matrix B along the z dimension if matrix B has just 2 dimensions and matrix A more than 2</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="comment">// This scenario can happen when the the matrix multiplication is used to perform a convolution operation</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordflow">if</span> (rhs-&gt;info()-&gt;num_dimensions() &gt;= 3)</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    {</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        win_b = window;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    }</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    win_b.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    win_b.set(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160; </div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    Iterator ina(lhs, win_a);</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    Iterator inb(rhs, win_b);</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    Iterator out(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win_out);</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160; </div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> multiply_alpha = !(<a class="code" href="namespacearm__compute_1_1helpers_1_1float__ops.xhtml#ab2dcf325d146568ecc8d4a4bd36c02ac">helpers::float_ops::is_one</a>(alpha));</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160; </div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keyword">const</span> float16x8_t alpha_f16 = vdupq_n_f16(alpha);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160; </div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        win_out,</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        {</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            <span class="comment">// Here we don&#39;t check for x lower equal than (window_end_x - window_step_x) because of</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            <span class="comment">// window_end_x is computed above which may cause out-of-bound writes to the dst.</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            <span class="keywordflow">for</span> (; x &lt; (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            {</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                <span class="keywordflow">if</span> (x &gt; width_matrix_b)</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                {</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                }</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160; </div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                <span class="keyword">auto</span> matrix_b = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>float16_t *<span class="keyword">&gt;</span>(inb.ptr()) + x;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160; </div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                float16x8_t acc0 = vdupq_n_f16(0.f);</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                float16x8_t acc1 = vdupq_n_f16(0.f);</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                float16x8_t acc2 = vdupq_n_f16(0.f);</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                float16x8_t acc3 = vdupq_n_f16(0.f);</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160; </div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                <span class="keyword">auto</span>             vec_a          = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>float16_t *<span class="keyword">&gt;</span>(ina.ptr());</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                <span class="keyword">const</span> float16_t *vec_a_end_addr = vec_a + num_elems_vec_a;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                <span class="keywordflow">for</span> (; vec_a &lt;= (vec_a_end_addr - 4);)</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                {</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                    <span class="keyword">const</span> float16x4_t a0l = vld1_f16(vec_a);</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160; </div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                    float16x8_t b00 = vld1q_f16(matrix_b + 0 + 0 * in_b_stride);</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                    float16x8_t b01 = vld1q_f16(matrix_b + 8 + 0 * in_b_stride);</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                    float16x8_t b02 = vld1q_f16(matrix_b + 16 + 0 * in_b_stride);</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                    float16x8_t b03 = vld1q_f16(matrix_b + 24 + 0 * in_b_stride);</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                    float16x8_t b10 = vld1q_f16(matrix_b + 0 + 1 * in_b_stride);</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                    float16x8_t b11 = vld1q_f16(matrix_b + 8 + 1 * in_b_stride);</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                    float16x8_t b12 = vld1q_f16(matrix_b + 16 + 1 * in_b_stride);</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                    float16x8_t b13 = vld1q_f16(matrix_b + 24 + 1 * in_b_stride);</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160; </div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                    acc0 = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(acc0, <a class="code" href="clang-tidy_8h.xhtml#aaa649bddcba28ddb5911a675312e0024">vmulq_lane_f16</a>(b00, a0l, 0));</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                    acc1 = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(acc1, <a class="code" href="clang-tidy_8h.xhtml#aaa649bddcba28ddb5911a675312e0024">vmulq_lane_f16</a>(b01, a0l, 0));</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                    acc2 = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(acc2, <a class="code" href="clang-tidy_8h.xhtml#aaa649bddcba28ddb5911a675312e0024">vmulq_lane_f16</a>(b02, a0l, 0));</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                    acc3 = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(acc3, <a class="code" href="clang-tidy_8h.xhtml#aaa649bddcba28ddb5911a675312e0024">vmulq_lane_f16</a>(b03, a0l, 0));</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                    acc0 = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(acc0, <a class="code" href="clang-tidy_8h.xhtml#aaa649bddcba28ddb5911a675312e0024">vmulq_lane_f16</a>(b10, a0l, 1));</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                    acc1 = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(acc1, <a class="code" href="clang-tidy_8h.xhtml#aaa649bddcba28ddb5911a675312e0024">vmulq_lane_f16</a>(b11, a0l, 1));</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                    acc2 = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(acc2, <a class="code" href="clang-tidy_8h.xhtml#aaa649bddcba28ddb5911a675312e0024">vmulq_lane_f16</a>(b12, a0l, 1));</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                    acc3 = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(acc3, <a class="code" href="clang-tidy_8h.xhtml#aaa649bddcba28ddb5911a675312e0024">vmulq_lane_f16</a>(b13, a0l, 1));</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160; </div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                    matrix_b += 2 * in_b_stride;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160; </div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                    b00 = vld1q_f16(matrix_b + 0 + 0 * in_b_stride);</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                    b01 = vld1q_f16(matrix_b + 8 + 0 * in_b_stride);</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                    b02 = vld1q_f16(matrix_b + 16 + 0 * in_b_stride);</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                    b03 = vld1q_f16(matrix_b + 24 + 0 * in_b_stride);</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                    b10 = vld1q_f16(matrix_b + 0 + 1 * in_b_stride);</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                    b11 = vld1q_f16(matrix_b + 8 + 1 * in_b_stride);</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                    b12 = vld1q_f16(matrix_b + 16 + 1 * in_b_stride);</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                    b13 = vld1q_f16(matrix_b + 24 + 1 * in_b_stride);</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160; </div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                    acc0 = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(acc0, <a class="code" href="clang-tidy_8h.xhtml#aaa649bddcba28ddb5911a675312e0024">vmulq_lane_f16</a>(b00, a0l, 2));</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                    acc1 = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(acc1, <a class="code" href="clang-tidy_8h.xhtml#aaa649bddcba28ddb5911a675312e0024">vmulq_lane_f16</a>(b01, a0l, 2));</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                    acc2 = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(acc2, <a class="code" href="clang-tidy_8h.xhtml#aaa649bddcba28ddb5911a675312e0024">vmulq_lane_f16</a>(b02, a0l, 2));</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                    acc3 = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(acc3, <a class="code" href="clang-tidy_8h.xhtml#aaa649bddcba28ddb5911a675312e0024">vmulq_lane_f16</a>(b03, a0l, 2));</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                    acc0 = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(acc0, <a class="code" href="clang-tidy_8h.xhtml#aaa649bddcba28ddb5911a675312e0024">vmulq_lane_f16</a>(b10, a0l, 3));</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                    acc1 = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(acc1, <a class="code" href="clang-tidy_8h.xhtml#aaa649bddcba28ddb5911a675312e0024">vmulq_lane_f16</a>(b11, a0l, 3));</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                    acc2 = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(acc2, <a class="code" href="clang-tidy_8h.xhtml#aaa649bddcba28ddb5911a675312e0024">vmulq_lane_f16</a>(b12, a0l, 3));</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                    acc3 = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(acc3, <a class="code" href="clang-tidy_8h.xhtml#aaa649bddcba28ddb5911a675312e0024">vmulq_lane_f16</a>(b13, a0l, 3));</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160; </div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                    vec_a += 4;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                    matrix_b += 2 * in_b_stride;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                }</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160; </div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                <span class="keywordflow">for</span> (; vec_a &lt; vec_a_end_addr; ++vec_a)</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                {</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                    <span class="keyword">const</span> float16_t   a0  = *vec_a;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                    <span class="keyword">const</span> float16x8_t b00 = vld1q_f16(matrix_b + 0 + 0 * in_b_stride);</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                    <span class="keyword">const</span> float16x8_t b01 = vld1q_f16(matrix_b + 8 + 0 * in_b_stride);</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                    <span class="keyword">const</span> float16x8_t b02 = vld1q_f16(matrix_b + 16 + 0 * in_b_stride);</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                    <span class="keyword">const</span> float16x8_t b03 = vld1q_f16(matrix_b + 24 + 0 * in_b_stride);</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160; </div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                    acc0 = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(acc0, <a class="code" href="clang-tidy_8h.xhtml#a38b04f8501774694c5f12d7c65f5a886">vmulq_n_f16</a>(b00, a0));</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                    acc1 = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(acc1, <a class="code" href="clang-tidy_8h.xhtml#a38b04f8501774694c5f12d7c65f5a886">vmulq_n_f16</a>(b01, a0));</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                    acc2 = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(acc2, <a class="code" href="clang-tidy_8h.xhtml#a38b04f8501774694c5f12d7c65f5a886">vmulq_n_f16</a>(b02, a0));</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                    acc3 = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(acc3, <a class="code" href="clang-tidy_8h.xhtml#a38b04f8501774694c5f12d7c65f5a886">vmulq_n_f16</a>(b03, a0));</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160; </div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                    matrix_b += in_b_stride;</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                }</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160; </div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                <span class="comment">// Multiply by the weight of matrix product (alpha)</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                <span class="keywordflow">if</span> (multiply_alpha)</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                {</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                    acc0 = <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(acc0, alpha_f16);</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                    acc1 = <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(acc1, alpha_f16);</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                    acc2 = <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(acc2, alpha_f16);</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                    acc3 = <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(acc3, alpha_f16);</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                }</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160; </div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                <span class="keyword">auto</span> vec_out = <span class="keyword">reinterpret_cast&lt;</span>float16_t *<span class="keyword">&gt;</span>(out.ptr()) + x;</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160; </div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                vst1q_f16(vec_out + 0, acc0);</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                vst1q_f16(vec_out + 8, acc1);</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                vst1q_f16(vec_out + 16, acc2);</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                vst1q_f16(vec_out + 24, acc3);</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            }</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160; </div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            {</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                <span class="keywordflow">if</span> (x &gt; width_matrix_b)</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                {</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                }</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160; </div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                <span class="keyword">auto</span> matrix_b = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>float16_t *<span class="keyword">&gt;</span>(inb.ptr()) + x;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160; </div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                float16x4_t vacc = vdup_n_f16(0.f);</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160; </div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                <span class="keyword">auto</span>             vec_a          = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>float16_t *<span class="keyword">&gt;</span>(ina.ptr());</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                <span class="keyword">const</span> float16_t *vec_a_end_addr = vec_a + num_elems_vec_a;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                <span class="keywordflow">for</span> (; vec_a &lt;= (vec_a_end_addr - 4); vec_a += 4)</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                {</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                    <span class="keyword">const</span> float16x4_t a0l = vld1_f16(vec_a);</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160; </div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                    <span class="keyword">const</span> float16x4_t b_col = {</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                        *(matrix_b + 0 * in_b_stride),</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                        *(matrix_b + 1 * in_b_stride),</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                        *(matrix_b + 2 * in_b_stride),</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                        *(matrix_b + 3 * in_b_stride),</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                    };</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160; </div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                    vacc = <a class="code" href="clang-tidy_8h.xhtml#a608fb0db3de44492fcc96a836eadf11b">vadd_f16</a>(vacc, <a class="code" href="clang-tidy_8h.xhtml#a02bbbedd1ea200543e093cdf593fe6c6">vmul_f16</a>(a0l, b_col));</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160; </div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                    matrix_b += 4 * in_b_stride;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                }</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160; </div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                float16_t acc =</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                    vget_lane_f16(vacc, 0) + vget_lane_f16(vacc, 1) + vget_lane_f16(vacc, 2) + vget_lane_f16(vacc, 3);</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160; </div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                <span class="keywordflow">for</span> (; vec_a &lt; vec_a_end_addr; ++vec_a)</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                {</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                    <span class="keyword">const</span> float16_t a0  = *vec_a;</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                    <span class="keyword">const</span> float16_t b00 = *matrix_b;</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160; </div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                    acc += b00 * a0;</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160; </div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                    matrix_b += in_b_stride;</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                }</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160; </div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                <span class="comment">// Multiply by the weight of matrix product (alpha)</span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                <span class="keywordflow">if</span> (multiply_alpha)</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                {</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                    acc *= <span class="keyword">static_cast&lt;</span>float16_t<span class="keyword">&gt;</span>(alpha);</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                }</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160; </div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                <span class="keyword">auto</span> vec_out = <span class="keyword">reinterpret_cast&lt;</span>float16_t *<span class="keyword">&gt;</span>(out.ptr()) + x;</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160; </div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                *(vec_out) = acc;</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;            }</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        },</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        ina, inb, out);</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;}</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160; </div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="keywordtype">void</span> matrix_matrix_multiply_f16(</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="keyword">const</span> ITensor *lhs, <span class="keyword">const</span> ITensor *rhs, ITensor *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, <span class="keyword">const</span> Window &amp;window, <span class="keyword">const</span> ThreadInfo &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>, <span class="keywordtype">float</span> alpha)</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;{</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    out_width   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;dimension(0));</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    out_height  = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;dimension(1));</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> in_b_stride = rhs-&gt;info()-&gt;strides_in_bytes()[1] / <a class="code" href="namespacearm__compute.xhtml#abb7e0f23a4f2e63f39433f158dad47ab">data_size_from_type</a>(rhs-&gt;info()-&gt;data_type());</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> out_stride  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;strides_in_bytes()[1] / <a class="code" href="namespacearm__compute.xhtml#abb7e0f23a4f2e63f39433f158dad47ab">data_size_from_type</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;data_type());</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    num_elems_matrix_b_x = rhs-&gt;info()-&gt;dimension(0);</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160; </div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="comment">// Set step_x and step_y for matrix A. Scale by a factor of 4 the Y range as the input interleaved matrix A has 4 times less the rows of the dst matrix</span></div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    Window win_a(window);</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    win_a.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 0, 0));</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    win_a.set(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, Window::Dimension(window.y().start() / 4, std::max(window.y().end() / 4, 1), 1));</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160; </div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    Window win_b;</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="comment">// Don&#39;t slice matrix B along the z dimension if matrix B has just 2 dimensions and matrix A more than 2</span></div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="comment">// This scenario can happen when the the matrix multiplication is used to perform a convolution operation</span></div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keywordflow">if</span> (rhs-&gt;info()-&gt;num_dimensions() &gt;= 3)</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    {</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        win_b = window;</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    }</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="comment">// Set step_x and step_y for matrix B. Scale by a factor of 8 the X range as the input transposed matrix A has 8 times less the cols of the dst matrix</span></div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    win_b.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(window.x().start() / 8, window.x().end() / 8, in_b_stride));</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    win_b.set(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, Window::Dimension(0, 0, 0));</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160; </div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    Iterator ina(lhs, win_a);</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    Iterator inb(rhs, win_b);</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    Iterator out(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, window);</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160; </div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> multiply_alpha = !(<a class="code" href="namespacearm__compute_1_1helpers_1_1float__ops.xhtml#ab2dcf325d146568ecc8d4a4bd36c02ac">helpers::float_ops::is_one</a>(alpha));</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160; </div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <span class="keyword">const</span> float16x8_t alpha_f16 = vdupq_n_f16(alpha);</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160; </div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        window,</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        {</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>   *mtx_a0  = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>float16_t *<span class="keyword">&gt;</span>(ina.ptr());</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>   *mtx_b0  = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>float16_t *<span class="keyword">&gt;</span>(inb.ptr());</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;            <span class="keyword">auto</span>         *mtx_out = <span class="keyword">reinterpret_cast&lt;</span>float16_t *<span class="keyword">&gt;</span>(out.ptr());</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;            float16x8x4_t c       = {{vdupq_n_f16(0.f), vdupq_n_f16(0.f), vdupq_n_f16(0.f), vdupq_n_f16(0.f)}};</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160; </div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;            <span class="comment">/*</span></div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="comment">        This kernel puts the values in a 4x4 block of Matrix A on the same row (Interleaved values)</span></div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="comment">             |a00 a01 a02 a03 | a04 a05 a06 a07|</span></div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="comment">             |a10 a11 a12 a13 | a14 a15 a16 a17|</span></div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="comment">             |a20 a21 a22 a23 | a24 a25 a26 a27| = | a00 a10 a20 a30 || a01 a11 a21 a31 || a02 a12 a22 a32 || a03 a13 a23 a33 | a40 a50 a60 a70 | ...</span></div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="comment">             |a30 a31 a32 a33 | a34 a35 a36 a37|   | a04 a14 a24 a34 || a05 a15 a25 a35 || a06 a15 a26 a36 || a07 a17 a27 a37 | a44 a54 a64 a74 | ...</span></div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="comment">             |a40 a41 a42 a43 | a44 a45 a46 a47|</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="comment">             |a50 a51 a52 a53 | a54 a55 a56 a57|</span></div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="comment">             |a60 a61 a62 a63 | a64 a65 a66 a67|</span></div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="comment">             |a70 a71 a72 a73 | a74 a75 a76 a77|</span></div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="comment">             After this operation, the dst matrix will have the following shape: [ height * 4, width / 4 ]</span></div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="comment">        B Matrix has been transposed as shown below</span></div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="comment">           |b00 b01 b02 b03 b04 b05 b06 b07|</span></div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="comment">           |b10 b11 b12 b13 b14 b15 b16 b17|</span></div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="comment">           |b20 b21 b22 b23 b24 b25 b26 b27|</span></div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="comment">           |b30 b31 b32 b33 b34 b35 b36 b37|</span></div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="comment">          -------------------&gt;</span></div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="comment">           |b00 b01 b02 b03 b04 b05 b06 b07||b10 b11 b12 b13 b14 b15 b16 b17||b20 b21 b22 b23 b24 b25 b26 b27||b30 b31 b32 b33 b34 b35 b36 b37|</span></div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;<span class="comment">            c.val[0][0] = a00*b00 + a01*b10 + a02*b20 + a03*b30</span></div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;<span class="comment">            c.val[0][1] = a00*b01 + a01*b11 + a02*b21 + a03*b31</span></div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="comment">        The size of the dst tensor&#39;s XY-plane must be the following shape [ width * 8, height / 8 ]. All other dimensions must have the same size.</span></div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="comment">        */</span></div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;            <span class="keyword">const</span> float16_t *mtx_b0_end_addr = mtx_b0 + num_elems_matrix_b_x;</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160; </div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;            <span class="keywordflow">for</span> (; mtx_b0 &lt;= (mtx_b0_end_addr - 32);)</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160; </div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;            {</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                <span class="keyword">const</span> float16x8_t p00 = vld1q_f16(mtx_a0);</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                <span class="keyword">const</span> float16x8_t p02 = vld1q_f16(mtx_a0 + 8);</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160; </div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                <span class="keyword">const</span> float16x8_t q00 = vld1q_f16(mtx_b0);</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                <span class="keyword">const</span> float16x8_t q02 = vld1q_f16(mtx_b0 + 8);</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                <span class="keyword">const</span> float16x8_t q04 = vld1q_f16(mtx_b0 + 16);</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                <span class="keyword">const</span> float16x8_t q06 = vld1q_f16(mtx_b0 + 24);</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160; </div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                c.val[0] = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(c.val[0], <a class="code" href="clang-tidy_8h.xhtml#a38b04f8501774694c5f12d7c65f5a886">vmulq_n_f16</a>(q00, vgetq_lane_f16(p00, 0)));</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                c.val[1] = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(c.val[1], <a class="code" href="clang-tidy_8h.xhtml#a38b04f8501774694c5f12d7c65f5a886">vmulq_n_f16</a>(q00, vgetq_lane_f16(p00, 1)));</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                c.val[2] = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(c.val[2], <a class="code" href="clang-tidy_8h.xhtml#a38b04f8501774694c5f12d7c65f5a886">vmulq_n_f16</a>(q00, vgetq_lane_f16(p00, 2)));</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                c.val[3] = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(c.val[3], <a class="code" href="clang-tidy_8h.xhtml#a38b04f8501774694c5f12d7c65f5a886">vmulq_n_f16</a>(q00, vgetq_lane_f16(p00, 3)));</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160; </div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;                c.val[0] = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(c.val[0], <a class="code" href="clang-tidy_8h.xhtml#a38b04f8501774694c5f12d7c65f5a886">vmulq_n_f16</a>(q02, vgetq_lane_f16(p00, 4)));</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;                c.val[1] = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(c.val[1], <a class="code" href="clang-tidy_8h.xhtml#a38b04f8501774694c5f12d7c65f5a886">vmulq_n_f16</a>(q02, vgetq_lane_f16(p00, 5)));</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;                c.val[2] = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(c.val[2], <a class="code" href="clang-tidy_8h.xhtml#a38b04f8501774694c5f12d7c65f5a886">vmulq_n_f16</a>(q02, vgetq_lane_f16(p00, 6)));</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                c.val[3] = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(c.val[3], <a class="code" href="clang-tidy_8h.xhtml#a38b04f8501774694c5f12d7c65f5a886">vmulq_n_f16</a>(q02, vgetq_lane_f16(p00, 7)));</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160; </div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                c.val[0] = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(c.val[0], <a class="code" href="clang-tidy_8h.xhtml#a38b04f8501774694c5f12d7c65f5a886">vmulq_n_f16</a>(q04, vgetq_lane_f16(p02, 0)));</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;                c.val[1] = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(c.val[1], <a class="code" href="clang-tidy_8h.xhtml#a38b04f8501774694c5f12d7c65f5a886">vmulq_n_f16</a>(q04, vgetq_lane_f16(p02, 1)));</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;                c.val[2] = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(c.val[2], <a class="code" href="clang-tidy_8h.xhtml#a38b04f8501774694c5f12d7c65f5a886">vmulq_n_f16</a>(q04, vgetq_lane_f16(p02, 2)));</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                c.val[3] = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(c.val[3], <a class="code" href="clang-tidy_8h.xhtml#a38b04f8501774694c5f12d7c65f5a886">vmulq_n_f16</a>(q04, vgetq_lane_f16(p02, 3)));</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160; </div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                c.val[0] = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(c.val[0], <a class="code" href="clang-tidy_8h.xhtml#a38b04f8501774694c5f12d7c65f5a886">vmulq_n_f16</a>(q06, vgetq_lane_f16(p02, 4)));</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                c.val[1] = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(c.val[1], <a class="code" href="clang-tidy_8h.xhtml#a38b04f8501774694c5f12d7c65f5a886">vmulq_n_f16</a>(q06, vgetq_lane_f16(p02, 5)));</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                c.val[2] = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(c.val[2], <a class="code" href="clang-tidy_8h.xhtml#a38b04f8501774694c5f12d7c65f5a886">vmulq_n_f16</a>(q06, vgetq_lane_f16(p02, 6)));</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;                c.val[3] = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(c.val[3], <a class="code" href="clang-tidy_8h.xhtml#a38b04f8501774694c5f12d7c65f5a886">vmulq_n_f16</a>(q06, vgetq_lane_f16(p02, 7)));</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160; </div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                mtx_a0 += 16;</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                mtx_b0 += 32;</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;            }</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160; </div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;            <span class="keywordflow">for</span> (; mtx_b0 &lt; mtx_b0_end_addr;)</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160; </div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;            {</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                <span class="keyword">const</span> float16x4_t p00 = vld1_f16(mtx_a0);</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                <span class="keyword">const</span> float16x8_t q00 = vld1q_f16(mtx_b0);</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160; </div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                c.val[0] = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(c.val[0], <a class="code" href="clang-tidy_8h.xhtml#a38b04f8501774694c5f12d7c65f5a886">vmulq_n_f16</a>(q00, vget_lane_f16(p00, 0)));</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                c.val[1] = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(c.val[1], <a class="code" href="clang-tidy_8h.xhtml#a38b04f8501774694c5f12d7c65f5a886">vmulq_n_f16</a>(q00, vget_lane_f16(p00, 1)));</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                c.val[2] = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(c.val[2], <a class="code" href="clang-tidy_8h.xhtml#a38b04f8501774694c5f12d7c65f5a886">vmulq_n_f16</a>(q00, vget_lane_f16(p00, 2)));</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                c.val[3] = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(c.val[3], <a class="code" href="clang-tidy_8h.xhtml#a38b04f8501774694c5f12d7c65f5a886">vmulq_n_f16</a>(q00, vget_lane_f16(p00, 3)));</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160; </div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                mtx_a0 += 4;</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                mtx_b0 += 8;</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;            }</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160; </div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;            <span class="keywordflow">if</span> (multiply_alpha)</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;            {</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                c.val[0] = <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(c.val[0], alpha_f16);</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                c.val[1] = <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(c.val[1], alpha_f16);</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                c.val[2] = <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(c.val[2], alpha_f16);</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                c.val[3] = <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(c.val[3], alpha_f16);</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;            }</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160; </div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;            <span class="keywordflow">if</span> (<span class="keywordtype">id</span>.x() &lt; (out_width - 8))</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;            {</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                vst1q_f16(mtx_out, c.val[0]);</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                <span class="keywordflow">if</span> (<span class="keywordtype">id</span>.y() + 1 &lt; out_height)</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                {</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                    vst1q_f16(mtx_out + 1 * out_stride, c.val[1]);</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                    <span class="keywordflow">if</span> (<span class="keywordtype">id</span>.y() + 2 &lt; out_height)</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                    {</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                        vst1q_f16(mtx_out + 2 * out_stride, c.val[2]);</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                        <span class="keywordflow">if</span> (<span class="keywordtype">id</span>.y() + 3 &lt; out_height)</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                        {</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;                            vst1q_f16(mtx_out + 3 * out_stride, c.val[3]);</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;                        }</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;                    }</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;                }</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;            }</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;            {</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                <span class="comment">// Left-over columns</span></div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> columns_left = out_width - <span class="keywordtype">id</span>.x();</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> x = 0; x &lt; columns_left; ++x)</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;                {</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;                    *(mtx_out + x) = c.val[0][x];</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                    if (<span class="keywordtype">id</span>.y() + 1 &lt; out_height)</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                    {</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                        *(mtx_out + x + 1 * out_stride) = c.val[1][x];</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                        if (<span class="keywordtype">id</span>.y() + 2 &lt; out_height)</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                        {</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                            *(mtx_out + x + 2 * out_stride) = c.val[2][x];</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                            if (<span class="keywordtype">id</span>.y() + 3 &lt; out_height)</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                            {</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                                *(mtx_out + x + 3 * out_stride) = c.val[3][x];</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;                            }</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                        }</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                    }</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                }</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;            }</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;        },</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;        ina, inb, out);</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;}</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160; </div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#ad21abd99f7f0339e68cd6106229a06e6">neon_fp16_gemm_matrix_mul</a>(<span class="keyword">const</span> ITensor    *lhs,</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;                               <span class="keyword">const</span> ITensor    *rhs,</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                               ITensor          *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>,</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;                               <span class="keyword">const</span> Window     &amp;window,</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;                               <span class="keyword">const</span> ThreadInfo &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>,</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                               <span class="keywordtype">float</span>             alpha,</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;                               <span class="keyword">const</span> <span class="keywordtype">bool</span>        is_dst_vector)</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;{</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    <span class="keywordflow">return</span> (is_dst_vector) ? vector_matrix_multiply_f16(lhs, rhs, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, window, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>, alpha)</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;                           : matrix_matrix_multiply_f16(lhs, rhs, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, window, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>, alpha);</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;}</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;} <span class="comment">// namespace cpu</span></div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;} <span class="comment">// namespace arm_compute</span></div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;<span class="preprocessor">#endif //__ARM_FEATURE_FP16_VECTOR_ARITHMETIC</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_ad21abd99f7f0339e68cd6106229a06e6"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#ad21abd99f7f0339e68cd6106229a06e6">arm_compute::cpu::neon_fp16_gemm_matrix_mul</a></div><div class="ttdeci">void neon_fp16_gemm_matrix_mul(const ITensor *lhs, const ITensor *rhs, ITensor *dst, const Window &amp;window, const ThreadInfo &amp;info, float alpha, const bool is_dst_vector)</div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_aa96e81276ee4f87ab386cd05a5539a7d"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">arm_compute::Window::DimX</a></div><div class="ttdeci">static constexpr size_t DimX</div><div class="ttdoc">Alias for dimension 0 also known as X dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00043">Window.h:43</a></div></div>
<div class="ttc" id="aclang-tidy_8h_xhtml_a2c2032af67addd543930e3027b04e8d4"><div class="ttname"><a href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a></div><div class="ttdeci">float16x8_t vmulq_f16(float16x8_t, float16x8_t)</div><div class="ttdef"><b>Definition:</b> <a href="clang-tidy_8h_source.xhtml#l00085">clang-tidy.h:85</a></div></div>
<div class="ttc" id="afloat__ops_8h_xhtml"><div class="ttname"><a href="float__ops_8h.xhtml">float_ops.h</a></div></div>
<div class="ttc" id="aclang-tidy_8h_xhtml_a02bbbedd1ea200543e093cdf593fe6c6"><div class="ttname"><a href="clang-tidy_8h.xhtml#a02bbbedd1ea200543e093cdf593fe6c6">vmul_f16</a></div><div class="ttdeci">float16x4_t vmul_f16(float16x4_t, float16x4_t)</div><div class="ttdef"><b>Definition:</b> <a href="clang-tidy_8h_source.xhtml#l00035">clang-tidy.h:35</a></div></div>
<div class="ttc" id="aclang-tidy_8h_xhtml_a38b04f8501774694c5f12d7c65f5a886"><div class="ttname"><a href="clang-tidy_8h.xhtml#a38b04f8501774694c5f12d7c65f5a886">vmulq_n_f16</a></div><div class="ttdeci">float16x8_t vmulq_n_f16(float16x8_t, float16_t)</div><div class="ttdef"><b>Definition:</b> <a href="clang-tidy_8h_source.xhtml#l00090">clang-tidy.h:90</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_abb7e0f23a4f2e63f39433f158dad47ab"><div class="ttname"><a href="namespacearm__compute.xhtml#abb7e0f23a4f2e63f39433f158dad47ab">arm_compute::data_size_from_type</a></div><div class="ttdeci">size_t data_size_from_type(DataType data_type)</div><div class="ttdoc">The size in bytes of the data type.</div><div class="ttdef"><b>Definition:</b> <a href="_data_type_utils_8h_source.xhtml#l00038">DataTypeUtils.h:38</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a6c0dcc38187027dcb89cd9724bc5a823"><div class="ttname"><a href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;...iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00074">Helpers.inl:74</a></div></div>
<div class="ttc" id="agemm__matrix__mul_2generic_2neon_2impl_8h_xhtml"><div class="ttname"><a href="gemm__matrix__mul_2generic_2neon_2impl_8h.xhtml">impl.h</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a0b0eb3235749a2909dc5a101afe59a1b"><div class="ttname"><a href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond, msg)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00456">Error.h:456</a></div></div>
<div class="ttc" id="aclang-tidy_8h_xhtml_aaa649bddcba28ddb5911a675312e0024"><div class="ttname"><a href="clang-tidy_8h.xhtml#aaa649bddcba28ddb5911a675312e0024">vmulq_lane_f16</a></div><div class="ttdeci">float16x8_t vmulq_lane_f16(float16x8_t, float16x4_t, const int)</div><div class="ttdef"><b>Definition:</b> <a href="clang-tidy_8h_source.xhtml#l00030">clang-tidy.h:30</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00151">Error.h:151</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_ad2d402364fa822b0b7775081291eeca9"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">arm_compute::Window::DimY</a></div><div class="ttdeci">static constexpr size_t DimY</div><div class="ttdoc">Alias for dimension 1 also known as Y dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00045">Window.h:45</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ab237a0a375cf382d52b61653248d3d4a"><div class="ttname"><a href="namespacearm__compute.xhtml#ab237a0a375cf382d52b61653248d3d4a">arm_compute::ceil_to_multiple</a></div><div class="ttdeci">auto ceil_to_multiple(S value, T divisor) -&gt; decltype(((value+divisor - 1)/divisor) *divisor)</div><div class="ttdoc">Computes the smallest number larger or equal to value that is a multiple of divisor.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2utils_2math_2_math_8h_source.xhtml#l00050">Math.h:50</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2023 Arm Limited.</div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_ac57b92957968088a392021cac1d2076b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a></div><div class="ttdeci">ScaleKernelInfo info(interpolation_policy, default_border_mode, PixelValue(), sampling_policy, false)</div></div>
<div class="ttc" id="anamespacearm__compute_1_1helpers_1_1float__ops_xhtml_ab2dcf325d146568ecc8d4a4bd36c02ac"><div class="ttname"><a href="namespacearm__compute_1_1helpers_1_1float__ops.xhtml#ab2dcf325d146568ecc8d4a4bd36c02ac">arm_compute::helpers::float_ops::is_one</a></div><div class="ttdeci">bool is_one(float a, float epsilon=0.00001f)</div><div class="ttdoc">Checks if the input floating point number is 1.0f checking if the difference is within a range define...</div><div class="ttdef"><b>Definition:</b> <a href="float__ops_8h_source.xhtml#l00100">float_ops.h:100</a></div></div>
<div class="ttc" id="aclang-tidy_8h_xhtml_a608fb0db3de44492fcc96a836eadf11b"><div class="ttname"><a href="clang-tidy_8h.xhtml#a608fb0db3de44492fcc96a836eadf11b">vadd_f16</a></div><div class="ttdeci">float16x4_t vadd_f16(float16x4_t, float16x4_t)</div><div class="ttdef"><b>Definition:</b> <a href="clang-tidy_8h_source.xhtml#l00040">clang-tidy.h:40</a></div></div>
<div class="ttc" id="aclang-tidy_8h_xhtml_a79c9aca60e8cf347407d072168faf2aa"><div class="ttname"><a href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a></div><div class="ttdeci">float16x8_t vaddq_f16(float16x8_t, float16x8_t)</div><div class="ttdef"><b>Definition:</b> <a href="clang-tidy_8h_source.xhtml#l00075">clang-tidy.h:75</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_2c61f424fd391396db977702a2beee9a.xhtml">cpu</a></li><li class="navelem"><a class="el" href="dir_1de7bcbbdec2bf3559cb3c688662d4f5.xhtml">kernels</a></li><li class="navelem"><a class="el" href="dir_8354fc0b23f39599911bbf22ba8bc0a8.xhtml">gemm_matrix_mul</a></li><li class="navelem"><a class="el" href="dir_33c70755c1e4957d99691c84bf942700.xhtml">generic</a></li><li class="navelem"><a class="el" href="dir_6c223c3726c70a771aeef76d364f5cb2.xhtml">neon</a></li><li class="navelem"><a class="el" href="cpu_2kernels_2gemm__matrix__mul_2generic_2neon_2fp16_8cpp.xhtml">fp16.cpp</a></li>
    <li class="footer">Generated on Tue Nov 21 2023 16:31:02 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
