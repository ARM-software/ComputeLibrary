<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/cpu/kernels/softmax/generic/neon/impl.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.06</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('softmax_2generic_2neon_2impl_8cpp_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">impl.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="softmax_2generic_2neon_2impl_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2021-2024 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="softmax_2generic_2neon_2impl_8h.xhtml">src/cpu/kernels/softmax/generic/neon/impl.h</a>&quot;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160; </div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_saturate_cast_8h.xhtml">support/SaturateCast.h</a>&quot;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160; </div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;{</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keyword">namespace </span>cpu</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;{</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> IS_LOG&gt;</div>
<div class="line"><a name="l00033"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a1c458f6616fcb859a32d7cf5e8ff217f">   33</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a1c458f6616fcb859a32d7cf5e8ff217f">neon_softmax_x_quantized</a>(</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, <span class="keywordtype">void</span> *<span class="keyword">const</span> tmp, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, <span class="keywordtype">float</span> beta, <span class="keywordtype">int</span> axis, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(axis);</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160; </div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    static_assert(std::is_same&lt;T, qasymm8_t&gt;::value || std::is_same&lt;T, qasymm8_signed_t&gt;::value,</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;                  <span class="stringliteral">&quot;quantized type should be either qasymm8_t or qasymm8_signed_t.&quot;</span>);</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160; </div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_width = in-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a74dfd07380a290c34fe7c8e065029b95">valid_region</a>().<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">shape</a>.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">x</a>();</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160; </div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>       scale_beta     = -beta * in-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">quantization_info</a>().<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>().<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a>;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keyword">const</span> float32x4_t scale_beta_vec = vdupq_n_f32(scale_beta);</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160; </div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> in_it(in, window);</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> out_it(out, window);</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160; </div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    constexpr <span class="keywordtype">int</span> vec_size = 16;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160; </div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="preprocessor">#ifndef __aarch64__</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> sum_stages = log2(vec_size &gt;&gt; 1);</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="preprocessor">#endif // __aarch64__</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160; </div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keyword">using</span> ExactTagType = <span class="keyword">typename</span> <a class="code" href="namespacearm__compute_1_1wrapper_1_1traits.xhtml#acf6b3be295be8dbd7897536bcd7561a3">wrapper::traits::neon_bitvector_tag_t&lt;T, wrapper::traits::BitWidth::W128&gt;</a>;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160; </div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        window,</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;)</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        {</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;            <span class="comment">/* Get pointers */</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            <span class="keyword">const</span> T *in_ptr  = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_it.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>());</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            T       *out_ptr = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out_it.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>());</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            <span class="keywordtype">float</span>   *tmp_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(tmp);</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160; </div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            T max_val;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160; </div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            <span class="comment">/* Compute Max */</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            {</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                <span class="comment">// Init max value</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                <span class="keyword">auto</span> vec_max = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(support::cpp11::lowest&lt;T&gt;(), ExactTagType{});</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                <span class="keywordtype">int</span>  x       = 0;</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160; </div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                <span class="keywordflow">for</span> (; x &lt;= (input_width - vec_size); x += vec_size)</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                {</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> current_value = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(in_ptr + x);</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                    vec_max                  = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">wrapper::vmax</a>(vec_max, current_value);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                }</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160; </div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                max_val = wrapper::vmaxv(vec_max);</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="preprocessor">#else  // __aarch64__</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                <span class="keyword">auto</span> carry_max = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ab799fd9cd5fc5989593e69c55bc400f9">wrapper::vpmax</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(vec_max), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(vec_max));</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160; </div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; sum_stages; ++i)</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                {</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                    carry_max = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ab799fd9cd5fc5989593e69c55bc400f9">wrapper::vpmax</a>(carry_max, carry_max);</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                }</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160; </div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                max_val      = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">wrapper::vgetlane</a>(carry_max, 0);</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="preprocessor">#endif // __aarch64__</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160; </div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                <span class="comment">// Compute left-over elements</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                <span class="keywordflow">for</span> (; x &lt; input_width; ++x)</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                {</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                    max_val = std::max(*(in_ptr + x), max_val);</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                }</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            } <span class="comment">// Compute Max</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160; </div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            <span class="keywordtype">float</span> sum_transformed{};</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160; </div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            <span class="comment">/* Compute exponentials and sum */</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            {</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                <span class="comment">/* Get max value */</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> vec_max = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(max_val, <a class="code" href="structarm__compute_1_1wrapper_1_1traits_1_1vector__128__tag.xhtml">wrapper::traits::vector_128_tag</a>{});</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160; </div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                <span class="comment">/* Init sum to zero */</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                float32x4x4_t vec_sum = {</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                    vdupq_n_f32(0.f),</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                    vdupq_n_f32(0.f),</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                    vdupq_n_f32(0.f),</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                    vdupq_n_f32(0.f),</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                };</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160; </div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                <span class="comment">/* Loop over row and compute exponentials and sum */</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                <span class="keywordtype">int</span> x = 0;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                <span class="keywordflow">for</span> (; x &lt;= (input_width - vec_size); x += vec_size)</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                {</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                    <span class="keyword">auto</span> vec_elements              = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(in_ptr + x);</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                    vec_elements                   = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a5e5f2a88728fcb05b92a1291fa7fd7ea">wrapper::vqsub</a>(vec_max, vec_elements);</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                    float32x4x4_t vec_elements_flt = convert_int_to_float&lt;float32x4x4_t&gt;(vec_elements);</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160; </div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                    <span class="keywordflow">if</span> (IS_LOG)</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                    {</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                        vec_elements_flt.val[0] = vmulq_f32(vec_elements_flt.val[0], scale_beta_vec);</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                        vec_elements_flt.val[1] = vmulq_f32(vec_elements_flt.val[1], scale_beta_vec);</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                        vec_elements_flt.val[2] = vmulq_f32(vec_elements_flt.val[2], scale_beta_vec);</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                        vec_elements_flt.val[3] = vmulq_f32(vec_elements_flt.val[3], scale_beta_vec);</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                        vec_sum.val[0]          = vaddq_f32(vec_sum.val[0], <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vec_elements_flt.val[0]));</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                        vec_sum.val[1]          = vaddq_f32(vec_sum.val[1], <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vec_elements_flt.val[1]));</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                        vec_sum.val[2]          = vaddq_f32(vec_sum.val[2], <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vec_elements_flt.val[2]));</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                        vec_sum.val[3]          = vaddq_f32(vec_sum.val[3], <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vec_elements_flt.val[3]));</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                    }</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                    {</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                        vec_elements_flt.val[0] = <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vmulq_f32(vec_elements_flt.val[0], scale_beta_vec));</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                        vec_elements_flt.val[1] = <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vmulq_f32(vec_elements_flt.val[1], scale_beta_vec));</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                        vec_elements_flt.val[2] = <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vmulq_f32(vec_elements_flt.val[2], scale_beta_vec));</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                        vec_elements_flt.val[3] = <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vmulq_f32(vec_elements_flt.val[3], scale_beta_vec));</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                        vec_sum.val[0]          = vaddq_f32(vec_sum.val[0], vec_elements_flt.val[0]);</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                        vec_sum.val[1]          = vaddq_f32(vec_sum.val[1], vec_elements_flt.val[1]);</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                        vec_sum.val[2]          = vaddq_f32(vec_sum.val[2], vec_elements_flt.val[2]);</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                        vec_sum.val[3]          = vaddq_f32(vec_sum.val[3], vec_elements_flt.val[3]);</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                    }</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160; </div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                    vst4q_f32(tmp_ptr + x, vec_elements_flt);</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                }</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160; </div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                <span class="comment">/* Reduce sum */</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                <span class="keyword">const</span> float32x4_t sum_16_byte =</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                    vaddq_f32(vaddq_f32(vec_sum.val[0], vec_sum.val[1]), vaddq_f32(vec_sum.val[2], vec_sum.val[3]));</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160; </div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                <span class="keywordtype">float</span> sum;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160; </div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                sum = wrapper::vaddv(sum_16_byte);</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="preprocessor">#else  // __aarch64__</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                <span class="keyword">auto</span> sum_res = vpadd_f32(vget_high_f32(sum_16_byte), vget_low_f32(sum_16_byte));</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                sum_res      = vpadd_f32(sum_res, sum_res);</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                sum          = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">wrapper::vgetlane</a>(sum_res, 0);</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="preprocessor">#endif // __aarch64__</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160; </div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                <span class="comment">/* Run remaining elements */</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                <span class="keywordflow">for</span> (; x &lt; input_width; ++x)</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                {</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                    <span class="keywordtype">float</span> element{};</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                    <span class="keywordflow">if</span> (IS_LOG)</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                    {</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                        element = (max_val - in_ptr[x]) * scale_beta;</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                        sum += std::exp(element);</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                    }</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                    {</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                        element = std::exp((max_val - in_ptr[x]) * scale_beta);</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                        sum += element;</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                    }</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160; </div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                    tmp_ptr[x] = element;</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                }</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160; </div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                <span class="keywordflow">if</span> (!IS_LOG)</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                {</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                    sum_transformed = 256.f / sum;</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                }</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                {</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                    sum_transformed = std::log(sum);</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                }</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            } <span class="comment">// Compute exponentials and sum</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160; </div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            <span class="comment">/* Normalize exponentials */</span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            {</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                constexpr <span class="keywordtype">bool</span> is_qasymm8_signed = std::is_same&lt;T, qasymm8_signed_t&gt;::value;</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160; </div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                <span class="keyword">const</span> float32x4_t sum_vec = vdupq_n_f32(sum_transformed);</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160; </div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                <span class="comment">/* Loop over row and compute softmax */</span></div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                <span class="keywordtype">int</span> x = 0;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                <span class="keywordflow">for</span> (; x &lt;= (input_width - vec_size); x += vec_size)</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                {</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                    <span class="keyword">using</span> int_vec_type   = <a class="code" href="namespacearm__compute_1_1wrapper_1_1traits.xhtml#a20782de3fa029b3c94a67c493f7cb6b9">wrapper::traits::neon_vector_t&lt;T, 16&gt;</a>;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                    float32x4x4_t vec_in = vld4q_f32(tmp_ptr + x);</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                    int_vec_type  normalized_value{};</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                    <span class="keywordflow">if</span> (IS_LOG)</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                    {</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                        <span class="keyword">const</span> float32x4x4_t sub = {</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                            vsubq_f32(vec_in.val[0], sum_vec),</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                            vsubq_f32(vec_in.val[1], sum_vec),</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                            vsubq_f32(vec_in.val[2], sum_vec),</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                            vsubq_f32(vec_in.val[3], sum_vec),</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                        };</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                        normalized_value = convert_float_to_int&lt;float32x4x4_t, int_vec_type&gt;(sub);</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                    }</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                    {</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                        float32x4x4_t mul = {</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                            vmulq_f32(vec_in.val[0], sum_vec),</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                            vmulq_f32(vec_in.val[1], sum_vec),</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                            vmulq_f32(vec_in.val[2], sum_vec),</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                            vmulq_f32(vec_in.val[3], sum_vec),</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                        };</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160; </div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                        <span class="keywordflow">if</span> (is_qasymm8_signed)</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                        {</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                            <span class="keyword">const</span> <span class="keyword">auto</span> offset_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(128.f, <a class="code" href="structarm__compute_1_1wrapper_1_1traits_1_1vector__128__tag.xhtml">wrapper::traits::vector_128_tag</a>{});</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                            mul.val[0]            = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(mul.val[0], offset_vec);</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                            mul.val[1]            = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(mul.val[1], offset_vec);</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                            mul.val[2]            = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(mul.val[2], offset_vec);</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                            mul.val[3]            = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(mul.val[3], offset_vec);</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                        }</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160; </div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                        normalized_value = convert_float_to_int&lt;float32x4x4_t, int_vec_type&gt;(mul);</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                    }</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                    <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(out_ptr + x, normalized_value);</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                }</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                <span class="comment">/* Run remaining elements */</span></div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                <span class="keywordflow">for</span> (; x &lt; input_width; ++x)</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                {</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                    <span class="keywordflow">if</span> (IS_LOG)</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                    {</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                        out_ptr[x] = utils::cast::saturate_cast&lt;T&gt;(tmp_ptr[x] - sum_transformed);</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                    }</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                    {</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                        out_ptr[x] = utils::cast::saturate_cast&lt;T&gt;((tmp_ptr[x] * sum_transformed) -</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                                                                   (is_qasymm8_signed ? 128.f : 0));</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                    }</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                }</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;            } <span class="comment">// Normalize exponentials</span></div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        },</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        in_it, out_it);</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;}</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160; </div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> IS_LOG&gt;</div>
<div class="line"><a name="l00255"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a9021da1d85f0769fe8304a4004d52b36">  255</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a9021da1d85f0769fe8304a4004d52b36">neon_softmax_non_x_quantized</a>(</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, <span class="keywordtype">void</span> *<span class="keyword">const</span> tmp, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, <span class="keywordtype">float</span> beta, <span class="keywordtype">int</span> axis, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;{</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    static_assert(std::is_same&lt;T, qasymm8_t&gt;::value || std::is_same&lt;T, qasymm8_signed_t&gt;::value,</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                  <span class="stringliteral">&quot;quantized type should be either qasymm8_t or qasymm8_signed_t.&quot;</span>);</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160; </div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>       scale_beta     = -beta * in-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">quantization_info</a>().<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>().<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a>;</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="keyword">const</span> float32x4_t scale_beta_vec = vdupq_n_f32(scale_beta);</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160; </div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> in_it(in, window);</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> out_it(out, window);</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="comment">    /** SIMD vector tag type. */</span></div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <span class="keyword">using</span> ExactTagType = <span class="keyword">typename</span> <a class="code" href="namespacearm__compute_1_1wrapper_1_1traits.xhtml#acf6b3be295be8dbd7897536bcd7561a3">wrapper::traits::neon_bitvector_tag_t&lt;T, wrapper::traits::BitWidth::W128&gt;</a>;</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160; </div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    constexpr <span class="keywordtype">int</span>      vec_size        = 16;</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *in_info         = in-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>();</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *out_info        = out-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>();</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>          x_width         = in_info-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a74dfd07380a290c34fe7c8e065029b95">valid_region</a>().<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">shape</a>.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">x</a>();</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>          in_axis_stride  = in_info-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">strides_in_bytes</a>()[axis];</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>          out_axis_stride = out_info-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">strides_in_bytes</a>()[axis];</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>          tmp_axis_stride = in_axis_stride;</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>          axis_width      = in_info-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(axis);</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>          end_actual      = std::min(window[0].<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>(), x_width);</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160; </div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        window,</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;winCoords)</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        {</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">bool</span> vector_exceeds_bounds = ((winCoords[0] + vec_size) &gt; end_actual);</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160; </div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;            <span class="keywordtype">int</span> num_remaining         = (end_actual - winCoords[0]);</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;            <span class="keywordtype">int</span> num_remaining_full    = num_remaining / 4;</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;            <span class="keywordtype">int</span> num_remaining_partial = num_remaining % 4;</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160; </div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;            <span class="comment">/* Get pointers */</span></div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;            <span class="keyword">const</span> uint8_t *in_ptr  = in_it.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>();</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;            uint8_t       *out_ptr = out_it.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>();</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;            uint8_t       *tmp_ptr = <span class="keyword">reinterpret_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(tmp);</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160; </div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;            <span class="keyword">auto</span> vec_max = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(support::cpp11::lowest&lt;T&gt;(), ExactTagType{});</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160; </div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;            <span class="comment">/* Compute Max */</span></div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;            {</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                <span class="keywordflow">if</span> (!vector_exceeds_bounds)</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                {</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                    <span class="keywordtype">int</span> i = 0;</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                    <span class="keywordflow">for</span> (; i &lt; axis_width; ++i)</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                    {</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> current_value =</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                            <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>((i * in_axis_stride) + <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr));</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                        vec_max = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">wrapper::vmax</a>(vec_max, current_value);</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                    }</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                }</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                {</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                    <span class="keywordtype">int</span> i = 0;</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                    <span class="keywordflow">for</span> (; i &lt; axis_width; ++i)</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                    {</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                        <span class="keyword">const</span> T *<span class="keyword">const</span> base_ptr_in = ((i * in_axis_stride) + <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr));</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                        <span class="keywordtype">int</span>            j           = 0;</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                        <span class="keywordflow">for</span> (; j &lt; num_remaining; ++j)</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                        {</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                            <span class="keyword">const</span> T current_value = *(base_ptr_in + j);</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                            vec_max[j]            = std::max(vec_max[j], current_value);</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                        }</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;                    }</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;                }</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;            } <span class="comment">// Compute Max</span></div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160; </div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;            float32x4x4_t vec_sum_transformed = {</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;                vdupq_n_f32(0.f),</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                vdupq_n_f32(0.f),</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;                vdupq_n_f32(0.f),</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;                vdupq_n_f32(0.f),</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;            };</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160; </div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;            <span class="comment">/* Compute exponentials and sum */</span></div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;            {</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                <span class="comment">/* Init sum to zero */</span></div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;                float32x4x4_t vec_sum = vec_sum_transformed;</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160; </div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                <span class="keyword">auto</span> vec_elements = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(0), ExactTagType{});</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160; </div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                float32x4x4_t vec_elements_flt;</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160; </div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                <span class="keywordflow">if</span> (!vector_exceeds_bounds)</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                {</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                    <span class="keywordtype">int</span> i = 0;</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                    <span class="keywordflow">for</span> (; i &lt; axis_width; ++i)</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                    {</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                        vec_elements     = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>((i * in_axis_stride) + <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr));</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                        vec_elements     = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a5e5f2a88728fcb05b92a1291fa7fd7ea">wrapper::vqsub</a>(vec_max, vec_elements);</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                        vec_elements_flt = convert_int_to_float&lt;float32x4x4_t&gt;(vec_elements);</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160; </div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                        <span class="keywordflow">if</span> (IS_LOG)</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                        {</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                            vec_elements_flt.val[0] = vmulq_f32(vec_elements_flt.val[0], scale_beta_vec);</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                            vec_elements_flt.val[1] = vmulq_f32(vec_elements_flt.val[1], scale_beta_vec);</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;                            vec_elements_flt.val[2] = vmulq_f32(vec_elements_flt.val[2], scale_beta_vec);</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                            vec_elements_flt.val[3] = vmulq_f32(vec_elements_flt.val[3], scale_beta_vec);</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                            vec_sum.val[0]          = vaddq_f32(vec_sum.val[0], <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vec_elements_flt.val[0]));</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                            vec_sum.val[1]          = vaddq_f32(vec_sum.val[1], <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vec_elements_flt.val[1]));</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                            vec_sum.val[2]          = vaddq_f32(vec_sum.val[2], <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vec_elements_flt.val[2]));</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                            vec_sum.val[3]          = vaddq_f32(vec_sum.val[3], <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vec_elements_flt.val[3]));</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                        }</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;                        {</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                            vec_elements_flt.val[0] = <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vmulq_f32(vec_elements_flt.val[0], scale_beta_vec));</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                            vec_elements_flt.val[1] = <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vmulq_f32(vec_elements_flt.val[1], scale_beta_vec));</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                            vec_elements_flt.val[2] = <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vmulq_f32(vec_elements_flt.val[2], scale_beta_vec));</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                            vec_elements_flt.val[3] = <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vmulq_f32(vec_elements_flt.val[3], scale_beta_vec));</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                            vec_sum.val[0]          = vaddq_f32(vec_sum.val[0], vec_elements_flt.val[0]);</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                            vec_sum.val[1]          = vaddq_f32(vec_sum.val[1], vec_elements_flt.val[1]);</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                            vec_sum.val[2]          = vaddq_f32(vec_sum.val[2], vec_elements_flt.val[2]);</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                            vec_sum.val[3]          = vaddq_f32(vec_sum.val[3], vec_elements_flt.val[3]);</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                        }</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                        vst4q_f32((i * tmp_axis_stride) + <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(tmp_ptr), vec_elements_flt);</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                    }</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160; </div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;                    <span class="keyword">auto</span> vec_256 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span><a class="code" href="namespacearm__compute.xhtml#a4611b605e45ab401f02cab15c5e38715">float32_t</a><span class="keyword">&gt;</span>(256.f), ExactTagType{});</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;                    <span class="keywordflow">if</span> (!IS_LOG)</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;                    {</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;                        vec_sum_transformed.val[0] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a533635332a3a17c16d8f21c77e15e907">wrapper::vdiv</a>(vec_256, vec_sum.val[0]);</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;                        vec_sum_transformed.val[1] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a533635332a3a17c16d8f21c77e15e907">wrapper::vdiv</a>(vec_256, vec_sum.val[1]);</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                        vec_sum_transformed.val[2] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a533635332a3a17c16d8f21c77e15e907">wrapper::vdiv</a>(vec_256, vec_sum.val[2]);</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                        vec_sum_transformed.val[3] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a533635332a3a17c16d8f21c77e15e907">wrapper::vdiv</a>(vec_256, vec_sum.val[3]);</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                    }</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;                    {</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;                        vec_sum_transformed.val[0] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a23cc34c6476b7df556284c718c44e65c">wrapper::vlog</a>(vec_sum.val[0]);</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;                        vec_sum_transformed.val[1] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a23cc34c6476b7df556284c718c44e65c">wrapper::vlog</a>(vec_sum.val[1]);</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                        vec_sum_transformed.val[2] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a23cc34c6476b7df556284c718c44e65c">wrapper::vlog</a>(vec_sum.val[2]);</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                        vec_sum_transformed.val[3] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a23cc34c6476b7df556284c718c44e65c">wrapper::vlog</a>(vec_sum.val[3]);</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                    }</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                }</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                {</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                    <span class="keywordtype">int</span> i = 0;</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                    <span class="keywordflow">for</span> (; i &lt; axis_width; ++i)</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                    {</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;                        <span class="keyword">const</span> T *<span class="keyword">const</span> base_ptr_in  = (i * in_axis_stride) + <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr);</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                        <span class="keyword">auto</span>           vec_elements = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(0), ExactTagType{});</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                        <span class="comment">//vec_els is functionally redundant but is needed as a workaround for a toolchain bug.</span></div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                        std::vector&lt;T&gt; vec_els(16);</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160; </div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; num_remaining_full; ++k)</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;                        {</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; 4; ++j)</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;                            {</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;                                vec_els[k * 4 + j] = *(base_ptr_in + (4 * k + j));</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;                            }</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                        }</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; num_remaining_partial; ++j)</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;                        {</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                            vec_els[num_remaining_full * 4 + j] = *(base_ptr_in + (4 * num_remaining_full + j));</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;                        }</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> q = 0; q &lt; 16; q++)</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;                        {</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;                            vec_elements[q] = vec_els[q];</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;                        }</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;                        vec_elements                   = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a5e5f2a88728fcb05b92a1291fa7fd7ea">wrapper::vqsub</a>(vec_max, vec_elements);</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;                        float32x4x4_t vec_elements_flt = convert_int_to_float&lt;float32x4x4_t&gt;(vec_elements);</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160; </div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;                        <span class="keywordflow">if</span> (IS_LOG)</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;                        {</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;                            vec_elements_flt.val[0] = vmulq_f32(vec_elements_flt.val[0], scale_beta_vec);</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;                            vec_elements_flt.val[1] = vmulq_f32(vec_elements_flt.val[1], scale_beta_vec);</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;                            vec_elements_flt.val[2] = vmulq_f32(vec_elements_flt.val[2], scale_beta_vec);</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;                            vec_elements_flt.val[3] = vmulq_f32(vec_elements_flt.val[3], scale_beta_vec);</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;                            vec_sum.val[0]          = vaddq_f32(vec_sum.val[0], <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vec_elements_flt.val[0]));</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;                            vec_sum.val[1]          = vaddq_f32(vec_sum.val[1], <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vec_elements_flt.val[1]));</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;                            vec_sum.val[2]          = vaddq_f32(vec_sum.val[2], <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vec_elements_flt.val[2]));</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;                            vec_sum.val[3]          = vaddq_f32(vec_sum.val[3], <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vec_elements_flt.val[3]));</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;                        }</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;                        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;                        {</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;                            vec_elements_flt.val[0] = <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vmulq_f32(vec_elements_flt.val[0], scale_beta_vec));</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;                            vec_elements_flt.val[1] = <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vmulq_f32(vec_elements_flt.val[1], scale_beta_vec));</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;                            vec_elements_flt.val[2] = <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vmulq_f32(vec_elements_flt.val[2], scale_beta_vec));</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;                            vec_elements_flt.val[3] = <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vmulq_f32(vec_elements_flt.val[3], scale_beta_vec));</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;                            vec_sum.val[0]          = vaddq_f32(vec_sum.val[0], vec_elements_flt.val[0]);</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;                            vec_sum.val[1]          = vaddq_f32(vec_sum.val[1], vec_elements_flt.val[1]);</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;                            vec_sum.val[2]          = vaddq_f32(vec_sum.val[2], vec_elements_flt.val[2]);</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;                            vec_sum.val[3]          = vaddq_f32(vec_sum.val[3], vec_elements_flt.val[3]);</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;                        }</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160; </div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;                        <span class="keywordtype">float</span> *<span class="keyword">const</span> base_ptr_tmp = (i * tmp_axis_stride) + <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(tmp_ptr);</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; num_remaining_full; ++k)</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;                        {</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;                            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; 4; ++j)</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;                            {</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;                                *(base_ptr_tmp + (4 * k + j)) = vec_elements_flt.val[k][j];</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;                            }</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;                        }</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160; </div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; num_remaining_partial; ++j)</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;                        {</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;                            *(base_ptr_tmp + (4 * num_remaining_full + j)) =</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;                                vec_elements_flt.val[num_remaining_full][j];</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;                        }</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;                    }</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160; </div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;                    <span class="keyword">auto</span> vec_256 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span><a class="code" href="namespacearm__compute.xhtml#a4611b605e45ab401f02cab15c5e38715">float32_t</a><span class="keyword">&gt;</span>(256), ExactTagType{});</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;                    <span class="keywordflow">if</span> (!IS_LOG)</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;                    {</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;                        vec_sum_transformed.val[0] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a533635332a3a17c16d8f21c77e15e907">wrapper::vdiv</a>(vec_256, vec_sum.val[0]);</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;                        vec_sum_transformed.val[1] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a533635332a3a17c16d8f21c77e15e907">wrapper::vdiv</a>(vec_256, vec_sum.val[1]);</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;                        vec_sum_transformed.val[2] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a533635332a3a17c16d8f21c77e15e907">wrapper::vdiv</a>(vec_256, vec_sum.val[2]);</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;                        vec_sum_transformed.val[3] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a533635332a3a17c16d8f21c77e15e907">wrapper::vdiv</a>(vec_256, vec_sum.val[3]);</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;                    }</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;                    {</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;                        vec_sum_transformed.val[0] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a23cc34c6476b7df556284c718c44e65c">wrapper::vlog</a>(vec_sum.val[0]);</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;                        vec_sum_transformed.val[1] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a23cc34c6476b7df556284c718c44e65c">wrapper::vlog</a>(vec_sum.val[1]);</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;                        vec_sum_transformed.val[2] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a23cc34c6476b7df556284c718c44e65c">wrapper::vlog</a>(vec_sum.val[2]);</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;                        vec_sum_transformed.val[3] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a23cc34c6476b7df556284c718c44e65c">wrapper::vlog</a>(vec_sum.val[3]);</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;                    }</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;                }</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;            } <span class="comment">// Compute exponentials and sum</span></div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160; </div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;            <span class="comment">/* Normalize exponentials */</span></div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;            {</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;                constexpr <span class="keywordtype">bool</span> is_qasymm8_signed = std::is_same&lt;T, qasymm8_signed_t&gt;::value;</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;                <span class="keywordflow">if</span> (!vector_exceeds_bounds)</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;                {</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;                    <span class="keywordtype">int</span> i = 0;</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;                    <span class="keywordflow">for</span> (; i &lt; axis_width; ++i)</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;                    {</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;                        <span class="keyword">using</span> int_vec_type   = <a class="code" href="namespacearm__compute_1_1wrapper_1_1traits.xhtml#a20782de3fa029b3c94a67c493f7cb6b9">wrapper::traits::neon_vector_t&lt;T, 16&gt;</a>;</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;                        float32x4x4_t vec_in = vld4q_f32((i * tmp_axis_stride) + <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(tmp_ptr));</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160; </div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;                        int_vec_type normalized_value{};</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160; </div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;                        <span class="keywordflow">if</span> (IS_LOG)</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;                        {</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;                            <span class="keyword">const</span> float32x4x4_t sub = {</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;                                vsubq_f32(vec_in.val[0], vec_sum_transformed.val[0]),</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;                                vsubq_f32(vec_in.val[1], vec_sum_transformed.val[1]),</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;                                vsubq_f32(vec_in.val[2], vec_sum_transformed.val[2]),</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;                                vsubq_f32(vec_in.val[3], vec_sum_transformed.val[3]),</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;                            };</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;                            normalized_value = convert_float_to_int&lt;float32x4x4_t, int_vec_type&gt;(sub);</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;                        }</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;                        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;                        {</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;                            float32x4x4_t mul = {</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;                                vmulq_f32(vec_in.val[0], vec_sum_transformed.val[0]),</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;                                vmulq_f32(vec_in.val[1], vec_sum_transformed.val[1]),</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;                                vmulq_f32(vec_in.val[2], vec_sum_transformed.val[2]),</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;                                vmulq_f32(vec_in.val[3], vec_sum_transformed.val[3]),</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;                            };</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160; </div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;                            <span class="keywordflow">if</span> (is_qasymm8_signed)</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;                            {</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;                                <span class="keyword">const</span> <span class="keyword">auto</span> offset_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(128.f, <a class="code" href="structarm__compute_1_1wrapper_1_1traits_1_1vector__128__tag.xhtml">wrapper::traits::vector_128_tag</a>{});</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;                                mul.val[0]            = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(mul.val[0], offset_vec);</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;                                mul.val[1]            = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(mul.val[1], offset_vec);</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;                                mul.val[2]            = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(mul.val[2], offset_vec);</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;                                mul.val[3]            = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(mul.val[3], offset_vec);</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;                            }</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160; </div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;                            normalized_value = convert_float_to_int&lt;float32x4x4_t, int_vec_type&gt;(mul);</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;                        }</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>((i * out_axis_stride) + <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out_ptr), normalized_value);</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;                    }</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;                }</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;                {</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;                    <span class="keywordtype">int</span> i = 0;</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;                    <span class="keywordflow">for</span> (; i &lt; axis_width; ++i)</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;                    {</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;                        T *<span class="keyword">const</span>     base_ptr_out = (i * out_axis_stride) + <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out_ptr);</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;                        <span class="keywordtype">float</span> *<span class="keyword">const</span> base_ptr_tmp = (i * tmp_axis_stride) + <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(tmp_ptr);</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;                        <span class="keywordflow">if</span> (IS_LOG)</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;                        {</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;                            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; num_remaining_full; ++k)</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;                            {</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;                                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; 4; ++j)</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;                                {</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;                                    *(base_ptr_out + (4 * k + j)) = utils::cast::saturate_cast&lt;T&gt;(</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;                                        (*(base_ptr_tmp + (4 * k + j)) - vec_sum_transformed.val[k][j]));</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;                                }</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;                            }</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;                            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; num_remaining_partial; ++j)</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;                            {</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;                                *(base_ptr_out + (4 * num_remaining_full + j)) =</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;                                    utils::cast::saturate_cast&lt;T&gt;(*(base_ptr_tmp + (4 * num_remaining_full + j)) -</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;                                                                  vec_sum_transformed.val[num_remaining_full][j]);</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;                            }</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;                        }</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;                        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;                        {</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;                            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; num_remaining_full; ++k)</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;                            {</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;                                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; 4; ++j)</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;                                {</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;                                    *(base_ptr_out + (4 * k + j)) = utils::cast::saturate_cast&lt;T&gt;(</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;                                        *(base_ptr_tmp + (4 * k + j)) * vec_sum_transformed.val[k][j] -</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;                                        (is_qasymm8_signed ? 128.f : 0));</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;                                }</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;                            }</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;                            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; num_remaining_partial; ++j)</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;                            {</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;                                *(base_ptr_out + (4 * num_remaining_full + j)) =</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;                                    utils::cast::saturate_cast&lt;T&gt;(*(base_ptr_tmp + (4 * num_remaining_full + j)) *</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;                                                                      vec_sum_transformed.val[num_remaining_full][j] -</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;                                                                  (is_qasymm8_signed ? 128.f : 0));</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;                            }</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;                        }</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;                    }</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;                }</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;            } <span class="comment">// Normalize exponentials</span></div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;        },</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;        in_it, out_it);</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;}</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160; </div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;<span class="keyword">template</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#aa3aaf673970c1794596cb544ad57a21b">neon_softmax_x_quantized&lt;qasymm8_signed_t, true&gt;</a>(</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, <span class="keywordtype">void</span> *<span class="keyword">const</span> tmp, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, <span class="keywordtype">float</span> beta, <span class="keywordtype">int</span> axis, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window);</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160; </div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;<span class="keyword">template</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a72a1d2c1987c73fc91646342e8acf3b2">neon_softmax_x_quantized&lt;qasymm8_signed_t, false&gt;</a>(</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, <span class="keywordtype">void</span> *<span class="keyword">const</span> tmp, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, <span class="keywordtype">float</span> beta, <span class="keywordtype">int</span> axis, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window);</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160; </div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;<span class="keyword">template</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#af506cbd9b9e544e37b3f5d2f47aaac3f">neon_softmax_x_quantized&lt;qasymm8_t, true&gt;</a>(</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, <span class="keywordtype">void</span> *<span class="keyword">const</span> tmp, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, <span class="keywordtype">float</span> beta, <span class="keywordtype">int</span> axis, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window);</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160; </div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;<span class="keyword">template</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#aa865ca925c6f9ea8b8c9f51041859ccf">neon_softmax_x_quantized&lt;qasymm8_t, false&gt;</a>(</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, <span class="keywordtype">void</span> *<span class="keyword">const</span> tmp, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, <span class="keywordtype">float</span> beta, <span class="keywordtype">int</span> axis, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window);</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160; </div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;<span class="keyword">template</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a5d7f3080ef278a831c60b51ad9a74567">neon_softmax_non_x_quantized&lt;qasymm8_signed_t, true&gt;</a>(</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, <span class="keywordtype">void</span> *<span class="keyword">const</span> tmp, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, <span class="keywordtype">float</span> beta, <span class="keywordtype">int</span> axis, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window);</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160; </div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;<span class="keyword">template</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a56d24734f5becfb5db7582d9fc49f0e4">neon_softmax_non_x_quantized&lt;qasymm8_signed_t, false&gt;</a>(</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, <span class="keywordtype">void</span> *<span class="keyword">const</span> tmp, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, <span class="keywordtype">float</span> beta, <span class="keywordtype">int</span> axis, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window);</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160; </div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;<span class="keyword">template</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a2e0ecab27ddba7f6f81d3d874502c55c">neon_softmax_non_x_quantized&lt;qasymm8_t, true&gt;</a>(</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, <span class="keywordtype">void</span> *<span class="keyword">const</span> tmp, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, <span class="keywordtype">float</span> beta, <span class="keywordtype">int</span> axis, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window);</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160; </div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;<span class="keyword">template</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a3871c43d0d557bad9c2f2e5b118b0d1c">neon_softmax_non_x_quantized&lt;qasymm8_t, false&gt;</a>(</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, <span class="keywordtype">void</span> *<span class="keyword">const</span> tmp, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, <span class="keywordtype">float</span> beta, <span class="keywordtype">int</span> axis, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window);</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;} <span class="comment">// namespace cpu</span></div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;} <span class="comment">// namespace arm_compute</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_info_xhtml_a74dfd07380a290c34fe7c8e065029b95"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a74dfd07380a290c34fe7c8e065029b95">arm_compute::ITensorInfo::valid_region</a></div><div class="ttdeci">virtual ValidRegion valid_region() const =0</div><div class="ttdoc">Valid region of the tensor.</div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_aa3aaf673970c1794596cb544ad57a21b"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#aa3aaf673970c1794596cb544ad57a21b">arm_compute::cpu::neon_softmax_x_quantized&lt; qasymm8_signed_t, true &gt;</a></div><div class="ttdeci">template void neon_softmax_x_quantized&lt; qasymm8_signed_t, true &gt;(const ITensor *in, void *const tmp, ITensor *out, float beta, int axis, const Window &amp;window)</div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a5e5f2a88728fcb05b92a1291fa7fd7ea"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a5e5f2a88728fcb05b92a1291fa7fd7ea">arm_compute::wrapper::vqsub</a></div><div class="ttdeci">uint8x8_t vqsub(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="intrinsics_2sub_8h_source.xhtml#l00074">sub.h:74</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_acae4ec59246f93845fa78120d83d7c1e"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">arm_compute::wrapper::vsub</a></div><div class="ttdeci">uint8x8_t vsub(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="intrinsics_2sub_8h_source.xhtml#l00039">sub.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_aa16ace001ab8287faa46d6962f369219"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">arm_compute::wrapper::vgetlane</a></div><div class="ttdeci">uint8_t vgetlane(const uint8x8_t vector, const unsigned int lane)</div><div class="ttdef"><b>Definition:</b> <a href="getlane_8h_source.xhtml#l00091">getlane.h:91</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml">arm_compute::ITensor</a></div><div class="ttdoc">Interface for CPU tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_8h_source.xhtml#l00036">ITensor.h:36</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a23cc34c6476b7df556284c718c44e65c"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a23cc34c6476b7df556284c718c44e65c">arm_compute::wrapper::vlog</a></div><div class="ttdeci">float32x4_t vlog(const float32x4_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_n_e_o_n_2wrapper_2intrinsics_2_log_8h_source.xhtml#l00048">log.h:48</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a77f54eded7fef436d3a4f21ad5a00da6"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">arm_compute::wrapper::vloadq</a></div><div class="ttdeci">uint8x16_t vloadq(const uint8_t *ptr)</div><div class="ttdef"><b>Definition:</b> <a href="load_8h_source.xhtml#l00058">load.h:58</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a3871c43d0d557bad9c2f2e5b118b0d1c"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a3871c43d0d557bad9c2f2e5b118b0d1c">arm_compute::cpu::neon_softmax_non_x_quantized&lt; qasymm8_t, false &gt;</a></div><div class="ttdeci">template void neon_softmax_non_x_quantized&lt; qasymm8_t, false &gt;(const ITensor *in, void *const tmp, ITensor *out, float beta, int axis, const Window &amp;window)</div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_info_xhtml_a178f0d3d87f959e00a743328d95359d2"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">arm_compute::ITensorInfo::dimension</a></div><div class="ttdeci">virtual size_t dimension(size_t index) const =0</div><div class="ttdoc">Return the size of the requested dimension.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_xhtml_a0e95dc1e53c361348314873b168ae237"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">arm_compute::ITensor::info</a></div><div class="ttdeci">virtual ITensorInfo * info() const =0</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor's metadata.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a4611b605e45ab401f02cab15c5e38715"><div class="ttname"><a href="namespacearm__compute.xhtml#a4611b605e45ab401f02cab15c5e38715">arm_compute::float32_t</a></div><div class="ttdeci">float float32_t</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_types_8h_source.xhtml#l00033">CpuTypes.h:33</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_iterator_xhtml_ab260e292b1df3944bc1d55a9b2301e41"><div class="ttname"><a href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">arm_compute::Iterator::ptr</a></div><div class="ttdeci">constexpr uint8_t * ptr() const</div><div class="ttdoc">Return a pointer to the current pixel.</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00147">Helpers.inl:147</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a56d24734f5becfb5db7582d9fc49f0e4"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a56d24734f5becfb5db7582d9fc49f0e4">arm_compute::cpu::neon_softmax_non_x_quantized&lt; qasymm8_signed_t, false &gt;</a></div><div class="ttdeci">template void neon_softmax_non_x_quantized&lt; qasymm8_signed_t, false &gt;(const ITensor *in, void *const tmp, ITensor *out, float beta, int axis, const Window &amp;window)</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a6c0dcc38187027dcb89cd9724bc5a823"><div class="ttname"><a href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;...iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00074">Helpers.inl:74</a></div></div>
<div class="ttc" id="a_saturate_cast_8h_xhtml"><div class="ttname"><a href="_saturate_cast_8h.xhtml">SaturateCast.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_iterator_xhtml"><div class="ttname"><a href="classarm__compute_1_1_iterator.xhtml">arm_compute::Iterator</a></div><div class="ttdoc">Iterator updated by execute_window_loop for each window element.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00046">Helpers.h:46</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_dimensions_xhtml_aa87f8fc26981b0f3228a78c83b95b802"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">arm_compute::Dimensions::x</a></div><div class="ttdeci">T x() const</div><div class="ttdoc">Alias to access the size of the first dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00086">Dimensions.h:86</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_quantization_info_xhtml_a706fc156bcd4c45441bcaad05884b57d"><div class="ttname"><a href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">arm_compute::QuantizationInfo::uniform</a></div><div class="ttdeci">UniformQuantizationInfo uniform() const</div><div class="ttdoc">Return per layer quantization info.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00152">QuantizationInfo.h:152</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00151">Error.h:151</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_coordinates_xhtml"><div class="ttname"><a href="classarm__compute_1_1_coordinates.xhtml">arm_compute::Coordinates</a></div><div class="ttdoc">Coordinates of an item.</div><div class="ttdef"><b>Definition:</b> <a href="_coordinates_8h_source.xhtml#l00037">Coordinates.h:37</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_1_1traits_xhtml_a20782de3fa029b3c94a67c493f7cb6b9"><div class="ttname"><a href="namespacearm__compute_1_1wrapper_1_1traits.xhtml#a20782de3fa029b3c94a67c493f7cb6b9">arm_compute::wrapper::traits::neon_vector_t</a></div><div class="ttdeci">typename neon_vector&lt; T, S &gt;::type neon_vector_t</div><div class="ttdoc">Helper type template to get the type of a neon vector.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_n_e_o_n_2wrapper_2_traits_8h_source.xhtml#l00089">traits.h:89</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_info_xhtml_a3f3e1a3200223e6a304a533b1016e749"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">arm_compute::ITensorInfo::quantization_info</a></div><div class="ttdeci">virtual QuantizationInfo quantization_info() const =0</div><div class="ttdoc">Get the quantization settings (scale and offset) of the tensor.</div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a5d7f3080ef278a831c60b51ad9a74567"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a5d7f3080ef278a831c60b51ad9a74567">arm_compute::cpu::neon_softmax_non_x_quantized&lt; qasymm8_signed_t, true &gt;</a></div><div class="ttdeci">template void neon_softmax_non_x_quantized&lt; qasymm8_signed_t, true &gt;(const ITensor *in, void *const tmp, ITensor *out, float beta, int axis, const Window &amp;window)</div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a8d1d14000c959f1146a8a64e1dafae5f"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">arm_compute::wrapper::vmax</a></div><div class="ttdeci">uint8x8_t vmax(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="max_8h_source.xhtml#l00039">max.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a2e0ecab27ddba7f6f81d3d874502c55c"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a2e0ecab27ddba7f6f81d3d874502c55c">arm_compute::cpu::neon_softmax_non_x_quantized&lt; qasymm8_t, true &gt;</a></div><div class="ttdeci">template void neon_softmax_non_x_quantized&lt; qasymm8_t, true &gt;(const ITensor *in, void *const tmp, ITensor *out, float beta, int axis, const Window &amp;window)</div></div>
<div class="ttc" id="astructarm__compute_1_1_uniform_quantization_info_xhtml_a1d28dec57cce925ad92342891bd71e7c"><div class="ttname"><a href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">arm_compute::UniformQuantizationInfo::scale</a></div><div class="ttdeci">float scale</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00062">QuantizationInfo.h:62</a></div></div>
<div class="ttc" id="astructarm__compute_1_1wrapper_1_1traits_1_1vector__128__tag_xhtml"><div class="ttname"><a href="structarm__compute_1_1wrapper_1_1traits_1_1vector__128__tag.xhtml">arm_compute::wrapper::traits::vector_128_tag</a></div><div class="ttdoc">128-bit vector tag</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_n_e_o_n_2wrapper_2_traits_8h_source.xhtml#l00054">traits.h:54</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a2902775707bc7bf7d6da1bda1cc15783"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">arm_compute::wrapper::vgetlow</a></div><div class="ttdeci">uint8x8_t vgetlow(const uint8x16_t val)</div><div class="ttdef"><b>Definition:</b> <a href="getlow_8h_source.xhtml#l00039">getlow.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_ae7943ea9c1f74dc72c62d4cc3966a459"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">arm_compute::wrapper::vstore</a></div><div class="ttdeci">void vstore(uint8_t *ptr, uint8x8_t val)</div><div class="ttdef"><b>Definition:</b> <a href="store_8h_source.xhtml#l00039">store.h:39</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml">arm_compute::Window</a></div><div class="ttdoc">Describe a multidimensional execution window.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00039">Window.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_1_1traits_xhtml_acf6b3be295be8dbd7897536bcd7561a3"><div class="ttname"><a href="namespacearm__compute_1_1wrapper_1_1traits.xhtml#acf6b3be295be8dbd7897536bcd7561a3">arm_compute::wrapper::traits::neon_bitvector_tag_t</a></div><div class="ttdeci">typename neon_bitvector&lt; T, BW &gt;::tag_type neon_bitvector_tag_t</div><div class="ttdoc">Helper type template to get the tag type of a neon vector.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_n_e_o_n_2wrapper_2_traits_8h_source.xhtml#l00141">traits.h:141</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_valid_region_xhtml_a1fcd64682b37ed3c2098d0094ce788d8"><div class="ttname"><a href="structarm__compute_1_1_valid_region.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">arm_compute::ValidRegion::shape</a></div><div class="ttdeci">TensorShape shape</div><div class="ttdoc">Shape of the valid region.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00223">Types.h:223</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2024 Arm Limited.</div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="asoftmax_2generic_2neon_2impl_8h_xhtml"><div class="ttname"><a href="softmax_2generic_2neon_2impl_8h.xhtml">impl.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_info_xhtml_a6b14f175bf5281f57b561e2d4e4b1f1f"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">arm_compute::ITensorInfo::strides_in_bytes</a></div><div class="ttdeci">virtual const Strides &amp; strides_in_bytes() const =0</div><div class="ttdoc">The strides in bytes for accessing each dimension of the tensor.</div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_ab799fd9cd5fc5989593e69c55bc400f9"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ab799fd9cd5fc5989593e69c55bc400f9">arm_compute::wrapper::vpmax</a></div><div class="ttdeci">uint8x8_t vpmax(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="pmax_8h_source.xhtml#l00039">pmax.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1mlgo_1_1parser_xhtml_a9fe67a1da3e2628bade473115ecbb5be"><div class="ttname"><a href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">arm_compute::mlgo::parser::end</a></div><div class="ttdeci">void end(TokenStream &amp;in, bool &amp;valid)</div><div class="ttdef"><b>Definition:</b> <a href="_m_l_g_o_parser_8cpp_source.xhtml#l00283">MLGOParser.cpp:283</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a9021da1d85f0769fe8304a4004d52b36"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a9021da1d85f0769fe8304a4004d52b36">arm_compute::cpu::neon_softmax_non_x_quantized</a></div><div class="ttdeci">void neon_softmax_non_x_quantized(const ITensor *in, void *const tmp, ITensor *out, float beta, int axis, const Window &amp;window)</div><div class="ttdef"><b>Definition:</b> <a href="softmax_2generic_2neon_2impl_8cpp_source.xhtml#l00255">impl.cpp:255</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00044">ITensorInfo.h:44</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a533635332a3a17c16d8f21c77e15e907"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a533635332a3a17c16d8f21c77e15e907">arm_compute::wrapper::vdiv</a></div><div class="ttdeci">float32x2_t vdiv(const float32x2_t &amp;a, const float32x2_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="div_8h_source.xhtml#l00059">div.h:59</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a95ee388aa7c5bccab918235dc538a6b3"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">arm_compute::wrapper::vgethigh</a></div><div class="ttdeci">uint8x8_t vgethigh(const uint8x16_t val)</div><div class="ttdef"><b>Definition:</b> <a href="gethigh_8h_source.xhtml#l00039">gethigh.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a1c458f6616fcb859a32d7cf5e8ff217f"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a1c458f6616fcb859a32d7cf5e8ff217f">arm_compute::cpu::neon_softmax_x_quantized</a></div><div class="ttdeci">void neon_softmax_x_quantized(const ITensor *in, void *const tmp, ITensor *out, float beta, int axis, const Window &amp;window)</div><div class="ttdef"><b>Definition:</b> <a href="softmax_2generic_2neon_2impl_8cpp_source.xhtml#l00033">impl.cpp:33</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_af506cbd9b9e544e37b3f5d2f47aaac3f"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#af506cbd9b9e544e37b3f5d2f47aaac3f">arm_compute::cpu::neon_softmax_x_quantized&lt; qasymm8_t, true &gt;</a></div><div class="ttdeci">template void neon_softmax_x_quantized&lt; qasymm8_t, true &gt;(const ITensor *in, void *const tmp, ITensor *out, float beta, int axis, const Window &amp;window)</div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a72a1d2c1987c73fc91646342e8acf3b2"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a72a1d2c1987c73fc91646342e8acf3b2">arm_compute::cpu::neon_softmax_x_quantized&lt; qasymm8_signed_t, false &gt;</a></div><div class="ttdeci">template void neon_softmax_x_quantized&lt; qasymm8_signed_t, false &gt;(const ITensor *in, void *const tmp, ITensor *out, float beta, int axis, const Window &amp;window)</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ab55486f1153a4c5f507d4923b59fc6a0"><div class="ttname"><a href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">arm_compute::vexpq_f32</a></div><div class="ttdeci">float32x4_t vexpq_f32(float32x4_t x)</div><div class="ttdoc">Calculate exponential.</div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a39e87435be178fba49b76f49426ef873"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">arm_compute::wrapper::vdup_n</a></div><div class="ttdeci">uint8x8_t vdup_n(uint8_t value, traits::vector_64_tag)</div><div class="ttdef"><b>Definition:</b> <a href="dup__n_8h_source.xhtml#l00041">dup_n.h:41</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_aa865ca925c6f9ea8b8c9f51041859ccf"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#aa865ca925c6f9ea8b8c9f51041859ccf">arm_compute::cpu::neon_softmax_x_quantized&lt; qasymm8_t, false &gt;</a></div><div class="ttdeci">template void neon_softmax_x_quantized&lt; qasymm8_t, false &gt;(const ITensor *in, void *const tmp, ITensor *out, float beta, int axis, const Window &amp;window)</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_2c61f424fd391396db977702a2beee9a.xhtml">cpu</a></li><li class="navelem"><a class="el" href="dir_1de7bcbbdec2bf3559cb3c688662d4f5.xhtml">kernels</a></li><li class="navelem"><a class="el" href="dir_c42292eae4d792a7461f8cfc84977b28.xhtml">softmax</a></li><li class="navelem"><a class="el" href="dir_3c0003389c3d6bdd3182f57393932243.xhtml">generic</a></li><li class="navelem"><a class="el" href="dir_1b61e00991b31f5462798d823b4289c9.xhtml">neon</a></li><li class="navelem"><a class="el" href="softmax_2generic_2neon_2impl_8cpp.xhtml">impl.cpp</a></li>
    <li class="footer">Generated on Mon Jun 17 2024 15:11:19 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
