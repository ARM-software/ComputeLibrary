<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: GpuCkwComponentArgument Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.06</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">GpuCkwComponentArgument Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>The argument of a dynamic fusion component which can be either user tensor or virtual tensor.  
 <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_gpu_ckw_component_argument_8h_source.xhtml">GpuCkwComponentArgument.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a7062ae26b81cd13156b25543965eb0df"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml#a7062ae26b81cd13156b25543965eb0df">GpuCkwComponentArgument</a> ()=default</td></tr>
<tr class="memdesc:a7062ae26b81cd13156b25543965eb0df"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml#a7062ae26b81cd13156b25543965eb0df">More...</a><br /></td></tr>
<tr class="separator:a7062ae26b81cd13156b25543965eb0df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d4da119a1b1969ddf61ee202dcba8c8"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml#a8d4da119a1b1969ddf61ee202dcba8c8">GpuCkwComponentArgument</a> (ckw::TensorOperand <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml#a88fbeae14499bb80589bf146b775c0cb">tensor</a>)</td></tr>
<tr class="memdesc:a8d4da119a1b1969ddf61ee202dcba8c8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize a new instance of <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml">GpuCkwComponentArgument</a> class for user tensor.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml#a8d4da119a1b1969ddf61ee202dcba8c8">More...</a><br /></td></tr>
<tr class="separator:a8d4da119a1b1969ddf61ee202dcba8c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a274588cfdbf03d725706544c6cc2dcf2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml">GpuCkwComponentArgument</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml#a274588cfdbf03d725706544c6cc2dcf2">init_virtual_tensor</a> (ckw::TileOperand &amp;<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml#aecfb64d8c2236edee8eb98d5e614c50c">tile</a>, const ckw::TensorSampler &amp;sampler)</td></tr>
<tr class="memdesc:a274588cfdbf03d725706544c6cc2dcf2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bind the tile and sampler to the tensor argument.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml#a274588cfdbf03d725706544c6cc2dcf2">More...</a><br /></td></tr>
<tr class="separator:a274588cfdbf03d725706544c6cc2dcf2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeb4850439b8e580dcf2a49f7479665a0"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml#aeb4850439b8e580dcf2a49f7479665a0">has_tensor</a> () const</td></tr>
<tr class="memdesc:aeb4850439b8e580dcf2a49f7479665a0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get whether the argument is a user tensor.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml#aeb4850439b8e580dcf2a49f7479665a0">More...</a><br /></td></tr>
<tr class="separator:aeb4850439b8e580dcf2a49f7479665a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a88fbeae14499bb80589bf146b775c0cb"><td class="memItemLeft" align="right" valign="top">ckw::TensorOperand &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml#a88fbeae14499bb80589bf146b775c0cb">tensor</a> ()</td></tr>
<tr class="memdesc:a88fbeae14499bb80589bf146b775c0cb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the tensor operand.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml#a88fbeae14499bb80589bf146b775c0cb">More...</a><br /></td></tr>
<tr class="separator:a88fbeae14499bb80589bf146b775c0cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adfdb3bb6355a6ef6e2b5d184cc93b110"><td class="memItemLeft" align="right" valign="top">const ckw::TensorOperand &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml#adfdb3bb6355a6ef6e2b5d184cc93b110">tensor</a> () const</td></tr>
<tr class="memdesc:adfdb3bb6355a6ef6e2b5d184cc93b110"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the tensor operand.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml#adfdb3bb6355a6ef6e2b5d184cc93b110">More...</a><br /></td></tr>
<tr class="separator:adfdb3bb6355a6ef6e2b5d184cc93b110"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acedee75b7850133de4f67b7e0ac0f4a5"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml#acedee75b7850133de4f67b7e0ac0f4a5">has_tile</a> () const</td></tr>
<tr class="memdesc:acedee75b7850133de4f67b7e0ac0f4a5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get whether the argument contains a tile.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml#acedee75b7850133de4f67b7e0ac0f4a5">More...</a><br /></td></tr>
<tr class="separator:acedee75b7850133de4f67b7e0ac0f4a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aecfb64d8c2236edee8eb98d5e614c50c"><td class="memItemLeft" align="right" valign="top">ckw::TileOperand &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml#aecfb64d8c2236edee8eb98d5e614c50c">tile</a> ()</td></tr>
<tr class="memdesc:aecfb64d8c2236edee8eb98d5e614c50c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the tile operand.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml#aecfb64d8c2236edee8eb98d5e614c50c">More...</a><br /></td></tr>
<tr class="separator:aecfb64d8c2236edee8eb98d5e614c50c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b0e97b1c3da9cc455729a78087c496a"><td class="memItemLeft" align="right" valign="top">const ckw::TileOperand &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml#a2b0e97b1c3da9cc455729a78087c496a">tile</a> () const</td></tr>
<tr class="memdesc:a2b0e97b1c3da9cc455729a78087c496a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the tile operand.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml#a2b0e97b1c3da9cc455729a78087c496a">More...</a><br /></td></tr>
<tr class="separator:a2b0e97b1c3da9cc455729a78087c496a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f1698006de45d24ece55c178db6ace7"><td class="memItemLeft" align="right" valign="top">ckw::TensorSampler &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml#a1f1698006de45d24ece55c178db6ace7">tensor_sampler</a> ()</td></tr>
<tr class="memdesc:a1f1698006de45d24ece55c178db6ace7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the tensor sampling information for the tile.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml#a1f1698006de45d24ece55c178db6ace7">More...</a><br /></td></tr>
<tr class="separator:a1f1698006de45d24ece55c178db6ace7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd92c7265036ac051b18179bd2d42823"><td class="memItemLeft" align="right" valign="top">const ckw::TensorSampler &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml#acd92c7265036ac051b18179bd2d42823">tensor_sampler</a> () const</td></tr>
<tr class="memdesc:acd92c7265036ac051b18179bd2d42823"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the tensor sampling information for the tile.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml#acd92c7265036ac051b18179bd2d42823">More...</a><br /></td></tr>
<tr class="separator:acd92c7265036ac051b18179bd2d42823"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>The argument of a dynamic fusion component which can be either user tensor or virtual tensor. </p>

<p class="definition">Definition at line <a class="el" href="_gpu_ckw_component_argument_8h_source.xhtml#l00040">40</a> of file <a class="el" href="_gpu_ckw_component_argument_8h_source.xhtml">GpuCkwComponentArgument.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a7062ae26b81cd13156b25543965eb0df"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7062ae26b81cd13156b25543965eb0df">&#9670;&nbsp;</a></span>GpuCkwComponentArgument() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml">GpuCkwComponentArgument</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default constructor. </p>

</div>
</div>
<a id="a8d4da119a1b1969ddf61ee202dcba8c8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8d4da119a1b1969ddf61ee202dcba8c8">&#9670;&nbsp;</a></span>GpuCkwComponentArgument() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml">GpuCkwComponentArgument</a> </td>
          <td>(</td>
          <td class="paramtype">ckw::TensorOperand&#160;</td>
          <td class="paramname"><em>tensor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Initialize a new instance of <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml">GpuCkwComponentArgument</a> class for user tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td>The user tensor. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_gpu_ckw_component_argument_8cpp_source.xhtml#l00036">36</a> of file <a class="el" href="_gpu_ckw_component_argument_8cpp_source.xhtml">GpuCkwComponentArgument.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;                                                                        : _tensor(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml#a88fbeae14499bb80589bf146b775c0cb">tensor</a>)</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="aeb4850439b8e580dcf2a49f7479665a0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeb4850439b8e580dcf2a49f7479665a0">&#9670;&nbsp;</a></span>has_tensor()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool has_tensor </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get whether the argument is a user tensor. </p>

<p class="definition">Definition at line <a class="el" href="_gpu_ckw_component_argument_8cpp_source.xhtml#l00051">51</a> of file <a class="el" href="_gpu_ckw_component_argument_8cpp_source.xhtml">GpuCkwComponentArgument.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;{</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordflow">return</span> _tensor.is_valid();</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="acedee75b7850133de4f67b7e0ac0f4a5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acedee75b7850133de4f67b7e0ac0f4a5">&#9670;&nbsp;</a></span>has_tile()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool has_tile </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get whether the argument contains a tile. </p>
<p>The argument can be either a user tensor that has been loaded, or a virtual tensor (i.e. a tile with tensor sampling information). </p>

<p class="definition">Definition at line <a class="el" href="_gpu_ckw_component_argument_8cpp_source.xhtml#l00070">70</a> of file <a class="el" href="_gpu_ckw_component_argument_8cpp_source.xhtml">GpuCkwComponentArgument.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;{</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keywordflow">return</span> _tile.is_valid();</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_gpu_ckw_elementwise_binary_8cpp_source.xhtml#l00065">GpuCkwElementwiseBinary::write_component_code()</a>, and <a class="el" href="_gpu_ckw_direct_conv2d_8cpp_source.xhtml#l00064">GpuCkwDirectConv2d::write_component_code()</a>.</p>

</div>
</div>
<a id="a274588cfdbf03d725706544c6cc2dcf2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a274588cfdbf03d725706544c6cc2dcf2">&#9670;&nbsp;</a></span>init_virtual_tensor()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml">GpuCkwComponentArgument</a> &amp; init_virtual_tensor </td>
          <td>(</td>
          <td class="paramtype">ckw::TileOperand &amp;&#160;</td>
          <td class="paramname"><em>tile</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const ckw::TensorSampler &amp;&#160;</td>
          <td class="paramname"><em>sampler</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Bind the tile and sampler to the tensor argument. </p>
<p>This method can be used to share a tile and sampler associated to a tensor among different kernel components. For example, when we create the destination tile and destination sampler for the first time (root component), this method can be used to bind these two information to the destination tensor so that the following simple components know the tile size and how to access the elements from memory.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tile</td><td>The tile that has been loaded. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">sampler</td><td>The tensor sampling information that has been used to load the tile. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_gpu_ckw_component_argument_8cpp_source.xhtml#l00040">40</a> of file <a class="el" href="_gpu_ckw_component_argument_8cpp_source.xhtml">GpuCkwComponentArgument.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    CKW_ASSERT(_tile == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160; </div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    _tile    = <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml#aecfb64d8c2236edee8eb98d5e614c50c">tile</a>;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    _sampler = sampler;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160; </div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_gpu_ckw_component_argument_8cpp_source.xhtml#l00075">GpuCkwComponentArgument::tile()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_gpu_ckw_elementwise_binary_8cpp_source.xhtml#l00065">GpuCkwElementwiseBinary::write_component_code()</a>, and <a class="el" href="_gpu_ckw_direct_conv2d_8cpp_source.xhtml#l00064">GpuCkwDirectConv2d::write_component_code()</a>.</p>

</div>
</div>
<a id="a88fbeae14499bb80589bf146b775c0cb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a88fbeae14499bb80589bf146b775c0cb">&#9670;&nbsp;</a></span>tensor() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const ckw::TensorOperand &amp; tensor </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the tensor operand. </p>
<p>If the tensor is not available, throw an error. </p>

<p class="definition">Definition at line <a class="el" href="_gpu_ckw_component_argument_8cpp_source.xhtml#l00056">56</a> of file <a class="el" href="_gpu_ckw_component_argument_8cpp_source.xhtml">GpuCkwComponentArgument.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;{</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    CKW_ASSERT(_tensor.is_valid());</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160; </div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordflow">return</span> _tensor;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_gpu_ckw_elementwise_binary_8cpp_source.xhtml#l00065">GpuCkwElementwiseBinary::write_component_code()</a>, <a class="el" href="_gpu_ckw_depthwise_conv2d_8cpp_source.xhtml#l00064">GpuCkwDepthwiseConv2d::write_component_code()</a>, <a class="el" href="_gpu_ckw_direct_conv2d_8cpp_source.xhtml#l00064">GpuCkwDirectConv2d::write_component_code()</a>, and <a class="el" href="_gpu_ckw_mat_mul_8cpp_source.xhtml#l00060">GpuCkwMatMul::write_component_code()</a>.</p>

</div>
</div>
<a id="adfdb3bb6355a6ef6e2b5d184cc93b110"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adfdb3bb6355a6ef6e2b5d184cc93b110">&#9670;&nbsp;</a></span>tensor() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const ckw::TensorOperand&amp; tensor </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the tensor operand. </p>
<p>If the tensor is not available, throw an error. </p>

</div>
</div>
<a id="a1f1698006de45d24ece55c178db6ace7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1f1698006de45d24ece55c178db6ace7">&#9670;&nbsp;</a></span>tensor_sampler() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const ckw::TensorSampler &amp; tensor_sampler </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the tensor sampling information for the tile. </p>
<p>If the tile is not available, throw an error. </p>

<p class="definition">Definition at line <a class="el" href="_gpu_ckw_component_argument_8cpp_source.xhtml#l00089">89</a> of file <a class="el" href="_gpu_ckw_component_argument_8cpp_source.xhtml">GpuCkwComponentArgument.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;{</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    CKW_ASSERT(_tile.is_valid());</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160; </div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keywordflow">return</span> _sampler;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="acd92c7265036ac051b18179bd2d42823"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acd92c7265036ac051b18179bd2d42823">&#9670;&nbsp;</a></span>tensor_sampler() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const ckw::TensorSampler&amp; tensor_sampler </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the tensor sampling information for the tile. </p>
<p>If the tile is not available, throw an error. </p>

</div>
</div>
<a id="aecfb64d8c2236edee8eb98d5e614c50c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aecfb64d8c2236edee8eb98d5e614c50c">&#9670;&nbsp;</a></span>tile() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const ckw::TileOperand &amp; tile </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the tile operand. </p>
<p>If the tile is not available, throw an error. </p>

<p class="definition">Definition at line <a class="el" href="_gpu_ckw_component_argument_8cpp_source.xhtml#l00075">75</a> of file <a class="el" href="_gpu_ckw_component_argument_8cpp_source.xhtml">GpuCkwComponentArgument.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;{</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    CKW_ASSERT(_tile.is_valid());</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160; </div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordflow">return</span> _tile;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_gpu_ckw_component_argument_8cpp_source.xhtml#l00040">GpuCkwComponentArgument::init_virtual_tensor()</a>, <a class="el" href="_gpu_ckw_elementwise_binary_8cpp_source.xhtml#l00065">GpuCkwElementwiseBinary::write_component_code()</a>, and <a class="el" href="_gpu_ckw_direct_conv2d_8cpp_source.xhtml#l00064">GpuCkwDirectConv2d::write_component_code()</a>.</p>

</div>
</div>
<a id="a2b0e97b1c3da9cc455729a78087c496a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2b0e97b1c3da9cc455729a78087c496a">&#9670;&nbsp;</a></span>tile() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const ckw::TileOperand&amp; tile </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the tile operand. </p>
<p>If the tile is not available, throw an error. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/dynamic_fusion/sketch/gpu/ckw_driver/<a class="el" href="_gpu_ckw_component_argument_8h_source.xhtml">GpuCkwComponentArgument.h</a></li>
<li>src/dynamic_fusion/sketch/gpu/ckw_driver/<a class="el" href="_gpu_ckw_component_argument_8cpp_source.xhtml">GpuCkwComponentArgument.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument_xhtml_a88fbeae14499bb80589bf146b775c0cb"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml#a88fbeae14499bb80589bf146b775c0cb">arm_compute::experimental::dynamic_fusion::GpuCkwComponentArgument::tensor</a></div><div class="ttdeci">ckw::TensorOperand &amp; tensor()</div><div class="ttdoc">Get the tensor operand.</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_ckw_component_argument_8cpp_source.xhtml#l00056">GpuCkwComponentArgument.cpp:56</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument_xhtml_aecfb64d8c2236edee8eb98d5e614c50c"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml#aecfb64d8c2236edee8eb98d5e614c50c">arm_compute::experimental::dynamic_fusion::GpuCkwComponentArgument::tile</a></div><div class="ttdeci">ckw::TileOperand &amp; tile()</div><div class="ttdoc">Get the tile operand.</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_ckw_component_argument_8cpp_source.xhtml#l00075">GpuCkwComponentArgument.cpp:75</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1experimental.xhtml">experimental</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml">dynamic_fusion</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml">GpuCkwComponentArgument</a></li>
    <li class="footer">Generated on Mon Jun 17 2024 15:11:31 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
