<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/cpu/kernels/scale/neon/list.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.06</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('cpu_2kernels_2scale_2neon_2list_8h_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">list.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="cpu_2kernels_2scale_2neon_2list_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2021-2023 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef ACL_SRC_CPU_KERNELS_SCALE_NEON_LIST_H</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define ACL_SRC_CPU_KERNELS_SCALE_NEON_LIST_H</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160; </div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_helpers_8h.xhtml">arm_compute/core/Helpers.h</a>&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_window_8h.xhtml">arm_compute/core/Window.h</a>&quot;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160; </div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="wrapper_8h.xhtml">src/core/NEON/wrapper/wrapper.h</a>&quot;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_scale_utils_8h.xhtml">src/core/utils/ScaleUtils.h</a>&quot;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="support_2_rounding_8h.xhtml">support/Rounding.h</a>&quot;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160; </div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">namespace </span>cpu</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div>
<div class="line"><a name="l00038"></a><span class="lineno"><a class="line" href="cpu_2kernels_2scale_2neon_2list_8h.xhtml#a7b7e4d4bab725fddfc0b8bc110efd60e">   38</a></span>&#160;<span class="preprocessor">#define DECLARE_SCALE_KERNEL(func_name)                                                                            \</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">    void func_name(const ITensor *src, ITensor *dst, const ITensor *offsets, const ITensor *dx, const ITensor *dy, \</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">                   InterpolationPolicy policy, BorderMode border_mode, PixelValue constant_border_value,           \</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor">                   float sampling_offset, bool align_corners, const Window &amp;window)</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160; </div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<a class="code" href="cpu_2kernels_2scale_2neon_2list_8h.xhtml#a7b7e4d4bab725fddfc0b8bc110efd60e">DECLARE_SCALE_KERNEL</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#ae2aa72fde3eb94fa8822a4bb84e8d468">s16_neon_scale</a>);</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<a class="code" href="cpu_2kernels_2scale_2neon_2list_8h.xhtml#a7b7e4d4bab725fddfc0b8bc110efd60e">DECLARE_SCALE_KERNEL</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a9f0a2858d9233ec0443a1d1f2b3ca07c">u8_neon_scale</a>);</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<a class="code" href="cpu_2kernels_2scale_2neon_2list_8h.xhtml#a7b7e4d4bab725fddfc0b8bc110efd60e">DECLARE_SCALE_KERNEL</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a503eae482390645cffa1439822fa864a">s8_neon_scale</a>);</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<a class="code" href="cpu_2kernels_2scale_2neon_2list_8h.xhtml#a7b7e4d4bab725fddfc0b8bc110efd60e">DECLARE_SCALE_KERNEL</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a594fa7dfda56b0775950658f6937af9c">qasymm8_neon_scale</a>);</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<a class="code" href="cpu_2kernels_2scale_2neon_2list_8h.xhtml#a7b7e4d4bab725fddfc0b8bc110efd60e">DECLARE_SCALE_KERNEL</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a5afa676c133f2bd00b896680e5176cd4">qasymm8_signed_neon_scale</a>);</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<a class="code" href="cpu_2kernels_2scale_2neon_2list_8h.xhtml#a7b7e4d4bab725fddfc0b8bc110efd60e">DECLARE_SCALE_KERNEL</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a5df47efaaa19dd62657db56f3d6129f9">fp16_common_neon_scale</a>);</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<a class="code" href="cpu_2kernels_2scale_2neon_2list_8h.xhtml#a7b7e4d4bab725fddfc0b8bc110efd60e">DECLARE_SCALE_KERNEL</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a7110248fdbe9eb708cda53069adaa471">fp16_bilinear_neon_scale_nchw</a>);</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<a class="code" href="cpu_2kernels_2scale_2neon_2list_8h.xhtml#a7b7e4d4bab725fddfc0b8bc110efd60e">DECLARE_SCALE_KERNEL</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#ae7fbf3b06a874297ca3aea18783562c4">fp16_nearest_neon_scale_nchw</a>);</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="preprocessor">#undef DECLARE_SCALE_KERNEL</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160; </div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="preprocessor">#ifdef ENABLE_NCHW_KERNELS</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="keywordtype">void</span> scale_nearest_nchw(<span class="keyword">const</span> ITensor *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>,</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;                        ITensor       *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>,</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;                        <span class="keyword">const</span> ITensor *dx,</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                        <span class="keyword">const</span> ITensor *dy,</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;                        <span class="keyword">const</span> ITensor *offsets,</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                        PixelValue     constant_border_value,</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                        <span class="keywordtype">float</span>          sampling_offset,</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                        <span class="keywordtype">bool</span>           align_corners,</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                        <span class="keyword">const</span> Window  &amp;window)</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;{</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(dx, dy);</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(constant_border_value);</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> in_stride_x = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(0) + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;padding().left + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;padding().right;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160; </div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="comment">// Compute the ratio between source height and destination height</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> hr =</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <a class="code" href="namespacearm__compute_1_1scale__utils.xhtml#a8c25b29542a5312b947f72e5ea5c825b">scale_utils::calculate_resize_ratio</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(1), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;dimension(1), align_corners);</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160; </div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="comment">// Don&#39;t increment in X and Y direction for the input tensor</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="comment">// A pointer to the start of this plane is needed as base for the precomputed offsets</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    Window win_in(window);</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    win_in.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 0, 0));</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    win_in.set(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, Window::Dimension(0, 0, 0));</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160; </div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="comment">// Set offsets window</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    Window win_off;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    win_off.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, window[<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>]);</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    win_off.set(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, window[<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>]);</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> d = <a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>; d &lt; offsets-&gt;info()-&gt;num_dimensions(); ++d)</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    {</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        win_off.set(d, Window::Dimension(0, 0, 0));</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    }</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160; </div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="comment">// Create iterators</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    Iterator src_i(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, win_in);</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    Iterator dst_i(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, window);</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    Iterator offsets_i(offsets, win_off);</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        window,</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        {</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> offsets_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int32_t *<span class="keyword">&gt;</span>(offsets_i.ptr());</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> in_yi       = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                align_corners ? <a class="code" href="namespacearm__compute_1_1utils_1_1rounding.xhtml#aeecc6e8935077dc93cc5079fe98d3adc">utils::rounding::round_half_away_from_zero</a>((<span class="keywordtype">id</span>.y() + sampling_offset) * hr)</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                                    : std::floor((id.y() + sampling_offset) * hr));</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            <span class="keyword">const</span> int32_t offset_row = in_yi * in_stride_x;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            *<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(dst_i.ptr()) =</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(src_i.ptr()) + offsets_ptr[0] + offset_row);</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        },</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        src_i, offsets_i, dst_i);</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;}</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160; </div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="keywordtype">void</span> <a class="code" href="nchw_2scale_8cl.xhtml#a42131df7a754ea279bea023c2e18b077">scale_bilinear_nchw</a>(<span class="keyword">const</span> ITensor *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>,</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                         ITensor       *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>,</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                         <span class="keyword">const</span> ITensor *dx,</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                         <span class="keyword">const</span> ITensor *dy,</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                         <span class="keyword">const</span> ITensor *offsets,</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                         <a class="code" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a>     border_mode,</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                         PixelValue     constant_border_value,</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                         <span class="keywordtype">float</span>          sampling_offset,</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                         <span class="keywordtype">bool</span>           align_corners,</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                         <span class="keyword">const</span> Window  &amp;window)</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;{</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="comment">// Compute the ratio between source height and destination height</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> hr =</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        <a class="code" href="namespacearm__compute_1_1scale__utils.xhtml#a8c25b29542a5312b947f72e5ea5c825b">scale_utils::calculate_resize_ratio</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(1), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;dimension(1), align_corners);</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    Window win_off;</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    win_off.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, window.x());</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    win_off.set(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, window.y());</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160; </div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="comment">// Don&#39;t increment in X and Y direction for the input tensor</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="comment">// A pointer to the start of this plane is needed as base for the precomputed offsets</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    Window win_in(window);</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    win_in.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 0, 0));</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    win_in.set(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, Window::Dimension(0, 0, 0));</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160; </div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> d = <a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>; d &lt; offsets-&gt;info()-&gt;num_dimensions(); ++d)</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    {</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        win_off.set(d, Window::Dimension(0, 0, 0));</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    }</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160; </div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    Iterator src_i(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, win_in);</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    Iterator dst_i(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, window);</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    Iterator offsets_i(offsets, win_off);</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    Iterator dx_i(dx, win_off);</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    Iterator dy_i(dy, win_off);</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160; </div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keyword">const</span> int32_t in_dim_w    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(0);</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keyword">const</span> int32_t in_dim_h    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(1);</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keyword">const</span> int32_t in_stride_w = in_dim_w + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;padding().left + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;padding().right;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160; </div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keywordflow">if</span> (border_mode == <a class="code" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a8d6b5cada83510220f59e00ce86d4d92">BorderMode::CONSTANT</a>)</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    {</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="preprocessor">#ifdef __ARM_FEATURE_FP16_VECTOR_ARITHMETIC</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <span class="keyword">using</span> ConstType = <span class="keyword">typename</span> std::conditional&lt;std::is_same&lt;T, float16_t&gt;::value, <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a>, T&gt;<a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">::type</a>;</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="preprocessor">#else  </span><span class="comment">/* __ARM_FEATURE_FP16_VECTOR_ARITHMETIC */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        <span class="keyword">using</span> ConstType = T;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __ARM_FEATURE_FP16_VECTOR_ARITHMETIC */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <span class="keyword">const</span> T const_border_value = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(constant_border_value.get&lt;ConstType&gt;());</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            window,</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            {</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                <span class="keyword">const</span> int32_t index_h       = std::floor((<span class="keywordtype">id</span>.y() + sampling_offset) * hr - sampling_offset);</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span>    index_w       = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int32_t *<span class="keyword">&gt;</span>(offsets_i.ptr()));</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span>    dx_val        = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(dx_i.ptr()));</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span>    dy_val        = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(dy_i.ptr()));</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span>    pixel_row_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(src_i.ptr());</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160; </div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> a00 = (0 &lt;= index_w &amp;&amp; index_w &lt; in_dim_w &amp;&amp; 0 &lt;= index_h &amp;&amp; index_h &lt; in_dim_h)</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                                     ? (*(pixel_row_ptr + index_w + index_h * in_stride_w))</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                                     : const_border_value;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> a01 = (-1 &lt;= index_w &amp;&amp; index_w &lt; in_dim_w - 1 &amp;&amp; 0 &lt;= index_h &amp;&amp; index_h &lt; in_dim_h)</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                                     ? (*(pixel_row_ptr + index_w + 1 + index_h * in_stride_w))</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                                     : const_border_value;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> a10 = (0 &lt;= index_w &amp;&amp; index_w &lt; in_dim_w &amp;&amp; -1 &lt;= index_h &amp;&amp; index_h &lt; in_dim_h - 1)</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                                     ? (*(pixel_row_ptr + index_w + index_h * in_stride_w + in_stride_w))</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                                     : const_border_value;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> a11 = (-1 &lt;= index_w &amp;&amp; index_w &lt; in_dim_w - 1 &amp;&amp; -1 &lt;= index_h &amp;&amp; index_h &lt; in_dim_h - 1)</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                                     ? (*(pixel_row_ptr + index_w + 1 + index_h * in_stride_w + in_stride_w))</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                                     : const_border_value;</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160; </div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                *<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(dst_i.ptr()) =</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                    <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1scale__helpers.xhtml#aeb969d3b0e5ceb8597c39b708f0df6e8">scale_helpers::delta_bilinear</a>(a00, a01, a10, a11, dx_val, dy_val));</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            },</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;            src_i, offsets_i, dx_i, dy_i, dst_i);</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    }</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (border_mode == <a class="code" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a4ef59320fbe90fe47d40f1f71e4c5daa">BorderMode::REPLICATE</a>)</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    {</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            window,</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            {</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span>  index_h       = std::floor((<span class="keywordtype">id</span>.y() + sampling_offset) * hr - sampling_offset);</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> index_w       = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int32_t *<span class="keyword">&gt;</span>(offsets_i.ptr()));</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> dx_val        = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(dx_i.ptr()));</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> dy_val        = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(dy_i.ptr()));</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> pixel_row_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(src_i.ptr());</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160; </div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                <span class="keyword">auto</span> clamped_x  = utility::clamp&lt;int&gt;(index_w, 0, in_dim_w - 1);</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                <span class="keyword">auto</span> clamped_x1 = utility::clamp&lt;int&gt;(index_w + 1, 0, in_dim_w - 1);</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                <span class="keyword">auto</span> clamped_y  = utility::clamp&lt;int&gt;(index_h, 0, in_dim_h - 1);</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                <span class="keyword">auto</span> clamped_y1 = utility::clamp&lt;int&gt;(index_h + 1, 0, in_dim_h - 1);</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160; </div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> a00 = *(pixel_row_ptr + clamped_x + clamped_y * in_stride_w);</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> a01 = *(pixel_row_ptr + clamped_x1 + clamped_y * in_stride_w);</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> a10 = *(pixel_row_ptr + clamped_x + clamped_y1 * in_stride_w);</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> a11 = *(pixel_row_ptr + clamped_x1 + clamped_y1 * in_stride_w);</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160; </div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                *<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(dst_i.ptr()) =</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                    <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1scale__helpers.xhtml#aeb969d3b0e5ceb8597c39b708f0df6e8">scale_helpers::delta_bilinear</a>(a00, a01, a10, a11, dx_val, dy_val));</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;            },</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            src_i, offsets_i, dx_i, dy_i, dst_i);</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    }</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    {</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Not implemented&quot;</span>);</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    }</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;}</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="preprocessor">#endif // ENABLE_NCHW_KERNELS</span></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160; </div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00219"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#af9b26a65178cfe477d292f394c0638b3">  219</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#af9b26a65178cfe477d292f394c0638b3">nearest_neon_scale</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>,</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                        <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>       *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>,</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *offsets,</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                        <span class="keywordtype">float</span>          sampling_offset,</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                        <span class="keywordtype">bool</span>           align_corners,</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a>  &amp;window)</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;{</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(offsets);</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160; </div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="comment">// Compute the ratio between source and destination dimensions</span></div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae78a2afc8cb469d8629dc419237e5c68">scale_x</a> =</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        <a class="code" href="namespacearm__compute_1_1scale__utils.xhtml#a8c25b29542a5312b947f72e5ea5c825b">scale_utils::calculate_resize_ratio</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(1), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;dimension(1), align_corners);</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaaab31fd732b950bf0d4b98f00e259c0">scale_y</a> =</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        <a class="code" href="namespacearm__compute_1_1scale__utils.xhtml#a8c25b29542a5312b947f72e5ea5c825b">scale_utils::calculate_resize_ratio</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(2), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;dimension(2), align_corners);</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160; </div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> in_stride_y  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes()[1];</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> in_stride_z  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes()[2];</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> in_stride_w  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes()[3];</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> out_stride_y = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;strides_in_bytes()[1];</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> out_stride_z = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;strides_in_bytes()[2];</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> out_stride_w = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;strides_in_bytes()[3];</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> out_dim_ch   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;dimension(0);</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> step_cout    = 16 / <span class="keyword">sizeof</span>(T);</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160; </div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> window_execution = window;</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    window_execution.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 1, 1));</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> win_in_out(window);</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    win_in_out.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 0, 0));</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    win_in_out.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 0, 0));</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> in(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, win_in_out);</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> out(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win_in_out);</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160; </div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> xo_start = window_execution.<a class="code" href="classarm__compute_1_1_window.xhtml#a1b522b073f3ca32d24eb4e03495ef8a6">y</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>();</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> xo_end   = window_execution.<a class="code" href="classarm__compute_1_1_window.xhtml#a1b522b073f3ca32d24eb4e03495ef8a6">y</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">end</a>();</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> xo_step  = window_execution.<a class="code" href="classarm__compute_1_1_window.xhtml#a1b522b073f3ca32d24eb4e03495ef8a6">y</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">step</a>();</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> yo_start = window_execution.<a class="code" href="classarm__compute_1_1_window.xhtml#a51a8c7a9d2fa20943c213e85eb8d9caf">z</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>();</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> yo_end   = window_execution.<a class="code" href="classarm__compute_1_1_window.xhtml#a51a8c7a9d2fa20943c213e85eb8d9caf">z</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">end</a>();</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> yo_step  = window_execution.<a class="code" href="classarm__compute_1_1_window.xhtml#a51a8c7a9d2fa20943c213e85eb8d9caf">z</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">step</a>();</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> bo_start = window_execution[3].start();</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> bo_end   = window_execution[3].end();</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> bo_step  = window_execution[3].step();</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160; </div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> bo = bo_start; bo &lt; bo_end; bo += bo_step)</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    {</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        <span class="keyword">const</span> uint8_t *in_ptr_base  = in.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>() + bo * in_stride_w;</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        uint8_t       *out_ptr_base = out.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>() + bo * out_stride_w;</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160; </div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> yo = yo_start; yo &lt; yo_end; yo += yo_step)</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        {</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;            <span class="comment">// Floating-point coordinate</span></div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;            <span class="keywordtype">float</span> yi_f = ((yo + sampling_offset) * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaaab31fd732b950bf0d4b98f00e259c0">scale_y</a>);</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;            <span class="keywordtype">int</span>   yi   = 0;</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;            <span class="keywordflow">if</span> (align_corners)</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;            {</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                yi = <a class="code" href="namespacearm__compute_1_1utils_1_1rounding.xhtml#aeecc6e8935077dc93cc5079fe98d3adc">utils::rounding::round_half_away_from_zero</a>(yi_f);</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;            }</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;            {</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                yi = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(std::floor(yi_f));</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;            }</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160; </div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> xo = xo_start; xo &lt; xo_end; xo += xo_step)</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;            {</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                <span class="comment">// Floating-point coordinate</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                <span class="keywordtype">float</span> xi_f = ((xo + sampling_offset) * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae78a2afc8cb469d8629dc419237e5c68">scale_x</a>);</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                <span class="keywordtype">int</span>   xi   = 0;</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                <span class="keywordflow">if</span> (align_corners)</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                {</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                    xi = <a class="code" href="namespacearm__compute_1_1utils_1_1rounding.xhtml#aeecc6e8935077dc93cc5079fe98d3adc">utils::rounding::round_half_away_from_zero</a>(xi_f);</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                }</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                {</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                    xi = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(std::floor(xi_f));</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                }</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160; </div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                <span class="keyword">const</span> uint8_t *in_ptr  = in_ptr_base + xi * in_stride_y + yi * in_stride_z;</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                uint8_t       *out_ptr = out_ptr_base + xo * out_stride_y + yo * out_stride_z;</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160; </div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                <span class="keywordtype">int</span> cout = 0;</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                <span class="keywordflow">for</span> (; cout &lt;= (out_dim_ch - step_cout); cout += step_cout)</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                {</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                    <span class="keyword">auto</span> out0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr + cout * <span class="keyword">sizeof</span>(T)));</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                    <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out_ptr + cout * <span class="keyword">sizeof</span>(T)), out0);</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                }</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160; </div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                <span class="keywordflow">for</span> (; cout &lt; out_dim_ch; ++cout)</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                {</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                    <span class="keyword">auto</span> out0 = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr + cout * <span class="keyword">sizeof</span>(T)));</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                    *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out_ptr + cout * <span class="keyword">sizeof</span>(T))) = out0;</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                }</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;            }</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        }</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    }</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;}</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160; </div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00315"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a19c90203a243568f6429307584a1475a">  315</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a19c90203a243568f6429307584a1475a">bilinear_neon_scale</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>,</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                         <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>       *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>,</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                         <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *offsets,</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                         <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dx,</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                         <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dy,</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                         <a class="code" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a>     border_mode,</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;                         <a class="code" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a>     constant_border_value,</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;                         <span class="keywordtype">float</span>          sampling_offset,</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;                         <span class="keywordtype">bool</span>           align_corners,</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;                         <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a>  &amp;window)</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;{</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(offsets);</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(dx);</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(dy);</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    <span class="keyword">using</span> ExactTagType = <span class="keyword">typename</span> <a class="code" href="namespacearm__compute_1_1wrapper_1_1traits.xhtml#acf6b3be295be8dbd7897536bcd7561a3">wrapper::traits::neon_bitvector_tag_t&lt;T, wrapper::traits::BitWidth::W128&gt;</a>;</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160; </div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    <span class="comment">// Compute the ratio between source and destination dimensions</span></div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae78a2afc8cb469d8629dc419237e5c68">scale_x</a> =</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        <a class="code" href="namespacearm__compute_1_1scale__utils.xhtml#a8c25b29542a5312b947f72e5ea5c825b">scale_utils::calculate_resize_ratio</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(1), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;dimension(1), align_corners);</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaaab31fd732b950bf0d4b98f00e259c0">scale_y</a> =</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;        <a class="code" href="namespacearm__compute_1_1scale__utils.xhtml#a8c25b29542a5312b947f72e5ea5c825b">scale_utils::calculate_resize_ratio</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(2), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;dimension(2), align_corners);</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160; </div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> in_stride_y  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes()[1];</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> in_stride_z  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes()[2];</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> in_stride_w  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes()[3];</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> out_stride_y = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;strides_in_bytes()[1];</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> out_stride_z = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;strides_in_bytes()[2];</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> out_stride_w = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;strides_in_bytes()[3];</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> in_dim_w     = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(1);</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> in_dim_h     = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(2);</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> out_dim_ch   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;dimension(0);</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> step_cout    = 16 / <span class="keyword">sizeof</span>(T);</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160; </div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> window_execution = window;</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    window_execution.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 1, 1));</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> win_in_out(window);</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    win_in_out.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 0, 0));</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    win_in_out.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 0, 0));</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> in(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, win_in_out);</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> out(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win_in_out);</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160; </div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> xo_start = window_execution.<a class="code" href="classarm__compute_1_1_window.xhtml#a1b522b073f3ca32d24eb4e03495ef8a6">y</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>();</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> xo_end   = window_execution.<a class="code" href="classarm__compute_1_1_window.xhtml#a1b522b073f3ca32d24eb4e03495ef8a6">y</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">end</a>();</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> xo_step  = window_execution.<a class="code" href="classarm__compute_1_1_window.xhtml#a1b522b073f3ca32d24eb4e03495ef8a6">y</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">step</a>();</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> yo_start = window_execution.<a class="code" href="classarm__compute_1_1_window.xhtml#a51a8c7a9d2fa20943c213e85eb8d9caf">z</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>();</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> yo_end   = window_execution.<a class="code" href="classarm__compute_1_1_window.xhtml#a51a8c7a9d2fa20943c213e85eb8d9caf">z</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">end</a>();</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> yo_step  = window_execution.<a class="code" href="classarm__compute_1_1_window.xhtml#a51a8c7a9d2fa20943c213e85eb8d9caf">z</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">step</a>();</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> bo_start = window_execution[3].start();</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> bo_end   = window_execution[3].end();</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> bo_step  = window_execution[3].step();</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160; </div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    <span class="keywordflow">if</span> (border_mode == <a class="code" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a8d6b5cada83510220f59e00ce86d4d92">BorderMode::CONSTANT</a>)</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    {</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;<span class="preprocessor">#ifdef __ARM_FEATURE_FP16_VECTOR_ARITHMETIC</span></div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;        <span class="keyword">using</span> ConstType = <span class="keyword">typename</span> std::conditional&lt;std::is_same&lt;T, float16_t&gt;::value, <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a>, T&gt;<a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">::type</a>;</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;<span class="preprocessor">#else  </span><span class="comment">/* __ARM_FEATURE_FP16_VECTOR_ARITHMETIC */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;        <span class="keyword">using</span> ConstType = T;</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __ARM_FEATURE_FP16_VECTOR_ARITHMETIC */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;        <span class="keyword">const</span> T const_border_value = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(constant_border_value.<a class="code" href="classarm__compute_1_1_pixel_value.xhtml#a66c4c1f8b1962d71162d7ac0b3ef65bc">get</a>&lt;ConstType&gt;());</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160; </div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> bo = bo_start; bo &lt; bo_end; bo += bo_step)</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;        {</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;            <span class="keyword">const</span> uint8_t *in_ptr_base  = in.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>() + bo * in_stride_w;</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;            uint8_t       *out_ptr_base = out.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>() + bo * out_stride_w;</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160; </div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> yo = yo_start; yo &lt; yo_end; yo += yo_step)</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;            {</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                <span class="comment">// Floating-point coordinate</span></div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> yi_f = ((yo + sampling_offset) * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaaab31fd732b950bf0d4b98f00e259c0">scale_y</a> - sampling_offset);</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;                <span class="comment">// Integer coordinate</span></div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> yi = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(std::floor(yi_f));</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;                <span class="comment">// Weight for the y coordinate</span></div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> a1 = (yi_f - <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(yi));</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> b1 = (1.f - a1);</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160; </div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> xo = xo_start; xo &lt; xo_end; xo += xo_step)</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                {</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                    <span class="comment">// Floating-point coordinate</span></div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> xi_f = ((xo + sampling_offset) * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae78a2afc8cb469d8629dc419237e5c68">scale_x</a> - sampling_offset);</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                    <span class="comment">// Integer coordinate</span></div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> xi = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(std::floor(xi_f));</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;                    <span class="comment">// Weight for the x coordinate</span></div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> a = (xi_f - <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(xi));</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> = (1.f - a);</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160; </div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> s00_s = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> * b1);</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> s01_s = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(a * b1);</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> s10_s = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> * a1);</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> s11_s = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(a * a1);</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160; </div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;                    <span class="keyword">const</span> uint8_t *in_ptr  = in_ptr_base + xi * in_stride_y + yi * in_stride_z;</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;                    uint8_t       *out_ptr = out_ptr_base + xo * out_stride_y + yo * out_stride_z;</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160; </div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;                    <span class="keywordtype">int</span> cout = 0;</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;                    <span class="keywordflow">for</span> (; cout &lt;= (out_dim_ch - step_cout); cout += step_cout)</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                    {</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;                        <span class="keyword">auto</span> in00 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(const_border_value), ExactTagType{});</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;                        <span class="keyword">auto</span> in01 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(const_border_value), ExactTagType{});</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;                        <span class="keyword">auto</span> in10 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(const_border_value), ExactTagType{});</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;                        <span class="keyword">auto</span> in11 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(const_border_value), ExactTagType{});</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;                        <span class="keywordflow">if</span> ((yi &gt;= 0) &amp;&amp; (yi &lt; in_dim_h))</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;                        {</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;                            <span class="keywordflow">if</span> ((xi &gt;= 0) &amp;&amp; (xi &lt; in_dim_w))</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;                            {</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;                                in00 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr + cout * <span class="keyword">sizeof</span>(T)));</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;                            }</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;                            <span class="keywordflow">if</span> (((xi + 1) &gt;= 0) &amp;&amp; ((xi + 1) &lt; in_dim_w))</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;                            {</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;                                in01 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;                                    <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr + cout * <span class="keyword">sizeof</span>(T) + in_stride_y));</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;                            }</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;                        }</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;                        <span class="keywordflow">if</span> (((yi + 1) &gt;= 0) &amp;&amp; ((yi + 1) &lt; in_dim_h))</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;                        {</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;                            <span class="keywordflow">if</span> ((xi &gt;= 0) &amp;&amp; (xi &lt; in_dim_w))</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;                            {</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;                                in10 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;                                    <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr + cout * <span class="keyword">sizeof</span>(T) + in_stride_z));</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;                            }</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;                            <span class="keywordflow">if</span> (((xi + 1) &gt;= 0) &amp;&amp; ((xi + 1) &lt; in_dim_w))</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;                            {</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;                                in11 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;                                    <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr + cout * <span class="keyword">sizeof</span>(T) + in_stride_y + in_stride_z));</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;                            }</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;                        }</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160; </div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> s00  = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(s00_s, ExactTagType{});</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> s01  = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(s01_s, ExactTagType{});</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> s10  = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(s10_s, ExactTagType{});</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> s11  = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(s11_s, ExactTagType{});</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;                        <span class="keyword">auto</span>       out0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(0), ExactTagType{});</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;                        out0            = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out0, in00, s00);</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;                        out0            = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out0, in01, s01);</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;                        out0            = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out0, in10, s10);</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;                        out0            = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out0, in11, s11);</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out_ptr + cout * <span class="keyword">sizeof</span>(T)), out0);</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;                    }</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160; </div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;                    <span class="keywordflow">for</span> (; cout &lt; out_dim_ch; ++cout)</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;                    {</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;                        <span class="keyword">auto</span> in00 = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(const_border_value);</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;                        <span class="keyword">auto</span> in01 = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(const_border_value);</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;                        <span class="keyword">auto</span> in10 = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(const_border_value);</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;                        <span class="keyword">auto</span> in11 = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(const_border_value);</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;                        <span class="keywordflow">if</span> ((yi &gt;= 0) &amp;&amp; (yi &lt; in_dim_h))</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;                        {</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;                            <span class="keywordflow">if</span> ((xi &gt;= 0) &amp;&amp; (xi &lt; in_dim_w))</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;                            {</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;                                in00 = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr + cout * <span class="keyword">sizeof</span>(T)));</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;                            }</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;                            <span class="keywordflow">if</span> (((xi + 1) &gt;= 0) &amp;&amp; ((xi + 1) &lt; in_dim_w))</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;                            {</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;                                in01 = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr + cout * <span class="keyword">sizeof</span>(T) + in_stride_y));</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;                            }</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;                        }</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;                        <span class="keywordflow">if</span> (((yi + 1) &gt;= 0) &amp;&amp; ((yi + 1) &lt; in_dim_h))</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;                        {</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;                            <span class="keywordflow">if</span> ((xi &gt;= 0) &amp;&amp; (xi &lt; in_dim_w))</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;                            {</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;                                in10 = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr + cout * <span class="keyword">sizeof</span>(T) + in_stride_z));</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;                            }</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;                            <span class="keywordflow">if</span> (((xi + 1) &gt;= 0) &amp;&amp; ((xi + 1) &lt; in_dim_w))</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;                            {</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;                                in11 = *(</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;                                    <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr + cout * <span class="keyword">sizeof</span>(T) + in_stride_y + in_stride_z));</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;                            }</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;                        }</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;                        <span class="keyword">auto</span> out0 = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(0);</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;                        out0 += in00 * s00_s;</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;                        out0 += in01 * s01_s;</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;                        out0 += in10 * s10_s;</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;                        out0 += in11 * s11_s;</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;                        *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out_ptr + cout * <span class="keyword">sizeof</span>(T))) = out0;</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;                    }</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;                }</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;            }</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;        }</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    }</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (border_mode == <a class="code" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a4ef59320fbe90fe47d40f1f71e4c5daa">BorderMode::REPLICATE</a>)</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    {</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> bo = bo_start; bo &lt; bo_end; bo += bo_step)</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;        {</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;            <span class="keyword">const</span> uint8_t *in_ptr  = in.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>() + bo * in_stride_w;</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;            uint8_t       *out_ptr = out.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>() + bo * out_stride_w;</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160; </div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> yo = yo_start; yo &lt; yo_end; yo += yo_step)</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;            {</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;                <span class="comment">// Floating-point coordinate</span></div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> yi_f = ((yo + sampling_offset) * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaaab31fd732b950bf0d4b98f00e259c0">scale_y</a> - sampling_offset);</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;                <span class="comment">// Integer coordinate</span></div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> yi = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(std::floor(yi_f));</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;                <span class="comment">// Weight for the y coordinate</span></div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> a1 = (yi_f - <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(yi));</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> b1 = (1.f - a1);</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160; </div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> yi0 = utility::clamp&lt;int&gt;(yi, 0, in_dim_h - 1);</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> yi1 = utility::clamp&lt;int&gt;(yi + 1, 0, in_dim_h - 1);</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160; </div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> yi0_offset = yi0 * in_stride_z;</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> yi1_offset = yi1 * in_stride_z;</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160; </div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> y_offset = yo * out_stride_z;</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> xo = xo_start; xo &lt; xo_end; xo += xo_step)</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;                {</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;                    <span class="comment">// Floating-point coordinate</span></div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> xi_f = ((xo + sampling_offset) * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae78a2afc8cb469d8629dc419237e5c68">scale_x</a> - sampling_offset);</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;                    <span class="comment">// Integer coordinate</span></div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> xi = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(std::floor(xi_f));</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;                    <span class="comment">// Weight for the x coordinate</span></div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> a = (xi_f - <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(xi));</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> = (1.f - a);</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160; </div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> s00_s = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> * b1);</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> s01_s = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(a * b1);</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> s10_s = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> * a1);</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> s11_s = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(a * a1);</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160; </div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> s00 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(s00_s, ExactTagType{});</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> s01 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(s01_s, ExactTagType{});</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> s10 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(s10_s, ExactTagType{});</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> s11 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(s11_s, ExactTagType{});</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160; </div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">int</span> xi0 = utility::clamp&lt;int&gt;(xi, 0, in_dim_w - 1);</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">int</span> xi1 = utility::clamp&lt;int&gt;(xi + 1, 0, in_dim_w - 1);</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160; </div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">int</span> xi0_offset = xi0 * in_stride_y;</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">int</span> xi1_offset = xi1 * in_stride_y;</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160; </div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> = xo * out_stride_y + y_offset;</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160; </div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;                    <span class="keywordtype">int</span> cout = 0;</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;                    <span class="keywordflow">for</span> (; cout &lt;= (out_dim_ch - step_cout); cout += step_cout)</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;                    {</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> in00 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;                            <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr + cout * <span class="keyword">sizeof</span>(T) + xi0_offset + yi0_offset));</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> in01 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;                            <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr + cout * <span class="keyword">sizeof</span>(T) + xi1_offset + yi0_offset));</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> in10 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;                            <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr + cout * <span class="keyword">sizeof</span>(T) + xi0_offset + yi1_offset));</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> in11 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;                            <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr + cout * <span class="keyword">sizeof</span>(T) + xi1_offset + yi1_offset));</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160; </div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;                        <span class="keyword">auto</span> out0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(in00, s00);</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;                        out0      = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out0, in01, s01);</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;                        out0      = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out0, in10, s10);</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;                        out0      = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out0, in11, s11);</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out_ptr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> + cout * <span class="keyword">sizeof</span>(T)), out0);</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;                    }</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160; </div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;                    <span class="keywordflow">for</span> (; cout &lt; out_dim_ch; ++cout)</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;                    {</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;                        <span class="keyword">const</span> T in00 =</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;                            *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr + cout * <span class="keyword">sizeof</span>(T) + xi0_offset + yi0_offset));</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;                        <span class="keyword">const</span> T in01 =</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;                            *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr + cout * <span class="keyword">sizeof</span>(T) + xi1_offset + yi0_offset));</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;                        <span class="keyword">const</span> T in10 =</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;                            *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr + cout * <span class="keyword">sizeof</span>(T) + xi0_offset + yi1_offset));</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;                        <span class="keyword">const</span> T in11 =</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;                            *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr + cout * <span class="keyword">sizeof</span>(T) + xi1_offset + yi1_offset));</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160; </div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;                        T out0 = in00 * s00_s;</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;                        out0 += in01 * s01_s;</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;                        out0 += in10 * s10_s;</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;                        out0 += in11 * s11_s;</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;                        *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out_ptr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> + cout * <span class="keyword">sizeof</span>(T))) = out0;</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;                    }</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;                }</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;            }</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;        }</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;    }</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;    {</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;        <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Not implemented&quot;</span>);</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;    }</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;}</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160; </div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00592"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a2bc4661d8856bc18b82ecece8694634c">  592</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a2bc4661d8856bc18b82ecece8694634c">common_neon_scale</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>      *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>,</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;                       <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>            *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>,</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;                       <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>      *offsets,</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;                       <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>      *dx,</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;                       <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>      *dy,</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;                       <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a> policy,</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;                       <a class="code" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a>          border_mode,</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;                       <a class="code" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a>          constant_border_value,</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;                       <span class="keywordtype">float</span>               sampling_offset,</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;                       <span class="keywordtype">bool</span>                align_corners,</div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;                       <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a>       &amp;window)</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;{</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;    <span class="keywordflow">if</span> (policy == <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9aad6fddf718ad19b063e02fdd7e8e3e65">InterpolationPolicy::BILINEAR</a>)</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;    {</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;        bilinear_neon_scale&lt;T&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, offsets, dx, dy, border_mode, constant_border_value, sampling_offset,</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;                               align_corners, window);</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;    }</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (policy == <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2">InterpolationPolicy::NEAREST_NEIGHBOR</a>)</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;    {</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;        nearest_neon_scale&lt;T&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, offsets, sampling_offset, align_corners, window);</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;    }</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;}</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;} <span class="comment">// namespace cpu</span></div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;} <span class="comment">// namespace arm_compute</span></div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160; </div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;<span class="preprocessor">#endif // ACL_SRC_CPU_KERNELS_SCALE_NEON_LIST_H</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="anamespacearm__compute_xhtml_a15a05537a472ee742404821851529327a8d6b5cada83510220f59e00ce86d4d92"><div class="ttname"><a href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a8d6b5cada83510220f59e00ce86d4d92">arm_compute::BorderMode::CONSTANT</a></div><div class="ttdeci">@ CONSTANT</div><div class="ttdoc">Pixels outside the image are assumed to have a constant value.</div></div>
<div class="ttc" id="anamespacearm__compute_1_1scale__helpers_xhtml_aeb969d3b0e5ceb8597c39b708f0df6e8"><div class="ttname"><a href="namespacearm__compute_1_1scale__helpers.xhtml#aeb969d3b0e5ceb8597c39b708f0df6e8">arm_compute::scale_helpers::delta_bilinear</a></div><div class="ttdeci">float delta_bilinear(float a00, float a01, float a10, float a11, float dx_val, float dy_val)</div><div class="ttdoc">Computes bilinear interpolation using the top-left, top-right, bottom-left, bottom-right pixels and t...</div><div class="ttdef"><b>Definition:</b> <a href="_scale_helpers_8h_source.xhtml#l00193">ScaleHelpers.h:193</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_1_1_dimension_xhtml_ab24e31d1a4830bf79564ee902ec6c060"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">arm_compute::Window::Dimension::start</a></div><div class="ttdeci">constexpr int start() const</div><div class="ttdoc">Return the start of the dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00096">Window.h:96</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="agemm__interleaved_8hpp_xhtml_a6fbca3dca9ecb372332fc525529cc086"><div class="ttname"><a href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></div><div class="ttdeci">decltype(strategy::transforms) typedef type</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00347">gemm_interleaved.hpp:347</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_pixel_value_xhtml"><div class="ttname"><a href="classarm__compute_1_1_pixel_value.xhtml">arm_compute::PixelValue</a></div><div class="ttdoc">Class describing the value of a pixel for any image format.</div><div class="ttdef"><b>Definition:</b> <a href="_pixel_value_8h_source.xhtml#l00035">PixelValue.h:35</a></div></div>
<div class="ttc" id="acpu_2kernels_2scale_2neon_2list_8h_xhtml_a7b7e4d4bab725fddfc0b8bc110efd60e"><div class="ttname"><a href="cpu_2kernels_2scale_2neon_2list_8h.xhtml#a7b7e4d4bab725fddfc0b8bc110efd60e">DECLARE_SCALE_KERNEL</a></div><div class="ttdeci">#define DECLARE_SCALE_KERNEL(func_name)</div><div class="ttdef"><b>Definition:</b> <a href="cpu_2kernels_2scale_2neon_2list_8h_source.xhtml#l00038">list.h:38</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_helpers_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_helpers_8h.xhtml">Helpers.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_1_1_dimension_xhtml_a918580dc9188825d67dbb203a43d02fe"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">arm_compute::Window::Dimension::step</a></div><div class="ttdeci">constexpr int step() const</div><div class="ttdoc">Return the step of the dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00106">Window.h:106</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_pixel_value_xhtml_a66c4c1f8b1962d71162d7ac0b3ef65bc"><div class="ttname"><a href="classarm__compute_1_1_pixel_value.xhtml#a66c4c1f8b1962d71162d7ac0b3ef65bc">arm_compute::PixelValue::get</a></div><div class="ttdeci">void get(uint8_t &amp;v) const</div><div class="ttdoc">Interpret the pixel value as a U8.</div><div class="ttdef"><b>Definition:</b> <a href="_pixel_value_8h_source.xhtml#l00228">PixelValue.h:228</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="anchw_2scale_8cl_xhtml_a42131df7a754ea279bea023c2e18b077"><div class="ttname"><a href="nchw_2scale_8cl.xhtml#a42131df7a754ea279bea023c2e18b077">scale_bilinear_nchw</a></div><div class="ttdeci">__kernel void scale_bilinear_nchw(__global uchar *in_ptr, uint in_stride_x, uint in_step_x, uint in_stride_y, uint in_step_y, uint in_offset_first_element_in_bytes, __global uchar *out_ptr, uint out_stride_x, uint out_step_x, uint out_stride_y, uint out_step_y, uint out_offset_first_element_in_bytes)</div><div class="ttdoc">Performs an affine transformation on an image interpolating with the BILINEAR method.</div><div class="ttdef"><b>Definition:</b> <a href="nchw_2scale_8cl_source.xhtml#l00158">scale.cl:158</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_aa96e81276ee4f87ab386cd05a5539a7d"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">arm_compute::Window::DimX</a></div><div class="ttdeci">static constexpr size_t DimX</div><div class="ttdoc">Alias for dimension 0 also known as X dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00043">Window.h:43</a></div></div>
<div class="ttc" id="a_window_8h_xhtml"><div class="ttname"><a href="_window_8h.xhtml">Window.h</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00354">Error.h:354</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a966a9c417ce5e94dca08d9b5e745c0c9"><div class="ttname"><a href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">arm_compute::InterpolationPolicy</a></div><div class="ttdeci">InterpolationPolicy</div><div class="ttdoc">Interpolation method.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00360">Types.h:360</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml">arm_compute::ITensor</a></div><div class="ttdoc">Interface for CPU tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_8h_source.xhtml#l00036">ITensor.h:36</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a77f54eded7fef436d3a4f21ad5a00da6"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">arm_compute::wrapper::vloadq</a></div><div class="ttdeci">uint8x16_t vloadq(const uint8_t *ptr)</div><div class="ttdef"><b>Definition:</b> <a href="load_8h_source.xhtml#l00058">load.h:58</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1utils_1_1rounding_xhtml_aeecc6e8935077dc93cc5079fe98d3adc"><div class="ttname"><a href="namespacearm__compute_1_1utils_1_1rounding.xhtml#aeecc6e8935077dc93cc5079fe98d3adc">arm_compute::utils::rounding::round_half_away_from_zero</a></div><div class="ttdeci">T round_half_away_from_zero(T value)</div><div class="ttdoc">Round floating-point value with half value rounding away from zero.</div><div class="ttdef"><b>Definition:</b> <a href="support_2_rounding_8h_source.xhtml#l00107">Rounding.h:107</a></div></div>
<div class="ttc" id="awrapper_8h_xhtml"><div class="ttname"><a href="wrapper_8h.xhtml">wrapper.h</a></div><div class="ttdoc">Includes all wrapper headers at once.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a73e2825fd61d349c5ca2f5313e3c8ea1"><div class="ttname"><a href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">arm_compute::half</a></div><div class="ttdeci">half_float::half half</div><div class="ttdoc">16-bit floating point type</div><div class="ttdef"><b>Definition:</b> <a href="_core_types_8h_source.xhtml#l00036">CoreTypes.h:36</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_iterator_xhtml_ab260e292b1df3944bc1d55a9b2301e41"><div class="ttname"><a href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">arm_compute::Iterator::ptr</a></div><div class="ttdeci">constexpr uint8_t * ptr() const</div><div class="ttdoc">Return a pointer to the current pixel.</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00147">Helpers.inl:147</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_af9b26a65178cfe477d292f394c0638b3"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#af9b26a65178cfe477d292f394c0638b3">arm_compute::cpu::nearest_neon_scale</a></div><div class="ttdeci">void nearest_neon_scale(const ITensor *src, ITensor *dst, const ITensor *offsets, float sampling_offset, bool align_corners, const Window &amp;window)</div><div class="ttdef"><b>Definition:</b> <a href="cpu_2kernels_2scale_2neon_2list_8h_source.xhtml#l00219">list.h:219</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a7110248fdbe9eb708cda53069adaa471"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a7110248fdbe9eb708cda53069adaa471">arm_compute::cpu::fp16_bilinear_neon_scale_nchw</a></div><div class="ttdeci">void fp16_bilinear_neon_scale_nchw(const ITensor *src, ITensor *dst, const ITensor *offsets, const ITensor *dx, const ITensor *dy, InterpolationPolicy policy, BorderMode border_mode, PixelValue constant_border_value, float sampling_offset, bool align_corners, const Window &amp;window)</div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a66c8dd218a4863a14fec363e3dd13dc4"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">arm_compute::wrapper::vmul</a></div><div class="ttdeci">uint8x8_t vmul(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="mul_8h_source.xhtml#l00039">mul.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a6c0dcc38187027dcb89cd9724bc5a823"><div class="ttname"><a href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;...iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00074">Helpers.inl:74</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_iterator_xhtml"><div class="ttname"><a href="classarm__compute_1_1_iterator.xhtml">arm_compute::Iterator</a></div><div class="ttdoc">Iterator updated by execute_window_loop for each window element.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00046">Helpers.h:46</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a9f0a2858d9233ec0443a1d1f2b3ca07c"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a9f0a2858d9233ec0443a1d1f2b3ca07c">arm_compute::cpu::u8_neon_scale</a></div><div class="ttdeci">void u8_neon_scale(const ITensor *src, ITensor *dst, const ITensor *offsets, const ITensor *dx, const ITensor *dy, InterpolationPolicy policy, BorderMode border_mode, PixelValue constant_border_value, float sampling_offset, bool align_corners, const Window &amp;window)</div><div class="ttdef"><b>Definition:</b> <a href="scale_2neon_2integer_8cpp_source.xhtml#l00737">integer.cpp:737</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a19c90203a243568f6429307584a1475a"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a19c90203a243568f6429307584a1475a">arm_compute::cpu::bilinear_neon_scale</a></div><div class="ttdeci">void bilinear_neon_scale(const ITensor *src, ITensor *dst, const ITensor *offsets, const ITensor *dx, const ITensor *dy, BorderMode border_mode, PixelValue constant_border_value, float sampling_offset, bool align_corners, const Window &amp;window)</div><div class="ttdef"><b>Definition:</b> <a href="cpu_2kernels_2scale_2neon_2list_8h_source.xhtml#l00315">list.h:315</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_aaaab31fd732b950bf0d4b98f00e259c0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aaaab31fd732b950bf0d4b98f00e259c0">arm_compute::test::validation::scale_y</a></div><div class="ttdeci">const float scale_y</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00260">Scale.cpp:260</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_a1b522b073f3ca32d24eb4e03495ef8a6"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a1b522b073f3ca32d24eb4e03495ef8a6">arm_compute::Window::y</a></div><div class="ttdeci">constexpr const Dimension &amp; y() const</div><div class="ttdoc">Alias to access the second dimension of the window.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00167">Window.h:167</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a15a05537a472ee742404821851529327a4ef59320fbe90fe47d40f1f71e4c5daa"><div class="ttname"><a href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a4ef59320fbe90fe47d40f1f71e4c5daa">arm_compute::BorderMode::REPLICATE</a></div><div class="ttdeci">@ REPLICATE</div><div class="ttdoc">Pixels outside the image are assumed to have the same value as the closest image pixel.</div></div>
<div class="ttc" id="asrc_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a009469e4d9b8fce3b6d5e97d2077827d"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a></div><div class="ttdeci">__global uchar * offset(const Image *img, int x, int y)</div><div class="ttdoc">Get the pointer position of a Image.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01142">helpers.h:1142</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a4287931a2912ecb6cece71219ca5478c"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">arm_compute::wrapper::vmla</a></div><div class="ttdeci">uint8x8_t vmla(const uint8x8_t &amp;a, const uint8x8_t &amp;b, const uint8x8_t &amp;c)</div><div class="ttdef"><b>Definition:</b> <a href="mla_8h_source.xhtml#l00046">mla.h:46</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00151">Error.h:151</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_1_1_dimension_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml">arm_compute::Window::Dimension</a></div><div class="ttdoc">Describe one of the image's dimensions with a start, end and step.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00079">Window.h:79</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_acd3d2bba51cb84d34dd7656ad2375a6e"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">arm_compute::Window::set</a></div><div class="ttdeci">void set(size_t dimension, const Dimension &amp;dim)</div><div class="ttdoc">Set the values of a given dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00053">Window.inl:53</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_ae78a2afc8cb469d8629dc419237e5c68"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ae78a2afc8cb469d8629dc419237e5c68">arm_compute::test::validation::scale_x</a></div><div class="ttdeci">const float scale_x</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00259">Scale.cpp:259</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_ad2d402364fa822b0b7775081291eeca9"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">arm_compute::Window::DimY</a></div><div class="ttdeci">static constexpr size_t DimY</div><div class="ttdoc">Alias for dimension 1 also known as Y dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00045">Window.h:45</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a966a9c417ce5e94dca08d9b5e745c0c9aad6fddf718ad19b063e02fdd7e8e3e65"><div class="ttname"><a href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9aad6fddf718ad19b063e02fdd7e8e3e65">arm_compute::InterpolationPolicy::BILINEAR</a></div><div class="ttdeci">@ BILINEAR</div><div class="ttdoc">Output values are defined by bilinear interpolation between the pixels.</div></div>
<div class="ttc" id="a_scale_utils_8h_xhtml"><div class="ttname"><a href="_scale_utils_8h.xhtml">ScaleUtils.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_ae2aa72fde3eb94fa8822a4bb84e8d468"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#ae2aa72fde3eb94fa8822a4bb84e8d468">arm_compute::cpu::s16_neon_scale</a></div><div class="ttdeci">void s16_neon_scale(const ITensor *src, ITensor *dst, const ITensor *offsets, const ITensor *dx, const ITensor *dy, InterpolationPolicy policy, BorderMode border_mode, PixelValue constant_border_value, float sampling_offset, bool align_corners, const Window &amp;window)</div><div class="ttdef"><b>Definition:</b> <a href="scale_2neon_2integer_8cpp_source.xhtml#l00760">integer.cpp:760</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a2bc4661d8856bc18b82ecece8694634c"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a2bc4661d8856bc18b82ecece8694634c">arm_compute::cpu::common_neon_scale</a></div><div class="ttdeci">void common_neon_scale(const ITensor *src, ITensor *dst, const ITensor *offsets, const ITensor *dx, const ITensor *dy, InterpolationPolicy policy, BorderMode border_mode, PixelValue constant_border_value, float sampling_offset, bool align_corners, const Window &amp;window)</div><div class="ttdef"><b>Definition:</b> <a href="cpu_2kernels_2scale_2neon_2list_8h_source.xhtml#l00592">list.h:592</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a594fa7dfda56b0775950658f6937af9c"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a594fa7dfda56b0775950658f6937af9c">arm_compute::cpu::qasymm8_neon_scale</a></div><div class="ttdeci">void qasymm8_neon_scale(const ITensor *src, ITensor *dst, const ITensor *offsets, const ITensor *dx, const ITensor *dy, InterpolationPolicy policy, BorderMode border_mode, PixelValue constant_border_value, float sampling_offset, bool align_corners, const Window &amp;window)</div><div class="ttdef"><b>Definition:</b> <a href="scale_2neon_2qasymm8_8cpp_source.xhtml#l00375">qasymm8.cpp:375</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_ae7943ea9c1f74dc72c62d4cc3966a459"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">arm_compute::wrapper::vstore</a></div><div class="ttdeci">void vstore(uint8_t *ptr, uint8x8_t val)</div><div class="ttdef"><b>Definition:</b> <a href="store_8h_source.xhtml#l00039">store.h:39</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml">arm_compute::Window</a></div><div class="ttdoc">Describe a multidimensional execution window.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00039">Window.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_1_1traits_xhtml_acf6b3be295be8dbd7897536bcd7561a3"><div class="ttname"><a href="namespacearm__compute_1_1wrapper_1_1traits.xhtml#acf6b3be295be8dbd7897536bcd7561a3">arm_compute::wrapper::traits::neon_bitvector_tag_t</a></div><div class="ttdeci">typename neon_bitvector&lt; T, BW &gt;::tag_type neon_bitvector_tag_t</div><div class="ttdoc">Helper type template to get the tag type of a neon vector.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_n_e_o_n_2wrapper_2_traits_8h_source.xhtml#l00141">traits.h:141</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2024 Arm Limited.</div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_a893d17b56b9abc4423ce26e9a24ac5dc"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">arm_compute::Window::DimZ</a></div><div class="ttdeci">static constexpr size_t DimZ</div><div class="ttdoc">Alias for dimension 2 also known as Z dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00047">Window.h:47</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1scale__utils_xhtml_a8c25b29542a5312b947f72e5ea5c825b"><div class="ttname"><a href="namespacearm__compute_1_1scale__utils.xhtml#a8c25b29542a5312b947f72e5ea5c825b">arm_compute::scale_utils::calculate_resize_ratio</a></div><div class="ttdeci">float calculate_resize_ratio(size_t input_size, size_t output_size, bool align_corners=false)</div><div class="ttdoc">Returns resize ratio between input and output with consideration of aligned corners.</div><div class="ttdef"><b>Definition:</b> <a href="_scale_utils_8cpp_source.xhtml#l00032">ScaleUtils.cpp:32</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2"><div class="ttname"><a href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2">arm_compute::InterpolationPolicy::NEAREST_NEIGHBOR</a></div><div class="ttdeci">@ NEAREST_NEIGHBOR</div><div class="ttdoc">Output values are defined to match the source pixel whose center is nearest to the sample position.</div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a5afa676c133f2bd00b896680e5176cd4"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a5afa676c133f2bd00b896680e5176cd4">arm_compute::cpu::qasymm8_signed_neon_scale</a></div><div class="ttdeci">void qasymm8_signed_neon_scale(const ITensor *src, ITensor *dst, const ITensor *offsets, const ITensor *dx, const ITensor *dy, InterpolationPolicy policy, BorderMode border_mode, PixelValue constant_border_value, float sampling_offset, bool align_corners, const Window &amp;window)</div><div class="ttdef"><b>Definition:</b> <a href="scale_2neon_2qasymm8__signed_8cpp_source.xhtml#l00362">qasymm8_signed.cpp:362</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a15a05537a472ee742404821851529327"><div class="ttname"><a href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">arm_compute::BorderMode</a></div><div class="ttdeci">BorderMode</div><div class="ttdoc">Methods available to handle borders.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00231">Types.h:231</a></div></div>
<div class="ttc" id="asupport_2_rounding_8h_xhtml"><div class="ttname"><a href="support_2_rounding_8h.xhtml">Rounding.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_ae7fbf3b06a874297ca3aea18783562c4"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#ae7fbf3b06a874297ca3aea18783562c4">arm_compute::cpu::fp16_nearest_neon_scale_nchw</a></div><div class="ttdeci">void fp16_nearest_neon_scale_nchw(const ITensor *src, ITensor *dst, const ITensor *offsets, const ITensor *dx, const ITensor *dy, InterpolationPolicy policy, BorderMode border_mode, PixelValue constant_border_value, float sampling_offset, bool align_corners, const Window &amp;window)</div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a5df47efaaa19dd62657db56f3d6129f9"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a5df47efaaa19dd62657db56f3d6129f9">arm_compute::cpu::fp16_common_neon_scale</a></div><div class="ttdeci">void fp16_common_neon_scale(const ITensor *src, ITensor *dst, const ITensor *offsets, const ITensor *dx, const ITensor *dy, InterpolationPolicy policy, BorderMode border_mode, PixelValue constant_border_value, float sampling_offset, bool align_corners, const Window &amp;window)</div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_1_1_dimension_xhtml_a0f590bfcf19110f44efc502e7b5c1d9e"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">arm_compute::Window::Dimension::end</a></div><div class="ttdeci">constexpr int end() const</div><div class="ttdoc">Return the end of the dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00101">Window.h:101</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a503eae482390645cffa1439822fa864a"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a503eae482390645cffa1439822fa864a">arm_compute::cpu::s8_neon_scale</a></div><div class="ttdeci">void s8_neon_scale(const ITensor *src, ITensor *dst, const ITensor *offsets, const ITensor *dx, const ITensor *dy, InterpolationPolicy policy, BorderMode border_mode, PixelValue constant_border_value, float sampling_offset, bool align_corners, const Window &amp;window)</div><div class="ttdef"><b>Definition:</b> <a href="scale_2neon_2integer_8cpp_source.xhtml#l00714">integer.cpp:714</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_a51a8c7a9d2fa20943c213e85eb8d9caf"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a51a8c7a9d2fa20943c213e85eb8d9caf">arm_compute::Window::z</a></div><div class="ttdeci">constexpr const Dimension &amp; z() const</div><div class="ttdoc">Alias to access the third dimension of the window.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00176">Window.h:176</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a39e87435be178fba49b76f49426ef873"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">arm_compute::wrapper::vdup_n</a></div><div class="ttdeci">uint8x8_t vdup_n(uint8_t value, traits::vector_64_tag)</div><div class="ttdef"><b>Definition:</b> <a href="dup__n_8h_source.xhtml#l00041">dup_n.h:41</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_2c61f424fd391396db977702a2beee9a.xhtml">cpu</a></li><li class="navelem"><a class="el" href="dir_1de7bcbbdec2bf3559cb3c688662d4f5.xhtml">kernels</a></li><li class="navelem"><a class="el" href="dir_d124c31da0c35b9984b69db8d6578477.xhtml">scale</a></li><li class="navelem"><a class="el" href="dir_5e9e7712b7f30b8f985deeedb9292b59.xhtml">neon</a></li><li class="navelem"><a class="el" href="cpu_2kernels_2scale_2neon_2list_8h.xhtml">list.h</a></li>
    <li class="footer">Generated on Mon Jun 17 2024 15:11:18 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
