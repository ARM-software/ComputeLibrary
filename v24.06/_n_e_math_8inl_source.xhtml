<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/NEON/NEMath.inl Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.06</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_n_e_math_8inl_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">NEMath.inl</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_n_e_math_8inl.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2016-2023 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160; </div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="src_2core_2utils_2_math_8h.xhtml">src/core/utils/Math.h</a>&quot;</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_toolchain_support_8h.xhtml">support/ToolchainSupport.h</a>&quot;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160; </div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;cmath&gt;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;limits&gt;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160; </div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;{<span class="comment"></span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment">/** Logarithm polynomial coefficients */</span></div>
<div class="line"><a name="l00034"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a48fb9cf404e8f7043235bf14105c9793">   34</a></span>&#160;<span class="keyword">const</span> std::array&lt;float32x4_t, 8&gt; <a class="code" href="namespacearm__compute.xhtml#a48fb9cf404e8f7043235bf14105c9793">log_tab</a> = {{</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    vdupq_n_f32(-2.29561495781f),</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    vdupq_n_f32(-2.47071170807f),</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    vdupq_n_f32(-5.68692588806f),</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    vdupq_n_f32(-0.165253549814f),</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    vdupq_n_f32(5.17591238022f),</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    vdupq_n_f32(0.844007015228f),</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    vdupq_n_f32(4.58445882797f),</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    vdupq_n_f32(0.0141278216615f),</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;}};</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">/** Sin polynomial coefficients */</span></div>
<div class="line"><a name="l00046"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#ae3e74f28452dea05869826c30b95f54b">   46</a></span>&#160;constexpr <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute.xhtml#ae3e74f28452dea05869826c30b95f54b">te_sin_coeff2</a> = 0.166666666666f; <span class="comment">// 1/(2*3)</span></div>
<div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a9c1bcf45a03708a37132c1e2df5cd2b0">   47</a></span>&#160;constexpr <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute.xhtml#a9c1bcf45a03708a37132c1e2df5cd2b0">te_sin_coeff3</a> = 0.05f;           <span class="comment">// 1/(4*5)</span></div>
<div class="line"><a name="l00048"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a542bbd5e844a0a494e3e4078a433d44b">   48</a></span>&#160;constexpr <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute.xhtml#a542bbd5e844a0a494e3e4078a433d44b">te_sin_coeff4</a> = 0.023809523810f; <span class="comment">// 1/(6*7)</span></div>
<div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#afe0353e9228b8be37bcdb4a1770f44e3">   49</a></span>&#160;constexpr <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute.xhtml#afe0353e9228b8be37bcdb4a1770f44e3">te_sin_coeff5</a> = 0.013888888889f; <span class="comment">// 1/(8*9)</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160; </div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="preprocessor">#ifndef DOXYGEN_SKIP_THIS</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="keyword">inline</span> float32x4_t prefer_vfmaq_f32(float32x4_t a, float32x4_t <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, float32x4_t c)</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;{</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="preprocessor">#if __ARM_FEATURE_FMA</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keywordflow">return</span> vfmaq_f32(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, c);</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="preprocessor">#else  // __ARM_FEATURE_FMA</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keywordflow">return</span> vmlaq_f32(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, c);</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="preprocessor">#endif // __ARM_FEATURE_FMA</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;}</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160; </div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="keyword">inline</span> float32x4_t <a class="code" href="namespacearm__compute.xhtml#af7a0f3e622aa4bc8c6077d2262a04e2e">vfloorq_f32</a>(float32x4_t val)</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;{</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> float32x4_t CONST_1 = vdupq_n_f32(1.f);</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160; </div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keyword">const</span> int32x4_t   z = vcvtq_s32_f32(val);</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keyword">const</span> float32x4_t r = vcvtq_f32_s32(z);</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160; </div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keywordflow">return</span> vbslq_f32(vcgtq_f32(r, val), vsubq_f32(r, CONST_1), r);</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;}</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160; </div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="keyword">inline</span> float32x4_t <a class="code" href="namespacearm__compute.xhtml#a9fb53f220926a32be02f9446aed5bd88">vroundq_rte_f32</a>(float32x4_t val)</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;{</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keywordflow">return</span> vrndnq_f32(val);</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="preprocessor">#else  // __aarch64__</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> float32x4_t CONST_HALF_FLOAT = vdupq_n_f32(0.5f);</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> float32x4_t CONST_1_FLOAT    = vdupq_n_f32(1.f);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> int32x4_t   CONST_1_INT      = vdupq_n_s32(1);</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keyword">const</span> float32x4_t        floor_val        = <a class="code" href="namespacearm__compute.xhtml#af7a0f3e622aa4bc8c6077d2262a04e2e">vfloorq_f32</a>(val);</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keyword">const</span> float32x4_t        diff             = vsubq_f32(val, floor_val);</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keyword">const</span> float32x4_t        fp32_upper_limit =</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        vreinterpretq_f32_u32(vdupq_n_u32(0x4B000000)); <span class="comment">// 0x4B000000 = (23U + 127U) &lt;&lt; 23U</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160; </div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="comment">/*</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment">    * 1. Select the floor value when (diff&lt;0.5 || (diff==0.5 &amp;&amp; floor_val%2==0).</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment">    *    This condition is checked by vorrq_u32(vcltq_f32(diff, CONST_HALF_FLOAT) ,vandq_u32(vceqq_f32(diff, CONST_HALF_FLOAT) , vmvnq_u32(vtstq_s32(vandq_s32(vcvtq_s32_f32(floor_val), CONST_1_INT),CONST_1_INT))))</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment">    *</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment">    * 2. In case the input value (val) is out of signed int32 range, then simple use the input value as the rounded value</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">    *    Because:</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment">    *    in this case converting to int32 would saturate</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment">    *    If the input float value is &gt;= 2^23 * 1.00... 23 Zeros ..0  then the rounded value is exactly equal to the input value.</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment">    *    Because:</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment">    *    in IEEE single precision floating point representation the fraction part is 23 bit, so if exponent is 23 it means the fraction part = 0 as any digits after decimal point are truncated.</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment">    *    Hence, rounding has no effect:</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment">    *    Threshold upper limit with format |S|E(8bits)|   Fraction(23bits)     | = (23 + 127) &lt;&lt; 23 (assuming positive sign): Adding 127, because 127 represents the actual zero in this format.</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment">    */</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160; </div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    float32x4_t rounded_val = vbslq_f32(</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        vorrq_u32(vcltq_f32(diff, CONST_HALF_FLOAT),</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                  vandq_u32(vceqq_f32(diff, CONST_HALF_FLOAT),</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                            vmvnq_u32(vtstq_s32(vandq_s32(vcvtq_s32_f32(floor_val), CONST_1_INT), CONST_1_INT)))),</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        floor_val, vaddq_f32(floor_val, CONST_1_FLOAT));</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160; </div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    float32x4_t result = vbslq_f32(vcgeq_f32(vabsq_f32(val), fp32_upper_limit), val, rounded_val);</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160; </div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keywordflow">return</span> result;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="preprocessor">#endif // __aarch64__</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;}</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160; </div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="keyword">inline</span> float32x2_t <a class="code" href="namespacearm__compute.xhtml#afc415e7fc5e633a0b85b08b2bba5b5cf">vinvsqrt_f32</a>(float32x2_t x)</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;{</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    float32x2_t sqrt_reciprocal = vrsqrte_f32(x);</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    sqrt_reciprocal             = vmul_f32(vrsqrts_f32(vmul_f32(x, sqrt_reciprocal), sqrt_reciprocal), sqrt_reciprocal);</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    sqrt_reciprocal             = vmul_f32(vrsqrts_f32(vmul_f32(x, sqrt_reciprocal), sqrt_reciprocal), sqrt_reciprocal);</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160; </div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keywordflow">return</span> sqrt_reciprocal;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;}</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160; </div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="keyword">inline</span> float32x4_t <a class="code" href="namespacearm__compute.xhtml#ab8970d7aed07d8649f5e3088455948b8">vinvsqrtq_f32</a>(float32x4_t x)</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;{</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    float32x4_t sqrt_reciprocal = vrsqrteq_f32(x);</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    sqrt_reciprocal = vmulq_f32(vrsqrtsq_f32(vmulq_f32(x, sqrt_reciprocal), sqrt_reciprocal), sqrt_reciprocal);</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    sqrt_reciprocal = vmulq_f32(vrsqrtsq_f32(vmulq_f32(x, sqrt_reciprocal), sqrt_reciprocal), sqrt_reciprocal);</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160; </div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keywordflow">return</span> sqrt_reciprocal;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;}</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160; </div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="keyword">inline</span> float32x2_t <a class="code" href="namespacearm__compute.xhtml#acc6fd1bcd12ef1141e15401a04d31187">vinv_f32</a>(float32x2_t x)</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;{</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    float32x2_t recip = vrecpe_f32(x);</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    recip             = vmul_f32(vrecps_f32(x, recip), recip);</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    recip             = vmul_f32(vrecps_f32(x, recip), recip);</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keywordflow">return</span> recip;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;}</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160; </div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="keyword">inline</span> float32x4_t <a class="code" href="namespacearm__compute.xhtml#a2e0f2412b4d1302272d1aeb85d21ab25">vinvq_f32</a>(float32x4_t x)</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;{</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    float32x4_t recip = vrecpeq_f32(x);</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    recip             = vmulq_f32(vrecpsq_f32(x, recip), recip);</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    recip             = vmulq_f32(vrecpsq_f32(x, recip), recip);</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keywordflow">return</span> recip;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;}</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160; </div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="keyword">inline</span> float32x4_t <a class="code" href="namespacearm__compute.xhtml#a0c10bb00a86edd8d0cd4c33b494f6cd4">vtaylor_polyq_f32</a>(float32x4_t x, <span class="keyword">const</span> std::array&lt;float32x4_t, 8&gt; &amp;coeffs)</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;{</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    float32x4_t <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa7fc56270e7a70fa81a5935b72eacbe29">A</a>   = vmlaq_f32(coeffs[0], coeffs[4], x);</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    float32x4_t <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa9d5ed678fe57bcca610140957afab571">B</a>   = vmlaq_f32(coeffs[2], coeffs[6], x);</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    float32x4_t C   = vmlaq_f32(coeffs[1], coeffs[5], x);</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    float32x4_t D   = vmlaq_f32(coeffs[3], coeffs[7], x);</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    float32x4_t x2  = vmulq_f32(x, x);</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    float32x4_t x4  = vmulq_f32(x2, x2);</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    float32x4_t res = vmlaq_f32(vmlaq_f32(A, B, x2), vmlaq_f32(C, D, x2), x4);</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keywordflow">return</span> res;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;}</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160; </div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="keyword">static</span> <span class="keyword">const</span> uint32_t exp_f32_coeff[] = {</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    0x3f7ffff6, <span class="comment">// x^1: 0x1.ffffecp-1f</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    0x3efffedb, <span class="comment">// x^2: 0x1.fffdb6p-2f</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    0x3e2aaf33, <span class="comment">// x^3: 0x1.555e66p-3f</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    0x3d2b9f17, <span class="comment">// x^4: 0x1.573e2ep-5f</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    0x3c072010, <span class="comment">// x^5: 0x1.0e4020p-7f</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;};</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160; </div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="keyword">inline</span> float32x4_t <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(float32x4_t x)</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;{</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> c1 = vreinterpretq_f32_u32(vdupq_n_u32(exp_f32_coeff[0]));</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> c2 = vreinterpretq_f32_u32(vdupq_n_u32(exp_f32_coeff[1]));</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> c3 = vreinterpretq_f32_u32(vdupq_n_u32(exp_f32_coeff[2]));</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> c4 = vreinterpretq_f32_u32(vdupq_n_u32(exp_f32_coeff[3]));</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> c5 = vreinterpretq_f32_u32(vdupq_n_u32(exp_f32_coeff[4]));</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160; </div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> shift   = vreinterpretq_f32_u32(vdupq_n_u32(0x4b00007f)); <span class="comment">// 2^23 + 127 = 0x1.0000fep23f</span></div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> inv_ln2 = vreinterpretq_f32_u32(vdupq_n_u32(0x3fb8aa3b)); <span class="comment">// 1 / ln(2) = 0x1.715476p+0f</span></div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> neg_ln2_hi =</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        vreinterpretq_f32_u32(vdupq_n_u32(0xbf317200)); <span class="comment">// -ln(2) from bits  -1 to -19: -0x1.62e400p-1f</span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> neg_ln2_lo =</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        vreinterpretq_f32_u32(vdupq_n_u32(0xb5bfbe8e)); <span class="comment">// -ln(2) from bits -20 to -42: -0x1.7f7d1cp-20f</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160; </div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> inf       = vdupq_n_f32(std::numeric_limits&lt;float&gt;::infinity());</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> max_input = vdupq_n_f32(88.37f); <span class="comment">// Approximately ln(2^127.5)</span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> zero      = vdupq_n_f32(0.f);</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> min_input = vdupq_n_f32(-86.64f); <span class="comment">// Approximately ln(2^-125)</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160; </div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="comment">// Range reduction:</span></div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="comment">//   e^x = 2^n * e^r</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="comment">// where:</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="comment">//   n = floor(x / ln(2))</span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="comment">//   r = x - n * ln(2)</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="comment">//</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="comment">// By adding x / ln(2) with 2^23 + 127 (shift):</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="comment">//   * As FP32 fraction part only has 23-bits, the addition of 2^23 + 127 forces decimal part</span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="comment">//     of x / ln(2) out of the result. The integer part of x / ln(2) (i.e. n) + 127 will occupy</span></div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="comment">//     the whole fraction part of z in FP32 format.</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="comment">//     Subtracting 2^23 + 127 (shift) from z will result in the integer part of x / ln(2)</span></div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="comment">//     (i.e. n) because the decimal part has been pushed out and lost.</span></div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="comment">//   * The addition of 127 makes the FP32 fraction part of z ready to be used as the exponent</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="comment">//     in FP32 format. Left shifting z by 23 bits will result in 2^n.</span></div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> z     = prefer_vfmaq_f32(shift, x, inv_ln2);</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> n     = z - shift;</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a> = vreinterpretq_f32_u32(vreinterpretq_u32_f32(z) &lt;&lt; 23); <span class="comment">// 2^n</span></div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160; </div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="comment">// The calculation of n * ln(2) is done using 2 steps to achieve accuracy beyond FP32.</span></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="comment">// This outperforms longer Taylor series (3-4 tabs) both in term of accuracy and performance.</span></div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> r_hi = prefer_vfmaq_f32(x, n, neg_ln2_hi);</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> r    = prefer_vfmaq_f32(r_hi, n, neg_ln2_lo);</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160; </div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="comment">// Compute the truncated Taylor series of e^r.</span></div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="comment">//   poly = scale * (1 + c1 * r + c2 * r^2 + c3 * r^3 + c4 * r^4 + c5 * r^5)</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> r2 = r * r;</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160; </div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> p1     = c1 * r;</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> p23    = prefer_vfmaq_f32(c2, c3, r);</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> p45    = prefer_vfmaq_f32(c4, c5, r);</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> p2345  = prefer_vfmaq_f32(p23, p45, r2);</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> p12345 = prefer_vfmaq_f32(p1, p2345, r2);</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160; </div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="keyword">auto</span> poly = prefer_vfmaq_f32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>, p12345, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>);</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160; </div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="comment">// Handle underflow and overflow.</span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    poly = vbslq_f32(vcltq_f32(x, min_input), zero, poly);</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    poly = vbslq_f32(vcgtq_f32(x, max_input), inf, poly);</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160; </div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="keywordflow">return</span> poly;</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;}</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160; </div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="keyword">inline</span> float32x4_t <a class="code" href="namespacearm__compute.xhtml#aa107fc2f2937504672fe241943d8260b">verfq_f32</a>(float32x4_t x)</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;{</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="keyword">const</span> float32x4_t max_value = vdupq_n_f32(3.9375);       <span class="comment">// 4 - 8/128</span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="keyword">const</span> float32x4_t shift     = vdupq_n_f32(65536);        <span class="comment">// 2^16</span></div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="keyword">const</span> float32x4_t third     = vdupq_n_f32(0.3333333333); <span class="comment">// 1/3</span></div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keyword">const</span> float32x4_t one       = vdupq_n_f32(1.f);</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="keyword">const</span> uint32x4_t  max_index = vdupq_n_u32(512);</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="keyword">const</span> uint32x4_t  sign_mask = vdupq_n_u32(0x7fffffff);</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160; </div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <span class="keyword">const</span> float32x4_t x_abs = vabsq_f32(x);</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160; </div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="comment">// erf(x) for x in [0, 3.9375] is approxiated as follows:</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="comment">//</span></div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="comment">//   erf(x) = erf(r) + scale(r) * d * (1 - r * d - 1/3 * d^2)</span></div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="comment">//</span></div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="comment">// where:</span></div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="comment">//   r = floor(x * 128) / 128</span></div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="comment">//   d = x - r</span></div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="comment">//</span></div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <span class="comment">// erf(r) and scale(r) are stored in a 513-entry lookup table.</span></div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="comment">// The LUT covers the range from 0 to 4 with the step of 1/128.</span></div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <span class="comment">//</span></div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="comment">// Special cases:</span></div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="comment">//   erf(x) =  1 for x &gt;  3.9375</span></div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="comment">//   erf(x) = -1 for x &lt; -3.9375</span></div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160; </div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="comment">// Find the LUT indices by rounding the input value to the step of 1/128.</span></div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="comment">//</span></div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="comment">// `shift` is used to push out the 16 LSBs of the input value. Only 7 bits in the fraction part</span></div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="comment">// of the input value is preserved.</span></div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <span class="keyword">const</span> float32x4_t z = x_abs + shift;</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="keyword">const</span> float32x4_t r = z - shift;</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160; </div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    uint32x4_t index = vreinterpretq_u32_f32(z) - vreinterpretq_u32_f32(shift);</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    index            = vminq_u32(index, max_index);</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160; </div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <span class="comment">// Lookup erf(r) and scale(r).</span></div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    <span class="keyword">const</span> float64_t entry_0 = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>float64_t *<span class="keyword">&gt;</span>(&amp;<a class="code" href="namespacearm__compute.xhtml#a5663e5bad3b65f7fa59105be39d1fe12">erf_f32_lut</a>[index[0]]);</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <span class="keyword">const</span> float64_t entry_1 = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>float64_t *<span class="keyword">&gt;</span>(&amp;<a class="code" href="namespacearm__compute.xhtml#a5663e5bad3b65f7fa59105be39d1fe12">erf_f32_lut</a>[index[1]]);</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    <span class="keyword">const</span> float64_t entry_2 = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>float64_t *<span class="keyword">&gt;</span>(&amp;<a class="code" href="namespacearm__compute.xhtml#a5663e5bad3b65f7fa59105be39d1fe12">erf_f32_lut</a>[index[2]]);</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    <span class="keyword">const</span> float64_t entry_3 = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>float64_t *<span class="keyword">&gt;</span>(&amp;<a class="code" href="namespacearm__compute.xhtml#a5663e5bad3b65f7fa59105be39d1fe12">erf_f32_lut</a>[index[3]]);</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160; </div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <span class="keyword">const</span> float32x4_t entry_01 = vreinterpretq_f32_f64(float64x2_t{entry_0, entry_1});</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <span class="keyword">const</span> float32x4_t entry_23 = vreinterpretq_f32_f64(float64x2_t{entry_2, entry_3});</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160; </div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <span class="keyword">const</span> float32x4_t erf_r   = vuzp1q_f32(entry_01, entry_23);</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <span class="keyword">const</span> float32x4_t scale_r = vuzp2q_f32(entry_01, entry_23);</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160; </div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <span class="comment">// Approximate erf(x) = erf(r) + scale(r) * d * (1 - r * d - 1/3 * d^2).</span></div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    <span class="keyword">const</span> float32x4_t d  = x_abs - r;</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <span class="keyword">const</span> float32x4_t d2 = d * d;</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160; </div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    <span class="keyword">const</span> float32x4_t t0    = vfmaq_f32(r, third, d); <span class="comment">// t0 = r + 1/3 * d.</span></div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    <span class="keyword">const</span> float32x4_t t1    = vfmsq_f32(d, d2, t0);   <span class="comment">// t1 = d - d2 * t0 = d * (1 - r * d - 1/3 * d^2).</span></div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <span class="keyword">const</span> float32x4_t erf_x = vfmaq_f32(erf_r, scale_r, t1);</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160; </div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <span class="keyword">const</span> float32x4_t clamped = vbslq_f32(x_abs &gt; max_value, one, erf_x);</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <span class="keyword">const</span> float32x4_t result  = vbslq_f32(sign_mask, clamped, x);</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160; </div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <span class="keywordflow">return</span> result;</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;}</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="preprocessor">#endif // #ifdef __aarch64__</span></div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160; </div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="keyword">inline</span> float32x4_t <a class="code" href="namespacearm__compute.xhtml#a1d090b80b655e7f8fd8977bb93808b04">vlogq_f32</a>(float32x4_t x)</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;{</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> int32x4_t   CONST_127 = vdupq_n_s32(127);           <span class="comment">// 127</span></div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> float32x4_t CONST_LN2 = vdupq_n_f32(0.6931471805f); <span class="comment">// ln(2)</span></div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160; </div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <span class="comment">// Extract exponent</span></div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    int32x4_t   m   = vsubq_s32(vreinterpretq_s32_u32(vshrq_n_u32(vreinterpretq_u32_f32(x), 23)), CONST_127);</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    float32x4_t val = vreinterpretq_f32_s32(vsubq_s32(vreinterpretq_s32_f32(x), vshlq_n_s32(m, 23)));</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160; </div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <span class="comment">// Polynomial Approximation</span></div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    float32x4_t poly = <a class="code" href="namespacearm__compute.xhtml#a0c10bb00a86edd8d0cd4c33b494f6cd4">vtaylor_polyq_f32</a>(val, <a class="code" href="namespacearm__compute.xhtml#a48fb9cf404e8f7043235bf14105c9793">log_tab</a>);</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160; </div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <span class="comment">// Reconstruct</span></div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    poly = vmlaq_f32(poly, vcvtq_f32_s32(m), CONST_LN2);</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160; </div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <span class="keywordflow">return</span> poly;</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;}</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160; </div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="keyword">inline</span> float32x4_t <a class="code" href="namespacearm__compute.xhtml#a3e59419da344d02daca9c5b274a1da45">vtanhq_f32</a>(float32x4_t val)</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;{</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> float32x4_t CONST_1        = vdupq_n_f32(1.f);</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> float32x4_t CONST_2        = vdupq_n_f32(2.f);</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> float32x4_t CONST_MIN_TANH = vdupq_n_f32(-10.f);</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> float32x4_t CONST_MAX_TANH = vdupq_n_f32(10.f);</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> float32x4_t CONST_THR      = vdupq_n_f32(5.e-3);</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> float32x4_t CONST_1_3      = vdupq_n_f32(0.3333333f);</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160; </div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    float32x4_t x = vminq_f32(vmaxq_f32(val, CONST_MIN_TANH), CONST_MAX_TANH);</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <span class="comment">// x * (1 - x^2/3) if |x| &lt; 5.e-3 or (exp2x - 1) / (exp2x + 1) otherwise</span></div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    float32x4_t exp2x =</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        vbslq_f32(vcgtq_f32(vabsq_f32(x), CONST_THR), <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vmulq_f32(CONST_2, x)), vmulq_f32(x, x));</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    float32x4_t num =</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        vbslq_f32(vcgtq_f32(vabsq_f32(x), CONST_THR), vsubq_f32(exp2x, CONST_1), vmulq_f32(CONST_1_3, exp2x));</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    float32x4_t den = vbslq_f32(vcgtq_f32(vabsq_f32(x), CONST_THR), vaddq_f32(exp2x, CONST_1), vsubq_f32(CONST_1, num));</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    float32x4_t tanh = vbslq_f32(vcgtq_f32(vabsq_f32(x), CONST_THR), vmulq_f32(num, <a class="code" href="namespacearm__compute.xhtml#a2e0f2412b4d1302272d1aeb85d21ab25">vinvq_f32</a>(den)), vmulq_f32(x, den));</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    <span class="keywordflow">return</span> tanh;</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;}</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160; </div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="keyword">inline</span> float32x4_t <a class="code" href="namespacearm__compute.xhtml#aa6465367a67af2bae4ca46750231dae0">vpowq_f32</a>(float32x4_t val, float32x4_t n)</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;{</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vmulq_f32(n, <a class="code" href="namespacearm__compute.xhtml#a1d090b80b655e7f8fd8977bb93808b04">vlogq_f32</a>(val)));</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;}</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160; </div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;<span class="keyword">inline</span> float32x4_t <a class="code" href="namespacearm__compute.xhtml#a5b6eb5a8c8e8944d781892928f71a698">vsinq_f32</a>(float32x4_t val)</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;{</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    <span class="keyword">const</span> float32x4_t pi_v   = vdupq_n_f32(<a class="code" href="_toolchain_support_8h.xhtml#ae71449b1cc6e6250b91f539153a7a0d3">M_PI</a>);</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    <span class="keyword">const</span> float32x4_t pio2_v = vdupq_n_f32(<a class="code" href="_toolchain_support_8h.xhtml#ae71449b1cc6e6250b91f539153a7a0d3">M_PI</a> / 2);</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    <span class="keyword">const</span> float32x4_t ipi_v  = vdupq_n_f32(1 / <a class="code" href="_toolchain_support_8h.xhtml#ae71449b1cc6e6250b91f539153a7a0d3">M_PI</a>);</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160; </div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    <span class="comment">//Find positive or negative</span></div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    <span class="keyword">const</span> int32x4_t  c_v    = vabsq_s32(vcvtq_s32_f32(vmulq_f32(val, ipi_v)));</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="keyword">const</span> uint32x4_t sign_v = vcleq_f32(val, vdupq_n_f32(0));</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <span class="keyword">const</span> uint32x4_t odd_v  = vandq_u32(vreinterpretq_u32_s32(c_v), vdupq_n_u32(1));</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160; </div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    uint32x4_t neg_v = veorq_u32(odd_v, sign_v);</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160; </div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <span class="comment">//Modulus a - (n * int(a*(1/n)))</span></div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    float32x4_t      ma    = vsubq_f32(vabsq_f32(val), vmulq_f32(pi_v, vcvtq_f32_s32(c_v)));</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    <span class="keyword">const</span> uint32x4_t reb_v = vcgeq_f32(ma, pio2_v);</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160; </div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    <span class="comment">//Rebase a between 0 and pi/2</span></div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    ma = vbslq_f32(reb_v, vsubq_f32(pi_v, ma), ma);</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160; </div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    <span class="comment">//Taylor series</span></div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    <span class="keyword">const</span> float32x4_t ma2 = vmulq_f32(ma, ma);</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160; </div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    <span class="comment">//2nd elem: x^3 / 3!</span></div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    float32x4_t elem = vmulq_f32(vmulq_f32(ma, ma2), vdupq_n_f32(<a class="code" href="namespacearm__compute.xhtml#ae3e74f28452dea05869826c30b95f54b">te_sin_coeff2</a>));</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    float32x4_t res  = vsubq_f32(ma, elem);</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160; </div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    <span class="comment">//3rd elem: x^5 / 5!</span></div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    elem = vmulq_f32(vmulq_f32(elem, ma2), vdupq_n_f32(<a class="code" href="namespacearm__compute.xhtml#a9c1bcf45a03708a37132c1e2df5cd2b0">te_sin_coeff3</a>));</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    res  = vaddq_f32(res, elem);</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160; </div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    <span class="comment">//4th elem: x^7 / 7!float32x2_t vsin_f32(float32x2_t val)</span></div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    elem = vmulq_f32(vmulq_f32(elem, ma2), vdupq_n_f32(<a class="code" href="namespacearm__compute.xhtml#a542bbd5e844a0a494e3e4078a433d44b">te_sin_coeff4</a>));</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    res  = vsubq_f32(res, elem);</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160; </div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    <span class="comment">//5th elem: x^9 / 9!</span></div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    elem = vmulq_f32(vmulq_f32(elem, ma2), vdupq_n_f32(<a class="code" href="namespacearm__compute.xhtml#afe0353e9228b8be37bcdb4a1770f44e3">te_sin_coeff5</a>));</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    res  = vaddq_f32(res, elem);</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160; </div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    <span class="comment">//Change of sign</span></div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    neg_v = vshlq_n_u32(neg_v, 31);</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    res   = vreinterpretq_f32_u32(veorq_u32(vreinterpretq_u32_f32(res), neg_v));</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <span class="keywordflow">return</span> res;</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;}</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160; </div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;<span class="keyword">inline</span> float32x2_t <a class="code" href="namespacearm__compute.xhtml#aa9648abfe8fa6a9f3dab23ec9f55e2f1">vsin_f32</a>(float32x2_t val)</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;{</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    <span class="keyword">const</span> float32x2_t pi_v   = vdup_n_f32(<a class="code" href="_toolchain_support_8h.xhtml#ae71449b1cc6e6250b91f539153a7a0d3">M_PI</a>);</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    <span class="keyword">const</span> float32x2_t pio2_v = vdup_n_f32(<a class="code" href="_toolchain_support_8h.xhtml#ae71449b1cc6e6250b91f539153a7a0d3">M_PI</a> / 2);</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    <span class="keyword">const</span> float32x2_t ipi_v  = vdup_n_f32(1 / <a class="code" href="_toolchain_support_8h.xhtml#ae71449b1cc6e6250b91f539153a7a0d3">M_PI</a>);</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160; </div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    <span class="comment">//Find positive or negative</span></div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    <span class="keyword">const</span> int32x2_t  c_v    = vabs_s32(vcvt_s32_f32(vmul_f32(val, ipi_v)));</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    <span class="keyword">const</span> uint32x2_t sign_v = vcle_f32(val, vdup_n_f32(0));</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    <span class="keyword">const</span> uint32x2_t odd_v  = vand_u32(vreinterpret_u32_s32(c_v), vdup_n_u32(1));</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160; </div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    uint32x2_t neg_v = veor_u32(odd_v, sign_v);</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160; </div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    <span class="comment">//Modulus a - (n * int(a*(1/n)))</span></div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    float32x2_t      ma    = vsub_f32(vabs_f32(val), vmul_f32(pi_v, vcvt_f32_s32(c_v)));</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    <span class="keyword">const</span> uint32x2_t reb_v = vcge_f32(ma, pio2_v);</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160; </div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    <span class="comment">//Rebase a between 0 and pi/2</span></div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    ma = vbsl_f32(reb_v, vsub_f32(pi_v, ma), ma);</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160; </div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    <span class="comment">//Taylor series</span></div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    <span class="keyword">const</span> float32x2_t ma2 = vmul_f32(ma, ma);</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160; </div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    <span class="comment">//2nd elem: x^3 / 3!</span></div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    float32x2_t elem = vmul_f32(vmul_f32(ma, ma2), vdup_n_f32(<a class="code" href="namespacearm__compute.xhtml#ae3e74f28452dea05869826c30b95f54b">te_sin_coeff2</a>));</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    float32x2_t res  = vsub_f32(ma, elem);</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160; </div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    <span class="comment">//3rd elem: x^5 / 5!</span></div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    elem = vmul_f32(vmul_f32(elem, ma2), vdup_n_f32(<a class="code" href="namespacearm__compute.xhtml#a9c1bcf45a03708a37132c1e2df5cd2b0">te_sin_coeff3</a>));</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    res  = vadd_f32(res, elem);</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160; </div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    <span class="comment">//4th elem: x^7 / 7!float32x2_t vsin_f32(float32x2_t val)</span></div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    elem = vmul_f32(vmul_f32(elem, ma2), vdup_n_f32(<a class="code" href="namespacearm__compute.xhtml#a542bbd5e844a0a494e3e4078a433d44b">te_sin_coeff4</a>));</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    res  = vsub_f32(res, elem);</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160; </div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    <span class="comment">//5th elem: x^9 / 9!</span></div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    elem = vmul_f32(vmul_f32(elem, ma2), vdup_n_f32(<a class="code" href="namespacearm__compute.xhtml#afe0353e9228b8be37bcdb4a1770f44e3">te_sin_coeff5</a>));</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    res  = vadd_f32(res, elem);</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160; </div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    <span class="comment">//Change of sign</span></div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    neg_v = vshl_n_u32(neg_v, 31);</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    res   = vreinterpret_f32_u32(veor_u32(vreinterpret_u32_f32(res), neg_v));</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    <span class="keywordflow">return</span> res;</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;}</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160; </div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* DOXYGEN_SKIP_THIS */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160; </div>
<div class="line"><a name="l00425"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a77e02c19b498c3ff4ee373b0825cfd19">  425</a></span>&#160;<span class="keyword">inline</span> int32x4_t <a class="code" href="namespacearm__compute.xhtml#a77e02c19b498c3ff4ee373b0825cfd19">rounding_divide_by_pow2</a>(int32x4_t x, int32x4_t exponent)</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;{</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    <span class="keyword">const</span> int32x4_t shift_vec  = vnegq_s32(exponent);</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    <span class="keyword">const</span> int32x4_t fixup      = vshrq_n_s32(vandq_s32(x, shift_vec), 31);</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    <span class="keyword">const</span> int32x4_t fixed_up_x = vqaddq_s32(x, fixup);</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    <span class="keywordflow">return</span> vrshlq_s32(fixed_up_x, shift_vec);</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;}</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160; </div>
<div class="line"><a name="l00433"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a5e28a3911204ac952601f512c82b48f1">  433</a></span>&#160;<span class="keyword">inline</span> int32x4_t <a class="code" href="namespacearm__compute.xhtml#a77e02c19b498c3ff4ee373b0825cfd19">rounding_divide_by_pow2</a>(int32x4_t x, <span class="keywordtype">int</span> exponent)</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;{</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    <span class="keyword">const</span> int32x4_t shift_vec  = vdupq_n_s32(-exponent);</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    <span class="keyword">const</span> int32x4_t fixup      = vshrq_n_s32(vandq_s32(x, shift_vec), 31);</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    <span class="keyword">const</span> int32x4_t fixed_up_x = vqaddq_s32(x, fixup);</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    <span class="keywordflow">return</span> vrshlq_s32(fixed_up_x, shift_vec);</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;}</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160; </div>
<div class="line"><a name="l00441"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#afe3908fe41d9f2559f4a9eab1997fe61">  441</a></span>&#160;<span class="keyword">inline</span> int32_t <a class="code" href="namespacearm__compute.xhtml#a77e02c19b498c3ff4ee373b0825cfd19">rounding_divide_by_pow2</a>(int32_t x, <span class="keywordtype">int</span> exponent)</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;{</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    <span class="keyword">const</span> int32_t mask      = (1 &lt;&lt; exponent) - 1;</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    <span class="keyword">const</span> int32_t threshold = (mask &gt;&gt; 1) + (x &lt; 0 ? 1 : 0);</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    <span class="keywordflow">return</span> (x &gt;&gt; exponent) + ((x &amp; mask) &gt; threshold ? 1 : 0);</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;}</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160; </div>
<div class="line"><a name="l00448"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a1b362fecc52ac83bcfbb0850549edce4">  448</a></span>&#160;<span class="keyword">inline</span> float32x4x4_t <a class="code" href="namespacearm__compute.xhtml#a1b362fecc52ac83bcfbb0850549edce4">convert_uint8x16_to_float32x4x4</a>(<span class="keyword">const</span> uint8x16_t &amp;in)</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;{</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    float32x4x4_t out;</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160; </div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> tmp1 = vmovl_u8(vget_low_u8(in));</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    out.val[0]      = vcvtq_f32_u32(vmovl_u16(vget_low_u16(tmp1)));</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    out.val[1]      = vcvtq_f32_u32(vmovl_u16(vget_high_u16(tmp1)));</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160; </div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> tmp2 = vmovl_u8(vget_high_u8(in));</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    out.val[2]      = vcvtq_f32_u32(vmovl_u16(vget_low_u16(tmp2)));</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    out.val[3]      = vcvtq_f32_u32(vmovl_u16(vget_high_u16(tmp2)));</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    <span class="keywordflow">return</span> out;</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;}</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160; </div>
<div class="line"><a name="l00462"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a4a20779ec9b583a9468b4fa60575d52e">  462</a></span>&#160;<span class="keyword">inline</span> float32x4x4_t <a class="code" href="namespacearm__compute.xhtml#a4a20779ec9b583a9468b4fa60575d52e">convert_int8x16_to_float32x4x4</a>(<span class="keyword">const</span> int8x16_t &amp;in)</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;{</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    float32x4x4_t out;</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160; </div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> tmp1 = vmovl_s8(vget_low_s8(in));</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    out.val[0]      = vcvtq_f32_s32(vmovl_s16(vget_low_s16(tmp1)));</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    out.val[1]      = vcvtq_f32_s32(vmovl_s16(vget_high_s16(tmp1)));</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160; </div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> tmp2 = vmovl_s8(vget_high_s8(in));</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    out.val[2]      = vcvtq_f32_s32(vmovl_s16(vget_low_s16(tmp2)));</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    out.val[3]      = vcvtq_f32_s32(vmovl_s16(vget_high_s16(tmp2)));</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    <span class="keywordflow">return</span> out;</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;}</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160; </div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00477"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a47a3c86ad6266627e844e588496136a8">  477</a></span>&#160;<span class="keyword">inline</span> float32x4x4_t <a class="code" href="namespacearm__compute.xhtml#afeb24f265771053bc8365e30b4c409e5">convert_to_float32x4x4</a>(<span class="keyword">const</span> uint8x16_t &amp;in)</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;{</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a1b362fecc52ac83bcfbb0850549edce4">convert_uint8x16_to_float32x4x4</a>(in);</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;}</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160; </div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00483"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#ad6af9061fe6dcd2cb311be33acb201ed">  483</a></span>&#160;<span class="keyword">inline</span> float32x4x4_t <a class="code" href="namespacearm__compute.xhtml#afeb24f265771053bc8365e30b4c409e5">convert_to_float32x4x4</a>(<span class="keyword">const</span> int8x16_t &amp;in)</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;{</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a4a20779ec9b583a9468b4fa60575d52e">convert_int8x16_to_float32x4x4</a>(in);</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;}</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160; </div>
<div class="line"><a name="l00488"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#aa8065e7933c00bdbf860278643c9e953">  488</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute.xhtml#aa8065e7933c00bdbf860278643c9e953">convert_float32x4x3_to_uint8x8x3</a>(<span class="keyword">const</span> float32x4x3_t &amp;in1, <span class="keyword">const</span> float32x4x3_t &amp;in2, uint8x8x3_t &amp;out)</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;{</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    out.val[0] = vqmovn_u16(vcombine_u16(vqmovn_u32(vcvtq_u32_f32(in1.val[0])), vqmovn_u32(vcvtq_u32_f32(in2.val[0]))));</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    out.val[1] = vqmovn_u16(vcombine_u16(vqmovn_u32(vcvtq_u32_f32(in1.val[1])), vqmovn_u32(vcvtq_u32_f32(in2.val[1]))));</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    out.val[2] = vqmovn_u16(vcombine_u16(vqmovn_u32(vcvtq_u32_f32(in1.val[2])), vqmovn_u32(vcvtq_u32_f32(in2.val[2]))));</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;}</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160; </div>
<div class="line"><a name="l00495"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a4ee01955c2dd8c14a0d107a36cb62618">  495</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute.xhtml#a4ee01955c2dd8c14a0d107a36cb62618">convert_float32x4x4_to_uint8x16</a>(<span class="keyword">const</span> float32x4x4_t &amp;in, uint8x16_t &amp;out)</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;{</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> low  = vcombine_u16(vqmovn_u32(vcvtq_u32_f32(in.val[0])), vqmovn_u32(vcvtq_u32_f32(in.val[1])));</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> high = vcombine_u16(vqmovn_u32(vcvtq_u32_f32(in.val[2])), vqmovn_u32(vcvtq_u32_f32(in.val[3])));</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    out             = vcombine_u8(vqmovn_u16(low), vqmovn_u16(high));</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;}</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160; </div>
<div class="line"><a name="l00502"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a9c673ade3003d5d4e28ebf5875795dc4">  502</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute.xhtml#a9c673ade3003d5d4e28ebf5875795dc4">convert_float32x4x4_to_int8x16</a>(<span class="keyword">const</span> float32x4x4_t &amp;in, int8x16_t &amp;out)</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;{</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> low  = vcombine_s16(vqmovn_s32(vcvtq_s32_f32(in.val[0])), vqmovn_s32(vcvtq_s32_f32(in.val[1])));</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> high = vcombine_s16(vqmovn_s32(vcvtq_s32_f32(in.val[2])), vqmovn_s32(vcvtq_s32_f32(in.val[3])));</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;    out             = vcombine_s8(vqmovn_s16(low), vqmovn_s16(high));</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;}</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160; </div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00510"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#ad63fda57a59d2dcc82eb13599581fcc0">  510</a></span>&#160;<span class="keyword">inline</span> uint8x16_t <a class="code" href="namespacearm__compute.xhtml#ad63fda57a59d2dcc82eb13599581fcc0">convert_float_to_int&lt;float32x4x4_t, uint8x16_t&gt;</a>(<span class="keyword">const</span> float32x4x4_t &amp;in)</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;{</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    uint8x16_t out;</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a4ee01955c2dd8c14a0d107a36cb62618">convert_float32x4x4_to_uint8x16</a>(in, out);</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    <span class="keywordflow">return</span> out;</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;}</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160; </div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00518"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a8677ddae33f84bb0e84e995c54bf6ba3">  518</a></span>&#160;<span class="keyword">inline</span> float32x4x4_t <a class="code" href="namespacearm__compute.xhtml#a8677ddae33f84bb0e84e995c54bf6ba3">convert_int_to_float&lt;float32x4x4_t, uint8x16_t&gt;</a>(<span class="keyword">const</span> uint8x16_t &amp;in)</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;{</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a1b362fecc52ac83bcfbb0850549edce4">convert_uint8x16_to_float32x4x4</a>(in);</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;}</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160; </div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00524"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a6048f3cbd52aea7ce3a693ce485393be">  524</a></span>&#160;<span class="keyword">inline</span> int8x16_t <a class="code" href="namespacearm__compute.xhtml#a6048f3cbd52aea7ce3a693ce485393be">convert_float_to_int&lt;float32x4x4_t, int8x16_t&gt;</a>(<span class="keyword">const</span> float32x4x4_t &amp;in)</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;{</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    int8x16_t out;</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a9c673ade3003d5d4e28ebf5875795dc4">convert_float32x4x4_to_int8x16</a>(in, out);</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    <span class="keywordflow">return</span> out;</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;}</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160; </div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00532"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a9075aa895fe4b2368e3c0cfae26ebf0b">  532</a></span>&#160;<span class="keyword">inline</span> float32x4x4_t <a class="code" href="namespacearm__compute.xhtml#a9075aa895fe4b2368e3c0cfae26ebf0b">convert_int_to_float&lt;float32x4x4_t, int8x16_t&gt;</a>(<span class="keyword">const</span> int8x16_t &amp;in)</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;{</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a4a20779ec9b583a9468b4fa60575d52e">convert_int8x16_to_float32x4x4</a>(in);</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;}</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160; </div>
<div class="line"><a name="l00537"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a62947a5a80433465f50372c441be3c8c">  537</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute.xhtml#a62947a5a80433465f50372c441be3c8c">vreduce</a>(<span class="keyword">const</span> float32x4_t &amp;v)</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;{</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;    <span class="keyword">const</span> float32x2_t v0    = vget_high_f32(v);</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;    <span class="keyword">const</span> float32x2_t v1    = vget_low_f32(v);</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    <span class="keyword">const</span> float32x2_t v_out = vadd_f32(v0, v1);</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160; </div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> a = vget_lane_f32(v_out, 0);</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> = vget_lane_f32(v_out, 1);</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160; </div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    <span class="keywordflow">return</span> a + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>;</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;}</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160; </div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;<span class="preprocessor">#ifdef __ARM_FEATURE_FP16_VECTOR_ARITHMETIC</span></div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;<span class="comment">/** Exponent polynomial coefficients */</span><span class="comment"></span></div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;<span class="comment">/** Logarithm polynomial coefficients */</span></div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;<span class="preprocessor">#ifndef DOXYGEN_SKIP_THIS</span></div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;<span class="keyword">inline</span> float16x8_t vfloorq_f16(float16x8_t val)</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;{</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> float16x8_t CONST_1 = vdupq_n_f16(1.f);</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160; </div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;    <span class="keyword">const</span> int16x8_t   z = <a class="code" href="clang-tidy_8h.xhtml#a47742109bd7e09b3526243356629e323">vcvtq_s16_f16</a>(val);</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;    <span class="keyword">const</span> float16x8_t r = <a class="code" href="clang-tidy_8h.xhtml#a716ec8298b66d09b1eccd2dceaaf4cfd">vcvtq_f16_s16</a>(z);</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160; </div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="clang-tidy_8h.xhtml#aac6580a2f5ef2b549765f35a8682fb40">vbslq_f16</a>(<a class="code" href="clang-tidy_8h.xhtml#ad83246960ea8ac7b68d302ba58ae307a">vcgtq_f16</a>(r, val), <a class="code" href="clang-tidy_8h.xhtml#a059554fad372f90a38324663bcefe237">vsubq_f16</a>(r, CONST_1), r);</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;}</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160; </div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;<span class="keyword">inline</span> float16x8_t vroundq_rte_f16(float16x8_t val)</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;{</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;    <span class="keywordflow">return</span> vrndnq_f16(val);</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;}</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160; </div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;<span class="keyword">inline</span> float16x4_t vinvsqrt_f16(float16x4_t x)</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;{</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;    float16x4_t sqrt_reciprocal = <a class="code" href="clang-tidy_8h.xhtml#a05fa952380422d74f16f32307570741f">vrsqrte_f16</a>(x);</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;    sqrt_reciprocal             = <a class="code" href="clang-tidy_8h.xhtml#a02bbbedd1ea200543e093cdf593fe6c6">vmul_f16</a>(<a class="code" href="clang-tidy_8h.xhtml#abe2364764efb37f6b82dfef60d8f0bc9">vrsqrts_f16</a>(<a class="code" href="clang-tidy_8h.xhtml#a02bbbedd1ea200543e093cdf593fe6c6">vmul_f16</a>(x, sqrt_reciprocal), sqrt_reciprocal), sqrt_reciprocal);</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;    sqrt_reciprocal             = <a class="code" href="clang-tidy_8h.xhtml#a02bbbedd1ea200543e093cdf593fe6c6">vmul_f16</a>(<a class="code" href="clang-tidy_8h.xhtml#abe2364764efb37f6b82dfef60d8f0bc9">vrsqrts_f16</a>(<a class="code" href="clang-tidy_8h.xhtml#a02bbbedd1ea200543e093cdf593fe6c6">vmul_f16</a>(x, sqrt_reciprocal), sqrt_reciprocal), sqrt_reciprocal);</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;    <span class="keywordflow">return</span> sqrt_reciprocal;</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;}</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160; </div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;<span class="keyword">inline</span> float16x8_t vinvsqrtq_f16(float16x8_t x)</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;{</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;    float16x8_t sqrt_reciprocal = <a class="code" href="clang-tidy_8h.xhtml#ad952d0fdf95c4563ece11698a912c785">vrsqrteq_f16</a>(x);</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;    sqrt_reciprocal = <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(<a class="code" href="clang-tidy_8h.xhtml#ac29596e74442e01b7c1633a23c3b73b5">vrsqrtsq_f16</a>(<a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(x, sqrt_reciprocal), sqrt_reciprocal), sqrt_reciprocal);</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;    sqrt_reciprocal = <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(<a class="code" href="clang-tidy_8h.xhtml#ac29596e74442e01b7c1633a23c3b73b5">vrsqrtsq_f16</a>(<a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(x, sqrt_reciprocal), sqrt_reciprocal), sqrt_reciprocal);</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;    <span class="keywordflow">return</span> sqrt_reciprocal;</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;}</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160; </div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;<span class="keyword">inline</span> float16x4_t vinv_f16(float16x4_t x)</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;{</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;    float16x4_t recip = <a class="code" href="clang-tidy_8h.xhtml#a578c95448f5d04cf60521189d075b1a8">vrecpe_f16</a>(x);</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;    recip             = <a class="code" href="clang-tidy_8h.xhtml#a02bbbedd1ea200543e093cdf593fe6c6">vmul_f16</a>(<a class="code" href="clang-tidy_8h.xhtml#a71a01ba321c47e2723f21234bb57fb99">vrecps_f16</a>(x, recip), recip);</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;    recip             = <a class="code" href="clang-tidy_8h.xhtml#a02bbbedd1ea200543e093cdf593fe6c6">vmul_f16</a>(<a class="code" href="clang-tidy_8h.xhtml#a71a01ba321c47e2723f21234bb57fb99">vrecps_f16</a>(x, recip), recip);</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;    <span class="keywordflow">return</span> recip;</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;}</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160; </div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;<span class="keyword">inline</span> float16x8_t vinvq_f16(float16x8_t x)</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;{</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    float16x8_t recip = <a class="code" href="clang-tidy_8h.xhtml#a1d7564bf99a261819a736036cd57a633">vrecpeq_f16</a>(x);</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;    recip             = <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(<a class="code" href="clang-tidy_8h.xhtml#ae67cd757e82e92930c9c9221f0297b5a">vrecpsq_f16</a>(x, recip), recip);</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;    recip             = <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(<a class="code" href="clang-tidy_8h.xhtml#ae67cd757e82e92930c9c9221f0297b5a">vrecpsq_f16</a>(x, recip), recip);</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;    <span class="keywordflow">return</span> recip;</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;}</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160; </div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;<span class="keyword">inline</span> float16x4_t vtanh_rational_approx_f16(float16x4_t x16)</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;{</div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;    <span class="comment">// Calculate rational approximation part of tanh exactly on a half-register of F16 by using F32s</span></div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;    <span class="comment">// Note: doesn&#39;t handle overflows, needs truncating at |x| = 4.508</span></div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;    <span class="keyword">const</span> float32x4_t x = vcvt_f32_f16(x16);</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160; </div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;    <span class="keyword">const</span> float32x4_t ONE = vdupq_n_f32(1.0f);</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;    <span class="keyword">const</span> float32x4_t <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa1a2ddc2db4693cfd16d534cde5572cc1">C1</a>  = vdupq_n_f32(0.43760237f);</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;    <span class="keyword">const</span> float32x4_t <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aaf1a543f5a2c5d49bc5dde298fcf716e4">C2</a>  = vdupq_n_f32(0.104402f);</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;    <span class="keyword">const</span> float32x4_t <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa3abe124ecc82bf2c2e22e6058f38c50c">C3</a>  = vdupq_n_f32(0.013442706f);</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;    <span class="keyword">const</span> float32x4_t C4  = vdupq_n_f32(0.00073561433f);</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160; </div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;    <span class="keyword">const</span> float32x4_t x2 = vmulq_f32(x, x);</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160; </div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;    <span class="comment">// Denominator polynomial 1 + C1*x^2 + C3*x^4</span></div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;    float32x4_t denom = vfmaq_f32(C1, C3, x2);</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;    denom             = vfmaq_f32(ONE, x2, denom);</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160; </div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    <span class="comment">// Numerator polynomial x*(1 + C2*x^2 + C4*x^4)</span></div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;    float32x4_t numer = vfmaq_f32(C2, C4, x2);</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;    numer             = vfmaq_f32(ONE, x2, numer);</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;    numer             = vmulq_f32(numer, x);</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160; </div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;    <span class="keywordflow">return</span> vcvt_f16_f32(vdivq_f32(numer, denom));</div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;}</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160; </div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;<span class="keyword">inline</span> float16x8_t vtanhq_f16(float16x8_t x)</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;{</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;    <span class="comment">// Split into high/low and use rational approximation on both parts exactly</span></div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;    <span class="keyword">const</span> float16x8_t tanh =</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;        vcombine_f16(vtanh_rational_approx_f16(vget_low_f16(x)), vtanh_rational_approx_f16(vget_high_f16(x)));</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160; </div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;    <span class="comment">// tanh(x) == sign(x) to F16 precision for |x| &gt;= 4.508, use sign after this</span></div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    <span class="keyword">const</span> float16x8_t ONE      = vdupq_n_f16(1.0f);</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    <span class="keyword">const</span> float16x8_t MAX_X    = vdupq_n_f16(4.508f);</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>        at_limit = vcageq_f16(x, MAX_X); <span class="comment">// |x| &gt;= 4.508</span></div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;    <span class="keyword">const</span> float16x8_t sign_x   = <a class="code" href="clang-tidy_8h.xhtml#aac6580a2f5ef2b549765f35a8682fb40">vbslq_f16</a>(vclezq_f16(x), -ONE, ONE);</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="clang-tidy_8h.xhtml#aac6580a2f5ef2b549765f35a8682fb40">vbslq_f16</a>(at_limit, sign_x, tanh);</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;}</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160; </div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;<span class="keyword">inline</span> float16x8_t vtaylor_polyq_f16(float16x8_t x, <span class="keyword">const</span> std::array&lt;float16x8_t, 8&gt; &amp;coeffs)</div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;{</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;    <span class="keyword">const</span> float16x8_t <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa7fc56270e7a70fa81a5935b72eacbe29">A</a>   = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(coeffs[0], <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(coeffs[4], x));</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;    <span class="keyword">const</span> float16x8_t <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa9d5ed678fe57bcca610140957afab571">B</a>   = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(coeffs[2], <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(coeffs[6], x));</div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;    <span class="keyword">const</span> float16x8_t C   = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(coeffs[1], <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(coeffs[5], x));</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;    <span class="keyword">const</span> float16x8_t D   = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(coeffs[3], <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(coeffs[7], x));</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    <span class="keyword">const</span> float16x8_t x2  = <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(x, x);</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;    <span class="keyword">const</span> float16x8_t x4  = <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(x2, x2);</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;    <span class="keyword">const</span> float16x8_t res = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(<a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(A, <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(B, x2)), <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(<a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(C, <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(D, x2)), x4));</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;    <span class="keywordflow">return</span> res;</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;}</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160; </div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;<span class="keyword">inline</span> float16x8_t vexpq_f16(float16x8_t x)</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;{</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;    <span class="keyword">const</span> float32x4_t x_high = vcvt_f32_f16(vget_high_f16(x));</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;    <span class="keyword">const</span> float32x4_t x_low  = vcvt_f32_f16(vget_low_f16(x));</div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160; </div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;    <span class="keyword">const</span> float16x8_t res = vcombine_f16(vcvt_f16_f32(<a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(x_low)), vcvt_f16_f32(<a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(x_high)));</div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;    <span class="keywordflow">return</span> res;</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;}</div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160; </div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;<span class="keyword">inline</span> float16x8_t verfq_f16(float16x8_t x)</div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;{</div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;    <span class="keyword">const</span> float32x4_t x_high = vcvt_f32_f16(vget_high_f16(x));</div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;    <span class="keyword">const</span> float32x4_t x_low  = vcvt_f32_f16(vget_low_f16(x));</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160; </div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;    <span class="keyword">const</span> float16x8_t res = vcombine_f16(vcvt_f16_f32(<a class="code" href="namespacearm__compute.xhtml#aa107fc2f2937504672fe241943d8260b">verfq_f32</a>(x_low)), vcvt_f16_f32(<a class="code" href="namespacearm__compute.xhtml#aa107fc2f2937504672fe241943d8260b">verfq_f32</a>(x_high)));</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;    <span class="keywordflow">return</span> res;</div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;}</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;<span class="preprocessor">#endif // #ifdef __aarch64__</span></div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160; </div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;<span class="keyword">inline</span> float16x8_t vlogq_f16(float16x8_t x)</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;{</div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;    <span class="keyword">const</span> float32x4_t x_high = vcvt_f32_f16(vget_high_f16(x));</div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;    <span class="keyword">const</span> float32x4_t x_low  = vcvt_f32_f16(vget_low_f16(x));</div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160; </div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;    <span class="keyword">const</span> float16x8_t res = vcombine_f16(vcvt_f16_f32(<a class="code" href="namespacearm__compute.xhtml#a1d090b80b655e7f8fd8977bb93808b04">vlogq_f32</a>(x_low)), vcvt_f16_f32(<a class="code" href="namespacearm__compute.xhtml#a1d090b80b655e7f8fd8977bb93808b04">vlogq_f32</a>(x_high)));</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;    <span class="keywordflow">return</span> res;</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;}</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160; </div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;<span class="keyword">inline</span> float16x8_t vpowq_f16(float16x8_t val, float16x8_t n)</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;{</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;    float32x4_t n0_f32   = vcvt_f32_f16(vget_low_f16(n));</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;    float32x4_t n1_f32   = vcvt_f32_f16(vget_high_f16(n));</div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;    float32x4_t val0_f32 = vcvt_f32_f16(vget_low_f16(val));</div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;    float32x4_t val1_f32 = vcvt_f32_f16(vget_high_f16(val));</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160; </div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;    float32x4_t res0_f32 = <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vmulq_f32(n0_f32, <a class="code" href="namespacearm__compute.xhtml#a1d090b80b655e7f8fd8977bb93808b04">vlogq_f32</a>(val0_f32)));</div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;    float32x4_t res1_f32 = <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vmulq_f32(n1_f32, <a class="code" href="namespacearm__compute.xhtml#a1d090b80b655e7f8fd8977bb93808b04">vlogq_f32</a>(val1_f32)));</div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160; </div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;    <span class="keywordflow">return</span> vcombine_f16(vcvt_f16_f32(res0_f32), vcvt_f16_f32(res1_f32));</div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;}</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160; </div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;<span class="keyword">inline</span> float16x8_t vsinq_f16(float16x8_t val)</div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;{</div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;    <span class="keyword">const</span> float32x4_t val_high = vcvt_f32_f16(vget_high_f16(val));</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;    <span class="keyword">const</span> float32x4_t val_low  = vcvt_f32_f16(vget_low_f16(val));</div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160; </div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;    <span class="keyword">const</span> float32x4_t res_high = <a class="code" href="namespacearm__compute.xhtml#a5b6eb5a8c8e8944d781892928f71a698">vsinq_f32</a>(val_high);</div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;    <span class="keyword">const</span> float32x4_t res_low  = <a class="code" href="namespacearm__compute.xhtml#a5b6eb5a8c8e8944d781892928f71a698">vsinq_f32</a>(val_low);</div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160; </div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;    <span class="keywordflow">return</span> vcombine_f16(vcvt_f16_f32(res_low), vcvt_f16_f32(res_high));</div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;}</div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160; </div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;<span class="keyword">inline</span> float16x4_t vsin_f16(float16x4_t val)</div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;{</div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;    <span class="keyword">const</span> float32x4_t val_f32  = vcvt_f32_f16(val);</div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;    <span class="keyword">const</span> float32x2_t val_high = vget_high_f32(val_f32);</div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;    <span class="keyword">const</span> float32x2_t val_low  = vget_low_f32(val_f32);</div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160; </div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;    <span class="keyword">const</span> float32x2_t res_high = <a class="code" href="namespacearm__compute.xhtml#aa9648abfe8fa6a9f3dab23ec9f55e2f1">vsin_f32</a>(val_high);</div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;    <span class="keyword">const</span> float32x2_t res_low  = <a class="code" href="namespacearm__compute.xhtml#aa9648abfe8fa6a9f3dab23ec9f55e2f1">vsin_f32</a>(val_low);</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160; </div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;    <span class="keywordflow">return</span> vcvt_f16_f32(vcombine_f32(res_low, res_high));</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;}</div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160; </div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;<span class="keyword">inline</span> float16_t <a class="code" href="namespacearm__compute.xhtml#a62947a5a80433465f50372c441be3c8c">vreduce</a>(<span class="keyword">const</span> float16x8_t &amp;v)</div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;{</div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;    <span class="keyword">const</span> float16x4_t v0    = vget_high_f16(v);</div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;    <span class="keyword">const</span> float16x4_t v1    = vget_low_f16(v);</div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;    <span class="keyword">const</span> float16x4_t v_out = <a class="code" href="clang-tidy_8h.xhtml#a608fb0db3de44492fcc96a836eadf11b">vadd_f16</a>(v0, v1);</div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160; </div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;    <span class="keyword">const</span> float16_t a = vget_lane_f16(v_out, 0);</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;    <span class="keyword">const</span> float16_t <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> = vget_lane_f16(v_out, 1);</div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;    <span class="keyword">const</span> float16_t c = vget_lane_f16(v_out, 2);</div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;    <span class="keyword">const</span> float16_t d = vget_lane_f16(v_out, 3);</div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160; </div>
<div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;    <span class="keywordflow">return</span> a + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> + c + d;</div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;}</div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* DOXYGEN_SKIP_THIS */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __ARM_FEATURE_FP16_VECTOR_ARITHMETIC */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;} <span class="comment">// namespace arm_compute</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclang-tidy_8h_xhtml_a1d7564bf99a261819a736036cd57a633"><div class="ttname"><a href="clang-tidy_8h.xhtml#a1d7564bf99a261819a736036cd57a633">vrecpeq_f16</a></div><div class="ttdeci">float16x8_t vrecpeq_f16(float16x8_t)</div><div class="ttdef"><b>Definition:</b> <a href="clang-tidy_8h_source.xhtml#l00155">clang-tidy.h:155</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_aa8065e7933c00bdbf860278643c9e953"><div class="ttname"><a href="namespacearm__compute.xhtml#aa8065e7933c00bdbf860278643c9e953">arm_compute::convert_float32x4x3_to_uint8x8x3</a></div><div class="ttdeci">void convert_float32x4x3_to_uint8x8x3(const float32x4x3_t &amp;in1, const float32x4x3_t &amp;in2, uint8x8x3_t &amp;out)</div><div class="ttdoc">Converts from two float32x4x3_t to just one uint8x8x3_t.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_math_8inl_source.xhtml#l00488">NEMath.inl:488</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a48fb9cf404e8f7043235bf14105c9793"><div class="ttname"><a href="namespacearm__compute.xhtml#a48fb9cf404e8f7043235bf14105c9793">arm_compute::log_tab</a></div><div class="ttdeci">const std::array&lt; float32x4_t, 8 &gt; log_tab</div><div class="ttdoc">Logarithm polynomial coefficients.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_math_8inl_source.xhtml#l00034">NEMath.inl:34</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a4a20779ec9b583a9468b4fa60575d52e"><div class="ttname"><a href="namespacearm__compute.xhtml#a4a20779ec9b583a9468b4fa60575d52e">arm_compute::convert_int8x16_to_float32x4x4</a></div><div class="ttdeci">float32x4x4_t convert_int8x16_to_float32x4x4(const int8x16_t &amp;in)</div><div class="ttdoc">Converts from int8x16 to float32x4x4_t.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_math_8inl_source.xhtml#l00462">NEMath.inl:462</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a3e59419da344d02daca9c5b274a1da45"><div class="ttname"><a href="namespacearm__compute.xhtml#a3e59419da344d02daca9c5b274a1da45">arm_compute::vtanhq_f32</a></div><div class="ttdeci">float32x4_t vtanhq_f32(float32x4_t val)</div><div class="ttdoc">Calculate hyperbolic tangent.</div></div>
<div class="ttc" id="aclang-tidy_8h_xhtml_a47742109bd7e09b3526243356629e323"><div class="ttname"><a href="clang-tidy_8h.xhtml#a47742109bd7e09b3526243356629e323">vcvtq_s16_f16</a></div><div class="ttdeci">int16x8_t vcvtq_s16_f16(float16x8_t)</div><div class="ttdef"><b>Definition:</b> <a href="clang-tidy_8h_source.xhtml#l00070">clang-tidy.h:70</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a9075aa895fe4b2368e3c0cfae26ebf0b"><div class="ttname"><a href="namespacearm__compute.xhtml#a9075aa895fe4b2368e3c0cfae26ebf0b">arm_compute::convert_int_to_float&lt; float32x4x4_t, int8x16_t &gt;</a></div><div class="ttdeci">float32x4x4_t convert_int_to_float&lt; float32x4x4_t, int8x16_t &gt;(const int8x16_t &amp;in)</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_math_8inl_source.xhtml#l00532">NEMath.inl:532</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_acc6fd1bcd12ef1141e15401a04d31187"><div class="ttname"><a href="namespacearm__compute.xhtml#acc6fd1bcd12ef1141e15401a04d31187">arm_compute::vinv_f32</a></div><div class="ttdeci">float32x2_t vinv_f32(float32x2_t x)</div><div class="ttdoc">Calculate reciprocal.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_aa9648abfe8fa6a9f3dab23ec9f55e2f1"><div class="ttname"><a href="namespacearm__compute.xhtml#aa9648abfe8fa6a9f3dab23ec9f55e2f1">arm_compute::vsin_f32</a></div><div class="ttdeci">float32x2_t vsin_f32(float32x2_t val)</div><div class="ttdoc">Calculate sine.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a0c10bb00a86edd8d0cd4c33b494f6cd4"><div class="ttname"><a href="namespacearm__compute.xhtml#a0c10bb00a86edd8d0cd4c33b494f6cd4">arm_compute::vtaylor_polyq_f32</a></div><div class="ttdeci">float32x4_t vtaylor_polyq_f32(float32x4_t x, const std::array&lt; float32x4_t, 8 &gt; &amp;coeffs)</div><div class="ttdoc">Perform a 7th degree polynomial approximation using Estrin's method.</div></div>
<div class="ttc" id="aclang-tidy_8h_xhtml_ac29596e74442e01b7c1633a23c3b73b5"><div class="ttname"><a href="clang-tidy_8h.xhtml#ac29596e74442e01b7c1633a23c3b73b5">vrsqrtsq_f16</a></div><div class="ttdeci">float16x8_t vrsqrtsq_f16(float16x8_t, float16x8_t)</div><div class="ttdef"><b>Definition:</b> <a href="clang-tidy_8h_source.xhtml#l00015">clang-tidy.h:15</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ab8970d7aed07d8649f5e3088455948b8"><div class="ttname"><a href="namespacearm__compute.xhtml#ab8970d7aed07d8649f5e3088455948b8">arm_compute::vinvsqrtq_f32</a></div><div class="ttdeci">float32x4_t vinvsqrtq_f32(float32x4_t x)</div><div class="ttdoc">Calculate inverse square root.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_af7a0f3e622aa4bc8c6077d2262a04e2e"><div class="ttname"><a href="namespacearm__compute.xhtml#af7a0f3e622aa4bc8c6077d2262a04e2e">arm_compute::vfloorq_f32</a></div><div class="ttdeci">float32x4_t vfloorq_f32(float32x4_t val)</div><div class="ttdoc">Calculate floor of a vector.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a6048f3cbd52aea7ce3a693ce485393be"><div class="ttname"><a href="namespacearm__compute.xhtml#a6048f3cbd52aea7ce3a693ce485393be">arm_compute::convert_float_to_int&lt; float32x4x4_t, int8x16_t &gt;</a></div><div class="ttdeci">int8x16_t convert_float_to_int&lt; float32x4x4_t, int8x16_t &gt;(const float32x4x4_t &amp;in)</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_math_8inl_source.xhtml#l00524">NEMath.inl:524</a></div></div>
<div class="ttc" id="aclang-tidy_8h_xhtml_a2c2032af67addd543930e3027b04e8d4"><div class="ttname"><a href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a></div><div class="ttdeci">float16x8_t vmulq_f16(float16x8_t, float16x8_t)</div><div class="ttdef"><b>Definition:</b> <a href="clang-tidy_8h_source.xhtml#l00085">clang-tidy.h:85</a></div></div>
<div class="ttc" id="a_toolchain_support_8h_xhtml_ae71449b1cc6e6250b91f539153a7a0d3"><div class="ttname"><a href="_toolchain_support_8h.xhtml#ae71449b1cc6e6250b91f539153a7a0d3">M_PI</a></div><div class="ttdeci">#define M_PI</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00040">ToolchainSupport.h:40</a></div></div>
<div class="ttc" id="aclang-tidy_8h_xhtml_a71a01ba321c47e2723f21234bb57fb99"><div class="ttname"><a href="clang-tidy_8h.xhtml#a71a01ba321c47e2723f21234bb57fb99">vrecps_f16</a></div><div class="ttdeci">float16x4_t vrecps_f16(float16x4_t, float16x4_t)</div><div class="ttdef"><b>Definition:</b> <a href="clang-tidy_8h_source.xhtml#l00160">clang-tidy.h:160</a></div></div>
<div class="ttc" id="aclang-tidy_8h_xhtml_ae67cd757e82e92930c9c9221f0297b5a"><div class="ttname"><a href="clang-tidy_8h.xhtml#ae67cd757e82e92930c9c9221f0297b5a">vrecpsq_f16</a></div><div class="ttdeci">float16x8_t vrecpsq_f16(float16x8_t, float16x8_t)</div><div class="ttdef"><b>Definition:</b> <a href="clang-tidy_8h_source.xhtml#l00165">clang-tidy.h:165</a></div></div>
<div class="ttc" id="aclang-tidy_8h_xhtml_a02bbbedd1ea200543e093cdf593fe6c6"><div class="ttname"><a href="clang-tidy_8h.xhtml#a02bbbedd1ea200543e093cdf593fe6c6">vmul_f16</a></div><div class="ttdeci">float16x4_t vmul_f16(float16x4_t, float16x4_t)</div><div class="ttdef"><b>Definition:</b> <a href="clang-tidy_8h_source.xhtml#l00035">clang-tidy.h:35</a></div></div>
<div class="ttc" id="aclang-tidy_8h_xhtml_abe2364764efb37f6b82dfef60d8f0bc9"><div class="ttname"><a href="clang-tidy_8h.xhtml#abe2364764efb37f6b82dfef60d8f0bc9">vrsqrts_f16</a></div><div class="ttdeci">float16x4_t vrsqrts_f16(float16x4_t, float16x4_t)</div><div class="ttdef"><b>Definition:</b> <a href="clang-tidy_8h_source.xhtml#l00010">clang-tidy.h:10</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_afeb24f265771053bc8365e30b4c409e5"><div class="ttname"><a href="namespacearm__compute.xhtml#afeb24f265771053bc8365e30b4c409e5">arm_compute::convert_to_float32x4x4</a></div><div class="ttdeci">float32x4x4_t convert_to_float32x4x4(const T &amp;in)</div><div class="ttdoc">Converts to float32x4x4_t from the specified templated 16 elements vectors.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a9c673ade3003d5d4e28ebf5875795dc4"><div class="ttname"><a href="namespacearm__compute.xhtml#a9c673ade3003d5d4e28ebf5875795dc4">arm_compute::convert_float32x4x4_to_int8x16</a></div><div class="ttdeci">void convert_float32x4x4_to_int8x16(const float32x4x4_t &amp;in, int8x16_t &amp;out)</div><div class="ttdoc">Converts from float32x4x4_t to just one int8x16_t.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_math_8inl_source.xhtml#l00502">NEMath.inl:502</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1b362fecc52ac83bcfbb0850549edce4"><div class="ttname"><a href="namespacearm__compute.xhtml#a1b362fecc52ac83bcfbb0850549edce4">arm_compute::convert_uint8x16_to_float32x4x4</a></div><div class="ttdeci">float32x4x4_t convert_uint8x16_to_float32x4x4(const uint8x16_t &amp;in)</div><div class="ttdoc">Converts from uint8x16 to float32x4x4_t.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_math_8inl_source.xhtml#l00448">NEMath.inl:448</a></div></div>
<div class="ttc" id="aclang-tidy_8h_xhtml_aac6580a2f5ef2b549765f35a8682fb40"><div class="ttname"><a href="clang-tidy_8h.xhtml#aac6580a2f5ef2b549765f35a8682fb40">vbslq_f16</a></div><div class="ttdeci">float16x8_t vbslq_f16(uint16x8_t, float16x8_t, float16x8_t)</div><div class="ttdef"><b>Definition:</b> <a href="clang-tidy_8h_source.xhtml#l00110">clang-tidy.h:110</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa9d5ed678fe57bcca610140957afab571"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa9d5ed678fe57bcca610140957afab571">arm_compute::Channel::B</a></div><div class="ttdeci">@ B</div><div class="ttdoc">Blue channel.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_aa6465367a67af2bae4ca46750231dae0"><div class="ttname"><a href="namespacearm__compute.xhtml#aa6465367a67af2bae4ca46750231dae0">arm_compute::vpowq_f32</a></div><div class="ttdeci">float32x4_t vpowq_f32(float32x4_t val, float32x4_t n)</div><div class="ttdoc">Calculate n power of a number.</div></div>
<div class="ttc" id="aclang-tidy_8h_xhtml_a05fa952380422d74f16f32307570741f"><div class="ttname"><a href="clang-tidy_8h.xhtml#a05fa952380422d74f16f32307570741f">vrsqrte_f16</a></div><div class="ttdeci">float16x4_t vrsqrte_f16(float16x4_t)</div><div class="ttdef"><b>Definition:</b> <a href="clang-tidy_8h_source.xhtml#l00135">clang-tidy.h:135</a></div></div>
<div class="ttc" id="aclang-tidy_8h_xhtml_a716ec8298b66d09b1eccd2dceaaf4cfd"><div class="ttname"><a href="clang-tidy_8h.xhtml#a716ec8298b66d09b1eccd2dceaaf4cfd">vcvtq_f16_s16</a></div><div class="ttdeci">uint16x8_t vcvtq_f16_s16(float16x8_t)</div><div class="ttdef"><b>Definition:</b> <a href="clang-tidy_8h_source.xhtml#l00125">clang-tidy.h:125</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa1a2ddc2db4693cfd16d534cde5572cc1"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa1a2ddc2db4693cfd16d534cde5572cc1">arm_compute::Channel::C1</a></div><div class="ttdeci">@ C1</div><div class="ttdoc">Second channel (used by formats with unknown channel types).</div></div>
<div class="ttc" id="aclang-tidy_8h_xhtml_a578c95448f5d04cf60521189d075b1a8"><div class="ttname"><a href="clang-tidy_8h.xhtml#a578c95448f5d04cf60521189d075b1a8">vrecpe_f16</a></div><div class="ttdeci">float16x4_t vrecpe_f16(float16x4_t)</div><div class="ttdef"><b>Definition:</b> <a href="clang-tidy_8h_source.xhtml#l00150">clang-tidy.h:150</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a542bbd5e844a0a494e3e4078a433d44b"><div class="ttname"><a href="namespacearm__compute.xhtml#a542bbd5e844a0a494e3e4078a433d44b">arm_compute::te_sin_coeff4</a></div><div class="ttdeci">constexpr float te_sin_coeff4</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_math_8inl_source.xhtml#l00048">NEMath.inl:48</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a9c1bcf45a03708a37132c1e2df5cd2b0"><div class="ttname"><a href="namespacearm__compute.xhtml#a9c1bcf45a03708a37132c1e2df5cd2b0">arm_compute::te_sin_coeff3</a></div><div class="ttdeci">constexpr float te_sin_coeff3</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_math_8inl_source.xhtml#l00047">NEMath.inl:47</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a5663e5bad3b65f7fa59105be39d1fe12"><div class="ttname"><a href="namespacearm__compute.xhtml#a5663e5bad3b65f7fa59105be39d1fe12">arm_compute::erf_f32_lut</a></div><div class="ttdeci">const std::array&lt; ErfLutEntry&lt; float &gt;, 513 &gt; erf_f32_lut</div><div class="ttdoc">The lookup table for FP32 erf(x) calculation.</div><div class="ttdef"><b>Definition:</b> <a href="_math_8cpp_source.xhtml#l00030">Math.cpp:30</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_aa107fc2f2937504672fe241943d8260b"><div class="ttname"><a href="namespacearm__compute.xhtml#aa107fc2f2937504672fe241943d8260b">arm_compute::verfq_f32</a></div><div class="ttdeci">float32x4_t verfq_f32(float32x4_t x)</div><div class="ttdoc">Calculate error function.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a62947a5a80433465f50372c441be3c8c"><div class="ttname"><a href="namespacearm__compute.xhtml#a62947a5a80433465f50372c441be3c8c">arm_compute::vreduce</a></div><div class="ttdeci">float vreduce(const float32x4_t &amp;v)</div><div class="ttdoc">Reduce a vector to be a scalar by accumulating all lanes in the vector.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_math_8inl_source.xhtml#l00537">NEMath.inl:537</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aaf1a543f5a2c5d49bc5dde298fcf716e4"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aaf1a543f5a2c5d49bc5dde298fcf716e4">arm_compute::Channel::C2</a></div><div class="ttdeci">@ C2</div><div class="ttdoc">Third channel (used by formats with unknown channel types).</div></div>
<div class="ttc" id="aclang-tidy_8h_xhtml_a059554fad372f90a38324663bcefe237"><div class="ttname"><a href="clang-tidy_8h.xhtml#a059554fad372f90a38324663bcefe237">vsubq_f16</a></div><div class="ttdeci">float16x8_t vsubq_f16(float16x8_t, float16x8_t)</div><div class="ttdef"><b>Definition:</b> <a href="clang-tidy_8h_source.xhtml#l00080">clang-tidy.h:80</a></div></div>
<div class="ttc" id="aclang-tidy_8h_xhtml_ad83246960ea8ac7b68d302ba58ae307a"><div class="ttname"><a href="clang-tidy_8h.xhtml#ad83246960ea8ac7b68d302ba58ae307a">vcgtq_f16</a></div><div class="ttdeci">uint16x8_t vcgtq_f16(float16x8_t, float16x8_t)</div><div class="ttdef"><b>Definition:</b> <a href="clang-tidy_8h_source.xhtml#l00105">clang-tidy.h:105</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_afc415e7fc5e633a0b85b08b2bba5b5cf"><div class="ttname"><a href="namespacearm__compute.xhtml#afc415e7fc5e633a0b85b08b2bba5b5cf">arm_compute::vinvsqrt_f32</a></div><div class="ttdeci">float32x2_t vinvsqrt_f32(float32x2_t x)</div><div class="ttdoc">Calculate inverse square root.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1d090b80b655e7f8fd8977bb93808b04"><div class="ttname"><a href="namespacearm__compute.xhtml#a1d090b80b655e7f8fd8977bb93808b04">arm_compute::vlogq_f32</a></div><div class="ttdeci">float32x4_t vlogq_f32(float32x4_t x)</div><div class="ttdoc">Calculate logarithm.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad63fda57a59d2dcc82eb13599581fcc0"><div class="ttname"><a href="namespacearm__compute.xhtml#ad63fda57a59d2dcc82eb13599581fcc0">arm_compute::convert_float_to_int&lt; float32x4x4_t, uint8x16_t &gt;</a></div><div class="ttdeci">uint8x16_t convert_float_to_int&lt; float32x4x4_t, uint8x16_t &gt;(const float32x4x4_t &amp;in)</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_math_8inl_source.xhtml#l00510">NEMath.inl:510</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a4ee01955c2dd8c14a0d107a36cb62618"><div class="ttname"><a href="namespacearm__compute.xhtml#a4ee01955c2dd8c14a0d107a36cb62618">arm_compute::convert_float32x4x4_to_uint8x16</a></div><div class="ttdeci">void convert_float32x4x4_to_uint8x16(const float32x4x4_t &amp;in, uint8x16_t &amp;out)</div><div class="ttdoc">Converts from two float32x4x4_t to just one uint8x16_t.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_math_8inl_source.xhtml#l00495">NEMath.inl:495</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa7fc56270e7a70fa81a5935b72eacbe29"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa7fc56270e7a70fa81a5935b72eacbe29">arm_compute::Channel::A</a></div><div class="ttdeci">@ A</div><div class="ttdoc">Alpha channel.</div></div>
<div class="ttc" id="a_toolchain_support_8h_xhtml"><div class="ttname"><a href="_toolchain_support_8h.xhtml">ToolchainSupport.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a4f12b7902ae53e3898b2ab779f962340"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">arm_compute::test::validation::scale</a></div><div class="ttdeci">NEScale scale</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00272">Scale.cpp:272</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2024 Arm Limited.</div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a77e02c19b498c3ff4ee373b0825cfd19"><div class="ttname"><a href="namespacearm__compute.xhtml#a77e02c19b498c3ff4ee373b0825cfd19">arm_compute::rounding_divide_by_pow2</a></div><div class="ttdeci">int32x4_t rounding_divide_by_pow2(int32x4_t x, int32x4_t exponent)</div><div class="ttdoc">Round to the nearest division by a power-of-two using exponent.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_math_8inl_source.xhtml#l00425">NEMath.inl:425</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a5b6eb5a8c8e8944d781892928f71a698"><div class="ttname"><a href="namespacearm__compute.xhtml#a5b6eb5a8c8e8944d781892928f71a698">arm_compute::vsinq_f32</a></div><div class="ttdeci">float32x4_t vsinq_f32(float32x4_t val)</div><div class="ttdoc">Calculate sine.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ae3e74f28452dea05869826c30b95f54b"><div class="ttname"><a href="namespacearm__compute.xhtml#ae3e74f28452dea05869826c30b95f54b">arm_compute::te_sin_coeff2</a></div><div class="ttdeci">constexpr float te_sin_coeff2</div><div class="ttdoc">Sin polynomial coefficients.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_math_8inl_source.xhtml#l00046">NEMath.inl:46</a></div></div>
<div class="ttc" id="aclang-tidy_8h_xhtml_ad952d0fdf95c4563ece11698a912c785"><div class="ttname"><a href="clang-tidy_8h.xhtml#ad952d0fdf95c4563ece11698a912c785">vrsqrteq_f16</a></div><div class="ttdeci">float16x8_t vrsqrteq_f16(float16x8_t)</div><div class="ttdef"><b>Definition:</b> <a href="clang-tidy_8h_source.xhtml#l00140">clang-tidy.h:140</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa3abe124ecc82bf2c2e22e6058f38c50c"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa3abe124ecc82bf2c2e22e6058f38c50c">arm_compute::Channel::C3</a></div><div class="ttdeci">@ C3</div><div class="ttdoc">Fourth channel (used by formats with unknown channel types).</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a9fb53f220926a32be02f9446aed5bd88"><div class="ttname"><a href="namespacearm__compute.xhtml#a9fb53f220926a32be02f9446aed5bd88">arm_compute::vroundq_rte_f32</a></div><div class="ttdeci">float32x4_t vroundq_rte_f32(float32x4_t val)</div><div class="ttdoc">Calculate round value of a vector to nearest with ties to even.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a2e0f2412b4d1302272d1aeb85d21ab25"><div class="ttname"><a href="namespacearm__compute.xhtml#a2e0f2412b4d1302272d1aeb85d21ab25">arm_compute::vinvq_f32</a></div><div class="ttdeci">float32x4_t vinvq_f32(float32x4_t x)</div><div class="ttdoc">Calculate reciprocal.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a8677ddae33f84bb0e84e995c54bf6ba3"><div class="ttname"><a href="namespacearm__compute.xhtml#a8677ddae33f84bb0e84e995c54bf6ba3">arm_compute::convert_int_to_float&lt; float32x4x4_t, uint8x16_t &gt;</a></div><div class="ttdeci">float32x4x4_t convert_int_to_float&lt; float32x4x4_t, uint8x16_t &gt;(const uint8x16_t &amp;in)</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_math_8inl_source.xhtml#l00518">NEMath.inl:518</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ab55486f1153a4c5f507d4923b59fc6a0"><div class="ttname"><a href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">arm_compute::vexpq_f32</a></div><div class="ttdeci">float32x4_t vexpq_f32(float32x4_t x)</div><div class="ttdoc">Calculate exponential.</div></div>
<div class="ttc" id="asrc_2core_2utils_2_math_8h_xhtml"><div class="ttname"><a href="src_2core_2utils_2_math_8h.xhtml">Math.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_afe0353e9228b8be37bcdb4a1770f44e3"><div class="ttname"><a href="namespacearm__compute.xhtml#afe0353e9228b8be37bcdb4a1770f44e3">arm_compute::te_sin_coeff5</a></div><div class="ttdeci">constexpr float te_sin_coeff5</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_math_8inl_source.xhtml#l00049">NEMath.inl:49</a></div></div>
<div class="ttc" id="aclang-tidy_8h_xhtml_a608fb0db3de44492fcc96a836eadf11b"><div class="ttname"><a href="clang-tidy_8h.xhtml#a608fb0db3de44492fcc96a836eadf11b">vadd_f16</a></div><div class="ttdeci">float16x4_t vadd_f16(float16x4_t, float16x4_t)</div><div class="ttdef"><b>Definition:</b> <a href="clang-tidy_8h_source.xhtml#l00040">clang-tidy.h:40</a></div></div>
<div class="ttc" id="aclang-tidy_8h_xhtml_a79c9aca60e8cf347407d072168faf2aa"><div class="ttname"><a href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a></div><div class="ttdeci">float16x8_t vaddq_f16(float16x8_t, float16x8_t)</div><div class="ttdef"><b>Definition:</b> <a href="clang-tidy_8h_source.xhtml#l00075">clang-tidy.h:75</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_d91e1966cc57df4f49d1e07be7697713.xhtml">NEON</a></li><li class="navelem"><a class="el" href="_n_e_math_8inl.xhtml">NEMath.inl</a></li>
    <li class="footer">Generated on Mon Jun 17 2024 15:11:19 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
