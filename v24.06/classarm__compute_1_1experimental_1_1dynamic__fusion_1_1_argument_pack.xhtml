<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: ArgumentPack&lt; T &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.06</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">ArgumentPack&lt; T &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>This is a generic class that packs the arguments of an operator.  
 <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_argument_pack_8h_source.xhtml">ArgumentPack.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element.xhtml">PackElement</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A single argument element within the pack It contains either a const pointer or a non-const pointer to the Tensor-related type T, but never at the same time.  <a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a10f9c7c6dfba722b1e9dbd22e141ae05"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a10f9c7c6dfba722b1e9dbd22e141ae05">Id</a> = <a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TensorType</a></td></tr>
<tr class="memdesc:a10f9c7c6dfba722b1e9dbd22e141ae05"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">arm_compute::TensorType</a> encodes the position of a tensor argument within the pack  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a10f9c7c6dfba722b1e9dbd22e141ae05">More...</a><br /></td></tr>
<tr class="separator:a10f9c7c6dfba722b1e9dbd22e141ae05"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a61bf45ebe0672e2a8438434521436c36"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a61bf45ebe0672e2a8438434521436c36">ArgumentPack</a> ()=default</td></tr>
<tr class="memdesc:a61bf45ebe0672e2a8438434521436c36"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a61bf45ebe0672e2a8438434521436c36">More...</a><br /></td></tr>
<tr class="separator:a61bf45ebe0672e2a8438434521436c36"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1b59cf7829dbda76975496804c6035ac"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a1b59cf7829dbda76975496804c6035ac">~ArgumentPack</a> ()=default</td></tr>
<tr class="memdesc:a1b59cf7829dbda76975496804c6035ac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a1b59cf7829dbda76975496804c6035ac">More...</a><br /></td></tr>
<tr class="separator:a1b59cf7829dbda76975496804c6035ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5af1be0127bfd7bb86748bd71fbd822"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#ab5af1be0127bfd7bb86748bd71fbd822">ArgumentPack</a> (const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml">ArgumentPack</a>&lt; T &gt; &amp;other)=default</td></tr>
<tr class="memdesc:ab5af1be0127bfd7bb86748bd71fbd822"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be copy constructed.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#ab5af1be0127bfd7bb86748bd71fbd822">More...</a><br /></td></tr>
<tr class="separator:ab5af1be0127bfd7bb86748bd71fbd822"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a89274036665beb68bbaf3949a315fb04"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml">ArgumentPack</a>&lt; T &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a89274036665beb68bbaf3949a315fb04">operator=</a> (const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml">ArgumentPack</a>&lt; T &gt; &amp;other)=default</td></tr>
<tr class="memdesc:a89274036665beb68bbaf3949a315fb04"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be copied.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a89274036665beb68bbaf3949a315fb04">More...</a><br /></td></tr>
<tr class="separator:a89274036665beb68bbaf3949a315fb04"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a55799ffb6e0f59d56b56a0999ada24ee"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a55799ffb6e0f59d56b56a0999ada24ee">ArgumentPack</a> (<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml">ArgumentPack</a>&lt; T &gt; &amp;&amp;other)=default</td></tr>
<tr class="memdesc:a55799ffb6e0f59d56b56a0999ada24ee"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be move constructed.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a55799ffb6e0f59d56b56a0999ada24ee">More...</a><br /></td></tr>
<tr class="separator:a55799ffb6e0f59d56b56a0999ada24ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a778d43ca9c9c660ffc9506c8b3dabff2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml">ArgumentPack</a>&lt; T &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a778d43ca9c9c660ffc9506c8b3dabff2">operator=</a> (<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml">ArgumentPack</a>&lt; T &gt; &amp;&amp;other)=default</td></tr>
<tr class="memdesc:a778d43ca9c9c660ffc9506c8b3dabff2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be moved.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a778d43ca9c9c660ffc9506c8b3dabff2">More...</a><br /></td></tr>
<tr class="separator:a778d43ca9c9c660ffc9506c8b3dabff2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a88b8d9bbd989cabb3a326c05e45aa8fa"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a88b8d9bbd989cabb3a326c05e45aa8fa">ArgumentPack</a> (const std::initializer_list&lt; <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element.xhtml">PackElement</a> &gt; &amp;l)</td></tr>
<tr class="memdesc:a88b8d9bbd989cabb3a326c05e45aa8fa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializer list Constructor.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a88b8d9bbd989cabb3a326c05e45aa8fa">More...</a><br /></td></tr>
<tr class="separator:a88b8d9bbd989cabb3a326c05e45aa8fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0cc4d50143adce1cc5d438be07b8780a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a0cc4d50143adce1cc5d438be07b8780a">add_tensor</a> (<a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">Id</a> id, T *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)</td></tr>
<tr class="memdesc:a0cc4d50143adce1cc5d438be07b8780a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add tensor to the pack.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a0cc4d50143adce1cc5d438be07b8780a">More...</a><br /></td></tr>
<tr class="separator:a0cc4d50143adce1cc5d438be07b8780a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae723b570d1c3caab0ff080c117fa15cf"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#ae723b570d1c3caab0ff080c117fa15cf">add_const_tensor</a> (<a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">Id</a> id, const T *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)</td></tr>
<tr class="memdesc:ae723b570d1c3caab0ff080c117fa15cf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add const tensor to the pack.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#ae723b570d1c3caab0ff080c117fa15cf">More...</a><br /></td></tr>
<tr class="separator:ae723b570d1c3caab0ff080c117fa15cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a143340085c13e43abc32b6753f2bb826"><td class="memItemLeft" align="right" valign="top">T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a143340085c13e43abc32b6753f2bb826">get_tensor</a> (<a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">Id</a> id)</td></tr>
<tr class="memdesc:a143340085c13e43abc32b6753f2bb826"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get tensor of a given id from the pack.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a143340085c13e43abc32b6753f2bb826">More...</a><br /></td></tr>
<tr class="separator:a143340085c13e43abc32b6753f2bb826"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad73626614be041dfc0ca202b149fdd19"><td class="memItemLeft" align="right" valign="top">const T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#ad73626614be041dfc0ca202b149fdd19">get_const_tensor</a> (<a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">Id</a> id) const</td></tr>
<tr class="memdesc:ad73626614be041dfc0ca202b149fdd19"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get constant tensor of a given id.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#ad73626614be041dfc0ca202b149fdd19">More...</a><br /></td></tr>
<tr class="separator:ad73626614be041dfc0ca202b149fdd19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d6084ee3875b08560752a92417378bb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a9d6084ee3875b08560752a92417378bb">remove_tensor</a> (<a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">Id</a> id)</td></tr>
<tr class="memdesc:a9d6084ee3875b08560752a92417378bb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Remove the tensor stored with the given id.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a9d6084ee3875b08560752a92417378bb">More...</a><br /></td></tr>
<tr class="separator:a9d6084ee3875b08560752a92417378bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a259cb5a711406a8c3e5d937eb9350cca"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a259cb5a711406a8c3e5d937eb9350cca">size</a> () const</td></tr>
<tr class="memdesc:a259cb5a711406a8c3e5d937eb9350cca"><td class="mdescLeft">&#160;</td><td class="mdescRight">Pack size accessor.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a259cb5a711406a8c3e5d937eb9350cca">More...</a><br /></td></tr>
<tr class="separator:a259cb5a711406a8c3e5d937eb9350cca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a644718bb2fb240de962dc3c9a1fdf0dc"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a644718bb2fb240de962dc3c9a1fdf0dc">empty</a> () const</td></tr>
<tr class="memdesc:a644718bb2fb240de962dc3c9a1fdf0dc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks if pack is empty.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a644718bb2fb240de962dc3c9a1fdf0dc">More...</a><br /></td></tr>
<tr class="separator:a644718bb2fb240de962dc3c9a1fdf0dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06d2e567a50372dc427f27654f9f8eb8"><td class="memItemLeft" align="right" valign="top">std::vector&lt; T * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a06d2e567a50372dc427f27654f9f8eb8">get_src_tensors</a> ()</td></tr>
<tr class="memdesc:a06d2e567a50372dc427f27654f9f8eb8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the ACL_SRC_* tensors.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a06d2e567a50372dc427f27654f9f8eb8">More...</a><br /></td></tr>
<tr class="separator:a06d2e567a50372dc427f27654f9f8eb8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af51575e50393ea37d24c67383fd61d09"><td class="memItemLeft" align="right" valign="top">std::vector&lt; const T * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#af51575e50393ea37d24c67383fd61d09">get_const_src_tensors</a> () const</td></tr>
<tr class="memdesc:af51575e50393ea37d24c67383fd61d09"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the const ACL_SRC_* tensors.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#af51575e50393ea37d24c67383fd61d09">More...</a><br /></td></tr>
<tr class="separator:af51575e50393ea37d24c67383fd61d09"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d9b6a0c26ec8f3fd4854ac4e219f2fa"><td class="memItemLeft" align="right" valign="top">std::vector&lt; T * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a4d9b6a0c26ec8f3fd4854ac4e219f2fa">get_dst_tensors</a> ()</td></tr>
<tr class="memdesc:a4d9b6a0c26ec8f3fd4854ac4e219f2fa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the ACL_DST_* tensors.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a4d9b6a0c26ec8f3fd4854ac4e219f2fa">More...</a><br /></td></tr>
<tr class="separator:a4d9b6a0c26ec8f3fd4854ac4e219f2fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95d4dfcd1d28cd4461e3bee6d1f472d5"><td class="memItemLeft" align="right" valign="top">std::vector&lt; const T * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a95d4dfcd1d28cd4461e3bee6d1f472d5">get_const_dst_tensors</a> () const</td></tr>
<tr class="memdesc:a95d4dfcd1d28cd4461e3bee6d1f472d5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the const ACL_DST_* tensors.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a95d4dfcd1d28cd4461e3bee6d1f472d5">More...</a><br /></td></tr>
<tr class="separator:a95d4dfcd1d28cd4461e3bee6d1f472d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;typename T&gt;<br />
class arm_compute::experimental::dynamic_fusion::ArgumentPack&lt; T &gt;</h3>

<p>This is a generic class that packs the arguments of an operator. </p>
<p>Forward declaration.</p>
<p>For now, it is only used for tensor-related types Examples of "tensor-related types": <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>, <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a></p>
<p>The argument id is the position of the argument within the pack, and is represented by <a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TensorType</a></p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">T</td><td>Tensor-related type </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_argument_pack_8h_source.xhtml#l00046">46</a> of file <a class="el" href="_argument_pack_8h_source.xhtml">ArgumentPack.h</a>.</p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a id="a10f9c7c6dfba722b1e9dbd22e141ae05"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a10f9c7c6dfba722b1e9dbd22e141ae05">&#9670;&nbsp;</a></span>Id</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">Id</a> =  <a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TensorType</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p><a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">arm_compute::TensorType</a> encodes the position of a tensor argument within the pack </p>

<p class="definition">Definition at line <a class="el" href="_argument_pack_8h_source.xhtml#l00050">50</a> of file <a class="el" href="_argument_pack_8h_source.xhtml">ArgumentPack.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a61bf45ebe0672e2a8438434521436c36"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a61bf45ebe0672e2a8438434521436c36">&#9670;&nbsp;</a></span>ArgumentPack() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml">ArgumentPack</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default constructor. </p>

</div>
</div>
<a id="a1b59cf7829dbda76975496804c6035ac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1b59cf7829dbda76975496804c6035ac">&#9670;&nbsp;</a></span>~ArgumentPack()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml">ArgumentPack</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Destructor. </p>

</div>
</div>
<a id="ab5af1be0127bfd7bb86748bd71fbd822"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab5af1be0127bfd7bb86748bd71fbd822">&#9670;&nbsp;</a></span>ArgumentPack() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml">ArgumentPack</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml">ArgumentPack</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allow instances of this class to be copy constructed. </p>

</div>
</div>
<a id="a55799ffb6e0f59d56b56a0999ada24ee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a55799ffb6e0f59d56b56a0999ada24ee">&#9670;&nbsp;</a></span>ArgumentPack() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml">ArgumentPack</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml">ArgumentPack</a>&lt; T &gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allow instances of this class to be move constructed. </p>

</div>
</div>
<a id="a88b8d9bbd989cabb3a326c05e45aa8fa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a88b8d9bbd989cabb3a326c05e45aa8fa">&#9670;&nbsp;</a></span>ArgumentPack() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml">ArgumentPack</a> </td>
          <td>(</td>
          <td class="paramtype">const std::initializer_list&lt; <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_1_1_pack_element.xhtml">PackElement</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>l</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Initializer list Constructor. </p>

<p class="definition">Definition at line <a class="el" href="_argument_pack_8h_source.xhtml#l00087">87</a> of file <a class="el" href="_argument_pack_8h_source.xhtml">ArgumentPack.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                                                            : _pack{}</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    {</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;e : l)</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        {</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            _pack[e.id] = e;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        }</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    }</div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="ae723b570d1c3caab0ff080c117fa15cf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae723b570d1c3caab0ff080c117fa15cf">&#9670;&nbsp;</a></span>add_const_tensor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void add_const_tensor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">Id</a>&#160;</td>
          <td class="paramname"><em>id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>tensor</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Add const tensor to the pack. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">id</td><td>ID of the tensor to add </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> to add </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_argument_pack_8h_source.xhtml#l00108">108</a> of file <a class="el" href="_argument_pack_8h_source.xhtml">ArgumentPack.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    {</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        _pack[id] = PackElement(<span class="keywordtype">id</span>, <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_gpu_output_8cpp_source.xhtml#l00088">GpuOutput::create_op()</a>, <a class="el" href="_gpu_sigmoid_8cpp_source.xhtml#l00113">GpuSigmoid::create_op()</a>, <a class="el" href="_gpu_tanh_8cpp_source.xhtml#l00112">GpuTanh::create_op()</a>, <a class="el" href="_gpu_reshape_8cpp_source.xhtml#l00113">GpuReshape::create_op()</a>, <a class="el" href="_gpu_clamp_8cpp_source.xhtml#l00119">GpuClamp::create_op()</a>, <a class="el" href="_gpu_softmax_8cpp_source.xhtml#l00133">GpuSoftmax::create_op()</a>, <a class="el" href="_gpu_cast_8cpp_source.xhtml#l00119">GpuCast::create_op()</a>, <a class="el" href="_gpu_depthwise_conv2d_8cpp_source.xhtml#l00192">GpuDepthwiseConv2d::create_op()</a>, <a class="el" href="_gpu_resize_8cpp_source.xhtml#l00143">GpuResize::create_op()</a>, <a class="el" href="_gpu_conv2d_8cpp_source.xhtml#l00189">GpuConv2d::create_op()</a>, <a class="el" href="_gpu_pool2d_8cpp_source.xhtml#l00150">GpuPool2d::create_op()</a>, <a class="el" href="_gpu_elementwise_binary_common_8cpp_source.xhtml#l00143">GpuElementwiseBinaryCommon::create_op()</a>, <a class="el" href="_gpu_mat_mul_8cpp_source.xhtml#l00191">GpuMatMul::create_op()</a>, <a class="el" href="_gpu_softmax_8cpp_source.xhtml#l00045">GpuSoftmax::is_supported_op()</a>, <a class="el" href="_gpu_pool2d_8cpp_source.xhtml#l00107">GpuPool2d::is_supported_op()</a>, <a class="el" href="_gpu_output_8cpp_source.xhtml#l00060">GpuOutput::validate_op()</a>, <a class="el" href="_gpu_sigmoid_8cpp_source.xhtml#l00088">GpuSigmoid::validate_op()</a>, <a class="el" href="_gpu_tanh_8cpp_source.xhtml#l00087">GpuTanh::validate_op()</a>, <a class="el" href="_gpu_reshape_8cpp_source.xhtml#l00089">GpuReshape::validate_op()</a>, <a class="el" href="_gpu_cast_8cpp_source.xhtml#l00095">GpuCast::validate_op()</a>, <a class="el" href="_gpu_resize_8cpp_source.xhtml#l00118">GpuResize::validate_op()</a>, <a class="el" href="_gpu_clamp_8cpp_source.xhtml#l00094">GpuClamp::validate_op()</a>, <a class="el" href="_gpu_softmax_8cpp_source.xhtml#l00100">GpuSoftmax::validate_op()</a>, <a class="el" href="_gpu_conv2d_8cpp_source.xhtml#l00149">GpuConv2d::validate_op()</a>, <a class="el" href="_gpu_depthwise_conv2d_8cpp_source.xhtml#l00154">GpuDepthwiseConv2d::validate_op()</a>, <a class="el" href="_gpu_pool2d_8cpp_source.xhtml#l00080">GpuPool2d::validate_op()</a>, <a class="el" href="_gpu_elementwise_binary_common_8cpp_source.xhtml#l00115">GpuElementwiseBinaryCommon::validate_op()</a>, and <a class="el" href="_gpu_mat_mul_8cpp_source.xhtml#l00160">GpuMatMul::validate_op()</a>.</p>

</div>
</div>
<a id="a0cc4d50143adce1cc5d438be07b8780a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0cc4d50143adce1cc5d438be07b8780a">&#9670;&nbsp;</a></span>add_tensor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void add_tensor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">Id</a>&#160;</td>
          <td class="paramname"><em>id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T *&#160;</td>
          <td class="paramname"><em>tensor</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Add tensor to the pack. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">id</td><td>ID of the tensor to add </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> to add </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_argument_pack_8h_source.xhtml#l00099">99</a> of file <a class="el" href="_argument_pack_8h_source.xhtml">ArgumentPack.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    {</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        _pack[id] = PackElement(<span class="keywordtype">id</span>, <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_gpu_reshape_8cpp_source.xhtml#l00113">GpuReshape::create_op()</a>, <a class="el" href="_gpu_pool2d_8cpp_source.xhtml#l00150">GpuPool2d::create_op()</a>, and <a class="el" href="_gpu_elementwise_binary_common_8cpp_source.xhtml#l00143">GpuElementwiseBinaryCommon::create_op()</a>.</p>

</div>
</div>
<a id="a644718bb2fb240de962dc3c9a1fdf0dc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a644718bb2fb240de962dc3c9a1fdf0dc">&#9670;&nbsp;</a></span>empty()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool empty </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Checks if pack is empty. </p>
<dl class="section return"><dt>Returns</dt><dd>True if empty else false </dd></dl>

<p class="definition">Definition at line <a class="el" href="_argument_pack_8h_source.xhtml#l00158">158</a> of file <a class="el" href="_argument_pack_8h_source.xhtml">ArgumentPack.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    {</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        <span class="keywordflow">return</span> _pack.empty();</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    }</div>
</div><!-- fragment -->
</div>
</div>
<a id="a95d4dfcd1d28cd4461e3bee6d1f472d5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a95d4dfcd1d28cd4461e3bee6d1f472d5">&#9670;&nbsp;</a></span>get_const_dst_tensors()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;const T *&gt; get_const_dst_tensors </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the const ACL_DST_* tensors. </p>
<dl class="section return"><dt>Returns</dt><dd>std::vector&lt;const T *&gt; </dd></dl>

<p class="definition">Definition at line <a class="el" href="_argument_pack_8h_source.xhtml#l00217">217</a> of file <a class="el" href="_argument_pack_8h_source.xhtml">ArgumentPack.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    {</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        std::vector&lt;const T *&gt; dst_tensors{};</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> <span class="keywordtype">id</span> = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2">TensorType::ACL_DST</a>); id &lt;= static_cast&lt;int&gt;(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a3fb1122062a8d6eac28c9fe0dc2aba3d">TensorType::ACL_DST_END</a>); ++id)</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        {</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;            <span class="keyword">auto</span> <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> = <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#ad73626614be041dfc0ca202b149fdd19">get_const_tensor</a>(<span class="keyword">static_cast&lt;</span><a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TensorType</a><span class="keyword">&gt;</span>(<span class="keywordtype">id</span>));</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;            <span class="keywordflow">if</span> (<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;            {</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                dst_tensors.push_back(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            }</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        }</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        <span class="keywordflow">return</span> dst_tensors;</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_gpu_kernel_component_graph_8h_source.xhtml#l00073">GpuKernelComponentGraph::add_new_component()</a>.</p>

</div>
</div>
<a id="af51575e50393ea37d24c67383fd61d09"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af51575e50393ea37d24c67383fd61d09">&#9670;&nbsp;</a></span>get_const_src_tensors()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;const T *&gt; get_const_src_tensors </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the const ACL_SRC_* tensors. </p>
<dl class="section return"><dt>Returns</dt><dd>std::vector&lt;const T *&gt; </dd></dl>

<p class="definition">Definition at line <a class="el" href="_argument_pack_8h_source.xhtml#l00183">183</a> of file <a class="el" href="_argument_pack_8h_source.xhtml">ArgumentPack.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    {</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        std::vector&lt;const T *&gt; src_tensors{};</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> <span class="keywordtype">id</span> = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828ae1a1ae3e3415cb95b96aa11edbdbbb69">TensorType::ACL_SRC</a>); id &lt;= static_cast&lt;int&gt;(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a94a384e3d37fd4f398fc4d61d7bd70f4">TensorType::ACL_SRC_END</a>); ++id)</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        {</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            <span class="keyword">auto</span> <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> = <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#ad73626614be041dfc0ca202b149fdd19">get_const_tensor</a>(<span class="keyword">static_cast&lt;</span><a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TensorType</a><span class="keyword">&gt;</span>(<span class="keywordtype">id</span>));</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            <span class="keywordflow">if</span> (<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            {</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                src_tensors.push_back(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            }</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        }</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        <span class="keywordflow">return</span> src_tensors;</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_gpu_kernel_component_graph_8h_source.xhtml#l00073">GpuKernelComponentGraph::add_new_component()</a>.</p>

</div>
</div>
<a id="ad73626614be041dfc0ca202b149fdd19"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad73626614be041dfc0ca202b149fdd19">&#9670;&nbsp;</a></span>get_const_tensor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const T* get_const_tensor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">Id</a>&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get constant tensor of a given id. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">id</td><td>ID of tensor to extract</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The pointer to the tensor (const or not) if exist else nullptr </dd></dl>

<p class="definition">Definition at line <a class="el" href="_argument_pack_8h_source.xhtml#l00129">129</a> of file <a class="el" href="_argument_pack_8h_source.xhtml">ArgumentPack.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    {</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        <span class="keyword">auto</span> it = _pack.find(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <span class="keywordflow">if</span> (it != _pack.end())</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        {</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            <span class="keywordflow">return</span> it-&gt;second.ctensor != <span class="keyword">nullptr</span> ? it-&gt;second.ctensor : it-&gt;second.tensor;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        }</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_argument_pack_8h_source.xhtml#l00217">ArgumentPack&lt; arm_compute::ITensorInfo &gt;::get_const_dst_tensors()</a>, and <a class="el" href="_argument_pack_8h_source.xhtml#l00183">ArgumentPack&lt; arm_compute::ITensorInfo &gt;::get_const_src_tensors()</a>.</p>

</div>
</div>
<a id="a4d9b6a0c26ec8f3fd4854ac4e219f2fa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4d9b6a0c26ec8f3fd4854ac4e219f2fa">&#9670;&nbsp;</a></span>get_dst_tensors()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;T *&gt; get_dst_tensors </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the ACL_DST_* tensors. </p>
<dl class="section return"><dt>Returns</dt><dd>std::vector&lt;T *&gt; </dd></dl>

<p class="definition">Definition at line <a class="el" href="_argument_pack_8h_source.xhtml#l00200">200</a> of file <a class="el" href="_argument_pack_8h_source.xhtml">ArgumentPack.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    {</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        std::vector&lt;T *&gt; dst_tensors{};</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> <span class="keywordtype">id</span> = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2">TensorType::ACL_DST</a>); id &lt;= static_cast&lt;int&gt;(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a3fb1122062a8d6eac28c9fe0dc2aba3d">TensorType::ACL_DST_END</a>); ++id)</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        {</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            <span class="keyword">auto</span> <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> = <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a143340085c13e43abc32b6753f2bb826">get_tensor</a>(<span class="keyword">static_cast&lt;</span><a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TensorType</a><span class="keyword">&gt;</span>(<span class="keywordtype">id</span>));</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;            <span class="keywordflow">if</span> (<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;            {</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                dst_tensors.push_back(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            }</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        }</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        <span class="keywordflow">return</span> dst_tensors;</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    }</div>
</div><!-- fragment -->
</div>
</div>
<a id="a06d2e567a50372dc427f27654f9f8eb8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a06d2e567a50372dc427f27654f9f8eb8">&#9670;&nbsp;</a></span>get_src_tensors()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;T *&gt; get_src_tensors </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the ACL_SRC_* tensors. </p>
<dl class="section return"><dt>Returns</dt><dd>std::vector&lt;T *&gt; </dd></dl>

<p class="definition">Definition at line <a class="el" href="_argument_pack_8h_source.xhtml#l00166">166</a> of file <a class="el" href="_argument_pack_8h_source.xhtml">ArgumentPack.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    {</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        std::vector&lt;T *&gt; src_tensors{};</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> <span class="keywordtype">id</span> = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828ae1a1ae3e3415cb95b96aa11edbdbbb69">TensorType::ACL_SRC</a>); id &lt;= static_cast&lt;int&gt;(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a94a384e3d37fd4f398fc4d61d7bd70f4">TensorType::ACL_SRC_END</a>); ++id)</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        {</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            <span class="keyword">auto</span> <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> = <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a143340085c13e43abc32b6753f2bb826">get_tensor</a>(<span class="keyword">static_cast&lt;</span><a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TensorType</a><span class="keyword">&gt;</span>(<span class="keywordtype">id</span>));</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            <span class="keywordflow">if</span> (<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            {</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                src_tensors.push_back(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            }</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        }</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        <span class="keywordflow">return</span> src_tensors;</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    }</div>
</div><!-- fragment -->
</div>
</div>
<a id="a143340085c13e43abc32b6753f2bb826"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a143340085c13e43abc32b6753f2bb826">&#9670;&nbsp;</a></span>get_tensor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T* get_tensor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">Id</a>&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get tensor of a given id from the pack. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">id</td><td>ID of tensor to extract</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The pointer to the tensor if exist and is non-const else nullptr </dd></dl>

<p class="definition">Definition at line <a class="el" href="_argument_pack_8h_source.xhtml#l00118">118</a> of file <a class="el" href="_argument_pack_8h_source.xhtml">ArgumentPack.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    {</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <span class="keyword">auto</span> it = _pack.find(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <span class="keywordflow">return</span> it != _pack.end() ? it-&gt;second.tensor : <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_argument_pack_8h_source.xhtml#l00200">ArgumentPack&lt; arm_compute::ITensorInfo &gt;::get_dst_tensors()</a>, and <a class="el" href="_argument_pack_8h_source.xhtml#l00166">ArgumentPack&lt; arm_compute::ITensorInfo &gt;::get_src_tensors()</a>.</p>

</div>
</div>
<a id="a778d43ca9c9c660ffc9506c8b3dabff2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a778d43ca9c9c660ffc9506c8b3dabff2">&#9670;&nbsp;</a></span>operator=() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml">ArgumentPack</a>&lt;T&gt;&amp; operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml">ArgumentPack</a>&lt; T &gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allow instances of this class to be moved. </p>

</div>
</div>
<a id="a89274036665beb68bbaf3949a315fb04"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a89274036665beb68bbaf3949a315fb04">&#9670;&nbsp;</a></span>operator=() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml">ArgumentPack</a>&lt;T&gt;&amp; operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml">ArgumentPack</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allow instances of this class to be copied. </p>

</div>
</div>
<a id="a9d6084ee3875b08560752a92417378bb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9d6084ee3875b08560752a92417378bb">&#9670;&nbsp;</a></span>remove_tensor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void remove_tensor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">Id</a>&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Remove the tensor stored with the given id. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">id</td><td>ID of tensor to remove </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_argument_pack_8h_source.xhtml#l00142">142</a> of file <a class="el" href="_argument_pack_8h_source.xhtml">ArgumentPack.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    {</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        _pack.erase(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    }</div>
</div><!-- fragment -->
</div>
</div>
<a id="a259cb5a711406a8c3e5d937eb9350cca"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a259cb5a711406a8c3e5d937eb9350cca">&#9670;&nbsp;</a></span>size()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Pack size accessor. </p>
<dl class="section return"><dt>Returns</dt><dd>Number of tensors registered to the pack </dd></dl>

<p class="definition">Definition at line <a class="el" href="_argument_pack_8h_source.xhtml#l00150">150</a> of file <a class="el" href="_argument_pack_8h_source.xhtml">ArgumentPack.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    {</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <span class="keywordflow">return</span> _pack.size();</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    }</div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>src/dynamic_fusion/sketch/<a class="el" href="_argument_pack_8h_source.xhtml">ArgumentPack.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_xhtml_ad73626614be041dfc0ca202b149fdd19"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#ad73626614be041dfc0ca202b149fdd19">arm_compute::experimental::dynamic_fusion::ArgumentPack::get_const_tensor</a></div><div class="ttdeci">const T * get_const_tensor(Id id) const</div><div class="ttdoc">Get constant tensor of a given id.</div><div class="ttdef"><b>Definition:</b> <a href="_argument_pack_8h_source.xhtml#l00129">ArgumentPack.h:129</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a3fb1122062a8d6eac28c9fe0dc2aba3d"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a3fb1122062a8d6eac28c9fe0dc2aba3d">arm_compute::ACL_DST_END</a></div><div class="ttdeci">@ ACL_DST_END</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00059">Types.h:59</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">arm_compute::TensorType</a></div><div class="ttdeci">TensorType</div><div class="ttdoc">Memory type.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00038">Types.h:38</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a94a384e3d37fd4f398fc4d61d7bd70f4"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a94a384e3d37fd4f398fc4d61d7bd70f4">arm_compute::ACL_SRC_END</a></div><div class="ttdeci">@ ACL_SRC_END</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00052">Types.h:52</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2">arm_compute::ACL_DST</a></div><div class="ttdeci">@ ACL_DST</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00055">Types.h:55</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack_xhtml_a143340085c13e43abc32b6753f2bb826"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#a143340085c13e43abc32b6753f2bb826">arm_compute::experimental::dynamic_fusion::ArgumentPack::get_tensor</a></div><div class="ttdeci">T * get_tensor(Id id)</div><div class="ttdoc">Get tensor of a given id from the pack.</div><div class="ttdef"><b>Definition:</b> <a href="_argument_pack_8h_source.xhtml#l00118">ArgumentPack.h:118</a></div></div>
<div class="ttc" id="a_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00067">ClWorkloadRuntime.cpp:67</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828ae1a1ae3e3415cb95b96aa11edbdbbb69"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828ae1a1ae3e3415cb95b96aa11edbdbbb69">arm_compute::ACL_SRC</a></div><div class="ttdeci">@ ACL_SRC</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00044">Types.h:44</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1experimental.xhtml">experimental</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml">dynamic_fusion</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml">ArgumentPack</a></li>
    <li class="footer">Generated on Mon Jun 17 2024 15:11:31 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
