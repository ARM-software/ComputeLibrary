<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: Release Versions and Changelog</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.06</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('versions_changelogs.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="PageDoc"><div class="header">
  <div class="headertitle">
<div class="title">Release Versions and Changelog </div>  </div>
</div><!--header-->
<div class="contents">
<div class="toc"><h3>Table of Contents</h3>
<ul><li class="level1"><a href="#S2_1_versions">Release versions</a></li>
<li class="level1"><a href="#S2_2_changelog">Changelog</a></li>
</ul>
</div>
<div class="textblock"><h1><a class="anchor" id="S2_1_versions"></a>
Release versions</h1>
<p>All releases are numbered vYY.MM Where YY are the last two digits of the year, and MM the month number. If there is more than one release in a month then an extra sequential number is appended at the end: </p><pre class="fragment">v17.03 (First release of March 2017)
v17.03.1 (Second release of March 2017)
v17.04 (First release of April 2017)
</pre><dl class="section note"><dt>Note</dt><dd>We're aiming at releasing one major public release with new features per quarter. All releases in between will only contain bug fixes. </dd>
<dd>
Starting from release 22.05, 'master' branch is no longer being used, it has been replaced by 'main'. Please update your clone jobs accordingly.</dd></dl>
<h1><a class="anchor" id="S2_2_changelog"></a>
Changelog</h1>
<p>v24.06 Public minor release</p><ul>
<li>Enable FP16 in multiple Neon™ kernels for multi_isa + v8a</li>
<li>Fix OpenMP® thread scheduling for large machine</li>
<li>Optimize CPU activation functions using LUT-based implementation:<ul>
<li>Tanh function for FP16.</li>
</ul>
</li>
</ul>
<p>v24.05 Public major release</p><ul>
<li>Add <a class="el" href="classarm__compute_1_1_c_l_scatter.xhtml">CLScatter</a> operator for FP32/16, S32/16/8, U32/16/8 data types</li>
<li>Various fixes to enable FP16 kernels in armv8a multi_isa builds.</li>
<li>Updated logic in the OpenMP scheduler to exclude LITTLE cores.</li>
</ul>
<p>v24.04 Public major release</p><ul>
<li>Add Bfloat16 data type support for <a class="el" href="classarm__compute_1_1_n_e_mat_mul.xhtml">NEMatMul</a>.</li>
<li>Add support for SoftMax in SME2 for FP32, FP16, QASYMM8 and QASYMM8_SIGNED.</li>
<li>Add support for in place accumulation to CPU GEMM kernels.</li>
<li>Add low-precision Int8 * Int8 -&gt; FP32 CPU GEMM which dequantizes after multiplication</li>
<li>Add is_dynamic flag to <a class="el" href="classarm__compute_1_1_quantization_info.xhtml" title="Quantization information.">QuantizationInfo</a> to signal to operators that it may change after configuration</li>
<li>Performance optimizations:<ul>
<li>Optimize start-up time of <a class="el" href="classarm__compute_1_1_n_e_convolution_layer.xhtml">NEConvolutionLayer</a> for some input configurations where GeMM is selected as the convolution algorithm</li>
<li>Optimize <a class="el" href="classarm__compute_1_1_n_e_convolution_layer.xhtml">NEConvolutionLayer</a> for input tensor size &gt; 1e7 bytes and weight tensor height &gt; 7</li>
<li>Optimize <a class="el" href="namespacearm__compute.xhtml#a4df2143ca0a3bdbbbc54b440a52541cd">NESoftmaxLayer</a> for axis != 0 by natively supporting higher axes up to axis 3.</li>
</ul>
</li>
</ul>
<p>v24.02.1 Public patch release</p><ul>
<li>Fix performance regression in fixed-format kernels</li>
<li>Fix compile and runtime errors in arm_compute_validation for Windows on Arm(WoA)</li>
</ul>
<p>v24.02 Public major release</p><ul>
<li>Replace template writer with compute kernel writer in dynamic fusion.</li>
<li>Performance optimizations:<ul>
<li>Parallelize <a class="el" href="classarm__compute_1_1_n_e_depthwise_convolution_layer.xhtml">NEDepthwiseConvolutionLayer</a> over batches if there is only 1 row</li>
</ul>
</li>
</ul>
<p>v24.01 Public major release</p><ul>
<li>Remove the legacy 'libarm_compute_core' library. This library is an artifact of Compute Library's legacy library architecture and no longer serves any purpose. You should link only to the main <code>libarm_compute</code> library for core functionality.</li>
<li>Expand GPUTarget list with Mali™ G720 and G620.</li>
<li>Optimize CPU activation functions using LUT-based implementation:<ul>
<li>Sigmoid function for FP16.</li>
</ul>
</li>
<li>New features<ul>
<li>Add support for FP16 in all multi_isa builds.</li>
</ul>
</li>
<li>Performance optimizations:<ul>
<li>Optimize <a class="el" href="namespacearm__compute.xhtml#a4df2143ca0a3bdbbbc54b440a52541cd">NESoftmaxLayer</a></li>
<li>Optimize <a class="el" href="classarm__compute_1_1_n_e_depth_to_space_layer.xhtml">NEDepthToSpaceLayer</a>.</li>
</ul>
</li>
</ul>
<p>v23.11 Public major release</p><ul>
<li>New features<ul>
<li>Add support for input data type U64/S64 in <a class="el" href="classarm__compute_1_1_c_l_cast.xhtml" title="Basic function to run opencl::kernels::ClCastKernel.">CLCast</a> and <a class="el" href="classarm__compute_1_1_n_e_cast.xhtml" title="Basic function to run cpu::kernels::CpuCastKernel.">NECast</a>.</li>
<li>Add support for output data type S64 in <a class="el" href="classarm__compute_1_1_n_e_arg_min_max_layer.xhtml" title="Function to calculate the index of the minimum or maximum values in a tensor based on an axis.">NEArgMinMaxLayer</a> and <a class="el" href="classarm__compute_1_1_c_l_arg_min_max_layer.xhtml" title="Function to calculate the index of the minimum or maximum values in a tensor based on an axis.">CLArgMinMaxLayer</a></li>
<li>Port the following kernels in the experimental Dynamic Fusion interface to use the new Compute <a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> Writer interface:<ul>
<li><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_resize.xhtml">experimental::dynamic_fusion::GpuCkwResize</a></li>
<li><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_pool2d.xhtml">experimental::dynamic_fusion::GpuCkwPool2d</a></li>
<li><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_depthwise_conv2d.xhtml">experimental::dynamic_fusion::GpuCkwDepthwiseConv2d</a></li>
<li><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_mat_mul.xhtml">experimental::dynamic_fusion::GpuCkwMatMul</a></li>
</ul>
</li>
<li>Add support for OpenCL™ comand buffer with mutable dispatch extension.</li>
<li>Add support for Arm® Cortex®-A520 and Arm® Cortex®-R82.</li>
<li>Add support for negative axis values and inverted axis values in <a class="el" href="classarm__compute_1_1_n_e_reverse.xhtml">arm_compute::NEReverse</a> and <a class="el" href="classarm__compute_1_1_c_l_reverse.xhtml">arm_compute::CLReverse</a>.</li>
<li>Add new OpenCL™ kernels:<ul>
<li><a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_mat_mul_lowp_native_m_m_u_l_kernel.xhtml">opencl::kernels::ClMatMulLowpNativeMMULKernel</a> support for QASYMM8 and QASYMM8_SIGNED, with batch support</li>
</ul>
</li>
</ul>
</li>
<li>Performance optimizations:<ul>
<li>Optimize <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_reshape.xhtml">cpu::CpuReshape</a></li>
<li>Optimize <a class="el" href="classarm__compute_1_1opencl_1_1_cl_transpose.xhtml">opencl::ClTranspose</a></li>
<li>Optimize <a class="el" href="classarm__compute_1_1_n_e_stack_layer.xhtml">NEStackLayer</a></li>
<li>Optimize <a class="el" href="classarm__compute_1_1_c_l_reduction_operation.xhtml">CLReductionOperation</a>.</li>
<li>Optimize <a class="el" href="namespacearm__compute.xhtml#a30ce3b40394b4f2d1e4cc31db7183425">CLSoftmaxLayer</a>.</li>
<li>Optimize start-up time of <a class="el" href="classarm__compute_1_1_n_e_convolution_layer.xhtml">NEConvolutionLayer</a> for some input configurations where GeMM is selected as the convolution algorithm</li>
<li>Reduce CPU Overhead by optimal flushing of CL kernels.</li>
</ul>
</li>
<li>Deprecate support for Bfloat16 in <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_cast.xhtml">cpu::CpuCast</a>.</li>
<li>Support for U32 axis in <a class="el" href="classarm__compute_1_1_n_e_reverse.xhtml">arm_compute::NEReverse</a> and <a class="el" href="classarm__compute_1_1_c_l_reverse.xhtml">arm_compute::CLReverse</a> will be deprecated in 24.02.</li>
<li>Remove legacy PostOps interface. PostOps was the experimental interface for kernel fusion and is replaced by the new Dynamic Fusion interface.</li>
<li>Update OpenCL™ API headers to v2023.04.17</li>
</ul>
<p>v23.08 Public major release</p><ul>
<li>Deprecate the legacy 'libarm_compute_core' library. This library is an artifact of Compute Library's legacy library architecture and no longer serves any purpose. Users must no longer link their applications to this library and instead link only to the main <code>libarm_compute</code> library for core functionality.</li>
<li>New features<ul>
<li>Rewrite <a class="el" href="classarm__compute_1_1_c_l_arg_min_max_layer.xhtml" title="Function to calculate the index of the minimum or maximum values in a tensor based on an axis.">CLArgMinMaxLayer</a> for axis 0 and enable S64 output.</li>
<li>Add multi-sketch support for dynamic fusion.</li>
<li>Break up <a class="el" href="arm__compute_2core_2_types_8h.xhtml">arm_compute/core/Types.h</a> and utils/Utils.h a bit to reduce unused code in each inclusion of these headers.</li>
<li>Add Fused Activation to <a class="el" href="classarm__compute_1_1_c_l_mat_mul.xhtml" title="Basic function to execute MatMul (Matrix Multiplication) on OpenCL.">CLMatMul</a>.</li>
<li>Implement FP32/FP16 <a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_mat_mul_native_m_m_u_l_kernel.xhtml">opencl::kernels::ClMatMulNativeMMULKernel</a> using the MMUL extension.</li>
<li>Use MatMul in fully connected layer with dynamic weights when supported.</li>
<li>Optimize CPU depthwise convolution with channel multiplier.</li>
<li>Add support in CpuCastKernel for conversion of S64/U64 to F32.</li>
<li>Add new OpenCL™ kernels:<ul>
<li><a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_mat_mul_native_m_m_u_l_kernel.xhtml">opencl::kernels::ClMatMulNativeMMULKernel</a> support for FP32 and FP16, with batch support</li>
</ul>
</li>
<li>Enable transposed convolution with non-square kernels on CPU and GPU.</li>
<li>Add support for input data type U64/S64 in <a class="el" href="classarm__compute_1_1_c_l_cast.xhtml" title="Basic function to run opencl::kernels::ClCastKernel.">CLCast</a>.</li>
<li>Add new Compute <a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> Writer (CKW) subproject that offers a C++ interface to generate tile-based OpenCL code in just-in-time fashion.</li>
<li>Port the following kernels in the experimental Dynamic Fusion interface to use the new Compute <a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> Writer interface with support for FP16/FP32 only:<ul>
<li><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_activation.xhtml">experimental::dynamic_fusion::GpuCkwActivation</a></li>
<li><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_cast.xhtml">experimental::dynamic_fusion::GpuCkwCast</a></li>
<li><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_direct_conv2d.xhtml">experimental::dynamic_fusion::GpuCkwDirectConv2d</a></li>
<li><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_elementwise_binary.xhtml">experimental::dynamic_fusion::GpuCkwElementwiseBinary</a></li>
<li><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_store.xhtml">experimental::dynamic_fusion::GpuCkwStore</a></li>
</ul>
</li>
</ul>
</li>
<li>Various optimizations and bug fixes.</li>
</ul>
<p>v23.05.1 Public patch release</p><ul>
<li>Enable CMake and Bazel option to build multi_isa without FP16 support.</li>
<li>Fix compilation error in NEReorderLayer (aarch64 only).</li>
<li>Disable invalid (false-negative) validation test with CPU scale layer on FP16.</li>
<li>Various bug fixes</li>
</ul>
<p>v23.05 Public major release</p><ul>
<li>New features:<ul>
<li>Add new Arm® Neon™ kernels / functions:<ul>
<li><a class="el" href="classarm__compute_1_1_n_e_mat_mul.xhtml">NEMatMul</a> for QASYMM8, QASYMM8_SIGNED, FP32 and FP16, with batch support.</li>
<li>NEReorderLayer (aarch64 only)</li>
</ul>
</li>
<li>Add new OpenCL™ kernels / functions:<ul>
<li><a class="el" href="classarm__compute_1_1_c_l_mat_mul.xhtml">CLMatMul</a> support for QASYMM8, QASYMM8_SIGNED, FP32 and FP16, with batch support.</li>
</ul>
</li>
<li>Add support for the multiple dimensions in the indices parameter for both the Arm® Neon™ and OpenCL™ implementations of the Gather Layer.</li>
<li>Add support for dynamic weights in <a class="el" href="classarm__compute_1_1_c_l_fully_connected_layer.xhtml">CLFullyConnectedLayer</a> and <a class="el" href="classarm__compute_1_1_n_e_fully_connected_layer.xhtml">NEFullyConnectedLayer</a> for all data types.</li>
<li>Add support for cropping in the Arm® Neon™ and OpenCL™: implementations of the BatchToSpace Layer for all data types.</li>
<li>Add support for quantized data types for the ElementwiseUnary Operators for Arm® Neon™.</li>
<li>Implement RSQRT for quantized data types on OpenCL™.</li>
<li>Add FP16 depthwise convolution kernels for SME2.</li>
</ul>
</li>
<li>Performance optimizations:<ul>
<li>Improve <a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml" title="Basic implementation of the OpenCL tuner interface.">CLTuner</a> exhaustive mode tuning time.</li>
</ul>
</li>
<li>Deprecate dynamic block shape in <a class="el" href="classarm__compute_1_1_n_e_batch_to_space_layer.xhtml">NEBatchToSpaceLayer</a> and <a class="el" href="classarm__compute_1_1_c_l_batch_to_space_layer.xhtml">CLBatchToSpaceLayer</a>.</li>
<li>Various optimizations and bug fixes.</li>
</ul>
<p>v23.02.1 Public patch release</p><ul>
<li>Allow mismatching data layouts between the source tensor and weights for <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_gemm_direct_conv2d.xhtml">CpuGemmDirectConv2d </a> with fixed format kernels.</li>
<li>Fixes for experimental CPU only Bazel and CMake builds.</li>
</ul>
<p>v23.02 Public major release</p><ul>
<li>New features:<ul>
<li>Rework the experimental dynamic fusion interface by identifying auxiliary and intermediate tensors, and specifying an explicit output operator.</li>
<li>Add the following operators to the experimental dynamic fusion API:<ul>
<li>GpuAdd, GpuCast, GpuClamp, GpuDepthwiseConv2d, GpuMul, GpuOutput, GpuPool2d, GpuReshape, GpuResize, GpuSoftmax, GpuSub.</li>
</ul>
</li>
<li>Add SME/SME2 kernels for GeMM, Winograd convolution, Depthwise convolution and Pooling.</li>
<li>Add new CPU operator AddMulAdd for float and quantized types.</li>
<li>Add new flag <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a10cbe200430f678e586ab37988fa6a54">ITensorInfo::lock_paddings()</a> to tensors to prevent extending tensor paddings.</li>
<li>Add experimental support for CPU only Bazel and CMake builds.</li>
</ul>
</li>
<li>Performance optimizations:<ul>
<li>Optimize CPU base-e exponential functions for FP32.</li>
<li>Optimize CPU StridedSlice by copying first dimension elements in bulk where possible.</li>
<li>Optimize CPU quantized Subtraction by reusing the quantized Addition kernel.</li>
<li>Optimize CPU ReduceMean by removing quantization steps and performing the operation in integer domain.</li>
<li>Optimize GPU Scale and Dynamic Fusion GpuResize by removing quantization steps and performing the operation in integer domain.</li>
<li>Update the heuristic for CLDepthwiseConvolutionNative kernel.</li>
<li>Add new optimized OpenCL kernel to compute indirect convolution:<ul>
<li><a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_indirect_conv2d_kernel.xhtml">ClIndirectConv2dKernel </a></li>
</ul>
</li>
<li>Add new optimized OpenCL kernel to compute transposed convolution:<ul>
<li><a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_transposed_convolution_kernel.xhtml">ClTransposedConvolutionKernel </a></li>
</ul>
</li>
</ul>
</li>
<li>Update recommended/minimum NDK version to r20b.</li>
<li>Various optimizations and bug fixes.</li>
</ul>
<p>v22.11 Public major release</p><ul>
<li>New features:<ul>
<li>Add new experimental dynamic fusion API.</li>
<li>Add CPU batch matrix multiplication with adj_x = false and adj_y = false for FP32.</li>
<li>Add CPU MeanStdDevNorm for QASYMM8.</li>
<li>Add CPU and GPU GELU activation function for FP32 and FP16.</li>
<li>Add CPU swish activation function for FP32 and FP16.</li>
</ul>
</li>
<li>Performance optimizations:<ul>
<li>Optimize CPU bilinear scale for FP32, FP16, QASYMM8, QASYMM8_SIGNED, U8 and S8.</li>
<li>Optimize CPU activation functions using LUT-based implementation:<ul>
<li>Sigmoid function for QASYMM8 and QASYMM8_SIGNED.</li>
<li>Hard swish function for QASYMM8_SIGNED.</li>
</ul>
</li>
<li>Optimize CPU addition for QASYMM8 and QASYMM8_SIGNED using fixed-point arithmetic.</li>
<li>Optimize CPU multiplication, subtraction and activation layers by considering tensors as 1D.</li>
<li>Optimize GPU depthwise convolution kernel and heuristic.</li>
<li>Optimize GPU Conv2d heuristic.</li>
<li>Optimize CPU MeanStdDevNorm for FP16.</li>
<li>Optimize CPU tanh activation function for FP16 using rational approximation.</li>
</ul>
</li>
<li>Improve GPU GeMMLowp start-up time.</li>
<li>Various optimizations and bug fixes.</li>
</ul>
<p>v22.08 Public major release</p><ul>
<li>Various bug fixes.</li>
<li>Disable unsafe FP optimizations causing accuracy issues in:<ul>
<li><a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_direct_conv2d_kernel.xhtml">ClDirectConv2dKernel </a></li>
<li><a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_direct_conv2d_kernel.xhtml">ClDirectConv3dKernel </a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_depthwise_convolution_layer_native_kernel.xhtml">CLDepthwiseConvolutionLayerNativeKernel</a></li>
</ul>
</li>
<li>Add Dynamic Fusion of Elementwise Operators: Div, Floor, Add.</li>
<li>Optimize the gemm_reshaped_rhs_nly_nt OpenCL kernel using the arm_matrix_multiply extension available for Arm® Mali™-G715 and Arm® Mali™-G615.</li>
<li>Add support for the arm_matrix_multiply extension in the gemmlowp_mm_reshaped_only_rhs_t OpenCL kernel.</li>
<li>Expand GPUTarget list with missing Mali™ GPUs product names: G57, G68, G78AE, G610, G510, G310.</li>
<li>Extend the direct convolution 2d interface to configure the block size.</li>
<li>Update ClConv2D heuristic to use direct convolution.</li>
<li>Use official Khronos® OpenCL extensions:<ul>
<li>Add cl_khr_integer_dot_product extension support.</li>
<li>Add support of OpenCL 3.0 non-uniform workgroup.</li>
</ul>
</li>
<li>Cpu performance optimizations:<ul>
<li>Add LUT-based implementation of Hard Swish and Leaky ReLU activation function for aarch64 build.</li>
<li>Optimize Add layer by considering the input tensors as 1D array.</li>
</ul>
</li>
<li>Add fixed-format BF16, FP16 and FP32 Neon™ GEMM kernels to support variable weights.</li>
<li>Add new winograd convolution kernels implementation and update the ACL <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d.xhtml">CpuWinogradConv2d</a> operator.</li>
<li>Add experimental support for native builds for Windows® on Arm™.</li>
<li>Build flag interpretation change: arch=armv8.6-a now translates to -march=armv8.6-a CXX flag instead of march=armv8.2-a + explicit selection of feature extensions.</li>
<li>Build flag change: toolchain_prefix, compiler_prefix:<ul>
<li>Use empty string "" to suppress any prefixes.</li>
<li>Use "auto" to use default (auto) prefixes chosen by the build script. This is the default behavior when unspecified.</li>
<li>Any other string will be used as custom prefixes to the compiler and the rest of toolchain tools.</li>
<li>The default behaviour when prefix is unspecified does not change, but its signifier has been changed from empty string "" to "auto".</li>
</ul>
</li>
<li>armv7a with Android build will no longer be tested or maintained.</li>
</ul>
<p>v22.05 Public major release</p><ul>
<li>Various bug fixes.</li>
<li>Various optimizations.</li>
<li>Add support for NDK r23b.</li>
<li>Inclusive language adjustment. Please refer to <a class="el" href="contribution_guidelines.xhtml#S5_0_inc_lang">Inclusive language guideline</a> for details.</li>
<li>New Arm® Neon™ kernels / functions :<ul>
<li><a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_pool3d_kernel.xhtml">ClPool3dKernel </a></li>
</ul>
</li>
<li>New OpenCL kernels / functions :<ul>
<li><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_pool3d_kernel.xhtml">CpuPool3dKernel </a></li>
</ul>
</li>
<li>Improve the start-up times for the following OpenCL kernels:<ul>
<li><a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_winograd_input_transform_kernel.xhtml">ClWinogradInputTransformKernel </a></li>
<li><a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_winograd_output_transform_kernel.xhtml">ClWinogradOutputTransformKernel </a></li>
<li><a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_winograd_filter_transform_kernel.xhtml">ClWinogradFilterTransformKernel </a></li>
<li><a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_height_concatenate_kernel.xhtml">ClHeightConcatenateKernel </a></li>
</ul>
</li>
<li>Decouple the implementation of the following Cpu kernels into various data types (fp32, fp16, int):<ul>
<li><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_direct_conv2d_kernel.xhtml">CpuDirectConv2dKernel </a></li>
<li><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_depthwise_conv2d_native_kernel.xhtml">CpuDepthwiseConv2dNativeKernel </a></li>
<li><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_matrix_addition_kernel.xhtml">CpuGemmMatrixAdditionKernel </a></li>
<li><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_matrix_multiply_kernel.xhtml">CpuGemmMatrixMultiplyKernel </a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_fuse_batch_normalization_kernel.xhtml">NEFuseBatchNormalizationKernel</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_l2_normalize_layer_kernel.xhtml">NEL2NormalizeLayerKernel</a></li>
</ul>
</li>
</ul>
<p>v22.02 Public major release</p><ul>
<li>Various bug fixes.</li>
<li>Various optimizations.</li>
<li>Update A510 <a class="el" href="namespacearm__gemm.xhtml">arm_gemm</a> cpu Kernels.</li>
<li>Inclusive language adjustment. Please refer to <a class="el" href="contribution_guidelines.xhtml#S5_0_inc_lang">Inclusive language guideline</a> for details.</li>
<li>Improve the start-up time for the following OpenCL kernels:<ul>
<li><a class="el" href="classarm__compute_1_1_c_l_scale.xhtml">CLScale</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml">CLGEMM</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_depthwise_convolution_layer.xhtml">CLDepthwiseConvolutionLayer</a></li>
<li><a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_im2_col_kernel.xhtml">ClIm2ColKernel </a></li>
<li><a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_direct_conv2d_kernel.xhtml">ClDirectConv2dKernel </a></li>
</ul>
</li>
<li>Remove functions:<ul>
<li>CLRemap</li>
<li>NERemap</li>
</ul>
</li>
<li>Remove padding from OpenCL kernels:<ul>
<li><a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_direct_conv2d_kernel.xhtml">ClDirectConv2dKernel </a></li>
</ul>
</li>
<li>Remove padding from Cpu kernels:<ul>
<li><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_direct_conv2d_kernel.xhtml">CpuDirectConv2dKernel </a></li>
</ul>
</li>
<li>Decouple the implementation of the following Cpu kernels into various data types (fp32, fp16, int):<ul>
<li><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_activation_kernel.xhtml">CpuActivationKernel </a></li>
<li><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_add_kernel.xhtml">CpuAddKernel </a></li>
<li><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_elementwise_kernel.xhtml">CpuElementwiseKernel </a></li>
<li><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_softmax_generic.xhtml">CpuSoftmaxKernel </a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_bounding_box_transform_kernel.xhtml">NEBoundingBoxTransformKernel</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_crop_kernel.xhtml">NECropKernel</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_compute_all_anchors_kernel.xhtml">NEComputeAllAnchorsKernel</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_instance_normalization_layer_kernel.xhtml">NEInstanceNormalizationLayerKernel</a></li>
<li>NEMaxUnpoolingLayerKernel</li>
<li><a class="el" href="classarm__compute_1_1_n_e_mean_std_dev_normalization_kernel.xhtml">NEMeanStdDevNormalizationKernel</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_range_kernel.xhtml">NERangeKernel</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_r_o_i_align_layer_kernel.xhtml">NEROIAlignLayerKernel</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_select_kernel.xhtml">NESelectKernel</a></li>
</ul>
</li>
</ul>
<p>v21.11 Public major release</p><ul>
<li>Various bug fixes.</li>
<li>Various optimizations:<ul>
<li>Improve performance of bilinear and nearest neighbor Scale on both CPU and GPU for FP32, FP16, Int8, Uint8 data types</li>
<li>Improve performance of Softmax on GPU for Uint8/Int8</li>
</ul>
</li>
<li>New OpenCL kernels / functions:<ul>
<li><a class="el" href="classarm__compute_1_1_c_l_conv3_d.xhtml">CLConv3D</a></li>
</ul>
</li>
<li>New Arm® Neon™ kernels / functions:<ul>
<li><a class="el" href="classarm__compute_1_1_n_e_conv3_d.xhtml">NEConv3D</a></li>
</ul>
</li>
<li>Support configurable build by a selected subset of operator list</li>
<li>Support MobileBert on Neon™ backend</li>
<li>Improve operator/function logging</li>
<li>Remove padding from OpenCL kernels:<ul>
<li>ClPool2dKernel</li>
<li>ClScaleKernel</li>
<li>ClGemmMatrixMultiplyReshapedKernel</li>
</ul>
</li>
<li>Remove padding from Cpu kernels:<ul>
<li>CpuPool2dKernel</li>
</ul>
</li>
<li>Remove Y padding from OpenCL kernels:<ul>
<li>ClGemmMatrixMultiplyKernel</li>
<li>ClGemmReshapedRHSMatrixKernel</li>
</ul>
</li>
<li>Remove legacy GeMM kernels in gemm_v1.cl</li>
</ul>
<p>v21.08 Public major release</p><ul>
<li>Various bug fixes.</li>
<li>Various optimizations:<ul>
<li>Improve LWS (Local-Workgroup-Size) heuristic in OpenCL for GeMM, Direct Convolution and Winograd Transformations when OpenCL tuner is not used</li>
<li>Improve QASYMM8/QSYMM8 performance on OpenCL for various Arm® Mali™ GPU architectures</li>
<li>Add dynamic weights support in Fully connected layer (CPU/GPU)</li>
<li>Various performance optimizations for floating-point data types (CPU/GPU)</li>
</ul>
</li>
<li>Add a reduced core library build arm_compute_core_v2</li>
<li>Expose Operator API</li>
<li>Support fat binary build for arm8.2-a via fat_binary build flag</li>
<li>Add CPU discovery capabilities</li>
<li>Add data type f16 support for:<ul>
<li>CLRemapKernel</li>
</ul>
</li>
<li>Port the following functions to stateless API:<ul>
<li><a class="el" href="classarm__compute_1_1_c_l_convolution_layer.xhtml">CLConvolutionLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_flatten_layer.xhtml">CLFlattenLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_fully_connected_layer.xhtml">CLFullyConnectedLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml">CLGEMM</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_convolution_layer.xhtml">CLGEMMConvolutionLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_multiply_core.xhtml">CLGEMMLowpMatrixMultiplyCore</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_winograd_convolution_layer.xhtml">CLWinogradConvolutionLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_convolution_layer.xhtml">NEConvolutionLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_flatten_layer.xhtml">NEFlattenLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_fully_connected_layer.xhtml">NEFullyConnectedLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_g_e_m_m.xhtml">NEGEMM</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_conv2d.xhtml">NEGEMMConv2d</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_convolution_layer.xhtml">NEGEMMConvolutionLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_lowp_matrix_multiply_core.xhtml">NEGEMMLowpMatrixMultiplyCore</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_winograd_convolution_layer.xhtml">NEWinogradConvolutionLayer</a></li>
</ul>
</li>
<li>Remove the following functions:<ul>
<li>CLWinogradInputTransform</li>
</ul>
</li>
<li>Remove CLCoreRuntimeContext</li>
<li>Remove ICPPSimpleKernel</li>
<li>Rename file <a class="el" href="_c_l_elementwise_unary_layer_8h.xhtml">arm_compute/runtime/CL/functions/CLElementWiseUnaryLayer.h</a> to <a class="el" href="_c_l_elementwise_unary_layer_8h.xhtml">arm_compute/runtime/CL/functions/CLElementwiseUnaryLayer.h</a></li>
</ul>
<p>v21.05 Public major release</p><ul>
<li>Various bug fixes.</li>
<li>Various optimisations.</li>
<li>Various documentation updates:<ul>
<li>Add supported operators and corresponding Android NNAPI operators.</li>
<li>Documentation reorg into user guide and contributor guide.</li>
</ul>
</li>
<li>Add support for a global allocator for OpenCL tensors</li>
<li>Add experimental support for <a href="https://github.com/kpet/clvk">CLVK</a>.</li>
<li>Add data type S32 support for:<ul>
<li><a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_arithmetic_kernel.xhtml">opencl::kernels::ClArithmeticKernel</a></li>
</ul>
</li>
<li>Add data type QASYMM8 support for:<ul>
<li><a class="el" href="classarm__compute_1_1_c_l_r_o_i_pooling_layer.xhtml">CLROIPoolingLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_r_o_i_pooling_layer_kernel.xhtml">CLROIPoolingLayerKernel</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_r_o_i_pooling_layer.xhtml">NEROIPoolingLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_r_o_i_pooling_layer_kernel.xhtml">NEROIPoolingLayerKernel</a></li>
</ul>
</li>
<li>Add per-channel quantization support for:<ul>
<li><a class="el" href="classarm__compute_1_1_c_l_deconvolution_layer.xhtml">CLDeconvolutionLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_direct_deconvolution_layer.xhtml">CLDirectDeconvolutionLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_convolution_layer.xhtml">NEConvolutionLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_deconvolution_layer.xhtml">NEDeconvolutionLayer</a></li>
</ul>
</li>
<li>Remove padding from OpenCL kernels:<ul>
<li><a class="el" href="classarm__compute_1_1_c_l_l2_normalize_layer_kernel.xhtml">CLL2NormalizeLayerKernel</a></li>
<li>CLDepthwiseConvolutionLayer3x3NHWCKernel</li>
<li><a class="el" href="classarm__compute_1_1_c_l_normalization_layer_kernel.xhtml">CLNormalizationLayerKernel</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_normalize_planar_y_u_v_layer_kernel.xhtml">CLNormalizePlanarYUVLayerKernel</a></li>
<li><a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_mul_kernel.xhtml">opencl::kernels::ClMulKernel</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_reduction_operation_kernel.xhtml">CLReductionOperationKernel</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_r_o_i_pooling_layer_kernel.xhtml">CLROIPoolingLayerKernel</a></li>
</ul>
</li>
<li>Remove computer vision support from Arm® Neon™ backend</li>
<li>Remove the following functions:<ul>
<li>NEAbsoluteDifference</li>
<li>NEAccumulate</li>
<li>NEBox3x3</li>
<li>NECannyEdge</li>
<li>NEChannelCombine</li>
<li>NEChannelExtract</li>
<li>NEColorConvert</li>
<li>NEConvolution</li>
<li>NEDerivative</li>
<li>NEDilate</li>
<li>NEEqualizeHistogram</li>
<li>NEErode</li>
<li>NEFastCorners</li>
<li>NEGaussian3x3</li>
<li>NEGaussian5x5</li>
<li>NEGaussianPyramid</li>
<li>NEHOGDescriptor</li>
<li>NEHOGDetector</li>
<li>NEHOGGradient</li>
<li>NEHOGMultiDetection</li>
<li>NEHarrisCorners</li>
<li>NEHistogram</li>
<li>NEIntegralImage</li>
<li>NELaplacianPyramid</li>
<li>NELaplacianReconstruct</li>
<li>NEMagnitude</li>
<li>NEMeanStdDev</li>
<li>NEMedian3x3</li>
<li>NEMinMaxLocation</li>
<li>NENonLinearFilter</li>
<li>NEOpticalFlow</li>
<li>NEPhase</li>
<li>NEScharr3x3</li>
<li>NESobel3x3</li>
<li>NESobel5x5</li>
<li>NESobel7x7</li>
<li>NETableLookup</li>
<li>NEThreshold</li>
<li>NEWarpAffine</li>
<li>NEWarpPerspectiveKernel</li>
</ul>
</li>
<li>Remove all GLES kernels / functions / tests / examples</li>
<li>Remove computer vision support from CL backend</li>
<li>Remove the following functions:<ul>
<li>CLAbsoluteDifference</li>
<li>CLAccumulate</li>
<li>CLBox3x3</li>
<li>CLCannyEdge</li>
<li>CLChannelCombine</li>
<li>CLChannelExtract</li>
<li>CLColorConvert</li>
<li>CLConvolution</li>
<li>CLDerivative</li>
<li>CLDilate</li>
<li>CLEqualizeHistogram</li>
<li>CLErode</li>
<li>CLFastCorners</li>
<li>CLGaussian3x3</li>
<li>CLGaussian5x5</li>
<li>CLGaussianPyramid</li>
<li>CLHOGDescriptor</li>
<li>CLHOGDetector</li>
<li>CLHOGGradient</li>
<li>CLHOGMultiDetection</li>
<li>CLHarrisCorners</li>
<li>CLHistogram</li>
<li>CLIntegralImage</li>
<li>CLLaplacianPyramid</li>
<li>CLLaplacianReconstruct</li>
<li>CLMagnitude</li>
<li>CLMeanStdDev</li>
<li>CLMedian3x3</li>
<li>CLMinMaxLocation</li>
<li>CLNonLinearFilter</li>
<li>CLOpticalFlow</li>
<li>CLPhase</li>
<li>CLScharr3x3</li>
<li>CLSobel3x3</li>
<li>CLSobel5x5</li>
<li>CLSobel7x7</li>
<li>CLTableLookup</li>
<li>CLThreshold</li>
<li>CLWarpAffine</li>
<li>CLWarpPerspective</li>
</ul>
</li>
</ul>
<p>v21.02 Public major release</p><ul>
<li>Various bug fixes.</li>
<li>Various optimisations.</li>
<li>Upgrade C++ standard to C++14</li>
<li>Add macOS support</li>
<li>Add Armv8-R AArch64 architecture support</li>
<li>Add SVE/SVE2 support for:<ul>
<li>NEScaleKernel</li>
<li><a class="el" href="classarm__compute_1_1_n_e_activation_layer.xhtml">NEActivationLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_arithmetic_addition.xhtml">NEArithmeticAddition</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_batch_normalization_layer_kernel.xhtml">NEBatchNormalizationLayerKernel</a></li>
<li>cpu::kernels::CpuLogits1DSoftmaxKernel</li>
<li>cpu::kernels::CpuLogits1DMaxKernel</li>
<li><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_elementwise_unary_kernel.xhtml">cpu::kernels::CpuElementwiseUnaryKernel</a></li>
</ul>
</li>
<li>Remove padding from OpenCL kernels:<ul>
<li>CLDirectConvolutionLayerKernel</li>
<li><a class="el" href="classarm__compute_1_1_c_l_arg_min_max_layer_kernel.xhtml">CLArgMinMaxLayerKernel</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_pad_layer_kernel.xhtml">CLPadLayerKernel</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_r_o_i_align_layer_kernel.xhtml">CLROIAlignLayerKernel</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_range_kernel.xhtml">CLRangeKernel</a></li>
<li>CLScaleKernel</li>
<li><a class="el" href="classarm__compute_1_1_c_l_select_kernel.xhtml">CLSelectKernel</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_bitwise_kernel.xhtml">CLBitwiseKernel</a></li>
<li><a class="el" href="classarm__compute_1_1opencl_1_1kernels_1_1_cl_floor_kernel.xhtml">opencl::kernels::ClFloorKernel</a></li>
<li>CLTransposeKernel</li>
</ul>
</li>
<li>Deprecate functions in <a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml" title="Basic implementation of the OpenCL tuner interface.">CLTuner</a>:<ul>
<li>add_lws_to_table</li>
<li>import_lws_table</li>
<li>lws_table</li>
</ul>
</li>
<li>Remove functions:<ul>
<li>NELocallyConnectedLayer / CLLocallyConnectedLayer</li>
<li>NEIm2Col</li>
<li>NECol2Im</li>
<li>NEGEMMInterleave4x4</li>
<li>NEGEMMTranspose1xW</li>
<li>NEComputeAllAnchors / CLComputeAllAnchors</li>
<li>NEGEMMAssemblyDispatch</li>
<li>NEUpsampleLayer / CLUpsampleLayer</li>
</ul>
</li>
<li>Remove kernels:<ul>
<li>NEGEMMMatrixVectorMultiplyKernel</li>
<li>NELocallyConnectedMatrixMultiplyKernel / CLLocallyConnectedMatrixMultiplyKernel</li>
<li>NEUpsampleLayerKernel / CLUpsampleLayerKernel</li>
</ul>
</li>
<li>Extend OpenCL tuner with workgroup batch size support<ul>
<li>Experimental extension for the OpenCL tuner to tune the batches of work groups distribute to compute units</li>
</ul>
</li>
<li>Add functionality to load the OpenCL GEMM heuristics at runtime<ul>
<li>The GEMM heuristic file (MLGO) can be used to update the default GEMM heuristics available for OpenCL</li>
</ul>
</li>
<li>Note: there might be performance regressions against v20.08 in Inception v3 using int8 data types on Arm Mali-G77 GPUs. Currently under investigation</li>
<li>Note: data-type decoupling is in progress and experimental. Warning of unused symbols might be raised</li>
</ul>
<p>v20.11 Public major release</p><ul>
<li>Various bug fixes.</li>
<li>Various optimisations.</li>
<li>Performance regressions can be noted when executing Depthwise Convolution on Arm® Neon™ with a depth multiplier &gt; 1 for quantized data type. This is planned to be resolved in 21.02 release.</li>
<li>Added new data type QASYMM8_SIGNED support for <a class="el" href="classarm__compute_1_1_n_e_r_o_i_align_layer.xhtml">NEROIAlignLayer</a>.</li>
<li>Added new data type S32 support for:<ul>
<li><a class="el" href="classarm__compute_1_1_n_e_arithmetic_subtraction.xhtml" title="Basic function to run cpu::kernels::CpuSubKernel.">NEArithmeticSubtraction</a></li>
<li>NEArithmeticSubtractionKernel</li>
<li><a class="el" href="classarm__compute_1_1_n_e_pixel_wise_multiplication.xhtml">NEPixelWiseMultiplication</a></li>
<li>NEPixelWiseMultiplicationKernel</li>
<li><a class="el" href="classarm__compute_1_1_n_e_elementwise_division.xhtml" title="Basic function to run cpu::kernels::CpuArithmeticKernel for division.">NEElementwiseDivision</a></li>
<li>NEDivisionOperationKernel</li>
</ul>
</li>
<li>Interface change<ul>
<li>Properly support softmax axis to have the same meaning as other major frameworks. That is, axis now defines the dimension on which Softmax/Logsoftmax is performed. E.g. for input of shape 4x5x6 and axis=1, softmax will be applied to 4x6=24 vectors of size 5. The supported value range of axis is [-rank, rank). This change applies to the following functions:<ul>
<li><a class="el" href="namespacearm__compute.xhtml#a4df2143ca0a3bdbbbc54b440a52541cd">NESoftmaxLayer</a></li>
<li><a class="el" href="namespacearm__compute.xhtml#a4478c830368ed024dc47a2bf48978616">NELogSoftmaxLayer</a></li>
<li><a class="el" href="namespacearm__compute.xhtml#a30ce3b40394b4f2d1e4cc31db7183425">CLSoftmaxLayer</a></li>
<li><a class="el" href="namespacearm__compute.xhtml#aa02883dd85b75a6eb0d4878f266908dd">CLLogSoftmaxLayer</a></li>
<li>GCSoftmaxLayer</li>
</ul>
</li>
</ul>
</li>
<li>New OpenCL kernels / functions:<ul>
<li>CLGEMMLowpQuantizeDownInt32ScaleByFixedPointKernel</li>
<li><a class="el" href="classarm__compute_1_1_c_l_logical_not.xhtml">CLLogicalNot</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_logical_and.xhtml">CLLogicalAnd</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_logical_or.xhtml">CLLogicalOr</a></li>
</ul>
</li>
<li>New Arm® Neon™ kernels / functions:<ul>
<li><a class="el" href="classarm__compute_1_1_n_e_logical_not.xhtml">NELogicalNot</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_logical_and.xhtml">NELogicalAnd</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_logical_or.xhtml">NELogicalOr</a></li>
</ul>
</li>
<li>Removed padding from Arm® Neon™ kernels:<ul>
<li>NEComplexPixelWiseMultiplicationKernel</li>
<li>NENonMaximaSuppression3x3Kernel</li>
<li>NERemapKernel</li>
<li>NEGEMMInterleave4x4Kernel</li>
<li>NEDirectConvolutionLayerKernel</li>
<li>NEScaleKernel</li>
<li>NELocallyConnectedMatrixMultiplyKernel</li>
<li>NEGEMMLowpOffsetContributionKernel</li>
<li>NEGEMMTranspose1xWKernel</li>
<li>NEPoolingLayerKernel</li>
<li>NEConvolutionKernel</li>
<li>NEDepthwiseConvolutionLayerNativeKernel</li>
<li>NEGEMMLowpMatrixMultiplyKernel</li>
<li>NEGEMMMatrixMultiplyKernel</li>
<li>NEDirectConvolutionLayerOutputStageKernel</li>
<li><a class="el" href="classarm__compute_1_1_n_e_reduction_operation_kernel.xhtml">NEReductionOperationKernel</a></li>
<li>NEGEMMLowpMatrixAReductionKernel</li>
<li>NEGEMMLowpMatrixBReductionKernel</li>
</ul>
</li>
<li>Removed padding from OpenCL kernels:<ul>
<li>CLBatchConcatenateLayerKernel</li>
<li>CLElementwiseOperationKernel</li>
<li><a class="el" href="classarm__compute_1_1_c_l_batch_normalization_layer_kernel.xhtml">CLBatchNormalizationLayerKernel</a></li>
<li>CLPoolingLayerKernel</li>
<li>CLWinogradInputTransformKernel</li>
<li>CLGEMMLowpMatrixMultiplyNativeKernel</li>
<li>CLGEMMLowpMatrixAReductionKernel</li>
<li>CLGEMMLowpMatrixBReductionKernel</li>
<li>CLGEMMLowpOffsetContributionOutputStageKernel</li>
<li>CLGEMMLowpOffsetContributionKernel</li>
<li>CLWinogradOutputTransformKernel</li>
<li>CLGEMMLowpMatrixMultiplyReshapedKernel</li>
<li><a class="el" href="classarm__compute_1_1_c_l_fuse_batch_normalization_kernel.xhtml">CLFuseBatchNormalizationKernel</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_depthwise_convolution_layer_native_kernel.xhtml">CLDepthwiseConvolutionLayerNativeKernel</a></li>
<li>CLDepthConvertLayerKernel</li>
<li>CLCopyKernel</li>
<li>CLDepthwiseConvolutionLayer3x3NHWCKernel</li>
<li>CLActivationLayerKernel</li>
<li>CLWinogradFilterTransformKernel</li>
<li>CLWidthConcatenateLayerKernel</li>
<li>CLWidthConcatenate4TensorsKernel</li>
<li>CLWidthConcatenate2TensorsKernel</li>
<li>CLLogits1DMaxShiftExpSumKernel</li>
<li>CLLogits1DNormKernel</li>
<li>CLHeightConcatenateLayerKernel</li>
<li>CLGEMMMatrixMultiplyKernel</li>
<li>CLGEMMLowpQuantizeDownInt32ScaleKernel</li>
<li>CLGEMMLowpQuantizeDownInt32ScaleByFloatKernel</li>
<li>CLGEMMLowpMatrixMultiplyReshapedOnlyRHSKernel</li>
<li>CLDepthConcatenateLayerKernel</li>
<li>CLGEMMLowpQuantizeDownInt32ScaleByFixedPointKernel</li>
</ul>
</li>
<li>Removed OpenCL kernels / functions:<ul>
<li>CLGEMMLowpQuantizeDownInt32ToInt16ScaleByFixedPointKernel</li>
<li>CLGEMMLowpQuantizeDownInt32ToInt8ScaleByFixedPointKernel</li>
<li>CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel</li>
</ul>
</li>
<li>Deprecated OpenCL kernels / functions (If a kernel is used only by the function that is being deprecated, the kernel is deprecated together):<ul>
<li>CLLocallyConnectedLayer</li>
<li>CLLocallyConnectedMatrixMultiplyKernel</li>
<li>CLAbsoluteDifference</li>
<li>CLAbsoluteDifferenceKernel</li>
<li>CLAccumulate</li>
<li>CLAccumulateKernel</li>
<li>CLAccumulateSquared</li>
<li>CLAccumulateSquaredKernel</li>
<li>CLAccumulateWeighted</li>
<li>CLAccumulateWeightedKernel</li>
<li>CLAccumulateWeightedFP16Kernel</li>
<li>CLBox3x3</li>
<li>CLBox3x3Kernel</li>
<li>CLBox3x3FP16Kernel</li>
<li>CLCannyEdge</li>
<li>CLChannelCombine</li>
<li>CLChannelCombineKernel</li>
<li>CLChannelExtract</li>
<li>CLChannelExtractKernel</li>
<li>CLColorConvert</li>
<li>CLColorConvertKernel</li>
<li>CLConvolution3x3</li>
<li>CLConvolutionRectangle</li>
<li>CLConvolutionRectangleKernel</li>
<li>CLConvolutionSquare</li>
<li>CLConvolutionKernel</li>
<li>CLDerivative</li>
<li>CLDerivativeKernel</li>
<li>CLDilate</li>
<li>CLDilateKernel</li>
<li>CLEqualizeHistogram</li>
<li>CLErode</li>
<li>CLErodeKernel</li>
<li>CLFastCorners</li>
<li>CLFastCornersKernel</li>
<li>CLGaussian3x3</li>
<li>CLGaussian3x3Kernel</li>
<li>CLGaussian5x5</li>
<li>CLGaussian5x5HorKernel</li>
<li>CLGaussian5x5VertKernel</li>
<li>CLGaussianPyramid</li>
<li>CLGaussianPyramidHalf</li>
<li>CLGaussianPyramidOrb</li>
<li>CLHarrisCorners</li>
<li>CLHarrisScoreKernel</li>
<li>CLHarrisScoreFP16Kernel</li>
<li>CLHistogram</li>
<li>CLHistogramKernel</li>
<li>CLHOGOrientationBinningKernel</li>
<li>CLHOGBlockNormalizationKernel</li>
<li>CLHOGDetectorKernel</li>
<li>CLHOGNonMaximaSuppressionKernel</li>
<li>CLHOGDescriptor</li>
<li>CLHOGDetector</li>
<li>CLHOGGradient</li>
<li>CLHOGMultiDetection</li>
<li>CLHOGOrientationBinningKernel</li>
<li>CLHOGBlockNormalizationKernel</li>
<li>CLHOGDetectorKernel</li>
<li>CLIntegralImage</li>
<li>CLIntegralImageKernel</li>
<li>CLLaplacianReconstruct</li>
<li>CLLaplacianPyramid</li>
<li>CLMagnitude</li>
<li>CLMagnitudePhaseKernel</li>
<li>CLMedian3x3</li>
<li>CLMedian3x3Kernel</li>
<li>CLMinMaxLocation</li>
<li>CLMinMaxLocationKernel</li>
<li>CLNonLinearFilter</li>
<li>CLNonLinearFilterKernel</li>
<li>CLNonMaximaSuppression3x3</li>
<li>CLNonMaximaSuppression3x3FP16Kernel</li>
<li>CLNonMaximaSuppression3x3Kernel</li>
<li>CLOpticalFlow</li>
<li>CLPhase</li>
<li>CLRemap</li>
<li>CLRemapKernel</li>
<li>CLScharr3x3</li>
<li>CLScharr3x3Kernel</li>
<li>CLSobel3x3</li>
<li>CLSobel3x3Kernel</li>
<li>CLSobel5x5</li>
<li>CLSobel5x5HorKernel</li>
<li>CLSobel5x5VertKernel</li>
<li>CLSobel7x7</li>
<li>CLSobel7x7HorKernel</li>
<li>CLSobel7x7VertKernel</li>
<li>CLThreshold</li>
<li>CLThresholdKernel</li>
<li>CLWarpAffine</li>
<li>CLWarpAffineKernel</li>
<li>CLWarpPerspective</li>
<li>CLWarpPerspectiveKernel</li>
</ul>
</li>
<li>Deprecated Arm® Neon™ kernels / functions (If a kernel is used only by the function that is being deprecated, the kernel is deprecated together):<ul>
<li>NELocallyConnectedLayer</li>
<li>NELocallyConnectedMatrixMultiplyKernel</li>
<li>NEAbsoluteDifference</li>
<li>NEAbsoluteDifferenceKernel</li>
<li>NEAccumulate</li>
<li>NEAccumulateKernel</li>
<li>NEAccumulateSquared</li>
<li>NEAccumulateSquaredKernel</li>
<li>NEAccumulateWeighted</li>
<li>NEAccumulateWeightedKernel</li>
<li>NEAccumulateWeightedFP16Kernel</li>
<li>NEBox3x3</li>
<li>NEBox3x3Kernel</li>
<li>NEBox3x3FP16Kernel</li>
<li>NECannyEdge</li>
<li>NEChannelCombine</li>
<li>NEChannelCombineKernel</li>
<li>NEChannelExtract</li>
<li>NEChannelExtractKernel</li>
<li>NEColorConvert</li>
<li>NEColorConvertKernel</li>
<li>NEConvolution3x3</li>
<li>NEConvolutionRectangle</li>
<li>NEConvolutionRectangleKernel</li>
<li>NEConvolutionSquare</li>
<li>NEConvolutionKernel</li>
<li>NEDerivative</li>
<li>NEDerivativeKernel</li>
<li>NEDilate</li>
<li>NEDilateKernel</li>
<li>NEEqualizeHistogram</li>
<li>NEErode</li>
<li>NEErodeKernel</li>
<li>NEFastCorners</li>
<li>NEFastCornersKernel</li>
<li>NEGaussian3x3</li>
<li>NEGaussian3x3Kernel</li>
<li>NEGaussian5x5</li>
<li>NEGaussian5x5HorKernel</li>
<li>NEGaussian5x5VertKernel</li>
<li>NEGaussianPyramid</li>
<li>NEGaussianPyramidHalf</li>
<li>NEGaussianPyramidOrb</li>
<li>NEHarrisCorners</li>
<li>NEHarrisScoreKernel</li>
<li>NEHarrisScoreFP16Kernel</li>
<li>NEHistogram</li>
<li>NEHistogramKernel</li>
<li>NEHOGOrientationBinningKernel</li>
<li>NEHOGBlockNormalizationKernel</li>
<li>NEHOGDetectorKernel</li>
<li>NEHOGNonMaximaSuppressionKernel</li>
<li>NEHOGDescriptor</li>
<li>NEHOGDetector</li>
<li>NEHOGGradient</li>
<li>NEHOGMultiDetection</li>
<li>NEHOGOrientationBinningKernel</li>
<li>NEHOGBlockNormalizationKernel</li>
<li>NEHOGDetectorKernel</li>
<li>NEIntegralImage</li>
<li>NEIntegralImageKernel</li>
<li>NELaplacianReconstruct</li>
<li>NELaplacianPyramid</li>
<li>NEMagnitude</li>
<li>NEMagnitudePhaseKernel</li>
<li>NEMedian3x3</li>
<li>NEMedian3x3Kernel</li>
<li>NEMinMaxLocation</li>
<li>NEMinMaxLocationKernel</li>
<li>NENonLinearFilter</li>
<li>NENonLinearFilterKernel</li>
<li>NENonMaximaSuppression3x3</li>
<li>NENonMaximaSuppression3x3FP16Kernel</li>
<li>NENonMaximaSuppression3x3Kernel</li>
<li>NEOpticalFlow</li>
<li>NEPhase</li>
<li>NERemap</li>
<li>NERemapKernel</li>
<li>NEScharr3x3</li>
<li>NEScharr3x3Kernel</li>
<li>NESobel3x3</li>
<li>NESobel3x3Kernel</li>
<li>NESobel5x5</li>
<li>NESobel5x5HorKernel</li>
<li>NESobel5x5VertKernel</li>
<li>NESobel7x7</li>
<li>NESobel7x7HorKernel</li>
<li>NESobel7x7VertKernel</li>
<li>NEThreshold</li>
<li>NEThresholdKernel</li>
<li>NEWarpAffine</li>
<li>NEWarpAffineKernel</li>
<li>NEWarpPerspective</li>
<li>NEWarpPerspectiveKernel</li>
</ul>
</li>
<li>Deprecated GLES kernels / functions (If a kernel is used only by the function that is being deprecated, the kernel is deprecated together):<ul>
<li>GCAbsoluteDifference</li>
<li>GCActivationLayer</li>
<li>GCArithmeticAddition</li>
<li>GCBatchNormalizationLayer</li>
<li>GCConcatenateLayer</li>
<li>GCConvolutionLayer</li>
<li>GCDepthwiseConvolutionLayer</li>
<li>GCDirectConvolutionLayer</li>
<li>GCDropoutLayer</li>
<li>GCFillBorder</li>
<li>GCFullyConnectedLayer</li>
<li>GCGEMM</li>
<li>GCGEMMInterleave4x4</li>
<li>GCGEMMTranspose1xW</li>
<li>GCNormalizationLayer</li>
<li>GCNormalizePlanarYUVLayer</li>
<li>GCPixelWiseMultiplication</li>
<li>GCPoolingLayer</li>
<li>GCScale</li>
<li>GCSoftmaxLayer</li>
<li>GCTensorShift</li>
<li>GCTranspose</li>
</ul>
</li>
</ul>
<p>v20.08 Public major release</p><ul>
<li>Various bug fixes.</li>
<li>Various optimisations.</li>
<li>Added new data type QASYMM8_SIGNED support for:<ul>
<li><a class="el" href="classarm__compute_1_1_c_l_arg_min_max_layer.xhtml">CLArgMinMaxLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_arg_min_max_layer_kernel.xhtml">CLArgMinMaxLayerKernel</a></li>
</ul>
</li>
<li>Added new data type U8 support for:<ul>
<li><a class="el" href="classarm__compute_1_1_n_e_crop_kernel.xhtml">NECropKernel</a></li>
<li>CLCropKernel</li>
</ul>
</li>
<li>Added align_corner support for nearest neighbor interpolation in:<ul>
<li>NEScaleKernel</li>
<li>CLScaleKernel</li>
</ul>
</li>
<li>New OpenCL kernels / functions:<ul>
<li><a class="el" href="classarm__compute_1_1_c_l_max_unpooling_layer_kernel.xhtml">CLMaxUnpoolingLayerKernel</a></li>
</ul>
</li>
<li>New Arm® Neon™ kernels / functions:<ul>
<li>NEMaxUnpoolingLayerKernel</li>
</ul>
</li>
<li>New graph example:<ul>
<li>graph_yolov3_output_detector</li>
</ul>
</li>
<li>GEMMTuner improvements:<ul>
<li>Added fp16 support</li>
<li>Output json files for easier integration</li>
<li>Enabled tuning for export_to_cl_image_rhs option for RHS tensors</li>
<li>More robust script for running benchmarks</li>
</ul>
</li>
<li>Removed padding from:<ul>
<li>NEPixelWiseMultiplicationKernel</li>
<li>NEHeightConcatenateLayerKernel</li>
<li>NEThresholdKernel</li>
<li>NEBatchConcatenateLayerKernel</li>
<li>NETransposeKernel</li>
<li><a class="el" href="classarm__compute_1_1_n_e_batch_normalization_layer_kernel.xhtml">NEBatchNormalizationLayerKernel</a></li>
<li>NEArithmeticSubtractionKernel</li>
<li><a class="el" href="classarm__compute_1_1_n_e_bounding_box_transform_kernel.xhtml">NEBoundingBoxTransformKernel</a></li>
<li>NELogits1DMaxKernel</li>
<li>NELogits1DSoftmaxKernel</li>
<li><a class="el" href="classarm__compute_1_1_n_e_r_o_i_pooling_layer_kernel.xhtml">NEROIPoolingLayerKernel</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_r_o_i_align_layer_kernel.xhtml">NEROIAlignLayerKernel</a></li>
<li>NEYOLOLayerKernel</li>
<li>NEUpsampleLayerKernel</li>
<li>NEFloorKernel</li>
<li>NEWidthConcatenateLayerKernel</li>
<li>NEDepthConcatenateLayerKernel</li>
<li><a class="el" href="classarm__compute_1_1_n_e_normalization_layer_kernel.xhtml">NENormalizationLayerKernel</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_l2_normalize_layer_kernel.xhtml">NEL2NormalizeLayerKernel</a></li>
<li>NEFillArrayKernel</li>
<li>NEDepthConvertLayerKernel</li>
<li><a class="el" href="classarm__compute_1_1_n_e_range_kernel.xhtml">NERangeKernel</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_prior_box_layer.xhtml">NEPriorBoxLayer</a></li>
</ul>
</li>
<li>Removed OpenCL kernels / functions:<ul>
<li>CLGEMMLowpQuantizeDownInt32ToUint8Scale</li>
<li>CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFloat</li>
</ul>
</li>
<li>Removed Arm® Neon™ kernels / functions:<ul>
<li>NEGEMMLowpQuantizeDownInt32ToUint8Scale</li>
<li>NEGEMMMatrixAccumulateBiasesKernel</li>
</ul>
</li>
<li>Deprecated functions / interfaces:<ul>
<li>Non-descriptor based interfaces for NEThreshold, CLThreshold</li>
<li>Non-descriptor based interfaces for <a class="el" href="classarm__compute_1_1_n_e_scale.xhtml">NEScale</a>, <a class="el" href="classarm__compute_1_1_c_l_scale.xhtml">CLScale</a> and GCScale</li>
<li>In <a class="el" href="namespacearm__compute.xhtml#a4df2143ca0a3bdbbbc54b440a52541cd">NESoftmaxLayer</a>, <a class="el" href="namespacearm__compute.xhtml#a4478c830368ed024dc47a2bf48978616">NELogSoftmaxLayer</a>, <a class="el" href="namespacearm__compute.xhtml#a30ce3b40394b4f2d1e4cc31db7183425">CLSoftmaxLayer</a>, <a class="el" href="namespacearm__compute.xhtml#aa02883dd85b75a6eb0d4878f266908dd">CLLogSoftmaxLayer</a> and GCSoftmaxLayer : The default "axis" value for <a class="el" href="namespacearm__compute.xhtml#a30ce3b40394b4f2d1e4cc31db7183425">CLSoftmaxLayer</a>, <a class="el" href="namespacearm__compute.xhtml#aa02883dd85b75a6eb0d4878f266908dd">CLLogSoftmaxLayer</a> and GCSoftmaxLayer is changed from 1 to 0. Only axis 0 is supported. The default "axis" value for <a class="el" href="namespacearm__compute.xhtml#a4df2143ca0a3bdbbbc54b440a52541cd">NESoftmaxLayer</a>, <a class="el" href="namespacearm__compute.xhtml#a4478c830368ed024dc47a2bf48978616">NELogSoftmaxLayer</a> is changed from 1 to 0. Only axis 0 is supported.</li>
</ul>
</li>
<li>The support for quantized data types has been removed from <a class="el" href="namespacearm__compute.xhtml#aa02883dd85b75a6eb0d4878f266908dd">CLLogSoftmaxLayer</a> due to implementation complexity.</li>
<li>Removed padding requirement for the input (e.g. LHS of GEMM) and output in CLGEMMMatrixMultiplyNativeKernel, CLGEMMMatrixMultiplyReshapedKernel, CLGEMMMatrixMultiplyReshapedOnlyRHSKernel and CLIm2ColKernel (NHWC only)<ul>
<li>This change allows to use <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_convolution_layer.xhtml">CLGEMMConvolutionLayer</a> without extra padding for the input and output.</li>
<li>Only the weights/bias of <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_convolution_layer.xhtml">CLGEMMConvolutionLayer</a> could require padding for the computation.</li>
<li>Only on Arm® Mali™ Midgard GPUs, <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_convolution_layer.xhtml">CLGEMMConvolutionLayer</a> could require padding since CLGEMMMatrixMultiplyKernel is called and currently requires padding.</li>
</ul>
</li>
<li>Added support for exporting the OpenCL buffer object to the OpenCL image object in CLGEMMMatrixMultiplyReshapedKernel and CLGEMMMatrixMultiplyReshapedOnlyRHSKernel.<ul>
<li>This support allows to export the OpenCL buffer used for the reshaped RHS matrix to the OpenCL image object.</li>
<li>The padding requirement for the OpenCL image object is considered into the CLGEMMReshapeRHSMatrixKernel.</li>
<li>The reshaped RHS matrix stores the weights when GEMM is used to accelerate <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_convolution_layer.xhtml" title="Basic function to compute the convolution layer.">CLGEMMConvolutionLayer</a>.</li>
</ul>
</li>
</ul>
<p>v20.05 Public major release</p><ul>
<li>Various bug fixes.</li>
<li>Various optimisations.</li>
<li>Updated recommended NDK version to r18b.</li>
<li>Updated recommended gcc version to Linaro 6.3.1.</li>
<li>Added Bfloat16 type support</li>
<li>Added Bfloat16 support in:<ul>
<li>NEWeightsReshapeKernel</li>
<li>NEConvolutionLayerReshapeWeights</li>
<li>NEIm2ColKernel</li>
<li>NEIm2Col</li>
<li>NEDepthConvertLayerKernel</li>
<li><a class="el" href="classarm__compute_1_1_n_e_depth_convert_layer.xhtml">NEDepthConvertLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_convolution_layer.xhtml">NEGEMMConvolutionLayer</a></li>
<li>NEGEMMAssemblyDispatch</li>
</ul>
</li>
<li>Added new data type QASYMM8_SIGNED support for:<ul>
<li><a class="el" href="classarm__compute_1_1_c_l_direct_convolution_layer.xhtml">CLDirectConvolutionLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_deconvolution_layer.xhtml">CLDeconvolutionLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_direct_deconvolution_layer.xhtml">CLDirectDeconvolutionLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_deconvolution_layer.xhtml">CLGEMMDeconvolutionLayer</a></li>
<li>CLGEMMLowpMatrixMultiplyReshapedKernel</li>
<li>CLGEMMLowpQuantizeDownInt32ScaleKernel</li>
<li>CLGEMMLowpQuantizeDownInt32ScaleByFloatKernel</li>
<li><a class="el" href="classarm__compute_1_1_c_l_reduction_operation.xhtml">CLReductionOperation</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_reduce_mean.xhtml">CLReduceMean</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_scale.xhtml">NEScale</a></li>
<li>NEScaleKernel</li>
<li>NEUpsampleLayer</li>
<li><a class="el" href="classarm__compute_1_1_n_e_cast.xhtml">NECast</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_reduction_operation.xhtml">NEReductionOperation</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_reduce_mean.xhtml">NEReduceMean</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_arg_min_max_layer.xhtml">NEArgMinMaxLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_deconvolution_layer.xhtml">NEDeconvolutionLayer</a></li>
<li>NEGEMMLowpQuantizeDownInt32ScaleKernel</li>
<li><a class="el" href="classarm__compute_1_1_c_p_p_box_with_non_maxima_suppression_limit.xhtml">CPPBoxWithNonMaximaSuppressionLimit</a></li>
<li><a class="el" href="classarm__compute_1_1_c_p_p_detection_post_process_layer.xhtml">CPPDetectionPostProcessLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_c_p_p_permute_kernel.xhtml">CPPPermuteKernel</a></li>
<li><a class="el" href="classarm__compute_1_1_c_p_p_permute.xhtml">CPPPermute</a></li>
<li><a class="el" href="classarm__compute_1_1_c_p_p_top_k_v_kernel.xhtml">CPPTopKVKernel</a></li>
<li><a class="el" href="classarm__compute_1_1_c_p_p_top_k_v.xhtml">CPPTopKV</a></li>
<li><a class="el" href="classarm__compute_1_1_c_p_p_upsample.xhtml">CPPUpsample</a></li>
<li><a class="el" href="classarm__compute_1_1_c_p_p_upsample_kernel.xhtml">CPPUpsampleKernel</a></li>
</ul>
</li>
<li>New OpenCL kernels / functions:<ul>
<li><a class="el" href="classarm__compute_1_1_c_l_q_l_s_t_m_layer.xhtml">CLQLSTMLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_q_l_s_t_m_layer_normalization_kernel.xhtml">CLQLSTMLayerNormalizationKernel</a></li>
</ul>
</li>
<li>New Arm® Neon™ kernels / functions:<ul>
<li><a class="el" href="classarm__compute_1_1_n_e_q_l_s_t_m_layer.xhtml">NEQLSTMLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_q_l_s_t_m_layer_normalization_kernel.xhtml">NEQLSTMLayerNormalizationKernel</a></li>
</ul>
</li>
<li>Added HARD_SWISH support in:<ul>
<li>CLActivationLayerKernel</li>
<li>NEActivationLayerKernel</li>
</ul>
</li>
<li>Deprecated OpenCL kernels / functions:<ul>
<li>CLGEMMLowpQuantizeDownInt32ToUint8Scale</li>
<li>CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFloat</li>
</ul>
</li>
<li>Deprecated Arm® Neon™ kernels / functions:<ul>
<li>NEGEMMLowpQuantizeDownInt32ToUint8Scale</li>
</ul>
</li>
<li>Removed CPP kernels / functions:<ul>
<li>CPPFlipWeightsKernel</li>
</ul>
</li>
<li>Removed <a class="el" href="structarm__compute_1_1_pooling_layer_info.xhtml" title="Pooling Layer Information struct.">PoolingLayerInfo</a> constructors without Data Layout.</li>
<li>Removed CLDepthwiseConvolutionLayer3x3</li>
<li>Removed NEDepthwiseConvolutionLayerOptimized</li>
<li>Added support for Winograd 3x3,4x4 on Arm® Neon™ FP16:<ul>
<li><a class="el" href="classarm__compute_1_1_n_e_winograd_convolution_layer.xhtml">NEWinogradConvolutionLayer</a></li>
<li>CpuWinogradConv2dTransformInputKernel</li>
<li>CpuWinogradConv2dTransformOutputKernel</li>
<li>CpuWinogradConv2dTransformWeightsKernel</li>
</ul>
</li>
<li>Added <a class="el" href="classarm__compute_1_1_c_l_compile_context.xhtml" title="CLCompileContext class.">CLCompileContext</a></li>
<li>Added Arm® Neon™ GEMM kernel with 2D window support</li>
</ul>
<p>v20.02.1 Maintenance release</p><ul>
<li>Added Android-NN build script.</li>
</ul>
<p>v20.02 Public major release</p><ul>
<li>Various bug fixes.</li>
<li>Various optimisations.</li>
<li>Added new data type QASYMM8_SIGNED support for:<ul>
<li><a class="el" href="classarm__compute_1_1_c_l_depthwise_convolution_layer.xhtml">CLDepthwiseConvolutionLayer</a></li>
<li>CLDepthwiseConvolutionLayer3x3</li>
<li><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_convolution_layer.xhtml">CLGEMMConvolutionLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_multiply_core.xhtml" title="Basic function to execute GEMMLowpMatrixMultiplyCore on OpenCL.">CLGEMMLowpMatrixMultiplyCore</a></li>
<li>CLGEMMLowpMatrixMultiplyReshapedOnlyRHSKernel</li>
<li>CLGEMMLowpMatrixMultiplyNativeKernel</li>
<li><a class="el" href="classarm__compute_1_1_n_e_activation_layer.xhtml">NEActivationLayer</a></li>
<li>NEComparisonOperationKernel</li>
<li><a class="el" href="classarm__compute_1_1_n_e_convolution_layer.xhtml">NEConvolutionLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_depthwise_convolution_layer.xhtml">NEDepthwiseConvolutionLayer</a></li>
<li>NEDepthwiseConvolutionLayer3x3Kernel</li>
<li>NEDirectConvolutionLayerOutputStageKernel</li>
<li><a class="el" href="classarm__compute_1_1_n_e_elementwise_comparison.xhtml">NEElementwiseComparison</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_elementwise_max.xhtml">NEElementwiseMax</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_elementwise_min.xhtml">NEElementwiseMin</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_elementwise_squared_diff.xhtml">NEElementwiseSquaredDiff</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_fully_connected_layer.xhtml">NEFullyConnectedLayer</a></li>
<li>NEGEMMMatrixVectorMultiplyKernel</li>
<li><a class="el" href="classarm__compute_1_1_n_e_pixel_wise_multiplication.xhtml">NEPixelWiseMultiplication</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_pooling_layer.xhtml">NEPoolingLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_p_relu_layer.xhtml">NEPReluLayer</a></li>
</ul>
</li>
<li>Added support for QSYMM8_PER_CHANNEL in:<ul>
<li>NEDepthwiseConvolutionLayer3x3Kernel</li>
</ul>
</li>
<li>Added support for split sizes in:<ul>
<li><a class="el" href="classarm__compute_1_1_c_l_split.xhtml">CLSplit</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_split.xhtml">NESplit</a></li>
</ul>
</li>
<li>New OpenCL kernels / functions:<ul>
<li><a class="el" href="classarm__compute_1_1_c_l_fill.xhtml">CLFill</a></li>
<li>CLGEMMLowpQuantizeDownInt32ToInt8ScaleByFixedPointKernel / CLGEMMLowpQuantizeDownInt32ToInt8ScaleByFixedPoint</li>
</ul>
</li>
<li>New Arm® Neon™ kernels / functions:<ul>
<li><a class="el" href="classarm__compute_1_1_n_e_fill.xhtml">NEFill</a></li>
<li>NEGEMMLowpQuantizeDownInt32ToInt8ScaleByFixedPointKernel / NEGEMMLowpQuantizeDownInt32ToInt8ScaleByFixedPoint</li>
</ul>
</li>
<li>Deprecated Arm® Neon™ functions / interfaces:<ul>
<li>CLDepthwiseConvolutionLayer3x3</li>
<li>NEDepthwiseConvolutionLayerOptimized</li>
<li><a class="el" href="structarm__compute_1_1_pooling_layer_info.xhtml" title="Pooling Layer Information struct.">PoolingLayerInfo</a> constructors without Data Layout.</li>
</ul>
</li>
<li>Added support for quantization with multiplier greater than 1 on Arm® Neon™ and CL.</li>
<li>Added support for quantized inputs of type QASYMM8_SIGNED and QASYMM8 to <a class="el" href="classarm__compute_1_1_c_l_quantization_layer.xhtml">CLQuantizationLayer</a>.</li>
<li>Added the ability to build bootcode for bare metal.</li>
<li>Added support for generating synthetic QASYMM8 graphs.</li>
<li>Added support for F16 datatype in VGG16.</li>
<li>Removed pre-built binaries for GLES.</li>
</ul>
<p>v19.11.1 Public maintenance release</p><ul>
<li>Fix offset calculation in <a class="el" href="classarm__compute_1_1_n_e_reduction_operation_kernel.xhtml" title="Kernel to perform a reduction operation.">NEReductionOperationKernel</a>.</li>
<li>Fix data layout in NEScaleKernel for nhwc.</li>
<li>Retain configuration step data layout to avoid side-effects.</li>
<li>Perform sqrt in double domain for L2 pooling.</li>
<li>Fix output shape calculation for Reduce Mean</li>
<li>Restrict cases where optimized <a class="el" href="classarm__compute_1_1_n_e_pad_layer.xhtml" title="Basic function to pad a tensor.">NEPadLayer</a> runs.</li>
</ul>
<p>v19.11 Public major release</p><ul>
<li>Various bug fixes.</li>
<li>Various optimisations.</li>
<li>Updated recommended NDK version to r17c.</li>
<li>Deprecated OpenCL kernels / functions:<ul>
<li>CLDepthwiseConvolutionLayerReshapeWeightsGenericKernel</li>
<li>CLDepthwiseIm2ColKernel</li>
<li>CLDepthwiseSeparableConvolutionLayer</li>
<li>CLDepthwiseVectorToTensorKernel</li>
<li>CLDirectConvolutionLayerOutputStageKernel</li>
</ul>
</li>
<li>Deprecated Arm® Neon™ kernels / functions:<ul>
<li>NEDepthwiseWeightsReshapeKernel</li>
<li>NEDepthwiseIm2ColKernel</li>
<li>NEDepthwiseSeparableConvolutionLayer</li>
<li>NEDepthwiseVectorToTensorKernel</li>
<li>NEDepthwiseConvolutionLayer3x3</li>
</ul>
</li>
<li>New OpenCL kernels / functions:<ul>
<li><a class="el" href="classarm__compute_1_1_c_l_instance_normalization_layer_kernel.xhtml">CLInstanceNormalizationLayerKernel</a> / <a class="el" href="classarm__compute_1_1_c_l_instance_normalization_layer.xhtml">CLInstanceNormalizationLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_depthwise_convolution_layer_native_kernel.xhtml">CLDepthwiseConvolutionLayerNativeKernel</a> to replace the old generic depthwise convolution (see Deprecated OpenCL kernels / functions)</li>
<li><a class="el" href="namespacearm__compute.xhtml#aa02883dd85b75a6eb0d4878f266908dd">CLLogSoftmaxLayer</a></li>
</ul>
</li>
<li>New Arm® Neon™ kernels / functions:<ul>
<li><a class="el" href="classarm__compute_1_1_n_e_bounding_box_transform_kernel.xhtml">NEBoundingBoxTransformKernel</a> / <a class="el" href="classarm__compute_1_1_n_e_bounding_box_transform.xhtml">NEBoundingBoxTransform</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_compute_all_anchors_kernel.xhtml">NEComputeAllAnchorsKernel</a> / NEComputeAllAnchors</li>
<li><a class="el" href="classarm__compute_1_1_n_e_detection_post_process_layer.xhtml">NEDetectionPostProcessLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_generate_proposals_layer.xhtml">NEGenerateProposalsLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_instance_normalization_layer_kernel.xhtml">NEInstanceNormalizationLayerKernel</a> / <a class="el" href="classarm__compute_1_1_n_e_instance_normalization_layer.xhtml">NEInstanceNormalizationLayer</a></li>
<li><a class="el" href="namespacearm__compute.xhtml#a4478c830368ed024dc47a2bf48978616">NELogSoftmaxLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_r_o_i_align_layer_kernel.xhtml">NEROIAlignLayerKernel</a> / <a class="el" href="classarm__compute_1_1_n_e_r_o_i_align_layer.xhtml">NEROIAlignLayer</a></li>
</ul>
</li>
<li>Added QASYMM8 support for:<ul>
<li><a class="el" href="classarm__compute_1_1_c_l_generate_proposals_layer.xhtml">CLGenerateProposalsLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_r_o_i_align_layer.xhtml">CLROIAlignLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_c_p_p_box_with_non_maxima_suppression_limit.xhtml">CPPBoxWithNonMaximaSuppressionLimit</a></li>
</ul>
</li>
<li>Added QASYMM16 support for:<ul>
<li><a class="el" href="classarm__compute_1_1_c_l_bounding_box_transform.xhtml">CLBoundingBoxTransform</a></li>
</ul>
</li>
<li>Added FP16 support for:<ul>
<li>CLGEMMMatrixMultiplyReshapedKernel</li>
</ul>
</li>
<li>Added new data type QASYMM8_PER_CHANNEL support for:<ul>
<li><a class="el" href="classarm__compute_1_1_c_l_dequantization_layer.xhtml" title="Basic function to run opencl::ClDequantize that dequantizes an input tensor.">CLDequantizationLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_dequantization_layer.xhtml">NEDequantizationLayer</a></li>
</ul>
</li>
<li>Added new data type QSYMM8_PER_CHANNEL support for:<ul>
<li><a class="el" href="classarm__compute_1_1_c_l_convolution_layer.xhtml">CLConvolutionLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_convolution_layer.xhtml">NEConvolutionLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_depthwise_convolution_layer.xhtml">CLDepthwiseConvolutionLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_depthwise_convolution_layer.xhtml">NEDepthwiseConvolutionLayer</a></li>
</ul>
</li>
<li>Added FP16 mixed-precision support for:<ul>
<li>CLGEMMMatrixMultiplyReshapedKernel</li>
<li>CLPoolingLayerKernel</li>
</ul>
</li>
<li>Added FP32 and FP16 ELU activation for:<ul>
<li><a class="el" href="classarm__compute_1_1_c_l_activation_layer.xhtml">CLActivationLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_activation_layer.xhtml">NEActivationLayer</a></li>
</ul>
</li>
<li>Added asymmetric padding support for:<ul>
<li><a class="el" href="classarm__compute_1_1_c_l_direct_deconvolution_layer.xhtml">CLDirectDeconvolutionLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_deconvolution_layer.xhtml">CLGEMMDeconvolutionLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_deconvolution_layer.xhtml">NEDeconvolutionLayer</a></li>
</ul>
</li>
<li>Added SYMMETRIC and REFLECT modes for <a class="el" href="classarm__compute_1_1_c_l_pad_layer_kernel.xhtml">CLPadLayerKernel</a> / <a class="el" href="classarm__compute_1_1_c_l_pad_layer.xhtml">CLPadLayer</a>.</li>
<li>Replaced the calls to NECopyKernel and NEMemsetKernel with <a class="el" href="classarm__compute_1_1_n_e_pad_layer.xhtml">NEPadLayer</a> in <a class="el" href="classarm__compute_1_1_n_e_generate_proposals_layer.xhtml">NEGenerateProposalsLayer</a>.</li>
<li>Replaced the calls to CLCopyKernel and CLMemsetKernel with <a class="el" href="classarm__compute_1_1_c_l_pad_layer.xhtml">CLPadLayer</a> in <a class="el" href="classarm__compute_1_1_c_l_generate_proposals_layer.xhtml">CLGenerateProposalsLayer</a>.</li>
<li>Improved performance for CL Inception V3 - FP16.</li>
<li>Improved accuracy for CL Inception V3 - FP16 by enabling FP32 accumulator (mixed-precision).</li>
<li>Improved Arm® Neon™ performance by enabling fusing batch normalization with convolution and depth-wise convolution layer.</li>
<li>Improved Arm® Neon™ performance for MobileNet-SSD by improving the output detection performance.</li>
<li>Optimized <a class="el" href="classarm__compute_1_1_c_l_pad_layer.xhtml">CLPadLayer</a>.</li>
<li>Optimized CL generic depthwise convolution layer by introducing <a class="el" href="classarm__compute_1_1_c_l_depthwise_convolution_layer_native_kernel.xhtml">CLDepthwiseConvolutionLayerNativeKernel</a>.</li>
<li>Reduced memory consumption by implementing weights sharing.</li>
</ul>
<p>v19.08.1 Public maintenance release</p><ul>
<li>Fix offset calculation in <a class="el" href="classarm__compute_1_1_n_e_reduction_operation_kernel.xhtml" title="Kernel to perform a reduction operation.">NEReductionOperationKernel</a>.</li>
<li>Fix data layout in NEScaleKernel for nhwc.</li>
<li>Retain configuration step data layout to avoid side-effects.</li>
<li>Perform sqrt in double domain for L2 pooling.</li>
<li>Fix output shape calculation for Reduce Mean</li>
<li>Fix broadcast CLPixelwiseMultiplication with 5D tensors</li>
</ul>
<p>v19.08 Public major release</p><ul>
<li>Various bug fixes.</li>
<li>Various optimisations.</li>
<li>Deprecated Arm® Neon™ functions<ul>
<li>NEDepthConcatenateLayer</li>
<li>NEWidthConcatenateLayer</li>
</ul>
</li>
<li>Deprecated OpenCL kernels / functions<ul>
<li>CLDepthConcatenateLayer</li>
<li>CLGEMMInterleave4x4Kernel / CLGEMMInterleave4x4</li>
<li>CLGEMMTranspose1xWKernel / CLGEMMTranspose1xW</li>
<li>CLWidthConcatenateLayer</li>
</ul>
</li>
<li>New Arm® Neon™ kernels / functions:<ul>
<li><a class="el" href="namespacearm__compute.xhtml#a49760a5c85389eb323c487aed2cefdfa">NEAbsLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_cast.xhtml">NECast</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_elementwise_power.xhtml">NEElementwisePower</a></li>
<li><a class="el" href="namespacearm__compute.xhtml#ac37a58198a2b5ec75c812a493eb3f062">NELogLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_l_s_t_m_layer_quantized.xhtml">NELSTMLayerQuantized</a></li>
<li><a class="el" href="namespacearm__compute.xhtml#a7d885ce863280fc60b557fc82d7d29d7">NENegLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_p_relu_layer.xhtml">NEPReluLayer</a></li>
<li><a class="el" href="namespacearm__compute.xhtml#a6bebc82fea9931864bd0ec45fc85e75b">NESinLayer</a></li>
<li>NEBatchConcatenateLayerKernel</li>
<li><a class="el" href="classarm__compute_1_1_n_e_depth_to_space_layer_kernel.xhtml">NEDepthToSpaceLayerKernel</a> / <a class="el" href="classarm__compute_1_1_n_e_depth_to_space_layer.xhtml">NEDepthToSpaceLayer</a></li>
<li>NEDepthwiseConvolutionLayerNativeKernel</li>
<li>NEGEMMLowpQuantizeDownInt32ToInt16ScaleByFixedPointKernel</li>
<li><a class="el" href="classarm__compute_1_1_n_e_mean_std_dev_normalization_kernel.xhtml">NEMeanStdDevNormalizationKernel</a> / <a class="el" href="classarm__compute_1_1_n_e_mean_std_dev_normalization_layer.xhtml">NEMeanStdDevNormalizationLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_space_to_depth_layer_kernel.xhtml">NESpaceToDepthLayerKernel</a> / <a class="el" href="classarm__compute_1_1_n_e_space_to_depth_layer.xhtml">NESpaceToDepthLayer</a></li>
</ul>
</li>
<li>New OpenCL kernels / functions:<ul>
<li><a class="el" href="classarm__compute_1_1_c_l_abs_layer.xhtml">CLAbsLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_elementwise_power.xhtml">CLElementwisePower</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_log_layer.xhtml">CLLogLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_l_s_t_m_layer_quantized.xhtml">CLLSTMLayerQuantized</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_neg_layer.xhtml">CLNegLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_p_relu_layer.xhtml">CLPReluLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_sin_layer.xhtml">CLSinLayer</a></li>
<li>CLBatchConcatenateLayerKernel</li>
<li><a class="el" href="classarm__compute_1_1_c_l_depth_to_space_layer_kernel.xhtml">CLDepthToSpaceLayerKernel</a> / <a class="el" href="classarm__compute_1_1_c_l_depth_to_space_layer.xhtml">CLDepthToSpaceLayer</a></li>
<li>CLGEMMLowpMatrixMultiplyNativeKernel</li>
<li>CLGEMMLowpQuantizeDownInt32ToInt16ScaleByFixedPointKernel</li>
<li>CLGEMMMatrixMultiplyNativeKernel</li>
<li><a class="el" href="classarm__compute_1_1_c_l_mean_std_dev_normalization_kernel.xhtml" title="Interface for the kernel to normalize the input 2D tensor across the first dimension with respect to ...">CLMeanStdDevNormalizationKernel</a> /CLMeanStdDevNormalizationLayer</li>
<li><a class="el" href="classarm__compute_1_1_c_l_space_to_depth_layer_kernel.xhtml">CLSpaceToDepthLayerKernel</a> / <a class="el" href="classarm__compute_1_1_c_l_space_to_depth_layer.xhtml">CLSpaceToDepthLayer</a></li>
</ul>
</li>
<li>New examples:<ul>
<li>neon_opticalflow</li>
<li>cl_cache</li>
<li>neon_permute</li>
</ul>
</li>
<li>Added support for FP16 in <a class="el" href="classarm__compute_1_1_n_e_deconvolution_layer.xhtml">NEDeconvolutionLayer</a></li>
<li>Added support for FP16 in <a class="el" href="classarm__compute_1_1_c_l_deconvolution_layer.xhtml">CLDeconvolutionLayer</a></li>
<li>Added support for REDUCE_MIN and REDUCE_MAX in <a class="el" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45b">ReductionOperation</a></li>
<li>Enable the fusion of batch normalization with convolution and depthwise convolution layer for FP32 in the graph API (OpenCL only)</li>
<li>Added support for fusing activation function and broadcast addition with the matrix multiplication for FP32 (OpenCL only)</li>
<li>Re-factored the depthwise convolution layer kernel on Arm® Neon™ for generic cases</li>
<li>Added an optimized depthwise convolution layer kernel for 5x5 filters (Neon™ only)</li>
<li>Added support to enable OpenCL kernel cache. Added example showing how to load the prebuilt OpenCL kernels from a binary cache file</li>
<li>Altered <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> interface to support per-channel quantization.</li>
<li>The CLDepthwiseConvolutionLayer3x3 will be included by <a class="el" href="classarm__compute_1_1_c_l_depthwise_convolution_layer.xhtml">CLDepthwiseConvolutionLayer</a> to accommodate for future optimizations.</li>
<li>The NEDepthwiseConvolutionLayerOptimized will be included by <a class="el" href="classarm__compute_1_1_n_e_depthwise_convolution_layer.xhtml">NEDepthwiseConvolutionLayer</a> to accommodate for future optimizations.</li>
<li>Removed inner_border_right and inner_border_top parameters from <a class="el" href="classarm__compute_1_1_c_l_deconvolution_layer.xhtml">CLDeconvolutionLayer</a> interface</li>
<li>Removed inner_border_right and inner_border_top parameters from <a class="el" href="classarm__compute_1_1_n_e_deconvolution_layer.xhtml">NEDeconvolutionLayer</a> interface</li>
<li>Optimized the Arm® Neon™ assembly kernel for GEMMLowp. The new implementation fuses the output stage and quantization with the matrix multiplication kernel</li>
</ul>
<p>v19.05 Public major release</p><ul>
<li>Various bug fixes.</li>
<li>Various optimisations.</li>
<li>New Arm® Neon™ kernels / functions:<ul>
<li><a class="el" href="classarm__compute_1_1_n_e_batch_to_space_layer_kernel.xhtml">NEBatchToSpaceLayerKernel</a> / <a class="el" href="classarm__compute_1_1_n_e_batch_to_space_layer.xhtml">NEBatchToSpaceLayer</a></li>
<li>NEComplexPixelWiseMultiplicationKernel / <a class="el" href="classarm__compute_1_1_n_e_complex_pixel_wise_multiplication.xhtml">NEComplexPixelWiseMultiplication</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_crop_kernel.xhtml">NECropKernel</a> / <a class="el" href="classarm__compute_1_1_n_e_crop_resize.xhtml">NECropResize</a></li>
<li>NEDepthwiseConvolutionAssemblyDispatch</li>
<li><a class="el" href="classarm__compute_1_1_n_e_f_f_t_digit_reverse_kernel.xhtml">NEFFTDigitReverseKernel</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_f_f_t_radix_stage_kernel.xhtml">NEFFTRadixStageKernel</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_f_f_t_scale_kernel.xhtml">NEFFTScaleKernel</a></li>
<li>NEGEMMLowpOffsetContributionOutputStageKernel</li>
<li>NEHeightConcatenateLayerKernel</li>
<li><a class="el" href="classarm__compute_1_1_n_e_space_to_batch_layer_kernel.xhtml">NESpaceToBatchLayerKernel</a> / <a class="el" href="classarm__compute_1_1_n_e_space_to_batch_layer.xhtml">NESpaceToBatchLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_f_f_t1_d.xhtml">NEFFT1D</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_f_f_t2_d.xhtml">NEFFT2D</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_f_f_t_convolution_layer.xhtml">NEFFTConvolutionLayer</a></li>
</ul>
</li>
<li>New OpenCL kernels / functions:<ul>
<li>CLComplexPixelWiseMultiplicationKernel / <a class="el" href="classarm__compute_1_1_c_l_complex_pixel_wise_multiplication.xhtml">CLComplexPixelWiseMultiplication</a></li>
<li>CLCropKernel / <a class="el" href="classarm__compute_1_1_c_l_crop_resize.xhtml">CLCropResize</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_deconvolution_reshape_output_kernel.xhtml">CLDeconvolutionReshapeOutputKernel</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_f_f_t_digit_reverse_kernel.xhtml">CLFFTDigitReverseKernel</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_f_f_t_radix_stage_kernel.xhtml">CLFFTRadixStageKernel</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_f_f_t_scale_kernel.xhtml">CLFFTScaleKernel</a></li>
<li>CLGEMMLowpMatrixMultiplyReshapedOnlyRHSKernel</li>
<li>CLGEMMMatrixMultiplyReshapedOnlyRHSKernel</li>
<li>CLHeightConcatenateLayerKernel</li>
<li><a class="el" href="classarm__compute_1_1_c_l_direct_deconvolution_layer.xhtml">CLDirectDeconvolutionLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_f_f_t1_d.xhtml">CLFFT1D</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_f_f_t2_d.xhtml">CLFFT2D</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_f_f_t_convolution_layer.xhtml">CLFFTConvolutionLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_deconvolution_layer.xhtml">CLGEMMDeconvolutionLayer</a></li>
</ul>
</li>
<li>New OpenGLES kernels / functions:<ul>
<li>GCConcatenateLayer</li>
</ul>
</li>
<li>Deprecated functions/interfaces<ul>
<li>GCDepthConcatenateLayer</li>
<li>NEWidthConcatenateLayer</li>
<li>NEDepthConcatenateLayer</li>
<li>CLWidthConcatenateLayer</li>
<li>CLDepthConcatenateLayer</li>
<li>CLGEMMInterleave4x4</li>
<li>CLGEMMTranspose1xW</li>
</ul>
</li>
<li>Support different quantization info in CLConcatLayer.</li>
<li>Add checks on different input/output quantization info were not supported.</li>
<li>Tensors have different quantization information.</li>
<li>Add FP16 support checks.</li>
<li>Fix output quantization CLDeptwiseConv3x3 when activation is fused.</li>
<li>New graph examples:<ul>
<li>graph_convolution</li>
<li>graph_fully_connected</li>
<li>graph_depthwise_convolution</li>
<li>Deepspeech v0.4.1</li>
</ul>
</li>
<li>Add support for QASYMM8 in NEArithmeticSubtractionKernel.</li>
<li>Add support for QASYMM8 in NEPixelWiseMultiplicationKernel.</li>
<li>Add support for QASYMM8 NEDeconvolution.</li>
<li>Add support for DequantizationLayer for Neon/CL.</li>
<li>Add support for dilation in CLDepthwiseConvolution.</li>
<li>Fuse offset contribution with the output stage when we use <a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_lowp_matrix_multiply_core.xhtml" title="Function to run Gemm on quantized types.">NEGEMMLowpMatrixMultiplyCore</a>.</li>
<li>Optimize CLDeconvolution.</li>
<li>Add StackLayer to the graph API.</li>
<li>Add support for "reflect" padding mode in NEPad.</li>
<li>Winograd 7x7 NHWC on OpenCL.</li>
<li>Rework CL ML layers to run exclusively on CL.</li>
<li>Support different quantization info in PoolingLayer.</li>
<li>Implement and test import memory interfaces.</li>
<li>Added new tests and removed old ones.</li>
<li>Various clang-tidy fixes.</li>
</ul>
<p>v19.02 Public major release</p><ul>
<li>Various bug fixes.</li>
<li>Various optimisations.</li>
<li>New Arm® Neon™ kernels / functions:<ul>
<li><a class="el" href="classarm__compute_1_1_n_e_tile_kernel.xhtml">NETileKernel</a> / <a class="el" href="classarm__compute_1_1_n_e_tile.xhtml">NETile</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_fuse_batch_normalization_kernel.xhtml">NEFuseBatchNormalizationKernel</a> / <a class="el" href="classarm__compute_1_1_n_e_fuse_batch_normalization.xhtml">NEFuseBatchNormalization</a></li>
<li>NEElementwiseOperationKernel</li>
<li><a class="el" href="classarm__compute_1_1_n_e_elementwise_max.xhtml">NEElementwiseMax</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_elementwise_min.xhtml">NEElementwiseMin</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_elementwise_squared_diff.xhtml">NEElementwiseSquaredDiff</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_select_kernel.xhtml">NESelectKernel</a> / <a class="el" href="classarm__compute_1_1_n_e_select.xhtml">NESelect</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_split.xhtml">NESplit</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_slice.xhtml">NESlice</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_unstack.xhtml">NEUnstack</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_strided_slice_kernel.xhtml">NEStridedSliceKernel</a> / <a class="el" href="classarm__compute_1_1_n_e_strided_slice.xhtml">NEStridedSlice</a></li>
<li>NEElementwiseUnaryKernel</li>
<li><a class="el" href="namespacearm__compute.xhtml#a6e94a7fdb862b6e539ec43ebf76b257b">NERsqrtLayer</a></li>
<li><a class="el" href="namespacearm__compute.xhtml#a4f7d99d5165740d6e36200eadfc9263c">NEExpLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_reverse_kernel.xhtml">NEReverseKernel</a> / <a class="el" href="classarm__compute_1_1_n_e_reverse.xhtml">NEReverse</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_arg_min_max_layer.xhtml">NEArgMinMaxLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_stack_layer_kernel.xhtml">NEStackLayerKernel</a> / <a class="el" href="classarm__compute_1_1_n_e_stack_layer.xhtml">NEStackLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_range_kernel.xhtml">NERangeKernel</a> / <a class="el" href="classarm__compute_1_1_n_e_range.xhtml">NERange</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_pad_layer.xhtml">NEPadLayer</a></li>
<li>NEMemsetKernel</li>
<li><a class="el" href="classarm__compute_1_1_n_e_gather_kernel.xhtml">NEGatherKernel</a> / <a class="el" href="classarm__compute_1_1_n_e_gather.xhtml">NEGather</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_elementwise_comparison.xhtml">NEElementwiseComparison</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_elementwise_comparison_static.xhtml">NEElementwiseComparisonStatic</a></li>
<li>NEComparisonOperationKernel</li>
<li><a class="el" href="classarm__compute_1_1_n_e_elementwise_division.xhtml">NEElementwiseDivision</a></li>
</ul>
</li>
<li>New OpenCL kernels / functions:<ul>
<li><a class="el" href="classarm__compute_1_1_c_l_select_kernel.xhtml">CLSelectKernel</a> / <a class="el" href="classarm__compute_1_1_c_l_select.xhtml">CLSelect</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_tile_kernel.xhtml">CLTileKernel</a> / <a class="el" href="classarm__compute_1_1_c_l_tile.xhtml">CLTile</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_comparison_kernel.xhtml">CLComparisonKernel</a> / <a class="el" href="classarm__compute_1_1_c_l_comparison.xhtml">CLComparison</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_arg_min_max_layer.xhtml">CLArgMinMaxLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_elementwise_max.xhtml">CLElementwiseMax</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_elementwise_min.xhtml">CLElementwiseMin</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_elementwise_squared_diff.xhtml">CLElementwiseSquaredDiff</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_stack_layer_kernel.xhtml">CLStackLayerKernel</a> / <a class="el" href="classarm__compute_1_1_c_l_stack_layer.xhtml">CLStackLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_reverse.xhtml">CLReverse</a> / <a class="el" href="classarm__compute_1_1_c_l_reverse_kernel.xhtml">CLReverseKernel</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_rsqrt_layer.xhtml">CLRsqrtLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_exp_layer.xhtml">CLExpLayer</a></li>
<li>CLElementWiseUnaryLayerKernel</li>
<li>CLGEMMReshapeLHSMatrixKernel</li>
<li>CLGEMMReshapeRHSMatrixKernel</li>
<li>CLGEMMMatrixMultiplyReshapedKernel</li>
<li><a class="el" href="classarm__compute_1_1_c_l_range_kernel.xhtml">CLRangeKernel</a> / <a class="el" href="classarm__compute_1_1_c_l_range.xhtml">CLRange</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_unstack.xhtml">CLUnstack</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_gather_kernel.xhtml">CLGatherKernel</a> / <a class="el" href="classarm__compute_1_1_c_l_gather.xhtml">CLGather</a></li>
<li>CLGEMMLowpMatrixMultiplyReshapedKernel</li>
</ul>
</li>
<li>New CPP kernels / functions:<ul>
<li><a class="el" href="classarm__compute_1_1_c_p_p_detection_output_layer.xhtml">CPPDetectionOutputLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_c_p_p_top_k_v.xhtml">CPPTopKV</a> / <a class="el" href="classarm__compute_1_1_c_p_p_top_k_v_kernel.xhtml">CPPTopKVKernel</a></li>
</ul>
</li>
<li>Added new examples:<ul>
<li><a class="el" href="graph__ssd__mobilenet_8cpp.xhtml">graph_ssd_mobilenet.cpp</a></li>
<li><a class="el" href="graph__mobilenet__v2_8cpp.xhtml">graph_mobilenet_v2.cpp</a></li>
<li><a class="el" href="graph__resnet12_8cpp.xhtml">graph_resnet12.cpp</a></li>
<li><a class="el" href="graph__srcnn955_8cpp.xhtml">graph_srcnn955.cpp</a></li>
<li><a class="el" href="graph__vgg__vdsr_8cpp.xhtml">graph_vgg_vdsr.cpp</a></li>
<li><a class="el" href="graph__inception__resnet__v1_8cpp.xhtml">graph_inception_resnet_v1.cpp</a></li>
</ul>
</li>
<li>Add 4D tensors support to<ul>
<li><a class="el" href="namespacearm__compute.xhtml#a4df2143ca0a3bdbbbc54b440a52541cd">NESoftmaxLayer</a></li>
</ul>
</li>
<li>Fused activation in <a class="el" href="classarm__compute_1_1_c_l_winograd_convolution_layer.xhtml">CLWinogradConvolutionLayer</a></li>
<li>Extended <a class="el" href="classarm__compute_1_1_n_e_permute.xhtml">NEPermute</a> to support more cases</li>
<li>Added Neon™/SVE GEMM Hybrid kernels</li>
<li>Added u8 and s8 hybrid assembly kernels</li>
<li>Introduced GEMM strategy name in NEGEMMAssemblyWrapper</li>
<li>Improved <a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml">CLTuner</a></li>
<li>Fused the bias addition within <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml">CLGEMM</a></li>
<li>Added support for QASYMM8 LOGISTIC activation in <a class="el" href="classarm__compute_1_1_n_e_activation_layer.xhtml">NEActivationLayer</a></li>
<li>Added NHWC data layout support to:<ul>
<li><a class="el" href="classarm__compute_1_1_n_e_scale.xhtml">NEScale</a> for F16</li>
<li><a class="el" href="classarm__compute_1_1_c_l_normalization_layer.xhtml">CLNormalizationLayer</a> IN_MAP_2D for FP32/FP16</li>
<li><a class="el" href="classarm__compute_1_1_n_e_l2_normalize_layer.xhtml">NEL2NormalizeLayer</a> for FP32/FP16</li>
<li><a class="el" href="classarm__compute_1_1_n_e_normalization_layer.xhtml">NENormalizationLayer</a> IN_MAP_2D for FP32/FP16</li>
<li><a class="el" href="classarm__compute_1_1_c_l_r_o_i_align_layer.xhtml">CLROIAlignLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_generate_proposals_layer.xhtml">CLGenerateProposalsLayer</a></li>
</ul>
</li>
<li>Added QASYMM8 support to the following kernels:<ul>
<li>NEArithmeticAdditionKernel</li>
<li><a class="el" href="classarm__compute_1_1_n_e_scale.xhtml">NEScale</a></li>
</ul>
</li>
<li>Added new tests and improved validation and benchmarking suites.</li>
<li>Deprecated functions/interfaces<ul>
<li>Usage of inner_border_right and inner_border_top has been deprecated in <a class="el" href="classarm__compute_1_1_c_l_deconvolution_layer.xhtml">CLDeconvolutionLayer</a> and <a class="el" href="classarm__compute_1_1_n_e_deconvolution_layer.xhtml">NEDeconvolutionLayer</a></li>
</ul>
</li>
</ul>
<p>v18.11 Public major release</p><ul>
<li>Various bug fixes.</li>
<li>Various optimisations.</li>
<li>New Arm® Neon™ kernels / functions:<ul>
<li><a class="el" href="classarm__compute_1_1_n_e_channel_shuffle_layer.xhtml">NEChannelShuffleLayer</a> / <a class="el" href="classarm__compute_1_1_n_e_channel_shuffle_layer_kernel.xhtml">NEChannelShuffleLayerKernel</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_reduce_mean.xhtml">NEReduceMean</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_reorg_layer.xhtml">NEReorgLayer</a> / <a class="el" href="classarm__compute_1_1_n_e_reorg_layer_kernel.xhtml">NEReorgLayerKernel</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_prior_box_layer.xhtml">NEPriorBoxLayer</a> / <a class="el" href="classarm__compute_1_1_n_e_prior_box_layer_kernel.xhtml">NEPriorBoxLayerKernel</a></li>
<li>NEUpsampleLayer / NEUpsampleLayerKernel</li>
<li>NEYOLOLayer / NEYOLOLayerKernel</li>
</ul>
</li>
<li>New OpenCL kernels / functions:<ul>
<li><a class="el" href="classarm__compute_1_1_c_l_batch_to_space_layer.xhtml">CLBatchToSpaceLayer</a> / <a class="el" href="classarm__compute_1_1_c_l_batch_to_space_layer_kernel.xhtml">CLBatchToSpaceLayerKernel</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_bounding_box_transform.xhtml">CLBoundingBoxTransform</a> / <a class="el" href="classarm__compute_1_1_c_l_bounding_box_transform_kernel.xhtml">CLBoundingBoxTransformKernel</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_compute_all_anchors_kernel.xhtml">CLComputeAllAnchorsKernel</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_generate_proposals_layer.xhtml">CLGenerateProposalsLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_normalize_planar_y_u_v_layer.xhtml">CLNormalizePlanarYUVLayer</a> / <a class="el" href="classarm__compute_1_1_c_l_normalize_planar_y_u_v_layer_kernel.xhtml">CLNormalizePlanarYUVLayerKernel</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_reorg_layer.xhtml">CLReorgLayer</a> / <a class="el" href="classarm__compute_1_1_c_l_reorg_layer_kernel.xhtml">CLReorgLayerKernel</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_space_to_batch_layer.xhtml">CLSpaceToBatchLayer</a> / <a class="el" href="classarm__compute_1_1_c_l_space_to_batch_layer_kernel.xhtml">CLSpaceToBatchLayerKernel</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_pad_layer.xhtml">CLPadLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_reduce_mean.xhtml">CLReduceMean</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_prior_box_layer.xhtml">CLPriorBoxLayer</a> / <a class="el" href="classarm__compute_1_1_c_l_prior_box_layer_kernel.xhtml">CLPriorBoxLayerKernel</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_r_o_i_align_layer.xhtml">CLROIAlignLayer</a> / <a class="el" href="classarm__compute_1_1_c_l_r_o_i_align_layer_kernel.xhtml">CLROIAlignLayerKernel</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_slice.xhtml">CLSlice</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_split.xhtml">CLSplit</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_strided_slice.xhtml">CLStridedSlice</a> / <a class="el" href="classarm__compute_1_1_c_l_strided_slice_kernel.xhtml">CLStridedSliceKernel</a></li>
<li>CLUpsampleLayer / CLUpsampleLayerKernel</li>
<li>CLYOLOLayer / CLYOLOLayerKernel</li>
</ul>
</li>
<li>New CPP kernels / functions:<ul>
<li><a class="el" href="classarm__compute_1_1_c_p_p_box_with_non_maxima_suppression_limit.xhtml">CPPBoxWithNonMaximaSuppressionLimit</a> / <a class="el" href="classarm__compute_1_1_c_p_p_box_with_non_maxima_suppression_limit_kernel.xhtml">CPPBoxWithNonMaximaSuppressionLimitKernel</a></li>
</ul>
</li>
<li>Added the validate method in:<ul>
<li><a class="el" href="classarm__compute_1_1_n_e_depth_convert_layer.xhtml">NEDepthConvertLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_floor.xhtml">NEFloor</a> / <a class="el" href="classarm__compute_1_1_c_l_floor.xhtml">CLFloor</a></li>
<li>NEGEMMMatrixAdditionKernel</li>
<li><a class="el" href="classarm__compute_1_1_n_e_reshape_layer.xhtml">NEReshapeLayer</a> / <a class="el" href="classarm__compute_1_1_c_l_reshape_layer.xhtml">CLReshapeLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_scale.xhtml">CLScale</a></li>
</ul>
</li>
<li>Added new examples:<ul>
<li><a class="el" href="graph__shufflenet_8cpp.xhtml">graph_shufflenet.cpp</a></li>
<li><a class="el" href="graph__yolov3_8cpp.xhtml">graph_yolov3.cpp</a></li>
</ul>
</li>
<li>Added documentation for add a new function or kernel.</li>
<li>Improved doxygen documentation adding a list of the existing functions.</li>
<li>Add 4D tensors support to<ul>
<li>CLWidthConcatenateLayer</li>
<li><a class="el" href="classarm__compute_1_1_c_l_flatten_layer.xhtml" title="Basic function to execute flatten.">CLFlattenLayer</a></li>
<li><a class="el" href="namespacearm__compute.xhtml#a30ce3b40394b4f2d1e4cc31db7183425">CLSoftmaxLayer</a></li>
</ul>
</li>
<li>Add dot product support for CLDepthwiseConvolutionLayer3x3NHWCKernel non-unit stride</li>
<li>Add SVE support</li>
<li>Fused batch normalization into convolution layer weights in <a class="el" href="classarm__compute_1_1_c_l_fuse_batch_normalization.xhtml">CLFuseBatchNormalization</a></li>
<li>Fuses activation in CLDepthwiseConvolutionLayer3x3NCHWKernel, CLDepthwiseConvolutionLayer3x3NHWCKernel and <a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_convolution_layer.xhtml">NEGEMMConvolutionLayer</a></li>
<li>Added NHWC data layout support to:<ul>
<li><a class="el" href="classarm__compute_1_1_c_l_channel_shuffle_layer.xhtml">CLChannelShuffleLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_deconvolution_layer.xhtml">CLDeconvolutionLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_l2_normalize_layer.xhtml">CLL2NormalizeLayer</a></li>
</ul>
</li>
<li>Added QASYMM8 support to the following kernels:<ul>
<li>CLScaleKernel</li>
<li>NEDepthwiseConvolutionLayer3x3Kernel</li>
<li>CLPixelWiseMultiplicationKernel</li>
</ul>
</li>
<li>Added FP16 support to the following kernels:<ul>
<li>CLDepthwiseConvolutionLayer3x3NHWCKernel</li>
<li>NEDepthwiseConvolutionLayer3x3Kernel</li>
<li><a class="el" href="classarm__compute_1_1_c_l_normalize_planar_y_u_v_layer_kernel.xhtml">CLNormalizePlanarYUVLayerKernel</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_winograd_convolution_layer.xhtml">CLWinogradConvolutionLayer</a> (5x5 kernel)</li>
</ul>
</li>
<li>More tests added to both validation and benchmarking suites.</li>
</ul>
<p>v18.08 Public major release</p><ul>
<li>Various bug fixes.</li>
<li>Various optimisations.</li>
<li>Updated recommended NDK version to r17b.</li>
<li>Removed support for QS8/QS16 data types.</li>
<li>Added support for grouped convolution in <a class="el" href="classarm__compute_1_1_c_l_convolution_layer.xhtml">CLConvolutionLayer</a>.</li>
<li>Added NHWC data layout support to:<ul>
<li>NEDepthConcatenateLayer / CLDepthConcatenateLayer</li>
<li><a class="el" href="classarm__compute_1_1_n_e_winograd_convolution_layer.xhtml">NEWinogradConvolutionLayer</a> / <a class="el" href="classarm__compute_1_1_c_l_winograd_convolution_layer.xhtml">CLWinogradConvolutionLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_depthwise_convolution_layer.xhtml">CLDepthwiseConvolutionLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_direct_convolution_layer.xhtml">CLDirectConvolutionLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_convolution_layer.xhtml">CLConvolutionLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_scale.xhtml">CLScale</a></li>
<li>CLIm2ColKernel</li>
</ul>
</li>
<li>New Arm® Neon™ kernels / functions:<ul>
<li><a class="el" href="classarm__compute_1_1_n_e_r_n_n_layer.xhtml">NERNNLayer</a></li>
</ul>
</li>
<li>New OpenCL kernels / functions:<ul>
<li><a class="el" href="classarm__compute_1_1_c_l_arithmetic_division.xhtml">CLArithmeticDivision</a></li>
</ul>
</li>
<li>Introduced prepare() stage support in the graph API for GLES.</li>
<li>Added support for memory reusage when trying to allocate smaller CLTensors.</li>
<li>Enabled NHWC execution on graph examples.</li>
<li>Added JPEG accessor for validation purposes.</li>
<li>Added validate methods to some kernels / functions.</li>
</ul>
<p>v18.05 Public major release</p><ul>
<li>Various bug fixes.</li>
<li>Various optimisations.</li>
<li>Major redesign in the interface for the Neon™ kernels implemented in assembly.</li>
<li>Removed arm_compute::NEGEMMLowpAArch64A53Kernel / arm_compute::NEGEMMLowpAArch64Kernel / arm_compute::NEGEMMLowpAArch64V8P4Kernel / arm_compute::NEGEMMInterleavedBlockedKernel / arm_compute::NEGEMMLowpAssemblyMatrixMultiplyCore / arm_compute::NEHGEMMAArch64FP16Kernel</li>
<li>Added NEGEMMAssemblyWrapper and AssemblyKernelGlue which are used to execute assembly kernels in Neon™ functions.</li>
<li>Minor changes to the <a class="el" href="classarm__compute_1_1_c_p_u_info.xhtml">CPUInfo</a> type to make it compatible with the new assembly gemm interface.</li>
<li>Moved Neon™ assembly kernels to the folder src/core/Neon/kernels/arm_gemm.</li>
<li>Improved doxygen documentation.</li>
<li>Improved memory management for layer's transitions.</li>
<li>Added support for NHWC data layout in tensors.</li>
<li>Added NHWC data layout support to:<ul>
<li><a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_convolution_layer.xhtml">NEGEMMConvolutionLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_direct_convolution_layer.xhtml">NEDirectConvolutionLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_pooling_layer.xhtml">NEPoolingLayer</a> / <a class="el" href="classarm__compute_1_1_c_l_pooling_layer.xhtml">CLPoolingLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_batch_normalization_layer.xhtml">NEBatchNormalizationLayer</a> / <a class="el" href="classarm__compute_1_1_c_l_batch_normalization_layer.xhtml">CLBatchNormalizationLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_depthwise_convolution_layer.xhtml">NEDepthwiseConvolutionLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_scale.xhtml">NEScale</a></li>
<li>NEIm2Col</li>
</ul>
</li>
<li>Added support for dilated convolutions in <a class="el" href="classarm__compute_1_1_n_e_convolution_layer.xhtml">NEConvolutionLayer</a> and <a class="el" href="classarm__compute_1_1_c_l_convolution_layer.xhtml">CLConvolutionLayer</a>.</li>
<li>New OpenCL kernels / functions:<ul>
<li><a class="el" href="classarm__compute_1_1_c_l_channel_shuffle_layer.xhtml">CLChannelShuffleLayer</a> / <a class="el" href="classarm__compute_1_1_c_l_channel_shuffle_layer_kernel.xhtml">CLChannelShuffleLayerKernel</a></li>
<li>CLConvertFullyConnectedWeightsKernel / <a class="el" href="classarm__compute_1_1_c_l_convert_fully_connected_weights.xhtml">CLConvertFullyConnectedWeights</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_copy.xhtml">CLCopy</a> / CLCopyKernel</li>
<li><a class="el" href="classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml">CLLSTMLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_r_n_n_layer.xhtml">CLRNNLayer</a></li>
<li>CLWidthConcatenateLayer / CLWidthConcatenateLayerKernel</li>
<li>CLWinogradFilterTransformKernel / <a class="el" href="classarm__compute_1_1_c_l_winograd_convolution_layer.xhtml">CLWinogradConvolutionLayer</a></li>
<li>CLWinogradInputTransformKernel / CLWinogradInputTransform</li>
</ul>
</li>
<li>New Arm® Neon™ kernels / functions:<ul>
<li>NEConvertFullyConnectedWeightsKernel / <a class="el" href="classarm__compute_1_1_n_e_convert_fully_connected_weights.xhtml">NEConvertFullyConnectedWeights</a>.</li>
</ul>
</li>
<li>Created the validate method in <a class="el" href="classarm__compute_1_1_c_l_depthwise_convolution_layer.xhtml">CLDepthwiseConvolutionLayer</a>.</li>
<li>Beta and gamma are no longer mandatory arguments in <a class="el" href="classarm__compute_1_1_n_e_batch_normalization_layer.xhtml">NEBatchNormalizationLayer</a> and <a class="el" href="classarm__compute_1_1_c_l_batch_normalization_layer.xhtml">CLBatchNormalizationLayer</a>.</li>
<li>Added depth multiplier support in <a class="el" href="classarm__compute_1_1_n_e_depthwise_convolution_layer.xhtml">NEDepthwiseConvolutionLayer</a> and <a class="el" href="classarm__compute_1_1_c_l_depthwise_convolution_layer.xhtml">CLDepthwiseConvolutionLayer</a>.</li>
<li>Added broadcast multiply support in <a class="el" href="classarm__compute_1_1_n_e_pixel_wise_multiplication.xhtml">NEPixelWiseMultiplication</a> / NEPixelWiseMultiplicationKernel.</li>
<li>Port mobilenet example to NHWC data layout.</li>
<li>Enabled Winograd method in <a class="el" href="classarm__compute_1_1_c_l_convolution_layer.xhtml">CLConvolutionLayer</a>.</li>
<li>Renamed NEWinogradLayer to <a class="el" href="classarm__compute_1_1_n_e_winograd_convolution_layer.xhtml">NEWinogradConvolutionLayer</a>.</li>
<li>Updated <a class="el" href="classarm__compute_1_1_n_e_winograd_convolution_layer.xhtml">NEWinogradConvolutionLayer</a> to use highly optimised assembly kernels in src/core/Neon/kernels/arm_gemm.</li>
<li>Added memory manager support in GLES functions.</li>
<li>Major refactoring of the graph API.</li>
<li>Added GLES backend in the graph API.</li>
<li>Added support for the memory manager in the graph API.</li>
<li>Enabled Winograd Convolution method in the graph API.</li>
<li>Added support for grouped convolutions in the graph API.</li>
<li>Replaced NEDeconvolutionLayerUpsampleKernel with NEScaleKernel in <a class="el" href="classarm__compute_1_1_n_e_deconvolution_layer.xhtml">NEDeconvolutionLayer</a>.</li>
<li>Added fast maths flag in <a class="el" href="classarm__compute_1_1_c_l_convolution_layer.xhtml">CLConvolutionLayer</a>.</li>
<li>Added new tests and benchmarks in validation and benchmark frameworks</li>
<li>Merge Activation layer with Convolution Layer (Neon™, CL, GLES)</li>
<li>Added support to OpenCL 2.0 SVM</li>
<li>Added support to import memory in OpenCL tensors.</li>
<li>Added the prepare() method to perform any one off pre-processing before running the function.</li>
<li>Added new examples:<ul>
<li><a class="el" href="graph__inception__v4_8cpp.xhtml">graph_inception_v4.cpp</a></li>
<li><a class="el" href="graph__resnext50_8cpp.xhtml">graph_resnext50.cpp</a></li>
</ul>
</li>
<li>Added memory measurement instrument for CL.</li>
</ul>
<p>v18.03 Public maintenance release</p><ul>
<li>Various bug fixes.</li>
<li>Fixed bug in <a class="el" href="classarm__compute_1_1_n_e_activation_layer.xhtml">NEActivationLayer</a></li>
<li>Fix in <a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml">CLTuner</a> when using batches.</li>
<li>Updated recommended NDK version to r16b (And fixed warnings).</li>
<li>Fixed bug in validation code.</li>
<li>Added Inception v4 graph example.</li>
<li>Renamed NEWinogradLayer.cpp to <a class="el" href="classarm__compute_1_1_n_e_winograd_convolution_layer.xhtml">NEWinogradConvolutionLayer</a></li>
</ul>
<p>v18.02 Public major release</p><ul>
<li>Various Arm® Neon™ / OpenCL / GLES optimisations.</li>
<li>Various bug fixes.</li>
<li>Changed default number of threads on big LITTLE systems.</li>
<li>Refactored examples and added:<ul>
<li>graph_mobilenet_qassym8</li>
<li>graph_resnet</li>
<li>graph_squeezenet_v1_1</li>
</ul>
</li>
<li>Renamed <a class="el" href="classarm__compute_1_1_c_l_convolution_layer.xhtml">CLConvolutionLayer</a> into <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_convolution_layer.xhtml">CLGEMMConvolutionLayer</a> and created a new <a class="el" href="classarm__compute_1_1_c_l_convolution_layer.xhtml">CLConvolutionLayer</a> to select the fastest convolution method.</li>
<li>Renamed <a class="el" href="classarm__compute_1_1_n_e_convolution_layer.xhtml">NEConvolutionLayer</a> into <a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_convolution_layer.xhtml">NEGEMMConvolutionLayer</a> and created a new <a class="el" href="classarm__compute_1_1_n_e_convolution_layer.xhtml">NEConvolutionLayer</a> to select the fastest convolution method.</li>
<li>Added in place support to:<ul>
<li><a class="el" href="classarm__compute_1_1_c_l_activation_layer.xhtml">CLActivationLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_batch_normalization_layer.xhtml">CLBatchNormalizationLayer</a></li>
</ul>
</li>
<li>Added QASYMM8 support to:<ul>
<li><a class="el" href="classarm__compute_1_1_c_l_activation_layer.xhtml">CLActivationLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_depthwise_convolution_layer.xhtml">CLDepthwiseConvolutionLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_depthwise_convolution_layer.xhtml">NEDepthwiseConvolutionLayer</a></li>
<li><a class="el" href="namespacearm__compute.xhtml#a4df2143ca0a3bdbbbc54b440a52541cd">NESoftmaxLayer</a></li>
</ul>
</li>
<li>Added FP16 support to:<ul>
<li>CLDepthwiseConvolutionLayer3x3</li>
<li><a class="el" href="classarm__compute_1_1_c_l_depthwise_convolution_layer.xhtml">CLDepthwiseConvolutionLayer</a></li>
</ul>
</li>
<li>Added broadcasting support to <a class="el" href="classarm__compute_1_1_n_e_arithmetic_addition.xhtml" title="Basic function to run cpu::kernels::CpuAddKernel.">NEArithmeticAddition</a> / <a class="el" href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml">CLArithmeticAddition</a> / <a class="el" href="classarm__compute_1_1_c_l_pixel_wise_multiplication.xhtml">CLPixelWiseMultiplication</a></li>
<li>Added fused batched normalization and activation to <a class="el" href="classarm__compute_1_1_c_l_batch_normalization_layer.xhtml">CLBatchNormalizationLayer</a> and <a class="el" href="classarm__compute_1_1_n_e_batch_normalization_layer.xhtml">NEBatchNormalizationLayer</a></li>
<li>Added support for non-square pooling to <a class="el" href="classarm__compute_1_1_n_e_pooling_layer.xhtml">NEPoolingLayer</a> and <a class="el" href="classarm__compute_1_1_c_l_pooling_layer.xhtml">CLPoolingLayer</a></li>
<li>New OpenCL kernels / functions:<ul>
<li>CLDirectConvolutionLayerOutputStageKernel</li>
</ul>
</li>
<li>New Arm® Neon™ kernels / functions<ul>
<li>Added <a class="el" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name()</a> method to all kernels.</li>
<li>Added support for Winograd 5x5.</li>
<li>NEPermuteKernel / <a class="el" href="classarm__compute_1_1_n_e_permute.xhtml">NEPermute</a></li>
<li>CpuWinogradConv2dTransformInputKernel / NEWinogradLayer</li>
<li>CpuWinogradConv2dTransformOutputKernel / NEWinogradLayer</li>
<li>CpuWinogradConv2dTransformWeightsKernel / NEWinogradLayer</li>
<li>Renamed NEWinogradLayerKernel into NEWinogradLayerBatchedGEMMKernel</li>
</ul>
</li>
<li>New GLES kernels / functions:<ul>
<li>GCTensorShiftKernel / GCTensorShift</li>
</ul>
</li>
</ul>
<p>v18.01 Public maintenance release</p><ul>
<li>Various bug fixes</li>
<li>Added some of the missing <a class="el" href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">validate()</a> methods</li>
<li>Added <a class="el" href="classarm__compute_1_1_c_l_deconvolution_layer_upsample_kernel.xhtml">CLDeconvolutionLayerUpsampleKernel</a> / <a class="el" href="classarm__compute_1_1_c_l_deconvolution_layer.xhtml">CLDeconvolutionLayer</a> <a class="el" href="classarm__compute_1_1_c_l_deconvolution_layer_upsample.xhtml">CLDeconvolutionLayerUpsample</a></li>
<li>Added CLPermuteKernel / <a class="el" href="classarm__compute_1_1_c_l_permute.xhtml">CLPermute</a></li>
<li>Added method to clean the programs cache in the CL <a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> library.</li>
<li>Added GCArithmeticAdditionKernel / GCArithmeticAddition</li>
<li>Added GCDepthwiseConvolutionLayer3x3Kernel / GCDepthwiseConvolutionLayer3x3</li>
<li>Added GCNormalizePlanarYUVLayerKernel / GCNormalizePlanarYUVLayer</li>
<li>Added GCScaleKernel / GCScale</li>
<li>Added GCWeightsReshapeKernel / GCConvolutionLayer</li>
<li>Added FP16 support to the following GLES compute kernels:<ul>
<li>GCCol2ImKernel</li>
<li>GCGEMMInterleave4x4Kernel</li>
<li>GCGEMMTranspose1xWKernel</li>
<li>GCIm2ColKernel</li>
</ul>
</li>
<li>Refactored Arm® Neon™ Winograd (NEWinogradLayerKernel)</li>
<li>Added NEDirectConvolutionLayerOutputStageKernel</li>
<li>Added QASYMM8 support to the following Arm® Neon™ kernels:<ul>
<li>NEDepthwiseConvolutionLayer3x3Kernel</li>
<li><a class="el" href="classarm__compute_1_1_n_e_fill_border_kernel.xhtml">NEFillBorderKernel</a></li>
<li>NEPoolingLayerKernel</li>
</ul>
</li>
<li>Added new examples:<ul>
<li>graph_cl_mobilenet_qasymm8.cpp</li>
<li><a class="el" href="graph__inception__v3_8cpp.xhtml">graph_inception_v3.cpp</a></li>
<li>gc_dc.cpp</li>
</ul>
</li>
<li>More tests added to both validation and benchmarking suites.</li>
</ul>
<p>v17.12 Public major release</p><ul>
<li>Most machine learning functions on OpenCL support the new data type QASYMM8</li>
<li>Introduced logging interface</li>
<li>Introduced opencl timer</li>
<li>Reworked GEMMLowp interface</li>
<li>Added new Arm® Neon™ assembly kernels for GEMMLowp, SGEMM and HGEMM</li>
<li>Added validation method for most Machine Learning kernels / functions</li>
<li>Added new graph examples such as googlenet, mobilenet, squeezenet, vgg16 and vgg19</li>
<li>Added sgemm example for OpenCL</li>
<li>Added absolute difference example for GLES compute</li>
<li>Added new tests and benchmarks in validation and benchmark frameworks</li>
<li>Added new kernels / functions for GLES compute</li>
<li>New OpenGL ES kernels / functions<ul>
<li>GCAbsoluteDifferenceKernel / GCAbsoluteDifference</li>
<li>GCActivationLayerKernel / GCActivationLayer</li>
<li>GCBatchNormalizationLayerKernel / GCBatchNormalizationLayer</li>
<li>GCCol2ImKernel</li>
<li>GCDepthConcatenateLayerKernel / GCDepthConcatenateLayer</li>
<li>GCDirectConvolutionLayerKernel / GCDirectConvolutionLayer</li>
<li>GCDropoutLayerKernel / GCDropoutLayer</li>
<li>GCFillBorderKernel / GCFillBorder</li>
<li>GCGEMMInterleave4x4Kernel / GCGEMMInterleave4x4</li>
<li>GCGEMMMatrixAccumulateBiasesKernel / GCGEMMMatrixAdditionKernel / GCGEMMMatrixMultiplyKernel / GCGEMM</li>
<li>GCGEMMTranspose1xWKernel / GCGEMMTranspose1xW</li>
<li>GCIm2ColKernel</li>
<li>GCNormalizationLayerKernel / GCNormalizationLayer</li>
<li>GCPixelWiseMultiplicationKernel / GCPixelWiseMultiplication</li>
<li>GCPoolingLayerKernel / GCPoolingLayer</li>
<li>GCLogits1DMaxKernel / GCLogits1DShiftExpSumKernel / GCLogits1DNormKernel / GCSoftmaxLayer</li>
<li>GCTransposeKernel / GCTranspose</li>
</ul>
</li>
<li>New Arm® Neon™ kernels / functions<ul>
<li>arm_compute::NEGEMMLowpAArch64A53Kernel / arm_compute::NEGEMMLowpAArch64Kernel / arm_compute::NEGEMMLowpAArch64V8P4Kernel / arm_compute::NEGEMMInterleavedBlockedKernel / arm_compute::NEGEMMLowpAssemblyMatrixMultiplyCore</li>
<li>arm_compute::NEHGEMMAArch64FP16Kernel</li>
<li>NEDepthwiseConvolutionLayer3x3Kernel / NEDepthwiseIm2ColKernel / NEGEMMMatrixVectorMultiplyKernel / NEDepthwiseVectorToTensorKernel / <a class="el" href="classarm__compute_1_1_n_e_depthwise_convolution_layer.xhtml">NEDepthwiseConvolutionLayer</a></li>
<li>NEGEMMLowpOffsetContributionKernel / NEGEMMLowpMatrixAReductionKernel / NEGEMMLowpMatrixBReductionKernel / <a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_lowp_matrix_multiply_core.xhtml" title="Function to run Gemm on quantized types.">NEGEMMLowpMatrixMultiplyCore</a></li>
<li>NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel / NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPoint</li>
<li>NEWinogradLayer / NEWinogradLayerKernel</li>
</ul>
</li>
<li>New OpenCL kernels / functions<ul>
<li>CLGEMMLowpOffsetContributionKernel / CLGEMMLowpMatrixAReductionKernel / CLGEMMLowpMatrixBReductionKernel / <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_multiply_core.xhtml" title="Basic function to execute GEMMLowpMatrixMultiplyCore on OpenCL.">CLGEMMLowpMatrixMultiplyCore</a></li>
<li>CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel / CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPoint</li>
</ul>
</li>
<li>New graph nodes for Arm® Neon™ and OpenCL<ul>
<li>graph::BranchLayer</li>
<li>graph::DepthConvertLayer</li>
<li>graph::DepthwiseConvolutionLayer</li>
<li>graph::DequantizationLayer</li>
<li>graph::FlattenLayer</li>
<li>graph::QuantizationLayer</li>
<li>graph::ReshapeLayer</li>
</ul>
</li>
</ul>
<p>v17.10 Public maintenance release</p><ul>
<li>Bug fixes:<ul>
<li>Check the maximum local workgroup size supported by OpenCL devices</li>
<li>Minor documentation updates (Fixed instructions to build the examples)</li>
<li>Introduced a <a class="el" href="classarm__compute_1_1graph_1_1_graph_context.xhtml" title="Graph context.">graph::GraphContext</a></li>
<li>Added a few new Graph nodes, support for branches and grouping.</li>
<li>Automatically enable cl_printf in debug builds</li>
<li>Fixed bare metal builds for armv7a</li>
<li>Added AlexNet and cartoon effect examples</li>
<li>Fixed library builds: libraries are no longer built as supersets of each other.(It means application using the Runtime part of the library now need to link against both libarm_compute_core and libarm_compute)</li>
</ul>
</li>
</ul>
<p>v17.09 Public major release</p><ul>
<li>Experimental Graph support: initial implementation of a simple stream API to easily chain machine learning layers.</li>
<li><a class="el" href="classarm__compute_1_1_memory.xhtml" title="CPU implementation of memory object.">Memory</a> Manager (<a class="el" href="classarm__compute_1_1_blob_lifetime_manager.xhtml">BlobLifetimeManager</a>, <a class="el" href="classarm__compute_1_1_blob_memory_pool.xhtml">BlobMemoryPool</a>, <a class="el" href="classarm__compute_1_1_i_lifetime_manager.xhtml">ILifetimeManager</a>, <a class="el" href="classarm__compute_1_1_i_memory_group.xhtml">IMemoryGroup</a>, <a class="el" href="classarm__compute_1_1_i_memory_manager.xhtml">IMemoryManager</a>, <a class="el" href="classarm__compute_1_1_i_memory_pool.xhtml">IMemoryPool</a>, <a class="el" href="classarm__compute_1_1_i_pool_manager.xhtml">IPoolManager</a>, <a class="el" href="classarm__compute_1_1_memory_manager_on_demand.xhtml">MemoryManagerOnDemand</a>, <a class="el" href="classarm__compute_1_1_pool_manager.xhtml">PoolManager</a>)</li>
<li>New validation and benchmark frameworks (Boost and Google frameworks replaced by homemade framework).</li>
<li>Most machine learning functions support both fixed point 8 and 16 bit (QS8, QS16) for both Arm® Neon™ and OpenCL.</li>
<li>New Arm® Neon™ kernels / functions:<ul>
<li>arm_compute::NEGEMMAssemblyBaseKernel arm_compute::NEGEMMAArch64Kernel</li>
<li>NEDequantizationLayerKernel / <a class="el" href="classarm__compute_1_1_n_e_dequantization_layer.xhtml">NEDequantizationLayer</a></li>
<li>NEFloorKernel / <a class="el" href="classarm__compute_1_1_n_e_floor.xhtml">NEFloor</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_l2_normalize_layer_kernel.xhtml">NEL2NormalizeLayerKernel</a> / <a class="el" href="classarm__compute_1_1_n_e_l2_normalize_layer.xhtml">NEL2NormalizeLayer</a></li>
<li>NEQuantizationLayerKernel NEMinMaxLayerKernel / <a class="el" href="classarm__compute_1_1_n_e_quantization_layer.xhtml">NEQuantizationLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_r_o_i_pooling_layer_kernel.xhtml">NEROIPoolingLayerKernel</a> / <a class="el" href="classarm__compute_1_1_n_e_r_o_i_pooling_layer.xhtml">NEROIPoolingLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_n_e_reduction_operation_kernel.xhtml">NEReductionOperationKernel</a> / <a class="el" href="classarm__compute_1_1_n_e_reduction_operation.xhtml">NEReductionOperation</a></li>
<li>NEReshapeLayerKernel / <a class="el" href="classarm__compute_1_1_n_e_reshape_layer.xhtml">NEReshapeLayer</a></li>
</ul>
</li>
<li>New OpenCL kernels / functions:<ul>
<li>CLDepthwiseConvolutionLayer3x3NCHWKernel CLDepthwiseConvolutionLayer3x3NHWCKernel CLDepthwiseIm2ColKernel CLDepthwiseVectorToTensorKernel CLDepthwiseWeightsReshapeKernel / CLDepthwiseConvolutionLayer3x3 <a class="el" href="classarm__compute_1_1_c_l_depthwise_convolution_layer.xhtml">CLDepthwiseConvolutionLayer</a> CLDepthwiseSeparableConvolutionLayer</li>
<li>CLDequantizationLayerKernel / <a class="el" href="classarm__compute_1_1_c_l_dequantization_layer.xhtml" title="Basic function to run opencl::ClDequantize that dequantizes an input tensor.">CLDequantizationLayer</a></li>
<li>CLDirectConvolutionLayerKernel / <a class="el" href="classarm__compute_1_1_c_l_direct_convolution_layer.xhtml">CLDirectConvolutionLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_flatten_layer.xhtml" title="Basic function to execute flatten.">CLFlattenLayer</a></li>
<li>CLFloorKernel / <a class="el" href="classarm__compute_1_1_c_l_floor.xhtml">CLFloor</a></li>
<li>CLGEMMTranspose1xW</li>
<li>CLGEMMMatrixVectorMultiplyKernel</li>
<li><a class="el" href="classarm__compute_1_1_c_l_l2_normalize_layer_kernel.xhtml">CLL2NormalizeLayerKernel</a> / <a class="el" href="classarm__compute_1_1_c_l_l2_normalize_layer.xhtml">CLL2NormalizeLayer</a></li>
<li>CLQuantizationLayerKernel CLMinMaxLayerKernel / <a class="el" href="classarm__compute_1_1_c_l_quantization_layer.xhtml">CLQuantizationLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_r_o_i_pooling_layer_kernel.xhtml">CLROIPoolingLayerKernel</a> / <a class="el" href="classarm__compute_1_1_c_l_r_o_i_pooling_layer.xhtml">CLROIPoolingLayer</a></li>
<li><a class="el" href="classarm__compute_1_1_c_l_reduction_operation_kernel.xhtml">CLReductionOperationKernel</a> / <a class="el" href="classarm__compute_1_1_c_l_reduction_operation.xhtml">CLReductionOperation</a></li>
<li>CLReshapeLayerKernel / <a class="el" href="classarm__compute_1_1_c_l_reshape_layer.xhtml">CLReshapeLayer</a></li>
</ul>
</li>
</ul>
<p>v17.06 Public major release</p><ul>
<li>Various bug fixes</li>
<li>Added support for fixed point 8 bit (QS8) to the various Arm® Neon™ machine learning kernels.</li>
<li>Added unit tests and benchmarks (AlexNet, LeNet)</li>
<li>Added support for sub tensors.</li>
<li>Added infrastructure to provide GPU specific optimisation for some OpenCL kernels.</li>
<li>Added <a class="el" href="classarm__compute_1_1_o_m_p_scheduler.xhtml">OMPScheduler</a> (OpenMP) scheduler for Neon</li>
<li>Added <a class="el" href="classarm__compute_1_1_single_thread_scheduler.xhtml">SingleThreadScheduler</a> scheduler for Arm® Neon™ (For bare metal)</li>
<li>User can specify their own scheduler by implementing the <a class="el" href="classarm__compute_1_1_i_scheduler.xhtml">IScheduler</a> interface.</li>
<li>New OpenCL kernels / functions:<ul>
<li><a class="el" href="classarm__compute_1_1_c_l_batch_normalization_layer_kernel.xhtml">CLBatchNormalizationLayerKernel</a> / <a class="el" href="classarm__compute_1_1_c_l_batch_normalization_layer.xhtml">CLBatchNormalizationLayer</a></li>
<li>CLDepthConcatenateLayerKernel / CLDepthConcatenateLayer</li>
<li>CLHOGOrientationBinningKernel CLHOGBlockNormalizationKernel, CLHOGDetectorKernel / CLHOGDescriptor CLHOGDetector CLHOGGradient CLHOGMultiDetection</li>
<li>CLLocallyConnectedMatrixMultiplyKernel / CLLocallyConnectedLayer</li>
<li>CLWeightsReshapeKernel / CLConvolutionLayerReshapeWeights</li>
</ul>
</li>
<li>New C++ kernels:<ul>
<li>CPPDetectionWindowNonMaximaSuppressionKernel</li>
</ul>
</li>
<li>New Arm® Neon™ kernels / functions:<ul>
<li><a class="el" href="classarm__compute_1_1_n_e_batch_normalization_layer_kernel.xhtml">NEBatchNormalizationLayerKernel</a> / <a class="el" href="classarm__compute_1_1_n_e_batch_normalization_layer.xhtml">NEBatchNormalizationLayer</a></li>
<li>NEDepthConcatenateLayerKernel / NEDepthConcatenateLayer</li>
<li>NEDirectConvolutionLayerKernel / <a class="el" href="classarm__compute_1_1_n_e_direct_convolution_layer.xhtml">NEDirectConvolutionLayer</a></li>
<li>NELocallyConnectedMatrixMultiplyKernel / NELocallyConnectedLayer</li>
<li>NEWeightsReshapeKernel / NEConvolutionLayerReshapeWeights</li>
</ul>
</li>
</ul>
<p>v17.05 Public bug fixes release</p><ul>
<li>Various bug fixes</li>
<li>Remaining of the functions ported to use accurate padding.</li>
<li>Library does not link against OpenCL anymore (It uses dlopen / dlsym at runtime instead to determine whether or not OpenCL is available).</li>
<li>Added "free" method to allocator.</li>
<li>Minimum version of g++ required for armv7 Linux changed from 4.8 to 4.9</li>
</ul>
<p>v17.04 Public bug fixes release</p>
<p>The following functions have been ported to use the new accurate padding:</p><ul>
<li>CLColorConvertKernel</li>
<li>CLEdgeNonMaxSuppressionKernel</li>
<li>CLEdgeTraceKernel</li>
<li>CLGaussianPyramidHorKernel</li>
<li>CLGaussianPyramidVertKernel</li>
<li>CLGradientKernel</li>
<li>NEChannelCombineKernel</li>
<li>NEFillArrayKernel</li>
<li>NEGaussianPyramidHorKernel</li>
<li>NEGaussianPyramidVertKernel</li>
<li>NEHarrisScoreFP16Kernel</li>
<li>NEHarrisScoreKernel</li>
<li>NEHOGDetectorKernel</li>
<li>NELogits1DMaxKernel</li>
<li>NELogits1DShiftExpSumKernel</li>
<li>NELogits1DNormKernel</li>
<li>NENonMaximaSuppression3x3FP16Kernel</li>
<li>NENonMaximaSuppression3x3Kernel</li>
</ul>
<p>v17.03.1 First Major public release of the sources</p><ul>
<li>Renamed the library to <a class="el" href="namespacearm__compute.xhtml" title="Copyright (c) 2017-2024 Arm Limited.">arm_compute</a></li>
<li>New CPP target introduced for C++ kernels shared between Arm® Neon™ and CL functions.</li>
<li>New padding calculation interface introduced and ported most kernels / functions to use it.</li>
<li>New OpenCL kernels / functions:<ul>
<li>CLGEMMLowpMatrixMultiplyKernel / CLGEMMLowp</li>
</ul>
</li>
<li>New Arm® Neon™ kernels / functions:<ul>
<li><a class="el" href="classarm__compute_1_1_n_e_normalization_layer_kernel.xhtml">NENormalizationLayerKernel</a> / <a class="el" href="classarm__compute_1_1_n_e_normalization_layer.xhtml">NENormalizationLayer</a></li>
<li>NETransposeKernel / <a class="el" href="classarm__compute_1_1_n_e_transpose.xhtml">NETranspose</a></li>
<li>NELogits1DMaxKernel, NELogits1DShiftExpSumKernel, NELogits1DNormKernel / <a class="el" href="namespacearm__compute.xhtml#a4df2143ca0a3bdbbbc54b440a52541cd">NESoftmaxLayer</a></li>
<li>NEIm2ColKernel, <a class="el" href="classarm__compute_1_1_n_e_col2_im_kernel.xhtml" title="Kernel to perform col2im reshaping.">NECol2ImKernel</a>, NEConvolutionLayerWeightsReshapeKernel / <a class="el" href="classarm__compute_1_1_n_e_convolution_layer.xhtml">NEConvolutionLayer</a></li>
<li>NEGEMMMatrixAccumulateBiasesKernel / <a class="el" href="classarm__compute_1_1_n_e_fully_connected_layer.xhtml">NEFullyConnectedLayer</a></li>
<li>NEGEMMLowpMatrixMultiplyKernel / NEGEMMLowp</li>
</ul>
</li>
</ul>
<p>v17.03 Sources preview</p><ul>
<li>New OpenCL kernels / functions:<ul>
<li>CLGradientKernel, CLEdgeNonMaxSuppressionKernel, CLEdgeTraceKernel / CLCannyEdge</li>
<li>GEMM refactoring + FP16 support: CLGEMMInterleave4x4Kernel, CLGEMMTranspose1xWKernel, CLGEMMMatrixMultiplyKernel, CLGEMMMatrixAdditionKernel / <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml">CLGEMM</a></li>
<li>CLGEMMMatrixAccumulateBiasesKernel / <a class="el" href="classarm__compute_1_1_c_l_fully_connected_layer.xhtml">CLFullyConnectedLayer</a></li>
<li>CLTransposeKernel / <a class="el" href="classarm__compute_1_1_c_l_transpose.xhtml">CLTranspose</a></li>
<li>CLLKTrackerInitKernel, CLLKTrackerStage0Kernel, CLLKTrackerStage1Kernel, CLLKTrackerFinalizeKernel / CLOpticalFlow</li>
<li><a class="el" href="classarm__compute_1_1_c_l_normalization_layer_kernel.xhtml">CLNormalizationLayerKernel</a> / <a class="el" href="classarm__compute_1_1_c_l_normalization_layer.xhtml">CLNormalizationLayer</a></li>
<li>CLLaplacianPyramid, CLLaplacianReconstruct</li>
</ul>
</li>
<li>New Arm® Neon™ kernels / functions:<ul>
<li>NEActivationLayerKernel / <a class="el" href="classarm__compute_1_1_n_e_activation_layer.xhtml">NEActivationLayer</a></li>
<li>GEMM refactoring + FP16 support (Requires armv8.2 CPU): NEGEMMInterleave4x4Kernel, NEGEMMTranspose1xWKernel, NEGEMMMatrixMultiplyKernel, NEGEMMMatrixAdditionKernel / <a class="el" href="classarm__compute_1_1_n_e_g_e_m_m.xhtml">NEGEMM</a></li>
<li>NEPoolingLayerKernel / <a class="el" href="classarm__compute_1_1_n_e_pooling_layer.xhtml">NEPoolingLayer</a></li>
</ul>
</li>
</ul>
<p>v17.02.1 Sources preview</p><ul>
<li>New OpenCL kernels / functions:<ul>
<li>CLLogits1DMaxKernel, CLLogits1DShiftExpSumKernel, CLLogits1DNormKernel / <a class="el" href="namespacearm__compute.xhtml#a30ce3b40394b4f2d1e4cc31db7183425">CLSoftmaxLayer</a></li>
<li>CLPoolingLayerKernel / <a class="el" href="classarm__compute_1_1_c_l_pooling_layer.xhtml">CLPoolingLayer</a></li>
<li>CLIm2ColKernel, CLCol2ImKernel, CLConvolutionLayerWeightsReshapeKernel / <a class="el" href="classarm__compute_1_1_c_l_convolution_layer.xhtml" title="Basic function to compute the convolution layer.">CLConvolutionLayer</a></li>
<li>CLRemapKernel / CLRemap</li>
<li>CLGaussianPyramidHorKernel, CLGaussianPyramidVertKernel / CLGaussianPyramid, CLGaussianPyramidHalf, CLGaussianPyramidOrb</li>
<li>CLMinMaxKernel, CLMinMaxLocationKernel / CLMinMaxLocation</li>
<li>CLNonLinearFilterKernel / CLNonLinearFilter</li>
</ul>
</li>
<li>New Arm® Neon™ FP16 kernels (Requires armv8.2 CPU)<ul>
<li>NEAccumulateWeightedFP16Kernel</li>
<li>NEBox3x3FP16Kernel</li>
<li>NENonMaximaSuppression3x3FP16Kernel</li>
</ul>
</li>
</ul>
<p>v17.02 Sources preview</p><ul>
<li>New OpenCL kernels / functions:<ul>
<li>CLActivationLayerKernel / <a class="el" href="classarm__compute_1_1_c_l_activation_layer.xhtml">CLActivationLayer</a></li>
<li>CLChannelCombineKernel / CLChannelCombine</li>
<li>CLDerivativeKernel / CLChannelExtract</li>
<li>CLFastCornersKernel / CLFastCorners</li>
<li>CLMeanStdDevKernel / CLMeanStdDev</li>
</ul>
</li>
<li>New Arm® Neon™ kernels / functions:<ul>
<li>HOG / SVM: NEHOGOrientationBinningKernel, NEHOGBlockNormalizationKernel, NEHOGDetectorKernel, NEHOGNonMaximaSuppressionKernel / NEHOGDescriptor, NEHOGDetector, NEHOGGradient, NEHOGMultiDetection</li>
<li>NENonLinearFilterKernel / NENonLinearFilter</li>
</ul>
</li>
<li>Introduced a <a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml" title="Provides global access to a CL context and command queue.">CLScheduler</a> to manage the default context and command queue used by the runtime library and create synchronisation events.</li>
<li>Switched all the kernels / functions to use tensors instead of images.</li>
<li>Updated documentation to include instructions to build the library from sources.</li>
</ul>
<p>v16.12 Binary preview release</p><ul>
<li>Original release </li>
</ul>
</div></div><!-- contents -->
</div><!-- PageDoc -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="footer">Generated on Mon Jun 17 2024 15:11:26 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
