<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/runtime/CL/functions/CLElementwiseOperations.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.06</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('runtime_2_c_l_2functions_2_cl_elementwise_operations_8cpp_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">CLElementwiseOperations.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="runtime_2_c_l_2functions_2_cl_elementwise_operations_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2018-2021 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2runtime_2_c_l_2functions_2_c_l_elementwise_operations_8h.xhtml">arm_compute/runtime/CL/functions/CLElementwiseOperations.h</a>&quot;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160; </div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_c_l_2_c_l_kernel_library_8h.xhtml">arm_compute/core/CL/CLKernelLibrary.h</a>&quot;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_c_l_tensor_8h.xhtml">arm_compute/core/CL/ICLTensor.h</a>&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_types_8h.xhtml">arm_compute/core/Types.h</a>&quot;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160; </div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="core_2_c_l_2_i_c_l_kernel_8h.xhtml">src/core/CL/ICLKernel.h</a>&quot;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_cl_add_8h.xhtml">src/gpu/cl/operators/ClAdd.h</a>&quot;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="src_2gpu_2cl_2operators_2_c_l_elementwise_operations_8h.xhtml">src/gpu/cl/operators/ClElementwiseOperations.h</a>&quot;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_cl_sub_8h.xhtml">src/gpu/cl/operators/ClSub.h</a>&quot;</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160; </div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">struct </span>CLArithmeticAddition::Impl</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keyword">const</span> ICLTensor               *src_0{<span class="keyword">nullptr</span>};</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keyword">const</span> ICLTensor               *src_1{<span class="keyword">nullptr</span>};</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    ICLTensor                     *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>{<span class="keyword">nullptr</span>};</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    std::unique_ptr&lt;opencl::ClAdd&gt; op{<span class="keyword">nullptr</span>};</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;};</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160; </div>
<div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml#a2b16a4d7e362db7ef443fbff50659647">   45</a></span>&#160;<a class="code" href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml#a2b16a4d7e362db7ef443fbff50659647">CLArithmeticAddition::CLArithmeticAddition</a>() : _impl(std::make_unique&lt;Impl&gt;())</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;}</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<a class="code" href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml#a2b16a4d7e362db7ef443fbff50659647">CLArithmeticAddition::CLArithmeticAddition</a>(<a class="code" href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml">CLArithmeticAddition</a> &amp;&amp;)            = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<a class="code" href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml">CLArithmeticAddition</a> &amp;<a class="code" href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml#a391d7d83a303439bbd16449dbd927f05">CLArithmeticAddition::operator=</a>(<a class="code" href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml">CLArithmeticAddition</a> &amp;&amp;) = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<a class="code" href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml#a691869fed62743e19d736eec083d96ed">CLArithmeticAddition::~CLArithmeticAddition</a>()                                  = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml#ab511d21db900edbc211d24bc77901b73">   52</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml#ab511d21db900edbc211d24bc77901b73">CLArithmeticAddition::configure</a>(</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *input1, <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *input2, <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *output, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> policy, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>)</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;{</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml#ab511d21db900edbc211d24bc77901b73">configure</a>(<a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">CLKernelLibrary::get</a>().get_compile_context(), input1, input2, output, policy, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>);</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;}</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160; </div>
<div class="line"><a name="l00058"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml#a19dc790c7ae9f23de480112b0b37f48f">   58</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml#ab511d21db900edbc211d24bc77901b73">CLArithmeticAddition::configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_l_compile_context.xhtml">CLCompileContext</a>    &amp;compile_context,</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                                     <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>           *input1,</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;                                     <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>           *input2,</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                                     <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>                 *output,</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                                     <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>              policy,</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                                     <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>)</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;{</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    _impl-&gt;src_0 = input1;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    _impl-&gt;src_1 = input2;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    _impl-&gt;dst   = output;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    _impl-&gt;op    = std::make_unique&lt;opencl::ClAdd&gt;();</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    _impl-&gt;op-&gt;configure(compile_context, input1-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), input2-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), policy, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>);</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;}</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160; </div>
<div class="line"><a name="l00072"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml#a5d4d1bdc6b902a7075b6850977a9ba7c">   72</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml#a5d4d1bdc6b902a7075b6850977a9ba7c">CLArithmeticAddition::validate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>         *input1,</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                                      <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>         *input2,</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                                      <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>         *output,</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                                      <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>              policy,</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                                      <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>)</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;{</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1opencl_1_1_cl_add.xhtml#ad40038cb4186cd521a2e0d1e9e02e9e2">opencl::ClAdd::validate</a>(input1, input2, output, policy, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>);</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;}</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160; </div>
<div class="line"><a name="l00081"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml#ad1717410afd0be936c6213a63c8005fb">   81</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml#ad1717410afd0be936c6213a63c8005fb">CLArithmeticAddition::run</a>()</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;{</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a6d8078b635739e84400cf8240a2993e7">add_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5">TensorType::ACL_SRC_0</a>, _impl-&gt;src_0);</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a6d8078b635739e84400cf8240a2993e7">add_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0">TensorType::ACL_SRC_1</a>, _impl-&gt;src_1);</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a6d8078b635739e84400cf8240a2993e7">add_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2">TensorType::ACL_DST</a>, _impl-&gt;dst);</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160; </div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    _impl-&gt;op-&gt;run(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>);</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;}</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160; </div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="keyword">struct </span>CLArithmeticSubtraction::Impl</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;{</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>               *src_0{<span class="keyword">nullptr</span>};</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keyword">const</span> ICLTensor               *src_1{<span class="keyword">nullptr</span>};</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    ICLTensor                     *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>{<span class="keyword">nullptr</span>};</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    std::unique_ptr&lt;opencl::ClSub&gt; op{<span class="keyword">nullptr</span>};</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;};</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160; </div>
<div class="line"><a name="l00099"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_arithmetic_subtraction.xhtml#af75005682bc41836ee70b131e6bb3b9c">   99</a></span>&#160;<a class="code" href="classarm__compute_1_1_c_l_arithmetic_subtraction.xhtml#af75005682bc41836ee70b131e6bb3b9c">CLArithmeticSubtraction::CLArithmeticSubtraction</a>() : _impl(std::make_unique&lt;Impl&gt;())</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;{</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;}</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<a class="code" href="classarm__compute_1_1_c_l_arithmetic_subtraction.xhtml#af75005682bc41836ee70b131e6bb3b9c">CLArithmeticSubtraction::CLArithmeticSubtraction</a>(<a class="code" href="classarm__compute_1_1_c_l_arithmetic_subtraction.xhtml">CLArithmeticSubtraction</a> &amp;&amp;)            = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<a class="code" href="classarm__compute_1_1_c_l_arithmetic_subtraction.xhtml">CLArithmeticSubtraction</a> &amp;<a class="code" href="classarm__compute_1_1_c_l_arithmetic_subtraction.xhtml#a35651cdfea6fd6e86c189c17a080bfd3">CLArithmeticSubtraction::operator=</a>(<a class="code" href="classarm__compute_1_1_c_l_arithmetic_subtraction.xhtml">CLArithmeticSubtraction</a> &amp;&amp;) = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<a class="code" href="classarm__compute_1_1_c_l_arithmetic_subtraction.xhtml#a4a2e9dc9dc7938c493835ce4bb8d07e2">CLArithmeticSubtraction::~CLArithmeticSubtraction</a>()                                     = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160; </div>
<div class="line"><a name="l00106"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_arithmetic_subtraction.xhtml#a9b0d5b7cd931994262eddb786def724c">  106</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_arithmetic_subtraction.xhtml#a9b0d5b7cd931994262eddb786def724c">CLArithmeticSubtraction::configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>           *input1,</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                                        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>           *input2,</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                                        <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>                 *output,</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                                        <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>              policy,</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                                        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>)</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;{</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_arithmetic_subtraction.xhtml#a9b0d5b7cd931994262eddb786def724c">configure</a>(<a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">CLKernelLibrary::get</a>().get_compile_context(), input1, input2, output, policy, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>);</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;}</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160; </div>
<div class="line"><a name="l00115"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_arithmetic_subtraction.xhtml#a19dc790c7ae9f23de480112b0b37f48f">  115</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_arithmetic_subtraction.xhtml#a9b0d5b7cd931994262eddb786def724c">CLArithmeticSubtraction::configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_l_compile_context.xhtml">CLCompileContext</a>    &amp;compile_context,</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                                        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>           *input1,</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                                        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>           *input2,</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                                        <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>                 *output,</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                                        <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>              policy,</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                                        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>)</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;{</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    _impl-&gt;src_0 = input1;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    _impl-&gt;src_1 = input2;</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    _impl-&gt;dst   = output;</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    _impl-&gt;op    = std::make_unique&lt;opencl::ClSub&gt;();</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    _impl-&gt;op-&gt;configure(compile_context, input1-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), input2-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), policy, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>);</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;}</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160; </div>
<div class="line"><a name="l00129"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_arithmetic_subtraction.xhtml#a5d4d1bdc6b902a7075b6850977a9ba7c">  129</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="classarm__compute_1_1_c_l_arithmetic_subtraction.xhtml#a5d4d1bdc6b902a7075b6850977a9ba7c">CLArithmeticSubtraction::validate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>         *input1,</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>         *input2,</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>         *output,</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                                         <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>              policy,</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>)</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;{</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1opencl_1_1_cl_sub.xhtml#ad40038cb4186cd521a2e0d1e9e02e9e2">opencl::ClSub::validate</a>(input1, input2, output, policy, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>);</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;}</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160; </div>
<div class="line"><a name="l00138"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_arithmetic_subtraction.xhtml#ad1717410afd0be936c6213a63c8005fb">  138</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_arithmetic_subtraction.xhtml#ad1717410afd0be936c6213a63c8005fb">CLArithmeticSubtraction::run</a>()</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;{</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a6d8078b635739e84400cf8240a2993e7">add_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5">TensorType::ACL_SRC_0</a>, _impl-&gt;src_0);</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a6d8078b635739e84400cf8240a2993e7">add_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0">TensorType::ACL_SRC_1</a>, _impl-&gt;src_1);</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a6d8078b635739e84400cf8240a2993e7">add_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2">TensorType::ACL_DST</a>, _impl-&gt;dst);</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160; </div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    _impl-&gt;op-&gt;run(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>);</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;}</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160; </div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="keyword">struct </span>CLArithmeticDivision::Impl</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;{</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>                               *src_0{<span class="keyword">nullptr</span>};</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="keyword">const</span> ICLTensor                               *src_1{<span class="keyword">nullptr</span>};</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    ICLTensor                                     *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>{<span class="keyword">nullptr</span>};</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    std::unique_ptr&lt;opencl::ClElementwiseDivision&gt; op{<span class="keyword">nullptr</span>};</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;};</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160; </div>
<div class="line"><a name="l00156"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_arithmetic_division.xhtml#abef41c3cd733da14fca3c61c565b78fb">  156</a></span>&#160;<a class="code" href="classarm__compute_1_1_c_l_arithmetic_division.xhtml#abef41c3cd733da14fca3c61c565b78fb">CLArithmeticDivision::CLArithmeticDivision</a>() : _impl(std::make_unique&lt;Impl&gt;())</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;{</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;}</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<a class="code" href="classarm__compute_1_1_c_l_arithmetic_division.xhtml#abef41c3cd733da14fca3c61c565b78fb">CLArithmeticDivision::CLArithmeticDivision</a>(<a class="code" href="classarm__compute_1_1_c_l_arithmetic_division.xhtml">CLArithmeticDivision</a> &amp;&amp;)            = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<a class="code" href="classarm__compute_1_1_c_l_arithmetic_division.xhtml">CLArithmeticDivision</a> &amp;<a class="code" href="classarm__compute_1_1_c_l_arithmetic_division.xhtml#aac5c48f59131c5da160b59e875e5705f">CLArithmeticDivision::operator=</a>(<a class="code" href="classarm__compute_1_1_c_l_arithmetic_division.xhtml">CLArithmeticDivision</a> &amp;&amp;) = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<a class="code" href="classarm__compute_1_1_c_l_arithmetic_division.xhtml#a14191ee8ed5daf88b61f31cb31831ee2">CLArithmeticDivision::~CLArithmeticDivision</a>()                                  = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160; </div>
<div class="line"><a name="l00163"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_arithmetic_division.xhtml#aab2becc159953eabe02de58d41950b96">  163</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_arithmetic_division.xhtml#aab2becc159953eabe02de58d41950b96">CLArithmeticDivision::configure</a>(<a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>                 *input1,</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                                     <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>                 *input2,</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                                     <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>                 *output,</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                                     <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>)</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;{</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_arithmetic_division.xhtml#aab2becc159953eabe02de58d41950b96">configure</a>(<a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">CLKernelLibrary::get</a>().get_compile_context(), input1, input2, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>);</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;}</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160; </div>
<div class="line"><a name="l00171"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_arithmetic_division.xhtml#a57db27e87cb885479b7d4eac8d41a524">  171</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_arithmetic_division.xhtml#aab2becc159953eabe02de58d41950b96">CLArithmeticDivision::configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_l_compile_context.xhtml">CLCompileContext</a>    &amp;compile_context,</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                                     <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>           *input1,</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                                     <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>           *input2,</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                                     <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>                 *output,</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                                     <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>)</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;{</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    _impl-&gt;src_0 = input1;</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    _impl-&gt;src_1 = input2;</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    _impl-&gt;dst   = output;</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    _impl-&gt;op    = std::make_unique&lt;opencl::ClElementwiseDivision&gt;();</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    _impl-&gt;op-&gt;configure(compile_context, input1-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), input2-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>);</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;}</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160; </div>
<div class="line"><a name="l00184"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_arithmetic_division.xhtml#af26b2456f5c6fa0e1c8d69a13c74c6cb">  184</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="classarm__compute_1_1_c_l_arithmetic_division.xhtml#af26b2456f5c6fa0e1c8d69a13c74c6cb">CLArithmeticDivision::validate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>         *input1,</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                                      <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>         *input2,</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                                      <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>         *output,</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                                      <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>)</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;{</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1opencl_1_1_cl_elementwise_division.xhtml#a57e17edd3887729c1096c7b24e0e2412">opencl::ClElementwiseDivision::validate</a>(input1, input2, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>);</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;}</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160; </div>
<div class="line"><a name="l00192"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_arithmetic_division.xhtml#ad1717410afd0be936c6213a63c8005fb">  192</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_arithmetic_division.xhtml#ad1717410afd0be936c6213a63c8005fb">CLArithmeticDivision::run</a>()</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;{</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>;</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a6d8078b635739e84400cf8240a2993e7">add_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5">TensorType::ACL_SRC_0</a>, _impl-&gt;src_0);</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a6d8078b635739e84400cf8240a2993e7">add_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0">TensorType::ACL_SRC_1</a>, _impl-&gt;src_1);</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a6d8078b635739e84400cf8240a2993e7">add_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2">TensorType::ACL_DST</a>, _impl-&gt;dst);</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160; </div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    _impl-&gt;op-&gt;run(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>);</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;}</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160; </div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="keyword">struct </span>CLElementwiseMax::Impl</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;{</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>                          *src_0{<span class="keyword">nullptr</span>};</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="keyword">const</span> ICLTensor                          *src_1{<span class="keyword">nullptr</span>};</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    ICLTensor                                *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>{<span class="keyword">nullptr</span>};</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    std::unique_ptr&lt;opencl::ClElementwiseMax&gt; op{<span class="keyword">nullptr</span>};</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;};</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160; </div>
<div class="line"><a name="l00210"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_elementwise_max.xhtml#ab7f04698cdb16d5c4b5b5189487a5c67">  210</a></span>&#160;<a class="code" href="classarm__compute_1_1_c_l_elementwise_max.xhtml#ab7f04698cdb16d5c4b5b5189487a5c67">CLElementwiseMax::CLElementwiseMax</a>() : _impl(std::make_unique&lt;Impl&gt;())</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;{</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;}</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<a class="code" href="classarm__compute_1_1_c_l_elementwise_max.xhtml#ab7f04698cdb16d5c4b5b5189487a5c67">CLElementwiseMax::CLElementwiseMax</a>(<a class="code" href="classarm__compute_1_1_c_l_elementwise_max.xhtml">CLElementwiseMax</a> &amp;&amp;)            = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<a class="code" href="classarm__compute_1_1_c_l_elementwise_max.xhtml">CLElementwiseMax</a> &amp;<a class="code" href="classarm__compute_1_1_c_l_elementwise_max.xhtml#a9beec68f86229ca39e2a548b23627585">CLElementwiseMax::operator=</a>(<a class="code" href="classarm__compute_1_1_c_l_elementwise_max.xhtml">CLElementwiseMax</a> &amp;&amp;) = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<a class="code" href="classarm__compute_1_1_c_l_elementwise_max.xhtml#a862ea539e256c89247700485c51c0a98">CLElementwiseMax::~CLElementwiseMax</a>()                              = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160; </div>
<div class="line"><a name="l00217"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_elementwise_max.xhtml#aab2becc159953eabe02de58d41950b96">  217</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_elementwise_max.xhtml#aab2becc159953eabe02de58d41950b96">CLElementwiseMax::configure</a>(<a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>                 *input1,</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                                 <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>                 *input2,</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                                 <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>                 *output,</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                                 <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>)</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;{</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_elementwise_max.xhtml#aab2becc159953eabe02de58d41950b96">configure</a>(<a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">CLKernelLibrary::get</a>().get_compile_context(), input1, input2, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>);</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;}</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160; </div>
<div class="line"><a name="l00225"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_elementwise_max.xhtml#a0e3ec9eefda31243fc6f594e4d2771c9">  225</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_elementwise_max.xhtml#aab2becc159953eabe02de58d41950b96">CLElementwiseMax::configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_l_compile_context.xhtml">CLCompileContext</a>    &amp;compile_context,</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                                 <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>                 *input1,</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                                 <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>                 *input2,</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                                 <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>                 *output,</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                                 <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>)</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;{</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    _impl-&gt;src_0 = input1;</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    _impl-&gt;src_1 = input2;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    _impl-&gt;dst   = output;</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    _impl-&gt;op    = std::make_unique&lt;opencl::ClElementwiseMax&gt;();</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    _impl-&gt;op-&gt;configure(compile_context, input1-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), input2-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>);</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;}</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160; </div>
<div class="line"><a name="l00238"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_elementwise_max.xhtml#af26b2456f5c6fa0e1c8d69a13c74c6cb">  238</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="classarm__compute_1_1_c_l_elementwise_max.xhtml#af26b2456f5c6fa0e1c8d69a13c74c6cb">CLElementwiseMax::validate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>         *input1,</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                                  <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>         *input2,</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                                  <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>         *output,</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                                  <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>)</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;{</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1opencl_1_1_cl_elementwise_max.xhtml#a57e17edd3887729c1096c7b24e0e2412">opencl::ClElementwiseMax::validate</a>(input1, input2, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>);</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;}</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160; </div>
<div class="line"><a name="l00246"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_elementwise_max.xhtml#ad1717410afd0be936c6213a63c8005fb">  246</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_elementwise_max.xhtml#ad1717410afd0be936c6213a63c8005fb">CLElementwiseMax::run</a>()</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;{</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>;</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a6d8078b635739e84400cf8240a2993e7">add_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5">TensorType::ACL_SRC_0</a>, _impl-&gt;src_0);</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a6d8078b635739e84400cf8240a2993e7">add_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0">TensorType::ACL_SRC_1</a>, _impl-&gt;src_1);</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a6d8078b635739e84400cf8240a2993e7">add_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2">TensorType::ACL_DST</a>, _impl-&gt;dst);</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160; </div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    _impl-&gt;op-&gt;run(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>);</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;}</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160; </div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="keyword">struct </span>CLElementwiseMin::Impl</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;{</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>                          *src_0{<span class="keyword">nullptr</span>};</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keyword">const</span> ICLTensor                          *src_1{<span class="keyword">nullptr</span>};</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    ICLTensor                                *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>{<span class="keyword">nullptr</span>};</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    std::unique_ptr&lt;opencl::ClElementwiseMin&gt; op{<span class="keyword">nullptr</span>};</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;};</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160; </div>
<div class="line"><a name="l00264"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_elementwise_min.xhtml#a161f18e47c4278b0e46ccf3f228a1fe1">  264</a></span>&#160;<a class="code" href="classarm__compute_1_1_c_l_elementwise_min.xhtml#a161f18e47c4278b0e46ccf3f228a1fe1">CLElementwiseMin::CLElementwiseMin</a>() : _impl(std::make_unique&lt;Impl&gt;())</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;{</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;}</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<a class="code" href="classarm__compute_1_1_c_l_elementwise_min.xhtml#a161f18e47c4278b0e46ccf3f228a1fe1">CLElementwiseMin::CLElementwiseMin</a>(<a class="code" href="classarm__compute_1_1_c_l_elementwise_min.xhtml">CLElementwiseMin</a> &amp;&amp;)            = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<a class="code" href="classarm__compute_1_1_c_l_elementwise_min.xhtml">CLElementwiseMin</a> &amp;<a class="code" href="classarm__compute_1_1_c_l_elementwise_min.xhtml#ac290f1f2e255acc942987b1f3b5b5ce5">CLElementwiseMin::operator=</a>(<a class="code" href="classarm__compute_1_1_c_l_elementwise_min.xhtml">CLElementwiseMin</a> &amp;&amp;) = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<a class="code" href="classarm__compute_1_1_c_l_elementwise_min.xhtml#a60766816045864d8fbb0a9e63dac06b8">CLElementwiseMin::~CLElementwiseMin</a>()                              = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160; </div>
<div class="line"><a name="l00271"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_elementwise_min.xhtml#aab2becc159953eabe02de58d41950b96">  271</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_elementwise_min.xhtml#aab2becc159953eabe02de58d41950b96">CLElementwiseMin::configure</a>(<a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>                 *input1,</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                                 <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>                 *input2,</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                                 <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>                 *output,</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                                 <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>)</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;{</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_elementwise_min.xhtml#aab2becc159953eabe02de58d41950b96">configure</a>(<a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">CLKernelLibrary::get</a>().get_compile_context(), input1, input2, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>);</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;}</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160; </div>
<div class="line"><a name="l00279"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_elementwise_min.xhtml#a0e3ec9eefda31243fc6f594e4d2771c9">  279</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_elementwise_min.xhtml#aab2becc159953eabe02de58d41950b96">CLElementwiseMin::configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_l_compile_context.xhtml">CLCompileContext</a>    &amp;compile_context,</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                                 <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>                 *input1,</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;                                 <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>                 *input2,</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                                 <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>                 *output,</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                                 <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>)</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;{</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    _impl-&gt;src_0 = input1;</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    _impl-&gt;src_1 = input2;</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    _impl-&gt;dst   = output;</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    _impl-&gt;op    = std::make_unique&lt;opencl::ClElementwiseMin&gt;();</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    _impl-&gt;op-&gt;configure(compile_context, input1-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), input2-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>);</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;}</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160; </div>
<div class="line"><a name="l00292"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_elementwise_min.xhtml#af26b2456f5c6fa0e1c8d69a13c74c6cb">  292</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="classarm__compute_1_1_c_l_elementwise_min.xhtml#af26b2456f5c6fa0e1c8d69a13c74c6cb">CLElementwiseMin::validate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>         *input1,</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                                  <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>         *input2,</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                                  <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>         *output,</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                                  <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>)</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;{</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1opencl_1_1_cl_elementwise_min.xhtml#a57e17edd3887729c1096c7b24e0e2412">opencl::ClElementwiseMin::validate</a>(input1, input2, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>);</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;}</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160; </div>
<div class="line"><a name="l00300"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_elementwise_min.xhtml#ad1717410afd0be936c6213a63c8005fb">  300</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_elementwise_min.xhtml#ad1717410afd0be936c6213a63c8005fb">CLElementwiseMin::run</a>()</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;{</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>;</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a6d8078b635739e84400cf8240a2993e7">add_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5">TensorType::ACL_SRC_0</a>, _impl-&gt;src_0);</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a6d8078b635739e84400cf8240a2993e7">add_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0">TensorType::ACL_SRC_1</a>, _impl-&gt;src_1);</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a6d8078b635739e84400cf8240a2993e7">add_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2">TensorType::ACL_DST</a>, _impl-&gt;dst);</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160; </div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    _impl-&gt;op-&gt;run(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>);</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;}</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160; </div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="keyword">struct </span>CLElementwiseSquaredDiff::Impl</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;{</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>                                  *src_0{<span class="keyword">nullptr</span>};</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    <span class="keyword">const</span> ICLTensor                                  *src_1{<span class="keyword">nullptr</span>};</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    ICLTensor                                        *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>{<span class="keyword">nullptr</span>};</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    std::unique_ptr&lt;opencl::ClElementwiseSquaredDiff&gt; op{<span class="keyword">nullptr</span>};</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;};</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160; </div>
<div class="line"><a name="l00318"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_elementwise_squared_diff.xhtml#ae7963c6fce5b1133eb36913888e51400">  318</a></span>&#160;<a class="code" href="classarm__compute_1_1_c_l_elementwise_squared_diff.xhtml#ae7963c6fce5b1133eb36913888e51400">CLElementwiseSquaredDiff::CLElementwiseSquaredDiff</a>() : _impl(std::make_unique&lt;Impl&gt;())</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;{</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;}</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<a class="code" href="classarm__compute_1_1_c_l_elementwise_squared_diff.xhtml#ae7963c6fce5b1133eb36913888e51400">CLElementwiseSquaredDiff::CLElementwiseSquaredDiff</a>(<a class="code" href="classarm__compute_1_1_c_l_elementwise_squared_diff.xhtml">CLElementwiseSquaredDiff</a> &amp;&amp;)            = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;<a class="code" href="classarm__compute_1_1_c_l_elementwise_squared_diff.xhtml">CLElementwiseSquaredDiff</a> &amp;<a class="code" href="classarm__compute_1_1_c_l_elementwise_squared_diff.xhtml#a10c2331c4da098e2c5e6bcae399a33d8">CLElementwiseSquaredDiff::operator=</a>(<a class="code" href="classarm__compute_1_1_c_l_elementwise_squared_diff.xhtml">CLElementwiseSquaredDiff</a> &amp;&amp;) = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<a class="code" href="classarm__compute_1_1_c_l_elementwise_squared_diff.xhtml#a4106ae7ded12763665599f4e6223da6d">CLElementwiseSquaredDiff::~CLElementwiseSquaredDiff</a>()                                      = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160; </div>
<div class="line"><a name="l00325"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_elementwise_squared_diff.xhtml#aab2becc159953eabe02de58d41950b96">  325</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_elementwise_squared_diff.xhtml#aab2becc159953eabe02de58d41950b96">CLElementwiseSquaredDiff::configure</a>(<a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>                 *input1,</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;                                         <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>                 *input2,</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                                         <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>                 *output,</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>)</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;{</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_elementwise_squared_diff.xhtml#aab2becc159953eabe02de58d41950b96">configure</a>(<a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">CLKernelLibrary::get</a>().get_compile_context(), input1, input2, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>);</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;}</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160; </div>
<div class="line"><a name="l00333"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_elementwise_squared_diff.xhtml#a0e3ec9eefda31243fc6f594e4d2771c9">  333</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_elementwise_squared_diff.xhtml#aab2becc159953eabe02de58d41950b96">CLElementwiseSquaredDiff::configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_l_compile_context.xhtml">CLCompileContext</a>    &amp;compile_context,</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                                         <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>                 *input1,</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;                                         <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>                 *input2,</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                                         <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>                 *output,</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>)</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;{</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    _impl-&gt;src_0 = input1;</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    _impl-&gt;src_1 = input2;</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    _impl-&gt;dst   = output;</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    _impl-&gt;op    = std::make_unique&lt;opencl::ClElementwiseSquaredDiff&gt;();</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    _impl-&gt;op-&gt;configure(compile_context, input1-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), input2-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>);</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;}</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160; </div>
<div class="line"><a name="l00346"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_elementwise_squared_diff.xhtml#af26b2456f5c6fa0e1c8d69a13c74c6cb">  346</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="classarm__compute_1_1_c_l_elementwise_squared_diff.xhtml#af26b2456f5c6fa0e1c8d69a13c74c6cb">CLElementwiseSquaredDiff::validate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>         *input1,</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>         *input2,</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>         *output,</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>)</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;{</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1opencl_1_1_cl_elementwise_squared_diff.xhtml#a57e17edd3887729c1096c7b24e0e2412">opencl::ClElementwiseSquaredDiff::validate</a>(input1, input2, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>);</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;}</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160; </div>
<div class="line"><a name="l00354"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_elementwise_squared_diff.xhtml#ad1717410afd0be936c6213a63c8005fb">  354</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_elementwise_squared_diff.xhtml#ad1717410afd0be936c6213a63c8005fb">CLElementwiseSquaredDiff::run</a>()</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;{</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>;</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a6d8078b635739e84400cf8240a2993e7">add_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5">TensorType::ACL_SRC_0</a>, _impl-&gt;src_0);</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a6d8078b635739e84400cf8240a2993e7">add_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0">TensorType::ACL_SRC_1</a>, _impl-&gt;src_1);</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a6d8078b635739e84400cf8240a2993e7">add_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2">TensorType::ACL_DST</a>, _impl-&gt;dst);</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160; </div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    _impl-&gt;op-&gt;run(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>);</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;}</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160; </div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;<span class="keyword">struct </span>CLElementwisePower::Impl</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;{</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>                            *src_0{<span class="keyword">nullptr</span>};</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    <span class="keyword">const</span> ICLTensor                            *src_1{<span class="keyword">nullptr</span>};</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    ICLTensor                                  *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>{<span class="keyword">nullptr</span>};</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    std::unique_ptr&lt;opencl::ClElementwisePower&gt; op{<span class="keyword">nullptr</span>};</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;};</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160; </div>
<div class="line"><a name="l00372"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_elementwise_power.xhtml#ad31c312775c02d05a7528f9d1300e40f">  372</a></span>&#160;<a class="code" href="classarm__compute_1_1_c_l_elementwise_power.xhtml#ad31c312775c02d05a7528f9d1300e40f">CLElementwisePower::CLElementwisePower</a>() : _impl(std::make_unique&lt;Impl&gt;())</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;{</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;}</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;<a class="code" href="classarm__compute_1_1_c_l_elementwise_power.xhtml#ad31c312775c02d05a7528f9d1300e40f">CLElementwisePower::CLElementwisePower</a>(<a class="code" href="classarm__compute_1_1_c_l_elementwise_power.xhtml">CLElementwisePower</a> &amp;&amp;)            = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;<a class="code" href="classarm__compute_1_1_c_l_elementwise_power.xhtml">CLElementwisePower</a> &amp;<a class="code" href="classarm__compute_1_1_c_l_elementwise_power.xhtml#a27d4404cf5dfdc219978364a4e6f3fc2">CLElementwisePower::operator=</a>(<a class="code" href="classarm__compute_1_1_c_l_elementwise_power.xhtml">CLElementwisePower</a> &amp;&amp;) = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;<a class="code" href="classarm__compute_1_1_c_l_elementwise_power.xhtml#aba2676150578f8dadc626bdec7bd20e1">CLElementwisePower::~CLElementwisePower</a>()                                = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160; </div>
<div class="line"><a name="l00379"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_elementwise_power.xhtml#aab2becc159953eabe02de58d41950b96">  379</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_elementwise_power.xhtml#aab2becc159953eabe02de58d41950b96">CLElementwisePower::configure</a>(<a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>                 *input1,</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                                   <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>                 *input2,</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                                   <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>                 *output,</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                                   <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>)</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;{</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_elementwise_power.xhtml#aab2becc159953eabe02de58d41950b96">configure</a>(<a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">CLKernelLibrary::get</a>().get_compile_context(), input1, input2, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>);</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;}</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160; </div>
<div class="line"><a name="l00387"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_elementwise_power.xhtml#a0e3ec9eefda31243fc6f594e4d2771c9">  387</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_elementwise_power.xhtml#aab2becc159953eabe02de58d41950b96">CLElementwisePower::configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_l_compile_context.xhtml">CLCompileContext</a>    &amp;compile_context,</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                                   <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>                 *input1,</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                                   <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>                 *input2,</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                                   <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a>                 *output,</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                                   <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>)</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;{</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    _impl-&gt;src_0 = input1;</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    _impl-&gt;src_1 = input2;</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    _impl-&gt;dst   = output;</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    _impl-&gt;op    = std::make_unique&lt;opencl::ClElementwisePower&gt;();</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    _impl-&gt;op-&gt;configure(compile_context, input1-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), input2-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>);</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;}</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160; </div>
<div class="line"><a name="l00400"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_elementwise_power.xhtml#af26b2456f5c6fa0e1c8d69a13c74c6cb">  400</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="classarm__compute_1_1_c_l_elementwise_power.xhtml#af26b2456f5c6fa0e1c8d69a13c74c6cb">CLElementwisePower::validate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>         *input1,</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                                    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>         *input2,</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;                                    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>         *output,</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                                    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>)</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;{</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1opencl_1_1_cl_elementwise_power.xhtml#a57e17edd3887729c1096c7b24e0e2412">opencl::ClElementwisePower::validate</a>(input1, input2, output, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>);</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;}</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160; </div>
<div class="line"><a name="l00408"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_elementwise_power.xhtml#ad1717410afd0be936c6213a63c8005fb">  408</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_elementwise_power.xhtml#ad1717410afd0be936c6213a63c8005fb">CLElementwisePower::run</a>()</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;{</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>;</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a6d8078b635739e84400cf8240a2993e7">add_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5">TensorType::ACL_SRC_0</a>, _impl-&gt;src_0);</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a6d8078b635739e84400cf8240a2993e7">add_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0">TensorType::ACL_SRC_1</a>, _impl-&gt;src_1);</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a6d8078b635739e84400cf8240a2993e7">add_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2">TensorType::ACL_DST</a>, _impl-&gt;dst);</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160; </div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    _impl-&gt;op-&gt;run(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>);</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;}</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;} <span class="comment">// namespace arm_compute</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassarm__compute_1_1opencl_1_1_cl_add_xhtml_ad40038cb4186cd521a2e0d1e9e02e9e2"><div class="ttname"><a href="classarm__compute_1_1opencl_1_1_cl_add.xhtml#ad40038cb4186cd521a2e0d1e9e02e9e2">arm_compute::opencl::ClAdd::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *src1, const ITensorInfo *src2, const ITensorInfo *dst, ConvertPolicy policy, const ActivationLayerInfo &amp;act_info=ActivationLayerInfo())</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration.</div><div class="ttdef"><b>Definition:</b> <a href="_cl_add_8cpp_source.xhtml#l00047">ClAdd.cpp:47</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_elementwise_min_xhtml_aab2becc159953eabe02de58d41950b96"><div class="ttname"><a href="classarm__compute_1_1_c_l_elementwise_min.xhtml#aab2becc159953eabe02de58d41950b96">arm_compute::CLElementwiseMin::configure</a></div><div class="ttdeci">void configure(ICLTensor *input1, ICLTensor *input2, ICLTensor *output, const ActivationLayerInfo &amp;act_info=ActivationLayerInfo())</div><div class="ttdoc">Initialise the kernel's inputs, output and conversion policy.</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2functions_2_cl_elementwise_operations_8cpp_source.xhtml#l00271">CLElementwiseOperations.cpp:271</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_arithmetic_subtraction_xhtml_a9b0d5b7cd931994262eddb786def724c"><div class="ttname"><a href="classarm__compute_1_1_c_l_arithmetic_subtraction.xhtml#a9b0d5b7cd931994262eddb786def724c">arm_compute::CLArithmeticSubtraction::configure</a></div><div class="ttdeci">void configure(const ICLTensor *input1, const ICLTensor *input2, ICLTensor *output, ConvertPolicy policy, const ActivationLayerInfo &amp;act_info=ActivationLayerInfo())</div><div class="ttdoc">Initialise the kernel's inputs, output and conversion policy.</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2functions_2_cl_elementwise_operations_8cpp_source.xhtml#l00106">CLElementwiseOperations.cpp:106</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_elementwise_squared_diff_xhtml_a4106ae7ded12763665599f4e6223da6d"><div class="ttname"><a href="classarm__compute_1_1_c_l_elementwise_squared_diff.xhtml#a4106ae7ded12763665599f4e6223da6d">arm_compute::CLElementwiseSquaredDiff::~CLElementwiseSquaredDiff</a></div><div class="ttdeci">~CLElementwiseSquaredDiff()</div><div class="ttdoc">Default Destructor.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_arithmetic_addition_xhtml_ad1717410afd0be936c6213a63c8005fb"><div class="ttname"><a href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml#ad1717410afd0be936c6213a63c8005fb">arm_compute::CLArithmeticAddition::run</a></div><div class="ttdeci">void run() override</div><div class="ttdoc">Run the kernels contained in the function.</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2functions_2_cl_elementwise_operations_8cpp_source.xhtml#l00081">CLElementwiseOperations.cpp:81</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_elementwise_power_xhtml_aab2becc159953eabe02de58d41950b96"><div class="ttname"><a href="classarm__compute_1_1_c_l_elementwise_power.xhtml#aab2becc159953eabe02de58d41950b96">arm_compute::CLElementwisePower::configure</a></div><div class="ttdeci">void configure(ICLTensor *input1, ICLTensor *input2, ICLTensor *output, const ActivationLayerInfo &amp;act_info=ActivationLayerInfo())</div><div class="ttdoc">Initialise the kernel's inputs, output and conversion policy.</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2functions_2_cl_elementwise_operations_8cpp_source.xhtml#l00379">CLElementwiseOperations.cpp:379</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_arithmetic_subtraction_xhtml_a4a2e9dc9dc7938c493835ce4bb8d07e2"><div class="ttname"><a href="classarm__compute_1_1_c_l_arithmetic_subtraction.xhtml#a4a2e9dc9dc7938c493835ce4bb8d07e2">arm_compute::CLArithmeticSubtraction::~CLArithmeticSubtraction</a></div><div class="ttdeci">~CLArithmeticSubtraction()</div><div class="ttdoc">Default Destructor.</div></div>
<div class="ttc" id="a_i_c_l_tensor_8h_xhtml"><div class="ttname"><a href="_i_c_l_tensor_8h.xhtml">ICLTensor.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_elementwise_min_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_elementwise_min.xhtml">arm_compute::CLElementwiseMin</a></div><div class="ttdoc">Basic function to run opencl::kernels::ClArithmeticKernel for min.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2runtime_2_c_l_2functions_2_c_l_elementwise_operations_8h_source.xhtml#l00451">CLElementwiseOperations.h:451</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1opencl_1_1_cl_elementwise_max_xhtml_a57e17edd3887729c1096c7b24e0e2412"><div class="ttname"><a href="classarm__compute_1_1opencl_1_1_cl_elementwise_max.xhtml#a57e17edd3887729c1096c7b24e0e2412">arm_compute::opencl::ClElementwiseMax::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *src1, const ITensorInfo *src2, const ITensorInfo *dst, const ActivationLayerInfo &amp;act_info=ActivationLayerInfo())</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration.</div><div class="ttdef"><b>Definition:</b> <a href="gpu_2cl_2operators_2_cl_elementwise_operations_8cpp_source.xhtml#l00065">ClElementwiseOperations.cpp:65</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_elementwise_power_xhtml_af26b2456f5c6fa0e1c8d69a13c74c6cb"><div class="ttname"><a href="classarm__compute_1_1_c_l_elementwise_power.xhtml#af26b2456f5c6fa0e1c8d69a13c74c6cb">arm_compute::CLElementwisePower::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input1, const ITensorInfo *input2, const ITensorInfo *output, const ActivationLayerInfo &amp;act_info=ActivationLayerInfo())</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of opencl::kernels::ClArith...</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2functions_2_cl_elementwise_operations_8cpp_source.xhtml#l00400">CLElementwiseOperations.cpp:400</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1opencl_1_1_cl_sub_xhtml_ad40038cb4186cd521a2e0d1e9e02e9e2"><div class="ttname"><a href="classarm__compute_1_1opencl_1_1_cl_sub.xhtml#ad40038cb4186cd521a2e0d1e9e02e9e2">arm_compute::opencl::ClSub::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *src1, const ITensorInfo *src2, const ITensorInfo *dst, ConvertPolicy policy, const ActivationLayerInfo &amp;act_info=ActivationLayerInfo())</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration.</div><div class="ttdef"><b>Definition:</b> <a href="_cl_sub_8cpp_source.xhtml#l00047">ClSub.cpp:47</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_elementwise_squared_diff_xhtml_ae7963c6fce5b1133eb36913888e51400"><div class="ttname"><a href="classarm__compute_1_1_c_l_elementwise_squared_diff.xhtml#ae7963c6fce5b1133eb36913888e51400">arm_compute::CLElementwiseSquaredDiff::CLElementwiseSquaredDiff</a></div><div class="ttdeci">CLElementwiseSquaredDiff()</div><div class="ttdoc">Default Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2functions_2_cl_elementwise_operations_8cpp_source.xhtml#l00318">CLElementwiseOperations.cpp:318</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_types_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_elementwise_min_xhtml_ac290f1f2e255acc942987b1f3b5b5ce5"><div class="ttname"><a href="classarm__compute_1_1_c_l_elementwise_min.xhtml#ac290f1f2e255acc942987b1f3b5b5ce5">arm_compute::CLElementwiseMin::operator=</a></div><div class="ttdeci">CLElementwiseMin &amp; operator=(const CLElementwiseMin &amp;)=delete</div><div class="ttdoc">Prevent instances of this class from being copied (As this class contains pointers)</div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_c_l_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_tensor.xhtml">arm_compute::ICLTensor</a></div><div class="ttdoc">Interface for OpenCL tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_i_c_l_tensor_8h_source.xhtml#l00041">ICLTensor.h:41</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_arithmetic_division_xhtml_aac5c48f59131c5da160b59e875e5705f"><div class="ttname"><a href="classarm__compute_1_1_c_l_arithmetic_division.xhtml#aac5c48f59131c5da160b59e875e5705f">arm_compute::CLArithmeticDivision::operator=</a></div><div class="ttdeci">CLArithmeticDivision &amp; operator=(const CLArithmeticDivision &amp;)=delete</div><div class="ttdoc">Prevent instances of this class from being copied (As this class contains pointers)</div></div>
<div class="ttc" id="aclassarm__compute_1_1opencl_1_1_cl_elementwise_min_xhtml_a57e17edd3887729c1096c7b24e0e2412"><div class="ttname"><a href="classarm__compute_1_1opencl_1_1_cl_elementwise_min.xhtml#a57e17edd3887729c1096c7b24e0e2412">arm_compute::opencl::ClElementwiseMin::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *src1, const ITensorInfo *src2, const ITensorInfo *dst, const ActivationLayerInfo &amp;act_info=ActivationLayerInfo())</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration.</div><div class="ttdef"><b>Definition:</b> <a href="gpu_2cl_2operators_2_cl_elementwise_operations_8cpp_source.xhtml#l00085">ClElementwiseOperations.cpp:85</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_elementwise_power_xhtml_ad31c312775c02d05a7528f9d1300e40f"><div class="ttname"><a href="classarm__compute_1_1_c_l_elementwise_power.xhtml#ad31c312775c02d05a7528f9d1300e40f">arm_compute::CLElementwisePower::CLElementwisePower</a></div><div class="ttdeci">CLElementwisePower()</div><div class="ttdoc">Default Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2functions_2_cl_elementwise_operations_8cpp_source.xhtml#l00372">CLElementwiseOperations.cpp:372</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_elementwise_max_xhtml_af26b2456f5c6fa0e1c8d69a13c74c6cb"><div class="ttname"><a href="classarm__compute_1_1_c_l_elementwise_max.xhtml#af26b2456f5c6fa0e1c8d69a13c74c6cb">arm_compute::CLElementwiseMax::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input1, const ITensorInfo *input2, const ITensorInfo *output, const ActivationLayerInfo &amp;act_info=ActivationLayerInfo())</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of opencl::kernels::ClArith...</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2functions_2_cl_elementwise_operations_8cpp_source.xhtml#l00238">CLElementwiseOperations.cpp:238</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1opencl_1_1_cl_elementwise_power_xhtml_a57e17edd3887729c1096c7b24e0e2412"><div class="ttname"><a href="classarm__compute_1_1opencl_1_1_cl_elementwise_power.xhtml#a57e17edd3887729c1096c7b24e0e2412">arm_compute::opencl::ClElementwisePower::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *src1, const ITensorInfo *src2, const ITensorInfo *dst, const ActivationLayerInfo &amp;act_info=ActivationLayerInfo())</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration.</div><div class="ttdef"><b>Definition:</b> <a href="gpu_2cl_2operators_2_cl_elementwise_operations_8cpp_source.xhtml#l00125">ClElementwiseOperations.cpp:125</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_pack_xhtml_a6d8078b635739e84400cf8240a2993e7"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_pack.xhtml#a6d8078b635739e84400cf8240a2993e7">arm_compute::ITensorPack::add_tensor</a></div><div class="ttdeci">void add_tensor(int id, ITensor *tensor)</div><div class="ttdoc">Add tensor to the pack.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_pack_8cpp_source.xhtml#l00038">ITensorPack.cpp:38</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5">arm_compute::ACL_SRC_0</a></div><div class="ttdeci">@ ACL_SRC_0</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00045">Types.h:45</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_arithmetic_division_xhtml_af26b2456f5c6fa0e1c8d69a13c74c6cb"><div class="ttname"><a href="classarm__compute_1_1_c_l_arithmetic_division.xhtml#af26b2456f5c6fa0e1c8d69a13c74c6cb">arm_compute::CLArithmeticDivision::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input1, const ITensorInfo *input2, const ITensorInfo *output, const ActivationLayerInfo &amp;act_info=ActivationLayerInfo())</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CLArithmeticDivision.</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2functions_2_cl_elementwise_operations_8cpp_source.xhtml#l00184">CLElementwiseOperations.cpp:184</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0">arm_compute::ACL_SRC_1</a></div><div class="ttdeci">@ ACL_SRC_1</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00046">Types.h:46</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_arithmetic_division_xhtml_abef41c3cd733da14fca3c61c565b78fb"><div class="ttname"><a href="classarm__compute_1_1_c_l_arithmetic_division.xhtml#abef41c3cd733da14fca3c61c565b78fb">arm_compute::CLArithmeticDivision::CLArithmeticDivision</a></div><div class="ttdeci">CLArithmeticDivision()</div><div class="ttdoc">Default Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2functions_2_cl_elementwise_operations_8cpp_source.xhtml#l00156">CLElementwiseOperations.cpp:156</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_elementwise_max_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_elementwise_max.xhtml">arm_compute::CLElementwiseMax</a></div><div class="ttdoc">Basic function to run opencl::kernels::ClArithmeticKernel for max.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2runtime_2_c_l_2functions_2_c_l_elementwise_operations_8h_source.xhtml#l00365">CLElementwiseOperations.h:365</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_kernel_library_xhtml_acba005f5ce2c62cbf3f94d074d9007aa"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">arm_compute::CLKernelLibrary::get</a></div><div class="ttdeci">static CLKernelLibrary &amp; get()</div><div class="ttdoc">Access the KernelLibrary singleton.</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00041">CLKernelLibrary.cpp:41</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_elementwise_min_xhtml_a161f18e47c4278b0e46ccf3f228a1fe1"><div class="ttname"><a href="classarm__compute_1_1_c_l_elementwise_min.xhtml#a161f18e47c4278b0e46ccf3f228a1fe1">arm_compute::CLElementwiseMin::CLElementwiseMin</a></div><div class="ttdeci">CLElementwiseMin()</div><div class="ttdoc">Default Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2functions_2_cl_elementwise_operations_8cpp_source.xhtml#l00264">CLElementwiseOperations.cpp:264</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_c_l_2_c_l_kernel_library_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_c_l_2_c_l_kernel_library_8h.xhtml">CLKernelLibrary.h</a></div><div class="ttdoc">Manages all the OpenCL kernels compilation and caching, provides accessors for the OpenCL Context.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_activation_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml">arm_compute::ActivationLayerInfo</a></div><div class="ttdoc">Activation Layer Information class.</div><div class="ttdef"><b>Definition:</b> <a href="_activation_layer_info_8h_source.xhtml#l00061">ActivationLayerInfo.h:61</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a1f8aca235c095df227e7444f6b237eb1"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">arm_compute::test::validation::act_info</a></div><div class="ttdeci">act_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">DirectConvolutionLayer.cpp:547</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_elementwise_squared_diff_xhtml_af26b2456f5c6fa0e1c8d69a13c74c6cb"><div class="ttname"><a href="classarm__compute_1_1_c_l_elementwise_squared_diff.xhtml#af26b2456f5c6fa0e1c8d69a13c74c6cb">arm_compute::CLElementwiseSquaredDiff::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input1, const ITensorInfo *input2, const ITensorInfo *output, const ActivationLayerInfo &amp;act_info=ActivationLayerInfo())</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of opencl::kernels::ClArith...</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2functions_2_cl_elementwise_operations_8cpp_source.xhtml#l00346">CLElementwiseOperations.cpp:346</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_elementwise_max_xhtml_ad1717410afd0be936c6213a63c8005fb"><div class="ttname"><a href="classarm__compute_1_1_c_l_elementwise_max.xhtml#ad1717410afd0be936c6213a63c8005fb">arm_compute::CLElementwiseMax::run</a></div><div class="ttdeci">void run() override</div><div class="ttdoc">Run the kernels contained in the function.</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2functions_2_cl_elementwise_operations_8cpp_source.xhtml#l00246">CLElementwiseOperations.cpp:246</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_xhtml_a0e95dc1e53c361348314873b168ae237"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">arm_compute::ITensor::info</a></div><div class="ttdeci">virtual ITensorInfo * info() const =0</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor's metadata.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_arithmetic_addition_xhtml_a691869fed62743e19d736eec083d96ed"><div class="ttname"><a href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml#a691869fed62743e19d736eec083d96ed">arm_compute::CLArithmeticAddition::~CLArithmeticAddition</a></div><div class="ttdeci">~CLArithmeticAddition()</div><div class="ttdoc">Default Destructor.</div></div>
<div class="ttc" id="acore_2_c_l_2_i_c_l_kernel_8h_xhtml"><div class="ttname"><a href="core_2_c_l_2_i_c_l_kernel_8h.xhtml">ICLKernel.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_pack_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_pack.xhtml">arm_compute::ITensorPack</a></div><div class="ttdoc">Tensor packing service.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_pack_8h_source.xhtml#l00039">ITensorPack.h:39</a></div></div>
<div class="ttc" id="aarm__compute_2runtime_2_c_l_2functions_2_c_l_elementwise_operations_8h_xhtml"><div class="ttname"><a href="arm__compute_2runtime_2_c_l_2functions_2_c_l_elementwise_operations_8h.xhtml">CLElementwiseOperations.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_elementwise_power_xhtml_aba2676150578f8dadc626bdec7bd20e1"><div class="ttname"><a href="classarm__compute_1_1_c_l_elementwise_power.xhtml#aba2676150578f8dadc626bdec7bd20e1">arm_compute::CLElementwisePower::~CLElementwisePower</a></div><div class="ttdeci">~CLElementwisePower()</div><div class="ttdoc">Default Destructor.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_compile_context_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_compile_context.xhtml">arm_compute::CLCompileContext</a></div><div class="ttdoc">CLCompileContext class.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_c_l_2_c_l_compile_context_8h_source.xhtml#l00204">CLCompileContext.h:204</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_elementwise_max_xhtml_a9beec68f86229ca39e2a548b23627585"><div class="ttname"><a href="classarm__compute_1_1_c_l_elementwise_max.xhtml#a9beec68f86229ca39e2a548b23627585">arm_compute::CLElementwiseMax::operator=</a></div><div class="ttdeci">CLElementwiseMax &amp; operator=(const CLElementwiseMax &amp;)=delete</div><div class="ttdoc">Prevent instances of this class from being copied (As this class contains pointers)</div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_arithmetic_addition_xhtml_a391d7d83a303439bbd16449dbd927f05"><div class="ttname"><a href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml#a391d7d83a303439bbd16449dbd927f05">arm_compute::CLArithmeticAddition::operator=</a></div><div class="ttdeci">CLArithmeticAddition &amp; operator=(const CLArithmeticAddition &amp;)=delete</div><div class="ttdoc">Prevent instances of this class from being copied (As this class contains pointers)</div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_elementwise_max_xhtml_aab2becc159953eabe02de58d41950b96"><div class="ttname"><a href="classarm__compute_1_1_c_l_elementwise_max.xhtml#aab2becc159953eabe02de58d41950b96">arm_compute::CLElementwiseMax::configure</a></div><div class="ttdeci">void configure(ICLTensor *input1, ICLTensor *input2, ICLTensor *output, const ActivationLayerInfo &amp;act_info=ActivationLayerInfo())</div><div class="ttdoc">Initialise the kernel's inputs, output and conversion policy.</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2functions_2_cl_elementwise_operations_8cpp_source.xhtml#l00217">CLElementwiseOperations.cpp:217</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2">arm_compute::ACL_DST</a></div><div class="ttdeci">@ ACL_DST</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00055">Types.h:55</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_arithmetic_division_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_arithmetic_division.xhtml">arm_compute::CLArithmeticDivision</a></div><div class="ttdoc">Basic function to run opencl::kernels::ClSaturatedArithmeticKernel for division.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2runtime_2_c_l_2functions_2_c_l_elementwise_operations_8h_source.xhtml#l00286">CLElementwiseOperations.h:286</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_status_xhtml"><div class="ttname"><a href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a></div><div class="ttdoc">Status class.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00052">Error.h:52</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_arithmetic_addition_xhtml_ab511d21db900edbc211d24bc77901b73"><div class="ttname"><a href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml#ab511d21db900edbc211d24bc77901b73">arm_compute::CLArithmeticAddition::configure</a></div><div class="ttdeci">void configure(ICLTensor *input1, ICLTensor *input2, ICLTensor *output, ConvertPolicy policy, const ActivationLayerInfo &amp;act_info=ActivationLayerInfo())</div><div class="ttdoc">Initialise the kernel's inputs, output and conversion policy.</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2functions_2_cl_elementwise_operations_8cpp_source.xhtml#l00052">CLElementwiseOperations.cpp:52</a></div></div>
<div class="ttc" id="a_cl_sub_8h_xhtml"><div class="ttname"><a href="_cl_sub_8h.xhtml">ClSub.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_elementwise_min_xhtml_a60766816045864d8fbb0a9e63dac06b8"><div class="ttname"><a href="classarm__compute_1_1_c_l_elementwise_min.xhtml#a60766816045864d8fbb0a9e63dac06b8">arm_compute::CLElementwiseMin::~CLElementwiseMin</a></div><div class="ttdeci">~CLElementwiseMin()</div><div class="ttdoc">Default Destructor.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_arithmetic_addition_xhtml_a2b16a4d7e362db7ef443fbff50659647"><div class="ttname"><a href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml#a2b16a4d7e362db7ef443fbff50659647">arm_compute::CLArithmeticAddition::CLArithmeticAddition</a></div><div class="ttdeci">CLArithmeticAddition()</div><div class="ttdoc">Default Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2functions_2_cl_elementwise_operations_8cpp_source.xhtml#l00045">CLElementwiseOperations.cpp:45</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_elementwise_min_xhtml_ad1717410afd0be936c6213a63c8005fb"><div class="ttname"><a href="classarm__compute_1_1_c_l_elementwise_min.xhtml#ad1717410afd0be936c6213a63c8005fb">arm_compute::CLElementwiseMin::run</a></div><div class="ttdeci">void run() override</div><div class="ttdoc">Run the kernels contained in the function.</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2functions_2_cl_elementwise_operations_8cpp_source.xhtml#l00300">CLElementwiseOperations.cpp:300</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a1e041dc03ff256dfc8b0bf5c5fe099e0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">arm_compute::test::validation::pack</a></div><div class="ttdeci">ITensorPack pack</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00188">Im2Col.cpp:188</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_elementwise_max_xhtml_ab7f04698cdb16d5c4b5b5189487a5c67"><div class="ttname"><a href="classarm__compute_1_1_c_l_elementwise_max.xhtml#ab7f04698cdb16d5c4b5b5189487a5c67">arm_compute::CLElementwiseMax::CLElementwiseMax</a></div><div class="ttdeci">CLElementwiseMax()</div><div class="ttdoc">Default Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2functions_2_cl_elementwise_operations_8cpp_source.xhtml#l00210">CLElementwiseOperations.cpp:210</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_arithmetic_addition_xhtml_a5d4d1bdc6b902a7075b6850977a9ba7c"><div class="ttname"><a href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml#a5d4d1bdc6b902a7075b6850977a9ba7c">arm_compute::CLArithmeticAddition::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input1, const ITensorInfo *input2, const ITensorInfo *output, ConvertPolicy policy, const ActivationLayerInfo &amp;act_info=ActivationLayerInfo())</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of opencl::kernels::ClSatur...</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2functions_2_cl_elementwise_operations_8cpp_source.xhtml#l00072">CLElementwiseOperations.cpp:72</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_elementwise_squared_diff_xhtml_ad1717410afd0be936c6213a63c8005fb"><div class="ttname"><a href="classarm__compute_1_1_c_l_elementwise_squared_diff.xhtml#ad1717410afd0be936c6213a63c8005fb">arm_compute::CLElementwiseSquaredDiff::run</a></div><div class="ttdeci">void run() override</div><div class="ttdoc">Run the kernels contained in the function.</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2functions_2_cl_elementwise_operations_8cpp_source.xhtml#l00354">CLElementwiseOperations.cpp:354</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_arithmetic_subtraction_xhtml_af75005682bc41836ee70b131e6bb3b9c"><div class="ttname"><a href="classarm__compute_1_1_c_l_arithmetic_subtraction.xhtml#af75005682bc41836ee70b131e6bb3b9c">arm_compute::CLArithmeticSubtraction::CLArithmeticSubtraction</a></div><div class="ttdeci">CLArithmeticSubtraction()</div><div class="ttdoc">Default Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2functions_2_cl_elementwise_operations_8cpp_source.xhtml#l00099">CLElementwiseOperations.cpp:99</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_elementwise_squared_diff_xhtml_a10c2331c4da098e2c5e6bcae399a33d8"><div class="ttname"><a href="classarm__compute_1_1_c_l_elementwise_squared_diff.xhtml#a10c2331c4da098e2c5e6bcae399a33d8">arm_compute::CLElementwiseSquaredDiff::operator=</a></div><div class="ttdeci">CLElementwiseSquaredDiff &amp; operator=(const CLElementwiseSquaredDiff &amp;)=delete</div><div class="ttdoc">Prevent instances of this class from being copied (As this class contains pointers)</div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_arithmetic_division_xhtml_a14191ee8ed5daf88b61f31cb31831ee2"><div class="ttname"><a href="classarm__compute_1_1_c_l_arithmetic_division.xhtml#a14191ee8ed5daf88b61f31cb31831ee2">arm_compute::CLArithmeticDivision::~CLArithmeticDivision</a></div><div class="ttdeci">~CLArithmeticDivision()</div><div class="ttdoc">Default Destructor.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_arithmetic_subtraction_xhtml_a35651cdfea6fd6e86c189c17a080bfd3"><div class="ttname"><a href="classarm__compute_1_1_c_l_arithmetic_subtraction.xhtml#a35651cdfea6fd6e86c189c17a080bfd3">arm_compute::CLArithmeticSubtraction::operator=</a></div><div class="ttdeci">CLArithmeticSubtraction &amp; operator=(const CLArithmeticSubtraction &amp;)=delete</div><div class="ttdoc">Prevent instances of this class from being copied (As this class contains pointers)</div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_arithmetic_subtraction_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_arithmetic_subtraction.xhtml">arm_compute::CLArithmeticSubtraction</a></div><div class="ttdoc">Basic function to run opencl::kernels::ClSaturatedArithmeticKernel for subtraction.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2runtime_2_c_l_2functions_2_c_l_elementwise_operations_8h_source.xhtml#l00164">CLElementwiseOperations.h:164</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2024 Arm Limited.</div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_arithmetic_subtraction_xhtml_ad1717410afd0be936c6213a63c8005fb"><div class="ttname"><a href="classarm__compute_1_1_c_l_arithmetic_subtraction.xhtml#ad1717410afd0be936c6213a63c8005fb">arm_compute::CLArithmeticSubtraction::run</a></div><div class="ttdeci">void run() override</div><div class="ttdoc">Run the kernels contained in the function.</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2functions_2_cl_elementwise_operations_8cpp_source.xhtml#l00138">CLElementwiseOperations.cpp:138</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a82b8ac759c804bc1fb4e2d21e178fb6f"><div class="ttname"><a href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">arm_compute::ConvertPolicy</a></div><div class="ttdeci">ConvertPolicy</div><div class="ttdoc">Policy to handle integer overflow.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00353">Types.h:353</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1opencl_1_1_cl_elementwise_division_xhtml_a57e17edd3887729c1096c7b24e0e2412"><div class="ttname"><a href="classarm__compute_1_1opencl_1_1_cl_elementwise_division.xhtml#a57e17edd3887729c1096c7b24e0e2412">arm_compute::opencl::ClElementwiseDivision::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *src1, const ITensorInfo *src2, const ITensorInfo *dst, const ActivationLayerInfo &amp;act_info=ActivationLayerInfo())</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration.</div><div class="ttdef"><b>Definition:</b> <a href="gpu_2cl_2operators_2_cl_elementwise_operations_8cpp_source.xhtml#l00045">ClElementwiseOperations.cpp:45</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_elementwise_min_xhtml_af26b2456f5c6fa0e1c8d69a13c74c6cb"><div class="ttname"><a href="classarm__compute_1_1_c_l_elementwise_min.xhtml#af26b2456f5c6fa0e1c8d69a13c74c6cb">arm_compute::CLElementwiseMin::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input1, const ITensorInfo *input2, const ITensorInfo *output, const ActivationLayerInfo &amp;act_info=ActivationLayerInfo())</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of opencl::kernels::ClArith...</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2functions_2_cl_elementwise_operations_8cpp_source.xhtml#l00292">CLElementwiseOperations.cpp:292</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_arithmetic_addition_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml">arm_compute::CLArithmeticAddition</a></div><div class="ttdoc">Basic function to run opencl::kernels::ClSaturatedArithmeticKernel for addition.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2runtime_2_c_l_2functions_2_c_l_elementwise_operations_8h_source.xhtml#l00042">CLElementwiseOperations.h:42</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_elementwise_power_xhtml_a27d4404cf5dfdc219978364a4e6f3fc2"><div class="ttname"><a href="classarm__compute_1_1_c_l_elementwise_power.xhtml#a27d4404cf5dfdc219978364a4e6f3fc2">arm_compute::CLElementwisePower::operator=</a></div><div class="ttdeci">CLElementwisePower &amp; operator=(const CLElementwisePower &amp;)=delete</div><div class="ttdoc">Prevent instances of this class from being copied (As this class contains pointers)</div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_arithmetic_division_xhtml_aab2becc159953eabe02de58d41950b96"><div class="ttname"><a href="classarm__compute_1_1_c_l_arithmetic_division.xhtml#aab2becc159953eabe02de58d41950b96">arm_compute::CLArithmeticDivision::configure</a></div><div class="ttdeci">void configure(ICLTensor *input1, ICLTensor *input2, ICLTensor *output, const ActivationLayerInfo &amp;act_info=ActivationLayerInfo())</div><div class="ttdoc">Initialise the kernel's inputs, output.</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2functions_2_cl_elementwise_operations_8cpp_source.xhtml#l00163">CLElementwiseOperations.cpp:163</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1opencl_1_1_cl_elementwise_squared_diff_xhtml_a57e17edd3887729c1096c7b24e0e2412"><div class="ttname"><a href="classarm__compute_1_1opencl_1_1_cl_elementwise_squared_diff.xhtml#a57e17edd3887729c1096c7b24e0e2412">arm_compute::opencl::ClElementwiseSquaredDiff::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *src1, const ITensorInfo *src2, const ITensorInfo *dst, const ActivationLayerInfo &amp;act_info=ActivationLayerInfo())</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration.</div><div class="ttdef"><b>Definition:</b> <a href="gpu_2cl_2operators_2_cl_elementwise_operations_8cpp_source.xhtml#l00105">ClElementwiseOperations.cpp:105</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00044">ITensorInfo.h:44</a></div></div>
<div class="ttc" id="asrc_2gpu_2cl_2operators_2_c_l_elementwise_operations_8h_xhtml"><div class="ttname"><a href="src_2gpu_2cl_2operators_2_c_l_elementwise_operations_8h.xhtml">ClElementwiseOperations.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_elementwise_power_xhtml_ad1717410afd0be936c6213a63c8005fb"><div class="ttname"><a href="classarm__compute_1_1_c_l_elementwise_power.xhtml#ad1717410afd0be936c6213a63c8005fb">arm_compute::CLElementwisePower::run</a></div><div class="ttdeci">void run() override</div><div class="ttdoc">Run the kernels contained in the function.</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2functions_2_cl_elementwise_operations_8cpp_source.xhtml#l00408">CLElementwiseOperations.cpp:408</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_elementwise_squared_diff_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_elementwise_squared_diff.xhtml">arm_compute::CLElementwiseSquaredDiff</a></div><div class="ttdoc">Basic function to run opencl::kernels::ClArithmeticKernel for squared difference.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2runtime_2_c_l_2functions_2_c_l_elementwise_operations_8h_source.xhtml#l00537">CLElementwiseOperations.h:537</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_elementwise_power_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_elementwise_power.xhtml">arm_compute::CLElementwisePower</a></div><div class="ttdoc">Basic function to run opencl::kernels::ClArithmeticKernel for power.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2runtime_2_c_l_2functions_2_c_l_elementwise_operations_8h_source.xhtml#l00621">CLElementwiseOperations.h:621</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_elementwise_squared_diff_xhtml_aab2becc159953eabe02de58d41950b96"><div class="ttname"><a href="classarm__compute_1_1_c_l_elementwise_squared_diff.xhtml#aab2becc159953eabe02de58d41950b96">arm_compute::CLElementwiseSquaredDiff::configure</a></div><div class="ttdeci">void configure(ICLTensor *input1, ICLTensor *input2, ICLTensor *output, const ActivationLayerInfo &amp;act_info=ActivationLayerInfo())</div><div class="ttdoc">Initialise the kernel's inputs, output and conversion policy.</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2functions_2_cl_elementwise_operations_8cpp_source.xhtml#l00325">CLElementwiseOperations.cpp:325</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_arithmetic_subtraction_xhtml_a5d4d1bdc6b902a7075b6850977a9ba7c"><div class="ttname"><a href="classarm__compute_1_1_c_l_arithmetic_subtraction.xhtml#a5d4d1bdc6b902a7075b6850977a9ba7c">arm_compute::CLArithmeticSubtraction::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input1, const ITensorInfo *input2, const ITensorInfo *output, ConvertPolicy policy, const ActivationLayerInfo &amp;act_info=ActivationLayerInfo())</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of opencl::kernels::ClSatur...</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2functions_2_cl_elementwise_operations_8cpp_source.xhtml#l00129">CLElementwiseOperations.cpp:129</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_elementwise_max_xhtml_a862ea539e256c89247700485c51c0a98"><div class="ttname"><a href="classarm__compute_1_1_c_l_elementwise_max.xhtml#a862ea539e256c89247700485c51c0a98">arm_compute::CLElementwiseMax::~CLElementwiseMax</a></div><div class="ttdeci">~CLElementwiseMax()</div><div class="ttdoc">Default Destructor.</div></div>
<div class="ttc" id="a_cl_add_8h_xhtml"><div class="ttname"><a href="_cl_add_8h.xhtml">ClAdd.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_arithmetic_division_xhtml_ad1717410afd0be936c6213a63c8005fb"><div class="ttname"><a href="classarm__compute_1_1_c_l_arithmetic_division.xhtml#ad1717410afd0be936c6213a63c8005fb">arm_compute::CLArithmeticDivision::run</a></div><div class="ttdeci">void run() override</div><div class="ttdoc">Run the kernels contained in the function.</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2functions_2_cl_elementwise_operations_8cpp_source.xhtml#l00192">CLElementwiseOperations.cpp:192</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_bf9f26469d00835ba20ff8d80ee5a804.xhtml">runtime</a></li><li class="navelem"><a class="el" href="dir_43c3fdbf778d1fd99e2e38f09fddd920.xhtml">CL</a></li><li class="navelem"><a class="el" href="dir_0304d3529340c629ae0050036d07056a.xhtml">functions</a></li><li class="navelem"><a class="el" href="runtime_2_c_l_2functions_2_cl_elementwise_operations_8cpp.xhtml">CLElementwiseOperations.cpp</a></li>
    <li class="footer">Generated on Mon Jun 17 2024 15:11:21 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
