<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/cpu/kernels/pool3d/neon/quantized.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.06</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('pool3d_2neon_2quantized_8h_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">quantized.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="pool3d_2neon_2quantized_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2022 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef SRC_CORE_NEON_KERNELS_POOL3D_QUANTIZED_H</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define SRC_CORE_NEON_KERNELS_POOL3D_QUANTIZED_H</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160; </div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_tensor_8h.xhtml">arm_compute/core/ITensor.h</a>&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_types_8h.xhtml">arm_compute/core/Types.h</a>&quot;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160; </div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_pooling_helpers_8h.xhtml">src/core/helpers/PoolingHelpers.h</a>&quot;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_window_helpers_8h.xhtml">src/core/helpers/WindowHelpers.h</a>&quot;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="wrapper_8h.xhtml">src/core/NEON/wrapper/wrapper.h</a>&quot;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160; </div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">namespace </span>cpu</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00039"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#ab0fbb63ac498fd9817cfca2e5e445148">   39</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#ab0fbb63ac498fd9817cfca2e5e445148">avg_poolingMxNxD_q8_neon_ndhwc</a>(</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst0, <a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml">Pooling3dLayerInfo</a> &amp;pool_info, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window_out, <span class="keyword">const</span> <span class="keywordtype">int</span> window_step_x)</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160; </div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keyword">using</span> q8x8_t  = <span class="keyword">typename</span> <a class="code" href="structarm__compute_1_1wrapper_1_1traits_1_1neon__vector.xhtml">wrapper::traits::neon_vector&lt;T, 8&gt;::type</a>;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keyword">using</span> q8x16_t = <span class="keyword">typename</span> <a class="code" href="structarm__compute_1_1wrapper_1_1traits_1_1neon__vector.xhtml">wrapper::traits::neon_vector&lt;T, 16&gt;::type</a>;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keyword">using</span> q16_t   = <span class="keyword">typename</span> <a class="code" href="namespacearm__compute_1_1wrapper_1_1traits.xhtml#ac20ca549fa27b2eed44367745055a233">wrapper::traits::promote_t&lt;T&gt;</a>;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keyword">using</span> q16x8_t = <span class="keyword">typename</span> <a class="code" href="structarm__compute_1_1wrapper_1_1traits_1_1neon__vector.xhtml">wrapper::traits::neon_vector&lt;q16_t, 8&gt;::type</a>;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keyword">using</span> q32_t   = <span class="keyword">typename</span> <a class="code" href="namespacearm__compute_1_1wrapper_1_1traits.xhtml#ac20ca549fa27b2eed44367745055a233">wrapper::traits::promote_t&lt;q16_t&gt;</a>;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keyword">using</span> q32x4_t = <span class="keyword">typename</span> <a class="code" href="structarm__compute_1_1wrapper_1_1traits_1_1neon__vector.xhtml">wrapper::traits::neon_vector&lt;q32_t, 4&gt;::type</a>;</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160; </div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keywordtype">int</span> pool_stride_x = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(pool_info.<a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a8552c72afa19c3cb09f61e2ac730f504">stride</a>.<a class="code" href="classarm__compute_1_1_size3_d.xhtml#a02bed8590a9ddf520e58a060059518ec">width</a>);</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keywordtype">int</span> pool_stride_y = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(pool_info.<a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a8552c72afa19c3cb09f61e2ac730f504">stride</a>.<a class="code" href="classarm__compute_1_1_size3_d.xhtml#a02afeaaf8574e7a78d6b466ff2695052">height</a>);</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keywordtype">int</span> pool_stride_z = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(pool_info.<a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a8552c72afa19c3cb09f61e2ac730f504">stride</a>.<a class="code" href="classarm__compute_1_1_size3_d.xhtml#a820c167ceaaa9759b0ca2695d22db55c">depth</a>);</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160; </div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_size_x = pool_info.<a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a16875a1122accc1277a22e0ddbb8e94d">is_global_pooling</a> ? <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;tensor_shape().y() : pool_info.<a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#aafa923d0a069ae069f7a9239f65452dd">pool_size</a>.<a class="code" href="classarm__compute_1_1_size3_d.xhtml#a02bed8590a9ddf520e58a060059518ec">width</a>;</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_size_y = pool_info.<a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a16875a1122accc1277a22e0ddbb8e94d">is_global_pooling</a> ? <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;tensor_shape().z() : pool_info.<a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#aafa923d0a069ae069f7a9239f65452dd">pool_size</a>.<a class="code" href="classarm__compute_1_1_size3_d.xhtml#a02afeaaf8574e7a78d6b466ff2695052">height</a>;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_size_z = pool_info.<a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a16875a1122accc1277a22e0ddbb8e94d">is_global_pooling</a> ? <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;tensor_shape()[3] : pool_info.<a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#aafa923d0a069ae069f7a9239f65452dd">pool_size</a>.<a class="code" href="classarm__compute_1_1_size3_d.xhtml#a820c167ceaaa9759b0ca2695d22db55c">depth</a>;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160; </div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_pad_top    = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(pool_info.<a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a51ba0498913f8c74b9ba8938694d09bf">padding</a>.<a class="code" href="structarm__compute_1_1_padding3_d.xhtml#ab9332a87d0af5aa12cac847eff68b7af">top</a>);</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_pad_bottom = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(pool_info.<a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a51ba0498913f8c74b9ba8938694d09bf">padding</a>.<a class="code" href="structarm__compute_1_1_padding3_d.xhtml#a859088de403805f35d826df5ef39ee80">bottom</a>);</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_pad_left   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(pool_info.<a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a51ba0498913f8c74b9ba8938694d09bf">padding</a>.<a class="code" href="structarm__compute_1_1_padding3_d.xhtml#a951236a0702535ba18ba51db69428658">left</a>);</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_pad_right  = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(pool_info.<a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a51ba0498913f8c74b9ba8938694d09bf">padding</a>.<a class="code" href="structarm__compute_1_1_padding3_d.xhtml#aa022cff9934a1a99bd77c49ca6a135a2">right</a>);</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_pad_front  = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(pool_info.<a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a51ba0498913f8c74b9ba8938694d09bf">padding</a>.<a class="code" href="structarm__compute_1_1_padding3_d.xhtml#a1052a747170eed194bab868f0fce68ad">front</a>);</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_pad_back   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(pool_info.<a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a51ba0498913f8c74b9ba8938694d09bf">padding</a>.<a class="code" href="structarm__compute_1_1_padding3_d.xhtml#aa185c5e9eee32898d06143bbd95f77a8">back</a>);</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160; </div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> upper_bound_w = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(1) + (pool_info.<a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a9f7e7793c31d02fd3ba59e0fcf3ef891">exclude_padding</a> ? 0 : pool_pad_right);</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> upper_bound_h = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(2) + (pool_info.<a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a9f7e7793c31d02fd3ba59e0fcf3ef891">exclude_padding</a> ? 0 : pool_pad_bottom);</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> upper_bound_d = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(3) + (pool_info.<a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a9f7e7793c31d02fd3ba59e0fcf3ef891">exclude_padding</a> ? 0 : pool_pad_back);</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160; </div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_dim_c = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(0);</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_dim_w = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(1);</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_dim_h = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(2);</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_dim_d = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(3);</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160; </div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> y_stride = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().y());</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> z_stride = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().z());</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> w_stride = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes()[3]);</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> n_stride = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes()[4]);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160; </div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keyword">const</span> uint8_t *in_ptr_start = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;buffer() + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;offset_first_element_in_bytes();</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160; </div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> window_end_x   = input_dim_c;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> window_start_x = 0;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160; </div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> out(dst0, window_out);</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160; </div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keyword">const</span> float32x4_t             half_scale_v = vdupq_n_f32(0.5f);</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> src_qinfo    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> dst_qinfo    = dst0-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">quantization_info</a>().<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>();</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160; </div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> quant_rescale = dst_qinfo.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a> / src_qinfo.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a>;</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="comment">// &quot;new_offset&quot; doesn&#39;t have to consider the &quot;half_scale_v&quot; in its computation</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="comment">// With a requantization performed in a single step there won&#39;t be uncertainties introduced</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keyword">const</span> int32_t new_offset =</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        dst_qinfo.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">offset</a> - <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(<span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(src_qinfo.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">offset</a>) / quant_rescale);</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160; </div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        window_out,</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        {</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            <span class="comment">// Computing the theoretical input starting/ending points</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> in_idx_width  = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<span class="keywordtype">id</span>.y()) * pool_stride_x - pool_pad_left;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> in_idx_height = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<span class="keywordtype">id</span>.z()) * pool_stride_y - pool_pad_top;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> in_idx_depth  = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<span class="keywordtype">id</span>[3]) * pool_stride_z - pool_pad_front;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160; </div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_start_x = std::max(0, -in_idx_width);</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_end_x_t = std::min(input_dim_w + pool_pad_left - in_idx_width, pool_size_x);</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_start_y = std::max(0, -in_idx_height);</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_end_y_t = std::min(input_dim_h + pool_pad_top - in_idx_height, pool_size_y);</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160; </div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_start_z = std::max(0, -in_idx_depth);</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_end_z_t = std::min(input_dim_d + pool_pad_front - in_idx_depth, pool_size_z);</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160; </div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            <span class="comment">// The end of width to consider in calculation should exclude PAD_X, PAD_Y and PAD_Z</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_end_x = std::min(pool_end_x_t, input_dim_w - in_idx_width);</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_end_y = std::min(pool_end_y_t, input_dim_h - in_idx_height);</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_end_z = std::min(pool_end_z_t, input_dim_d - in_idx_depth);</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160; </div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            <span class="comment">// Calculate scale</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a> =</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                calculate_avg_scale_pool3d(pool_info.<a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a9f7e7793c31d02fd3ba59e0fcf3ef891">exclude_padding</a>, <span class="keywordtype">id</span>, pool_size_x, pool_size_y, pool_size_z,</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                                           upper_bound_w, upper_bound_h, upper_bound_d, pool_pad_left, pool_pad_top,</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                                           pool_pad_front, pool_stride_x, pool_stride_y, pool_stride_z);</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160; </div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            <span class="keyword">const</span> uint8_t *in_ptr_n = in_ptr_start + <span class="keywordtype">id</span>[4] * n_stride;</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160; </div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            <span class="keywordtype">int</span> x_off = window_start_x;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160; </div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            <span class="keywordflow">for</span> (; x_off &lt;= (window_end_x - window_step_x); x_off += window_step_x) <span class="comment">// C</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            {</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                q32x4_t vres1 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>q32_t<span class="keyword">&gt;</span>(0.f), <a class="code" href="structarm__compute_1_1wrapper_1_1traits_1_1vector__128__tag.xhtml">wrapper::traits::vector_128_tag</a>{});</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                q32x4_t vres2 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>q32_t<span class="keyword">&gt;</span>(0.f), <a class="code" href="structarm__compute_1_1wrapper_1_1traits_1_1vector__128__tag.xhtml">wrapper::traits::vector_128_tag</a>{});</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                q32x4_t vres3 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>q32_t<span class="keyword">&gt;</span>(0.f), <a class="code" href="structarm__compute_1_1wrapper_1_1traits_1_1vector__128__tag.xhtml">wrapper::traits::vector_128_tag</a>{});</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                q32x4_t vres4 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>q32_t<span class="keyword">&gt;</span>(0.f), <a class="code" href="structarm__compute_1_1wrapper_1_1traits_1_1vector__128__tag.xhtml">wrapper::traits::vector_128_tag</a>{});</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160; </div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                <span class="comment">// Perform pooling</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> z = pool_start_z; z &lt; pool_end_z; ++z)</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                {</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                    <span class="keyword">const</span> uint8_t *in_ptr_z = in_ptr_n + (z + in_idx_depth) * w_stride;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> y = pool_start_y; y &lt; pool_end_y; ++y)</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                    {</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                        <span class="keyword">const</span> uint8_t *in_ptr_y = in_ptr_z + (y + in_idx_height) * z_stride;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> x = pool_start_x; x &lt; pool_end_x; ++x)</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                        {</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                            <span class="keyword">const</span> uint8_t *in_ptr_x = in_ptr_y + (x + in_idx_width) * y_stride;</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                            <span class="keyword">const</span> q8x16_t  data     = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr_x) + x_off);</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160; </div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                            <span class="keyword">const</span> q16x8_t data_q16  = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(data));</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                            <span class="keyword">const</span> q16x8_t data2_q16 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(data));</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                            vres1                   = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vres1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(data_q16)));</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                            vres2                   = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vres2, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(data_q16)));</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                            vres3                   = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vres3, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(data2_q16)));</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                            vres4 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vres4, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(data2_q16)));</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                        }</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                    }</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                }</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160; </div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                <span class="keywordflow">if</span> (src_qinfo != dst_qinfo)</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                {</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                    <span class="keyword">const</span> float32x4x4_t vres = {{</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                        vcvtq_f32_q32(vres1),</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                        vcvtq_f32_q32(vres2),</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                        vcvtq_f32_q32(vres3),</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                        vcvtq_f32_q32(vres4),</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                    }};</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span>          requantized_dst =</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                        vrequantize_pooling_with_scale&lt;q8x16_t&gt;(vres, quant_rescale, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>, new_offset);</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                    <span class="comment">// Store result</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                    <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>()) + x_off, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(requantized_dst));</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                    <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>()) + x_off + 8, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(requantized_dst));</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                }</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                {</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                    <span class="keyword">const</span> float32x4_t scale_v = vdupq_n_f32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>);</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                    <span class="comment">// Divide by scale and add 0.5f to round to nearest instead of rounding towards zero</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                    vres1 = vcvtq_q32_f32&lt;q32x4_t&gt;(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(half_scale_v, vcvtq_f32_q32(vres1), scale_v));</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                    vres2 = vcvtq_q32_f32&lt;q32x4_t&gt;(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(half_scale_v, vcvtq_f32_q32(vres2), scale_v));</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                    vres3 = vcvtq_q32_f32&lt;q32x4_t&gt;(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(half_scale_v, vcvtq_f32_q32(vres3), scale_v));</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                    vres4 = vcvtq_q32_f32&lt;q32x4_t&gt;(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(half_scale_v, vcvtq_f32_q32(vres4), scale_v));</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160; </div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                    <span class="keyword">const</span> q8x8_t res1 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">wrapper::vcombine</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(vres1), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(vres2)));</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                    <span class="keyword">const</span> q8x8_t res2 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">wrapper::vcombine</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(vres3), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(vres4)));</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                    <span class="comment">// Store result</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                    <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>()) + x_off, res1);</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                    <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>()) + x_off + 8, res2);</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                }</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            }</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160; </div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            <span class="comment">// Left-overs loop</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            <span class="keywordflow">for</span> (; x_off &lt; window_end_x; ++x_off)</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            {</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                q32_t res = <span class="keyword">static_cast&lt;</span>q32_t<span class="keyword">&gt;</span>(0.f);</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160; </div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                <span class="comment">// Perform pooling</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> z = pool_start_z; z &lt; pool_end_z; ++z)</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                {</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                    <span class="keyword">const</span> uint8_t *in_ptr_z = in_ptr_n + (z + in_idx_depth) * w_stride;</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> y = pool_start_y; y &lt; pool_end_y; ++y)</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                    {</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                        <span class="keyword">const</span> uint8_t *in_ptr_y = in_ptr_z + (y + in_idx_height) * z_stride;</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> x = pool_start_x; x &lt; pool_end_x; ++x)</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                        {</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                            <span class="keyword">const</span> uint8_t *in_ptr_x = in_ptr_y + (x + in_idx_width) * y_stride;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                            <span class="keyword">const</span> T        data     = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr_x) + x_off);</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                            res += data;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                        }</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                    }</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                }</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160; </div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                <span class="keywordflow">if</span> (src_qinfo != dst_qinfo)</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                {</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> res_f           = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(res);</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> new_scale       = quant_rescale / <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>;</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span>  requantized_dst = quantize&lt;T&gt;(res_f, <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a>(new_scale, new_offset));</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160; </div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                    <span class="comment">// Store result</span></div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                    *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>()) + x_off) = requantized_dst;</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                }</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                {</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                    <span class="comment">// Divide by scale and add 0.5f to round to nearest instead of rounding towards zero</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                    res = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(0.5f + <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(res) * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>);</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160; </div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                    <span class="comment">// Store result</span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                    *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>()) + x_off) = res;</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                }</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            }</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        },</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        out);</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;}</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160; </div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00232"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a6f764a97cef5e5afa5daaf6ec2ee9f2b">  232</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a6f764a97cef5e5afa5daaf6ec2ee9f2b">max_poolingMxNxD_q8_neon_ndhwc</a>(</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst0, <a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml">Pooling3dLayerInfo</a> &amp;pool_info, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window_out, <span class="keyword">const</span> <span class="keywordtype">int</span> window_step_x)</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160; </div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;{</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <span class="keyword">using</span> q8x8_t  = <span class="keyword">typename</span> <a class="code" href="structarm__compute_1_1wrapper_1_1traits_1_1neon__vector.xhtml">wrapper::traits::neon_vector&lt;T, 8&gt;::type</a>;</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="keyword">using</span> q8x16_t = <span class="keyword">typename</span> <a class="code" href="structarm__compute_1_1wrapper_1_1traits_1_1neon__vector.xhtml">wrapper::traits::neon_vector&lt;T, 16&gt;::type</a>;</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160; </div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> window_half_step_x = window_step_x / 2;</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160; </div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keywordtype">int</span> pool_stride_x = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(pool_info.<a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a8552c72afa19c3cb09f61e2ac730f504">stride</a>.<a class="code" href="classarm__compute_1_1_size3_d.xhtml#a02bed8590a9ddf520e58a060059518ec">width</a>);</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="keywordtype">int</span> pool_stride_y = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(pool_info.<a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a8552c72afa19c3cb09f61e2ac730f504">stride</a>.<a class="code" href="classarm__compute_1_1_size3_d.xhtml#a02afeaaf8574e7a78d6b466ff2695052">height</a>);</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="keywordtype">int</span> pool_stride_z = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(pool_info.<a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a8552c72afa19c3cb09f61e2ac730f504">stride</a>.<a class="code" href="classarm__compute_1_1_size3_d.xhtml#a820c167ceaaa9759b0ca2695d22db55c">depth</a>);</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160; </div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_size_x = pool_info.<a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a16875a1122accc1277a22e0ddbb8e94d">is_global_pooling</a> ? <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;tensor_shape().y() : pool_info.<a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#aafa923d0a069ae069f7a9239f65452dd">pool_size</a>.<a class="code" href="classarm__compute_1_1_size3_d.xhtml#a02bed8590a9ddf520e58a060059518ec">width</a>;</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_size_y = pool_info.<a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a16875a1122accc1277a22e0ddbb8e94d">is_global_pooling</a> ? <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;tensor_shape().z() : pool_info.<a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#aafa923d0a069ae069f7a9239f65452dd">pool_size</a>.<a class="code" href="classarm__compute_1_1_size3_d.xhtml#a02afeaaf8574e7a78d6b466ff2695052">height</a>;</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_size_z = pool_info.<a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a16875a1122accc1277a22e0ddbb8e94d">is_global_pooling</a> ? <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;tensor_shape()[3] : pool_info.<a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#aafa923d0a069ae069f7a9239f65452dd">pool_size</a>.<a class="code" href="classarm__compute_1_1_size3_d.xhtml#a820c167ceaaa9759b0ca2695d22db55c">depth</a>;</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160; </div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_pad_top   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(pool_info.<a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a51ba0498913f8c74b9ba8938694d09bf">padding</a>.<a class="code" href="structarm__compute_1_1_padding3_d.xhtml#ab9332a87d0af5aa12cac847eff68b7af">top</a>);</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_pad_left  = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(pool_info.<a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a51ba0498913f8c74b9ba8938694d09bf">padding</a>.<a class="code" href="structarm__compute_1_1_padding3_d.xhtml#a951236a0702535ba18ba51db69428658">left</a>);</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_pad_front = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(pool_info.<a class="code" href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a51ba0498913f8c74b9ba8938694d09bf">padding</a>.<a class="code" href="structarm__compute_1_1_padding3_d.xhtml#a1052a747170eed194bab868f0fce68ad">front</a>);</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160; </div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_dim_c = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(0);</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_dim_w = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(1);</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_dim_h = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(2);</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_dim_d = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(3);</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160; </div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> y_stride = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().y());</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> z_stride = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().z());</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> w_stride = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes()[3]);</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> n_stride = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes()[4]);</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160; </div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <span class="keyword">const</span> uint8_t *in_ptr_start = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;buffer() + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;offset_first_element_in_bytes();</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160; </div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> window_end_x   = input_dim_c;</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> window_start_x = 0;</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160; </div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> out(dst0, window_out);</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160; </div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> src_qinfo = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> dst_qinfo = dst0-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">quantization_info</a>().<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>();</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160; </div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>   requant_scale = dst_qinfo.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a> / src_qinfo.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a>;</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <span class="keyword">const</span> int32_t requant_offset =</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        dst_qinfo.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">offset</a> - <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(<span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(src_qinfo.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">offset</a>) / requant_scale);</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> requant_qinfo = <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a>(requant_scale, requant_offset);</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160; </div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        window_out,</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        {</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;            <span class="comment">// Computing the theoretical input starting/ending points</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> in_idx_width  = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<span class="keywordtype">id</span>.y()) * pool_stride_x - pool_pad_left;</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> in_idx_height = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<span class="keywordtype">id</span>.z()) * pool_stride_y - pool_pad_top;</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> in_idx_depth  = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<span class="keywordtype">id</span>[3]) * pool_stride_z - pool_pad_front;</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160; </div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_start_x = std::max(0, -in_idx_width);</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_end_x_t = std::min(input_dim_w + pool_pad_left - in_idx_width, pool_size_x);</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_start_y = std::max(0, -in_idx_height);</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_end_y_t = std::min(input_dim_h + pool_pad_top - in_idx_height, pool_size_y);</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160; </div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_start_z = std::max(0, -in_idx_depth);</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_end_z_t = std::min(input_dim_d + pool_pad_front - in_idx_depth, pool_size_z);</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160; </div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;            <span class="comment">// The end of width to consider in calculation should exclude PAD_X, PAD_Y and PAD_Z</span></div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_end_x = std::min(pool_end_x_t, input_dim_w - in_idx_width);</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_end_y = std::min(pool_end_y_t, input_dim_h - in_idx_height);</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_end_z = std::min(pool_end_z_t, input_dim_d - in_idx_depth);</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160; </div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;            <span class="keyword">const</span> uint8_t *in_ptr_n = in_ptr_start + <span class="keywordtype">id</span>[4] * n_stride;</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160; </div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;            <span class="keywordtype">int</span> x_off = window_start_x;</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160; </div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;            <span class="keywordflow">for</span> (; x_off &lt;= (window_end_x - window_step_x); x_off += window_step_x) <span class="comment">// C</span></div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;            {</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                q8x16_t vres = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(std::numeric_limits&lt;T&gt;::min(), <a class="code" href="structarm__compute_1_1wrapper_1_1traits_1_1vector__128__tag.xhtml">wrapper::traits::vector_128_tag</a>{});</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160; </div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                <span class="comment">// Perform pooling</span></div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> z = pool_start_z; z &lt; pool_end_z; ++z)</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                {</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                    <span class="keyword">const</span> uint8_t *in_ptr_z = in_ptr_n + (z + in_idx_depth) * w_stride;</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> y = pool_start_y; y &lt; pool_end_y; ++y)</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                    {</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                        <span class="keyword">const</span> uint8_t *in_ptr_y = in_ptr_z + (y + in_idx_height) * z_stride;</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> x = pool_start_x; x &lt; pool_end_x; ++x)</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                        {</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                            <span class="keyword">const</span> uint8_t *in_ptr_x = in_ptr_y + (x + in_idx_width) * y_stride;</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                            <span class="keyword">const</span> q8x16_t  data     = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr_x) + x_off);</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160; </div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                            vres = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">wrapper::vmax</a>(vres, data);</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;                        }</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;                    }</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;                }</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160; </div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                <span class="comment">// Store result</span></div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>()) + x_off,</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                                (src_qinfo != dst_qinfo)</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;                                    ? vrequantize_pooling&lt;q8x8_t, q8x16_t&gt;(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(vres),</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;                                                                           <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(vres), requant_qinfo)</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                                    : vres);</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;            }</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160; </div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;            <span class="comment">// Leftovers using half the window step</span></div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;            <span class="keywordflow">for</span> (; x_off &lt;= (window_end_x - window_half_step_x); x_off += window_half_step_x)</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;            {</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                q8x8_t vres = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(std::numeric_limits&lt;T&gt;::min(), <a class="code" href="structarm__compute_1_1wrapper_1_1traits_1_1vector__64__tag.xhtml">wrapper::traits::vector_64_tag</a>{});</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160; </div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                <span class="comment">// Perform pooling</span></div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> z = pool_start_z; z &lt; pool_end_z; ++z)</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                {</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                    <span class="keyword">const</span> uint8_t *in_ptr_z = in_ptr_n + (z + in_idx_depth) * w_stride;</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> y = pool_start_y; y &lt; pool_end_y; ++y)</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                    {</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                        <span class="keyword">const</span> uint8_t *in_ptr_y = in_ptr_z + (y + in_idx_height) * z_stride;</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> x = pool_start_x; x &lt; pool_end_x; ++x)</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                        {</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                            <span class="keyword">const</span> uint8_t *in_ptr_x = in_ptr_y + (x + in_idx_width) * y_stride;</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                            <span class="keyword">const</span> q8x8_t   data     = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr_x) + x_off);</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160; </div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                            vres = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">wrapper::vmax</a>(vres, data);</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                        }</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                    }</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                }</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160; </div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                <span class="comment">// Store result</span></div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>()) + x_off,</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                                (src_qinfo != dst_qinfo) ? vrequantize_pooling&lt;q8x8_t&gt;(vres, requant_qinfo) : vres);</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;            }</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160; </div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;            <span class="comment">// Left-overs loop</span></div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;            <span class="keywordflow">for</span> (; x_off &lt; window_end_x; ++x_off)</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;            {</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                T res = std::numeric_limits&lt;T&gt;::min();</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160; </div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> z = pool_start_z; z &lt; pool_end_z; ++z)</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                {</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                    <span class="keyword">const</span> uint8_t *in_ptr_z = in_ptr_n + (z + in_idx_depth) * w_stride;</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> y = pool_start_y; y &lt; pool_end_y; ++y)</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                    {</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                        <span class="keyword">const</span> uint8_t *in_ptr_y = in_ptr_z + (y + in_idx_height) * z_stride;</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> x = pool_start_x; x &lt; pool_end_x; ++x)</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                        {</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                            <span class="keyword">const</span> uint8_t *in_ptr_x = in_ptr_y + (x + in_idx_width) * y_stride;</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                            <span class="keyword">const</span> T        data     = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr_x) + x_off);</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160; </div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;                            res = std::max(res, data);</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;                        }</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;                    }</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;                }</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160; </div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                <span class="comment">// Store result</span></div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                <span class="keywordflow">if</span> (src_qinfo != dst_qinfo)</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                {</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> res_f                           = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(res);</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;                    *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>()) + x_off) = quantize&lt;T&gt;(res_f, requant_qinfo);</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;                }</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                {</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                    *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>()) + x_off) = res;</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                }</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;            }</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;        },</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;        out);</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;}</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160; </div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;} <span class="comment">// namespace cpu</span></div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;} <span class="comment">// namespace arm_compute</span></div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160; </div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;<span class="preprocessor">#endif // SRC_CORE_NEON_KERNELS_POOL3D_QUANTIZED_H</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a1894e825a225f3b2013f594cbffdae73"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">arm_compute::wrapper::vadd</a></div><div class="ttdeci">uint8x8_t vadd(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="intrinsics_2add_8h_source.xhtml#l00039">add.h:39</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_uniform_quantization_info_xhtml_a97bd6c077f3c7769f575b82988b9b668"><div class="ttname"><a href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">arm_compute::UniformQuantizationInfo::offset</a></div><div class="ttdeci">int32_t offset</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00063">QuantizationInfo.h:63</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_ab0fbb63ac498fd9817cfca2e5e445148"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#ab0fbb63ac498fd9817cfca2e5e445148">arm_compute::cpu::avg_poolingMxNxD_q8_neon_ndhwc</a></div><div class="ttdeci">void avg_poolingMxNxD_q8_neon_ndhwc(const ITensor *src, ITensor *dst0, Pooling3dLayerInfo &amp;pool_info, const Window &amp;window_out, const int window_step_x)</div><div class="ttdef"><b>Definition:</b> <a href="pool3d_2neon_2quantized_8h_source.xhtml#l00039">quantized.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a8dbba1731c32d176ae6635be1c65cbd6"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">arm_compute::wrapper::vmovl</a></div><div class="ttdeci">uint16x8_t vmovl(const uint8x8_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="movl_8h_source.xhtml#l00039">movl.h:39</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_pooling3d_layer_info_xhtml_a8552c72afa19c3cb09f61e2ac730f504"><div class="ttname"><a href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a8552c72afa19c3cb09f61e2ac730f504">arm_compute::Pooling3dLayerInfo::stride</a></div><div class="ttdeci">Size3D stride</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01250">Types.h:1250</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_types_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_aea0b656edc428c1f7702d86bbb97df6b"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">arm_compute::wrapper::vmovn</a></div><div class="ttdeci">uint32x2_t vmovn(const uint64x2_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="movn_8h_source.xhtml#l00039">movn.h:39</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml">arm_compute::ITensor</a></div><div class="ttdoc">Interface for CPU tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_8h_source.xhtml#l00036">ITensor.h:36</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_pooling3d_layer_info_xhtml_a51ba0498913f8c74b9ba8938694d09bf"><div class="ttname"><a href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a51ba0498913f8c74b9ba8938694d09bf">arm_compute::Pooling3dLayerInfo::padding</a></div><div class="ttdeci">Padding3D padding</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01251">Types.h:1251</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_size3_d_xhtml_a02bed8590a9ddf520e58a060059518ec"><div class="ttname"><a href="classarm__compute_1_1_size3_d.xhtml#a02bed8590a9ddf520e58a060059518ec">arm_compute::Size3D::width</a></div><div class="ttdeci">size_t width</div><div class="ttdoc">Width of the 3D shape or object.</div><div class="ttdef"><b>Definition:</b> <a href="_size3_d_8h_source.xhtml#l00091">Size3D.h:91</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a77f54eded7fef436d3a4f21ad5a00da6"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">arm_compute::wrapper::vloadq</a></div><div class="ttdeci">uint8x16_t vloadq(const uint8_t *ptr)</div><div class="ttdef"><b>Definition:</b> <a href="load_8h_source.xhtml#l00058">load.h:58</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_uniform_quantization_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_uniform_quantization_info.xhtml">arm_compute::UniformQuantizationInfo</a></div><div class="ttdoc">Quantization info when assuming per layer quantization.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00042">QuantizationInfo.h:42</a></div></div>
<div class="ttc" id="awrapper_8h_xhtml"><div class="ttname"><a href="wrapper_8h.xhtml">wrapper.h</a></div><div class="ttdoc">Includes all wrapper headers at once.</div></div>
<div class="ttc" id="astructarm__compute_1_1wrapper_1_1traits_1_1neon__vector_xhtml"><div class="ttname"><a href="structarm__compute_1_1wrapper_1_1traits_1_1neon__vector.xhtml">arm_compute::wrapper::traits::neon_vector</a></div><div class="ttdoc">Create the appropriate SIMD vector given its type and size in terms of elements.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_n_e_o_n_2wrapper_2_traits_8h_source.xhtml#l00057">traits.h:57</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a6f764a97cef5e5afa5daaf6ec2ee9f2b"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a6f764a97cef5e5afa5daaf6ec2ee9f2b">arm_compute::cpu::max_poolingMxNxD_q8_neon_ndhwc</a></div><div class="ttdeci">void max_poolingMxNxD_q8_neon_ndhwc(const ITensor *src, ITensor *dst0, Pooling3dLayerInfo &amp;pool_info, const Window &amp;window_out, const int window_step_x)</div><div class="ttdef"><b>Definition:</b> <a href="pool3d_2neon_2quantized_8h_source.xhtml#l00232">quantized.h:232</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_xhtml_a0e95dc1e53c361348314873b168ae237"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">arm_compute::ITensor::info</a></div><div class="ttdeci">virtual ITensorInfo * info() const =0</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor's metadata.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_size3_d_xhtml_a02afeaaf8574e7a78d6b466ff2695052"><div class="ttname"><a href="classarm__compute_1_1_size3_d.xhtml#a02afeaaf8574e7a78d6b466ff2695052">arm_compute::Size3D::height</a></div><div class="ttdeci">size_t height</div><div class="ttdoc">Height of the 3D shape or object.</div><div class="ttdef"><b>Definition:</b> <a href="_size3_d_8h_source.xhtml#l00092">Size3D.h:92</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_iterator_xhtml_ab260e292b1df3944bc1d55a9b2301e41"><div class="ttname"><a href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">arm_compute::Iterator::ptr</a></div><div class="ttdeci">constexpr uint8_t * ptr() const</div><div class="ttdoc">Return a pointer to the current pixel.</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00147">Helpers.inl:147</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_size3_d_xhtml_a820c167ceaaa9759b0ca2695d22db55c"><div class="ttname"><a href="classarm__compute_1_1_size3_d.xhtml#a820c167ceaaa9759b0ca2695d22db55c">arm_compute::Size3D::depth</a></div><div class="ttdeci">size_t depth</div><div class="ttdoc">Depth of the 3D shape or object.</div><div class="ttdef"><b>Definition:</b> <a href="_size3_d_8h_source.xhtml#l00093">Size3D.h:93</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_padding3_d_xhtml_ab9332a87d0af5aa12cac847eff68b7af"><div class="ttname"><a href="structarm__compute_1_1_padding3_d.xhtml#ab9332a87d0af5aa12cac847eff68b7af">arm_compute::Padding3D::top</a></div><div class="ttdeci">size_t top</div><div class="ttdoc">Padding across the height dimenstion on the top, in elements.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00640">Types.h:640</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a6c0dcc38187027dcb89cd9724bc5a823"><div class="ttname"><a href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;...iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00074">Helpers.inl:74</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_iterator_xhtml"><div class="ttname"><a href="classarm__compute_1_1_iterator.xhtml">arm_compute::Iterator</a></div><div class="ttdoc">Iterator updated by execute_window_loop for each window element.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00046">Helpers.h:46</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_pooling3d_layer_info_xhtml_a9f7e7793c31d02fd3ba59e0fcf3ef891"><div class="ttname"><a href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a9f7e7793c31d02fd3ba59e0fcf3ef891">arm_compute::Pooling3dLayerInfo::exclude_padding</a></div><div class="ttdeci">bool exclude_padding</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01252">Types.h:1252</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a1598e7eb12a58fc53559332cd0c3ab6f"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">arm_compute::wrapper::vcombine</a></div><div class="ttdeci">uint8x16_t vcombine(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="combine_8h_source.xhtml#l00039">combine.h:39</a></div></div>
<div class="ttc" id="a_window_helpers_8h_xhtml"><div class="ttname"><a href="_window_helpers_8h.xhtml">WindowHelpers.h</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_pooling3d_layer_info_xhtml_a16875a1122accc1277a22e0ddbb8e94d"><div class="ttname"><a href="structarm__compute_1_1_pooling3d_layer_info.xhtml#a16875a1122accc1277a22e0ddbb8e94d">arm_compute::Pooling3dLayerInfo::is_global_pooling</a></div><div class="ttdeci">bool is_global_pooling</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01253">Types.h:1253</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_padding3_d_xhtml_aa185c5e9eee32898d06143bbd95f77a8"><div class="ttname"><a href="structarm__compute_1_1_padding3_d.xhtml#aa185c5e9eee32898d06143bbd95f77a8">arm_compute::Padding3D::back</a></div><div class="ttdeci">size_t back</div><div class="ttdoc">Padding across the depth dimenstion on the back, in elements.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00643">Types.h:643</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_padding3_d_xhtml_a1052a747170eed194bab868f0fce68ad"><div class="ttname"><a href="structarm__compute_1_1_padding3_d.xhtml#a1052a747170eed194bab868f0fce68ad">arm_compute::Padding3D::front</a></div><div class="ttdeci">size_t front</div><div class="ttdoc">Padding across the depth dimenstion on the front, in elements.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00642">Types.h:642</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_quantization_info_xhtml_a706fc156bcd4c45441bcaad05884b57d"><div class="ttname"><a href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">arm_compute::QuantizationInfo::uniform</a></div><div class="ttdeci">UniformQuantizationInfo uniform() const</div><div class="ttdoc">Return per layer quantization info.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00152">QuantizationInfo.h:152</a></div></div>
<div class="ttc" id="astructarm__compute_1_1wrapper_1_1traits_1_1vector__64__tag_xhtml"><div class="ttname"><a href="structarm__compute_1_1wrapper_1_1traits_1_1vector__64__tag.xhtml">arm_compute::wrapper::traits::vector_64_tag</a></div><div class="ttdoc">64-bit vector tag</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_n_e_o_n_2wrapper_2_traits_8h_source.xhtml#l00052">traits.h:52</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a4287931a2912ecb6cece71219ca5478c"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">arm_compute::wrapper::vmla</a></div><div class="ttdeci">uint8x8_t vmla(const uint8x8_t &amp;a, const uint8x8_t &amp;b, const uint8x8_t &amp;c)</div><div class="ttdef"><b>Definition:</b> <a href="mla_8h_source.xhtml#l00046">mla.h:46</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_coordinates_xhtml"><div class="ttname"><a href="classarm__compute_1_1_coordinates.xhtml">arm_compute::Coordinates</a></div><div class="ttdoc">Coordinates of an item.</div><div class="ttdef"><b>Definition:</b> <a href="_coordinates_8h_source.xhtml#l00037">Coordinates.h:37</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_info_xhtml_a3f3e1a3200223e6a304a533b1016e749"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">arm_compute::ITensorInfo::quantization_info</a></div><div class="ttdeci">virtual QuantizationInfo quantization_info() const =0</div><div class="ttdoc">Get the quantization settings (scale and offset) of the tensor.</div></div>
<div class="ttc" id="astructarm__compute_1_1_pooling3d_layer_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_pooling3d_layer_info.xhtml">arm_compute::Pooling3dLayerInfo</a></div><div class="ttdoc">Pooling Layer Information struct.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01156">Types.h:1156</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a8d1d14000c959f1146a8a64e1dafae5f"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">arm_compute::wrapper::vmax</a></div><div class="ttdeci">uint8x8_t vmax(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="max_8h_source.xhtml#l00039">max.h:39</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_padding3_d_xhtml_a951236a0702535ba18ba51db69428658"><div class="ttname"><a href="structarm__compute_1_1_padding3_d.xhtml#a951236a0702535ba18ba51db69428658">arm_compute::Padding3D::left</a></div><div class="ttdeci">size_t left</div><div class="ttdoc">Padding across the width dimenstion on the left, in elements.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00638">Types.h:638</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_uniform_quantization_info_xhtml_a1d28dec57cce925ad92342891bd71e7c"><div class="ttname"><a href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">arm_compute::UniformQuantizationInfo::scale</a></div><div class="ttdeci">float scale</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00062">QuantizationInfo.h:62</a></div></div>
<div class="ttc" id="astructarm__compute_1_1wrapper_1_1traits_1_1vector__128__tag_xhtml"><div class="ttname"><a href="structarm__compute_1_1wrapper_1_1traits_1_1vector__128__tag.xhtml">arm_compute::wrapper::traits::vector_128_tag</a></div><div class="ttdoc">128-bit vector tag</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_n_e_o_n_2wrapper_2_traits_8h_source.xhtml#l00054">traits.h:54</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a2902775707bc7bf7d6da1bda1cc15783"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">arm_compute::wrapper::vgetlow</a></div><div class="ttdeci">uint8x8_t vgetlow(const uint8x16_t val)</div><div class="ttdef"><b>Definition:</b> <a href="getlow_8h_source.xhtml#l00039">getlow.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_ae7943ea9c1f74dc72c62d4cc3966a459"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">arm_compute::wrapper::vstore</a></div><div class="ttdeci">void vstore(uint8_t *ptr, uint8x8_t val)</div><div class="ttdef"><b>Definition:</b> <a href="store_8h_source.xhtml#l00039">store.h:39</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml">arm_compute::Window</a></div><div class="ttdoc">Describe a multidimensional execution window.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00039">Window.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a4f12b7902ae53e3898b2ab779f962340"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">arm_compute::test::validation::scale</a></div><div class="ttdeci">NEScale scale</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00272">Scale.cpp:272</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2024 Arm Limited.</div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_pooling3d_layer_info_xhtml_aafa923d0a069ae069f7a9239f65452dd"><div class="ttname"><a href="structarm__compute_1_1_pooling3d_layer_info.xhtml#aafa923d0a069ae069f7a9239f65452dd">arm_compute::Pooling3dLayerInfo::pool_size</a></div><div class="ttdeci">Size3D pool_size</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01249">Types.h:1249</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_ae1a6f6dde14fc3b0470cd0b08041ea9f"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">arm_compute::wrapper::vload</a></div><div class="ttdeci">uint8x8_t vload(const uint8_t *ptr)</div><div class="ttdef"><b>Definition:</b> <a href="load_8h_source.xhtml#l00039">load.h:39</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_padding3_d_xhtml_aa022cff9934a1a99bd77c49ca6a135a2"><div class="ttname"><a href="structarm__compute_1_1_padding3_d.xhtml#aa022cff9934a1a99bd77c49ca6a135a2">arm_compute::Padding3D::right</a></div><div class="ttdeci">size_t right</div><div class="ttdoc">Padding across the width dimenstion on the right, in elements.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00639">Types.h:639</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_padding3_d_xhtml_a859088de403805f35d826df5ef39ee80"><div class="ttname"><a href="structarm__compute_1_1_padding3_d.xhtml#a859088de403805f35d826df5ef39ee80">arm_compute::Padding3D::bottom</a></div><div class="ttdeci">size_t bottom</div><div class="ttdoc">Padding across the height dimenstion on the bottom, in elements.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00641">Types.h:641</a></div></div>
<div class="ttc" id="a_i_tensor_8h_xhtml"><div class="ttname"><a href="_i_tensor_8h.xhtml">ITensor.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_1_1traits_xhtml_ac20ca549fa27b2eed44367745055a233"><div class="ttname"><a href="namespacearm__compute_1_1wrapper_1_1traits.xhtml#ac20ca549fa27b2eed44367745055a233">arm_compute::wrapper::traits::promote_t</a></div><div class="ttdeci">typename promote&lt; T &gt;::type promote_t</div><div class="ttdoc">Get promoted type.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_n_e_o_n_2wrapper_2_traits_8h_source.xhtml#l00156">traits.h:156</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a95ee388aa7c5bccab918235dc538a6b3"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">arm_compute::wrapper::vgethigh</a></div><div class="ttdeci">uint8x8_t vgethigh(const uint8x16_t val)</div><div class="ttdef"><b>Definition:</b> <a href="gethigh_8h_source.xhtml#l00039">gethigh.h:39</a></div></div>
<div class="ttc" id="a_pooling_helpers_8h_xhtml"><div class="ttname"><a href="_pooling_helpers_8h.xhtml">PoolingHelpers.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a39e87435be178fba49b76f49426ef873"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">arm_compute::wrapper::vdup_n</a></div><div class="ttdeci">uint8x8_t vdup_n(uint8_t value, traits::vector_64_tag)</div><div class="ttdef"><b>Definition:</b> <a href="dup__n_8h_source.xhtml#l00041">dup_n.h:41</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_2c61f424fd391396db977702a2beee9a.xhtml">cpu</a></li><li class="navelem"><a class="el" href="dir_1de7bcbbdec2bf3559cb3c688662d4f5.xhtml">kernels</a></li><li class="navelem"><a class="el" href="dir_21c8d6f03166d3aafa0392d7660c82ec.xhtml">pool3d</a></li><li class="navelem"><a class="el" href="dir_41237c314909f1db458f3d4338e011b5.xhtml">neon</a></li><li class="navelem"><a class="el" href="pool3d_2neon_2quantized_8h.xhtml">quantized.h</a></li>
    <li class="footer">Generated on Mon Jun 17 2024 15:11:19 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
