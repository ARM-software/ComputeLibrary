<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: GemmInterleaved&lt; strategy, To, Tr, OutputStage, MergeStep, FixedFormat, ForceThreadColumns, ForceFloatAccumulate &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.06</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classarm__gemm_1_1_gemm_interleaved.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">GemmInterleaved&lt; strategy, To, Tr, OutputStage, MergeStep, FixedFormat, ForceThreadColumns, ForceFloatAccumulate &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="gemm__interleaved_8hpp_source.xhtml">gemm_interleaved.hpp</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for GemmInterleaved&lt; strategy, To, Tr, OutputStage, MergeStep, FixedFormat, ForceThreadColumns, ForceFloatAccumulate &gt;:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classarm__gemm_1_1_gemm_interleaved__coll__graph.svg" width="266" height="231"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:add13963d432a1937370721fa61755b9c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved.xhtml#add13963d432a1937370721fa61755b9c">GemmInterleaved</a> (<a class="el" href="classarm__gemm_1_1_gemm_interleaved.xhtml">GemmInterleaved</a> &amp;)=delete</td></tr>
<tr class="separator:add13963d432a1937370721fa61755b9c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af03b8e4289fa0e112d315dd7e25ec696"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__gemm_1_1_gemm_interleaved.xhtml">GemmInterleaved</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved.xhtml#af03b8e4289fa0e112d315dd7e25ec696">operator=</a> (<a class="el" href="classarm__gemm_1_1_gemm_interleaved.xhtml">GemmInterleaved</a> &amp;)=delete</td></tr>
<tr class="separator:af03b8e4289fa0e112d315dd7e25ec696"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa0a931bb25f217a3913e39ed269855c9"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved.xhtml#aa0a931bb25f217a3913e39ed269855c9">GemmInterleaved</a> (const <a class="el" href="structarm__gemm_1_1_gemm_args.xhtml">GemmArgs</a> &amp;args, const OutputStage &amp;os)</td></tr>
<tr class="separator:aa0a931bb25f217a3913e39ed269855c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a62d3274bfacd0e46e112520266f8d68f"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved.xhtml#a62d3274bfacd0e46e112520266f8d68f">GemmInterleaved</a> (const <a class="el" href="structarm__gemm_1_1_gemm_args.xhtml">GemmArgs</a> &amp;args)</td></tr>
<tr class="separator:a62d3274bfacd0e46e112520266f8d68f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f983ca114ef72d25515a8651ea1d0e7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__gemm.xhtml#add517606da81960aed83e2e66e87ecab">ndrange_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved.xhtml#a8f983ca114ef72d25515a8651ea1d0e7">get_window_size</a> () const override</td></tr>
<tr class="separator:a8f983ca114ef72d25515a8651ea1d0e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a468e9c50d4decc2ba86f9bd393ba27d6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved.xhtml#a468e9c50d4decc2ba86f9bd393ba27d6">set_nthreads</a> (int nthreads) override</td></tr>
<tr class="separator:a468e9c50d4decc2ba86f9bd393ba27d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ada8f6414f6f5c604c7d30fd478c016c9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved.xhtml#ada8f6414f6f5c604c7d30fd478c016c9">execute</a> (const <a class="el" href="namespacearm__gemm.xhtml#a051d3dc92e26a43c1651cc8ce631c98e">ndcoord_t</a> &amp;work_range, const <a class="el" href="namespacearm__gemm.xhtml#a051d3dc92e26a43c1651cc8ce631c98e">ndcoord_t</a> &amp;, int threadid) override</td></tr>
<tr class="memdesc:ada8f6414f6f5c604c7d30fd478c016c9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Main execute member fucntion.  <a href="classarm__gemm_1_1_gemm_interleaved.xhtml#ada8f6414f6f5c604c7d30fd478c016c9">More...</a><br /></td></tr>
<tr class="separator:ada8f6414f6f5c604c7d30fd478c016c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abf5a58f6feffeae31f48b750cba9303d"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved.xhtml#abf5a58f6feffeae31f48b750cba9303d">get_working_size</a> () const override</td></tr>
<tr class="separator:abf5a58f6feffeae31f48b750cba9303d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee006b8384820aa25720e84b91b32a27"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved.xhtml#aee006b8384820aa25720e84b91b32a27">set_working_space</a> (void *working_space) override</td></tr>
<tr class="separator:aee006b8384820aa25720e84b91b32a27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac5dec5063a75604fdc60555f15577b94"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved.xhtml#ac5dec5063a75604fdc60555f15577b94">B_is_pretransposed</a> () const override</td></tr>
<tr class="separator:ac5dec5063a75604fdc60555f15577b94"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa7cfff39cbb2be65cd40042a75e5ae1c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved.xhtml#aa7cfff39cbb2be65cd40042a75e5ae1c">B_pretranspose_required</a> () const override</td></tr>
<tr class="separator:aa7cfff39cbb2be65cd40042a75e5ae1c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae9fc7380e533c43a1d91e48a7578e412"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved.xhtml#ae9fc7380e533c43a1d91e48a7578e412">get_B_pretransposed_array_size</a> () const override</td></tr>
<tr class="separator:ae9fc7380e533c43a1d91e48a7578e412"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa64943c3fd124c455d3c30599d0f663e"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved.xhtml#aa64943c3fd124c455d3c30599d0f663e">get_B_pretranspose_window_size</a> () const override</td></tr>
<tr class="separator:aa64943c3fd124c455d3c30599d0f663e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0ae716040d875abeeba60aa4a6b73363"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved.xhtml#a0ae716040d875abeeba60aa4a6b73363">requantize_bias</a> (void *in_buffer, const To *B, const int ldb, const int B_multi_stride) override</td></tr>
<tr class="separator:a0ae716040d875abeeba60aa4a6b73363"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa7c22b3d6cea9bd21ad8fc30b01bfeb8"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved.xhtml#aa7c22b3d6cea9bd21ad8fc30b01bfeb8">B_pretranspose_supports_transpose</a> () const override</td></tr>
<tr class="separator:aa7c22b3d6cea9bd21ad8fc30b01bfeb8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acdf4a3a678e1f1b72412c42457adf0cd"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved.xhtml#acdf4a3a678e1f1b72412c42457adf0cd">pretranspose_B_array</a> (void *in_buffer, const To *B, const int ldb, const int B_multi_stride, const bool transposed) override</td></tr>
<tr class="separator:acdf4a3a678e1f1b72412c42457adf0cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae6d7caee8cdfbc48555b7600022415d9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved.xhtml#ae6d7caee8cdfbc48555b7600022415d9">pretranspose_B_array_part</a> (void *in_buffer, const To *B, const int ldb, const int B_multi_stride, const bool transposed, size_t start, size_t end) override</td></tr>
<tr class="separator:ae6d7caee8cdfbc48555b7600022415d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e76d099f51fc0ef7f48dbd7d00214ac"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved.xhtml#a6e76d099f51fc0ef7f48dbd7d00214ac">set_pretransposed_B_data</a> (void *in_buffer) override</td></tr>
<tr class="separator:a6e76d099f51fc0ef7f48dbd7d00214ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f282c5814fcd207308c4737a1fc567b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved.xhtml#a4f282c5814fcd207308c4737a1fc567b">set_quantized_bias</a> (const int32_t *<a class="el" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, size_t bias_multi_stride) override</td></tr>
<tr class="separator:a4f282c5814fcd207308c4737a1fc567b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a09b8fcd4f70f2e0e45793e74fd43c21b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved.xhtml#a09b8fcd4f70f2e0e45793e74fd43c21b">set_dequantize_scale</a> (const float scale) override</td></tr>
<tr class="separator:a09b8fcd4f70f2e0e45793e74fd43c21b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a82b688818137467809617daf73ffdc11"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved.xhtml#a82b688818137467809617daf73ffdc11">set_indirect_parameters</a> (size_t string_len, const To *const *const *ptr) override</td></tr>
<tr class="separator:a82b688818137467809617daf73ffdc11"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7e6d203d0e3e46ebd521951b72c6f7c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved.xhtml#ae7e6d203d0e3e46ebd521951b72c6f7c">set_convolution_parameters</a> (<a class="el" href="structarm__gemm_1_1_convolution_parameters.xhtml">ConvolutionParameters</a> parms) override</td></tr>
<tr class="separator:ae7e6d203d0e3e46ebd521951b72c6f7c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7cde60064c88a363415fc0639d09cc3e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structarm__gemm_1_1_gemm_config.xhtml">GemmConfig</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved.xhtml#a7cde60064c88a363415fc0639d09cc3e">get_config</a> () override</td></tr>
<tr class="separator:a7cde60064c88a363415fc0639d09cc3e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarm__gemm_1_1_gemm_common"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarm__gemm_1_1_gemm_common')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarm__gemm_1_1_gemm_common.xhtml">GemmCommon&lt; To, Tr &gt;</a></td></tr>
<tr class="memitem:af6a736f1b9e80d533bd557d0fb5748bb inherit pub_methods_classarm__gemm_1_1_gemm_common"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_common.xhtml#af6a736f1b9e80d533bd557d0fb5748bb">set_arrays</a> (const To *A, const int lda, const int A_batch_stride, const int A_multi_stride, const To *B, const int ldb, const int B_multi_stride, Tr *C, const int ldc, const int C_batch_stride, const int C_multi_stride, const Tr *<a class="el" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, const int bias_multi_stride)</td></tr>
<tr class="separator:af6a736f1b9e80d533bd557d0fb5748bb inherit pub_methods_classarm__gemm_1_1_gemm_common"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b4d3fc2c5f4a97d8233231161abfc5e inherit pub_methods_classarm__gemm_1_1_gemm_common"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_common.xhtml#a2b4d3fc2c5f4a97d8233231161abfc5e">set_arrays_generic</a> (const void *A, const int lda, const int A_batch_stride, const int A_multi_stride, const void *B, const int ldb, const int B_multi_stride, void *C, const int ldc, const int C_batch_stride, const int C_multi_stride, const void *<a class="el" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, const int bias_multi_stride) override</td></tr>
<tr class="separator:a2b4d3fc2c5f4a97d8233231161abfc5e inherit pub_methods_classarm__gemm_1_1_gemm_common"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab856f71b9a4e557319b58ad4955db8b4 inherit pub_methods_classarm__gemm_1_1_gemm_common"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_common.xhtml#ab856f71b9a4e557319b58ad4955db8b4">pretranspose_B_array_generic</a> (void *out, const void *in, const int row_stride, const int multi_stride, bool transposed) override</td></tr>
<tr class="separator:ab856f71b9a4e557319b58ad4955db8b4 inherit pub_methods_classarm__gemm_1_1_gemm_common"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06f35d7bf6660463c2de462abb834f54 inherit pub_methods_classarm__gemm_1_1_gemm_common"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_common.xhtml#a06f35d7bf6660463c2de462abb834f54">pretranspose_B_array_part_generic</a> (void *out, const void *in, const int row_stride, const int multi_stride, bool transposed, size_t start, size_t end) override</td></tr>
<tr class="separator:a06f35d7bf6660463c2de462abb834f54 inherit pub_methods_classarm__gemm_1_1_gemm_common"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5fc4bc4ac3708ea77593ac974cabd426 inherit pub_methods_classarm__gemm_1_1_gemm_common"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_common.xhtml#a5fc4bc4ac3708ea77593ac974cabd426">set_indirect_parameters_generic</a> (size_t sz, const void *const *const *ptr) override</td></tr>
<tr class="separator:a5fc4bc4ac3708ea77593ac974cabd426 inherit pub_methods_classarm__gemm_1_1_gemm_common"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarm__gemm_1_1_i_gemm_common"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarm__gemm_1_1_i_gemm_common')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarm__gemm_1_1_i_gemm_common.xhtml">IGemmCommon</a></td></tr>
<tr class="memitem:af320ce710c0547bedf4f2a6f8387d396 inherit pub_methods_classarm__gemm_1_1_i_gemm_common"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_i_gemm_common.xhtml#af320ce710c0547bedf4f2a6f8387d396">supports_dynamic_scheduling</a> () const</td></tr>
<tr class="separator:af320ce710c0547bedf4f2a6f8387d396 inherit pub_methods_classarm__gemm_1_1_i_gemm_common"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d067226d7026bb265784e14b45f2890 inherit pub_methods_classarm__gemm_1_1_i_gemm_common"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_i_gemm_common.xhtml#a8d067226d7026bb265784e14b45f2890">~IGemmCommon</a> ()</td></tr>
<tr class="separator:a8d067226d7026bb265784e14b45f2890 inherit pub_methods_classarm__gemm_1_1_i_gemm_common"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:addccce609e49d240af2703319f2feae7"><td class="memTemplParams" colspan="2">template&lt;typename perf_type &gt; </td></tr>
<tr class="memitem:addccce609e49d240af2703319f2feae7"><td class="memTemplItemLeft" align="right" valign="top">static uint64_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classarm__gemm_1_1_gemm_interleaved.xhtml#addccce609e49d240af2703319f2feae7">estimate_cycles</a> (const <a class="el" href="structarm__gemm_1_1_gemm_args.xhtml">GemmArgs</a> &amp;args)</td></tr>
<tr class="separator:addccce609e49d240af2703319f2feae7"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;typename strategy, typename To, typename Tr, typename OutputStage = Nothing, bool MergeStep = true, bool FixedFormat = false, bool ForceThreadColumns = false, bool ForceFloatAccumulate = false&gt;<br />
class arm_gemm::GemmInterleaved&lt; strategy, To, Tr, OutputStage, MergeStep, FixedFormat, ForceThreadColumns, ForceFloatAccumulate &gt;</h3>


<p class="definition">Definition at line <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00424">424</a> of file <a class="el" href="gemm__interleaved_8hpp_source.xhtml">gemm_interleaved.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="add13963d432a1937370721fa61755b9c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#add13963d432a1937370721fa61755b9c">&#9670;&nbsp;</a></span>GemmInterleaved() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__gemm_1_1_gemm_interleaved.xhtml">GemmInterleaved</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__gemm_1_1_gemm_interleaved.xhtml">GemmInterleaved</a>&lt; <a class="el" href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a>, To, Tr, OutputStage, MergeStep, FixedFormat, ForceThreadColumns, ForceFloatAccumulate &gt; &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="aa0a931bb25f217a3913e39ed269855c9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa0a931bb25f217a3913e39ed269855c9">&#9670;&nbsp;</a></span>GemmInterleaved() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__gemm_1_1_gemm_interleaved.xhtml">GemmInterleaved</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__gemm_1_1_gemm_args.xhtml">GemmArgs</a> &amp;&#160;</td>
          <td class="paramname"><em>args</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const OutputStage &amp;&#160;</td>
          <td class="paramname"><em>os</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00793">793</a> of file <a class="el" href="gemm__interleaved_8hpp_source.xhtml">gemm_interleaved.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;                    : _ci(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._ci), _Msize(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Msize), _Nsize(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Nsize), _Ksize(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Ksize),</div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;                      _Ksections(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Ksections), _Ktotal(get_ktotal(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)),</div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;                      _rounded_Ksize(<a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(_Ksize, strategy::k_unroll())),</div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;                      _nbatches(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._nbatches), _nmulti(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._nmulti), _thread_columns(is_thread_columns(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)),</div>
<div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;                      _act(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._act), _accumulate(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._accumulate), _maxthreads(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._maxthreads), _nthreads(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._maxthreads),</div>
<div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;                      _k_block(get_k_block_size(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)), _x_block(get_x_block_size(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)), _Mround(<a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Msize, strategy::out_height())),</div>
<div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;                      _os(os) { }</div>
</div><!-- fragment -->
</div>
</div>
<a id="a62d3274bfacd0e46e112520266f8d68f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a62d3274bfacd0e46e112520266f8d68f">&#9670;&nbsp;</a></span>GemmInterleaved() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__gemm_1_1_gemm_interleaved.xhtml">GemmInterleaved</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__gemm_1_1_gemm_args.xhtml">GemmArgs</a> &amp;&#160;</td>
          <td class="paramname"><em>args</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00803">803</a> of file <a class="el" href="gemm__interleaved_8hpp_source.xhtml">gemm_interleaved.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;                    : _ci(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._ci), _Msize(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Msize), _Nsize(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Nsize), _Ksize(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Ksize),</div>
<div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;                      _Ksections(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Ksections), _Ktotal(get_ktotal(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)),</div>
<div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;                      _rounded_Ksize(<a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(_Ksize, strategy::k_unroll())),</div>
<div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;                      _nbatches(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._nbatches), _nmulti(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._nmulti), _thread_columns(is_thread_columns(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)),</div>
<div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;                      _act(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._act), _accumulate(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._accumulate),  _maxthreads(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._maxthreads), _nthreads(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._maxthreads),</div>
<div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;                      _k_block(get_k_block_size(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)), _x_block(get_x_block_size(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)), _Mround(<a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Msize, strategy::out_height())),</div>
<div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;                      _os() { }</div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="ac5dec5063a75604fdc60555f15577b94"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac5dec5063a75604fdc60555f15577b94">&#9670;&nbsp;</a></span>B_is_pretransposed()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool B_is_pretransposed </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarm__gemm_1_1_i_gemm_common.xhtml#a9992ba5ca09abf7df2927b433e869bb5">IGemmCommon</a>.</p>

<p class="definition">Definition at line <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l01153">1153</a> of file <a class="el" href="gemm__interleaved_8hpp_source.xhtml">gemm_interleaved.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;                                             {</div>
<div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;        <span class="keywordflow">return</span> (FixedFormat == <span class="keyword">false</span>);</div>
<div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;    }</div>
</div><!-- fragment -->
</div>
</div>
<a id="aa7cfff39cbb2be65cd40042a75e5ae1c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa7cfff39cbb2be65cd40042a75e5ae1c">&#9670;&nbsp;</a></span>B_pretranspose_required()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool B_pretranspose_required </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarm__gemm_1_1_i_gemm_common.xhtml#a59b3ebe4dbba64c14fa99d8367bfb3c9">IGemmCommon</a>.</p>

<p class="definition">Definition at line <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l01157">1157</a> of file <a class="el" href="gemm__interleaved_8hpp_source.xhtml">gemm_interleaved.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;                                                  {</div>
<div class="line"><a name="l01158"></a><span class="lineno"> 1158</span>&#160;        <span class="keywordflow">return</span> (FixedFormat == <span class="keyword">false</span>) &amp;&amp; (_B_transposed==<span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160;    }</div>
</div><!-- fragment -->
</div>
</div>
<a id="aa7c22b3d6cea9bd21ad8fc30b01bfeb8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa7c22b3d6cea9bd21ad8fc30b01bfeb8">&#9670;&nbsp;</a></span>B_pretranspose_supports_transpose()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool B_pretranspose_supports_transpose </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarm__gemm_1_1_i_gemm_common.xhtml#a6e2c44e70db7441306cd446daec706d3">IGemmCommon</a>.</p>

<p class="definition">Definition at line <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l01192">1192</a> of file <a class="el" href="gemm__interleaved_8hpp_source.xhtml">gemm_interleaved.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;                                                            {</div>
<div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;        <span class="keyword">typename</span> transform_type&lt;strategy, MergeStep &amp;&amp; std::is_same&lt;OutputStage, Requantize32&gt;::value&gt;<a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">::type</a> transforms;</div>
<div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160; </div>
<div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;        <span class="keywordflow">return</span> transforms.PrepareB_supports_transpose();</div>
<div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00347">type</a>.</p>

</div>
</div>
<a id="addccce609e49d240af2703319f2feae7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#addccce609e49d240af2703319f2feae7">&#9670;&nbsp;</a></span>estimate_cycles()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static uint64_t estimate_cycles </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__gemm_1_1_gemm_args.xhtml">GemmArgs</a> &amp;&#160;</td>
          <td class="paramname"><em>args</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l01327">1327</a> of file <a class="el" href="gemm__interleaved_8hpp_source.xhtml">gemm_interleaved.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01327"></a><span class="lineno"> 1327</span>&#160;                                                          {</div>
<div class="line"><a name="l01328"></a><span class="lineno"> 1328</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k_blocks = <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Ksize, get_k_block_size(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>));</div>
<div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160; </div>
<div class="line"><a name="l01330"></a><span class="lineno"> 1330</span>&#160;        <span class="keyword">const</span> PerformanceParameters &amp;params = strategy::template get_performance_parameters&lt;perf_type&gt;(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._ci);</div>
<div class="line"><a name="l01331"></a><span class="lineno"> 1331</span>&#160; </div>
<div class="line"><a name="l01332"></a><span class="lineno"> 1332</span>&#160;        uint64_t total_macs    = <span class="keyword">static_cast&lt;</span>uint64_t<span class="keyword">&gt;</span>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._nbatches) * <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._nmulti * <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Msize, strategy::out_height()) * <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Nsize, strategy::out_width()) * get_ktotal(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>);</div>
<div class="line"><a name="l01333"></a><span class="lineno"> 1333</span>&#160;        uint64_t prepare_bytes = <span class="keyword">static_cast&lt;</span>uint64_t<span class="keyword">&gt;</span>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._nbatches) * <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._nmulti * <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Msize, strategy::out_height()) * get_ktotal(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>) * <span class="keyword">sizeof</span>(Toi);</div>
<div class="line"><a name="l01334"></a><span class="lineno"> 1334</span>&#160;        uint64_t merge_bytes   = <span class="keyword">static_cast&lt;</span>uint64_t<span class="keyword">&gt;</span>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._nbatches) * <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._nmulti * k_blocks * <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Msize * <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Nsize, strategy::out_width()) * <span class="keyword">sizeof</span>(Tr);</div>
<div class="line"><a name="l01335"></a><span class="lineno"> 1335</span>&#160; </div>
<div class="line"><a name="l01336"></a><span class="lineno"> 1336</span>&#160;        <span class="keywordtype">float</span> mac_cycles     = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(total_macs) / params.kernel_macs_cycle;</div>
<div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;        <span class="keywordtype">float</span> prepare_cycles = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(prepare_bytes) / params.prepare_bytes_cycle;</div>
<div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160;        <span class="keywordtype">float</span> merge_cycles   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(merge_bytes) / params.merge_bytes_cycle;</div>
<div class="line"><a name="l01339"></a><span class="lineno"> 1339</span>&#160; </div>
<div class="line"><a name="l01340"></a><span class="lineno"> 1340</span>&#160;        <span class="keywordtype">float</span> total_cycles = mac_cycles + prepare_cycles + merge_cycles;</div>
<div class="line"><a name="l01341"></a><span class="lineno"> 1341</span>&#160; </div>
<div class="line"><a name="l01342"></a><span class="lineno"> 1342</span>&#160;        <span class="comment">// We can&#39;t thread over multis or width, which makes this a poor</span></div>
<div class="line"><a name="l01343"></a><span class="lineno"> 1343</span>&#160;        <span class="comment">// choice in many threaded cases.  Penalize that here.</span></div>
<div class="line"><a name="l01344"></a><span class="lineno"> 1344</span>&#160;        <span class="keywordtype">float</span> parallelism_available = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._Msize, strategy::out_height()) * <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._nbatches) * 0.9f;</div>
<div class="line"><a name="l01345"></a><span class="lineno"> 1345</span>&#160; </div>
<div class="line"><a name="l01346"></a><span class="lineno"> 1346</span>&#160;        <span class="keywordflow">if</span> (parallelism_available &lt; <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._maxthreads) {</div>
<div class="line"><a name="l01347"></a><span class="lineno"> 1347</span>&#160;            total_cycles *= (<span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>._maxthreads) / parallelism_available);</div>
<div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;        }</div>
<div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160; </div>
<div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>uint64_t<span class="keyword">&gt;</span>(total_cycles);</div>
<div class="line"><a name="l01351"></a><span class="lineno"> 1351</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner::args</a>, <a class="el" href="utils_8hpp_source.xhtml#l00065">arm_gemm::iceildiv()</a>, <a class="el" href="performance__parameters_8hpp_source.xhtml#l00029">PerformanceParameters::kernel_macs_cycle</a>, <a class="el" href="performance__parameters_8hpp_source.xhtml#l00031">PerformanceParameters::merge_bytes_cycle</a>, <a class="el" href="performance__parameters_8hpp_source.xhtml#l00030">PerformanceParameters::prepare_bytes_cycle</a>, and <a class="el" href="utils_8hpp_source.xhtml#l00070">arm_gemm::roundup()</a>.</p>

</div>
</div>
<a id="ada8f6414f6f5c604c7d30fd478c016c9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ada8f6414f6f5c604c7d30fd478c016c9">&#9670;&nbsp;</a></span>execute()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void execute </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__gemm.xhtml#a051d3dc92e26a43c1651cc8ce631c98e">ndcoord_t</a> &amp;&#160;</td>
          <td class="paramname"><em>work_range</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__gemm.xhtml#a051d3dc92e26a43c1651cc8ce631c98e">ndcoord_t</a> &amp;&#160;</td>
          <td class="paramname"><em>thread_locator</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>threadid</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Main execute member fucntion. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">work_range</td><td>specifies the range of work we want to be computed, total range defined by <a class="el" href="classarm__gemm_1_1_gemm_interleaved.xhtml#a8f983ca114ef72d25515a8651ea1d0e7">get_window_size()</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">thread_locator</td><td>where are we inside of the thread space </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">threadid</td><td>a unique threadid </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarm__gemm_1_1_i_gemm_common.xhtml#a7686815e0e1a7ed5d703a2f85ecd3b65">IGemmCommon</a>.</p>

<p class="definition">Definition at line <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00835">835</a> of file <a class="el" href="gemm__interleaved_8hpp_source.xhtml">gemm_interleaved.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;                                                                                        {</div>
<div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;<span class="preprocessor">#ifdef CYCLE_PROFILING</span></div>
<div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;        profiler prof;</div>
<div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160; </div>
<div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;        <span class="comment">/* Make sure we&#39;ve been set up correctly. */</span></div>
<div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;        assert(FixedFormat || _B_transposed);</div>
<div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;        assert(_working_space);</div>
<div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;        int8_t *working_space_bytes = <span class="keyword">reinterpret_cast&lt;</span>int8_t *<span class="keyword">&gt;</span>(_working_space);</div>
<div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160; </div>
<div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;        <span class="comment">/* Align if needed */</span></div>
<div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;        intptr_t working_space_v = <span class="keyword">reinterpret_cast&lt;</span>intptr_t<span class="keyword">&gt;</span>(_working_space);</div>
<div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;        <span class="keywordflow">if</span> (working_space_v &amp; 0x3f) {</div>
<div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;            intptr_t alignment_offset = 0x40 - (working_space_v &amp; 0x3f);</div>
<div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;            working_space_bytes += alignment_offset;</div>
<div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;        }</div>
<div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160; </div>
<div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;        <a class="code" href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a> strat(_ci);</div>
<div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160; </div>
<div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> start = work_range.get_position(0);</div>
<div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>   = work_range.get_position_end(0);</div>
<div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160; </div>
<div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;        <span class="comment">/* Translate &#39;start&#39; and &#39;end&#39; into a position within the batches and rows. */</span></div>
<div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> window_per_batch = _Mround / strategy::out_height();</div>
<div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batch_0   = start / window_per_batch;</div>
<div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batch_end = <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>   / window_per_batch;</div>
<div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160; </div>
<div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;        <span class="comment">// In ThreadColumns mode, process work one horizontal strip at a time.</span></div>
<div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;        <span class="comment">// Transpose the block of needed rows at the start, then do all the work on that block.</span></div>
<div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;        <span class="keywordflow">if</span> (_thread_columns) {</div>
<div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> start_x = work_range.get_position(1) * strategy::out_width();</div>
<div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> end_x = std::min(work_range.get_position_end(1) * strategy::out_width(), _Nsize);</div>
<div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160; </div>
<div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;            Tri * <span class="keyword">const</span> c_panel = <span class="keyword">reinterpret_cast&lt;</span>Tri *<span class="keyword">&gt;</span>(working_space_bytes + (threadid * get_c_working_size()));</div>
<div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;            Toi * <span class="keyword">const</span> a_panel = <span class="keyword">reinterpret_cast&lt;</span>Toi *<span class="keyword">&gt;</span>(working_space_bytes + (_maxthreads * get_c_working_size()) +</div>
<div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;                                       (threadid * <span class="keyword">sizeof</span>(Toi) * get_total_k_depth() * strategy::out_height()));</div>
<div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160; </div>
<div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> multi=0; multi&lt;_nmulti; multi++) {</div>
<div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k0=0; k0&lt;_Ktotal; k0+=_k_block) {</div>
<div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;                    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kmax=std::min(k0+_k_block, _Ktotal);</div>
<div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160; </div>
<div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;                    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> rounded_width = <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(_Nsize, strategy::out_width());</div>
<div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160; </div>
<div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">bool</span> first_pass = (k0==0);</div>
<div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">bool</span> last_pass  = (kmax==_Ktotal);</div>
<div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160; </div>
<div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;                    <span class="comment">// Bias is passed for the first pass only, except for dequantizefloat nomerge cases where it&#39;s the last pass.</span></div>
<div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">bool</span> bias_pass = (std::is_same&lt;OutputStage, DequantizeFloat&gt;::value &amp;&amp; !MergeStep) ? last_pass : first_pass;</div>
<div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160; </div>
<div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;                    <span class="comment">// Figure out how many &quot;K&quot; the kernel will actually process.</span></div>
<div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;                    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kern_k = <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(kmax - k0, strategy::k_unroll());</div>
<div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160; </div>
<div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;                    <span class="keyword">const</span> Toi *b_ptr = FixedFormat ?</div>
<div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;                        <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>Toi *<span class="keyword">&gt;</span>(this-&gt;_Bptr) + (multi * this-&gt;_B_multi_stride) +</div>
<div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;                                                     ((start_x / get_stripe_width&lt;strategy, FixedFormat&gt;::get()) * this-&gt;_ldb) +</div>
<div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;                                                     (k0 * get_stripe_width&lt;strategy, FixedFormat&gt;::get()) :</div>
<div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;                        _B_transposed + (rounded_width * _Ktotal * multi) + (k0 * rounded_width) + (start_x * kern_k);</div>
<div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160; </div>
<div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;                    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batch     = batch_0;</div>
<div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;                    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> start_row = (start - (batch_0 * window_per_batch)) * strategy::out_height();</div>
<div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160; </div>
<div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> p=start; p&lt;<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>; p++) {</div>
<div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;                        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> end_row = std::min(start_row + strategy::out_height(), _Msize);</div>
<div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160; </div>
<div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;                        <span class="comment">// Set up transposed &#39;A&#39; block</span></div>
<div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;                        {</div>
<div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;<span class="preprocessor">#ifdef CYCLE_PROFILING</span></div>
<div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;                            <span class="keyword">auto</span> p=prof.ScopedProfiler(PROFILE_PREPA, strategy::out_height() * (kmax-k0) * <span class="keyword">sizeof</span>(Toi));</div>
<div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;                            <span class="comment">// See comment above on transform_type&lt;&gt; class: this extracts either &#39;transforms&#39; or</span></div>
<div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;                            <span class="comment">// &#39;transforms_quantized&#39; as appropriate.</span></div>
<div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;                            <span class="keyword">typename</span> transform_type&lt;strategy, MergeStep &amp;&amp; std::is_same&lt;OutputStage, Requantize32&gt;::value&gt;<a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">::type</a> transforms;</div>
<div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160; </div>
<div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;                            <span class="keywordflow">if</span> (_indirect_buf != <span class="keyword">nullptr</span>) {</div>
<div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;                                transforms.PrepareA_indirect(a_panel,</div>
<div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;                                                             _indirect_buf + (multi * _nbatches * _Ksections) + (batch * _Ksections), _Ksize,</div>
<div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;                                                             _rounded_Ksize, start_row, end_row, k0, kmax, row_sum_multiplier());</div>
<div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;                            } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (_convolver) {</div>
<div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;                                transforms.PrepareA_convolution(a_panel,</div>
<div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;                                                                this-&gt;_Aptr + (batch * this-&gt;_A_batch_stride) + (multi * this-&gt;_A_multi_stride),</div>
<div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;                                                                this-&gt;_lda, *_convolver, _rounded_Ksize, start_row, end_row, k0, kmax, row_sum_multiplier());</div>
<div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;                            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;                                transforms.PrepareA(a_panel,</div>
<div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;                                                    this-&gt;_Aptr + (batch * this-&gt;_A_batch_stride) + (multi * this-&gt;_A_multi_stride),</div>
<div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;                                                    this-&gt;_lda, start_row, end_row, k0, std::min(kmax, _Ksize), row_sum_multiplier());</div>
<div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;                            }</div>
<div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;                        }</div>
<div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160; </div>
<div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;                        Tr *result_ptr = this-&gt;_Cptr + (batch * this-&gt;_C_batch_stride) + (multi * this-&gt;_C_multi_stride);</div>
<div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160; </div>
<div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;                        <span class="comment">// If we are using an accumulation buffer and this isn&#39;t the last pass, don&#39;t pass a result pointer.</span></div>
<div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;                        <span class="keywordflow">if</span> (_accumulation_buffer &amp;&amp; !last_pass) {</div>
<div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;                            result_ptr = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;                        }</div>
<div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160; </div>
<div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;                        <span class="comment">// Perform the kernel and merge step, either separately or together as required.</span></div>
<div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;                        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a06403ad5596b5405787cfca12e5b815e">kernel_and_merge&lt;MergeStep, FixedFormat, OutputStage&gt;::run</a>(</div>
<div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;                        #ifdef CYCLE_PROFILING</div>
<div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;                            prof,</div>
<div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;                        #endif</div>
<div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;                            <span class="comment">// Strategy and panel pointers</span></div>
<div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;                            strat, a_panel, b_ptr, this-&gt;_ldb, c_panel,</div>
<div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;                            <span class="comment">// Result buffer pointers</span></div>
<div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;                            result_ptr, this-&gt;_ldc,</div>
<div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;                            <span class="comment">// K size, and M/N ranges</span></div>
<div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;                            kern_k, start_row, end_row, start_x, end_x,</div>
<div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;                            <span class="comment">// Only do bias on the first pass</span></div>
<div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;                            ((bias_pass &amp;&amp; this-&gt;_bias) ? this-&gt;_bias + (multi * this-&gt;_bias_multi_stride) : <span class="keyword">nullptr</span>),</div>
<div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;                            <span class="comment">// Only do activation on the last pass, and accumulation on any non-first pass.</span></div>
<div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;                            (last_pass ? _act : <a class="code" href="namespacearm__compute_1_1graph.xhtml#a5f9016ea3e28a033b7cc216bdda912be">Activation</a>()), (!first_pass || _accumulate),</div>
<div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;                            <span class="comment">// Pass in quantization parameters for requantizing kernels (others will ignore)</span></div>
<div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;                            _os, col_bias + (multi * _Nsize),</div>
<div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;                            <span class="comment">// Accumulation buffer</span></div>
<div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;                            get_accumulation_buffer(start_row, start_x, batch, multi));</div>
<div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160; </div>
<div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;                        <span class="comment">/* Increment to the next block */</span></div>
<div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;                        start_row += strategy::out_height();</div>
<div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;                        <span class="keywordflow">if</span> (start_row &gt;= _Msize) {</div>
<div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;                            start_row = 0;</div>
<div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;                            batch++;</div>
<div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;                        }</div>
<div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;                    }</div>
<div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;                }</div>
<div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;            }</div>
<div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;        } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;            blockwalker current(*<span class="keyword">this</span>);</div>
<div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160; </div>
<div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;            <span class="comment">/* Compute the M values to operate on */</span></div>
<div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_0   = (start - (batch_0 * window_per_batch)) * strategy::out_height();</div>
<div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_max = (<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a> - (batch_end * window_per_batch)) * strategy::out_height();</div>
<div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160; </div>
<div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;            <span class="comment">// Private buffers.  Treat working_space as an array of C buffers</span></div>
<div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;            <span class="comment">// (one per thread) first, followed by the (window-divided) A</span></div>
<div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;            <span class="comment">// buffer.</span></div>
<div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;            <span class="comment">// Set a_panel to the base of the A buffers - compute offsets into it based on M/batches later.</span></div>
<div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;            Toi * <span class="keyword">const</span> a_panel = <span class="keyword">reinterpret_cast&lt;</span>Toi *<span class="keyword">&gt;</span>(working_space_bytes + (_maxthreads * get_c_working_size()));</div>
<div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;            Tri * <span class="keyword">const</span> c_panel = <span class="keyword">reinterpret_cast&lt;</span>Tri *<span class="keyword">&gt;</span>(working_space_bytes + (threadid * get_c_working_size()));</div>
<div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160; </div>
<div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;            <span class="keyword">const</span> Toi *b_panel;</div>
<div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;            b_panel = _B_transposed;</div>
<div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160; </div>
<div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;            <span class="comment">// newkblock() is always true on the first iteration, so these will be set properly on the first loop.</span></div>
<div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160; </div>
<div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;            <span class="comment">// kern_k tracks the accumulation depth for the CURRENT K block a_panel_stride similarly tracks the total</span></div>
<div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;            <span class="comment">// stride of the A panel (i.e.  with 4 added for cases with embedded row sums)</span></div>
<div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160; </div>
<div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;            <span class="comment">// These are distinct from k_block and get_total_k_depth() which are based on the target K block size, and</span></div>
<div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;            <span class="comment">// used for addressing inside a_panel.</span></div>
<div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160; </div>
<div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;            <span class="comment">// In cases where K blocking is in use and the blocks are not all the same size, the (smaller) final block</span></div>
<div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;            <span class="comment">// won&#39;t use all the memory allocated.</span></div>
<div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kern_k = 0;</div>
<div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> a_panel_stride = 0;</div>
<div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160; </div>
<div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;            <span class="keywordflow">for</span> (;!current.done();current.advance()) {</div>
<div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;                <span class="keywordflow">if</span> (current.newkblock()) {</div>
<div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;<span class="preprocessor">#ifdef CYCLE_PROFILING</span></div>
<div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;                    <span class="keyword">auto</span> p=prof.ScopedProfiler(PROFILE_PREPA, (<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a> - start) * strategy::out_height() * (current.kmax()-current.k0()) * <span class="keyword">sizeof</span>(Toi));</div>
<div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;                    <span class="comment">// See comment above on transform_type&lt;&gt; class: this extracts either &#39;transforms&#39; or</span></div>
<div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;                    <span class="comment">// &#39;transforms_quantized&#39; as appropriate.</span></div>
<div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;                    <span class="keyword">typename</span> transform_type&lt;strategy, MergeStep &amp;&amp; std::is_same&lt;OutputStage, Requantize32&gt;::value&gt;<a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">::type</a> transforms;</div>
<div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160; </div>
<div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batch = batch_0; batch &lt;= batch_end; batch++) {</div>
<div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;                        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> first_m = (batch == batch_0)   ? m_0   : 0;</div>
<div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;                        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> last_m  = (batch == batch_end) ? m_max : _Msize;</div>
<div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160; </div>
<div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;                        <span class="keywordflow">if</span> (first_m &gt;= last_m)</div>
<div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;                            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160; </div>
<div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;                        <span class="keywordflow">if</span> (_indirect_buf != <span class="keyword">nullptr</span>) {</div>
<div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;                            transforms.PrepareA_indirect(a_panel + ((batch * _Mround + first_m) * get_total_k_depth()),</div>
<div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;                                                      _indirect_buf + (current.multi() * _nbatches * _Ksections) + (batch * _Ksections), _Ksize,</div>
<div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;                                                      _rounded_Ksize, first_m, last_m, current.k0(), current.kmax(), row_sum_multiplier());</div>
<div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;                        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (_convolver) {</div>
<div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;                            transforms.PrepareA_convolution(a_panel + ((batch * _Mround + first_m) * get_total_k_depth()),</div>
<div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;                                                      this-&gt;_Aptr + (batch * this-&gt;_A_batch_stride) + (current.multi() * this-&gt;_A_multi_stride),</div>
<div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;                                                      this-&gt;_lda, *_convolver, _rounded_Ksize, first_m, last_m, current.k0(), current.kmax(), row_sum_multiplier());</div>
<div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;                        } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;                            transforms.PrepareA(a_panel + ((batch * _Mround + first_m) * get_total_k_depth()),</div>
<div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;                                                      this-&gt;_Aptr + (batch * this-&gt;_A_batch_stride) + (current.multi() * this-&gt;_A_multi_stride),</div>
<div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;                                                      this-&gt;_lda, first_m, last_m, current.k0(), std::min(_Ksize, current.kmax()), row_sum_multiplier());</div>
<div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;                        }</div>
<div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;                    }</div>
<div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160; </div>
<div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;                    <span class="comment">// Figure out how many &quot;K&quot; the kernel will actually process.</span></div>
<div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;                    kern_k = <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(current.kmax() - current.k0(), strategy::k_unroll());</div>
<div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160; </div>
<div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;                    <span class="comment">// Requantizing GEMMs have the row sums built in to the</span></div>
<div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;                    <span class="comment">// transposed data, so the stride between rows is 4 bytes</span></div>
<div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;                    <span class="comment">// larger than the (rounded) K value.</span></div>
<div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160; </div>
<div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;                    <span class="keywordflow">if</span>(std::is_same&lt;OutputStage, Requantize32&gt;::value) {</div>
<div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;                        a_panel_stride = kern_k + (<span class="keyword">sizeof</span>(int32_t) / <span class="keyword">sizeof</span>(Toi));</div>
<div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;                    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;                        a_panel_stride = kern_k;</div>
<div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;                    }</div>
<div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;                }</div>
<div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160; </div>
<div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;                <span class="comment">// For FixedFormat cases, figure out the B pointer.  The loop below moves through batches and vertically through the output so this will be the same throughout.</span></div>
<div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;                <span class="keywordflow">if</span> (FixedFormat) {</div>
<div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;                    b_panel = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>Toi *<span class="keyword">&gt;</span>(this-&gt;_Bptr) + (current.multi() * this-&gt;_B_multi_stride) +</div>
<div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;                                                                           ((current.x0() / get_stripe_width&lt;strategy, FixedFormat&gt;::get()) * this-&gt;_ldb) +</div>
<div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;                                                                           (current.k0() * get_stripe_width&lt;strategy, FixedFormat&gt;::get());</div>
<div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;                }</div>
<div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160; </div>
<div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;                <span class="comment">/* Do the actual work. */</span></div>
<div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batch = batch_0; batch &lt;= batch_end; batch++) {</div>
<div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;                    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> first_m = (batch == batch_0)   ? m_0   : 0;</div>
<div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;                    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> last_m  = (batch == batch_end) ? m_max : _Msize;</div>
<div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160; </div>
<div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;                    <span class="keyword">const</span> Toi *a_ptr = a_panel + (batch * _Mround + first_m) * get_total_k_depth();</div>
<div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160; </div>
<div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;                    <span class="keywordflow">if</span> (first_m &gt;= last_m)</div>
<div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;                        <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160; </div>
<div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;                    <span class="comment">// For the merge case we need to do this out_height() rows</span></div>
<div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;                    <span class="comment">// at a time, as that is the size of our intermediate</span></div>
<div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;                    <span class="comment">// buffer.  If we are not doing that, we can do all the</span></div>
<div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;                    <span class="comment">// relevant rows in one go.</span></div>
<div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;                    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_step = MergeStep ? strategy::out_height() : (last_m - first_m);</div>
<div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160; </div>
<div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;                    <span class="comment">// But in the case where we have an accumulation buffer, we can&#39;t do that after all, unless</span></div>
<div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;                    <span class="comment">// there is no N blocking.</span></div>
<div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;                    <span class="keywordflow">if</span> (_accumulation_buffer &amp;&amp; ((current.x0() != 0) || (current.xmax() &lt; _Nsize))) {</div>
<div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;                        m_step = strategy::out_height();</div>
<div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;                    }</div>
<div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160; </div>
<div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> y=first_m; y&lt;last_m; y+=m_step) {</div>
<div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;                        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ymax = std::min(_Msize, y + m_step);</div>
<div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160; </div>
<div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;                        <span class="keyword">const</span> <span class="keywordtype">bool</span> first_pass = (current.k0() == 0);</div>
<div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;                        <span class="keyword">const</span> <span class="keywordtype">bool</span> last_pass  = (current.kmax() == _Ktotal);</div>
<div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160; </div>
<div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;                        <span class="comment">// Bias is passed for the first pass only, except for dequantizefloat nomerge cases where it&#39;s the last pass.</span></div>
<div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;                        <span class="keyword">const</span> <span class="keywordtype">bool</span> bias_pass = (std::is_same&lt;OutputStage, DequantizeFloat&gt;::value &amp;&amp; !MergeStep) ? last_pass : first_pass;</div>
<div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160; </div>
<div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;                        <span class="comment">// Pointer to appropriate part of result array.</span></div>
<div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;                        Tr *result_ptr = this-&gt;_Cptr + (batch * this-&gt;_C_batch_stride) + (current.multi() * this-&gt;_C_multi_stride);</div>
<div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160; </div>
<div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;                        <span class="comment">// If we are using an accumulation buffer, we don&#39;t pass the result buffer to ask the kernel</span></div>
<div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;                        <span class="comment">// to write things into the accumulation buffer instead, except on the last pass.</span></div>
<div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;                        <span class="keywordflow">if</span> (_accumulation_buffer &amp;&amp; !last_pass) {</div>
<div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;                            result_ptr = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;                        }</div>
<div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160; </div>
<div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;                        <span class="comment">// Perform the kernel and merge step, either separately or together as required.</span></div>
<div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;                        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a06403ad5596b5405787cfca12e5b815e">kernel_and_merge&lt;MergeStep, FixedFormat, OutputStage&gt;::run</a>(</div>
<div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;                        #ifdef CYCLE_PROFILING</div>
<div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;                            prof,</div>
<div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;                        #endif</div>
<div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;                            <span class="comment">// Strategy and panel pointers</span></div>
<div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;                            strat, a_ptr, b_panel, this-&gt;_ldb, c_panel,</div>
<div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;                            <span class="comment">// Result buffer pointers</span></div>
<div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;                            result_ptr, this-&gt;_ldc,</div>
<div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;                            <span class="comment">// K size, and M/N ranges</span></div>
<div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;                            kern_k, y, ymax, current.x0(), current.xmax(),</div>
<div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;                            <span class="comment">// Only do bias on the first pass</span></div>
<div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;                            ((bias_pass &amp;&amp; this-&gt;_bias) ? this-&gt;_bias + (current.multi() * this-&gt;_bias_multi_stride) : <span class="keyword">nullptr</span>),</div>
<div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;                            <span class="comment">// Only do activation on the last pass, and accumulation on any non-first pass.</span></div>
<div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;                            (last_pass ? _act : <a class="code" href="namespacearm__compute_1_1graph.xhtml#a5f9016ea3e28a033b7cc216bdda912be">Activation</a>()), (!first_pass || _accumulate),</div>
<div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;                            <span class="comment">// Pass in quantization parameters for requantizing kernels (others will ignore)</span></div>
<div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;                            _os, col_bias + (current.multi() * _Nsize),</div>
<div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;                            <span class="comment">// Accumulation buffer</span></div>
<div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;                            get_accumulation_buffer(y, current.x0(), batch, current.multi()) );</div>
<div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160; </div>
<div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;                        a_ptr += (strategy::out_height() * a_panel_stride);</div>
<div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;                    }</div>
<div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;                }</div>
<div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160; </div>
<div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;                <span class="keywordflow">if</span> (FixedFormat == <span class="keyword">false</span>) {</div>
<div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;                    b_panel += (<a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(current.xmax() - current.x0(), strategy::out_width()) * kern_k);</div>
<div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;                }</div>
<div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;            }</div>
<div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;        }</div>
<div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_m_l_g_o_parser_8cpp_source.xhtml#l00283">arm_compute::mlgo::parser::end()</a>, <a class="el" href="ndrange_8hpp_source.xhtml#l00173">NDCoordinate&lt; N &gt;::get_position()</a>, <a class="el" href="ndrange_8hpp_source.xhtml#l00187">NDCoordinate&lt; N &gt;::get_position_end()</a>, <a class="el" href="utils_8hpp_source.xhtml#l00070">arm_gemm::roundup()</a>, <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#a06403ad5596b5405787cfca12e5b815e">arm_compute::test::validation::run()</a>, <a class="el" href="working__space_8hpp_source.xhtml#l00105">strategy</a>, and <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00347">type</a>.</p>

</div>
</div>
<a id="aa64943c3fd124c455d3c30599d0f663e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa64943c3fd124c455d3c30599d0f663e">&#9670;&nbsp;</a></span>get_B_pretranspose_window_size()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t get_B_pretranspose_window_size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarm__gemm_1_1_i_gemm_common.xhtml#a37e8736d7db6afdeab374b248599a573">IGemmCommon</a>.</p>

<p class="definition">Definition at line <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l01171">1171</a> of file <a class="el" href="gemm__interleaved_8hpp_source.xhtml">gemm_interleaved.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;                                                           {</div>
<div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;        <span class="keywordtype">size_t</span> n_blocks = <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(_Nsize, _x_block);</div>
<div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;        <span class="keywordtype">size_t</span> k_blocks = <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(_Ktotal, _k_block);</div>
<div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160; </div>
<div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;        <span class="keywordflow">return</span> n_blocks * k_blocks * _nmulti;</div>
<div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="utils_8hpp_source.xhtml#l00065">arm_gemm::iceildiv()</a>.</p>

<p class="reference">Referenced by <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l01198">GemmInterleaved&lt; strategy, To, Tr, OutputStage, MergeStep, FixedFormat, ForceThreadColumns, ForceFloatAccumulate &gt;::pretranspose_B_array()</a>, and <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l01202">GemmInterleaved&lt; strategy, To, Tr, OutputStage, MergeStep, FixedFormat, ForceThreadColumns, ForceFloatAccumulate &gt;::pretranspose_B_array_part()</a>.</p>

</div>
</div>
<a id="ae9fc7380e533c43a1d91e48a7578e412"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae9fc7380e533c43a1d91e48a7578e412">&#9670;&nbsp;</a></span>get_B_pretransposed_array_size()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t get_B_pretransposed_array_size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarm__gemm_1_1_i_gemm_common.xhtml#ab32fbd73de4fd392a14b674fbcbd6e7f">IGemmCommon</a>.</p>

<p class="definition">Definition at line <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l01161">1161</a> of file <a class="el" href="gemm__interleaved_8hpp_source.xhtml">gemm_interleaved.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;                                                           {</div>
<div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;        <span class="keywordflow">if</span> (FixedFormat) {</div>
<div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;            <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;        }</div>
<div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160; </div>
<div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> x_size = <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(_Nsize, strategy::out_width());</div>
<div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160; </div>
<div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;        <span class="keywordflow">return</span> (x_size * _Ktotal * _nmulti * <span class="keyword">sizeof</span>(Toi)) + get_col_sum_size();</div>
<div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="utils_8hpp_source.xhtml#l00070">arm_gemm::roundup()</a>.</p>

</div>
</div>
<a id="a7cde60064c88a363415fc0639d09cc3e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7cde60064c88a363415fc0639d09cc3e">&#9670;&nbsp;</a></span>get_config()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structarm__gemm_1_1_gemm_config.xhtml">GemmConfig</a> get_config </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarm__gemm_1_1_i_gemm_common.xhtml#a9a7fd4eeb44e91ea8f8ed53d21b9691f">IGemmCommon</a>.</p>

<p class="definition">Definition at line <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l01353">1353</a> of file <a class="el" href="gemm__interleaved_8hpp_source.xhtml">gemm_interleaved.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01353"></a><span class="lineno"> 1353</span>&#160;                                     {</div>
<div class="line"><a name="l01354"></a><span class="lineno"> 1354</span>&#160;        GemmConfig c;</div>
<div class="line"><a name="l01355"></a><span class="lineno"> 1355</span>&#160; </div>
<div class="line"><a name="l01356"></a><span class="lineno"> 1356</span>&#160;        c.method = <a class="code" href="namespacearm__gemm.xhtml#a24fb31c876e67f529bd128983460f6f5a4a554761cc948f6b9437c42fd62a1d01">GemmMethod::GEMM_INTERLEAVED</a>;</div>
<div class="line"><a name="l01357"></a><span class="lineno"> 1357</span>&#160;        c.inner_block_size = _k_block;</div>
<div class="line"><a name="l01358"></a><span class="lineno"> 1358</span>&#160;        c.outer_block_size = _x_block;</div>
<div class="line"><a name="l01359"></a><span class="lineno"> 1359</span>&#160;        c.filter = get_type_name&lt;strategy&gt;();</div>
<div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160;        c.weight_format = <a class="code" href="namespacearm__gemm.xhtml#a2ca80c12b0bbb50666d5a1a122359616">get_weight_format</a>(get_kernel_weight_format&lt;strategy, FixedFormat, To&gt;::get(), <span class="keyword">sizeof</span>(To));</div>
<div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160; </div>
<div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;        <span class="keywordflow">return</span> c;</div>
<div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__gemm_8hpp_source.xhtml#l00112">GemmConfig::filter</a>, <a class="el" href="namespacearm__gemm.xhtml#a24fb31c876e67f529bd128983460f6f5a4a554761cc948f6b9437c42fd62a1d01">arm_gemm::GEMM_INTERLEAVED</a>, <a class="el" href="misc_8cpp_source.xhtml#l00040">arm_gemm::get_weight_format()</a>, <a class="el" href="arm__gemm_8hpp_source.xhtml#l00113">GemmConfig::inner_block_size</a>, <a class="el" href="arm__gemm_8hpp_source.xhtml#l00111">GemmConfig::method</a>, <a class="el" href="arm__gemm_8hpp_source.xhtml#l00114">GemmConfig::outer_block_size</a>, and <a class="el" href="arm__gemm_8hpp_source.xhtml#l00115">GemmConfig::weight_format</a>.</p>

</div>
</div>
<a id="a8f983ca114ef72d25515a8651ea1d0e7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8f983ca114ef72d25515a8651ea1d0e7">&#9670;&nbsp;</a></span>get_window_size()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__gemm.xhtml#add517606da81960aed83e2e66e87ecab">ndrange_t</a> get_window_size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>an ndrange containing ranges of the compute space which can be broken up and parallelised over </dd></dl>

<p>Implements <a class="el" href="classarm__gemm_1_1_i_gemm_common.xhtml#a06ec4bc84b2197e53f665ac9a31df52e">IGemmCommon</a>.</p>

<p class="definition">Definition at line <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00818">818</a> of file <a class="el" href="gemm__interleaved_8hpp_source.xhtml">gemm_interleaved.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;                                               {</div>
<div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> row_blocks = (_Mround / strategy::out_height()) * _nbatches;</div>
<div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160; </div>
<div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;        <span class="keywordflow">if</span> (_thread_columns) {</div>
<div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;            <span class="keywordflow">return</span> { row_blocks, <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(_Nsize, strategy::out_width()) };</div>
<div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;        } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;            <span class="comment">// _Mround is a multiple of out_height by definition.</span></div>
<div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;            <span class="keywordflow">return</span> { row_blocks };</div>
<div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;        }</div>
<div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="utils_8hpp_source.xhtml#l00065">arm_gemm::iceildiv()</a>.</p>

</div>
</div>
<a id="abf5a58f6feffeae31f48b750cba9303d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abf5a58f6feffeae31f48b750cba9303d">&#9670;&nbsp;</a></span>get_working_size()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t get_working_size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarm__gemm_1_1_i_gemm_common.xhtml#ab0a90e40986e0daec072bfbfb89aa17d">IGemmCommon</a>.</p>

<p class="definition">Definition at line <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l01113">1113</a> of file <a class="el" href="gemm__interleaved_8hpp_source.xhtml">gemm_interleaved.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;                                             {</div>
<div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;        <span class="comment">// In all cases, we need one A buffer plus a C buffer per thread, plus an accumulation buffer.</span></div>
<div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;        <span class="keywordtype">size_t</span> size = get_a_working_size() + (get_c_working_size() * _maxthreads) + get_accumulation_buffer_size();</div>
<div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160; </div>
<div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;        size += 128; <span class="comment">// Add on two cache lines extra for alignment.</span></div>
<div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160; </div>
<div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;        <span class="keywordflow">return</span> size;</div>
<div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;    }</div>
</div><!-- fragment -->
</div>
</div>
<a id="af03b8e4289fa0e112d315dd7e25ec696"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af03b8e4289fa0e112d315dd7e25ec696">&#9670;&nbsp;</a></span>operator=()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__gemm_1_1_gemm_interleaved.xhtml">GemmInterleaved</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__gemm_1_1_gemm_interleaved.xhtml">GemmInterleaved</a>&lt; <a class="el" href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a>, To, Tr, OutputStage, MergeStep, FixedFormat, ForceThreadColumns, ForceFloatAccumulate &gt; &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="acdf4a3a678e1f1b72412c42457adf0cd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acdf4a3a678e1f1b72412c42457adf0cd">&#9670;&nbsp;</a></span>pretranspose_B_array()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void pretranspose_B_array </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>in_buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const To *&#160;</td>
          <td class="paramname"><em>B</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>ldb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>B_multi_stride</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>transposed</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarm__gemm_1_1_gemm_common.xhtml#a6312950b75b68770f14e6d9c610ab83c">GemmCommon&lt; To, Tr &gt;</a>.</p>

<p class="definition">Definition at line <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l01198">1198</a> of file <a class="el" href="gemm__interleaved_8hpp_source.xhtml">gemm_interleaved.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;                                                                                                                                     {</div>
<div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;        <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml#ae6d7caee8cdfbc48555b7600022415d9">pretranspose_B_array_part</a>(in_buffer, B, ldb, B_multi_stride, transposed, 0, <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml#aa64943c3fd124c455d3c30599d0f663e">get_B_pretranspose_window_size</a>());</div>
<div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l01171">GemmInterleaved&lt; strategy, To, Tr, OutputStage, MergeStep, FixedFormat, ForceThreadColumns, ForceFloatAccumulate &gt;::get_B_pretranspose_window_size()</a>, and <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l01202">GemmInterleaved&lt; strategy, To, Tr, OutputStage, MergeStep, FixedFormat, ForceThreadColumns, ForceFloatAccumulate &gt;::pretranspose_B_array_part()</a>.</p>

</div>
</div>
<a id="ae6d7caee8cdfbc48555b7600022415d9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae6d7caee8cdfbc48555b7600022415d9">&#9670;&nbsp;</a></span>pretranspose_B_array_part()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void pretranspose_B_array_part </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>in_buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const To *&#160;</td>
          <td class="paramname"><em>B</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>ldb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>B_multi_stride</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>transposed</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarm__gemm_1_1_gemm_common.xhtml#ad2d7875275f96fa15c6e203d35eb07e9">GemmCommon&lt; To, Tr &gt;</a>.</p>

<p class="definition">Definition at line <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l01202">1202</a> of file <a class="el" href="gemm__interleaved_8hpp_source.xhtml">gemm_interleaved.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;                                                                                                                                                                    {</div>
<div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;        <span class="comment">// Perform column sums etc as part of the last block.</span></div>
<div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a> &gt;= <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml#aa64943c3fd124c455d3c30599d0f663e">get_B_pretranspose_window_size</a>()) {</div>
<div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;            <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml#a0ae716040d875abeeba60aa4a6b73363">requantize_bias</a>(in_buffer, B, ldb, B_multi_stride);</div>
<div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;        }</div>
<div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160; </div>
<div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;        <span class="comment">// Put the transposed data after the column sums - in non-quantized cases get_col_sum_size() == 0</span></div>
<div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;        uintptr_t buffer_int = <span class="keyword">reinterpret_cast&lt;</span>uintptr_t<span class="keyword">&gt;</span>(in_buffer);</div>
<div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;        Toi *buffer = <span class="keyword">reinterpret_cast&lt;</span>Toi *<span class="keyword">&gt;</span>(buffer_int + get_col_sum_size());</div>
<div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;        _B_transposed = buffer;</div>
<div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160; </div>
<div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;        blockwalker current(*<span class="keyword">this</span>);</div>
<div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;        <a class="code" href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a> strat(_ci);</div>
<div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160; </div>
<div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;        <span class="comment">// Skip over blocks we aren&#39;t doing</span></div>
<div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i = 0; i &lt; start; i++) {</div>
<div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;            buffer += <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(current.xmax() - current.x0(), strategy::out_width()) * <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(current.kmax() - current.k0(), strategy::k_unroll());</div>
<div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;            current.advance();</div>
<div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;        }</div>
<div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160; </div>
<div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;        <span class="keywordtype">size_t</span> blocks_left = (<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a> - start);</div>
<div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160; </div>
<div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;        <span class="comment">// Double check that we haven&#39;t run out of work</span></div>
<div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;        <span class="keywordflow">if</span> (current.done()) {</div>
<div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;            blocks_left = 0;</div>
<div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;        }</div>
<div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160; </div>
<div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;        <span class="keywordflow">for</span> (<span class="comment">/* blocks_left initialized above */</span>; blocks_left &gt; 0; blocks_left--) {</div>
<div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;            <span class="comment">/* Figure out the size of each block. */</span></div>
<div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k_size = (current.kmax() - current.k0());</div>
<div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160; </div>
<div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;            <span class="keywordflow">if</span> (_Ksections &gt; 1) {</div>
<div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;                <span class="comment">// We need to insert padding at the end of each K section.</span></div>
<div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;                <span class="comment">// The computation needed is a little delicate - the coordinates from the block walker are expressed in</span></div>
<div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;                <span class="comment">// terms of the full, padded, _Ktotal.</span></div>
<div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;                <span class="comment">// But we need to transform each section with reference to the original, unpadded, input, letting the</span></div>
<div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;                <span class="comment">// transform pad each section as needed.</span></div>
<div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160; </div>
<div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;                <span class="comment">// This is needed for computations below.</span></div>
<div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> rounded_section_size = <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(_Ksize, strategy::k_unroll());</div>
<div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160; </div>
<div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;                <span class="comment">// The expected output format is also an entire &lt;out_width&gt; columns interleaved, then the next set of</span></div>
<div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;                <span class="comment">// columns, and so on.  This means, as we are breaking it up vertically, we have to do it one column at</span></div>
<div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;                <span class="comment">// a time.</span></div>
<div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> x0=current.x0(); x0 &lt; current.xmax(); x0 += strategy::out_width() ) {</div>
<div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;                    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> xmax = std::min(x0 + strategy::out_width(), current.xmax());</div>
<div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160; </div>
<div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;                    <span class="comment">// Track where we are and how much work is left.</span></div>
<div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;                    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kpos  = current.k0();</div>
<div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;                    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kleft = k_size;</div>
<div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160; </div>
<div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;                    <span class="keywordflow">while</span> (kleft) {</div>
<div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;                        <span class="comment">// Which section are we in?  Based on the rounded-up section size.</span></div>
<div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;                        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k_section_base = kpos / rounded_section_size;</div>
<div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;                        <span class="comment">// How far into the section are we?</span></div>
<div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;                        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k_offset = kpos - (k_section_base * rounded_section_size);</div>
<div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160; </div>
<div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;                        <span class="comment">// We will either copy the rest of this section, or to the end of the requested length.</span></div>
<div class="line"><a name="l01260"></a><span class="lineno"> 1260</span>&#160;                        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k_length = std::min(_Ksize - k_offset, kleft);</div>
<div class="line"><a name="l01261"></a><span class="lineno"> 1261</span>&#160; </div>
<div class="line"><a name="l01262"></a><span class="lineno"> 1262</span>&#160;                        strat.transforms.PrepareB(buffer, B + (current.multi() * B_multi_stride), ldb,</div>
<div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;                                                  x0, xmax,</div>
<div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160;                                                  (k_section_base * _Ksize) + k_offset,               <span class="comment">// K starting point - compute row to read based on our section and the true section length.</span></div>
<div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;                                                  (k_section_base * _Ksize) + k_offset + k_length,    <span class="comment">// K end point - starting point plus length computed above.</span></div>
<div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;                                                  transposed);</div>
<div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160; </div>
<div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160;                        <span class="comment">// We need to modify our position based on the ROUNDED version of what we just did.</span></div>
<div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;                        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> padded_length = <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(k_length, strategy::k_unroll());</div>
<div class="line"><a name="l01270"></a><span class="lineno"> 1270</span>&#160; </div>
<div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160;                        buffer += strategy::out_width() * padded_length;</div>
<div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160; </div>
<div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;                        kpos  += padded_length;</div>
<div class="line"><a name="l01274"></a><span class="lineno"> 1274</span>&#160;                        kleft -= padded_length;</div>
<div class="line"><a name="l01275"></a><span class="lineno"> 1275</span>&#160;                    }</div>
<div class="line"><a name="l01276"></a><span class="lineno"> 1276</span>&#160;                }</div>
<div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01278"></a><span class="lineno"> 1278</span>&#160;                <span class="comment">// In the single K section case, can process the whole lot in one go.</span></div>
<div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;                <span class="comment">// Caution: &#39;blockwalker::kmax()&#39; rounds up, so clamp to valid _Ksize.</span></div>
<div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;                strat.transforms.PrepareB(buffer, B + (current.multi() * B_multi_stride), ldb,</div>
<div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;                                          current.x0(), current.xmax(), current.k0(), std::min(current.kmax(), _Ksize), transposed);</div>
<div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;                buffer += <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(current.xmax() - current.x0(), strategy::out_width()) * <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(current.kmax() - current.k0(), strategy::k_unroll());</div>
<div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;            }</div>
<div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160; </div>
<div class="line"><a name="l01285"></a><span class="lineno"> 1285</span>&#160;            <span class="comment">// Advance to the next block, break if we run off the end.</span></div>
<div class="line"><a name="l01286"></a><span class="lineno"> 1286</span>&#160;            <span class="keywordflow">if</span> (!current.advance()) {</div>
<div class="line"><a name="l01287"></a><span class="lineno"> 1287</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01288"></a><span class="lineno"> 1288</span>&#160;            }</div>
<div class="line"><a name="l01289"></a><span class="lineno"> 1289</span>&#160;        }</div>
<div class="line"><a name="l01290"></a><span class="lineno"> 1290</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_m_l_g_o_parser_8cpp_source.xhtml#l00283">arm_compute::mlgo::parser::end()</a>, <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l01171">GemmInterleaved&lt; strategy, To, Tr, OutputStage, MergeStep, FixedFormat, ForceThreadColumns, ForceFloatAccumulate &gt;::get_B_pretranspose_window_size()</a>, <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l01178">GemmInterleaved&lt; strategy, To, Tr, OutputStage, MergeStep, FixedFormat, ForceThreadColumns, ForceFloatAccumulate &gt;::requantize_bias()</a>, <a class="el" href="utils_8hpp_source.xhtml#l00070">arm_gemm::roundup()</a>, and <a class="el" href="working__space_8hpp_source.xhtml#l00105">strategy</a>.</p>

<p class="reference">Referenced by <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l01198">GemmInterleaved&lt; strategy, To, Tr, OutputStage, MergeStep, FixedFormat, ForceThreadColumns, ForceFloatAccumulate &gt;::pretranspose_B_array()</a>.</p>

</div>
</div>
<a id="a0ae716040d875abeeba60aa4a6b73363"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0ae716040d875abeeba60aa4a6b73363">&#9670;&nbsp;</a></span>requantize_bias()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void requantize_bias </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>in_buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const To *&#160;</td>
          <td class="paramname"><em>B</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>ldb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>B_multi_stride</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarm__gemm_1_1_gemm_common.xhtml#a7c4f4f6a90ff91f2c2ae9a954446a762">GemmCommon&lt; To, Tr &gt;</a>.</p>

<p class="definition">Definition at line <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l01178">1178</a> of file <a class="el" href="gemm__interleaved_8hpp_source.xhtml">gemm_interleaved.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160;                                                                                                         {</div>
<div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;        <span class="keywordflow">if</span> (std::is_same&lt;OutputStage, Requantize32&gt;::value) {</div>
<div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;            col_bias = <span class="keyword">reinterpret_cast&lt;</span>int32_t *<span class="keyword">&gt;</span>(in_buffer);</div>
<div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160; </div>
<div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;            Requantize32 *qp_ptr = <span class="keyword">reinterpret_cast&lt;</span>Requantize32 *<span class="keyword">&gt;</span>(&amp;_os);</div>
<div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160; </div>
<div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0; i&lt;_nmulti; i++) {</div>
<div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;                <span class="comment">// The input is assumed not to have any padding between sections, so straightforward Ksize * Ksections computation gets the total size.</span></div>
<div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;                <a class="code" href="namespacearm__gemm.xhtml#a0f7c3bb1a6bbcb34dc0988ef61510c38">compute_col_sums</a>(*qp_ptr, _Nsize, _Ksize * _Ksections, B + (i * B_multi_stride), ldb, col_bias + (i * _Nsize), _Ksize * _Ksections, i, 0);</div>
<div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;            }</div>
<div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;        }</div>
<div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__gemm.xhtml#a0f7c3bb1a6bbcb34dc0988ef61510c38">arm_gemm::compute_col_sums()</a>.</p>

<p class="reference">Referenced by <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l01202">GemmInterleaved&lt; strategy, To, Tr, OutputStage, MergeStep, FixedFormat, ForceThreadColumns, ForceFloatAccumulate &gt;::pretranspose_B_array_part()</a>.</p>

</div>
</div>
<a id="ae7e6d203d0e3e46ebd521951b72c6f7c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae7e6d203d0e3e46ebd521951b72c6f7c">&#9670;&nbsp;</a></span>set_convolution_parameters()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void set_convolution_parameters </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structarm__gemm_1_1_convolution_parameters.xhtml">ConvolutionParameters</a>&#160;</td>
          <td class="paramname"><em>parms</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarm__gemm_1_1_i_gemm_common.xhtml#aaabbf2723a390d8e7f859c70aea256a8">IGemmCommon</a>.</p>

<p class="definition">Definition at line <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l01320">1320</a> of file <a class="el" href="gemm__interleaved_8hpp_source.xhtml">gemm_interleaved.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01320"></a><span class="lineno"> 1320</span>&#160;                                                                          {</div>
<div class="line"><a name="l01321"></a><span class="lineno"> 1321</span>&#160;        assert(parms.input_channels == _Ksize);</div>
<div class="line"><a name="l01322"></a><span class="lineno"> 1322</span>&#160;        _convolver = std::unique_ptr&lt;convolver&lt;To&gt;&gt;(<span class="keyword">new</span> convolver&lt;To&gt;(parms));</div>
<div class="line"><a name="l01323"></a><span class="lineno"> 1323</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="convolution__parameters_8hpp_source.xhtml#l00052">ConvolutionParameters::input_channels</a>.</p>

</div>
</div>
<a id="a09b8fcd4f70f2e0e45793e74fd43c21b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a09b8fcd4f70f2e0e45793e74fd43c21b">&#9670;&nbsp;</a></span>set_dequantize_scale()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void set_dequantize_scale </td>
          <td>(</td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>scale</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarm__gemm_1_1_i_gemm_common.xhtml#a58a68a32d9aa5984504c7fc141270d41">IGemmCommon</a>.</p>

<p class="definition">Definition at line <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l01308">1308</a> of file <a class="el" href="gemm__interleaved_8hpp_source.xhtml">gemm_interleaved.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01308"></a><span class="lineno"> 1308</span>&#160;                                                          {</div>
<div class="line"><a name="l01309"></a><span class="lineno"> 1309</span>&#160;        <span class="keywordflow">if</span>(std::is_same&lt;OutputStage, DequantizeFloat&gt;::value) {</div>
<div class="line"><a name="l01310"></a><span class="lineno"> 1310</span>&#160;            DequantizeFloat* df = <span class="keyword">reinterpret_cast&lt;</span>DequantizeFloat *<span class="keyword">&gt;</span>(&amp;_os);</div>
<div class="line"><a name="l01311"></a><span class="lineno"> 1311</span>&#160;            df-&gt;scale = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>;</div>
<div class="line"><a name="l01312"></a><span class="lineno"> 1312</span>&#160;        }</div>
<div class="line"><a name="l01313"></a><span class="lineno"> 1313</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__gemm_8hpp_source.xhtml#l00266">DequantizeFloat::scale</a>, and <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00272">arm_compute::test::validation::scale</a>.</p>

</div>
</div>
<a id="a82b688818137467809617daf73ffdc11"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a82b688818137467809617daf73ffdc11">&#9670;&nbsp;</a></span>set_indirect_parameters()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void set_indirect_parameters </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>string_len</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const To *const *const *&#160;</td>
          <td class="paramname"><em>ptr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarm__gemm_1_1_gemm_common.xhtml#a61189e875b30e38a11a1f8fe21e3e939">GemmCommon&lt; To, Tr &gt;</a>.</p>

<p class="definition">Definition at line <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l01315">1315</a> of file <a class="el" href="gemm__interleaved_8hpp_source.xhtml">gemm_interleaved.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01315"></a><span class="lineno"> 1315</span>&#160;                                                                                            {</div>
<div class="line"><a name="l01316"></a><span class="lineno"> 1316</span>&#160;        assert(string_len == _Ksize);</div>
<div class="line"><a name="l01317"></a><span class="lineno"> 1317</span>&#160;        _indirect_buf = ptr;</div>
<div class="line"><a name="l01318"></a><span class="lineno"> 1318</span>&#160;    }</div>
</div><!-- fragment -->
</div>
</div>
<a id="a468e9c50d4decc2ba86f9bd393ba27d6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a468e9c50d4decc2ba86f9bd393ba27d6">&#9670;&nbsp;</a></span>set_nthreads()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void set_nthreads </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nthreads</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarm__gemm_1_1_i_gemm_common.xhtml#a568b1d289dcf3226443fd87e8a261f91">IGemmCommon</a>.</p>

<p class="definition">Definition at line <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00830">830</a> of file <a class="el" href="gemm__interleaved_8hpp_source.xhtml">gemm_interleaved.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;                                             {</div>
<div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;        _nthreads = std::min(nthreads, _maxthreads);</div>
<div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;    }</div>
</div><!-- fragment -->
</div>
</div>
<a id="a6e76d099f51fc0ef7f48dbd7d00214ac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6e76d099f51fc0ef7f48dbd7d00214ac">&#9670;&nbsp;</a></span>set_pretransposed_B_data()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void set_pretransposed_B_data </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>in_buffer</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarm__gemm_1_1_i_gemm_common.xhtml#aeb17b9ef6dcfb2ab257c5a8290fac666">IGemmCommon</a>.</p>

<p class="definition">Definition at line <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l01292">1292</a> of file <a class="el" href="gemm__interleaved_8hpp_source.xhtml">gemm_interleaved.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01292"></a><span class="lineno"> 1292</span>&#160;                                                            {</div>
<div class="line"><a name="l01293"></a><span class="lineno"> 1293</span>&#160;        <span class="comment">// Put the transposed data after the column sums - in non-quantized cases get_col_sum_size() == 0</span></div>
<div class="line"><a name="l01294"></a><span class="lineno"> 1294</span>&#160;        uintptr_t buffer_int = <span class="keyword">reinterpret_cast&lt;</span>uintptr_t<span class="keyword">&gt;</span>(in_buffer);</div>
<div class="line"><a name="l01295"></a><span class="lineno"> 1295</span>&#160;        _B_transposed = <span class="keyword">reinterpret_cast&lt;</span>Toi *<span class="keyword">&gt;</span>(buffer_int + get_col_sum_size());</div>
<div class="line"><a name="l01296"></a><span class="lineno"> 1296</span>&#160;        col_bias = <span class="keyword">reinterpret_cast&lt;</span>int32_t *<span class="keyword">&gt;</span>(in_buffer);</div>
<div class="line"><a name="l01297"></a><span class="lineno"> 1297</span>&#160;    }</div>
</div><!-- fragment -->
</div>
</div>
<a id="a4f282c5814fcd207308c4737a1fc567b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4f282c5814fcd207308c4737a1fc567b">&#9670;&nbsp;</a></span>set_quantized_bias()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void set_quantized_bias </td>
          <td>(</td>
          <td class="paramtype">const int32_t *&#160;</td>
          <td class="paramname"><em>bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>bias_multi_stride</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarm__gemm_1_1_i_gemm_common.xhtml#ab091a53dc98522e74b3e2a4d9020d76c">IGemmCommon</a>.</p>

<p class="definition">Definition at line <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l01299">1299</a> of file <a class="el" href="gemm__interleaved_8hpp_source.xhtml">gemm_interleaved.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01299"></a><span class="lineno"> 1299</span>&#160;                                                                                    {</div>
<div class="line"><a name="l01300"></a><span class="lineno"> 1300</span>&#160;        <span class="keywordflow">if</span> (std::is_same&lt;OutputStage, Requantize32&gt;::value) {</div>
<div class="line"><a name="l01301"></a><span class="lineno"> 1301</span>&#160;            Requantize32 *qp = <span class="keyword">reinterpret_cast&lt;</span>Requantize32 *<span class="keyword">&gt;</span>(&amp;_os);</div>
<div class="line"><a name="l01302"></a><span class="lineno"> 1302</span>&#160; </div>
<div class="line"><a name="l01303"></a><span class="lineno"> 1303</span>&#160;            qp-&gt;bias = <a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>;</div>
<div class="line"><a name="l01304"></a><span class="lineno"> 1304</span>&#160;            qp-&gt;bias_multi_stride = bias_multi_stride;</div>
<div class="line"><a name="l01305"></a><span class="lineno"> 1305</span>&#160;        }</div>
<div class="line"><a name="l01306"></a><span class="lineno"> 1306</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__gemm_8hpp_source.xhtml#l00196">Requantize32::bias</a>, <a class="el" href="working__space_8hpp_source.xhtml#l00322">bias</a>, and <a class="el" href="arm__gemm_8hpp_source.xhtml#l00197">Requantize32::bias_multi_stride</a>.</p>

</div>
</div>
<a id="aee006b8384820aa25720e84b91b32a27"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aee006b8384820aa25720e84b91b32a27">&#9670;&nbsp;</a></span>set_working_space()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void set_working_space </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>working_space</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarm__gemm_1_1_i_gemm_common.xhtml#a5e424d4bc279d4bb932d2a26f66ec418">IGemmCommon</a>.</p>

<p class="definition">Definition at line <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l01122">1122</a> of file <a class="el" href="gemm__interleaved_8hpp_source.xhtml">gemm_interleaved.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;                                                         {</div>
<div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;        <span class="comment">// Make sure everything ends up cache line aligned</span></div>
<div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;        int8_t *working_space_bytes = <span class="keyword">reinterpret_cast&lt;</span>int8_t *<span class="keyword">&gt;</span>(working_space);</div>
<div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;        intptr_t working_space_int = <span class="keyword">reinterpret_cast&lt;</span>intptr_t<span class="keyword">&gt;</span>(working_space);</div>
<div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160; </div>
<div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;        <span class="keywordtype">size_t</span> diff=0;</div>
<div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160; </div>
<div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;        <span class="keywordflow">if</span> (working_space_int &amp; 0x3F) {</div>
<div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;            diff = 0x40 - (working_space_int &amp; 0x3F);</div>
<div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;        }</div>
<div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160; </div>
<div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;        working_space_bytes += diff;</div>
<div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;        working_space_int += diff;</div>
<div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160; </div>
<div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;        <span class="comment">// Pretransposed case: just set internal pointer to parameter value.</span></div>
<div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;        _working_space = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">void</span> *<span class="keyword">&gt;</span>(working_space_bytes);</div>
<div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160; </div>
<div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;        <span class="comment">// Set up accumulation buffer</span></div>
<div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;        <span class="keywordflow">if</span> (get_accumulation_buffer_size() &gt; 0) {</div>
<div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;            intptr_t acc_buff_int = working_space_int + get_a_working_size() + (get_c_working_size() * _maxthreads);</div>
<div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;            <span class="comment">// Make sure the accumulation buffer is aligned (needed if the other blocks are not a multiple of cache line length)</span></div>
<div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;            <span class="keywordflow">if</span> (acc_buff_int &amp; 0x3F) {</div>
<div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;                acc_buff_int += (0x40 - (acc_buff_int &amp; 0x3F));</div>
<div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;            }</div>
<div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;            _accumulation_buffer = <span class="keyword">reinterpret_cast&lt;</span>Tab *<span class="keyword">&gt;</span>(acc_buff_int);</div>
<div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;        } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160;            _accumulation_buffer = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;        }</div>
<div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;    }</div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>src/core/NEON/kernels/arm_gemm/<a class="el" href="gemm__interleaved_8hpp_source.xhtml">gemm_interleaved.hpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="anamespace_gemm_tuner_xhtml_a8187411843a6284ffb964ef3fb9fcab3"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">GemmTuner.args</a></div><div class="ttdeci">args</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner.py:679</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a06403ad5596b5405787cfca12e5b815e"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a06403ad5596b5405787cfca12e5b815e">arm_compute::test::validation::run</a></div><div class="ttdeci">lstmq run()</div></div>
<div class="ttc" id="agemm__interleaved_8hpp_xhtml_a6fbca3dca9ecb372332fc525529cc086"><div class="ttname"><a href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></div><div class="ttdeci">decltype(strategy::transforms) typedef type</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00347">gemm_interleaved.hpp:347</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_a5f9016ea3e28a033b7cc216bdda912be"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a5f9016ea3e28a033b7cc216bdda912be">arm_compute::graph::Activation</a></div><div class="ttdeci">arm_compute::ActivationLayerInfo::ActivationFunction Activation</div><div class="ttdoc">Constant TensorID specifying an equivalent of null tensor.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00076">Types.h:76</a></div></div>
<div class="ttc" id="aworking__space_8hpp_xhtml_af96bef5f590df4bd6149576c22be99bb"><div class="ttname"><a href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a></div><div class="ttdeci">const StratType * strategy</div><div class="ttdef"><b>Definition:</b> <a href="working__space_8hpp_source.xhtml#l00105">working_space.hpp:105</a></div></div>
<div class="ttc" id="anamespacearm__gemm_xhtml_a2cfd518808ae94de30b3d1a3ba7c7890"><div class="ttname"><a href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">arm_gemm::roundup</a></div><div class="ttdeci">T roundup(const T a, const T b)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00070">utils.hpp:70</a></div></div>
<div class="ttc" id="anamespacearm__gemm_xhtml_a0f7c3bb1a6bbcb34dc0988ef61510c38"><div class="ttname"><a href="namespacearm__gemm.xhtml#a0f7c3bb1a6bbcb34dc0988ef61510c38">arm_gemm::compute_col_sums</a></div><div class="ttdeci">void compute_col_sums(const Requantize32 &amp;qp, unsigned int width, unsigned int height, const T *input, unsigned int in_stride, int32_t *col_bias, unsigned int depth, unsigned int multi, unsigned int first_col)</div></div>
<div class="ttc" id="anamespacearm__gemm_xhtml_a24fb31c876e67f529bd128983460f6f5a4a554761cc948f6b9437c42fd62a1d01"><div class="ttname"><a href="namespacearm__gemm.xhtml#a24fb31c876e67f529bd128983460f6f5a4a554761cc948f6b9437c42fd62a1d01">arm_gemm::GemmMethod::GEMM_INTERLEAVED</a></div><div class="ttdeci">@ GEMM_INTERLEAVED</div></div>
<div class="ttc" id="aclassarm__gemm_1_1_gemm_interleaved_xhtml_ae6d7caee8cdfbc48555b7600022415d9"><div class="ttname"><a href="classarm__gemm_1_1_gemm_interleaved.xhtml#ae6d7caee8cdfbc48555b7600022415d9">arm_gemm::GemmInterleaved::pretranspose_B_array_part</a></div><div class="ttdeci">void pretranspose_B_array_part(void *in_buffer, const To *B, const int ldb, const int B_multi_stride, const bool transposed, size_t start, size_t end) override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l01202">gemm_interleaved.hpp:1202</a></div></div>
<div class="ttc" id="aworking__space_8hpp_xhtml_a1fb7b822a92dd3ab6e7ab15c67b0ff9e"><div class="ttname"><a href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a></div><div class="ttdeci">const int32_t * bias</div><div class="ttdef"><b>Definition:</b> <a href="working__space_8hpp_source.xhtml#l00322">working_space.hpp:322</a></div></div>
<div class="ttc" id="anamespacearm__gemm_xhtml_a2ca80c12b0bbb50666d5a1a122359616"><div class="ttname"><a href="namespacearm__gemm.xhtml#a2ca80c12b0bbb50666d5a1a122359616">arm_gemm::get_weight_format</a></div><div class="ttdeci">WeightFormat get_weight_format(const KernelWeightFormat, size_t)</div><div class="ttdef"><b>Definition:</b> <a href="misc_8cpp_source.xhtml#l00040">misc.cpp:40</a></div></div>
<div class="ttc" id="aclassarm__gemm_1_1_gemm_interleaved_xhtml_a0ae716040d875abeeba60aa4a6b73363"><div class="ttname"><a href="classarm__gemm_1_1_gemm_interleaved.xhtml#a0ae716040d875abeeba60aa4a6b73363">arm_gemm::GemmInterleaved::requantize_bias</a></div><div class="ttdeci">void requantize_bias(void *in_buffer, const To *B, const int ldb, const int B_multi_stride) override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l01178">gemm_interleaved.hpp:1178</a></div></div>
<div class="ttc" id="anamespacearm__gemm_xhtml_aed0e2852860309af99fad49a8c3ef315"><div class="ttname"><a href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">arm_gemm::iceildiv</a></div><div class="ttdeci">T iceildiv(const T a, const T b)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00065">utils.hpp:65</a></div></div>
<div class="ttc" id="aclassarm__gemm_1_1_gemm_interleaved_xhtml_aa64943c3fd124c455d3c30599d0f663e"><div class="ttname"><a href="classarm__gemm_1_1_gemm_interleaved.xhtml#aa64943c3fd124c455d3c30599d0f663e">arm_gemm::GemmInterleaved::get_B_pretranspose_window_size</a></div><div class="ttdeci">size_t get_B_pretranspose_window_size() const override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l01171">gemm_interleaved.hpp:1171</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a4f12b7902ae53e3898b2ab779f962340"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">arm_compute::test::validation::scale</a></div><div class="ttdeci">NEScale scale</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00272">Scale.cpp:272</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1mlgo_1_1parser_xhtml_a9fe67a1da3e2628bade473115ecbb5be"><div class="ttname"><a href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">arm_compute::mlgo::parser::end</a></div><div class="ttdeci">void end(TokenStream &amp;in, bool &amp;valid)</div><div class="ttdef"><b>Definition:</b> <a href="_m_l_g_o_parser_8cpp_source.xhtml#l00283">MLGOParser.cpp:283</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__gemm.xhtml">arm_gemm</a></li><li class="navelem"><a class="el" href="classarm__gemm_1_1_gemm_interleaved.xhtml">GemmInterleaved</a></li>
    <li class="footer">Generated on Mon Jun 17 2024 15:11:35 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
