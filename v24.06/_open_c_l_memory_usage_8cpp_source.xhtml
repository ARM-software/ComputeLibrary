<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: tests/framework/instruments/OpenCLMemoryUsage.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.06</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_open_c_l_memory_usage_8cpp_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">OpenCLMemoryUsage.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_open_c_l_memory_usage_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2018-2019 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_open_c_l_memory_usage_8h.xhtml">OpenCLMemoryUsage.h</a>&quot;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160; </div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;../Framework.h&quot;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;../Utils.h&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160; </div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_CL</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#error &quot;You can&#39;t use OpenCLMemoryUsage without OpenCL&quot;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_CL */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160; </div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_c_l_2_c_l_kernel_library_8h.xhtml">arm_compute/core/CL/CLKernelLibrary.h</a>&quot;</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160; </div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">namespace </span>test</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="keyword">namespace </span>framework</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div>
<div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a501ef37fef441a0a6a8ea8b8e30a7181">   41</a></span>&#160;std::string <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a501ef37fef441a0a6a8ea8b8e30a7181">OpenCLMemoryUsage::id</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordflow">return</span> <span class="stringliteral">&quot;OpenCLMemoryUsage&quot;</span>;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;}</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160; </div>
<div class="line"><a name="l00046"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a2645ccd83bc30f0c6cc7aedd2fa51806">   46</a></span>&#160;<a class="code" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a2645ccd83bc30f0c6cc7aedd2fa51806">OpenCLMemoryUsage::OpenCLMemoryUsage</a>(<a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#a3a01a70ad3a22d8b80c413e8a5977100">ScaleFactor</a> scale_factor)</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    : real_clCreateBuffer(<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml">CLSymbols</a>::get().clCreateBuffer_ptr), real_clRetainMemObject(<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml">CLSymbols</a>::get().clRetainMemObject_ptr), real_clReleaseMemObject(<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml">CLSymbols</a>::get().clReleaseMemObject_ptr),</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;      real_clSVMAlloc(<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml">CLSymbols</a>::get().clSVMAlloc_ptr), real_clSVMFree(<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml">CLSymbols</a>::get().clSVMFree_ptr), _allocations(), _svm_allocations(), _start(), _end(), _now()</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;{</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keywordflow">switch</span>(scale_factor)</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    {</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#a3a01a70ad3a22d8b80c413e8a5977100ab50339a10e1de285ac99d4c3990b8693">ScaleFactor::NONE</a>:</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;            _scale_factor = 1;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            _unit         = <span class="stringliteral">&quot;&quot;</span>;</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#a3a01a70ad3a22d8b80c413e8a5977100a31b560df072eca60895ba6d4541c41a2">ScaleFactor::SCALE_1K</a>:</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            _scale_factor = 1000;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            _unit         = <span class="stringliteral">&quot;K &quot;</span>;</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#a3a01a70ad3a22d8b80c413e8a5977100ade0343867b7ffbd33367905039d496f5">ScaleFactor::SCALE_1M</a>:</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;            _scale_factor = 1000000;</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            _unit         = <span class="stringliteral">&quot;M &quot;</span>;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Invalid scale&quot;</span>);</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    }</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;}</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160; </div>
<div class="line"><a name="l00069"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#ad94b6b2e29abc159c9624278938badb3">   69</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#ad94b6b2e29abc159c9624278938badb3">OpenCLMemoryUsage::test_start</a>()</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;{</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    _now = Stats();</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160; </div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">CLSymbols::get</a>().clCreateBuffer_ptr == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a301b84af701238b357de87434d0327a9">clCreateBuffer_ptr</a> = [<span class="keyword">this</span>](</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                                              cl_context   <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adf0dd2db07cdbb966d6e385d3cd2605c">context</a>,</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                                              cl_mem_flags flags,</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                                              <span class="keywordtype">size_t</span>       size,</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                                              <span class="keywordtype">void</span>        *host_ptr,</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                                              cl_int *     errcode_ret)</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    {</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        cl_mem <a class="code" href="namespacecheck__header__guards.xhtml#a7f345697df7eb20c9aba1ab6980cae8f">retval</a> = this-&gt;real_clCreateBuffer(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adf0dd2db07cdbb966d6e385d3cd2605c">context</a>, flags, size, host_ptr, errcode_ret);</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <span class="keywordflow">if</span>(host_ptr != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        {</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            <span class="comment">// If it&#39;s an SVM / external allocation;</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            size = 0;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        }</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        {</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            _now.num_allocations++;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            _now.in_use += size;</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            _now.total_allocated += size;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            <span class="keywordflow">if</span>(_now.in_use &gt; _now.max_in_use)</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            {</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                _now.max_in_use = _now.in_use;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            }</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        }</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        this-&gt;_allocations[<a class="code" href="namespacecheck__header__guards.xhtml#a7f345697df7eb20c9aba1ab6980cae8f">retval</a>] = Allocation(size);</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacecheck__header__guards.xhtml#a7f345697df7eb20c9aba1ab6980cae8f">retval</a>;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    };</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">CLSymbols::get</a>().clRetainMemObject_ptr == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ab7b31e7922544d4a6325320f08ad2474">clRetainMemObject_ptr</a> = [<span class="keyword">this</span>](cl_mem memobj)</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    {</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        cl_int <a class="code" href="namespacecheck__header__guards.xhtml#a7f345697df7eb20c9aba1ab6980cae8f">retval</a> = this-&gt;real_clRetainMemObject(memobj);</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        this-&gt;_allocations[memobj].refcount++;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacecheck__header__guards.xhtml#a7f345697df7eb20c9aba1ab6980cae8f">retval</a>;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    };</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">CLSymbols::get</a>().clReleaseMemObject_ptr == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a9385d6637f840d613d72f35a389d1c64">clReleaseMemObject_ptr</a> = [<span class="keyword">this</span>](cl_mem memobj)</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    {</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        cl_int      <a class="code" href="namespacecheck__header__guards.xhtml#a7f345697df7eb20c9aba1ab6980cae8f">retval</a> = this-&gt;real_clRetainMemObject(memobj);</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        Allocation &amp;alloc  = this-&gt;_allocations[memobj];</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <span class="keywordflow">if</span>(--alloc.refcount == 0)</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        {</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            _now.in_use -= alloc.size;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        }</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacecheck__header__guards.xhtml#a7f345697df7eb20c9aba1ab6980cae8f">retval</a>;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    };</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160; </div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="comment">//Only intercept the function if it exists:</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">CLSymbols::get</a>().clSVMAlloc_ptr != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    {</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#abf58c6d99585520b40a396a890caa9ee">clSVMAlloc_ptr</a> = [<span class="keyword">this</span>](cl_context <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adf0dd2db07cdbb966d6e385d3cd2605c">context</a>, cl_svm_mem_flags flags, <span class="keywordtype">size_t</span> size, cl_uint alignment)</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        {</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            <span class="keywordtype">void</span> *<a class="code" href="namespacecheck__header__guards.xhtml#a7f345697df7eb20c9aba1ab6980cae8f">retval</a> = this-&gt;real_clSVMAlloc(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adf0dd2db07cdbb966d6e385d3cd2605c">context</a>, flags, size, alignment);</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            <span class="keywordflow">if</span>(<a class="code" href="namespacecheck__header__guards.xhtml#a7f345697df7eb20c9aba1ab6980cae8f">retval</a> != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            {</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                _svm_allocations[<a class="code" href="namespacecheck__header__guards.xhtml#a7f345697df7eb20c9aba1ab6980cae8f">retval</a>] = size;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                _now.num_allocations++;</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                _now.in_use += size;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                _now.total_allocated += size;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                <span class="keywordflow">if</span>(_now.in_use &gt; _now.max_in_use)</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                {</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                    _now.max_in_use = _now.in_use;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                }</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            }</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacecheck__header__guards.xhtml#a7f345697df7eb20c9aba1ab6980cae8f">retval</a>;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        };</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    }</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160; </div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="comment">//Only intercept the function if it exists:</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">CLSymbols::get</a>().clSVMFree_ptr != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    {</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#adbd557acca5bc0f92a1a7f8ebc26e9ed">clSVMFree_ptr</a> = [<span class="keyword">this</span>](cl_context <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adf0dd2db07cdbb966d6e385d3cd2605c">context</a>, <span class="keywordtype">void</span> *svm_pointer)</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        {</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            this-&gt;real_clSVMFree(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adf0dd2db07cdbb966d6e385d3cd2605c">context</a>, svm_pointer);</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            <span class="keyword">auto</span> iterator = _svm_allocations.find(svm_pointer);</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            <span class="keywordflow">if</span>(iterator != _svm_allocations.end())</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            {</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                <span class="keywordtype">size_t</span> size = iterator-&gt;second;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                _svm_allocations.erase(iterator);</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                _now.in_use -= size;</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            }</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        };</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    }</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;}</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160; </div>
<div class="line"><a name="l00157"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a5d5d9ebd12cd3a7d268bc98a3fc7bf97">  157</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a5d5d9ebd12cd3a7d268bc98a3fc7bf97">OpenCLMemoryUsage::start</a>()</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;{</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    _start = _now;</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;}</div>
<div class="line"><a name="l00161"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#ab3536e22848ce87b16a9b96d6d824d45">  161</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#ab3536e22848ce87b16a9b96d6d824d45">OpenCLMemoryUsage::stop</a>()</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;{</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    _end = _now;</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;}</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160; </div>
<div class="line"><a name="l00166"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a84eed1102b2ad191e3659dd7c49705bc">  166</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a84eed1102b2ad191e3659dd7c49705bc">OpenCLMemoryUsage::test_stop</a>()</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;{</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="comment">// Restore real function</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a301b84af701238b357de87434d0327a9">clCreateBuffer_ptr</a>     = real_clCreateBuffer;</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ab7b31e7922544d4a6325320f08ad2474">clRetainMemObject_ptr</a>  = real_clRetainMemObject;</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a9385d6637f840d613d72f35a389d1c64">clReleaseMemObject_ptr</a> = real_clReleaseMemObject;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#abf58c6d99585520b40a396a890caa9ee">clSVMAlloc_ptr</a>         = real_clSVMAlloc;</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#adbd557acca5bc0f92a1a7f8ebc26e9ed">clSVMFree_ptr</a>          = real_clSVMFree;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;}</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160; </div>
<div class="line"><a name="l00176"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a73cabccc9d4406bf48f1db033dc35005">  176</a></span>&#160;<a class="code" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#afc7df496e6026b91c3f48da6821c86a9">Instrument::MeasurementsMap</a> <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a73cabccc9d4406bf48f1db033dc35005">OpenCLMemoryUsage::measurements</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#afc7df496e6026b91c3f48da6821c86a9">MeasurementsMap</a> <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a73cabccc9d4406bf48f1db033dc35005">measurements</a>;</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a73cabccc9d4406bf48f1db033dc35005">measurements</a>.emplace(<span class="stringliteral">&quot;Num buffers allocated per run&quot;</span>, <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement.xhtml">Measurement</a>(_end.num_allocations - _start.num_allocations, <span class="stringliteral">&quot;&quot;</span>));</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a73cabccc9d4406bf48f1db033dc35005">measurements</a>.emplace(<span class="stringliteral">&quot;Total memory allocated per run&quot;</span>, <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement.xhtml">Measurement</a>((_end.total_allocated - _start.total_allocated) / _scale_factor, _unit));</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a73cabccc9d4406bf48f1db033dc35005">measurements</a>.emplace(<span class="stringliteral">&quot;Memory in use at start of run&quot;</span>, <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement.xhtml">Measurement</a>(_start.in_use / _scale_factor, _unit));</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160; </div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a73cabccc9d4406bf48f1db033dc35005">measurements</a>;</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;}</div>
<div class="line"><a name="l00185"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a60f8fdb7ead1583e0dfae6e97372bf40">  185</a></span>&#160;<a class="code" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#afc7df496e6026b91c3f48da6821c86a9">Instrument::MeasurementsMap</a> <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a60f8fdb7ead1583e0dfae6e97372bf40">OpenCLMemoryUsage::test_measurements</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#afc7df496e6026b91c3f48da6821c86a9">MeasurementsMap</a> <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a73cabccc9d4406bf48f1db033dc35005">measurements</a>;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a73cabccc9d4406bf48f1db033dc35005">measurements</a>.emplace(<span class="stringliteral">&quot;Num buffers&quot;</span>, <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement.xhtml">Measurement</a>(_now.num_allocations, <span class="stringliteral">&quot;&quot;</span>));</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a73cabccc9d4406bf48f1db033dc35005">measurements</a>.emplace(<span class="stringliteral">&quot;Total memory allocated&quot;</span>, <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement.xhtml">Measurement</a>(_now.total_allocated / _scale_factor, _unit));</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a73cabccc9d4406bf48f1db033dc35005">measurements</a>.emplace(<span class="stringliteral">&quot;Max memory allocated&quot;</span>, <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement.xhtml">Measurement</a>(_now.max_in_use / _scale_factor, _unit));</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a73cabccc9d4406bf48f1db033dc35005">measurements</a>.emplace(<span class="stringliteral">&quot;Memory leaked&quot;</span>, <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement.xhtml">Measurement</a>(_now.in_use / _scale_factor, _unit));</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160; </div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="keywordtype">size_t</span> num_programs = <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">CLKernelLibrary::get</a>().<a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a54bb195c770b747d87af7506c2032aa4">get_built_programs</a>().size();</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="keywordtype">size_t</span> total_size   = 0;</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> <span class="keyword">const</span> &amp;it : <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">CLKernelLibrary::get</a>().get_built_programs())</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    {</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        std::vector&lt;size_t&gt; binary_sizes = it.second.getInfo&lt;CL_PROGRAM_BINARY_SIZES&gt;();</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        total_size                       = <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a48e7832f8e28c3f7fc0ded12467f8bb0">std::accumulate</a>(binary_sizes.begin(), binary_sizes.end(), total_size);</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    }</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160; </div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a73cabccc9d4406bf48f1db033dc35005">measurements</a>.emplace(<span class="stringliteral">&quot;Num programs in cache&quot;</span>, <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement.xhtml">Measurement</a>(num_programs, <span class="stringliteral">&quot;&quot;</span>));</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a73cabccc9d4406bf48f1db033dc35005">measurements</a>.emplace(<span class="stringliteral">&quot;Total programs memory in cache&quot;</span>, <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_measurement.xhtml">Measurement</a>(total_size / _scale_factor, _unit));</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160; </div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a73cabccc9d4406bf48f1db033dc35005">measurements</a>;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;}</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;} <span class="comment">// namespace framework</span></div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;} <span class="comment">// namespace test</span></div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;} <span class="comment">// namespace arm_compute</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_ac3d2ed16df8334b183d76d8a82dbf70f"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a></div><div class="ttdeci">static CLSymbols &amp; get()</div><div class="ttdoc">Get the static instance of CLSymbols.</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8cpp_source.xhtml#l00043">OpenCL.cpp:43</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage_xhtml_a501ef37fef441a0a6a8ea8b8e30a7181"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a501ef37fef441a0a6a8ea8b8e30a7181">arm_compute::test::framework::OpenCLMemoryUsage::id</a></div><div class="ttdeci">std::string id() const override</div><div class="ttdoc">Identifier for the instrument.</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_memory_usage_8cpp_source.xhtml#l00041">OpenCLMemoryUsage.cpp:41</a></div></div>
<div class="ttc" id="astructarm__compute_1_1test_1_1framework_1_1_measurement_xhtml"><div class="ttname"><a href="structarm__compute_1_1test_1_1framework_1_1_measurement.xhtml">arm_compute::test::framework::Measurement</a></div><div class="ttdoc">Generic measurement that stores values as either double or long long int.</div><div class="ttdef"><b>Definition:</b> <a href="_measurement_8h_source.xhtml#l00041">Measurement.h:41</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage_xhtml_ad94b6b2e29abc159c9624278938badb3"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#ad94b6b2e29abc159c9624278938badb3">arm_compute::test::framework::OpenCLMemoryUsage::test_start</a></div><div class="ttdeci">void test_start() override</div><div class="ttdoc">Start of the test.</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_memory_usage_8cpp_source.xhtml#l00069">OpenCLMemoryUsage.cpp:69</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_a9385d6637f840d613d72f35a389d1c64"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#a9385d6637f840d613d72f35a389d1c64">arm_compute::CLSymbols::clReleaseMemObject_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clReleaseMemObject)&gt; clReleaseMemObject_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00123">OpenCL.h:123</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_a301b84af701238b357de87434d0327a9"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#a301b84af701238b357de87434d0327a9">arm_compute::CLSymbols::clCreateBuffer_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clCreateBuffer)&gt; clCreateBuffer_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00103">OpenCL.h:103</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00354">Error.h:354</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_kernel_library_xhtml_acba005f5ce2c62cbf3f94d074d9007aa"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">arm_compute::CLKernelLibrary::get</a></div><div class="ttdeci">static CLKernelLibrary &amp; get()</div><div class="ttdoc">Access the KernelLibrary singleton.</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00041">CLKernelLibrary.cpp:41</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_c_l_2_c_l_kernel_library_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_c_l_2_c_l_kernel_library_8h.xhtml">CLKernelLibrary.h</a></div><div class="ttdoc">Manages all the OpenCL kernels compilation and caching, provides accessors for the OpenCL Context.</div></div>
<div class="ttc" id="aclassarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage_xhtml_a84eed1102b2ad191e3659dd7c49705bc"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a84eed1102b2ad191e3659dd7c49705bc">arm_compute::test::framework::OpenCLMemoryUsage::test_stop</a></div><div class="ttdeci">void test_stop() override</div><div class="ttdoc">End of the test.</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_memory_usage_8cpp_source.xhtml#l00166">OpenCLMemoryUsage.cpp:166</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_abf58c6d99585520b40a396a890caa9ee"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#abf58c6d99585520b40a396a890caa9ee">arm_compute::CLSymbols::clSVMAlloc_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clSVMAlloc)&gt; clSVMAlloc_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00134">OpenCL.h:134</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage_xhtml_a60f8fdb7ead1583e0dfae6e97372bf40"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a60f8fdb7ead1583e0dfae6e97372bf40">arm_compute::test::framework::OpenCLMemoryUsage::test_measurements</a></div><div class="ttdeci">MeasurementsMap test_measurements() const override</div><div class="ttdoc">Return the latest test measurements.</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_memory_usage_8cpp_source.xhtml#l00185">OpenCLMemoryUsage.cpp:185</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage_xhtml_a73cabccc9d4406bf48f1db033dc35005"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a73cabccc9d4406bf48f1db033dc35005">arm_compute::test::framework::OpenCLMemoryUsage::measurements</a></div><div class="ttdeci">MeasurementsMap measurements() const override</div><div class="ttdoc">Return the latest measurements.</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_memory_usage_8cpp_source.xhtml#l00176">OpenCLMemoryUsage.cpp:176</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage_xhtml_ab3536e22848ce87b16a9b96d6d824d45"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#ab3536e22848ce87b16a9b96d6d824d45">arm_compute::test::framework::OpenCLMemoryUsage::stop</a></div><div class="ttdeci">void stop() override</div><div class="ttdoc">Stop measuring.</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_memory_usage_8cpp_source.xhtml#l00161">OpenCLMemoryUsage.cpp:161</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1framework_xhtml_a3a01a70ad3a22d8b80c413e8a5977100ab50339a10e1de285ac99d4c3990b8693"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#a3a01a70ad3a22d8b80c413e8a5977100ab50339a10e1de285ac99d4c3990b8693">arm_compute::test::framework::ScaleFactor::NONE</a></div><div class="ttdeci">@ NONE</div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_a48e7832f8e28c3f7fc0ded12467f8bb0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a48e7832f8e28c3f7fc0ded12467f8bb0">arm_compute::test::validation::reference::accumulate</a></div><div class="ttdeci">SimpleTensor&lt; T2 &gt; accumulate(const SimpleTensor&lt; T1 &gt; &amp;src, DataType output_data_type)</div><div class="ttdef"><b>Definition:</b> <a href="_accumulate_8cpp_source.xhtml#l00038">Accumulate.cpp:38</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1framework_xhtml_a3a01a70ad3a22d8b80c413e8a5977100a31b560df072eca60895ba6d4541c41a2"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#a3a01a70ad3a22d8b80c413e8a5977100a31b560df072eca60895ba6d4541c41a2">arm_compute::test::framework::ScaleFactor::SCALE_1K</a></div><div class="ttdeci">@ SCALE_1K</div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_adf0dd2db07cdbb966d6e385d3cd2605c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adf0dd2db07cdbb966d6e385d3cd2605c">arm_compute::test::validation::context</a></div><div class="ttdeci">auto context</div><div class="ttdef"><b>Definition:</b> <a href="_direct_conv2d_8cpp_source.xhtml#l00167">DirectConv2d.cpp:167</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage_xhtml_a2645ccd83bc30f0c6cc7aedd2fa51806"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a2645ccd83bc30f0c6cc7aedd2fa51806">arm_compute::test::framework::OpenCLMemoryUsage::OpenCLMemoryUsage</a></div><div class="ttdeci">OpenCLMemoryUsage(ScaleFactor scale_factor)</div><div class="ttdoc">Construct an OpenCL timer.</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_memory_usage_8cpp_source.xhtml#l00046">OpenCLMemoryUsage.cpp:46</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml">arm_compute::CLSymbols</a></div><div class="ttdoc">Class for loading OpenCL symbols.</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00061">OpenCL.h:61</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2024 Arm Limited.</div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="anamespacecheck__header__guards_xhtml_a7f345697df7eb20c9aba1ab6980cae8f"><div class="ttname"><a href="namespacecheck__header__guards.xhtml#a7f345697df7eb20c9aba1ab6980cae8f">check_header_guards.retval</a></div><div class="ttdeci">int retval</div><div class="ttdef"><b>Definition:</b> <a href="check__header__guards_8py_source.xhtml#l00188">check_header_guards.py:188</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage_xhtml_a5d5d9ebd12cd3a7d268bc98a3fc7bf97"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a5d5d9ebd12cd3a7d268bc98a3fc7bf97">arm_compute::test::framework::OpenCLMemoryUsage::start</a></div><div class="ttdeci">void start() override</div><div class="ttdoc">Start measuring.</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_memory_usage_8cpp_source.xhtml#l00157">OpenCLMemoryUsage.cpp:157</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1framework_xhtml_a3a01a70ad3a22d8b80c413e8a5977100"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#a3a01a70ad3a22d8b80c413e8a5977100">arm_compute::test::framework::ScaleFactor</a></div><div class="ttdeci">ScaleFactor</div><div class="ttdef"><b>Definition:</b> <a href="_instrument_8h_source.xhtml#l00040">Instrument.h:40</a></div></div>
<div class="ttc" id="a_open_c_l_memory_usage_8h_xhtml"><div class="ttname"><a href="_open_c_l_memory_usage_8h.xhtml">OpenCLMemoryUsage.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1framework_xhtml_a3a01a70ad3a22d8b80c413e8a5977100ade0343867b7ffbd33367905039d496f5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#a3a01a70ad3a22d8b80c413e8a5977100ade0343867b7ffbd33367905039d496f5">arm_compute::test::framework::ScaleFactor::SCALE_1M</a></div><div class="ttdeci">@ SCALE_1M</div></div>
<div class="ttc" id="aclassarm__compute_1_1test_1_1framework_1_1_instrument_xhtml_afc7df496e6026b91c3f48da6821c86a9"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#afc7df496e6026b91c3f48da6821c86a9">arm_compute::test::framework::Instrument::MeasurementsMap</a></div><div class="ttdeci">std::map&lt; std::string, Measurement &gt; MeasurementsMap</div><div class="ttdoc">Map of measurements.</div><div class="ttdef"><b>Definition:</b> <a href="_instrument_8h_source.xhtml#l00109">Instrument.h:109</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_ab7b31e7922544d4a6325320f08ad2474"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#ab7b31e7922544d4a6325320f08ad2474">arm_compute::CLSymbols::clRetainMemObject_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clRetainMemObject)&gt; clRetainMemObject_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00122">OpenCL.h:122</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_adbd557acca5bc0f92a1a7f8ebc26e9ed"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#adbd557acca5bc0f92a1a7f8ebc26e9ed">arm_compute::CLSymbols::clSVMFree_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clSVMFree)&gt; clSVMFree_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00135">OpenCL.h:135</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_kernel_library_xhtml_a54bb195c770b747d87af7506c2032aa4"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#a54bb195c770b747d87af7506c2032aa4">arm_compute::CLKernelLibrary::get_built_programs</a></div><div class="ttdeci">const std::map&lt; std::string, cl::Program &gt; &amp; get_built_programs() const</div><div class="ttdoc">Access the cache of built OpenCL programs.</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00093">CLKernelLibrary.cpp:93</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="dir_9e71e2da941d3cafc4d98a9f6ae3de4f.xhtml">framework</a></li><li class="navelem"><a class="el" href="dir_4efd0ee2ecda32567e74991b08d544ea.xhtml">instruments</a></li><li class="navelem"><a class="el" href="_open_c_l_memory_usage_8cpp.xhtml">OpenCLMemoryUsage.cpp</a></li>
    <li class="footer">Generated on Mon Jun 17 2024 15:11:23 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
