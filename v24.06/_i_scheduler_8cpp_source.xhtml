<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/runtime/IScheduler.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.06</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_i_scheduler_8cpp_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">IScheduler.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_i_scheduler_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2016-2023 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_scheduler_8h.xhtml">arm_compute/runtime/IScheduler.h</a>&quot;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160; </div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_c_p_p_kernel_8h.xhtml">arm_compute/core/CPP/ICPPKernel.h</a>&quot;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_error_8h.xhtml">arm_compute/core/Error.h</a>&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_log_8h.xhtml">arm_compute/core/Log.h</a>&quot;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_window_8h.xhtml">arm_compute/core/Window.h</a>&quot;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160; </div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_cpu_info_8h.xhtml">src/common/cpuinfo/CpuInfo.h</a>&quot;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_scheduler_utils_8h.xhtml">src/runtime/SchedulerUtils.h</a>&quot;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160; </div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div>
<div class="line"><a name="l00036"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_i_scheduler.xhtml#a34956db09db14c551e9966c9b66036f9">   36</a></span>&#160;<a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#a34956db09db14c551e9966c9b66036f9">IScheduler::IScheduler</a>()</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="comment">// Work out the best possible number of execution threads</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    _num_threads_hint = <a class="code" href="namespacearm__compute_1_1cpuinfo.xhtml#a8d1f363d679403ae1ad371b85e63c7a3">cpuinfo::num_threads_hint</a>();</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;}</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160; </div>
<div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_i_scheduler.xhtml#ab0fd9e7b4f6240c55b4fe6a54d4418b5">   42</a></span>&#160;<a class="code" href="classarm__compute_1_1_c_p_u_info.xhtml">CPUInfo</a> &amp;<a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#ab0fd9e7b4f6240c55b4fe6a54d4418b5">IScheduler::cpu_info</a>()</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;{</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_c_p_u_info.xhtml#a2a42a2a0b91dce5401678766c088dfa7">CPUInfo::get</a>();</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;}</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160; </div>
<div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_i_scheduler.xhtml#a64cafb079598059f1ee04f3076f1035e">   47</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#a64cafb079598059f1ee04f3076f1035e">IScheduler::set_num_threads_with_affinity</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_threads, <a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#a47266bbd911ce9049fc1194e9fac9051">BindFunc</a> func)</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;{</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(<a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#ac24584a63e484123e3756d1b2a1c9e2f">num_threads</a>, func);</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Feature for affinity setting is not implemented&quot;</span>);</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;}</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160; </div>
<div class="line"><a name="l00053"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_i_scheduler.xhtml#a6de5358eb9a099cda48662b2fc523ec5">   53</a></span>&#160;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#a6de5358eb9a099cda48662b2fc523ec5">IScheduler::num_threads_hint</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keywordflow">return</span> _num_threads_hint;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;}</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160; </div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="keywordtype">void</span> IScheduler::schedule_common(<a class="code" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml">ICPPKernel</a> *kernel, <span class="keyword">const</span> Hints &amp;hints, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> &amp;tensors)</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;{</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(!kernel, <span class="stringliteral">&quot;The child class didn&#39;t set the kernel&quot;</span>);</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="preprocessor">#ifndef BARE_METAL</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;max_window = window;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keywordflow">if</span> (hints.split_dimension() == <a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#af5e26fa35c7355cf0d41e1e18c709a6e">IScheduler::split_dimensions_all</a>)</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    {</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="comment">/*</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment">         * if the split dim is size_t max then this signals we should parallelise over</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">         * all dimensions</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">         */</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keyword">const</span> std::size_t m = max_window.<a class="code" href="classarm__compute_1_1_window.xhtml#a2fb4b3d6b185c9d225073f923f1827c3">num_iterations</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>);</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="keyword">const</span> std::size_t n = max_window.<a class="code" href="classarm__compute_1_1_window.xhtml#a2fb4b3d6b185c9d225073f923f1827c3">num_iterations</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>);</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160; </div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <span class="comment">//in c++17 this can be swapped for   auto [ m_threads, n_threads ] = split_2d(...</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="keywordtype">unsigned</span> m_threads, n_threads;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        std::tie(m_threads, n_threads) = <a class="code" href="namespacearm__compute_1_1scheduler__utils.xhtml#aac9c13e78a99d7f0cf4666558235917f">scheduler_utils::split_2d</a>(this-&gt;<a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#ac24584a63e484123e3756d1b2a1c9e2f">num_threads</a>(), m, n);</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160; </div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        std::vector&lt;IScheduler::Workload&gt; workloads;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ni = 0; ni != n_threads; ++ni)</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        {</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> mi = 0; mi != m_threads; ++mi)</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            {</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                workloads.push_back(</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                    [ni, mi, m_threads, n_threads, &amp;max_window, &amp;kernel](<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>)</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                    {</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                        <span class="comment">//narrow the window to our mi-ni workload</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                        <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> win = max_window.<a class="code" href="classarm__compute_1_1_window.xhtml#ad82ac0dcf7e7a862a3b73f1be3ca98f1">split_window</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, mi, m_threads)</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                                         .split_window(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, ni, n_threads);</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160; </div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                        win.<a class="code" href="classarm__compute_1_1_window.xhtml#ab3a68a01a1c7c22bfbd9f3f6d20e7d5a">validate</a>();</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160; </div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                        <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> thread_locator;</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                        thread_locator.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(mi, m_threads));</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                        thread_locator.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(ni, n_threads));</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160; </div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                        thread_locator.<a class="code" href="classarm__compute_1_1_window.xhtml#ab3a68a01a1c7c22bfbd9f3f6d20e7d5a">validate</a>();</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160; </div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                        kernel-&gt;<a class="code" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml#a92fc66203d7affe26cbe70194a154895">run_nd</a>(win, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>, thread_locator);</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                    });</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            }</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        }</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        run_workloads(workloads);</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    }</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    {</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_iterations = max_window.<a class="code" href="classarm__compute_1_1_window.xhtml#a2fb4b3d6b185c9d225073f923f1827c3">num_iterations</a>(hints.split_dimension());</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#ac24584a63e484123e3756d1b2a1c9e2f">num_threads</a>    = std::min(num_iterations, this-&gt;<a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#ac24584a63e484123e3756d1b2a1c9e2f">num_threads</a>());</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160; </div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        <span class="keywordflow">if</span> (num_iterations == 0)</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        {</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        }</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160; </div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <span class="keywordflow">if</span> (!kernel-&gt;<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#a0466ee6ce6552c87595f0e88e73eeb1b">is_parallelisable</a>() || <a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#ac24584a63e484123e3756d1b2a1c9e2f">num_threads</a> == 1)</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        {</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            ThreadInfo <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.cpu_info = &amp;<a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#ab0fd9e7b4f6240c55b4fe6a54d4418b5">cpu_info</a>();</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            <span class="keywordflow">if</span> (tensors.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a644718bb2fb240de962dc3c9a1fdf0dc">empty</a>())</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            {</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                kernel-&gt;<a class="code" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml#ad6586f7a2dd64942f59b8c408643a0ea">run</a>(max_window, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            }</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            {</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                kernel-&gt;<a class="code" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml#a6b8ef149ef3b6ca5e548473916f95cd6">run_op</a>(tensors, max_window, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            }</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        }</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        {</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_windows = 0;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            <span class="keywordflow">switch</span> (hints.strategy())</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            {</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#ad3ab921e075d1edd827faf95870aa808afe6f99ef1ec99efbdc19a9786cf1facc">StrategyHint::STATIC</a>:</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                    num_windows = <a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#ac24584a63e484123e3756d1b2a1c9e2f">num_threads</a>;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#ad3ab921e075d1edd827faf95870aa808a0fcc90da4811c877ba9f9c12f7d60bc9">StrategyHint::DYNAMIC</a>:</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                {</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> granule_threshold =</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                        (hints.threshold() &lt;= 0) ? <a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#ac24584a63e484123e3756d1b2a1c9e2f">num_threads</a> : <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(hints.threshold());</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                    <span class="comment">// Make sure we don&#39;t use some windows which are too small as this might create some contention on the ThreadFeeder</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                    num_windows = num_iterations &gt; granule_threshold ? granule_threshold : num_iterations;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                }</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                    <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unknown strategy&quot;</span>);</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            }</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            <span class="comment">// Make sure the smallest window is larger than minimum workload size</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            num_windows = adjust_num_of_windows(max_window, hints.split_dimension(), num_windows, *kernel, <a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#ab0fd9e7b4f6240c55b4fe6a54d4418b5">cpu_info</a>());</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160; </div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            std::vector&lt;IScheduler::Workload&gt; workloads(num_windows);</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a> = 0; <a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a> &lt; num_windows; ++<a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a>)</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            {</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                <span class="comment">//Capture &#39;t&#39; by copy, all the other variables by reference:</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                workloads[<a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a>] = [<a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a>, &amp;hints, &amp;max_window, &amp;num_windows, &amp;kernel, &amp;tensors](<span class="keyword">const</span> ThreadInfo &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>)</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                {</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                    Window win = max_window.<a class="code" href="classarm__compute_1_1_window.xhtml#ad82ac0dcf7e7a862a3b73f1be3ca98f1">split_window</a>(hints.split_dimension(), <a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a>, num_windows);</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                    win.<a class="code" href="classarm__compute_1_1_window.xhtml#ab3a68a01a1c7c22bfbd9f3f6d20e7d5a">validate</a>();</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160; </div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                    <span class="keywordflow">if</span> (tensors.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a644718bb2fb240de962dc3c9a1fdf0dc">empty</a>())</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                    {</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                        kernel-&gt;run(win, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                    }</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                    {</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                        kernel-&gt;run_op(tensors, win, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                    }</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                };</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            }</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            run_workloads(workloads);</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        }</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    }</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="preprocessor">#else  </span><span class="comment">/* !BARE_METAL */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(kernel, hints, window, tensors);</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* !BARE_METAL */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;}</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160; </div>
<div class="line"><a name="l00174"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_i_scheduler.xhtml#a3becf955da8cad5036399bcb90f1408d">  174</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#a3becf955da8cad5036399bcb90f1408d">IScheduler::run_tagged_workloads</a>(std::vector&lt;Workload&gt; &amp;workloads, <span class="keyword">const</span> <span class="keywordtype">char</span> *tag)</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;{</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(tag);</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    run_workloads(workloads);</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;}</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160; </div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;std::size_t IScheduler::adjust_num_of_windows(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a>     &amp;window,</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                                              std::size_t       split_dimension,</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                                              std::size_t       init_num_windows,</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                                              <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml">ICPPKernel</a> &amp;kernel,</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                                              <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_p_u_info.xhtml">CPUInfo</a>    &amp;cpu_info)</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;{</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="comment">// Mitigation of the narrow split issue, which occurs when the split dimension is too small to split (hence &quot;narrow&quot;).</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="keywordflow">if</span> (window.<a class="code" href="classarm__compute_1_1_window.xhtml#a2fb4b3d6b185c9d225073f923f1827c3">num_iterations</a>(split_dimension) &lt; init_num_windows)</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    {</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        <span class="keyword">auto</span> recommended_split_dim = <a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        <span class="keywordflow">for</span> (std::size_t dims = <a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>; dims &lt;= <a class="code" href="classarm__compute_1_1_window.xhtml#a60f2e7a76af978d4eb6be4ac6e8044d1">Window::DimW</a>; ++dims)</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        {</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            <span class="keywordflow">if</span> (window.<a class="code" href="classarm__compute_1_1_window.xhtml#a2fb4b3d6b185c9d225073f923f1827c3">num_iterations</a>(recommended_split_dim) &lt; window.<a class="code" href="classarm__compute_1_1_window.xhtml#a2fb4b3d6b185c9d225073f923f1827c3">num_iterations</a>(dims))</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            {</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                recommended_split_dim = dims;</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            }</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        }</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        <a class="code" href="arm__compute_2core_2_log_8h.xhtml#af641430e72aa4c9f28d83131bb8e0fb9">ARM_COMPUTE_LOG_INFO_MSG_WITH_FORMAT_CORE</a>(</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            <span class="stringliteral">&quot;%zu dimension is not a suitable dimension to split the workload. Recommended: %zu recommended_split_dim&quot;</span>,</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            split_dimension, recommended_split_dim);</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    }</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160; </div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> <a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a> = init_num_windows; <a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a> &gt; 0; --<a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a>) <span class="comment">// Trying the highest number of windows ,init_num_windows, first</span></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    {</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        <span class="comment">// Try splitting the workload into t, subject to each subworkload size &lt;= mws.</span></div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        <span class="keywordflow">if</span> ((window.<a class="code" href="classarm__compute_1_1_window.xhtml#a2fb4b3d6b185c9d225073f923f1827c3">num_iterations</a>(split_dimension) / kernel.<a class="code" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml#a3aa853ba2ae719bcb7ed1ccbe3c33286">get_mws</a>(<a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#ab0fd9e7b4f6240c55b4fe6a54d4418b5">cpu_info</a>, <a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a>)) &gt;= <a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a>)</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        {</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;            <span class="keywordflow">if</span> (<a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a> != init_num_windows)</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;            {</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                <a class="code" href="arm__compute_2core_2_log_8h.xhtml#a14f4c3a00d20ad742642767c9449993e">ARM_COMPUTE_LOG_INFO_MSG_CORE</a>(</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                    <span class="stringliteral">&quot;The scheduler is using a different thread count than the one assigned by the user.&quot;</span>);</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            }</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a>;</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        }</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    }</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <a class="code" href="arm__compute_2core_2_log_8h.xhtml#a14f4c3a00d20ad742642767c9449993e">ARM_COMPUTE_LOG_INFO_MSG_CORE</a>(</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        <span class="stringliteral">&quot;The scheduler is using single thread instead of the thread count assigned by the user.&quot;</span>);</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="keywordflow">return</span> 1; <span class="comment">//  If the workload is so small that it can&#39;t be split, we should run a single thread</span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;}</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160; </div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;} <span class="comment">// namespace arm_compute</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassarm__compute_1_1_i_scheduler_xhtml_a34956db09db14c551e9966c9b66036f9"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml#a34956db09db14c551e9966c9b66036f9">arm_compute::IScheduler::IScheduler</a></div><div class="ttdeci">IScheduler()</div><div class="ttdoc">Default constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_i_scheduler_8cpp_source.xhtml#l00036">IScheduler.cpp:36</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_aa96e81276ee4f87ab386cd05a5539a7d"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">arm_compute::Window::DimX</a></div><div class="ttdeci">static constexpr size_t DimX</div><div class="ttdoc">Alias for dimension 0 also known as X dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00043">Window.h:43</a></div></div>
<div class="ttc" id="a_window_8h_xhtml"><div class="ttname"><a href="_window_8h.xhtml">Window.h</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00354">Error.h:354</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_scheduler_xhtml_ad3ab921e075d1edd827faf95870aa808afe6f99ef1ec99efbdc19a9786cf1facc"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml#ad3ab921e075d1edd827faf95870aa808afe6f99ef1ec99efbdc19a9786cf1facc">arm_compute::IScheduler::StrategyHint::STATIC</a></div><div class="ttdeci">@ STATIC</div><div class="ttdoc">Split the workload evenly among the threads.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_scheduler_xhtml_ab0fd9e7b4f6240c55b4fe6a54d4418b5"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml#ab0fd9e7b4f6240c55b4fe6a54d4418b5">arm_compute::IScheduler::cpu_info</a></div><div class="ttdeci">CPUInfo &amp; cpu_info()</div><div class="ttdoc">Get CPU info.</div><div class="ttdef"><b>Definition:</b> <a href="_i_scheduler_8cpp_source.xhtml#l00042">IScheduler.cpp:42</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_p_u_info_xhtml_a2a42a2a0b91dce5401678766c088dfa7"><div class="ttname"><a href="classarm__compute_1_1_c_p_u_info.xhtml#a2a42a2a0b91dce5401678766c088dfa7">arm_compute::CPUInfo::get</a></div><div class="ttdeci">static CPUInfo &amp; get()</div><div class="ttdoc">Access the KernelLibrary singleton.</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_types_8cpp_source.xhtml#l00042">CPPTypes.cpp:42</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_a2fb4b3d6b185c9d225073f923f1827c3"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a2fb4b3d6b185c9d225073f923f1827c3">arm_compute::Window::num_iterations</a></div><div class="ttdeci">constexpr size_t num_iterations(size_t dimension) const</div><div class="ttdoc">Return the number of iterations needed to iterate through a given dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00196">Window.inl:196</a></div></div>
<div class="ttc" id="a_scheduler_utils_8h_xhtml"><div class="ttname"><a href="_scheduler_utils_8h.xhtml">SchedulerUtils.h</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_log_8h_xhtml_af641430e72aa4c9f28d83131bb8e0fb9"><div class="ttname"><a href="arm__compute_2core_2_log_8h.xhtml#af641430e72aa4c9f28d83131bb8e0fb9">ARM_COMPUTE_LOG_INFO_MSG_WITH_FORMAT_CORE</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_INFO_MSG_WITH_FORMAT_CORE(fmt,...)</div><div class="ttdoc">Log information level formatted message to the core system logger.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_log_8h_source.xhtml#l00099">Log.h:99</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_scheduler_xhtml_af5e26fa35c7355cf0d41e1e18c709a6e"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml#af5e26fa35c7355cf0d41e1e18c709a6e">arm_compute::IScheduler::split_dimensions_all</a></div><div class="ttdeci">static constexpr unsigned int split_dimensions_all</div><div class="ttdoc">When arm_compute::ISchedular::Hints::_split_dimension is initialized with this value then the schedul...</div><div class="ttdef"><b>Definition:</b> <a href="_i_scheduler_8h_source.xhtml#l00062">IScheduler.h:62</a></div></div>
<div class="ttc" id="a_error_8h_xhtml"><div class="ttname"><a href="_error_8h.xhtml">Error.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1scheduler__utils_xhtml_aac9c13e78a99d7f0cf4666558235917f"><div class="ttname"><a href="namespacearm__compute_1_1scheduler__utils.xhtml#aac9c13e78a99d7f0cf4666558235917f">arm_compute::scheduler_utils::split_2d</a></div><div class="ttdeci">std::pair&lt; unsigned, unsigned &gt; split_2d(unsigned max_threads, std::size_t m, std::size_t n)</div><div class="ttdoc">Given two dimensions and a maximum number of threads to utilise, calculate the best combination of th...</div><div class="ttdef"><b>Definition:</b> <a href="_scheduler_utils_8cpp_source.xhtml#l00035">SchedulerUtils.cpp:35</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_ad82ac0dcf7e7a862a3b73f1be3ca98f1"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#ad82ac0dcf7e7a862a3b73f1be3ca98f1">arm_compute::Window::split_window</a></div><div class="ttdeci">Window split_window(size_t dimension, size_t id, size_t total) const</div><div class="ttdoc">Split a window into a set of sub windows along a given dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00203">Window.inl:203</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_p_u_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_p_u_info.xhtml">arm_compute::CPUInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_types_8h_source.xhtml#l00066">CPPTypes.h:66</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_scheduler_xhtml_a3becf955da8cad5036399bcb90f1408d"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml#a3becf955da8cad5036399bcb90f1408d">arm_compute::IScheduler::run_tagged_workloads</a></div><div class="ttdeci">virtual void run_tagged_workloads(std::vector&lt; Workload &gt; &amp;workloads, const char *tag)</div><div class="ttdoc">Execute all the passed workloads.</div><div class="ttdef"><b>Definition:</b> <a href="_i_scheduler_8cpp_source.xhtml#l00174">IScheduler.cpp:174</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_pack_xhtml_a644718bb2fb240de962dc3c9a1fdf0dc"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_pack.xhtml#a644718bb2fb240de962dc3c9a1fdf0dc">arm_compute::ITensorPack::empty</a></div><div class="ttdeci">bool empty() const</div><div class="ttdoc">Checks if pack is empty.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_pack_8cpp_source.xhtml#l00079">ITensorPack.cpp:79</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_c_p_p_kernel_xhtml_a6b8ef149ef3b6ca5e548473916f95cd6"><div class="ttname"><a href="classarm__compute_1_1_i_c_p_p_kernel.xhtml#a6b8ef149ef3b6ca5e548473916f95cd6">arm_compute::ICPPKernel::run_op</a></div><div class="ttdeci">virtual void run_op(ITensorPack &amp;tensors, const Window &amp;window, const ThreadInfo &amp;info)</div><div class="ttdoc">Execute the kernel on the passed window.</div><div class="ttdef"><b>Definition:</b> <a href="_i_c_p_p_kernel_8h_source.xhtml#l00088">ICPPKernel.h:88</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_log_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_log_8h.xhtml">Log.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_pack_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_pack.xhtml">arm_compute::ITensorPack</a></div><div class="ttdoc">Tensor packing service.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_pack_8h_source.xhtml#l00039">ITensorPack.h:39</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_scheduler_xhtml_a47266bbd911ce9049fc1194e9fac9051"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml#a47266bbd911ce9049fc1194e9fac9051">arm_compute::IScheduler::BindFunc</a></div><div class="ttdeci">std::function&lt; int(int, int)&gt; BindFunc</div><div class="ttdoc">Function to be used and map a given thread id to a logical core id.</div><div class="ttdef"><b>Definition:</b> <a href="_i_scheduler_8h_source.xhtml#l00056">IScheduler.h:56</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a0b0eb3235749a2909dc5a101afe59a1b"><div class="ttname"><a href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond, msg)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00456">Error.h:456</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_scheduler_xhtml_ad3ab921e075d1edd827faf95870aa808a0fcc90da4811c877ba9f9c12f7d60bc9"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml#ad3ab921e075d1edd827faf95870aa808a0fcc90da4811c877ba9f9c12f7d60bc9">arm_compute::IScheduler::StrategyHint::DYNAMIC</a></div><div class="ttdeci">@ DYNAMIC</div><div class="ttdoc">Split the workload dynamically using a bucket system.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_c_p_p_kernel_xhtml_ad6586f7a2dd64942f59b8c408643a0ea"><div class="ttname"><a href="classarm__compute_1_1_i_c_p_p_kernel.xhtml#ad6586f7a2dd64942f59b8c408643a0ea">arm_compute::ICPPKernel::run</a></div><div class="ttdeci">virtual void run(const Window &amp;window, const ThreadInfo &amp;info)</div><div class="ttdoc">Execute the kernel on the passed window.</div><div class="ttdef"><b>Definition:</b> <a href="_i_c_p_p_kernel_8h_source.xhtml#l00057">ICPPKernel.h:57</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_c_p_p_kernel_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_c_p_p_kernel.xhtml">arm_compute::ICPPKernel</a></div><div class="ttdoc">Common interface for all kernels implemented in C++.</div><div class="ttdef"><b>Definition:</b> <a href="_i_c_p_p_kernel_8h_source.xhtml#l00038">ICPPKernel.h:38</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_a60f2e7a76af978d4eb6be4ac6e8044d1"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a60f2e7a76af978d4eb6be4ac6e8044d1">arm_compute::Window::DimW</a></div><div class="ttdeci">static constexpr size_t DimW</div><div class="ttdoc">Alias for dimension 3 also known as W dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00049">Window.h:49</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_ab3a68a01a1c7c22bfbd9f3f6d20e7d5a"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#ab3a68a01a1c7c22bfbd9f3f6d20e7d5a">arm_compute::Window::validate</a></div><div class="ttdeci">void validate() const</div><div class="ttdoc">Will validate all the window's dimensions' values when asserts are enabled.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00187">Window.inl:187</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_c_p_p_kernel_xhtml_a92fc66203d7affe26cbe70194a154895"><div class="ttname"><a href="classarm__compute_1_1_i_c_p_p_kernel.xhtml#a92fc66203d7affe26cbe70194a154895">arm_compute::ICPPKernel::run_nd</a></div><div class="ttdeci">virtual void run_nd(const Window &amp;window, const ThreadInfo &amp;info, const Window &amp;thread_locator)</div><div class="ttdoc">legacy compatibility layer for implemantions which do not support thread_locator In these cases we si...</div><div class="ttdef"><b>Definition:</b> <a href="_i_c_p_p_kernel_8h_source.xhtml#l00070">ICPPKernel.h:70</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00151">Error.h:151</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_1_1_dimension_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml">arm_compute::Window::Dimension</a></div><div class="ttdoc">Describe one of the image's dimensions with a start, end and step.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00079">Window.h:79</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_acd3d2bba51cb84d34dd7656ad2375a6e"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">arm_compute::Window::set</a></div><div class="ttdeci">void set(size_t dimension, const Dimension &amp;dim)</div><div class="ttdoc">Set the values of a given dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00053">Window.inl:53</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_ad2d402364fa822b0b7775081291eeca9"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">arm_compute::Window::DimY</a></div><div class="ttdeci">static constexpr size_t DimY</div><div class="ttdoc">Alias for dimension 1 also known as Y dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00045">Window.h:45</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_thread_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_thread_info.xhtml">arm_compute::ThreadInfo</a></div><div class="ttdoc">Information about executing thread and CPU.</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_types_8h_source.xhtml#l00191">CPPTypes.h:191</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_log_8h_xhtml_a14f4c3a00d20ad742642767c9449993e"><div class="ttname"><a href="arm__compute_2core_2_log_8h.xhtml#a14f4c3a00d20ad742642767c9449993e">ARM_COMPUTE_LOG_INFO_MSG_CORE</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_INFO_MSG_CORE(msg)</div><div class="ttdoc">Log information level message to the core system logger.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_log_8h_source.xhtml#l00087">Log.h:87</a></div></div>
<div class="ttc" id="a_i_scheduler_8h_xhtml"><div class="ttname"><a href="_i_scheduler_8h.xhtml">IScheduler.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml">arm_compute::Window</a></div><div class="ttdoc">Describe a multidimensional execution window.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00039">Window.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2024 Arm Limited.</div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="a_cpu_info_8h_xhtml"><div class="ttname"><a href="_cpu_info_8h.xhtml">CpuInfo.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_kernel_xhtml_a0466ee6ce6552c87595f0e88e73eeb1b"><div class="ttname"><a href="classarm__compute_1_1_i_kernel.xhtml#a0466ee6ce6552c87595f0e88e73eeb1b">arm_compute::IKernel::is_parallelisable</a></div><div class="ttdeci">virtual bool is_parallelisable() const</div><div class="ttdoc">Indicates whether or not the kernel is parallelisable.</div><div class="ttdef"><b>Definition:</b> <a href="_i_kernel_8cpp_source.xhtml#l00040">IKernel.cpp:40</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_scheduler_xhtml_ac24584a63e484123e3756d1b2a1c9e2f"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml#ac24584a63e484123e3756d1b2a1c9e2f">arm_compute::IScheduler::num_threads</a></div><div class="ttdeci">virtual unsigned int num_threads() const =0</div><div class="ttdoc">Returns the number of threads that the SingleThreadScheduler has in its pool.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_scheduler_xhtml_a64cafb079598059f1ee04f3076f1035e"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml#a64cafb079598059f1ee04f3076f1035e">arm_compute::IScheduler::set_num_threads_with_affinity</a></div><div class="ttdeci">virtual void set_num_threads_with_affinity(unsigned int num_threads, BindFunc func)</div><div class="ttdoc">Sets the number of threads the scheduler will use to run the kernels but also using a binding functio...</div><div class="ttdef"><b>Definition:</b> <a href="_i_scheduler_8cpp_source.xhtml#l00047">IScheduler.cpp:47</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_scheduler_xhtml_a6de5358eb9a099cda48662b2fc523ec5"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml#a6de5358eb9a099cda48662b2fc523ec5">arm_compute::IScheduler::num_threads_hint</a></div><div class="ttdeci">unsigned int num_threads_hint() const</div><div class="ttdoc">Get a hint for the best possible number of execution threads.</div><div class="ttdef"><b>Definition:</b> <a href="_i_scheduler_8cpp_source.xhtml#l00053">IScheduler.cpp:53</a></div></div>
<div class="ttc" id="a_i_c_p_p_kernel_8h_xhtml"><div class="ttname"><a href="_i_c_p_p_kernel_8h.xhtml">ICPPKernel.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_ac57b92957968088a392021cac1d2076b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a></div><div class="ttdeci">ScaleKernelInfo info(interpolation_policy, default_border_mode, PixelValue(), sampling_policy, false)</div></div>
<div class="ttc" id="anamespacetf__frozen__model__extractor_xhtml_aaccc9105df5383111407fd5b41255e23"><div class="ttname"><a href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">tf_frozen_model_extractor.t</a></div><div class="ttdeci">t</div><div class="ttdef"><b>Definition:</b> <a href="tf__frozen__model__extractor_8py_source.xhtml#l00049">tf_frozen_model_extractor.py:49</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_c_p_p_kernel_xhtml_a3aa853ba2ae719bcb7ed1ccbe3c33286"><div class="ttname"><a href="classarm__compute_1_1_i_c_p_p_kernel.xhtml#a3aa853ba2ae719bcb7ed1ccbe3c33286">arm_compute::ICPPKernel::get_mws</a></div><div class="ttdeci">virtual size_t get_mws(const CPUInfo &amp;platform, size_t thread_count) const</div><div class="ttdoc">Return minimum workload size of the relevant kernel.</div><div class="ttdef"><b>Definition:</b> <a href="_i_c_p_p_kernel_8h_source.xhtml#l00100">ICPPKernel.h:100</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpuinfo_xhtml_a8d1f363d679403ae1ad371b85e63c7a3"><div class="ttname"><a href="namespacearm__compute_1_1cpuinfo.xhtml#a8d1f363d679403ae1ad371b85e63c7a3">arm_compute::cpuinfo::num_threads_hint</a></div><div class="ttdeci">uint32_t num_threads_hint()</div><div class="ttdoc">Some systems have both big and small cores, this fuction computes the minimum number of cores that ar...</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_info_8cpp_source.xhtml#l00455">CpuInfo.cpp:455</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_bf9f26469d00835ba20ff8d80ee5a804.xhtml">runtime</a></li><li class="navelem"><a class="el" href="_i_scheduler_8cpp.xhtml">IScheduler.cpp</a></li>
    <li class="footer">Generated on Mon Jun 17 2024 15:11:22 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
