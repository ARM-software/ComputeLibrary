<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: CLCommandBuffer Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classarm__compute_1_1_c_l_command_buffer.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">CLCommandBuffer Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p>Command buffer contains a list of commands that is constructed once and later enqueued multiple times.  
 <a href="classarm__compute_1_1_c_l_command_buffer.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_c_l_command_buffer_8h_source.xhtml">CLCommandBuffer.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a080ae7dc3dd0eb883881e05b7cabd06d"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_command_buffer.xhtml#a080ae7dc3dd0eb883881e05b7cabd06d">CLCommandBuffer</a> ()</td></tr>
<tr class="memdesc:a080ae7dc3dd0eb883881e05b7cabd06d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor.  <a href="classarm__compute_1_1_c_l_command_buffer.xhtml#a080ae7dc3dd0eb883881e05b7cabd06d">More...</a><br /></td></tr>
<tr class="separator:a080ae7dc3dd0eb883881e05b7cabd06d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7d3c548ee554bdbb0209deb4be0108f"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_command_buffer.xhtml#af7d3c548ee554bdbb0209deb4be0108f">~CLCommandBuffer</a> ()</td></tr>
<tr class="memdesc:af7d3c548ee554bdbb0209deb4be0108f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="classarm__compute_1_1_c_l_command_buffer.xhtml#af7d3c548ee554bdbb0209deb4be0108f">More...</a><br /></td></tr>
<tr class="separator:af7d3c548ee554bdbb0209deb4be0108f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a229cf3f7f693bce779094f2d16cef9f5"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_command_buffer.xhtml#a229cf3f7f693bce779094f2d16cef9f5">CLCommandBuffer</a> (const <a class="el" href="classarm__compute_1_1_c_l_command_buffer.xhtml">CLCommandBuffer</a> &amp;)=delete</td></tr>
<tr class="memdesc:a229cf3f7f693bce779094f2d16cef9f5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Disallow copy constructor.  <a href="classarm__compute_1_1_c_l_command_buffer.xhtml#a229cf3f7f693bce779094f2d16cef9f5">More...</a><br /></td></tr>
<tr class="separator:a229cf3f7f693bce779094f2d16cef9f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a392dd7bada4ee174094e2565cda0467b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_c_l_command_buffer.xhtml">CLCommandBuffer</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_command_buffer.xhtml#a392dd7bada4ee174094e2565cda0467b">operator=</a> (const <a class="el" href="classarm__compute_1_1_c_l_command_buffer.xhtml">CLCommandBuffer</a> &amp;)=delete</td></tr>
<tr class="memdesc:a392dd7bada4ee174094e2565cda0467b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Disallow copy assignment.  <a href="classarm__compute_1_1_c_l_command_buffer.xhtml#a392dd7bada4ee174094e2565cda0467b">More...</a><br /></td></tr>
<tr class="separator:a392dd7bada4ee174094e2565cda0467b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a601b2342a3d85496294d1d202b1a216a"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_command_buffer.xhtml#a601b2342a3d85496294d1d202b1a216a">CLCommandBuffer</a> (<a class="el" href="classarm__compute_1_1_c_l_command_buffer.xhtml">CLCommandBuffer</a> &amp;&amp;other)=delete</td></tr>
<tr class="memdesc:a601b2342a3d85496294d1d202b1a216a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Disallow move constructor.  <a href="classarm__compute_1_1_c_l_command_buffer.xhtml#a601b2342a3d85496294d1d202b1a216a">More...</a><br /></td></tr>
<tr class="separator:a601b2342a3d85496294d1d202b1a216a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5f8e814a23635d542414d4f995345c33"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_c_l_command_buffer.xhtml">CLCommandBuffer</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_command_buffer.xhtml#a5f8e814a23635d542414d4f995345c33">operator=</a> (<a class="el" href="classarm__compute_1_1_c_l_command_buffer.xhtml">CLCommandBuffer</a> &amp;&amp;other)=delete</td></tr>
<tr class="memdesc:a5f8e814a23635d542414d4f995345c33"><td class="mdescLeft">&#160;</td><td class="mdescRight">Disallow move assignment.  <a href="classarm__compute_1_1_c_l_command_buffer.xhtml#a5f8e814a23635d542414d4f995345c33">More...</a><br /></td></tr>
<tr class="separator:a5f8e814a23635d542414d4f995345c33"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aacd903a79a2ddefa4da8093b75d4c1e0"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_command_buffer.xhtml#aacd903a79a2ddefa4da8093b75d4c1e0">add_kernel</a> (cl_kernel kernel, const cl::NDRange &amp;<a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, const cl::NDRange &amp;global, const cl::NDRange &amp;local)=0</td></tr>
<tr class="memdesc:aacd903a79a2ddefa4da8093b75d4c1e0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add a kernel enqueue command to the command queue.  <a href="classarm__compute_1_1_c_l_command_buffer.xhtml#aacd903a79a2ddefa4da8093b75d4c1e0">More...</a><br /></td></tr>
<tr class="separator:aacd903a79a2ddefa4da8093b75d4c1e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab086507a14b18e4a82ebeb0c540eca5f"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = std::enable_if_t&lt;std::is_arithmetic&lt;T&gt;::value || std::is_pointer&lt;T&gt;::value&gt;&gt; </td></tr>
<tr class="memitem:ab086507a14b18e4a82ebeb0c540eca5f"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_command_buffer.xhtml#ab086507a14b18e4a82ebeb0c540eca5f">add_mutable_argument</a> (cl_uint arg_idx, const T *value)</td></tr>
<tr class="memdesc:ab086507a14b18e4a82ebeb0c540eca5f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add the mutable argument to the current kernel enqueue command.  <a href="classarm__compute_1_1_c_l_command_buffer.xhtml#ab086507a14b18e4a82ebeb0c540eca5f">More...</a><br /></td></tr>
<tr class="separator:ab086507a14b18e4a82ebeb0c540eca5f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5882b5eaf11f8b1561d5bb4ecdc217c3"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_command_buffer.xhtml#a5882b5eaf11f8b1561d5bb4ecdc217c3">finalize</a> ()=0</td></tr>
<tr class="memdesc:a5882b5eaf11f8b1561d5bb4ecdc217c3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Finalize the command buffer.  <a href="classarm__compute_1_1_c_l_command_buffer.xhtml#a5882b5eaf11f8b1561d5bb4ecdc217c3">More...</a><br /></td></tr>
<tr class="separator:a5882b5eaf11f8b1561d5bb4ecdc217c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a99b02345a8a15d3c5ea2844a2253f510"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_command_buffer.xhtml#a99b02345a8a15d3c5ea2844a2253f510">update</a> ()=0</td></tr>
<tr class="memdesc:a99b02345a8a15d3c5ea2844a2253f510"><td class="mdescLeft">&#160;</td><td class="mdescRight">Update the command buffer with new kernel argument values.  <a href="classarm__compute_1_1_c_l_command_buffer.xhtml#a99b02345a8a15d3c5ea2844a2253f510">More...</a><br /></td></tr>
<tr class="separator:a99b02345a8a15d3c5ea2844a2253f510"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5fab675dd8532ba2d569c64fe0640d61"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_command_buffer.xhtml#a5fab675dd8532ba2d569c64fe0640d61">enqueue</a> ()=0</td></tr>
<tr class="memdesc:a5fab675dd8532ba2d569c64fe0640d61"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enqueue the command buffer.  <a href="classarm__compute_1_1_c_l_command_buffer.xhtml#a5fab675dd8532ba2d569c64fe0640d61">More...</a><br /></td></tr>
<tr class="separator:a5fab675dd8532ba2d569c64fe0640d61"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acbe3e7950f870aa8becbcc956b92cd3e"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_command_buffer.xhtml#acbe3e7950f870aa8becbcc956b92cd3e">is_finalized</a> () const =0</td></tr>
<tr class="memdesc:acbe3e7950f870aa8becbcc956b92cd3e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if the command buffer has been finalized.  <a href="classarm__compute_1_1_c_l_command_buffer.xhtml#acbe3e7950f870aa8becbcc956b92cd3e">More...</a><br /></td></tr>
<tr class="separator:acbe3e7950f870aa8becbcc956b92cd3e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a8dac6dbe99699bbdab5ebe80f32e37c0"><td class="memItemLeft" align="right" valign="top">static std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_c_l_command_buffer.xhtml">CLCommandBuffer</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_command_buffer.xhtml#a8dac6dbe99699bbdab5ebe80f32e37c0">create</a> (cl_command_queue queue)</td></tr>
<tr class="memdesc:a8dac6dbe99699bbdab5ebe80f32e37c0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a new command buffer targeting the specified command queue.  <a href="classarm__compute_1_1_c_l_command_buffer.xhtml#a8dac6dbe99699bbdab5ebe80f32e37c0">More...</a><br /></td></tr>
<tr class="separator:a8dac6dbe99699bbdab5ebe80f32e37c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Command buffer contains a list of commands that is constructed once and later enqueued multiple times. </p>
<p>To prepare a command buffer:</p><ul>
<li>Construct a new command buffer targeting a command queue using <a class="el" href="classarm__compute_1_1_c_l_command_buffer.xhtml#a8dac6dbe99699bbdab5ebe80f32e37c0">CLCommandBuffer::create</a>.</li>
<li>Add kernel enqueue command to the buffer using <a class="el" href="classarm__compute_1_1_c_l_command_buffer.xhtml#aacd903a79a2ddefa4da8093b75d4c1e0">CLCommandBuffer::add_kernel</a>. The kernel must be ready to be enqueued with all the arguments set.</li>
<li>Specify which kernel argument is mutable after the command buffer has been finalized.</li>
<li>When all the kernel enqueue commands have been added, call <a class="el" href="classarm__compute_1_1_c_l_command_buffer.xhtml#a5882b5eaf11f8b1561d5bb4ecdc217c3">CLCommandBuffer::finalize</a>. After this point the command buffer is ready to be executed.</li>
</ul>
<p>To execute the command buffer:</p><ul>
<li>Make any changes in the value which the mutable arguments are pointing to.</li>
<li>Call <a class="el" href="classarm__compute_1_1_c_l_command_buffer.xhtml#a99b02345a8a15d3c5ea2844a2253f510">CLCommandBuffer::update</a> to apply the argument value changes.</li>
<li>Call <a class="el" href="classarm__compute_1_1_c_l_command_buffer.xhtml#a5fab675dd8532ba2d569c64fe0640d61">CLCommandBuffer::enqueue</a> to enqueue the command buffer to execute. </li>
</ul>

<p class="definition">Definition at line <a class="el" href="_c_l_command_buffer_8h_source.xhtml#l00052">52</a> of file <a class="el" href="_c_l_command_buffer_8h_source.xhtml">CLCommandBuffer.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a080ae7dc3dd0eb883881e05b7cabd06d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a080ae7dc3dd0eb883881e05b7cabd06d">&#9670;&nbsp;</a></span>CLCommandBuffer() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_c_l_command_buffer.xhtml">CLCommandBuffer</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Constructor. </p>

</div>
</div>
<a id="af7d3c548ee554bdbb0209deb4be0108f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af7d3c548ee554bdbb0209deb4be0108f">&#9670;&nbsp;</a></span>~CLCommandBuffer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarm__compute_1_1_c_l_command_buffer.xhtml">CLCommandBuffer</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Destructor. </p>

</div>
</div>
<a id="a229cf3f7f693bce779094f2d16cef9f5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a229cf3f7f693bce779094f2d16cef9f5">&#9670;&nbsp;</a></span>CLCommandBuffer() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_c_l_command_buffer.xhtml">CLCommandBuffer</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_c_l_command_buffer.xhtml">CLCommandBuffer</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Disallow copy constructor. </p>

</div>
</div>
<a id="a601b2342a3d85496294d1d202b1a216a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a601b2342a3d85496294d1d202b1a216a">&#9670;&nbsp;</a></span>CLCommandBuffer() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_c_l_command_buffer.xhtml">CLCommandBuffer</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_c_l_command_buffer.xhtml">CLCommandBuffer</a> &amp;&amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Disallow move constructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="aacd903a79a2ddefa4da8093b75d4c1e0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aacd903a79a2ddefa4da8093b75d4c1e0">&#9670;&nbsp;</a></span>add_kernel()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void add_kernel </td>
          <td>(</td>
          <td class="paramtype">cl_kernel&#160;</td>
          <td class="paramname"><em>kernel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cl::NDRange &amp;&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cl::NDRange &amp;&#160;</td>
          <td class="paramname"><em>global</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cl::NDRange &amp;&#160;</td>
          <td class="paramname"><em>local</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Add a kernel enqueue command to the command queue. </p>
<p>This function must be called before the command buffer has been finalized.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">kernel</td><td>The CL kernel. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">offset</td><td>The global work offset. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">global</td><td>The global work size. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">local</td><td>The local work size. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_c_l_compat_command_buffer.xhtml#a06ba711f428dcc60e33df9b34aa18fbc">CLCompatCommandBuffer</a>, and <a class="el" href="classarm__compute_1_1_c_l_mutable_command_buffer.xhtml#a06ba711f428dcc60e33df9b34aa18fbc">CLMutableCommandBuffer</a>.</p>

</div>
</div>
<a id="ab086507a14b18e4a82ebeb0c540eca5f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab086507a14b18e4a82ebeb0c540eca5f">&#9670;&nbsp;</a></span>add_mutable_argument()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void add_mutable_argument </td>
          <td>(</td>
          <td class="paramtype">cl_uint&#160;</td>
          <td class="paramname"><em>arg_idx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Add the mutable argument to the current kernel enqueue command. </p>
<p>This function must be called after <a class="el" href="classarm__compute_1_1_c_l_command_buffer.xhtml#aacd903a79a2ddefa4da8093b75d4c1e0">CLCommandBuffer::add_kernel</a> but before the command buffer has been finalized.</p>
<p>The pointer must be valid and it must point to the correct value at the time <a class="el" href="classarm__compute_1_1_c_l_command_buffer.xhtml#a99b02345a8a15d3c5ea2844a2253f510">CLCommandBuffer::update</a> is called so that the value of the argument can be applied successfully to the kernel enqueue command.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">arg_idx</td><td>The index of the argument in the current kernel program. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>The pointer to the value of the argument. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_c_l_command_buffer_8h_source.xhtml#l00106">106</a> of file <a class="el" href="_c_l_command_buffer_8h_source.xhtml">CLCommandBuffer.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    {</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        add_mutable_argument_generic(arg_idx, value, <span class="keyword">sizeof</span>(T));</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    }</div>
</div><!-- fragment -->
</div>
</div>
<a id="a8dac6dbe99699bbdab5ebe80f32e37c0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8dac6dbe99699bbdab5ebe80f32e37c0">&#9670;&nbsp;</a></span>create()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_c_l_command_buffer.xhtml">CLCommandBuffer</a> &gt; create </td>
          <td>(</td>
          <td class="paramtype">cl_command_queue&#160;</td>
          <td class="paramname"><em>queue</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create a new command buffer targeting the specified command queue. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">queue</td><td>The command queue to execute the command buffer.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A unique pointer to the newly created command buffer. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_c_l_command_buffer_8cpp_source.xhtml#l00036">36</a> of file <a class="el" href="_c_l_command_buffer_8cpp_source.xhtml">CLCommandBuffer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> &amp;cl_device            = <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">CLKernelLibrary::get</a>().<a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a1b3919fb1e9372257947abe01e74e3d4">get_device</a>();</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>  has_mutable_dispatch = <a class="code" href="namespacearm__compute.xhtml#afe482b248e77ce20f67b5f3190ee37c4">command_buffer_mutable_dispatch_supported</a>(cl_device);</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160; </div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keywordflow">if</span> (has_mutable_dispatch)</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    {</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        <span class="keywordflow">return</span> std::make_unique&lt;CLMutableCommandBuffer&gt;(queue);</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    }</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    {</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <span class="keywordflow">return</span> std::make_unique&lt;CLCompatCommandBuffer&gt;(queue);</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    }</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00509">arm_compute::command_buffer_mutable_dispatch_supported()</a>, <a class="el" href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00041">CLKernelLibrary::get()</a>, and <a class="el" href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00073">CLKernelLibrary::get_device()</a>.</p>

</div>
</div>
<a id="a5fab675dd8532ba2d569c64fe0640d61"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5fab675dd8532ba2d569c64fe0640d61">&#9670;&nbsp;</a></span>enqueue()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void enqueue </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Enqueue the command buffer. </p>
<p>This function must be called after the command buffer has been finalized. </p>

<p>Implemented in <a class="el" href="classarm__compute_1_1_c_l_compat_command_buffer.xhtml#a36ec98486a2f4b7ee530e1953370572c">CLCompatCommandBuffer</a>, and <a class="el" href="classarm__compute_1_1_c_l_mutable_command_buffer.xhtml#a36ec98486a2f4b7ee530e1953370572c">CLMutableCommandBuffer</a>.</p>

</div>
</div>
<a id="a5882b5eaf11f8b1561d5bb4ecdc217c3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5882b5eaf11f8b1561d5bb4ecdc217c3">&#9670;&nbsp;</a></span>finalize()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void finalize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Finalize the command buffer. </p>

<p>Implemented in <a class="el" href="classarm__compute_1_1_c_l_compat_command_buffer.xhtml#a6a32bafa8064e666aed52486c4af4144">CLCompatCommandBuffer</a>, and <a class="el" href="classarm__compute_1_1_c_l_mutable_command_buffer.xhtml#a6a32bafa8064e666aed52486c4af4144">CLMutableCommandBuffer</a>.</p>

</div>
</div>
<a id="acbe3e7950f870aa8becbcc956b92cd3e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acbe3e7950f870aa8becbcc956b92cd3e">&#9670;&nbsp;</a></span>is_finalized()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool is_finalized </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Check if the command buffer has been finalized. </p>
<dl class="section return"><dt>Returns</dt><dd>true if the command buffer has been finalized. </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_c_l_compat_command_buffer.xhtml#abef52b4cd29e5d9e45d53b1ed3f569ad">CLCompatCommandBuffer</a>, and <a class="el" href="classarm__compute_1_1_c_l_mutable_command_buffer.xhtml#abef52b4cd29e5d9e45d53b1ed3f569ad">CLMutableCommandBuffer</a>.</p>

</div>
</div>
<a id="a5f8e814a23635d542414d4f995345c33"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5f8e814a23635d542414d4f995345c33">&#9670;&nbsp;</a></span>operator=() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_c_l_command_buffer.xhtml">CLCommandBuffer</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_c_l_command_buffer.xhtml">CLCommandBuffer</a> &amp;&amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Disallow move assignment. </p>

</div>
</div>
<a id="a392dd7bada4ee174094e2565cda0467b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a392dd7bada4ee174094e2565cda0467b">&#9670;&nbsp;</a></span>operator=() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_c_l_command_buffer.xhtml">CLCommandBuffer</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_c_l_command_buffer.xhtml">CLCommandBuffer</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Disallow copy assignment. </p>

</div>
</div>
<a id="a99b02345a8a15d3c5ea2844a2253f510"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a99b02345a8a15d3c5ea2844a2253f510">&#9670;&nbsp;</a></span>update()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void update </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Update the command buffer with new kernel argument values. </p>
<p>This function must be called after the command buffer has been finalized.</p>
<p>All the value pointed by the mutable argument will be applied to the command buffer. </p>

<p>Implemented in <a class="el" href="classarm__compute_1_1_c_l_compat_command_buffer.xhtml#a44137bb65de2396875934e48a6ee5099">CLCompatCommandBuffer</a>, and <a class="el" href="classarm__compute_1_1_c_l_mutable_command_buffer.xhtml#a44137bb65de2396875934e48a6ee5099">CLMutableCommandBuffer</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/core/CL/<a class="el" href="_c_l_command_buffer_8h_source.xhtml">CLCommandBuffer.h</a></li>
<li>src/core/CL/<a class="el" href="_c_l_command_buffer_8cpp_source.xhtml">CLCommandBuffer.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassarm__compute_1_1_c_l_kernel_library_xhtml_acba005f5ce2c62cbf3f94d074d9007aa"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">arm_compute::CLKernelLibrary::get</a></div><div class="ttdeci">static CLKernelLibrary &amp; get()</div><div class="ttdoc">Access the KernelLibrary singleton.</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00041">CLKernelLibrary.cpp:41</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_afe482b248e77ce20f67b5f3190ee37c4"><div class="ttname"><a href="namespacearm__compute.xhtml#afe482b248e77ce20f67b5f3190ee37c4">arm_compute::command_buffer_mutable_dispatch_supported</a></div><div class="ttdeci">bool command_buffer_mutable_dispatch_supported(const cl::Device &amp;device)</div><div class="ttdoc">Check whether cl_khr_command_buffer_mutable_dispatch extension is supported by the specified CL devic...</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00509">CLHelpers.cpp:509</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_kernel_library_xhtml_a1b3919fb1e9372257947abe01e74e3d4"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#a1b3919fb1e9372257947abe01e74e3d4">arm_compute::CLKernelLibrary::get_device</a></div><div class="ttdeci">const cl::Device &amp; get_device()</div><div class="ttdoc">Gets the CL device for which the programs are created.</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00073">CLKernelLibrary.cpp:73</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1_c_l_command_buffer.xhtml">CLCommandBuffer</a></li>
    <li class="footer">Generated on Tue Nov 21 2023 16:31:13 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
