<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/runtime/CPP/CPPScheduler.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('src_2runtime_2_c_p_p_2_c_p_p_scheduler_8cpp_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">CPPScheduler.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="src_2runtime_2_c_p_p_2_c_p_p_scheduler_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2016-2023 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_c_p_p_scheduler_8h.xhtml">arm_compute/runtime/CPP/CPPScheduler.h</a>&quot;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160; </div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_c_p_p_kernel_8h.xhtml">arm_compute/core/CPP/ICPPKernel.h</a>&quot;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_error_8h.xhtml">arm_compute/core/Error.h</a>&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_helpers_8h.xhtml">arm_compute/core/Helpers.h</a>&quot;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_log_8h.xhtml">arm_compute/core/Log.h</a>&quot;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_utils_8h.xhtml">arm_compute/core/Utils.h</a>&quot;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_utility_8h.xhtml">arm_compute/core/utils/misc/Utility.h</a>&quot;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_mutex_8h.xhtml">support/Mutex.h</a>&quot;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160; </div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &lt;atomic&gt;</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &lt;condition_variable&gt;</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include &lt;list&gt;</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#include &lt;mutex&gt;</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#include &lt;system_error&gt;</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor">#include &lt;thread&gt;</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160; </div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;{</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="keyword">namespace</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;{</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="keyword">class </span>ThreadFeeder</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;{</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment">    /** Constructor</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">     * @param[in] start First value that will be returned by the feeder</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment">     * @param[in] end   End condition (The last value returned by get_next() will be end - 1)</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">explicit</span> ThreadFeeder(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> start = 0, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a> = 0)</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        : _atomic_counter(start), _end(<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>)</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    {</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    }<span class="comment"></span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment">    /** Return the next element in the range if there is one.</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment">     * @param[out] next Will contain the next element if there is one.</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">     * @return False if the end of the range has been reached and next wasn&#39;t set.</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keywordtype">bool</span> get_next(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> &amp;next)</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    {</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        next = atomic_fetch_add_explicit(&amp;_atomic_counter, 1u, std::memory_order_relaxed);</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keywordflow">return</span> next &lt; _end;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    }</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160; </div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    std::atomic_uint   _atomic_counter;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _end;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;};</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">/** Execute workloads[info.thread_id] first, then call the feeder to get the index of the next workload to run.</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment"> * Will run workloads until the feeder reaches the end of its range.</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment"> * @param[in]     workloads The array of workloads</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment"> * @param[in,out] feeder    The feeder indicating which workload to execute next.</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment"> * @param[in]     info      Threading and CPU info.</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="keywordtype">void</span> process_workloads(std::vector&lt;IScheduler::Workload&gt; &amp;workloads, ThreadFeeder &amp;feeder, <span class="keyword">const</span> ThreadInfo &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>)</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;{</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> workload_index = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.thread_id;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordflow">do</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    {</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(workload_index &gt;= workloads.size());</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        workloads[workload_index](<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    }</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keywordflow">while</span>(feeder.get_next(workload_index));</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;}</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment">/** Set thread affinity. Pin current thread to a particular core</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment"> * @param[in] core_id ID of the core to which the current thread is pinned</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="keywordtype">void</span> set_thread_affinity(<span class="keywordtype">int</span> core_id)</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;{</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keywordflow">if</span>(core_id &lt; 0)</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    {</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    }</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160; </div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="preprocessor">#if !defined(_WIN64) &amp;&amp; !defined(__APPLE__) &amp;&amp; !defined(__OpenBSD__)</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    cpu_set_t <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1ec8dd7ea96aec0e4068497f0b5e17b2">set</a>;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    CPU_ZERO(&amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1ec8dd7ea96aec0e4068497f0b5e17b2">set</a>);</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    CPU_SET(core_id, &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1ec8dd7ea96aec0e4068497f0b5e17b2">set</a>);</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <a class="code" href="_error_8h.xhtml#a292b758f9eba8b487d71eae4b37326fc">ARM_COMPUTE_EXIT_ON_MSG</a>(sched_setaffinity(0, <span class="keyword">sizeof</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1ec8dd7ea96aec0e4068497f0b5e17b2">set</a>), &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1ec8dd7ea96aec0e4068497f0b5e17b2">set</a>), <span class="stringliteral">&quot;Error setting thread affinity&quot;</span>);</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* !defined(__APPLE__) &amp;&amp; !defined(__OpenBSD__) */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;}</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment">/** There are currently 2 scheduling modes supported by CPPScheduler</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment"> * Linear:</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment"> *  The default mode where all the scheduling is carried out by the main thread linearly (in a loop).</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment"> *  E.G. If there are 8 threads in total, there will be 1 main thread + 7 threads in the thread pool, and it is main</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment"> *  thread&#39;s responsibility to start all the other threads in the thread pool.</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment"> * Fanout:</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment"> *  In fanout mode, the scheduling (starting other threads) task is distributed across many threads instead of just</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment"> *  the main thread.</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment"> *  The scheduler has a fixed parameter: wake_fanout, and the scheduling sequence goes like this:</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment"> *  1. Main thread wakes the first wake_fanout - 1 number of FanoutThreads from the thread pool</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment"> *      From thread: 0</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment"> *      To thread (non-inclusive): Wake_fanout - 1</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment"> *  2. Each FanoutThread then wakes wake_fanout number of FanoutThreads from the thread pool:</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment"> *      From thread: (i + 1) * wake_fanout - 1</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment"> *      To thread (non-inclusive): (i + 2) * wake_fanout - 1</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment"> *      where i is the current thread&#39;s thread id</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment"> *      The end is clamped at the size of the thread pool / the number of threads in use - 1</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment"> *  E.G. for a total number of 8 threads (1 main thread, 7 FanoutThreads in thread pool) with a fanout of 3</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment"> *  1. Main thread wakes FanoutThread 0, 1</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment"> *  2. FanoutThread 0 wakes FanoutThread 2, 3, 4</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment"> *  3. FanoutThread 1 wakes FanoutThread 5, 6</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160; </div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="keyword">class </span>Thread final</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;{</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment">    /** Start a new thread</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment">     * Thread will be pinned to a given core id if value is non-negative</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment">     * @param[in] core_pin Core id to pin the thread on. If negative no thread pinning will take place</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="keyword">explicit</span> Thread(<span class="keywordtype">int</span> core_pin = -1);</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160; </div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    Thread(<span class="keyword">const</span> Thread &amp;) = <span class="keyword">delete</span>;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    Thread &amp;operator=(<span class="keyword">const</span> Thread &amp;) = <span class="keyword">delete</span>;</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    Thread(Thread &amp;&amp;)                 = <span class="keyword">delete</span>;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    Thread &amp;operator=(Thread &amp;&amp;) = <span class="keyword">delete</span>;</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment">    /** Destructor. Make the thread join. */</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    ~Thread();</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="comment">    /** Set workloads */</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keywordtype">void</span> set_workload(std::vector&lt;IScheduler::Workload&gt; *workloads, ThreadFeeder &amp;feeder, <span class="keyword">const</span> ThreadInfo &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="comment">    /** Request the worker thread to start executing workloads.</span></div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment">     * The thread will start by executing workloads[info.thread_id] and will then call the feeder to</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment">     * get the index of the following workload to run.</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment">     * @note This function will return as soon as the workloads have been sent to the worker thread.</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment">     * wait() needs to be called to ensure the execution is complete.</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="keywordtype">void</span> start();</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment">    /** Wait for the current kernel execution to complete. */</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    std::exception_ptr wait();</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment">    /** Function ran by the worker thread. */</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keywordtype">void</span> worker_thread();</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment">    /** Set the scheduling strategy to be linear */</span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="keywordtype">void</span> set_linear_mode()</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    {</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        _thread_pool = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        _wake_beg    = 0;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        _wake_end    = 0;</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    }</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment">    /** Set the scheduling strategy to be fanout */</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="keywordtype">void</span> set_fanout_mode(std::list&lt;Thread&gt; *thread_pool, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> wake_beg, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> wake_end)</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    {</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        _thread_pool = thread_pool;</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        _wake_beg    = wake_beg;</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        _wake_end    = wake_end;</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    }</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160; </div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    std::thread                        _thread{};</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    ThreadInfo                         _info{};</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    std::vector&lt;IScheduler::Workload&gt; *_workloads{ <span class="keyword">nullptr</span> };</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    ThreadFeeder                      *_feeder{ <span class="keyword">nullptr</span> };</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    std::mutex                         _m{};</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    std::condition_variable            _cv{};</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keywordtype">bool</span>                               _wait_for_work{ <span class="keyword">false</span> };</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keywordtype">bool</span>                               _job_complete{ <span class="keyword">true</span> };</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    std::exception_ptr                 _current_exception{ <span class="keyword">nullptr</span> };</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="keywordtype">int</span>                                _core_pin{ -1 };</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    std::list&lt;Thread&gt;                 *_thread_pool{ <span class="keyword">nullptr</span> };</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                       _wake_beg{ 0 };</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                       _wake_end{ 0 };</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;};</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160; </div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;Thread::Thread(<span class="keywordtype">int</span> core_pin)</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    : _core_pin(core_pin)</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;{</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    _thread = std::thread(&amp;Thread::worker_thread, <span class="keyword">this</span>);</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;}</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160; </div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;Thread::~Thread()</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;{</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <span class="comment">// Make sure worker thread has ended</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <span class="keywordflow">if</span>(_thread.joinable())</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    {</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        ThreadFeeder feeder;</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        set_workload(<span class="keyword">nullptr</span>, feeder, ThreadInfo());</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        start();</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        _thread.join();</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    }</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;}</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160; </div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="keywordtype">void</span> Thread::set_workload(std::vector&lt;IScheduler::Workload&gt; *workloads, ThreadFeeder &amp;feeder, <span class="keyword">const</span> ThreadInfo &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>)</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;{</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    _workloads = workloads;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    _feeder    = &amp;feeder;</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    _info      = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;}</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160; </div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="keywordtype">void</span> Thread::start()</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;{</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    {</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        std::lock_guard&lt;std::mutex&gt; lock(_m);</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        _wait_for_work = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        _job_complete  = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    }</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    _cv.notify_one();</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;}</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160; </div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;std::exception_ptr Thread::wait()</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;{</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    {</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        std::unique_lock&lt;std::mutex&gt; lock(_m);</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        _cv.wait(lock, [&amp;] { <span class="keywordflow">return</span> _job_complete; });</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    }</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="keywordflow">return</span> _current_exception;</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;}</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160; </div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="keywordtype">void</span> Thread::worker_thread()</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;{</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    set_thread_affinity(_core_pin);</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160; </div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <span class="keywordflow">while</span>(<span class="keyword">true</span>)</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    {</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        std::unique_lock&lt;std::mutex&gt; lock(_m);</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        _cv.wait(lock, [&amp;] { <span class="keywordflow">return</span> _wait_for_work; });</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        _wait_for_work = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160; </div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        _current_exception = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160; </div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        <span class="comment">// Exit if the worker thread has not been fed with workloads</span></div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        <span class="keywordflow">if</span>(_workloads == <span class="keyword">nullptr</span> || _feeder == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        {</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;            <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        }</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160; </div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        <span class="comment">// Wake up more peer threads from thread pool if this job has been delegated to the current thread</span></div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        <span class="keywordflow">if</span>(_thread_pool != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        {</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;            <span class="keyword">auto</span> thread_it = _thread_pool-&gt;begin();</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;            <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a2f7ed43a30966415307da837a24ee3ab">std::advance</a>(thread_it, std::min(<span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(_thread_pool-&gt;size()), _wake_beg));</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;            <span class="keyword">auto</span> wake_end = std::min(_wake_end, <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(_info.<a class="code" href="structarm__compute_1_1_thread_info.xhtml#a08963f7335eef295237ab460863bc3d5">num_threads</a> - 1));</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a> = _wake_beg; <a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a> &lt; wake_end; ++<a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a>, ++thread_it)</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;            {</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                thread_it-&gt;start();</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;            }</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        }</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160; </div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_EXCEPTIONS_DISABLED</span></div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        <span class="keywordflow">try</span></div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        {</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_EXCEPTIONS_ENABLED */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;            process_workloads(*_workloads, *_feeder, _info);</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160; </div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_EXCEPTIONS_DISABLED</span></div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        }</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        <span class="keywordflow">catch</span>(...)</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        {</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;            _current_exception = std::current_exception();</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        }</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_EXCEPTIONS_DISABLED */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        _workloads    = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        _job_complete = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        lock.unlock();</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        _cv.notify_one();</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    }</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;}</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;} <span class="comment">//namespace</span></div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160; </div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="keyword">struct </span>CPPScheduler::Impl final</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;{</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    constexpr <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_default_wake_fanout = 4;</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    <span class="keyword">enum class</span> Mode</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    {</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        Linear,</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;        Fanout</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    };</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    <span class="keyword">enum class</span> ModeToggle</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    {</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        <a class="code" href="namespacetf__frozen__model__extractor.xhtml#ac7485dcc8d256a6f197ed7802687f252">None</a>,</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;        Linear,</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;        Fanout</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    };</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    <span class="keyword">explicit</span> Impl(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> thread_hint)</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        : _num_threads(thread_hint), _threads(_num_threads - 1), _mode(Mode::Linear), _wake_fanout(0<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">U</a>)</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    {</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> mode_env_v = <a class="code" href="namespacearm__compute_1_1utility.xhtml#abb96ad5c7071ec3a47ea5f07e817a636">utility::tolower</a>(<a class="code" href="namespacearm__compute_1_1utility.xhtml#aa805ec7ff4b1f0598b0f3a6164540817">utility::getenv</a>(<span class="stringliteral">&quot;ARM_COMPUTE_CPP_SCHEDULER_MODE&quot;</span>));</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        <span class="keywordflow">if</span>(mode_env_v == <span class="stringliteral">&quot;linear&quot;</span>)</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        {</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;            _forced_mode = ModeToggle::Linear;</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        }</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(mode_env_v == <span class="stringliteral">&quot;fanout&quot;</span>)</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        {</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;            _forced_mode = ModeToggle::Fanout;</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        }</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;        {</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;            _forced_mode = ModeToggle::None;</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;        }</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    }</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#ae64eebaa07f4d2da6cc2ba538c3cb095">set_num_threads</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a0da94220ee1e0f4928aa31ed0d4b30f7">num_threads</a>, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> thread_hint)</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    {</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;        _num_threads = <a class="code" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a0da94220ee1e0f4928aa31ed0d4b30f7">num_threads</a> == 0 ? thread_hint : <a class="code" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a0da94220ee1e0f4928aa31ed0d4b30f7">num_threads</a>;</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        _threads.resize(_num_threads - 1);</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;        auto_switch_mode(_num_threads);</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    }</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a7ed951f313d17451c99f8aeee200c3ca">set_num_threads_with_affinity</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a0da94220ee1e0f4928aa31ed0d4b30f7">num_threads</a>, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> thread_hint, <a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#a47266bbd911ce9049fc1194e9fac9051">BindFunc</a> func)</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    {</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;        _num_threads = <a class="code" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a0da94220ee1e0f4928aa31ed0d4b30f7">num_threads</a> == 0 ? thread_hint : <a class="code" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a0da94220ee1e0f4928aa31ed0d4b30f7">num_threads</a>;</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160; </div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        <span class="comment">// Set affinity on main thread</span></div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        set_thread_affinity(func(0, thread_hint));</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160; </div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        <span class="comment">// Set affinity on worked threads</span></div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;        _threads.clear();</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">auto</span> i = 1U; i &lt; _num_threads; ++i)</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;        {</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;            _threads.emplace_back(func(i, thread_hint));</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;        }</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;        auto_switch_mode(_num_threads);</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    }</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    <span class="keywordtype">void</span> auto_switch_mode(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_threads_to_use)</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    {</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;        <span class="comment">// If the environment variable is set to any of the modes, it overwrites the mode selected over num_threads_to_use</span></div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        <span class="keywordflow">if</span>(_forced_mode == ModeToggle::Fanout || (_forced_mode == ModeToggle::None &amp;&amp; num_threads_to_use &gt; 8))</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;        {</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;            set_fanout_mode(m_default_wake_fanout, num_threads_to_use);</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;            <a class="code" href="arm__compute_2core_2_log_8h.xhtml#af641430e72aa4c9f28d83131bb8e0fb9">ARM_COMPUTE_LOG_INFO_MSG_WITH_FORMAT_CORE</a>(<span class="stringliteral">&quot;Set CPPScheduler to Fanout mode, with wake up fanout : %d and %d threads to use\n&quot;</span>, this-&gt;wake_fanout(), num_threads_to_use);</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;        }</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;        <span class="keywordflow">else</span> <span class="comment">// Equivalent to (_forced_mode == ModeToggle::Linear || (_forced_mode == ModeToggle::None &amp;&amp; num_threads_to_use &lt;= 8))</span></div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;        {</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;            set_linear_mode();</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;            <a class="code" href="arm__compute_2core_2_log_8h.xhtml#af641430e72aa4c9f28d83131bb8e0fb9">ARM_COMPUTE_LOG_INFO_MSG_WITH_FORMAT_CORE</a>(<span class="stringliteral">&quot;Set CPPScheduler to Linear mode, with %d threads to use\n&quot;</span>, num_threads_to_use);</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;        }</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    }</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    <span class="keywordtype">void</span> set_linear_mode()</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    {</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;thread : _threads)</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;        {</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;            thread.set_linear_mode();</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;        }</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;        _mode        = Mode::Linear;</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;        _wake_fanout = 0<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">U</a>;</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    }</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    <span class="keywordtype">void</span> set_fanout_mode(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> wake_fanout, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_threads_to_use)</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    {</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(num_threads_to_use &gt; _threads.size() + 1);</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> actual_wake_fanout = std::max(2U, std::min(wake_fanout, num_threads_to_use - 1));</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;        <span class="keyword">auto</span>       thread_it          = _threads.begin();</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">auto</span> i = 1U; i &lt; num_threads_to_use; ++i, ++thread_it)</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;        {</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> wake_begin = i * actual_wake_fanout - 1;</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> wake_end   = std::min((i + 1) * actual_wake_fanout - 1, num_threads_to_use - 1);</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;            thread_it-&gt;set_fanout_mode(&amp;_threads, wake_begin, wake_end);</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;        }</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;        <span class="comment">// Reset the remaining threads&#39;s wake up schedule</span></div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;        <span class="keywordflow">while</span>(thread_it != _threads.end())</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;        {</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;            thread_it-&gt;set_fanout_mode(&amp;_threads, 0U, 0U);</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;            ++thread_it;</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;        }</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;        _mode        = Mode::Fanout;</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;        _wake_fanout = actual_wake_fanout;</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    }</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a0da94220ee1e0f4928aa31ed0d4b30f7">num_threads</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;        <span class="keywordflow">return</span> _num_threads;</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    }</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> wake_fanout()<span class="keyword"> const</span></div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;        <span class="keywordflow">return</span> _wake_fanout;</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    }</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    Mode <a class="code" href="namespaceclang__tidy__rules.xhtml#a1a6b6fb557d8d37d59700faf4e4c9167">mode</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        <span class="keywordflow">return</span> _mode;</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    }</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160; </div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    <span class="keywordtype">void</span> run_workloads(std::vector&lt;IScheduler::Workload&gt; &amp;workloads);</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160; </div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>       _num_threads;</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    std::list&lt;Thread&gt;  _threads;</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#acded863dbfdd730829d4188d67eefcf0">arm_compute::Mutex</a> _run_workloads_mutex{};</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    Mode               _mode{ Mode::Linear };</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    ModeToggle         _forced_mode{ ModeToggle::None };</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>       _wake_fanout{ 0 };</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;};</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160; </div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;<span class="comment"> * This singleton has been deprecated and will be removed in future releases</span></div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00428"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a29866c2e410a715d736ec447b986df78">  428</a></span>&#160;<a class="code" href="classarm__compute_1_1_c_p_p_scheduler.xhtml">CPPScheduler</a> &amp;<a class="code" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a29866c2e410a715d736ec447b986df78">CPPScheduler::get</a>()</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;{</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    <span class="keyword">static</span> <a class="code" href="classarm__compute_1_1_c_p_p_scheduler.xhtml">CPPScheduler</a> scheduler;</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    <span class="keywordflow">return</span> scheduler;</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;}</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160; </div>
<div class="line"><a name="l00434"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a7dc07a8f5e4ef2b4b07f6076893db4f0">  434</a></span>&#160;<a class="code" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a7dc07a8f5e4ef2b4b07f6076893db4f0">CPPScheduler::CPPScheduler</a>()</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    : _impl(std::make_unique&lt;Impl&gt;(<a class="code" href="namespacearm__compute_1_1cpuinfo.xhtml#a8d1f363d679403ae1ad371b85e63c7a3">num_threads_hint</a>()))</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;{</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;}</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160; </div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;<a class="code" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a6a3f05037f66a2c8e9c02140f097b7ef">CPPScheduler::~CPPScheduler</a>() = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160; </div>
<div class="line"><a name="l00441"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#ae64eebaa07f4d2da6cc2ba538c3cb095">  441</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#ae64eebaa07f4d2da6cc2ba538c3cb095">CPPScheduler::set_num_threads</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_threads)</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;{</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    <span class="comment">// No changes in the number of threads while current workloads are running</span></div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a18809773edf57d061fc2826abf0dab5e">arm_compute::lock_guard&lt;std::mutex&gt;</a> lock(_impl-&gt;_run_workloads_mutex);</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    _impl-&gt;set_num_threads(<a class="code" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a0da94220ee1e0f4928aa31ed0d4b30f7">num_threads</a>, <a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#a6de5358eb9a099cda48662b2fc523ec5">num_threads_hint</a>());</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;}</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160; </div>
<div class="line"><a name="l00448"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a7ed951f313d17451c99f8aeee200c3ca">  448</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a7ed951f313d17451c99f8aeee200c3ca">CPPScheduler::set_num_threads_with_affinity</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_threads, <a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#a47266bbd911ce9049fc1194e9fac9051">BindFunc</a> func)</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;{</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    <span class="comment">// No changes in the number of threads while current workloads are running</span></div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a18809773edf57d061fc2826abf0dab5e">arm_compute::lock_guard&lt;std::mutex&gt;</a> lock(_impl-&gt;_run_workloads_mutex);</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    _impl-&gt;set_num_threads_with_affinity(<a class="code" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a0da94220ee1e0f4928aa31ed0d4b30f7">num_threads</a>, <a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#a6de5358eb9a099cda48662b2fc523ec5">num_threads_hint</a>(), func);</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;}</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160; </div>
<div class="line"><a name="l00455"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a0da94220ee1e0f4928aa31ed0d4b30f7">  455</a></span>&#160;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a0da94220ee1e0f4928aa31ed0d4b30f7">CPPScheduler::num_threads</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    <span class="keywordflow">return</span> _impl-&gt;num_threads();</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;}</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160; </div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;<span class="preprocessor">#ifndef DOXYGEN_SKIP_THIS</span></div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;<span class="keywordtype">void</span> CPPScheduler::run_workloads(std::vector&lt;IScheduler::Workload&gt; &amp;workloads)</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;{</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    <span class="comment">// Mutex to ensure other threads won&#39;t interfere with the setup of the current thread&#39;s workloads</span></div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    <span class="comment">// Other thread&#39;s workloads will be scheduled after the current thread&#39;s workloads have finished</span></div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    <span class="comment">// This is not great because different threads workloads won&#39;t run in parallel but at least they</span></div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    <span class="comment">// won&#39;t interfere each other and deadlock.</span></div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a18809773edf57d061fc2826abf0dab5e">arm_compute::lock_guard&lt;std::mutex&gt;</a> lock(_impl-&gt;_run_workloads_mutex);</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                  num_threads_to_use = std::min(_impl-&gt;num_threads(), <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(workloads.size()));</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    <span class="keywordflow">if</span>(num_threads_to_use &lt; 1)</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    {</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    }</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    <span class="comment">// Re-adjust the mode if the actual number of threads to use is different from the number of threads created</span></div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    _impl-&gt;auto_switch_mode(num_threads_to_use);</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    <span class="keywordtype">int</span> num_threads_to_start = 0;</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    <span class="keywordflow">switch</span>(_impl-&gt;mode())</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;    {</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;        <span class="keywordflow">case</span> CPPScheduler::Impl::Mode::Fanout:</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;        {</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;            num_threads_to_start = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(_impl-&gt;wake_fanout()) - 1;</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;        }</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;        <span class="keywordflow">case</span> CPPScheduler::Impl::Mode::Linear:</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;        {</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;            num_threads_to_start = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(num_threads_to_use) - 1;</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;        }</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    }</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    ThreadFeeder feeder(num_threads_to_use, workloads.size());</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    ThreadInfo   <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>;</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.cpu_info          = &amp;<a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#ab0fd9e7b4f6240c55b4fe6a54d4418b5">cpu_info</a>();</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.num_threads       = num_threads_to_use;</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a>         = 0;</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;    <span class="keyword">auto</span>         thread_it = _impl-&gt;_threads.begin();</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    <span class="comment">// Set num_threads_to_use - 1 workloads to the threads as the remaining 1 is left to the main thread</span></div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;    <span class="keywordflow">for</span>(; <a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a> &lt; num_threads_to_use - 1; ++<a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a>, ++thread_it)</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    {</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.thread_id = <a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a>;</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;        thread_it-&gt;set_workload(&amp;workloads, feeder, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    }</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;    thread_it = _impl-&gt;_threads.begin();</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; num_threads_to_start; ++i, ++thread_it)</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    {</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;        thread_it-&gt;start();</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;    }</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.thread_id = <a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a>;                         <span class="comment">// Set main thread&#39;s thread_id</span></div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    std::exception_ptr last_exception = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_EXCEPTIONS_DISABLED</span></div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    <span class="keywordflow">try</span></div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    {</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_EXCEPTIONS_DISABLED */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;        process_workloads(workloads, feeder, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>); <span class="comment">// Main thread processes workloads</span></div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_EXCEPTIONS_DISABLED</span></div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    }</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;    <span class="keywordflow">catch</span> (...)</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    {</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;        last_exception = std::current_exception();</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    }</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160; </div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    <span class="keywordflow">try</span></div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    {</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_EXCEPTIONS_DISABLED */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;        thread_it = _impl-&gt;_threads.begin();</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; num_threads_to_use - 1; ++i, ++thread_it)</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;        {</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;            std::exception_ptr current_exception = thread_it-&gt;wait();</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;            <span class="keywordflow">if</span> (current_exception)</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;            {</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;                last_exception = current_exception;</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;            }</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;        }</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;        <span class="keywordflow">if</span> (last_exception)</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;        {</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;            std::rethrow_exception(last_exception);</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;        }</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_EXCEPTIONS_DISABLED</span></div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;    }</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;    <span class="keywordflow">catch</span>(<span class="keyword">const</span> std::system_error &amp;e)</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;    {</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;        std::cerr &lt;&lt; <span class="stringliteral">&quot;Caught system_error with code &quot;</span> &lt;&lt; e.code() &lt;&lt; <span class="stringliteral">&quot; meaning &quot;</span> &lt;&lt; e.what() &lt;&lt; <span class="charliteral">&#39;\n&#39;</span>;</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;    }</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_EXCEPTIONS_DISABLED */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;}</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* DOXYGEN_SKIP_THIS */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160; </div>
<div class="line"><a name="l00547"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a7ef01a626365639d821cf090e6608109">  547</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a7ef01a626365639d821cf090e6608109">CPPScheduler::schedule_op</a>(<a class="code" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml">ICPPKernel</a> *kernel, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml">Hints</a> &amp;hints, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> &amp;tensors)</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;{</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    schedule_common(kernel, hints, window, tensors);</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;}</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160; </div>
<div class="line"><a name="l00552"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a8d6828523921b7f9313f64c48550617f">  552</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a8d6828523921b7f9313f64c48550617f">CPPScheduler::schedule</a>(<a class="code" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml">ICPPKernel</a> *kernel, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml">Hints</a> &amp;hints)</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;{</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> tensors;</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;    schedule_common(kernel, hints, kernel-&gt;<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>(), tensors);</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;}</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;} <span class="comment">// namespace arm_compute</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassarm__compute_1_1_c_p_p_scheduler_xhtml_a29866c2e410a715d736ec447b986df78"><div class="ttname"><a href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a29866c2e410a715d736ec447b986df78">arm_compute::CPPScheduler::get</a></div><div class="ttdeci">static CPPScheduler &amp; get()</div><div class="ttdoc">Access the scheduler singleton.</div><div class="ttdef"><b>Definition:</b> <a href="src_2runtime_2_c_p_p_2_c_p_p_scheduler_8cpp_source.xhtml#l00428">CPPScheduler.cpp:428</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a18809773edf57d061fc2826abf0dab5e"><div class="ttname"><a href="namespacearm__compute.xhtml#a18809773edf57d061fc2826abf0dab5e">arm_compute::lock_guard</a></div><div class="ttdeci">std::lock_guard&lt; Mutex &gt; lock_guard</div><div class="ttdoc">Wrapper of lock_guard data-object.</div><div class="ttdef"><b>Definition:</b> <a href="_mutex_8h_source.xhtml#l00037">Mutex.h:37</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_p_p_scheduler_xhtml_a6a3f05037f66a2c8e9c02140f097b7ef"><div class="ttname"><a href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a6a3f05037f66a2c8e9c02140f097b7ef">arm_compute::CPPScheduler::~CPPScheduler</a></div><div class="ttdeci">~CPPScheduler()</div><div class="ttdoc">Default destructor.</div></div>
<div class="ttc" id="anamespacearm__compute_1_1utility_xhtml_abb96ad5c7071ec3a47ea5f07e817a636"><div class="ttname"><a href="namespacearm__compute_1_1utility.xhtml#abb96ad5c7071ec3a47ea5f07e817a636">arm_compute::utility::tolower</a></div><div class="ttdeci">std::string tolower(std::string string)</div><div class="ttdoc">Convert string to lower case.</div><div class="ttdef"><b>Definition:</b> <a href="_utility_8h_source.xhtml#l00206">Utility.h:206</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_helpers_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_helpers_8h.xhtml">Helpers.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_scheduler_xhtml_ab0fd9e7b4f6240c55b4fe6a54d4418b5"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml#ab0fd9e7b4f6240c55b4fe6a54d4418b5">arm_compute::IScheduler::cpu_info</a></div><div class="ttdeci">CPUInfo &amp; cpu_info()</div><div class="ttdoc">Get CPU info.</div><div class="ttdef"><b>Definition:</b> <a href="_i_scheduler_8cpp_source.xhtml#l00041">IScheduler.cpp:41</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_log_8h_xhtml_af641430e72aa4c9f28d83131bb8e0fb9"><div class="ttname"><a href="arm__compute_2core_2_log_8h.xhtml#af641430e72aa4c9f28d83131bb8e0fb9">ARM_COMPUTE_LOG_INFO_MSG_WITH_FORMAT_CORE</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_INFO_MSG_WITH_FORMAT_CORE(fmt,...)</div><div class="ttdoc">Log information level formatted message to the core system logger.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_log_8h_source.xhtml#l00099">Log.h:99</a></div></div>
<div class="ttc" id="a_error_8h_xhtml"><div class="ttname"><a href="_error_8h.xhtml">Error.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1mlgo_1_1parser_xhtml_a2f7ed43a30966415307da837a24ee3ab"><div class="ttname"><a href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a2f7ed43a30966415307da837a24ee3ab">arm_compute::mlgo::parser::advance</a></div><div class="ttdeci">void advance(CharPosition &amp;pos, char ch)</div><div class="ttdef"><b>Definition:</b> <a href="_m_l_g_o_parser_8cpp_source.xhtml#l00147">MLGOParser.cpp:147</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1utils_1_1cast_xhtml_a81cf6107131a3583e2b0b762cb9c2862"><div class="ttname"><a href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">arm_compute::utils::cast::U</a></div><div class="ttdeci">U</div><div class="ttdef"><b>Definition:</b> <a href="_saturate_cast_8h_source.xhtml#l00064">SaturateCast.h:64</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_log_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_log_8h.xhtml">Log.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_p_p_scheduler_xhtml_a0da94220ee1e0f4928aa31ed0d4b30f7"><div class="ttname"><a href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a0da94220ee1e0f4928aa31ed0d4b30f7">arm_compute::CPPScheduler::num_threads</a></div><div class="ttdeci">unsigned int num_threads() const override</div><div class="ttdoc">Returns the number of threads that the SingleThreadScheduler has in its pool.</div><div class="ttdef"><b>Definition:</b> <a href="src_2runtime_2_c_p_p_2_c_p_p_scheduler_8cpp_source.xhtml#l00455">CPPScheduler.cpp:455</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00467">Error.h:467</a></div></div>
<div class="ttc" id="a_utility_8h_xhtml"><div class="ttname"><a href="_utility_8h.xhtml">Utility.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_pack_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_pack.xhtml">arm_compute::ITensorPack</a></div><div class="ttdoc">Tensor packing service.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_pack_8h_source.xhtml#l00039">ITensorPack.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_acded863dbfdd730829d4188d67eefcf0"><div class="ttname"><a href="namespacearm__compute.xhtml#acded863dbfdd730829d4188d67eefcf0">arm_compute::Mutex</a></div><div class="ttdeci">std::mutex Mutex</div><div class="ttdoc">Wrapper of Mutex data-object.</div><div class="ttdef"><b>Definition:</b> <a href="_mutex_8h_source.xhtml#l00033">Mutex.h:33</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_scheduler_xhtml_a47266bbd911ce9049fc1194e9fac9051"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml#a47266bbd911ce9049fc1194e9fac9051">arm_compute::IScheduler::BindFunc</a></div><div class="ttdeci">std::function&lt; int(int, int)&gt; BindFunc</div><div class="ttdoc">Function to be used and map a given thread id to a logical core id.</div><div class="ttdef"><b>Definition:</b> <a href="_i_scheduler_8h_source.xhtml#l00056">IScheduler.h:56</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_p_p_scheduler_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_p_p_scheduler.xhtml">arm_compute::CPPScheduler</a></div><div class="ttdoc">C++11 implementation of a pool of threads to automatically split a kernel's execution among several t...</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_scheduler_8h_source.xhtml#l00042">CPPScheduler.h:42</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_c_p_p_kernel_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_c_p_p_kernel.xhtml">arm_compute::ICPPKernel</a></div><div class="ttdoc">Common interface for all kernels implemented in C++.</div><div class="ttdef"><b>Definition:</b> <a href="_i_c_p_p_kernel_8h_source.xhtml#l00038">ICPPKernel.h:38</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_p_p_scheduler_xhtml_a7ed951f313d17451c99f8aeee200c3ca"><div class="ttname"><a href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a7ed951f313d17451c99f8aeee200c3ca">arm_compute::CPPScheduler::set_num_threads_with_affinity</a></div><div class="ttdeci">void set_num_threads_with_affinity(unsigned int num_threads, BindFunc func) override</div><div class="ttdoc">Sets the number of threads the scheduler will use to run the kernels but also using a binding functio...</div><div class="ttdef"><b>Definition:</b> <a href="src_2runtime_2_c_p_p_2_c_p_p_scheduler_8cpp_source.xhtml#l00448">CPPScheduler.cpp:448</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a292b758f9eba8b487d71eae4b37326fc"><div class="ttname"><a href="_error_8h.xhtml#a292b758f9eba8b487d71eae4b37326fc">ARM_COMPUTE_EXIT_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_EXIT_ON_MSG(cond, msg)</div><div class="ttdoc">If the condition is true, the given message is printed and program exits.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00380">Error.h:380</a></div></div>
<div class="ttc" id="a_c_p_p_scheduler_8h_xhtml"><div class="ttname"><a href="_c_p_p_scheduler_8h.xhtml">CPPScheduler.h</a></div><div class="ttdoc">Basic pool of threads to execute CPP/Neon code on several cores in parallel.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_p_p_scheduler_xhtml_ae64eebaa07f4d2da6cc2ba538c3cb095"><div class="ttname"><a href="classarm__compute_1_1_c_p_p_scheduler.xhtml#ae64eebaa07f4d2da6cc2ba538c3cb095">arm_compute::CPPScheduler::set_num_threads</a></div><div class="ttdeci">void set_num_threads(unsigned int num_threads) override</div><div class="ttdoc">Sets the number of threads the scheduler will use to run the kernels.</div><div class="ttdef"><b>Definition:</b> <a href="src_2runtime_2_c_p_p_2_c_p_p_scheduler_8cpp_source.xhtml#l00441">CPPScheduler.cpp:441</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_kernel_xhtml_ad34a46f53686c12a5c5e717cc9617fb6"><div class="ttname"><a href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">arm_compute::IKernel::window</a></div><div class="ttdeci">const Window &amp; window() const</div><div class="ttdoc">The maximum window the kernel can be executed on.</div><div class="ttdef"><b>Definition:</b> <a href="_i_kernel_8cpp_source.xhtml#l00028">IKernel.cpp:28</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_utils_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_utils_8h.xhtml">Utils.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1utility_xhtml_aa805ec7ff4b1f0598b0f3a6164540817"><div class="ttname"><a href="namespacearm__compute_1_1utility.xhtml#aa805ec7ff4b1f0598b0f3a6164540817">arm_compute::utility::getenv</a></div><div class="ttdeci">std::string getenv(const std::string &amp;env_name)</div><div class="ttdoc">Get environment variable as a string.</div><div class="ttdef"><b>Definition:</b> <a href="_utility_8h_source.xhtml#l00223">Utility.h:223</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml">arm_compute::Window</a></div><div class="ttdoc">Describe a multidimensional execution window.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00039">Window.h:39</a></div></div>
<div class="ttc" id="anamespacetf__frozen__model__extractor_xhtml_ac7485dcc8d256a6f197ed7802687f252"><div class="ttname"><a href="namespacetf__frozen__model__extractor.xhtml#ac7485dcc8d256a6f197ed7802687f252">tf_frozen_model_extractor.None</a></div><div class="ttdeci">None</div><div class="ttdef"><b>Definition:</b> <a href="tf__frozen__model__extractor_8py_source.xhtml#l00041">tf_frozen_model_extractor.py:41</a></div></div>
<div class="ttc" id="a_mutex_8h_xhtml"><div class="ttname"><a href="_mutex_8h.xhtml">Mutex.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2023 Arm Limited.</div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="anamespaceclang__tidy__rules_xhtml_a1a6b6fb557d8d37d59700faf4e4c9167"><div class="ttname"><a href="namespaceclang__tidy__rules.xhtml#a1a6b6fb557d8d37d59700faf4e4c9167">clang_tidy_rules.mode</a></div><div class="ttdeci">mode</div><div class="ttdef"><b>Definition:</b> <a href="clang__tidy__rules_8py_source.xhtml#l00196">clang_tidy_rules.py:196</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_p_p_scheduler_xhtml_a8d6828523921b7f9313f64c48550617f"><div class="ttname"><a href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a8d6828523921b7f9313f64c48550617f">arm_compute::CPPScheduler::schedule</a></div><div class="ttdeci">void schedule(ICPPKernel *kernel, const Hints &amp;hints) override</div><div class="ttdoc">Runs the kernel in the same thread as the caller synchronously.</div><div class="ttdef"><b>Definition:</b> <a href="src_2runtime_2_c_p_p_2_c_p_p_scheduler_8cpp_source.xhtml#l00552">CPPScheduler.cpp:552</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1mlgo_1_1parser_xhtml_a9fe67a1da3e2628bade473115ecbb5be"><div class="ttname"><a href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">arm_compute::mlgo::parser::end</a></div><div class="ttdeci">void end(TokenStream &amp;in, bool &amp;valid)</div><div class="ttdef"><b>Definition:</b> <a href="_m_l_g_o_parser_8cpp_source.xhtml#l00290">MLGOParser.cpp:290</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_p_p_scheduler_xhtml_a7ef01a626365639d821cf090e6608109"><div class="ttname"><a href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a7ef01a626365639d821cf090e6608109">arm_compute::CPPScheduler::schedule_op</a></div><div class="ttdeci">void schedule_op(ICPPKernel *kernel, const Hints &amp;hints, const Window &amp;window, ITensorPack &amp;tensors) override</div><div class="ttdoc">Runs the kernel in the same thread as the caller synchronously.</div><div class="ttdef"><b>Definition:</b> <a href="src_2runtime_2_c_p_p_2_c_p_p_scheduler_8cpp_source.xhtml#l00547">CPPScheduler.cpp:547</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_scheduler_xhtml_a6de5358eb9a099cda48662b2fc523ec5"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml#a6de5358eb9a099cda48662b2fc523ec5">arm_compute::IScheduler::num_threads_hint</a></div><div class="ttdeci">unsigned int num_threads_hint() const</div><div class="ttdoc">Get a hint for the best possible number of execution threads.</div><div class="ttdef"><b>Definition:</b> <a href="_i_scheduler_8cpp_source.xhtml#l00052">IScheduler.cpp:52</a></div></div>
<div class="ttc" id="a_i_c_p_p_kernel_8h_xhtml"><div class="ttname"><a href="_i_c_p_p_kernel_8h.xhtml">ICPPKernel.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_ac57b92957968088a392021cac1d2076b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a></div><div class="ttdeci">ScaleKernelInfo info(interpolation_policy, default_border_mode, PixelValue(), sampling_policy, false)</div></div>
<div class="ttc" id="astructarm__compute_1_1_thread_info_xhtml_a08963f7335eef295237ab460863bc3d5"><div class="ttname"><a href="structarm__compute_1_1_thread_info.xhtml#a08963f7335eef295237ab460863bc3d5">arm_compute::ThreadInfo::num_threads</a></div><div class="ttdeci">int num_threads</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_types_8h_source.xhtml#l00183">CPPTypes.h:183</a></div></div>
<div class="ttc" id="anamespacetf__frozen__model__extractor_xhtml_aaccc9105df5383111407fd5b41255e23"><div class="ttname"><a href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">tf_frozen_model_extractor.t</a></div><div class="ttdeci">t</div><div class="ttdef"><b>Definition:</b> <a href="tf__frozen__model__extractor_8py_source.xhtml#l00049">tf_frozen_model_extractor.py:49</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a1ec8dd7ea96aec0e4068497f0b5e17b2"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1ec8dd7ea96aec0e4068497f0b5e17b2">arm_compute::test::validation::set</a></div><div class="ttdeci">dst_shape set(0, output_wh.first)</div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_scheduler_1_1_hints_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml">arm_compute::IScheduler::Hints</a></div><div class="ttdoc">Scheduler hints.</div><div class="ttdef"><b>Definition:</b> <a href="_i_scheduler_8h_source.xhtml#l00068">IScheduler.h:68</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_p_p_scheduler_xhtml_a7dc07a8f5e4ef2b4b07f6076893db4f0"><div class="ttname"><a href="classarm__compute_1_1_c_p_p_scheduler.xhtml#a7dc07a8f5e4ef2b4b07f6076893db4f0">arm_compute::CPPScheduler::CPPScheduler</a></div><div class="ttdeci">CPPScheduler()</div><div class="ttdoc">Constructor: create a pool of threads.</div><div class="ttdef"><b>Definition:</b> <a href="src_2runtime_2_c_p_p_2_c_p_p_scheduler_8cpp_source.xhtml#l00434">CPPScheduler.cpp:434</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpuinfo_xhtml_a8d1f363d679403ae1ad371b85e63c7a3"><div class="ttname"><a href="namespacearm__compute_1_1cpuinfo.xhtml#a8d1f363d679403ae1ad371b85e63c7a3">arm_compute::cpuinfo::num_threads_hint</a></div><div class="ttdeci">uint32_t num_threads_hint()</div><div class="ttdoc">Some systems have both big and small cores, this fuction computes the minimum number of cores that ar...</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_info_8cpp_source.xhtml#l00392">CpuInfo.cpp:392</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_bf9f26469d00835ba20ff8d80ee5a804.xhtml">runtime</a></li><li class="navelem"><a class="el" href="dir_9240672d44dfdb0f539b385a1f058d2d.xhtml">CPP</a></li><li class="navelem"><a class="el" href="src_2runtime_2_c_p_p_2_c_p_p_scheduler_8cpp.xhtml">CPPScheduler.cpp</a></li>
    <li class="footer">Generated on Wed Aug 23 2023 13:07:14 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
