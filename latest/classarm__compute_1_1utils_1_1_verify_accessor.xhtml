<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: VerifyAccessor&lt; D &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarm__compute_1_1utils_1_1_verify_accessor.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-attribs">Data Fields</a>  </div>
  <div class="headertitle">
<div class="title">VerifyAccessor&lt; D &gt; Class Template Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p>Graph example validation accessor class.  
 <a href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="graph__validate__utils_8h_source.xhtml">graph_validate_utils.h</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for VerifyAccessor&lt; D &gt;:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classarm__compute_1_1utils_1_1_verify_accessor__coll__graph.svg" width="1378" height="331"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a4e68efc85570b62c7d53c78875ced9bc"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a4e68efc85570b62c7d53c78875ced9bc">TBias</a> = typename std::conditional&lt; std::is_same&lt; typename std::decay&lt; D &gt;::<a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a>, uint8_t &gt;::value, int32_t, D &gt;::<a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></td></tr>
<tr class="separator:a4e68efc85570b62c7d53c78875ced9bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:aa3c414caac54dee6aa0cc08240156e65"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#aa3c414caac54dee6aa0cc08240156e65">VerifyAccessor</a> (<a class="el" href="structarm__compute_1_1utils_1_1_example_params.xhtml">ExampleParams</a> &amp;params)</td></tr>
<tr class="memdesc:aa3c414caac54dee6aa0cc08240156e65"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor.  <a href="#aa3c414caac54dee6aa0cc08240156e65">More...</a><br /></td></tr>
<tr class="separator:aa3c414caac54dee6aa0cc08240156e65"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab469d593b4bc92e1d1132a03de0aedca"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">access_tensor</a> (<a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>) override</td></tr>
<tr class="memdesc:ab469d593b4bc92e1d1132a03de0aedca"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface to be implemented to access a given tensor.  <a href="#ab469d593b4bc92e1d1132a03de0aedca">More...</a><br /></td></tr>
<tr class="separator:ab469d593b4bc92e1d1132a03de0aedca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8cdebcc372054188936056f2e21ef517"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a8cdebcc372054188936056f2e21ef517">create_tensors</a> (<a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">arm_compute::test::SimpleTensor</a>&lt; D &gt; &amp;src, <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">arm_compute::test::SimpleTensor</a>&lt; D &gt; &amp;weights, <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">arm_compute::test::SimpleTensor</a>&lt; <a class="el" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a4e68efc85570b62c7d53c78875ced9bc">TBias</a> &gt; &amp;<a class="el" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)</td></tr>
<tr class="memdesc:a8cdebcc372054188936056f2e21ef517"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create reference tensors.  <a href="#a8cdebcc372054188936056f2e21ef517">More...</a><br /></td></tr>
<tr class="separator:a8cdebcc372054188936056f2e21ef517"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70d7d37d8480e930ac12ddf336749e39"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a70d7d37d8480e930ac12ddf336749e39">output_shape</a> (<a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)</td></tr>
<tr class="memdesc:a70d7d37d8480e930ac12ddf336749e39"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate reference output tensor shape.  <a href="#a70d7d37d8480e930ac12ddf336749e39">More...</a><br /></td></tr>
<tr class="separator:a70d7d37d8480e930ac12ddf336749e39"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e789efce616d0a2398de4c7f57f293f"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">arm_compute::test::SimpleTensor</a>&lt; D &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a5e789efce616d0a2398de4c7f57f293f">reference</a> (<a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">arm_compute::test::SimpleTensor</a>&lt; D &gt; &amp;src, <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">arm_compute::test::SimpleTensor</a>&lt; D &gt; &amp;weights, <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">arm_compute::test::SimpleTensor</a>&lt; <a class="el" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a4e68efc85570b62c7d53c78875ced9bc">TBias</a> &gt; &amp;<a class="el" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">arm_compute::TensorShape</a> &amp;<a class="el" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a70d7d37d8480e930ac12ddf336749e39">output_shape</a>)=0</td></tr>
<tr class="memdesc:a5e789efce616d0a2398de4c7f57f293f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate reference tensor.  <a href="#a5e789efce616d0a2398de4c7f57f293f">More...</a><br /></td></tr>
<tr class="separator:a5e789efce616d0a2398de4c7f57f293f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad766ef265c150315d3468ae61a748050"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#ad766ef265c150315d3468ae61a748050">fill_tensor</a> (<a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">arm_compute::test::SimpleTensor</a>&lt; uint8_t &gt; &amp;<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, std::random_device::result_type seed, uint8_t low, uint8_t high)</td></tr>
<tr class="memdesc:ad766ef265c150315d3468ae61a748050"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fill QASYMM tensor with Random values.  <a href="#ad766ef265c150315d3468ae61a748050">More...</a><br /></td></tr>
<tr class="separator:ad766ef265c150315d3468ae61a748050"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7a2acd451b91be95366758a12df41f2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#af7a2acd451b91be95366758a12df41f2">fill_tensor</a> (<a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">arm_compute::test::SimpleTensor</a>&lt; int32_t &gt; &amp;<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, std::random_device::result_type seed, int32_t low, int32_t high)</td></tr>
<tr class="memdesc:af7a2acd451b91be95366758a12df41f2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fill S32 tensor with Random values.  <a href="#af7a2acd451b91be95366758a12df41f2">More...</a><br /></td></tr>
<tr class="separator:af7a2acd451b91be95366758a12df41f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a134a60d6a89a2956b443fb743277e414"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a134a60d6a89a2956b443fb743277e414">fill_tensor</a> (<a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">arm_compute::test::SimpleTensor</a>&lt; float &gt; &amp;<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, std::random_device::result_type seed, float low, float high)</td></tr>
<tr class="memdesc:a134a60d6a89a2956b443fb743277e414"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fill F32 tensor with Random values.  <a href="#a134a60d6a89a2956b443fb743277e414">More...</a><br /></td></tr>
<tr class="separator:a134a60d6a89a2956b443fb743277e414"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a058a15825351d7e8245bddc7960df6ce"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a058a15825351d7e8245bddc7960df6ce">fill_tensor</a> (<a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">arm_compute::test::SimpleTensor</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> &gt; &amp;<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, std::random_device::result_type seed, <a class="el" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> low, <a class="el" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> high)</td></tr>
<tr class="memdesc:a058a15825351d7e8245bddc7960df6ce"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fill F16 tensor with Random values.  <a href="#a058a15825351d7e8245bddc7960df6ce">More...</a><br /></td></tr>
<tr class="separator:a058a15825351d7e8245bddc7960df6ce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a666345f7004743b3470c4c9fda6bce80"><td class="memItemLeft" align="right" valign="top">virtual float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a666345f7004743b3470c4c9fda6bce80">relative_tolerance</a> ()=0</td></tr>
<tr class="memdesc:a666345f7004743b3470c4c9fda6bce80"><td class="mdescLeft">&#160;</td><td class="mdescRight">Select relative tolerance.  <a href="#a666345f7004743b3470c4c9fda6bce80">More...</a><br /></td></tr>
<tr class="separator:a666345f7004743b3470c4c9fda6bce80"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c8865138486a8c43f6f8902bd94ab1f"><td class="memItemLeft" align="right" valign="top">virtual float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a5c8865138486a8c43f6f8902bd94ab1f">absolute_tolerance</a> ()=0</td></tr>
<tr class="memdesc:a5c8865138486a8c43f6f8902bd94ab1f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Select absolute tolerance.  <a href="#a5c8865138486a8c43f6f8902bd94ab1f">More...</a><br /></td></tr>
<tr class="separator:a5c8865138486a8c43f6f8902bd94ab1f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a399e4cdf08ce98d229dcaa8e4ee9841e"><td class="memItemLeft" align="right" valign="top">virtual float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a399e4cdf08ce98d229dcaa8e4ee9841e">tolerance_number</a> ()=0</td></tr>
<tr class="memdesc:a399e4cdf08ce98d229dcaa8e4ee9841e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Select tolerance number.  <a href="#a399e4cdf08ce98d229dcaa8e4ee9841e">More...</a><br /></td></tr>
<tr class="separator:a399e4cdf08ce98d229dcaa8e4ee9841e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9aba3e822185f91d4294cd081a9481ab"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a9aba3e822185f91d4294cd081a9481ab">validate</a> (<a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">arm_compute::test::SimpleTensor</a>&lt; D &gt; output)</td></tr>
<tr class="memdesc:a9aba3e822185f91d4294cd081a9481ab"><td class="mdescLeft">&#160;</td><td class="mdescRight">Validate the output versus the reference.  <a href="#a9aba3e822185f91d4294cd081a9481ab">More...</a><br /></td></tr>
<tr class="separator:a9aba3e822185f91d4294cd081a9481ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarm__compute_1_1graph_1_1_i_tensor_accessor"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarm__compute_1_1graph_1_1_i_tensor_accessor')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarm__compute_1_1graph_1_1_i_tensor_accessor.xhtml">ITensorAccessor</a></td></tr>
<tr class="memitem:a3c7f21c2eb00ab7ae1c18b1418c0d9c6 inherit pub_methods_classarm__compute_1_1graph_1_1_i_tensor_accessor"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_i_tensor_accessor.xhtml#a3c7f21c2eb00ab7ae1c18b1418c0d9c6">~ITensorAccessor</a> ()=default</td></tr>
<tr class="memdesc:a3c7f21c2eb00ab7ae1c18b1418c0d9c6 inherit pub_methods_classarm__compute_1_1graph_1_1_i_tensor_accessor"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default virtual destructor.  <a href="classarm__compute_1_1graph_1_1_i_tensor_accessor.xhtml#a3c7f21c2eb00ab7ae1c18b1418c0d9c6">More...</a><br /></td></tr>
<tr class="separator:a3c7f21c2eb00ab7ae1c18b1418c0d9c6 inherit pub_methods_classarm__compute_1_1graph_1_1_i_tensor_accessor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a61972c6864a0b1d2bfec42fd67180794 inherit pub_methods_classarm__compute_1_1graph_1_1_i_tensor_accessor"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_i_tensor_accessor.xhtml#a61972c6864a0b1d2bfec42fd67180794">access_tensor_data</a> ()</td></tr>
<tr class="memdesc:a61972c6864a0b1d2bfec42fd67180794 inherit pub_methods_classarm__compute_1_1graph_1_1_i_tensor_accessor"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the tensor data is being accessed.  <a href="classarm__compute_1_1graph_1_1_i_tensor_accessor.xhtml#a61972c6864a0b1d2bfec42fd67180794">More...</a><br /></td></tr>
<tr class="separator:a61972c6864a0b1d2bfec42fd67180794 inherit pub_methods_classarm__compute_1_1graph_1_1_i_tensor_accessor"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"></a>
Data Fields</h2></td></tr>
<tr class="memitem:a9d2883fa007e9da297e2ee2ece422c68"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structarm__compute_1_1utils_1_1_example_params.xhtml">ExampleParams</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a9d2883fa007e9da297e2ee2ece422c68">_params</a></td></tr>
<tr class="separator:a9d2883fa007e9da297e2ee2ece422c68"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;typename D&gt;<br />
class arm_compute::utils::VerifyAccessor&lt; D &gt;</h3>

<p>Graph example validation accessor class. </p>

<p class="definition">Definition at line <a class="el" href="graph__validate__utils_8h_source.xhtml#l00349">349</a> of file <a class="el" href="graph__validate__utils_8h_source.xhtml">graph_validate_utils.h</a>.</p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a id="a4e68efc85570b62c7d53c78875ced9bc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4e68efc85570b62c7d53c78875ced9bc">&#9670;&nbsp;</a></span>TBias</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a4e68efc85570b62c7d53c78875ced9bc">TBias</a> =  typename std::conditional&lt;std::is_same&lt;typename std::decay&lt;D&gt;::<a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a>, uint8_t&gt;::value, int32_t, D&gt;::<a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="graph__validate__utils_8h_source.xhtml#l00352">352</a> of file <a class="el" href="graph__validate__utils_8h_source.xhtml">graph_validate_utils.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="aa3c414caac54dee6aa0cc08240156e65"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa3c414caac54dee6aa0cc08240156e65">&#9670;&nbsp;</a></span>VerifyAccessor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml">VerifyAccessor</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1utils_1_1_example_params.xhtml">ExampleParams</a> &amp;&#160;</td>
          <td class="paramname"><em>params</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Constructor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>Convolution parameters </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="graph__validate__utils_8h_source.xhtml#l00357">357</a> of file <a class="el" href="graph__validate__utils_8h_source.xhtml">graph_validate_utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;        : <a class="code" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a9d2883fa007e9da297e2ee2ece422c68">_params</a>(std::move(params))</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    {</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    }</div><div class="ttc" id="classarm__compute_1_1utils_1_1_verify_accessor_xhtml_a9d2883fa007e9da297e2ee2ece422c68"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a9d2883fa007e9da297e2ee2ece422c68">arm_compute::utils::VerifyAccessor::_params</a></div><div class="ttdeci">ExampleParams _params</div><div class="ttdef"><b>Definition:</b> <a href="graph__validate__utils_8h_source.xhtml#l00593">graph_validate_utils.h:593</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a5c8865138486a8c43f6f8902bd94ab1f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5c8865138486a8c43f6f8902bd94ab1f">&#9670;&nbsp;</a></span>absolute_tolerance()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual float absolute_tolerance </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Select absolute tolerance. </p>
<p>Select absolute tolerance if not supplied by user.</p>
<dl class="section return"><dt>Returns</dt><dd>Appropriate absolute tolerance. </dd></dl>

</div>
</div>
<a id="ab469d593b4bc92e1d1132a03de0aedca"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab469d593b4bc92e1d1132a03de0aedca">&#9670;&nbsp;</a></span>access_tensor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool access_tensor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Interface to be implemented to access a given tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a> to be accessed</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if access is successful else false </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1graph_1_1_i_tensor_accessor.xhtml#a497873c25847d7b4f60f37a1a3aa7665">ITensorAccessor</a>.</p>

<p class="definition">Definition at line <a class="el" href="graph__validate__utils_8h_source.xhtml#l00362">362</a> of file <a class="el" href="graph__validate__utils_8h_source.xhtml">graph_validate_utils.h</a>.</p>

<p class="reference">References <a class="el" href="working__space_8hpp_source.xhtml#l00292">bias</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">ITensorInfo::data_type()</a>, <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6a5eef7d8485a2b8c04bf9b4638a90e9">arm_compute::test::validation::fill_tensor()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00411">arm_compute::test::validation::output_shape</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, and <a class="el" href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00214">arm_compute::validate()</a>.</p>
<div class="fragment"><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    {</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        <span class="keywordflow">if</span>(<a class="code" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a9d2883fa007e9da297e2ee2ece422c68">_params</a>.<a class="code" href="structarm__compute_1_1utils_1_1_common_params.xhtml#ab6692d047db2f0c872e4dfc55f958533">output</a>.<a class="code" href="structarm__compute_1_1utils_1_1_tensor_params.xhtml#aef1c0b2053bee947f72e999db335c84c">npy</a>.empty())</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;        {</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">arm_compute::test::SimpleTensor&lt;D&gt;</a>     <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">arm_compute::test::SimpleTensor&lt;D&gt;</a>     weights;</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">arm_compute::test::SimpleTensor&lt;TBias&gt;</a> <a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>;</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;            <span class="comment">//Create Input tensors</span></div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;            <a class="code" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a8cdebcc372054188936056f2e21ef517">create_tensors</a>(src, weights, bias, <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;            <span class="comment">//Fill the tensors with random values</span></div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;            <a class="code" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#ad766ef265c150315d3468ae61a748050">fill_tensor</a>(src, 0, static_cast&lt;D&gt;(<a class="code" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a9d2883fa007e9da297e2ee2ece422c68">_params</a>.<a class="code" href="structarm__compute_1_1utils_1_1_common_params.xhtml#aca3dcdcaa91edc6ede106e9d4454925b">input</a>.<a class="code" href="structarm__compute_1_1utils_1_1_tensor_params.xhtml#a6e1311c23c64b1a05475e5de91d75429">range_low</a>), static_cast&lt;D&gt;(<a class="code" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a9d2883fa007e9da297e2ee2ece422c68">_params</a>.<a class="code" href="structarm__compute_1_1utils_1_1_common_params.xhtml#aca3dcdcaa91edc6ede106e9d4454925b">input</a>.<a class="code" href="structarm__compute_1_1utils_1_1_tensor_params.xhtml#af0b9179895ca471157ea7edb8f07ef18">range_high</a>));</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;            <a class="code" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#ad766ef265c150315d3468ae61a748050">fill_tensor</a>(weights, 1, static_cast&lt;D&gt;(<a class="code" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a9d2883fa007e9da297e2ee2ece422c68">_params</a>.<a class="code" href="structarm__compute_1_1utils_1_1_common_params.xhtml#a39e23cca85d22b36fc18fbed987af01b">weights</a>.<a class="code" href="structarm__compute_1_1utils_1_1_tensor_params.xhtml#a6e1311c23c64b1a05475e5de91d75429">range_low</a>), static_cast&lt;D&gt;(<a class="code" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a9d2883fa007e9da297e2ee2ece422c68">_params</a>.<a class="code" href="structarm__compute_1_1utils_1_1_common_params.xhtml#a39e23cca85d22b36fc18fbed987af01b">weights</a>.<a class="code" href="structarm__compute_1_1utils_1_1_tensor_params.xhtml#af0b9179895ca471157ea7edb8f07ef18">range_high</a>));</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;            <a class="code" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#ad766ef265c150315d3468ae61a748050">fill_tensor</a>(bias, 2, static_cast&lt;TBias&gt;(<a class="code" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a9d2883fa007e9da297e2ee2ece422c68">_params</a>.<a class="code" href="structarm__compute_1_1utils_1_1_common_params.xhtml#aca3dcdcaa91edc6ede106e9d4454925b">input</a>.<a class="code" href="structarm__compute_1_1utils_1_1_tensor_params.xhtml#a6e1311c23c64b1a05475e5de91d75429">range_low</a>), static_cast&lt;TBias&gt;(<a class="code" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a9d2883fa007e9da297e2ee2ece422c68">_params</a>.<a class="code" href="structarm__compute_1_1utils_1_1_common_params.xhtml#aca3dcdcaa91edc6ede106e9d4454925b">input</a>.<a class="code" href="structarm__compute_1_1utils_1_1_tensor_params.xhtml#af0b9179895ca471157ea7edb8f07ef18">range_high</a>));</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">arm_compute::test::SimpleTensor&lt;D&gt;</a> output = <a class="code" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a5e789efce616d0a2398de4c7f57f293f">reference</a>(src, weights, bias, <a class="code" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a70d7d37d8480e930ac12ddf336749e39">output_shape</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>));</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;            <a class="code" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a9aba3e822185f91d4294cd081a9481ab">validate</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, output);</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;        }</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;        {</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;            <span class="comment">//The user provided a reference file use an npy accessor to validate</span></div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;            <a class="code" href="classarm__compute_1_1graph__utils_1_1_num_py_accessor.xhtml">arm_compute::graph_utils::NumPyAccessor</a>(<a class="code" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a9d2883fa007e9da297e2ee2ece422c68">_params</a>.<a class="code" href="structarm__compute_1_1utils_1_1_common_params.xhtml#ab6692d047db2f0c872e4dfc55f958533">output</a>.<a class="code" href="structarm__compute_1_1utils_1_1_tensor_params.xhtml#aef1c0b2053bee947f72e999db335c84c">npy</a>, <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;tensor_shape(), <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;data_type()).<a class="code" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">access_tensor</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;        }</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    }</div><div class="ttc" id="classarm__compute_1_1utils_1_1_verify_accessor_xhtml_ab469d593b4bc92e1d1132a03de0aedca"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#ab469d593b4bc92e1d1132a03de0aedca">arm_compute::utils::VerifyAccessor::access_tensor</a></div><div class="ttdeci">bool access_tensor(ITensor &amp;tensor) override</div><div class="ttdoc">Interface to be implemented to access a given tensor. </div><div class="ttdef"><b>Definition:</b> <a href="graph__validate__utils_8h_source.xhtml#l00362">graph_validate_utils.h:362</a></div></div>
<div class="ttc" id="structarm__compute_1_1utils_1_1_common_params_xhtml_aca3dcdcaa91edc6ede106e9d4454925b"><div class="ttname"><a href="structarm__compute_1_1utils_1_1_common_params.xhtml#aca3dcdcaa91edc6ede106e9d4454925b">arm_compute::utils::CommonParams::input</a></div><div class="ttdeci">TensorParams input</div><div class="ttdef"><b>Definition:</b> <a href="graph__validate__utils_8h_source.xhtml#l00138">graph_validate_utils.h:138</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_verify_accessor_xhtml_a9aba3e822185f91d4294cd081a9481ab"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a9aba3e822185f91d4294cd081a9481ab">arm_compute::utils::VerifyAccessor::validate</a></div><div class="ttdeci">void validate(ITensor &amp;tensor, arm_compute::test::SimpleTensor&lt; D &gt; output)</div><div class="ttdoc">Validate the output versus the reference. </div><div class="ttdef"><b>Definition:</b> <a href="graph__validate__utils_8h_source.xhtml#l00565">graph_validate_utils.h:565</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_verify_accessor_xhtml_ad766ef265c150315d3468ae61a748050"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#ad766ef265c150315d3468ae61a748050">arm_compute::utils::VerifyAccessor::fill_tensor</a></div><div class="ttdeci">void fill_tensor(arm_compute::test::SimpleTensor&lt; uint8_t &gt; &amp;tensor, std::random_device::result_type seed, uint8_t low, uint8_t high)</div><div class="ttdoc">Fill QASYMM tensor with Random values. </div><div class="ttdef"><b>Definition:</b> <a href="graph__validate__utils_8h_source.xhtml#l00451">graph_validate_utils.h:451</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_verify_accessor_xhtml_a8cdebcc372054188936056f2e21ef517"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a8cdebcc372054188936056f2e21ef517">arm_compute::utils::VerifyAccessor::create_tensors</a></div><div class="ttdeci">virtual void create_tensors(arm_compute::test::SimpleTensor&lt; D &gt; &amp;src, arm_compute::test::SimpleTensor&lt; D &gt; &amp;weights, arm_compute::test::SimpleTensor&lt; TBias &gt; &amp;bias, ITensor &amp;tensor)</div><div class="ttdoc">Create reference tensors. </div><div class="ttdef"><b>Definition:</b> <a href="graph__validate__utils_8h_source.xhtml#l00401">graph_validate_utils.h:401</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_verify_accessor_xhtml_a70d7d37d8480e930ac12ddf336749e39"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a70d7d37d8480e930ac12ddf336749e39">arm_compute::utils::VerifyAccessor::output_shape</a></div><div class="ttdeci">virtual TensorShape output_shape(ITensor &amp;tensor)</div><div class="ttdoc">Calculate reference output tensor shape. </div><div class="ttdef"><b>Definition:</b> <a href="graph__validate__utils_8h_source.xhtml#l00419">graph_validate_utils.h:419</a></div></div>
<div class="ttc" id="structarm__compute_1_1utils_1_1_tensor_params_xhtml_a6e1311c23c64b1a05475e5de91d75429"><div class="ttname"><a href="structarm__compute_1_1utils_1_1_tensor_params.xhtml#a6e1311c23c64b1a05475e5de91d75429">arm_compute::utils::TensorParams::range_low</a></div><div class="ttdeci">uint64_t range_low</div><div class="ttdef"><b>Definition:</b> <a href="graph__validate__utils_8h_source.xhtml#l00114">graph_validate_utils.h:114</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph__utils_1_1_num_py_accessor_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_num_py_accessor.xhtml">arm_compute::graph_utils::NumPyAccessor</a></div><div class="ttdoc">NumPy accessor class. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8h_source.xhtml#l00147">GraphUtils.h:147</a></div></div>
<div class="ttc" id="structarm__compute_1_1utils_1_1_tensor_params_xhtml_af0b9179895ca471157ea7edb8f07ef18"><div class="ttname"><a href="structarm__compute_1_1utils_1_1_tensor_params.xhtml#af0b9179895ca471157ea7edb8f07ef18">arm_compute::utils::TensorParams::range_high</a></div><div class="ttdeci">uint64_t range_high</div><div class="ttdef"><b>Definition:</b> <a href="graph__validate__utils_8h_source.xhtml#l00115">graph_validate_utils.h:115</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_verify_accessor_xhtml_a9d2883fa007e9da297e2ee2ece422c68"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a9d2883fa007e9da297e2ee2ece422c68">arm_compute::utils::VerifyAccessor::_params</a></div><div class="ttdeci">ExampleParams _params</div><div class="ttdef"><b>Definition:</b> <a href="graph__validate__utils_8h_source.xhtml#l00593">graph_validate_utils.h:593</a></div></div>
<div class="ttc" id="structarm__compute_1_1utils_1_1_common_params_xhtml_a39e23cca85d22b36fc18fbed987af01b"><div class="ttname"><a href="structarm__compute_1_1utils_1_1_common_params.xhtml#a39e23cca85d22b36fc18fbed987af01b">arm_compute::utils::CommonParams::weights</a></div><div class="ttdeci">TensorParams weights</div><div class="ttdef"><b>Definition:</b> <a href="graph__validate__utils_8h_source.xhtml#l00139">graph_validate_utils.h:139</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">arm_compute::test::SimpleTensor</a></div><div class="ttdoc">Simple tensor object that stores elements in a consecutive chunk of memory. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00058">SimpleTensor.h:58</a></div></div>
<div class="ttc" id="structarm__compute_1_1utils_1_1_tensor_params_xhtml_aef1c0b2053bee947f72e999db335c84c"><div class="ttname"><a href="structarm__compute_1_1utils_1_1_tensor_params.xhtml#aef1c0b2053bee947f72e999db335c84c">arm_compute::utils::TensorParams::npy</a></div><div class="ttdeci">std::string npy</div><div class="ttdef"><b>Definition:</b> <a href="graph__validate__utils_8h_source.xhtml#l00113">graph_validate_utils.h:113</a></div></div>
<div class="ttc" id="structarm__compute_1_1utils_1_1_common_params_xhtml_ab6692d047db2f0c872e4dfc55f958533"><div class="ttname"><a href="structarm__compute_1_1utils_1_1_common_params.xhtml#ab6692d047db2f0c872e4dfc55f958533">arm_compute::utils::CommonParams::output</a></div><div class="ttdeci">TensorParams output</div><div class="ttdef"><b>Definition:</b> <a href="graph__validate__utils_8h_source.xhtml#l00141">graph_validate_utils.h:141</a></div></div>
<div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00066">ClWorkloadRuntime.cpp:66</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_verify_accessor_xhtml_a5e789efce616d0a2398de4c7f57f293f"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a5e789efce616d0a2398de4c7f57f293f">arm_compute::utils::VerifyAccessor::reference</a></div><div class="ttdeci">virtual arm_compute::test::SimpleTensor&lt; D &gt; reference(arm_compute::test::SimpleTensor&lt; D &gt; &amp;src, arm_compute::test::SimpleTensor&lt; D &gt; &amp;weights, arm_compute::test::SimpleTensor&lt; TBias &gt; &amp;bias, const arm_compute::TensorShape &amp;output_shape)=0</div><div class="ttdoc">Calculate reference tensor. </div></div>
<div class="ttc" id="working__space_8hpp_xhtml_a1fb7b822a92dd3ab6e7ab15c67b0ff9e"><div class="ttname"><a href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a></div><div class="ttdeci">const int32_t * bias</div><div class="ttdef"><b>Definition:</b> <a href="working__space_8hpp_source.xhtml#l00292">working_space.hpp:292</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a8cdebcc372054188936056f2e21ef517"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8cdebcc372054188936056f2e21ef517">&#9670;&nbsp;</a></span>create_tensors()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void create_tensors </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">arm_compute::test::SimpleTensor</a>&lt; D &gt; &amp;&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">arm_compute::test::SimpleTensor</a>&lt; D &gt; &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">arm_compute::test::SimpleTensor</a>&lt; <a class="el" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a4e68efc85570b62c7d53c78875ced9bc">TBias</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create reference tensors. </p>
<p>Validate the given tensor against the reference result.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">src</td><td>The tensor with the source data. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">weights</td><td>The tensor with the weigths data. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">bias</td><td>The tensor with the bias data. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a> result of the actual operation passed into the Accessor.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>None. </dd></dl>

<p class="definition">Definition at line <a class="el" href="graph__validate__utils_8h_source.xhtml#l00401">401</a> of file <a class="el" href="graph__validate__utils_8h_source.xhtml">graph_validate_utils.h</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00152">ARM_COMPUTE_UNUSED</a>.</p>
<div class="fragment"><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    {</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;        <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;        <span class="comment">//Create Input tensors</span></div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;        src     = <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">arm_compute::test::SimpleTensor&lt;D&gt;</a> { TensorShape(<a class="code" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a9d2883fa007e9da297e2ee2ece422c68">_params</a>.<a class="code" href="structarm__compute_1_1utils_1_1_common_params.xhtml#aca3dcdcaa91edc6ede106e9d4454925b">input</a>.<a class="code" href="structarm__compute_1_1utils_1_1_tensor_params.xhtml#a2474a5474cbff19523a51eb1de01cda4">width</a>, <a class="code" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a9d2883fa007e9da297e2ee2ece422c68">_params</a>.<a class="code" href="structarm__compute_1_1utils_1_1_common_params.xhtml#aca3dcdcaa91edc6ede106e9d4454925b">input</a>.<a class="code" href="structarm__compute_1_1utils_1_1_tensor_params.xhtml#ad12fc34ce789bce6c8a05d8a17138534">height</a>, <a class="code" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a9d2883fa007e9da297e2ee2ece422c68">_params</a>.<a class="code" href="structarm__compute_1_1utils_1_1_common_params.xhtml#aca3dcdcaa91edc6ede106e9d4454925b">input</a>.<a class="code" href="structarm__compute_1_1utils_1_1_tensor_params.xhtml#accc3b8fde7c3ba545f41521e46f42e4c">fm</a>, <a class="code" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a9d2883fa007e9da297e2ee2ece422c68">_params</a>.<a class="code" href="structarm__compute_1_1utils_1_1_common_params.xhtml#aca3dcdcaa91edc6ede106e9d4454925b">input</a>.<a class="code" href="structarm__compute_1_1utils_1_1_tensor_params.xhtml#ad1793c1a8dd3db1a8c4e2d76eadf0036">batch</a>), <a class="code" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a9d2883fa007e9da297e2ee2ece422c68">_params</a>.<a class="code" href="structarm__compute_1_1utils_1_1_common_params.xhtml#a901f5f80dfec4ef700c14947ca8397c9">data_type</a>, 1, <a class="code" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a9d2883fa007e9da297e2ee2ece422c68">_params</a>.<a class="code" href="structarm__compute_1_1utils_1_1_common_params.xhtml#aca3dcdcaa91edc6ede106e9d4454925b">input</a>.<a class="code" href="structarm__compute_1_1utils_1_1_tensor_params.xhtml#a65bc62ff84efcb7e4a410600480a4dc9">quant_info</a> };</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;        weights = <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">arm_compute::test::SimpleTensor&lt;D&gt;</a> { TensorShape(<a class="code" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a9d2883fa007e9da297e2ee2ece422c68">_params</a>.<a class="code" href="structarm__compute_1_1utils_1_1_common_params.xhtml#a39e23cca85d22b36fc18fbed987af01b">weights</a>.<a class="code" href="structarm__compute_1_1utils_1_1_tensor_params.xhtml#a2474a5474cbff19523a51eb1de01cda4">width</a>, <a class="code" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a9d2883fa007e9da297e2ee2ece422c68">_params</a>.<a class="code" href="structarm__compute_1_1utils_1_1_common_params.xhtml#a39e23cca85d22b36fc18fbed987af01b">weights</a>.<a class="code" href="structarm__compute_1_1utils_1_1_tensor_params.xhtml#ad12fc34ce789bce6c8a05d8a17138534">height</a>, <a class="code" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a9d2883fa007e9da297e2ee2ece422c68">_params</a>.<a class="code" href="structarm__compute_1_1utils_1_1_common_params.xhtml#a39e23cca85d22b36fc18fbed987af01b">weights</a>.<a class="code" href="structarm__compute_1_1utils_1_1_tensor_params.xhtml#accc3b8fde7c3ba545f41521e46f42e4c">fm</a>), <a class="code" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a9d2883fa007e9da297e2ee2ece422c68">_params</a>.<a class="code" href="structarm__compute_1_1utils_1_1_common_params.xhtml#a901f5f80dfec4ef700c14947ca8397c9">data_type</a>, 1, <a class="code" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a9d2883fa007e9da297e2ee2ece422c68">_params</a>.<a class="code" href="structarm__compute_1_1utils_1_1_common_params.xhtml#a39e23cca85d22b36fc18fbed987af01b">weights</a>.<a class="code" href="structarm__compute_1_1utils_1_1_tensor_params.xhtml#a65bc62ff84efcb7e4a410600480a4dc9">quant_info</a> };</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;        bias    = <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">arm_compute::test::SimpleTensor&lt;TBias&gt;</a> { TensorShape(<a class="code" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a9d2883fa007e9da297e2ee2ece422c68">_params</a>.<a class="code" href="structarm__compute_1_1utils_1_1_common_params.xhtml#aca3dcdcaa91edc6ede106e9d4454925b">input</a>.<a class="code" href="structarm__compute_1_1utils_1_1_tensor_params.xhtml#ad12fc34ce789bce6c8a05d8a17138534">height</a>), <a class="code" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a9d2883fa007e9da297e2ee2ece422c68">_params</a>.<a class="code" href="structarm__compute_1_1utils_1_1_common_params.xhtml#a901f5f80dfec4ef700c14947ca8397c9">data_type</a>, 1, <a class="code" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a9d2883fa007e9da297e2ee2ece422c68">_params</a>.<a class="code" href="structarm__compute_1_1utils_1_1_common_params.xhtml#aca3dcdcaa91edc6ede106e9d4454925b">input</a>.<a class="code" href="structarm__compute_1_1utils_1_1_tensor_params.xhtml#a65bc62ff84efcb7e4a410600480a4dc9">quant_info</a> };</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    }</div><div class="ttc" id="structarm__compute_1_1utils_1_1_common_params_xhtml_aca3dcdcaa91edc6ede106e9d4454925b"><div class="ttname"><a href="structarm__compute_1_1utils_1_1_common_params.xhtml#aca3dcdcaa91edc6ede106e9d4454925b">arm_compute::utils::CommonParams::input</a></div><div class="ttdeci">TensorParams input</div><div class="ttdef"><b>Definition:</b> <a href="graph__validate__utils_8h_source.xhtml#l00138">graph_validate_utils.h:138</a></div></div>
<div class="ttc" id="structarm__compute_1_1utils_1_1_tensor_params_xhtml_ad1793c1a8dd3db1a8c4e2d76eadf0036"><div class="ttname"><a href="structarm__compute_1_1utils_1_1_tensor_params.xhtml#ad1793c1a8dd3db1a8c4e2d76eadf0036">arm_compute::utils::TensorParams::batch</a></div><div class="ttdeci">int batch</div><div class="ttdef"><b>Definition:</b> <a href="graph__validate__utils_8h_source.xhtml#l00111">graph_validate_utils.h:111</a></div></div>
<div class="ttc" id="structarm__compute_1_1utils_1_1_tensor_params_xhtml_ad12fc34ce789bce6c8a05d8a17138534"><div class="ttname"><a href="structarm__compute_1_1utils_1_1_tensor_params.xhtml#ad12fc34ce789bce6c8a05d8a17138534">arm_compute::utils::TensorParams::height</a></div><div class="ttdeci">int height</div><div class="ttdef"><b>Definition:</b> <a href="graph__validate__utils_8h_source.xhtml#l00109">graph_validate_utils.h:109</a></div></div>
<div class="ttc" id="structarm__compute_1_1utils_1_1_common_params_xhtml_a901f5f80dfec4ef700c14947ca8397c9"><div class="ttname"><a href="structarm__compute_1_1utils_1_1_common_params.xhtml#a901f5f80dfec4ef700c14947ca8397c9">arm_compute::utils::CommonParams::data_type</a></div><div class="ttdeci">arm_compute::DataType data_type</div><div class="ttdef"><b>Definition:</b> <a href="graph__validate__utils_8h_source.xhtml#l00143">graph_validate_utils.h:143</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_verify_accessor_xhtml_a9d2883fa007e9da297e2ee2ece422c68"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a9d2883fa007e9da297e2ee2ece422c68">arm_compute::utils::VerifyAccessor::_params</a></div><div class="ttdeci">ExampleParams _params</div><div class="ttdef"><b>Definition:</b> <a href="graph__validate__utils_8h_source.xhtml#l00593">graph_validate_utils.h:593</a></div></div>
<div class="ttc" id="structarm__compute_1_1utils_1_1_tensor_params_xhtml_accc3b8fde7c3ba545f41521e46f42e4c"><div class="ttname"><a href="structarm__compute_1_1utils_1_1_tensor_params.xhtml#accc3b8fde7c3ba545f41521e46f42e4c">arm_compute::utils::TensorParams::fm</a></div><div class="ttdeci">int fm</div><div class="ttdef"><b>Definition:</b> <a href="graph__validate__utils_8h_source.xhtml#l00110">graph_validate_utils.h:110</a></div></div>
<div class="ttc" id="structarm__compute_1_1utils_1_1_common_params_xhtml_a39e23cca85d22b36fc18fbed987af01b"><div class="ttname"><a href="structarm__compute_1_1utils_1_1_common_params.xhtml#a39e23cca85d22b36fc18fbed987af01b">arm_compute::utils::CommonParams::weights</a></div><div class="ttdeci">TensorParams weights</div><div class="ttdef"><b>Definition:</b> <a href="graph__validate__utils_8h_source.xhtml#l00139">graph_validate_utils.h:139</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">arm_compute::test::SimpleTensor</a></div><div class="ttdoc">Simple tensor object that stores elements in a consecutive chunk of memory. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00058">SimpleTensor.h:58</a></div></div>
<div class="ttc" id="structarm__compute_1_1utils_1_1_tensor_params_xhtml_a2474a5474cbff19523a51eb1de01cda4"><div class="ttname"><a href="structarm__compute_1_1utils_1_1_tensor_params.xhtml#a2474a5474cbff19523a51eb1de01cda4">arm_compute::utils::TensorParams::width</a></div><div class="ttdeci">int width</div><div class="ttdef"><b>Definition:</b> <a href="graph__validate__utils_8h_source.xhtml#l00108">graph_validate_utils.h:108</a></div></div>
<div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00066">ClWorkloadRuntime.cpp:66</a></div></div>
<div class="ttc" id="structarm__compute_1_1utils_1_1_tensor_params_xhtml_a65bc62ff84efcb7e4a410600480a4dc9"><div class="ttname"><a href="structarm__compute_1_1utils_1_1_tensor_params.xhtml#a65bc62ff84efcb7e4a410600480a4dc9">arm_compute::utils::TensorParams::quant_info</a></div><div class="ttdeci">QuantizationInfo quant_info</div><div class="ttdef"><b>Definition:</b> <a href="graph__validate__utils_8h_source.xhtml#l00112">graph_validate_utils.h:112</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad766ef265c150315d3468ae61a748050"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad766ef265c150315d3468ae61a748050">&#9670;&nbsp;</a></span>fill_tensor() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void fill_tensor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">arm_compute::test::SimpleTensor</a>&lt; uint8_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::random_device::result_type&#160;</td>
          <td class="paramname"><em>seed</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>low</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>high</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Fill QASYMM tensor with Random values. </p>
<p>Validate the given tensor against the reference result.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">tensor</td><td>The tensor we want to file </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">seed</td><td>seed for the randomization function </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">low</td><td>lower bound for random values </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">high</td><td>upper bound for random values</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>None. </dd></dl>

<p class="definition">Definition at line <a class="el" href="graph__validate__utils_8h_source.xhtml#l00451">451</a> of file <a class="el" href="graph__validate__utils_8h_source.xhtml">graph_validate_utils.h</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_simple_tensor_8h_source.xhtml#l00373">SimpleTensor&lt; T &gt;::data_type()</a>, <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#a756aeab6b5c217b924c3cc70222c975d">arm_compute::test::validation::distribution()</a>, <a class="el" href="_simple_tensor_8h_source.xhtml#l00422">SimpleTensor&lt; T &gt;::num_elements()</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">arm_compute::QASYMM8</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00155">arm_compute::test::validation::qinfo</a>, <a class="el" href="_simple_tensor_8h_source.xhtml#l00341">SimpleTensor&lt; T &gt;::quantization_info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00303">arm_compute::quantize_qasymm8()</a>, and <a class="el" href="_quantization_info_8h_source.xhtml#l00150">QuantizationInfo::uniform()</a>.</p>
<div class="fragment"><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    {</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(tensor.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a>() != <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">arm_compute::DataType::QASYMM8</a>);</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">qinfo</a> = tensor.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#ac74736e3863207232a23b7181c1d0f44">quantization_info</a>().<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>();</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;        uint8_t qasymm8_low  = <a class="code" href="namespacearm__compute.xhtml#ab8cef8b31b552b532a14ab8815e06285">quantize_qasymm8</a>(low, qinfo);</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;        uint8_t qasymm8_high = <a class="code" href="namespacearm__compute.xhtml#ab8cef8b31b552b532a14ab8815e06285">quantize_qasymm8</a>(high, qinfo);</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;        std::mt19937                           gen(seed);</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;        std::uniform_int_distribution&lt;uint8_t&gt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a756aeab6b5c217b924c3cc70222c975d">distribution</a>(qasymm8_low, qasymm8_high);</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; tensor.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aedcfdd4c3b92fe0d63b5463c7ad1d21e">num_elements</a>(); ++i)</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;        {</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;            tensor[i] = <a class="code" href="namespacearm__compute.xhtml#ab8cef8b31b552b532a14ab8815e06285">quantize_qasymm8</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a756aeab6b5c217b924c3cc70222c975d">distribution</a>(gen), qinfo);</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;        }</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    }</div><div class="ttc" id="namespacearm__compute_xhtml_ab8cef8b31b552b532a14ab8815e06285"><div class="ttname"><a href="namespacearm__compute.xhtml#ab8cef8b31b552b532a14ab8815e06285">arm_compute::quantize_qasymm8</a></div><div class="ttdeci">uint8_t quantize_qasymm8(float value, const INFO_TYPE &amp;qinfo, RoundingPolicy rounding_policy=RoundingPolicy::TO_NEAREST_UP)</div><div class="ttdoc">Quantize a value given an unsigned 8-bit asymmetric quantization scheme. </div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00303">QuantizationInfo.h:303</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_a9a3e72153aeb3ed212e9c3698774e881"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a9a3e72153aeb3ed212e9c3698774e881">arm_compute::test::SimpleTensor::data_type</a></div><div class="ttdeci">DataType data_type() const override</div><div class="ttdoc">Data type of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00373">SimpleTensor.h:373</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">arm_compute::DataType::QASYMM8</a></div><div class="ttdoc">quantized, asymmetric fixed-point 8-bit number unsigned </div></div>
<div class="ttc" id="classarm__compute_1_1_quantization_info_xhtml_a706fc156bcd4c45441bcaad05884b57d"><div class="ttname"><a href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">arm_compute::QuantizationInfo::uniform</a></div><div class="ttdeci">UniformQuantizationInfo uniform() const</div><div class="ttdoc">Return per layer quantization info. </div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00150">QuantizationInfo.h:150</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a756aeab6b5c217b924c3cc70222c975d"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a756aeab6b5c217b924c3cc70222c975d">arm_compute::test::validation::distribution</a></div><div class="ttdeci">std::uniform_real_distribution&lt; float &gt; distribution(-5.f, 5.f)</div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ad85d7becf0c6e3cffbc255489808e219"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">arm_compute::test::validation::qinfo</a></div><div class="ttdeci">const QuantizationInfo qinfo</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00155">Im2Col.cpp:155</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_aedcfdd4c3b92fe0d63b5463c7ad1d21e"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aedcfdd4c3b92fe0d63b5463c7ad1d21e">arm_compute::test::SimpleTensor::num_elements</a></div><div class="ttdeci">int num_elements() const override</div><div class="ttdoc">Number of elements of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00422">SimpleTensor.h:422</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_ac74736e3863207232a23b7181c1d0f44"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#ac74736e3863207232a23b7181c1d0f44">arm_compute::test::SimpleTensor::quantization_info</a></div><div class="ttdeci">QuantizationInfo quantization_info() const override</div><div class="ttdoc">Quantization info in case of asymmetric quantized type. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00341">SimpleTensor.h:341</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af7a2acd451b91be95366758a12df41f2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af7a2acd451b91be95366758a12df41f2">&#9670;&nbsp;</a></span>fill_tensor() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void fill_tensor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">arm_compute::test::SimpleTensor</a>&lt; int32_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::random_device::result_type&#160;</td>
          <td class="paramname"><em>seed</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>low</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>high</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Fill S32 tensor with Random values. </p>
<p>Validate the given tensor against the reference result.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">tensor</td><td>The tensor we want to file </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">seed</td><td>seed for the randomization function </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">low</td><td>lower bound for random values </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">high</td><td>upper bound for random values</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>None. </dd></dl>

<p class="definition">Definition at line <a class="el" href="graph__validate__utils_8h_source.xhtml#l00479">479</a> of file <a class="el" href="graph__validate__utils_8h_source.xhtml">graph_validate_utils.h</a>.</p>

<p class="reference">References <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#a756aeab6b5c217b924c3cc70222c975d">arm_compute::test::validation::distribution()</a>, and <a class="el" href="_simple_tensor_8h_source.xhtml#l00422">SimpleTensor&lt; T &gt;::num_elements()</a>.</p>
<div class="fragment"><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    {</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;        std::mt19937                           gen(seed);</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;        std::uniform_int_distribution&lt;int32_t&gt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a756aeab6b5c217b924c3cc70222c975d">distribution</a>(static_cast&lt;int32_t&gt;(low), static_cast&lt;uint32_t&gt;(high));</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; tensor.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aedcfdd4c3b92fe0d63b5463c7ad1d21e">num_elements</a>(); ++i)</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;        {</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;            tensor[i] = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a756aeab6b5c217b924c3cc70222c975d">distribution</a>(gen);</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;        }</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    }</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a756aeab6b5c217b924c3cc70222c975d"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a756aeab6b5c217b924c3cc70222c975d">arm_compute::test::validation::distribution</a></div><div class="ttdeci">std::uniform_real_distribution&lt; float &gt; distribution(-5.f, 5.f)</div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_aedcfdd4c3b92fe0d63b5463c7ad1d21e"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aedcfdd4c3b92fe0d63b5463c7ad1d21e">arm_compute::test::SimpleTensor::num_elements</a></div><div class="ttdeci">int num_elements() const override</div><div class="ttdoc">Number of elements of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00422">SimpleTensor.h:422</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a134a60d6a89a2956b443fb743277e414"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a134a60d6a89a2956b443fb743277e414">&#9670;&nbsp;</a></span>fill_tensor() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void fill_tensor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">arm_compute::test::SimpleTensor</a>&lt; float &gt; &amp;&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::random_device::result_type&#160;</td>
          <td class="paramname"><em>seed</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>low</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>high</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Fill F32 tensor with Random values. </p>
<p>Validate the given tensor against the reference result.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">tensor</td><td>The tensor we want to file </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">seed</td><td>seed for the randomization function </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">low</td><td>lower bound for random values </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">high</td><td>upper bound for random values</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>None. </dd></dl>

<p class="definition">Definition at line <a class="el" href="graph__validate__utils_8h_source.xhtml#l00500">500</a> of file <a class="el" href="graph__validate__utils_8h_source.xhtml">graph_validate_utils.h</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_simple_tensor_8h_source.xhtml#l00373">SimpleTensor&lt; T &gt;::data_type()</a>, <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#a756aeab6b5c217b924c3cc70222c975d">arm_compute::test::validation::distribution()</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::F32</a>, and <a class="el" href="_simple_tensor_8h_source.xhtml#l00422">SimpleTensor&lt; T &gt;::num_elements()</a>.</p>
<div class="fragment"><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    {</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(tensor.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a>() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::DataType::F32</a>);</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;        std::mt19937                          gen(seed);</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;        std::uniform_real_distribution&lt;float&gt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a756aeab6b5c217b924c3cc70222c975d">distribution</a>(low, high);</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; tensor.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aedcfdd4c3b92fe0d63b5463c7ad1d21e">num_elements</a>(); ++i)</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;        {</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;            tensor[i] = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a756aeab6b5c217b924c3cc70222c975d">distribution</a>(gen);</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;        }</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    }</div><div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::Format::F32</a></div><div class="ttdoc">1 channel, 1 F32 per channel </div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_a9a3e72153aeb3ed212e9c3698774e881"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a9a3e72153aeb3ed212e9c3698774e881">arm_compute::test::SimpleTensor::data_type</a></div><div class="ttdeci">DataType data_type() const override</div><div class="ttdoc">Data type of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00373">SimpleTensor.h:373</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a756aeab6b5c217b924c3cc70222c975d"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a756aeab6b5c217b924c3cc70222c975d">arm_compute::test::validation::distribution</a></div><div class="ttdeci">std::uniform_real_distribution&lt; float &gt; distribution(-5.f, 5.f)</div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_aedcfdd4c3b92fe0d63b5463c7ad1d21e"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aedcfdd4c3b92fe0d63b5463c7ad1d21e">arm_compute::test::SimpleTensor::num_elements</a></div><div class="ttdeci">int num_elements() const override</div><div class="ttdoc">Number of elements of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00422">SimpleTensor.h:422</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a058a15825351d7e8245bddc7960df6ce"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a058a15825351d7e8245bddc7960df6ce">&#9670;&nbsp;</a></span>fill_tensor() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void fill_tensor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">arm_compute::test::SimpleTensor</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::random_device::result_type&#160;</td>
          <td class="paramname"><em>seed</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a>&#160;</td>
          <td class="paramname"><em>low</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a>&#160;</td>
          <td class="paramname"><em>high</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Fill F16 tensor with Random values. </p>
<p>Validate the given tensor against the reference result.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">tensor</td><td>The tensor we want to file </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">seed</td><td>seed for the randomization function </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">low</td><td>lower bound for random values </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">high</td><td>upper bound for random values</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>None. </dd></dl>

<p class="definition">Definition at line <a class="el" href="graph__validate__utils_8h_source.xhtml#l00522">522</a> of file <a class="el" href="graph__validate__utils_8h_source.xhtml">graph_validate_utils.h</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_simple_tensor_8h_source.xhtml#l00373">SimpleTensor&lt; T &gt;::data_type()</a>, <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#a756aeab6b5c217b924c3cc70222c975d">arm_compute::test::validation::distribution()</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">arm_compute::F16</a>, and <a class="el" href="_simple_tensor_8h_source.xhtml#l00422">SimpleTensor&lt; T &gt;::num_elements()</a>.</p>
<div class="fragment"><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    {</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(tensor.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a>() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">arm_compute::DataType::F16</a>);</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;        std::mt19937                          gen(seed);</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;        std::uniform_real_distribution&lt;float&gt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a756aeab6b5c217b924c3cc70222c975d">distribution</a>(static_cast&lt;half&gt;(low), static_cast&lt;half&gt;(high));</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; tensor.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aedcfdd4c3b92fe0d63b5463c7ad1d21e">num_elements</a>(); ++i)</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;        {</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;            tensor[i] = <span class="keyword">static_cast&lt;</span><a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a756aeab6b5c217b924c3cc70222c975d">distribution</a>(gen));</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;        }</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;    }</div><div class="ttc" id="namespacearm__compute_xhtml_a73e2825fd61d349c5ca2f5313e3c8ea1"><div class="ttname"><a href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">arm_compute::half</a></div><div class="ttdeci">half_float::half half</div><div class="ttdoc">16-bit floating point type </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00048">Types.h:48</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_a9a3e72153aeb3ed212e9c3698774e881"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a9a3e72153aeb3ed212e9c3698774e881">arm_compute::test::SimpleTensor::data_type</a></div><div class="ttdeci">DataType data_type() const override</div><div class="ttdoc">Data type of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00373">SimpleTensor.h:373</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">arm_compute::Format::F16</a></div><div class="ttdoc">1 channel, 1 F16 per channel </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a756aeab6b5c217b924c3cc70222c975d"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a756aeab6b5c217b924c3cc70222c975d">arm_compute::test::validation::distribution</a></div><div class="ttdeci">std::uniform_real_distribution&lt; float &gt; distribution(-5.f, 5.f)</div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_aedcfdd4c3b92fe0d63b5463c7ad1d21e"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aedcfdd4c3b92fe0d63b5463c7ad1d21e">arm_compute::test::SimpleTensor::num_elements</a></div><div class="ttdeci">int num_elements() const override</div><div class="ttdoc">Number of elements of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00422">SimpleTensor.h:422</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a70d7d37d8480e930ac12ddf336749e39"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a70d7d37d8480e930ac12ddf336749e39">&#9670;&nbsp;</a></span>output_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> output_shape </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate reference output tensor shape. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a> result of the actual operation passed into the Accessor.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>output tensor shape. </dd></dl>

<p class="definition">Definition at line <a class="el" href="graph__validate__utils_8h_source.xhtml#l00419">419</a> of file <a class="el" href="graph__validate__utils_8h_source.xhtml">graph_validate_utils.h</a>.</p>

<p class="reference">References <a class="el" href="working__space_8hpp_source.xhtml#l00292">bias</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">arm_compute::NCHW</a>, <a class="el" href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00411">arm_compute::test::validation::output_shape</a>, <a class="el" href="_graph_utils_8h_source.xhtml#l00665">arm_compute::graph_utils::permute_shape()</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>, and <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>.</p>
<div class="fragment"><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    {</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1graph__utils.xhtml#ab3a897163a7fe23208f1d9c618062ee2">arm_compute::graph_utils::permute_shape</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;tensor_shape(), <a class="code" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a9d2883fa007e9da297e2ee2ece422c68">_params</a>.<a class="code" href="structarm__compute_1_1utils_1_1_example_params.xhtml#aa56f0562febf49bc0e29a4257551191b">data_layout</a>, <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>);</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    }</div><div class="ttc" id="classarm__compute_1_1utils_1_1_verify_accessor_xhtml_a9d2883fa007e9da297e2ee2ece422c68"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a9d2883fa007e9da297e2ee2ece422c68">arm_compute::utils::VerifyAccessor::_params</a></div><div class="ttdeci">ExampleParams _params</div><div class="ttdef"><b>Definition:</b> <a href="graph__validate__utils_8h_source.xhtml#l00593">graph_validate_utils.h:593</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">arm_compute::DataLayout::NCHW</a></div><div class="ttdoc">Num samples, channels, height, width. </div></div>
<div class="ttc" id="namespacearm__compute_1_1graph__utils_xhtml_ab3a897163a7fe23208f1d9c618062ee2"><div class="ttname"><a href="namespacearm__compute_1_1graph__utils.xhtml#ab3a897163a7fe23208f1d9c618062ee2">arm_compute::graph_utils::permute_shape</a></div><div class="ttdeci">TensorShape permute_shape(TensorShape tensor_shape, DataLayout in_data_layout, DataLayout out_data_layout)</div><div class="ttdoc">Permutes a given tensor shape given the input and output data layout. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8h_source.xhtml#l00665">GraphUtils.h:665</a></div></div>
<div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00066">ClWorkloadRuntime.cpp:66</a></div></div>
<div class="ttc" id="structarm__compute_1_1utils_1_1_example_params_xhtml_aa56f0562febf49bc0e29a4257551191b"><div class="ttname"><a href="structarm__compute_1_1utils_1_1_example_params.xhtml#aa56f0562febf49bc0e29a4257551191b">arm_compute::utils::ExampleParams::data_layout</a></div><div class="ttdeci">arm_compute::DataLayout data_layout</div><div class="ttdef"><b>Definition:</b> <a href="graph__validate__utils_8h_source.xhtml#l00183">graph_validate_utils.h:183</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a5e789efce616d0a2398de4c7f57f293f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5e789efce616d0a2398de4c7f57f293f">&#9670;&nbsp;</a></span>reference()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">arm_compute::test::SimpleTensor</a>&lt;D&gt; reference </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">arm_compute::test::SimpleTensor</a>&lt; D &gt; &amp;&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">arm_compute::test::SimpleTensor</a>&lt; D &gt; &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">arm_compute::test::SimpleTensor</a>&lt; <a class="el" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a4e68efc85570b62c7d53c78875ced9bc">TBias</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">arm_compute::TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>output_shape</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate reference tensor. </p>
<p>Validate the given tensor against the reference result.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">src</td><td>The tensor with the source data. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">weights</td><td>The tensor with the weigths data. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bias</td><td>The tensor with the bias data. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output_shape</td><td>Shape of the output tensor.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a> with the reference output. </dd></dl>

</div>
</div>
<a id="a666345f7004743b3470c4c9fda6bce80"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a666345f7004743b3470c4c9fda6bce80">&#9670;&nbsp;</a></span>relative_tolerance()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual float relative_tolerance </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Select relative tolerance. </p>
<p>Select relative tolerance if not supplied by user.</p>
<dl class="section return"><dt>Returns</dt><dd>Appropriate relative tolerance. </dd></dl>

</div>
</div>
<a id="a399e4cdf08ce98d229dcaa8e4ee9841e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a399e4cdf08ce98d229dcaa8e4ee9841e">&#9670;&nbsp;</a></span>tolerance_number()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual float tolerance_number </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Select tolerance number. </p>
<p>Select tolerance number if not supplied by user.</p>
<dl class="section return"><dt>Returns</dt><dd>Appropriate tolerance number. </dd></dl>

</div>
</div>
<a id="a9aba3e822185f91d4294cd081a9481ab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9aba3e822185f91d4294cd081a9481ab">&#9670;&nbsp;</a></span>validate()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void validate </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">arm_compute::test::SimpleTensor</a>&lt; D &gt;&#160;</td>
          <td class="paramname"><em>output</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Validate the output versus the reference. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a> result of the actual operation passed into the Accessor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a> result of the reference implementation.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>None. </dd></dl>
<p>&lt; Relative tolerance</p>
<p>&lt; Absolute tolerance</p>
<p>&lt; Tolerance number </p>

<p class="definition">Definition at line <a class="el" href="graph__validate__utils_8h_source.xhtml#l00565">565</a> of file <a class="el" href="graph__validate__utils_8h_source.xhtml">graph_validate_utils.h</a>.</p>

<p class="reference">References <a class="el" href="_add_8cpp_source.xhtml#l00104">arm_compute::test::validation::tolerance_num</a>, and <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#a975901e0b4d6e387107c4d785c22edd5">arm_compute::test::validation::validate()</a>.</p>
<div class="fragment"><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;    {</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;        <span class="keywordtype">float</span> user_relative_tolerance = <a class="code" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a9d2883fa007e9da297e2ee2ece422c68">_params</a>.<a class="code" href="structarm__compute_1_1utils_1_1_common_params.xhtml#aa9a98a0656a58548b5582d40fac47b06">verification</a>.<a class="code" href="structarm__compute_1_1utils_1_1_verification_params.xhtml#a1737e18ea7e3b57e7214453a0991a732">relative_tolerance</a>;</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;        <span class="keywordtype">float</span> user_absolute_tolerance = <a class="code" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a9d2883fa007e9da297e2ee2ece422c68">_params</a>.<a class="code" href="structarm__compute_1_1utils_1_1_common_params.xhtml#aa9a98a0656a58548b5582d40fac47b06">verification</a>.<a class="code" href="structarm__compute_1_1utils_1_1_verification_params.xhtml#a391ce7e414170c2816119402b217397f">absolute_tolerance</a>;</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;        <span class="keywordtype">float</span> user_tolerance_num      = <a class="code" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a9d2883fa007e9da297e2ee2ece422c68">_params</a>.<a class="code" href="structarm__compute_1_1utils_1_1_common_params.xhtml#aa9a98a0656a58548b5582d40fac47b06">verification</a>.<a class="code" href="structarm__compute_1_1utils_1_1_verification_params.xhtml#ad2934e26bd8d5d9cb23040bf3135c4bf">tolerance_number</a>;</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;        <span class="comment">/* If no user input was provided override with defaults. */</span></div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;        <span class="keywordflow">if</span>(user_relative_tolerance == -1)</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;        {</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;            user_relative_tolerance = <a class="code" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a666345f7004743b3470c4c9fda6bce80">relative_tolerance</a>();</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;        }</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;        <span class="keywordflow">if</span>(user_absolute_tolerance == -1)</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;        {</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;            user_absolute_tolerance = <a class="code" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a5c8865138486a8c43f6f8902bd94ab1f">absolute_tolerance</a>();</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;        }</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;        <span class="keywordflow">if</span>(user_tolerance_num == -1)</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;        {</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;            user_tolerance_num = <a class="code" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a399e4cdf08ce98d229dcaa8e4ee9841e">tolerance_number</a>();</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;        }</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_relative_tolerance.xhtml">arm_compute::test::validation::RelativeTolerance&lt;float&gt;</a> rel_tolerance(user_relative_tolerance); <span class="comment">/**&lt; Relative tolerance */</span></div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1validation_1_1_absolute_tolerance.xhtml">arm_compute::test::validation::AbsoluteTolerance&lt;float&gt;</a> abs_tolerance(user_absolute_tolerance); <span class="comment">/**&lt; Absolute tolerance */</span></div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span>                                                   <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#afb817382c5c8f70515401e03052c2095">tolerance_num</a>(user_tolerance_num);      <span class="comment">/**&lt; Tolerance number */</span></div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a975901e0b4d6e387107c4d785c22edd5">arm_compute::test::validation::validate</a>(<a class="code" href="classarm__compute_1_1test_1_1_accessor.xhtml">arm_compute::test::Accessor</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>), output, rel_tolerance, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#afb817382c5c8f70515401e03052c2095">tolerance_num</a>, abs_tolerance);</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;    }</div><div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_absolute_tolerance_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_absolute_tolerance.xhtml">arm_compute::test::validation::AbsoluteTolerance</a></div><div class="ttdoc">Class reprensenting an absolute tolerance value. </div><div class="ttdef"><b>Definition:</b> <a href="_validation_8h_source.xhtml#l00061">Validation.h:61</a></div></div>
<div class="ttc" id="structarm__compute_1_1utils_1_1_verification_params_xhtml_a1737e18ea7e3b57e7214453a0991a732"><div class="ttname"><a href="structarm__compute_1_1utils_1_1_verification_params.xhtml#a1737e18ea7e3b57e7214453a0991a732">arm_compute::utils::VerificationParams::relative_tolerance</a></div><div class="ttdeci">float relative_tolerance</div><div class="ttdef"><b>Definition:</b> <a href="graph__validate__utils_8h_source.xhtml#l00122">graph_validate_utils.h:122</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_accessor_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1_accessor.xhtml">arm_compute::test::Accessor</a></div><div class="ttdoc">Accessor implementation for Tensor objects. </div><div class="ttdef"><b>Definition:</b> <a href="_accessor_8h_source.xhtml#l00035">Accessor.h:35</a></div></div>
<div class="ttc" id="structarm__compute_1_1utils_1_1_common_params_xhtml_aa9a98a0656a58548b5582d40fac47b06"><div class="ttname"><a href="structarm__compute_1_1utils_1_1_common_params.xhtml#aa9a98a0656a58548b5582d40fac47b06">arm_compute::utils::CommonParams::verification</a></div><div class="ttdeci">VerificationParams verification</div><div class="ttdef"><b>Definition:</b> <a href="graph__validate__utils_8h_source.xhtml#l00142">graph_validate_utils.h:142</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_verify_accessor_xhtml_a666345f7004743b3470c4c9fda6bce80"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a666345f7004743b3470c4c9fda6bce80">arm_compute::utils::VerifyAccessor::relative_tolerance</a></div><div class="ttdeci">virtual float relative_tolerance()=0</div><div class="ttdoc">Select relative tolerance. </div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_verify_accessor_xhtml_a9d2883fa007e9da297e2ee2ece422c68"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a9d2883fa007e9da297e2ee2ece422c68">arm_compute::utils::VerifyAccessor::_params</a></div><div class="ttdeci">ExampleParams _params</div><div class="ttdef"><b>Definition:</b> <a href="graph__validate__utils_8h_source.xhtml#l00593">graph_validate_utils.h:593</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a975901e0b4d6e387107c4d785c22edd5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a975901e0b4d6e387107c4d785c22edd5">arm_compute::test::validation::validate</a></div><div class="ttdeci">validate(CLAccessor(output_state), expected_output)</div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_afb817382c5c8f70515401e03052c2095"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#afb817382c5c8f70515401e03052c2095">arm_compute::test::validation::tolerance_num</a></div><div class="ttdeci">constexpr float tolerance_num</div><div class="ttdoc">Tolerance number. </div><div class="ttdef"><b>Definition:</b> <a href="_add_8cpp_source.xhtml#l00104">Add.cpp:104</a></div></div>
<div class="ttc" id="structarm__compute_1_1utils_1_1_verification_params_xhtml_ad2934e26bd8d5d9cb23040bf3135c4bf"><div class="ttname"><a href="structarm__compute_1_1utils_1_1_verification_params.xhtml#ad2934e26bd8d5d9cb23040bf3135c4bf">arm_compute::utils::VerificationParams::tolerance_number</a></div><div class="ttdeci">float tolerance_number</div><div class="ttdef"><b>Definition:</b> <a href="graph__validate__utils_8h_source.xhtml#l00123">graph_validate_utils.h:123</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1validation_1_1_relative_tolerance_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1validation_1_1_relative_tolerance.xhtml">arm_compute::test::validation::RelativeTolerance</a></div><div class="ttdoc">Class reprensenting a relative tolerance value. </div><div class="ttdef"><b>Definition:</b> <a href="_validation_8h_source.xhtml#l00097">Validation.h:97</a></div></div>
<div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00066">ClWorkloadRuntime.cpp:66</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_verify_accessor_xhtml_a399e4cdf08ce98d229dcaa8e4ee9841e"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a399e4cdf08ce98d229dcaa8e4ee9841e">arm_compute::utils::VerifyAccessor::tolerance_number</a></div><div class="ttdeci">virtual float tolerance_number()=0</div><div class="ttdoc">Select tolerance number. </div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_verify_accessor_xhtml_a5c8865138486a8c43f6f8902bd94ab1f"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#a5c8865138486a8c43f6f8902bd94ab1f">arm_compute::utils::VerifyAccessor::absolute_tolerance</a></div><div class="ttdeci">virtual float absolute_tolerance()=0</div><div class="ttdoc">Select absolute tolerance. </div></div>
<div class="ttc" id="structarm__compute_1_1utils_1_1_verification_params_xhtml_a391ce7e414170c2816119402b217397f"><div class="ttname"><a href="structarm__compute_1_1utils_1_1_verification_params.xhtml#a391ce7e414170c2816119402b217397f">arm_compute::utils::VerificationParams::absolute_tolerance</a></div><div class="ttdeci">float absolute_tolerance</div><div class="ttdef"><b>Definition:</b> <a href="graph__validate__utils_8h_source.xhtml#l00121">graph_validate_utils.h:121</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Field Documentation</h2>
<a id="a9d2883fa007e9da297e2ee2ece422c68"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9d2883fa007e9da297e2ee2ece422c68">&#9670;&nbsp;</a></span>_params</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structarm__compute_1_1utils_1_1_example_params.xhtml">ExampleParams</a> _params</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="graph__validate__utils_8h_source.xhtml#l00593">593</a> of file <a class="el" href="graph__validate__utils_8h_source.xhtml">graph_validate_utils.h</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>tests/validate_examples/<a class="el" href="graph__validate__utils_8h_source.xhtml">graph_validate_utils.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1utils.xhtml">utils</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml">VerifyAccessor</a></li>
    <li class="footer">Generated on Thu May 18 2023 14:52:46 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
