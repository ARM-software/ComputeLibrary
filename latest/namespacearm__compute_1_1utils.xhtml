<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute::utils Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('namespacearm__compute_1_1utils.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#namespaces">Namespaces</a> &#124;
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">arm_compute::utils Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:namespacearm__compute_1_1utils_1_1cast"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils_1_1cast.xhtml">cast</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1utils_1_1detail"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils_1_1detail.xhtml">detail</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1utils_1_1info__helpers"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils_1_1info__helpers.xhtml">info_helpers</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1utils_1_1iterable"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils_1_1iterable.xhtml">iterable</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1utils_1_1math"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils_1_1math.xhtml">math</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1utils_1_1memory"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils_1_1memory.xhtml">memory</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1utils_1_1mmap__io"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils_1_1mmap__io.xhtml">mmap_io</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1utils_1_1random"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils_1_1random.xhtml">random</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1utils_1_1rounding"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils_1_1rounding.xhtml">rounding</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1utils_1_1traits"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils_1_1traits.xhtml">traits</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1_command_line_parser.xhtml">CommandLineParser</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class to parse command line arguments.  <a href="classarm__compute_1_1utils_1_1_command_line_parser.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1_common_graph_options.xhtml">CommonGraphOptions</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Common command line options used to configure the graph examples.  <a href="classarm__compute_1_1utils_1_1_common_graph_options.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1utils_1_1_common_graph_params.xhtml">CommonGraphParams</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Structure holding all the common graph parameters.  <a href="structarm__compute_1_1utils_1_1_common_graph_params.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1_common_graph_validate_options.xhtml">CommonGraphValidateOptions</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1utils_1_1_common_graph_validate_options.xhtml" title="CommonGraphValidateOptions command line options used to configure the graph examples. ">CommonGraphValidateOptions</a> command line options used to configure the graph examples.  <a href="classarm__compute_1_1utils_1_1_common_graph_validate_options.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1utils_1_1_common_params.xhtml">CommonParams</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Structure holding all the graph <a class="el" href="classarm__compute_1_1utils_1_1_example.xhtml" title="Abstract Example class. ">Example</a> parameters.  <a href="structarm__compute_1_1utils_1_1_common_params.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1utils_1_1_convolution_params.xhtml">ConvolutionParams</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Structure holding all the Convolution layer graph parameters.  <a href="structarm__compute_1_1utils_1_1_convolution_params.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1_enum_list_option.xhtml">EnumListOption</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implementation of an option that accepts any number of values from a fixed set.  <a href="classarm__compute_1_1utils_1_1_enum_list_option.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1_enum_option.xhtml">EnumOption</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implementation of a simple option that accepts a value from a fixed set.  <a href="classarm__compute_1_1utils_1_1_enum_option.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1_example.xhtml">Example</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Abstract <a class="el" href="classarm__compute_1_1utils_1_1_example.xhtml" title="Abstract Example class. ">Example</a> class.  <a href="classarm__compute_1_1utils_1_1_example.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1utils_1_1_example_params.xhtml">ExampleParams</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Structure holding all the graph <a class="el" href="classarm__compute_1_1utils_1_1_example.xhtml" title="Abstract Example class. ">Example</a> parameters.  <a href="structarm__compute_1_1utils_1_1_example_params.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1_file_image_feeder.xhtml">FileImageFeeder</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">File <a class="el" href="struct_image.xhtml" title="Structure to hold Image information. ">Image</a> feeder concrete implementation.  <a href="classarm__compute_1_1utils_1_1_file_image_feeder.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1utils_1_1_framework_params.xhtml">FrameworkParams</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Structure holding all the common graph parameters.  <a href="structarm__compute_1_1utils_1_1_framework_params.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1utils_1_1_fully_connected_params.xhtml">FullyConnectedParams</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Structure holding all the fully_connected layer graph parameters.  <a href="structarm__compute_1_1utils_1_1_fully_connected_params.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1_graph_validate_example.xhtml">GraphValidateExample</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1_i_image_data_feeder.xhtml">IImageDataFeeder</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="struct_image.xhtml" title="Structure to hold Image information. ">Image</a> feeder interface.  <a href="classarm__compute_1_1utils_1_1_i_image_data_feeder.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1_i_image_loader.xhtml">IImageLoader</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="struct_image.xhtml" title="Structure to hold Image information. ">Image</a> loader interface.  <a href="classarm__compute_1_1utils_1_1_i_image_loader.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1_image_loader_factory.xhtml">ImageLoaderFactory</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Factory for generating appropriate image loader.  <a href="classarm__compute_1_1utils_1_1_image_loader_factory.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1_j_p_e_g_loader.xhtml">JPEGLoader</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class to load the content of a JPEG file into an <a class="el" href="struct_image.xhtml" title="Structure to hold Image information. ">Image</a>.  <a href="classarm__compute_1_1utils_1_1_j_p_e_g_loader.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1_list_option.xhtml">ListOption</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implementation of an option that accepts any number of values.  <a href="classarm__compute_1_1utils_1_1_list_option.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1_memory_image_feeder.xhtml">MemoryImageFeeder</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_memory.xhtml" title="CPU implementation of memory object. ">Memory</a> <a class="el" href="struct_image.xhtml" title="Structure to hold Image information. ">Image</a> feeder concrete implementation.  <a href="classarm__compute_1_1utils_1_1_memory_image_feeder.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml">NPYLoader</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Numpy data loader.  <a href="classarm__compute_1_1utils_1_1_n_p_y_loader.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1_option.xhtml">Option</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Abstract base class for a command line option.  <a href="classarm__compute_1_1utils_1_1_option.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1_p_p_m_loader.xhtml">PPMLoader</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">PPM <a class="el" href="struct_image.xhtml" title="Structure to hold Image information. ">Image</a> loader concrete implementation.  <a href="classarm__compute_1_1utils_1_1_p_p_m_loader.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1_simple_option.xhtml">SimpleOption</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implementation of an option that accepts a single value.  <a href="classarm__compute_1_1utils_1_1_simple_option.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1utils_1_1_tensor_params.xhtml">TensorParams</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Structure holding all the input tensor graph parameters.  <a href="structarm__compute_1_1utils_1_1_tensor_params.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1_toggle_option.xhtml">ToggleOption</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implementation of an option that can be either true or false.  <a href="classarm__compute_1_1utils_1_1_toggle_option.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1uniform__real__distribution__16bit.xhtml">uniform_real_distribution_16bit</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Specialized class to generate random non-zero FP16 values.  <a href="classarm__compute_1_1utils_1_1uniform__real__distribution__16bit.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1_validate_example.xhtml">ValidateExample</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Abstract <a class="el" href="classarm__compute_1_1utils_1_1_validate_example.xhtml" title="Abstract ValidateExample class. ">ValidateExample</a> class.  <a href="classarm__compute_1_1utils_1_1_validate_example.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1utils_1_1_verification_params.xhtml">VerificationParams</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Structure holding all the verification graph parameters.  <a href="structarm__compute_1_1utils_1_1_verification_params.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml">VerifyAccessor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Graph example validation accessor class.  <a href="classarm__compute_1_1utils_1_1_verify_accessor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:a52b975f9f11b484d21969f9a8fefb29d"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils.xhtml#a52b975f9f11b484d21969f9a8fefb29d">ConvolutionPaddingMode</a> { <a class="el" href="namespacearm__compute_1_1utils.xhtml#a52b975f9f11b484d21969f9a8fefb29da3ac705f2acd51a4613f9188c05c91d0d">Valid</a>, 
<a class="el" href="namespacearm__compute_1_1utils.xhtml#a52b975f9f11b484d21969f9a8fefb29dac90a13d8ec8fe53c6bb33fe10af6f2fe">Same</a>, 
<a class="el" href="namespacearm__compute_1_1utils.xhtml#a52b975f9f11b484d21969f9a8fefb29dae1ba155a9f2e8c3be94020eef32a0301">Manual</a>
 }</td></tr>
<tr class="separator:a52b975f9f11b484d21969f9a8fefb29d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3154c405c975616503bac23f51b78fc0"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils.xhtml#a3154c405c975616503bac23f51b78fc0">ImageType</a> { <a class="el" href="namespacearm__compute_1_1utils.xhtml#a3154c405c975616503bac23f51b78fc0a696b031073e74bf2cb98e5ef201d4aa3">UNKNOWN</a>, 
<a class="el" href="namespacearm__compute_1_1utils.xhtml#a3154c405c975616503bac23f51b78fc0a4bb1ebdeeb70354069bc644b9c94ee5f">PPM</a>, 
<a class="el" href="namespacearm__compute_1_1utils.xhtml#a3154c405c975616503bac23f51b78fc0a907e06a16862d82ca6907a28a68d0ad6">JPEG</a>
 }<tr class="memdesc:a3154c405c975616503bac23f51b78fc0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Supported image types.  <a href="namespacearm__compute_1_1utils.xhtml#a3154c405c975616503bac23f51b78fc0">More...</a><br /></td></tr>
</td></tr>
<tr class="separator:a3154c405c975616503bac23f51b78fc0"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a7056f627c2ee3c1f2d1dabd9531fae69"><td class="memTemplParams" colspan="2">template&lt;typename E , typename SE &gt; </td></tr>
<tr class="memitem:a7056f627c2ee3c1f2d1dabd9531fae69"><td class="memTemplItemLeft" align="right" valign="top">constexpr E&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils.xhtml#a7056f627c2ee3c1f2d1dabd9531fae69">as_cenum</a> (const SE v) noexcept</td></tr>
<tr class="memdesc:a7056f627c2ee3c1f2d1dabd9531fae69"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a strongly typed enum to an old plain c enum.  <a href="#a7056f627c2ee3c1f2d1dabd9531fae69">More...</a><br /></td></tr>
<tr class="separator:a7056f627c2ee3c1f2d1dabd9531fae69"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a91c9916e40314d980761531998244811"><td class="memTemplParams" colspan="2">template&lt;typename SE , typename E &gt; </td></tr>
<tr class="memitem:a91c9916e40314d980761531998244811"><td class="memTemplItemLeft" align="right" valign="top">constexpr SE&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils.xhtml#a91c9916e40314d980761531998244811">as_enum</a> (const E val) noexcept</td></tr>
<tr class="memdesc:a91c9916e40314d980761531998244811"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert plain old enumeration to a strongly typed enum.  <a href="#a91c9916e40314d980761531998244811">More...</a><br /></td></tr>
<tr class="separator:a91c9916e40314d980761531998244811"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab394a46b54a9f73b47493691f0a0ab9f"><td class="memTemplParams" colspan="2">template&lt;typename E &gt; </td></tr>
<tr class="memitem:ab394a46b54a9f73b47493691f0a0ab9f"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils.xhtml#ab394a46b54a9f73b47493691f0a0ab9f">is_in</a> (E check, std::initializer_list&lt; E &gt; list)</td></tr>
<tr class="memdesc:ab394a46b54a9f73b47493691f0a0ab9f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if the given value is in the given enum value list.  <a href="#ab394a46b54a9f73b47493691f0a0ab9f">More...</a><br /></td></tr>
<tr class="separator:ab394a46b54a9f73b47493691f0a0ab9f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a192c7cf59b34ae925eb1c8c315a06225"><td class="memItemLeft" align="right" valign="top">const std::string &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils.xhtml#a192c7cf59b34ae925eb1c8c315a06225">string_from_scheduler_type</a> (<a class="el" href="classarm__compute_1_1_scheduler.xhtml#a1d1cfd8ffb84e947f82999c682b666a7">Scheduler::Type</a> t)</td></tr>
<tr class="memdesc:a192c7cf59b34ae925eb1c8c315a06225"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a <a class="el" href="classarm__compute_1_1_scheduler.xhtml#a1d1cfd8ffb84e947f82999c682b666a7" title="Scheduler type. ">Scheduler::Type</a> into a string.  <a href="#a192c7cf59b34ae925eb1c8c315a06225">More...</a><br /></td></tr>
<tr class="separator:a192c7cf59b34ae925eb1c8c315a06225"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aad377315df05925a2c720f50a20917ba"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils.xhtml#aad377315df05925a2c720f50a20917ba">schedule_kernel_on_ctx</a> (<a class="el" href="classarm__compute_1_1_i_runtime_context.xhtml">IRuntimeContext</a> *ctx, <a class="el" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml">ICPPKernel</a> *kernel, const <a class="el" href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml">IScheduler::Hints</a> &amp;hints)</td></tr>
<tr class="memdesc:aad377315df05925a2c720f50a20917ba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Schedules a kernel using the context if not nullptr else uses the legacy scheduling flow.  <a href="#aad377315df05925a2c720f50a20917ba">More...</a><br /></td></tr>
<tr class="separator:aad377315df05925a2c720f50a20917ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af07b27af58f76f71f59dced337f285b8"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils.xhtml#af07b27af58f76f71f59dced337f285b8">calculate_number_of_stages_only_x_axis</a> (size_t input_x_dimension, unsigned int axis)</td></tr>
<tr class="memdesc:af07b27af58f76f71f59dced337f285b8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate number of stages for parallel implementations.  <a href="#af07b27af58f76f71f59dced337f285b8">More...</a><br /></td></tr>
<tr class="separator:af07b27af58f76f71f59dced337f285b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8249d4be92399495c0d3c9a5004aeb40"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils.xhtml#a8249d4be92399495c0d3c9a5004aeb40">run_example</a> (int argc, char **argv, std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1utils_1_1_example.xhtml">Example</a> &gt; example)</td></tr>
<tr class="memdesc:a8249d4be92399495c0d3c9a5004aeb40"><td class="mdescLeft">&#160;</td><td class="mdescRight">Run an example and handle the potential exceptions it throws.  <a href="#a8249d4be92399495c0d3c9a5004aeb40">More...</a><br /></td></tr>
<tr class="separator:a8249d4be92399495c0d3c9a5004aeb40"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a96696b615d35757e96ea6310297f8ba5"><td class="memItemLeft" align="right" valign="top">inline ::std::istream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils.xhtml#a96696b615d35757e96ea6310297f8ba5">operator&gt;&gt;</a> (::std::istream &amp;stream, <a class="el" href="namespacearm__compute_1_1utils.xhtml#a52b975f9f11b484d21969f9a8fefb29d">ConvolutionPaddingMode</a> &amp;Mode)</td></tr>
<tr class="memdesc:a96696b615d35757e96ea6310297f8ba5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stream Input operator for the ConvolutionPaddingMode type.  <a href="#a96696b615d35757e96ea6310297f8ba5">More...</a><br /></td></tr>
<tr class="separator:a96696b615d35757e96ea6310297f8ba5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaea51d53fd1d57be4dde4e38874d9019"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils.xhtml#aaea51d53fd1d57be4dde4e38874d9019">operator&lt;&lt;</a> (::std::ostream &amp;os, <a class="el" href="namespacearm__compute_1_1utils.xhtml#a52b975f9f11b484d21969f9a8fefb29d">ConvolutionPaddingMode</a> Mode)</td></tr>
<tr class="memdesc:aaea51d53fd1d57be4dde4e38874d9019"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the ConvolutionPaddingMode type.  <a href="#aaea51d53fd1d57be4dde4e38874d9019">More...</a><br /></td></tr>
<tr class="separator:aaea51d53fd1d57be4dde4e38874d9019"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab74bfb3856ceeda7e8fe2536bdf77ef0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils.xhtml#ab74bfb3856ceeda7e8fe2536bdf77ef0">calculate_convolution_padding</a> (<a class="el" href="structarm__compute_1_1utils_1_1_example_params.xhtml">ExampleParams</a> params)</td></tr>
<tr class="memdesc:ab74bfb3856ceeda7e8fe2536bdf77ef0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate stride information.  <a href="#ab74bfb3856ceeda7e8fe2536bdf77ef0">More...</a><br /></td></tr>
<tr class="separator:ab74bfb3856ceeda7e8fe2536bdf77ef0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2593e1f13f425f627658900657f73dc3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils.xhtml#a2593e1f13f425f627658900657f73dc3">consume_common_graph_parameters</a> (<a class="el" href="classarm__compute_1_1utils_1_1_common_graph_validate_options.xhtml">CommonGraphValidateOptions</a> &amp;options, <a class="el" href="structarm__compute_1_1utils_1_1_common_params.xhtml">CommonParams</a> &amp;common_params)</td></tr>
<tr class="memdesc:a2593e1f13f425f627658900657f73dc3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Consumes the consume_common_graph_parameters graph options and creates a structure containing any information.  <a href="#a2593e1f13f425f627658900657f73dc3">More...</a><br /></td></tr>
<tr class="separator:a2593e1f13f425f627658900657f73dc3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac71977d367133149be76363b0915c3af"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1graph_1_1_i_tensor_accessor.xhtml">graph::ITensorAccessor</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils.xhtml#ac71977d367133149be76363b0915c3af">get_accessor</a> (const <a class="el" href="structarm__compute_1_1utils_1_1_tensor_params.xhtml">TensorParams</a> &amp;<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> lower, <a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> upper, const std::random_device::result_type seed=0)</td></tr>
<tr class="memdesc:ac71977d367133149be76363b0915c3af"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generates appropriate accessor according to the specified graph parameters.  <a href="#ac71977d367133149be76363b0915c3af">More...</a><br /></td></tr>
<tr class="separator:ac71977d367133149be76363b0915c3af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae55aa860d1d119bc2a2812ef0391b9ae"><td class="memTemplParams" colspan="2">template&lt;template&lt; typename D &gt; class VerifyAccessorT&gt; </td></tr>
<tr class="memitem:ae55aa860d1d119bc2a2812ef0391b9ae"><td class="memTemplItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1graph_1_1_i_tensor_accessor.xhtml">graph::ITensorAccessor</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils.xhtml#ae55aa860d1d119bc2a2812ef0391b9ae">get_verify_accessor</a> (<a class="el" href="structarm__compute_1_1utils_1_1_example_params.xhtml">ExampleParams</a> params)</td></tr>
<tr class="memdesc:ae55aa860d1d119bc2a2812ef0391b9ae"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generates appropriate convolution verify accessor.  <a href="#ae55aa860d1d119bc2a2812ef0391b9ae">More...</a><br /></td></tr>
<tr class="separator:ae55aa860d1d119bc2a2812ef0391b9ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afdb36468694a529fa7c5389b278aa14b"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils.xhtml#afdb36468694a529fa7c5389b278aa14b">run_example</a> (int argc, char **argv, std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1utils_1_1_validate_example.xhtml">ValidateExample</a> &gt; example)</td></tr>
<tr class="memdesc:afdb36468694a529fa7c5389b278aa14b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Run an example and handle the potential exceptions it throws.  <a href="#afdb36468694a529fa7c5389b278aa14b">More...</a><br /></td></tr>
<tr class="separator:afdb36468694a529fa7c5389b278aa14b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a24e5f40fb2db725a749dd5103ced9760"><td class="memItemLeft" align="right" valign="top">::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils.xhtml#a24e5f40fb2db725a749dd5103ced9760">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="structarm__compute_1_1utils_1_1_common_graph_params.xhtml">CommonGraphParams</a> &amp;common_params)</td></tr>
<tr class="memdesc:a24e5f40fb2db725a749dd5103ced9760"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the <a class="el" href="structarm__compute_1_1utils_1_1_common_graph_params.xhtml" title="Structure holding all the common graph parameters. ">CommonGraphParams</a> type.  <a href="#a24e5f40fb2db725a749dd5103ced9760">More...</a><br /></td></tr>
<tr class="separator:a24e5f40fb2db725a749dd5103ced9760"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a04125f2e4cecaffad8724cee7e1c19b0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structarm__compute_1_1utils_1_1_common_graph_params.xhtml">CommonGraphParams</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils.xhtml#a04125f2e4cecaffad8724cee7e1c19b0">consume_common_graph_parameters</a> (<a class="el" href="classarm__compute_1_1utils_1_1_common_graph_options.xhtml">CommonGraphOptions</a> &amp;options)</td></tr>
<tr class="memdesc:a04125f2e4cecaffad8724cee7e1c19b0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Consumes the common graph options and creates a structure containing any information.  <a href="#a04125f2e4cecaffad8724cee7e1c19b0">More...</a><br /></td></tr>
<tr class="separator:a04125f2e4cecaffad8724cee7e1c19b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad1b5373f466a3945e1f0ef1c9943c357"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils.xhtml#ad1b5373f466a3945e1f0ef1c9943c357">draw_detection_rectangle</a> (<a class="el" href="classarm__compute_1_1_i_tensor.xhtml">arm_compute::ITensor</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, const <a class="el" href="structarm__compute_1_1_detection_window.xhtml">arm_compute::DetectionWindow</a> &amp;rect, uint8_t r, uint8_t g, uint8_t b)</td></tr>
<tr class="memdesc:ad1b5373f466a3945e1f0ef1c9943c357"><td class="mdescLeft">&#160;</td><td class="mdescRight">Draw a RGB rectangular window for the detected object.  <a href="#ad1b5373f466a3945e1f0ef1c9943c357">More...</a><br /></td></tr>
<tr class="separator:ad1b5373f466a3945e1f0ef1c9943c357"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a779702024b509e6797b2d526d382cf65"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute_1_1utils.xhtml#a3154c405c975616503bac23f51b78fc0">ImageType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils.xhtml#a779702024b509e6797b2d526d382cf65">get_image_type_from_file</a> (const std::string &amp;filename)</td></tr>
<tr class="memdesc:a779702024b509e6797b2d526d382cf65"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets image type given a file.  <a href="#a779702024b509e6797b2d526d382cf65">More...</a><br /></td></tr>
<tr class="separator:a779702024b509e6797b2d526d382cf65"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3aa8f5f1b94f88fdf5b43a53e29379cf"><td class="memItemLeft" align="right" valign="top">std::tuple&lt; unsigned int, unsigned int, int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils.xhtml#a3aa8f5f1b94f88fdf5b43a53e29379cf">parse_ppm_header</a> (std::ifstream &amp;fs)</td></tr>
<tr class="memdesc:a3aa8f5f1b94f88fdf5b43a53e29379cf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parse the ppm header from an input file stream.  <a href="#a3aa8f5f1b94f88fdf5b43a53e29379cf">More...</a><br /></td></tr>
<tr class="separator:a3aa8f5f1b94f88fdf5b43a53e29379cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac936cf76357103ce35d91cdcf75d71cc"><td class="memItemLeft" align="right" valign="top">npy::header_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils.xhtml#ac936cf76357103ce35d91cdcf75d71cc">parse_npy_header</a> (std::ifstream &amp;fs)</td></tr>
<tr class="memdesc:ac936cf76357103ce35d91cdcf75d71cc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parse the npy header from an input file stream.  <a href="#ac936cf76357103ce35d91cdcf75d71cc">More...</a><br /></td></tr>
<tr class="separator:ac936cf76357103ce35d91cdcf75d71cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb7b08e5c044dba650037628089a4e7c"><td class="memItemLeft" align="right" valign="top">uint64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils.xhtml#afb7b08e5c044dba650037628089a4e7c">get_mem_free_from_meminfo</a> ()</td></tr>
<tr class="memdesc:afb7b08e5c044dba650037628089a4e7c"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function returns the amount of memory free reading from /proc/meminfo.  <a href="#afb7b08e5c044dba650037628089a4e7c">More...</a><br /></td></tr>
<tr class="separator:afb7b08e5c044dba650037628089a4e7c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6126fda74b244d4c9a75328a3f436a3"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ac6126fda74b244d4c9a75328a3f436a3"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils.xhtml#ac6126fda74b244d4c9a75328a3f436a3">run_example</a> (int argc, char **argv)</td></tr>
<tr class="separator:ac6126fda74b244d4c9a75328a3f436a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7990fd2b875e2f6d4c1eded54539cb19"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils.xhtml#a7990fd2b875e2f6d4c1eded54539cb19">get_typestring</a> (<a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> data_type)</td></tr>
<tr class="memdesc:a7990fd2b875e2f6d4c1eded54539cb19"><td class="mdescLeft">&#160;</td><td class="mdescRight">Obtain numpy type string from DataType.  <a href="#a7990fd2b875e2f6d4c1eded54539cb19">More...</a><br /></td></tr>
<tr class="separator:a7990fd2b875e2f6d4c1eded54539cb19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9c3303817ba653b5d1e78efb88d02bcf"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a9c3303817ba653b5d1e78efb88d02bcf"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils.xhtml#a9c3303817ba653b5d1e78efb88d02bcf">map</a> (T &amp;<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, bool blocking)</td></tr>
<tr class="memdesc:a9c3303817ba653b5d1e78efb88d02bcf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Maps a tensor if needed.  <a href="#a9c3303817ba653b5d1e78efb88d02bcf">More...</a><br /></td></tr>
<tr class="separator:a9c3303817ba653b5d1e78efb88d02bcf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4ff2134cb88cb5a27120cddb98b59774"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a4ff2134cb88cb5a27120cddb98b59774"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils.xhtml#a4ff2134cb88cb5a27120cddb98b59774">unmap</a> (T &amp;<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)</td></tr>
<tr class="memdesc:a4ff2134cb88cb5a27120cddb98b59774"><td class="mdescLeft">&#160;</td><td class="mdescRight">Unmaps a tensor if needed.  <a href="#a4ff2134cb88cb5a27120cddb98b59774">More...</a><br /></td></tr>
<tr class="separator:a4ff2134cb88cb5a27120cddb98b59774"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a301d0b7bfd70f73fc1924f4281938d08"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a301d0b7bfd70f73fc1924f4281938d08"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils.xhtml#a301d0b7bfd70f73fc1924f4281938d08">save_to_ppm</a> (T &amp;<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, const std::string &amp;ppm_filename)</td></tr>
<tr class="memdesc:a301d0b7bfd70f73fc1924f4281938d08"><td class="mdescLeft">&#160;</td><td class="mdescRight">Template helper function to save a tensor image to a PPM file.  <a href="#a301d0b7bfd70f73fc1924f4281938d08">More...</a><br /></td></tr>
<tr class="separator:a301d0b7bfd70f73fc1924f4281938d08"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48c0efb64637ab6e965b32d7c683efe9"><td class="memTemplParams" colspan="2">template&lt;typename T , typename U  = float&gt; </td></tr>
<tr class="memitem:a48c0efb64637ab6e965b32d7c683efe9"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils.xhtml#a48c0efb64637ab6e965b32d7c683efe9">save_to_npy</a> (T &amp;<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, const std::string &amp;npy_filename, bool fortran_order)</td></tr>
<tr class="memdesc:a48c0efb64637ab6e965b32d7c683efe9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Template helper function to save a tensor image to a NPY file.  <a href="#a48c0efb64637ab6e965b32d7c683efe9">More...</a><br /></td></tr>
<tr class="separator:a48c0efb64637ab6e965b32d7c683efe9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af214346f90d640ac468dd90fa2a275cc"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:af214346f90d640ac468dd90fa2a275cc"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils.xhtml#af214346f90d640ac468dd90fa2a275cc">load_trained_data</a> (T &amp;<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, const std::string &amp;filename)</td></tr>
<tr class="memdesc:af214346f90d640ac468dd90fa2a275cc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load the tensor with pre-trained data from a binary file.  <a href="#af214346f90d640ac468dd90fa2a275cc">More...</a><br /></td></tr>
<tr class="separator:af214346f90d640ac468dd90fa2a275cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0a68ee1366ba27dd1e493dde02e57a59"><td class="memTemplParams" colspan="2">template&lt;typename T , typename TensorType &gt; </td></tr>
<tr class="memitem:a0a68ee1366ba27dd1e493dde02e57a59"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils.xhtml#a0a68ee1366ba27dd1e493dde02e57a59">fill_tensor_value</a> (<a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TensorType</a> &amp;<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, T value)</td></tr>
<tr class="separator:a0a68ee1366ba27dd1e493dde02e57a59"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a47cbdedef5ff798e3946a011bf58a0cb"><td class="memTemplParams" colspan="2">template&lt;typename T , typename TensorType &gt; </td></tr>
<tr class="memitem:a47cbdedef5ff798e3946a011bf58a0cb"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils.xhtml#a47cbdedef5ff798e3946a011bf58a0cb">fill_tensor_zero</a> (<a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TensorType</a> &amp;<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)</td></tr>
<tr class="separator:a47cbdedef5ff798e3946a011bf58a0cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abf4bc85504168df2b48d84712be2ceaa"><td class="memTemplParams" colspan="2">template&lt;typename T , typename TensorType &gt; </td></tr>
<tr class="memitem:abf4bc85504168df2b48d84712be2ceaa"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils.xhtml#abf4bc85504168df2b48d84712be2ceaa">fill_tensor_vector</a> (<a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TensorType</a> &amp;<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, std::vector&lt; T &gt; vec)</td></tr>
<tr class="separator:abf4bc85504168df2b48d84712be2ceaa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a98f6963b2f39dfd94bbec58601b60a99"><td class="memTemplParams" colspan="2">template&lt;typename T , typename TensorType &gt; </td></tr>
<tr class="memitem:a98f6963b2f39dfd94bbec58601b60a99"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils.xhtml#a98f6963b2f39dfd94bbec58601b60a99">fill_random_tensor</a> (<a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TensorType</a> &amp;<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, std::random_device::result_type seed, T lower_bound=std::numeric_limits&lt; T &gt;::lowest(), T upper_bound=std::numeric_limits&lt; T &gt;::max())</td></tr>
<tr class="separator:a98f6963b2f39dfd94bbec58601b60a99"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4dab021b1b964cbd23b93173b84c0e49"><td class="memTemplParams" colspan="2">template&lt;typename T , typename TensorType &gt; </td></tr>
<tr class="memitem:a4dab021b1b964cbd23b93173b84c0e49"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils.xhtml#a4dab021b1b964cbd23b93173b84c0e49">fill_random_tensor</a> (<a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TensorType</a> &amp;<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, T lower_bound=std::numeric_limits&lt; T &gt;::lowest(), T upper_bound=std::numeric_limits&lt; T &gt;::max())</td></tr>
<tr class="separator:a4dab021b1b964cbd23b93173b84c0e49"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ff90da00700526d89a0ee29f85fd804"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a3ff90da00700526d89a0ee29f85fd804"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils.xhtml#a3ff90da00700526d89a0ee29f85fd804">init_sgemm_output</a> (T &amp;dst, T &amp;src0, T &amp;src1, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">arm_compute::DataType</a> <a class="el" href="_n_e_select_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>)</td></tr>
<tr class="separator:a3ff90da00700526d89a0ee29f85fd804"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4894358ea9a576be19615608a6b8b152"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a4894358ea9a576be19615608a6b8b152"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils.xhtml#a4894358ea9a576be19615608a6b8b152">compare_tensor</a> (<a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;tensor1, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;tensor2, T tolerance)</td></tr>
<tr class="memdesc:a4894358ea9a576be19615608a6b8b152"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compare two tensors.  <a href="#a4894358ea9a576be19615608a6b8b152">More...</a><br /></td></tr>
<tr class="separator:a4894358ea9a576be19615608a6b8b152"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:a813cd3ddc61ff2066016e023927cced0"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1utils.xhtml#a813cd3ddc61ff2066016e023927cced0">_allowed_values</a></td></tr>
<tr class="separator:a813cd3ddc61ff2066016e023927cced0"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Enumeration Type Documentation</h2>
<a id="a52b975f9f11b484d21969f9a8fefb29d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a52b975f9f11b484d21969f9a8fefb29d">&#9670;&nbsp;</a></span>ConvolutionPaddingMode</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute_1_1utils.xhtml#a52b975f9f11b484d21969f9a8fefb29d">ConvolutionPaddingMode</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a52b975f9f11b484d21969f9a8fefb29da3ac705f2acd51a4613f9188c05c91d0d"></a>Valid&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a52b975f9f11b484d21969f9a8fefb29dac90a13d8ec8fe53c6bb33fe10af6f2fe"></a>Same&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a52b975f9f11b484d21969f9a8fefb29dae1ba155a9f2e8c3be94020eef32a0301"></a>Manual&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="graph__validate__utils_8h_source.xhtml#l00038">38</a> of file <a class="el" href="graph__validate__utils_8h_source.xhtml">graph_validate_utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <a class="code" href="namespacearm__compute_1_1utils.xhtml#a52b975f9f11b484d21969f9a8fefb29da3ac705f2acd51a4613f9188c05c91d0d">Valid</a>,</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <a class="code" href="namespacearm__compute_1_1utils.xhtml#a52b975f9f11b484d21969f9a8fefb29dac90a13d8ec8fe53c6bb33fe10af6f2fe">Same</a>,</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <a class="code" href="namespacearm__compute_1_1utils.xhtml#a52b975f9f11b484d21969f9a8fefb29dae1ba155a9f2e8c3be94020eef32a0301">Manual</a></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;};</div><div class="ttc" id="namespacearm__compute_1_1utils_xhtml_a52b975f9f11b484d21969f9a8fefb29dac90a13d8ec8fe53c6bb33fe10af6f2fe"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a52b975f9f11b484d21969f9a8fefb29dac90a13d8ec8fe53c6bb33fe10af6f2fe">arm_compute::utils::ConvolutionPaddingMode::Same</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_xhtml_a52b975f9f11b484d21969f9a8fefb29dae1ba155a9f2e8c3be94020eef32a0301"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a52b975f9f11b484d21969f9a8fefb29dae1ba155a9f2e8c3be94020eef32a0301">arm_compute::utils::ConvolutionPaddingMode::Manual</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_xhtml_a52b975f9f11b484d21969f9a8fefb29da3ac705f2acd51a4613f9188c05c91d0d"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a52b975f9f11b484d21969f9a8fefb29da3ac705f2acd51a4613f9188c05c91d0d">arm_compute::utils::ConvolutionPaddingMode::Valid</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3154c405c975616503bac23f51b78fc0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3154c405c975616503bac23f51b78fc0">&#9670;&nbsp;</a></span>ImageType</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute_1_1utils.xhtml#a3154c405c975616503bac23f51b78fc0">ImageType</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Supported image types. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a3154c405c975616503bac23f51b78fc0a696b031073e74bf2cb98e5ef201d4aa3"></a>UNKNOWN&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a3154c405c975616503bac23f51b78fc0a4bb1ebdeeb70354069bc644b9c94ee5f"></a>PPM&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a3154c405c975616503bac23f51b78fc0a907e06a16862d82ca6907a28a68d0ad6"></a>JPEG&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="utils_2_utils_8h_source.xhtml#l00063">63</a> of file <a class="el" href="utils_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;{</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c">UNKNOWN</a>,</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <a class="code" href="namespacearm__compute_1_1utils.xhtml#a3154c405c975616503bac23f51b78fc0a4bb1ebdeeb70354069bc644b9c94ee5f">PPM</a>,</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <a class="code" href="namespacearm__compute_1_1utils.xhtml#a3154c405c975616503bac23f51b78fc0a907e06a16862d82ca6907a28a68d0ad6">JPEG</a></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;};</div><div class="ttc" id="namespacearm__compute_xhtml_a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c"><div class="ttname"><a href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c">arm_compute::UNKNOWN</a></div><div class="ttdoc">Unknown CL kernel type. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_types_8h_source.xhtml#l00082">CLTypes.h:82</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_xhtml_a3154c405c975616503bac23f51b78fc0a4bb1ebdeeb70354069bc644b9c94ee5f"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a3154c405c975616503bac23f51b78fc0a4bb1ebdeeb70354069bc644b9c94ee5f">arm_compute::utils::ImageType::PPM</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_xhtml_a3154c405c975616503bac23f51b78fc0a907e06a16862d82ca6907a28a68d0ad6"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a3154c405c975616503bac23f51b78fc0a907e06a16862d82ca6907a28a68d0ad6">arm_compute::utils::ImageType::JPEG</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="a7056f627c2ee3c1f2d1dabd9531fae69"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7056f627c2ee3c1f2d1dabd9531fae69">&#9670;&nbsp;</a></span>as_cenum()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr E arm_compute::utils::as_cenum </td>
          <td>(</td>
          <td class="paramtype">const SE&#160;</td>
          <td class="paramname"><em>v</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert a strongly typed enum to an old plain c enum. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">E</td><td>Plain old C enum </td></tr>
    <tr><td class="paramname">SE</td><td>Strongly typed resulting enum</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">v</td><td>Value to convert</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A corresponding plain old C enumeration </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2common_2utils_2_utils_8h_source.xhtml#l00043">43</a> of file <a class="el" href="src_2common_2utils_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;{</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>E<span class="keyword">&gt;</span>(<span class="keyword">static_cast&lt;</span>std::underlying_type_t&lt;SE&gt;<span class="keyword">&gt;</span>(v));</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a91c9916e40314d980761531998244811"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a91c9916e40314d980761531998244811">&#9670;&nbsp;</a></span>as_enum()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr SE arm_compute::utils::as_enum </td>
          <td>(</td>
          <td class="paramtype">const E&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert plain old enumeration to a strongly typed enum. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">SE</td><td>Strongly typed resulting enum </td></tr>
    <tr><td class="paramname">E</td><td>Plain old C enum</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>Value to convert</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A corresponding strongly typed enumeration </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2common_2utils_2_utils_8h_source.xhtml#l00058">58</a> of file <a class="el" href="src_2common_2utils_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;{</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>SE<span class="keyword">&gt;</span>(val);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ab74bfb3856ceeda7e8fe2536bdf77ef0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab74bfb3856ceeda7e8fe2536bdf77ef0">&#9670;&nbsp;</a></span>calculate_convolution_padding()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> arm_compute::utils::calculate_convolution_padding </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1utils_1_1_example_params.xhtml">ExampleParams</a>&#160;</td>
          <td class="paramname"><em>params</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate stride information. </p>
<p>Depending on the selected padding mode create the desired <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml" title="Padding and stride information class. ">PadStrideInfo</a></p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>Convolution parameters supplied by the user.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml" title="Padding and stride information class. ">PadStrideInfo</a> with the correct padding mode. </dd></dl>

<p class="definition">Definition at line <a class="el" href="graph__validate__utils_8h_source.xhtml#l00194">194</a> of file <a class="el" href="graph__validate__utils_8h_source.xhtml">graph_validate_utils.h</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00352">ARM_COMPUTE_ERROR</a>, <a class="el" href="src_2core_2_utils_8cpp_source.xhtml#l00367">arm_compute::calculate_same_pad()</a>, <a class="el" href="graph__validate__utils_8h_source.xhtml#l00180">ExampleParams::convolution</a>, <a class="el" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">arm_compute::FLOOR</a>, <a class="el" href="graph__validate__utils_8h_source.xhtml#l00109">TensorParams::height</a>, <a class="el" href="graph__validate__utils_8h_source.xhtml#l00138">CommonParams::input</a>, <a class="el" href="namespacearm__compute_1_1utils.xhtml#a52b975f9f11b484d21969f9a8fefb29dae1ba155a9f2e8c3be94020eef32a0301">Manual</a>, <a class="el" href="graph__validate__utils_8h_source.xhtml#l00152">ConvolutionParams::padding_bottom</a>, <a class="el" href="graph__validate__utils_8h_source.xhtml#l00153">ConvolutionParams::padding_left</a>, <a class="el" href="graph__validate__utils_8h_source.xhtml#l00157">ConvolutionParams::padding_mode</a>, <a class="el" href="graph__validate__utils_8h_source.xhtml#l00154">ConvolutionParams::padding_right</a>, <a class="el" href="graph__validate__utils_8h_source.xhtml#l00155">ConvolutionParams::padding_stride_x</a>, <a class="el" href="graph__validate__utils_8h_source.xhtml#l00156">ConvolutionParams::padding_stride_y</a>, <a class="el" href="graph__validate__utils_8h_source.xhtml#l00151">ConvolutionParams::padding_top</a>, <a class="el" href="namespacearm__compute_1_1utils.xhtml#a52b975f9f11b484d21969f9a8fefb29dac90a13d8ec8fe53c6bb33fe10af6f2fe">Same</a>, <a class="el" href="namespacearm__compute_1_1utils.xhtml#a52b975f9f11b484d21969f9a8fefb29da3ac705f2acd51a4613f9188c05c91d0d">Valid</a>, <a class="el" href="graph__validate__utils_8h_source.xhtml#l00139">CommonParams::weights</a>, and <a class="el" href="graph__validate__utils_8h_source.xhtml#l00108">TensorParams::width</a>.</p>
<div class="fragment"><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;{</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="keywordflow">switch</span>(params.convolution.padding_mode)</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    {</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        <span class="keywordflow">case</span> ConvolutionPaddingMode::Manual:</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        {</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            <span class="keywordflow">return</span> PadStrideInfo(params.convolution.padding_stride_x, params.convolution.padding_stride_y, params.convolution.padding_left, params.convolution.padding_right, params.convolution.padding_top,</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                                 params.convolution.padding_bottom, DimensionRoundingType::FLOOR);</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        }</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        <span class="keywordflow">case</span> ConvolutionPaddingMode::Valid:</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        {</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            <span class="keywordflow">return</span> PadStrideInfo();</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        }</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        <span class="keywordflow">case</span> ConvolutionPaddingMode::Same:</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        {</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#aa6d4f0b9fedd979c5b768f9b34fda9f6">arm_compute::calculate_same_pad</a>(TensorShape(params.input.width, params.input.height), TensorShape(params.weights.width, params.weights.height),</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                                                   PadStrideInfo(params.convolution.padding_stride_x,</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                                                                 params.convolution.padding_stride_y));</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        }</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT SUPPORTED!&quot;</span>);</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    }</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_aa6d4f0b9fedd979c5b768f9b34fda9f6"><div class="ttname"><a href="namespacearm__compute.xhtml#aa6d4f0b9fedd979c5b768f9b34fda9f6">arm_compute::calculate_same_pad</a></div><div class="ttdeci">PadStrideInfo calculate_same_pad(TensorShape input_shape, TensorShape weights_shape, PadStrideInfo conv_info, DataLayout data_layout=DataLayout::NCHW, const Size2D &amp;dilation=Size2D(1u, 1u), const DimensionRoundingType &amp;rounding_type=DimensionRoundingType::FLOOR)</div><div class="ttdoc">Calculate padding requirements in case of SAME padding. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_utils_8cpp_source.xhtml#l00367">Utils.cpp:367</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af07b27af58f76f71f59dced337f285b8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af07b27af58f76f71f59dced337f285b8">&#9670;&nbsp;</a></span>calculate_number_of_stages_only_x_axis()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int calculate_number_of_stages_only_x_axis </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>input_x_dimension</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>axis</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate number of stages for parallel implementations. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input_x_dimension</td><td>input tensor x dimension </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">axis</td><td>axis to be used </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="src_2runtime_2_utils_8cpp_source.xhtml#l00068">68</a> of file <a class="el" href="src_2runtime_2_utils_8cpp_source.xhtml">Utils.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_arg_min_max_layer_8cpp_source.xhtml#l00121">CLArgMinMaxLayer::configure()</a>, and <a class="el" href="_c_l_arg_min_max_layer_8cpp_source.xhtml#l00048">CLArgMinMaxLayer::validate()</a>.</p>
<div class="fragment"><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;{</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="comment">// We need only 1 stage for all axis except x-axis</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keywordflow">if</span>(axis != 0)</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    {</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="keywordflow">return</span> 1;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    }</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="comment">// Calculate number of WGs. 16 elements per thread, 8 threads per WG</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> num_of_wg = <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(ceil(input_x_dimension / 128.f));</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="comment">// Calculate number of stages. First stage performs op and the rest reduction sum</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="comment">// depending on the size of the input. Last stage should have only 1 WG.</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_of_stages = num_of_wg / 128 + 2;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordflow">return</span> num_of_stages;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a4894358ea9a576be19615608a6b8b152"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4894358ea9a576be19615608a6b8b152">&#9670;&nbsp;</a></span>compare_tensor()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::utils::compare_tensor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>tolerance</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Compare two tensors. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor1</td><td>First tensor to be compared. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor2</td><td>Second tensor to be compared. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tolerance</td><td>Tolerance used for the comparison.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The number of mismatches </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_utils_8h_source.xhtml#l00786">786</a> of file <a class="el" href="utils_2_utils_8h_source.xhtml">Utils.h</a>.</p>

<p class="reference">References <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00539">ARM_COMPUTE_ERROR_ON_MISMATCHING_DATA_TYPES</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00437">ARM_COMPUTE_ERROR_ON_MISMATCHING_SHAPES</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00077">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00212">map()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00149">Iterator::ptr()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00223">unmap()</a>, and <a class="el" href="_window_8inl_source.xhtml#l00276">Window::use_tensor_dimensions()</a>.</p>
<div class="fragment"><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;{</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a5befbfaf6bc224eabc58b5e88b1de6d1">ARM_COMPUTE_ERROR_ON_MISMATCHING_DATA_TYPES</a>(&amp;tensor1, &amp;tensor2);</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#aafce5e9928fac427dcd29d960bcf2ae3">ARM_COMPUTE_ERROR_ON_MISMATCHING_SHAPES</a>(&amp;tensor1, &amp;tensor2);</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;    <span class="keywordtype">int</span>    num_mismatches = 0;</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;    Window window;</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;    window.use_tensor_dimensions(tensor1.info()-&gt;tensor_shape());</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;    <a class="code" href="namespacearm__compute_1_1utils.xhtml#a9c3303817ba653b5d1e78efb88d02bcf">map</a>(tensor1, <span class="keyword">true</span>);</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;    <a class="code" href="namespacearm__compute_1_1utils.xhtml#a9c3303817ba653b5d1e78efb88d02bcf">map</a>(tensor2, <span class="keyword">true</span>);</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;    Iterator itensor1(&amp;tensor1, window);</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;    Iterator itensor2(&amp;tensor2, window);</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;    {</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;        <span class="keywordflow">if</span>(std::abs(*reinterpret_cast&lt;T *&gt;(itensor1.ptr()) - *reinterpret_cast&lt;T *&gt;(itensor2.ptr())) &gt; tolerance)</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;        {</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;            ++num_mismatches;</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;        }</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;    },</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;    itensor1, itensor2);</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;    <a class="code" href="namespacearm__compute_1_1utils.xhtml#a4ff2134cb88cb5a27120cddb98b59774">unmap</a>(itensor1);</div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;    <a class="code" href="namespacearm__compute_1_1utils.xhtml#a4ff2134cb88cb5a27120cddb98b59774">unmap</a>(itensor2);</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;    <span class="keywordflow">return</span> num_mismatches;</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1utils_xhtml_a4ff2134cb88cb5a27120cddb98b59774"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a4ff2134cb88cb5a27120cddb98b59774">arm_compute::utils::unmap</a></div><div class="ttdeci">void unmap(T &amp;tensor)</div><div class="ttdoc">Unmaps a tensor if needed. </div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00223">Utils.h:223</a></div></div>
<div class="ttc" id="arm__compute_2core_2_validate_8h_xhtml_a5befbfaf6bc224eabc58b5e88b1de6d1"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a5befbfaf6bc224eabc58b5e88b1de6d1">ARM_COMPUTE_ERROR_ON_MISMATCHING_DATA_TYPES</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MISMATCHING_DATA_TYPES(...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00539">Validate.h:539</a></div></div>
<div class="ttc" id="arm__compute_2core_2_validate_8h_xhtml_aafce5e9928fac427dcd29d960bcf2ae3"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#aafce5e9928fac427dcd29d960bcf2ae3">ARM_COMPUTE_ERROR_ON_MISMATCHING_SHAPES</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MISMATCHING_SHAPES(...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00437">Validate.h:437</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_xhtml_a9c3303817ba653b5d1e78efb88d02bcf"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a9c3303817ba653b5d1e78efb88d02bcf">arm_compute::utils::map</a></div><div class="ttdeci">void map(T &amp;tensor, bool blocking)</div><div class="ttdoc">Maps a tensor if needed. </div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00212">Utils.h:212</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5002bf7ec46d52971f9526e94172cfee"><div class="ttname"><a href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;... iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00077">Helpers.inl:77</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a04125f2e4cecaffad8724cee7e1c19b0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a04125f2e4cecaffad8724cee7e1c19b0">&#9670;&nbsp;</a></span>consume_common_graph_parameters() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structarm__compute_1_1utils_1_1_common_graph_params.xhtml">CommonGraphParams</a> consume_common_graph_parameters </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1utils_1_1_common_graph_options.xhtml">CommonGraphOptions</a> &amp;&#160;</td>
          <td class="paramname"><em>options</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Consumes the common graph options and creates a structure containing any information. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">options</td><td>Options to consume</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Structure containing the common graph parameters </dd></dl>

<p class="definition">Definition at line <a class="el" href="_common_graph_options_8cpp_source.xhtml#l00194">194</a> of file <a class="el" href="_common_graph_options_8cpp_source.xhtml">CommonGraphOptions.cpp</a>.</p>

<p class="reference">References <a class="el" href="_common_graph_options_8h_source.xhtml#l00155">CommonGraphOptions::batches</a>, <a class="el" href="_common_graph_options_8h_source.xhtml#l00158">CommonGraphOptions::data_layout</a>, <a class="el" href="_common_graph_options_8h_source.xhtml#l00163">CommonGraphOptions::data_path</a>, <a class="el" href="_common_graph_options_8h_source.xhtml#l00157">CommonGraphOptions::data_type</a>, <a class="el" href="_common_graph_options_8h_source.xhtml#l00160">CommonGraphOptions::enable_cl_cache</a>, <a class="el" href="_common_graph_options_8h_source.xhtml#l00159">CommonGraphOptions::enable_tuner</a>, <a class="el" href="_common_graph_options_8h_source.xhtml#l00162">CommonGraphOptions::fast_math_hint</a>, <a class="el" href="_common_graph_options_8h_source.xhtml#l00095">CommonGraphParams::help</a>, <a class="el" href="_common_graph_options_8h_source.xhtml#l00153">CommonGraphOptions::help</a>, <a class="el" href="_common_graph_options_8h_source.xhtml#l00164">CommonGraphOptions::image</a>, <a class="el" href="_option_8h_source.xhtml#l00135">Option::is_set()</a>, <a class="el" href="_common_graph_options_8h_source.xhtml#l00165">CommonGraphOptions::labels</a>, <a class="el" href="_common_graph_options_8h_source.xhtml#l00170">CommonGraphOptions::mlgo_file</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35dacaf162e9233294cadf62d2a71a14ca09">arm_compute::graph::NEON</a>, <a class="el" href="_common_graph_options_8h_source.xhtml#l00156">CommonGraphOptions::target</a>, <a class="el" href="_common_graph_options_8h_source.xhtml#l00154">CommonGraphOptions::threads</a>, <a class="el" href="_common_graph_options_8h_source.xhtml#l00169">CommonGraphOptions::tuner_file</a>, <a class="el" href="_common_graph_options_8h_source.xhtml#l00161">CommonGraphOptions::tuner_mode</a>, <a class="el" href="_common_graph_options_8h_source.xhtml#l00166">CommonGraphOptions::validation_file</a>, <a class="el" href="_common_graph_options_8h_source.xhtml#l00167">CommonGraphOptions::validation_path</a>, <a class="el" href="_common_graph_options_8h_source.xhtml#l00168">CommonGraphOptions::validation_range</a>, <a class="el" href="classarm__compute_1_1utils_1_1_enum_option.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">EnumOption&lt; T &gt;::value()</a>, and <a class="el" href="_simple_option_8h_source.xhtml#l00112">SimpleOption&lt; T &gt;::value()</a>.</p>
<div class="fragment"><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;{</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11">FastMathHint</a> fast_math_hint_value = options.fast_math_hint-&gt;value() ? FastMathHint::Enabled : FastMathHint::Disabled;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="keyword">auto</span>         validation_range     = parse_validation_range(options.validation_range-&gt;value());</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    CommonGraphParams common_params;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    common_params.help      = options.help-&gt;is_set() ? options.help-&gt;value() : <span class="keyword">false</span>;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    common_params.threads   = options.threads-&gt;value();</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    common_params.batches   = options.batches-&gt;value();</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    common_params.target    = options.target-&gt;value();</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    common_params.data_type = options.data_type-&gt;value();</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="keywordflow">if</span>(options.data_layout-&gt;is_set())</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    {</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        common_params.data_layout = options.data_layout-&gt;value();</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    }</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    common_params.enable_tuner           = options.enable_tuner-&gt;is_set() ? options.enable_tuner-&gt;value() : <span class="keyword">false</span>;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    common_params.enable_cl_cache        = common_params.target == <a class="code" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35dacaf162e9233294cadf62d2a71a14ca09">arm_compute::graph::Target::NEON</a> ? false : (options.enable_cl_cache-&gt;is_set() ? options.enable_cl_cache-&gt;value() : <span class="keyword">true</span>);</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    common_params.tuner_mode             = options.tuner_mode-&gt;value();</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    common_params.fast_math_hint         = options.fast_math_hint-&gt;is_set() ? fast_math_hint_value : FastMathHint::Disabled;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    common_params.data_path              = options.data_path-&gt;value();</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    common_params.image                  = options.image-&gt;value();</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    common_params.labels                 = options.labels-&gt;value();</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    common_params.validation_file        = options.validation_file-&gt;value();</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    common_params.validation_path        = options.validation_path-&gt;value();</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    common_params.validation_range_start = validation_range.first;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    common_params.validation_range_end   = validation_range.second;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    common_params.tuner_file             = options.tuner_file-&gt;value();</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    common_params.mlgo_file              = options.mlgo_file-&gt;value();</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="keywordflow">return</span> common_params;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a31488d29805a596498c0234ae392d35dacaf162e9233294cadf62d2a71a14ca09"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35dacaf162e9233294cadf62d2a71a14ca09">arm_compute::graph::Target::NEON</a></div><div class="ttdoc">Arm® Neon™ capable target device. </div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_ac85a46f3ebd3ab09f576a994ac2dce11"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11">arm_compute::graph::FastMathHint</a></div><div class="ttdeci">FastMathHint</div><div class="ttdoc">Enable or disable fast math for Convolution layer. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00143">Types.h:143</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a2593e1f13f425f627658900657f73dc3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2593e1f13f425f627658900657f73dc3">&#9670;&nbsp;</a></span>consume_common_graph_parameters() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::utils::consume_common_graph_parameters </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1utils_1_1_common_graph_validate_options.xhtml">CommonGraphValidateOptions</a> &amp;&#160;</td>
          <td class="paramname"><em>options</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1utils_1_1_common_params.xhtml">CommonParams</a> &amp;&#160;</td>
          <td class="paramname"><em>common_params</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Consumes the consume_common_graph_parameters graph options and creates a structure containing any information. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">options</td><td>Options to consume </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">common_params</td><td>params structure to consume.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>consume_common_graph_parameters structure containing the common graph parameters </dd></dl>

<p class="definition">Definition at line <a class="el" href="graph__validate__utils_8h_source.xhtml#l00315">315</a> of file <a class="el" href="graph__validate__utils_8h_source.xhtml">graph_validate_utils.h</a>.</p>

<p class="reference">References <a class="el" href="graph__validate__utils_8h_source.xhtml#l00121">VerificationParams::absolute_tolerance</a>, <a class="el" href="graph__validate__utils_8h_source.xhtml#l00303">CommonGraphValidateOptions::absolute_tolerance</a>, <a class="el" href="graph__validate__utils_8h_source.xhtml#l00137">CommonParams::common_params</a>, <a class="el" href="graph__validate__utils_8h_source.xhtml#l00129">FrameworkParams::help</a>, <a class="el" href="graph__validate__utils_8h_source.xhtml#l00299">CommonGraphValidateOptions::help</a>, <a class="el" href="_option_8h_source.xhtml#l00135">Option::is_set()</a>, <a class="el" href="graph__validate__utils_8h_source.xhtml#l00122">VerificationParams::relative_tolerance</a>, <a class="el" href="graph__validate__utils_8h_source.xhtml#l00304">CommonGraphValidateOptions::relative_tolerance</a>, <a class="el" href="graph__validate__utils_8h_source.xhtml#l00131">FrameworkParams::target</a>, <a class="el" href="graph__validate__utils_8h_source.xhtml#l00301">CommonGraphValidateOptions::target</a>, <a class="el" href="graph__validate__utils_8h_source.xhtml#l00130">FrameworkParams::threads</a>, <a class="el" href="graph__validate__utils_8h_source.xhtml#l00300">CommonGraphValidateOptions::threads</a>, <a class="el" href="graph__validate__utils_8h_source.xhtml#l00123">VerificationParams::tolerance_number</a>, <a class="el" href="graph__validate__utils_8h_source.xhtml#l00305">CommonGraphValidateOptions::tolerance_number</a>, <a class="el" href="classarm__compute_1_1utils_1_1_enum_option.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">EnumOption&lt; T &gt;::value()</a>, <a class="el" href="_simple_option_8h_source.xhtml#l00112">SimpleOption&lt; T &gt;::value()</a>, and <a class="el" href="graph__validate__utils_8h_source.xhtml#l00142">CommonParams::verification</a>.</p>
<div class="fragment"><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;{</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    common_params.common_params.help    = options.help-&gt;is_set() ? options.help-&gt;value() : <span class="keyword">false</span>;</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    common_params.common_params.threads = options.threads-&gt;value();</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    common_params.common_params.target  = options.target-&gt;value();</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    common_params.verification.absolute_tolerance = options.absolute_tolerance-&gt;value();</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    common_params.verification.relative_tolerance = options.relative_tolerance-&gt;value();</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    common_params.verification.tolerance_number   = options.tolerance_number-&gt;value();</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ad1b5373f466a3945e1f0ef1c9943c357"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad1b5373f466a3945e1f0ef1c9943c357">&#9670;&nbsp;</a></span>draw_detection_rectangle()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void draw_detection_rectangle </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">arm_compute::ITensor</a> *&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_detection_window.xhtml">arm_compute::DetectionWindow</a> &amp;&#160;</td>
          <td class="paramname"><em>rect</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>r</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Draw a RGB rectangular window for the detected object. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">tensor</td><td>Input tensor where the rectangle will be drawn on. Format supported: RGB888 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rect</td><td>Geometry of the rectangular window </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">r</td><td>Red colour to use </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td>Green colour to use </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">b</td><td>Blue colour to use </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="utils_2_utils_8cpp_source.xhtml#l00130">130</a> of file <a class="el" href="utils_2_utils_8cpp_source.xhtml">Utils.cpp</a>.</p>

<p class="reference">References <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00639">ARM_COMPUTE_ERROR_ON_FORMAT_NOT_IN</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#ab988210662dbd3bf32fd563c7dd1bdbf">ITensor::buffer()</a>, <a class="el" href="_window_8h_source.xhtml#l00045">Window::DimY</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00544">DetectionWindow::height</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ac80aea0e8c7c5c812ea8c7221fbfd4b2">ITensorInfo::offset_element_in_bytes()</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0">arm_compute::RGB888</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">ITensorInfo::strides_in_bytes()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00543">DetectionWindow::width</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00541">DetectionWindow::x</a>, and <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00542">DetectionWindow::y</a>.</p>

<p class="reference">Referenced by <a class="el" href="utils_2_utils_8h_source.xhtml#l00107">run_example()</a>.</p>
<div class="fragment"><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;{</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a0d34a8aa07600727e4e5034c7cdad47d">ARM_COMPUTE_ERROR_ON_FORMAT_NOT_IN</a>(tensor, Format::RGB888);</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    uint8_t *top    = tensor-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#ac80aea0e8c7c5c812ea8c7221fbfd4b2">offset_element_in_bytes</a>(Coordinates(rect.<a class="code" href="struct_detection_window.xhtml#a0815db32ce16586f5e90a633735df930">x</a>, rect.<a class="code" href="struct_detection_window.xhtml#a45b45124e843a937c3e256edbce64eea">y</a>)) + tensor-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#ab988210662dbd3bf32fd563c7dd1bdbf">buffer</a>();</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    uint8_t *bottom = tensor-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#ac80aea0e8c7c5c812ea8c7221fbfd4b2">offset_element_in_bytes</a>(Coordinates(rect.<a class="code" href="struct_detection_window.xhtml#a0815db32ce16586f5e90a633735df930">x</a>, rect.<a class="code" href="struct_detection_window.xhtml#a45b45124e843a937c3e256edbce64eea">y</a> + rect.<a class="code" href="struct_detection_window.xhtml#aa0fb54e3dbe6f7446157eb3f3c1f77f3">height</a>)) + tensor-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#ab988210662dbd3bf32fd563c7dd1bdbf">buffer</a>();</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    uint8_t *left   = top;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    uint8_t *right  = tensor-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#ac80aea0e8c7c5c812ea8c7221fbfd4b2">offset_element_in_bytes</a>(Coordinates(rect.<a class="code" href="struct_detection_window.xhtml#a0815db32ce16586f5e90a633735df930">x</a> + rect.<a class="code" href="struct_detection_window.xhtml#a67fe5ca4d6c3f95bf649ef48fe3d221b">width</a>, rect.<a class="code" href="struct_detection_window.xhtml#a45b45124e843a937c3e256edbce64eea">y</a>)) + tensor-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#ab988210662dbd3bf32fd563c7dd1bdbf">buffer</a>();</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keywordtype">size_t</span>   stride = tensor-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">strides_in_bytes</a>()[Window::DimY];</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> x = 0; x &lt; rect.<a class="code" href="struct_detection_window.xhtml#a67fe5ca4d6c3f95bf649ef48fe3d221b">width</a>; ++x)</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    {</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        top[0]    = r;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        top[1]    = g;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        top[2]    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        bottom[0] = r;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        bottom[1] = g;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        bottom[2] = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        top += 3;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        bottom += 3;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    }</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> y = 0; y &lt; rect.<a class="code" href="struct_detection_window.xhtml#aa0fb54e3dbe6f7446157eb3f3c1f77f3">height</a>; ++y)</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    {</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        left[0]  = r;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        left[1]  = g;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        left[2]  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        right[0] = r;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        right[1] = g;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        right[2] = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        left += stride;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        right += stride;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    }</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_ac80aea0e8c7c5c812ea8c7221fbfd4b2"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#ac80aea0e8c7c5c812ea8c7221fbfd4b2">arm_compute::ITensorInfo::offset_element_in_bytes</a></div><div class="ttdeci">virtual int32_t offset_element_in_bytes(const Coordinates &amp;pos) const =0</div><div class="ttdoc">The offset in bytes from the beginning of the memory allocation to access the element at position (x...</div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="arm__compute_2core_2_validate_8h_xhtml_a0d34a8aa07600727e4e5034c7cdad47d"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a0d34a8aa07600727e4e5034c7cdad47d">ARM_COMPUTE_ERROR_ON_FORMAT_NOT_IN</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_FORMAT_NOT_IN(t,...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00639">Validate.h:639</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml_ab988210662dbd3bf32fd563c7dd1bdbf"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml#ab988210662dbd3bf32fd563c7dd1bdbf">arm_compute::ITensor::buffer</a></div><div class="ttdeci">virtual uint8_t * buffer() const =0</div><div class="ttdoc">Interface to be implemented by the child class to return a pointer to CPU memory. ...</div></div>
<div class="ttc" id="struct_detection_window_xhtml_a45b45124e843a937c3e256edbce64eea"><div class="ttname"><a href="struct_detection_window.xhtml#a45b45124e843a937c3e256edbce64eea">DetectionWindow::y</a></div><div class="ttdeci">ushort y</div><div class="ttdoc">Top-left y coordinate. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_types_8h_source.xhtml#l00050">types.h:50</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml_a0e95dc1e53c361348314873b168ae237"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">arm_compute::ITensor::info</a></div><div class="ttdeci">virtual ITensorInfo * info() const =0</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor&amp;#39;s metadata. </div></div>
<div class="ttc" id="struct_detection_window_xhtml_aa0fb54e3dbe6f7446157eb3f3c1f77f3"><div class="ttname"><a href="struct_detection_window.xhtml#aa0fb54e3dbe6f7446157eb3f3c1f77f3">DetectionWindow::height</a></div><div class="ttdeci">ushort height</div><div class="ttdoc">Height of the detection window. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_types_8h_source.xhtml#l00052">types.h:52</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a6b14f175bf5281f57b561e2d4e4b1f1f"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">arm_compute::ITensorInfo::strides_in_bytes</a></div><div class="ttdeci">virtual const Strides &amp; strides_in_bytes() const =0</div><div class="ttdoc">The strides in bytes for accessing each dimension of the tensor. </div></div>
<div class="ttc" id="struct_detection_window_xhtml_a0815db32ce16586f5e90a633735df930"><div class="ttname"><a href="struct_detection_window.xhtml#a0815db32ce16586f5e90a633735df930">DetectionWindow::x</a></div><div class="ttdeci">ushort x</div><div class="ttdoc">Top-left x coordinate. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_types_8h_source.xhtml#l00049">types.h:49</a></div></div>
<div class="ttc" id="struct_detection_window_xhtml_a67fe5ca4d6c3f95bf649ef48fe3d221b"><div class="ttname"><a href="struct_detection_window.xhtml#a67fe5ca4d6c3f95bf649ef48fe3d221b">DetectionWindow::width</a></div><div class="ttdeci">ushort width</div><div class="ttdoc">Width of the detection window. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_types_8h_source.xhtml#l00051">types.h:51</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a98f6963b2f39dfd94bbec58601b60a99"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a98f6963b2f39dfd94bbec58601b60a99">&#9670;&nbsp;</a></span>fill_random_tensor() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::utils::fill_random_tensor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TensorType</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::random_device::result_type&#160;</td>
          <td class="paramname"><em>seed</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>lower_bound</em> = <code>std::numeric_limits&lt;T&gt;::lowest()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>upper_bound</em> = <code>std::numeric_limits&lt;T&gt;::max()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="utils_2_utils_8h_source.xhtml#l00733">733</a> of file <a class="el" href="utils_2_utils_8h_source.xhtml">Utils.h</a>.</p>

<p class="reference">References <a class="el" href="_helpers_8inl_source.xhtml#l00077">arm_compute::execute_window_loop()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00212">map()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00149">Iterator::ptr()</a>, <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00261">type</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00223">unmap()</a>, and <a class="el" href="_window_8inl_source.xhtml#l00276">Window::use_tensor_dimensions()</a>.</p>

<p class="reference">Referenced by <a class="el" href="utils_2_utils_8h_source.xhtml#l00760">fill_random_tensor()</a>, and <a class="el" href="neon__gemm__qasymm8_8cpp_source.xhtml#l00095">main()</a>.</p>
<div class="fragment"><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;{</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;    constexpr <span class="keywordtype">bool</span> is_fp_16bit = std::is_same&lt;T, half&gt;::value || std::is_same&lt;T, bfloat16&gt;::value;</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;    constexpr <span class="keywordtype">bool</span> is_integral = std::is_integral&lt;T&gt;::value &amp;&amp; !is_fp_16bit;</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;    <span class="keyword">using</span> fp_dist_type = <span class="keyword">typename</span> std::conditional&lt;is_fp_16bit, arm_compute::utils::uniform_real_distribution_16bit&lt;T&gt;, std::uniform_real_distribution&lt;T&gt;&gt;<a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">::type</a>;</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;    <span class="keyword">using</span> dist_type    = <span class="keyword">typename</span> std::conditional&lt;is_integral, std::uniform_int_distribution&lt;T&gt;, fp_dist_type&gt;<a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">::type</a>;</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;    std::mt19937 gen(seed);</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;    dist_type    dist(lower_bound, upper_bound);</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;    <a class="code" href="namespacearm__compute_1_1utils.xhtml#a9c3303817ba653b5d1e78efb88d02bcf">map</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <span class="keyword">true</span>);</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;    Window window;</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;    window.use_tensor_dimensions(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;tensor_shape());</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;    Iterator it(&amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, window);</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;    {</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;        *<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(it.ptr()) = dist(gen);</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;    },</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;    it);</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;    <a class="code" href="namespacearm__compute_1_1utils.xhtml#a4ff2134cb88cb5a27120cddb98b59774">unmap</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;}</div><div class="ttc" id="gemm__interleaved_8hpp_xhtml_a6fbca3dca9ecb372332fc525529cc086"><div class="ttname"><a href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></div><div class="ttdeci">decltype(strategy::transforms) typedef type</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00261">gemm_interleaved.hpp:261</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_xhtml_a4ff2134cb88cb5a27120cddb98b59774"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a4ff2134cb88cb5a27120cddb98b59774">arm_compute::utils::unmap</a></div><div class="ttdeci">void unmap(T &amp;tensor)</div><div class="ttdoc">Unmaps a tensor if needed. </div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00223">Utils.h:223</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_xhtml_a9c3303817ba653b5d1e78efb88d02bcf"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a9c3303817ba653b5d1e78efb88d02bcf">arm_compute::utils::map</a></div><div class="ttdeci">void map(T &amp;tensor, bool blocking)</div><div class="ttdoc">Maps a tensor if needed. </div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00212">Utils.h:212</a></div></div>
<div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00066">ClWorkloadRuntime.cpp:66</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5002bf7ec46d52971f9526e94172cfee"><div class="ttname"><a href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;... iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00077">Helpers.inl:77</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a4dab021b1b964cbd23b93173b84c0e49"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4dab021b1b964cbd23b93173b84c0e49">&#9670;&nbsp;</a></span>fill_random_tensor() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::utils::fill_random_tensor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TensorType</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>lower_bound</em> = <code>std::numeric_limits&lt;T&gt;::lowest()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>upper_bound</em> = <code>std::numeric_limits&lt;T&gt;::max()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="utils_2_utils_8h_source.xhtml#l00760">760</a> of file <a class="el" href="utils_2_utils_8h_source.xhtml">Utils.h</a>.</p>

<p class="reference">References <a class="el" href="utils_2_utils_8h_source.xhtml#l00733">fill_random_tensor()</a>.</p>
<div class="fragment"><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;{</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;    std::random_device rd;</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;    <a class="code" href="namespacearm__compute_1_1utils.xhtml#a4dab021b1b964cbd23b93173b84c0e49">fill_random_tensor</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, rd(), lower_bound, upper_bound);</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;}</div><div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00066">ClWorkloadRuntime.cpp:66</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_xhtml_a4dab021b1b964cbd23b93173b84c0e49"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a4dab021b1b964cbd23b93173b84c0e49">arm_compute::utils::fill_random_tensor</a></div><div class="ttdeci">void fill_random_tensor(TensorType &amp;tensor, T lower_bound=std::numeric_limits&lt; T &gt;::lowest(), T upper_bound=std::numeric_limits&lt; T &gt;::max())</div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00760">Utils.h:760</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0a68ee1366ba27dd1e493dde02e57a59"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0a68ee1366ba27dd1e493dde02e57a59">&#9670;&nbsp;</a></span>fill_tensor_value()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::utils::fill_tensor_value </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TensorType</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="utils_2_utils_8h_source.xhtml#l00688">688</a> of file <a class="el" href="utils_2_utils_8h_source.xhtml">Utils.h</a>.</p>

<p class="reference">References <a class="el" href="_helpers_8inl_source.xhtml#l00077">arm_compute::execute_window_loop()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00212">map()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00149">Iterator::ptr()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00223">unmap()</a>, and <a class="el" href="_window_8inl_source.xhtml#l00276">Window::use_tensor_dimensions()</a>.</p>

<p class="reference">Referenced by <a class="el" href="utils_2_utils_8h_source.xhtml#l00706">fill_tensor_zero()</a>.</p>
<div class="fragment"><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;{</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;    <a class="code" href="namespacearm__compute_1_1utils.xhtml#a9c3303817ba653b5d1e78efb88d02bcf">map</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <span class="keyword">true</span>);</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;    Window window;</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;    window.use_tensor_dimensions(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;tensor_shape());</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;    Iterator it_tensor(&amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, window);</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;    {</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;        *<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(it_tensor.ptr()) = value;</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;    },</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;    it_tensor);</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;    <a class="code" href="namespacearm__compute_1_1utils.xhtml#a4ff2134cb88cb5a27120cddb98b59774">unmap</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1utils_xhtml_a4ff2134cb88cb5a27120cddb98b59774"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a4ff2134cb88cb5a27120cddb98b59774">arm_compute::utils::unmap</a></div><div class="ttdeci">void unmap(T &amp;tensor)</div><div class="ttdoc">Unmaps a tensor if needed. </div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00223">Utils.h:223</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_xhtml_a9c3303817ba653b5d1e78efb88d02bcf"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a9c3303817ba653b5d1e78efb88d02bcf">arm_compute::utils::map</a></div><div class="ttdeci">void map(T &amp;tensor, bool blocking)</div><div class="ttdoc">Maps a tensor if needed. </div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00212">Utils.h:212</a></div></div>
<div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00066">ClWorkloadRuntime.cpp:66</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5002bf7ec46d52971f9526e94172cfee"><div class="ttname"><a href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;... iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00077">Helpers.inl:77</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="abf4bc85504168df2b48d84712be2ceaa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abf4bc85504168df2b48d84712be2ceaa">&#9670;&nbsp;</a></span>fill_tensor_vector()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::utils::fill_tensor_vector </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TensorType</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; T &gt;&#160;</td>
          <td class="paramname"><em>vec</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="utils_2_utils_8h_source.xhtml#l00712">712</a> of file <a class="el" href="utils_2_utils_8h_source.xhtml">Utils.h</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00077">arm_compute::execute_window_loop()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00212">map()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00149">Iterator::ptr()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00223">unmap()</a>, and <a class="el" href="_window_8inl_source.xhtml#l00276">Window::use_tensor_dimensions()</a>.</p>
<div class="fragment"><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;{</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;tensor_shape().total_size() != vec.size());</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;    <a class="code" href="namespacearm__compute_1_1utils.xhtml#a9c3303817ba653b5d1e78efb88d02bcf">map</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <span class="keyword">true</span>);</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;    Window window;</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;    window.use_tensor_dimensions(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;tensor_shape());</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;    <span class="keywordtype">int</span>      i = 0;</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;    Iterator it_tensor(&amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, window);</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;    {</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;        *<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(it_tensor.ptr()) = vec.at(i++);</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;    },</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;    it_tensor);</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;    <a class="code" href="namespacearm__compute_1_1utils.xhtml#a4ff2134cb88cb5a27120cddb98b59774">unmap</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_xhtml_a4ff2134cb88cb5a27120cddb98b59774"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a4ff2134cb88cb5a27120cddb98b59774">arm_compute::utils::unmap</a></div><div class="ttdeci">void unmap(T &amp;tensor)</div><div class="ttdoc">Unmaps a tensor if needed. </div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00223">Utils.h:223</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_xhtml_a9c3303817ba653b5d1e78efb88d02bcf"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a9c3303817ba653b5d1e78efb88d02bcf">arm_compute::utils::map</a></div><div class="ttdeci">void map(T &amp;tensor, bool blocking)</div><div class="ttdoc">Maps a tensor if needed. </div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00212">Utils.h:212</a></div></div>
<div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00066">ClWorkloadRuntime.cpp:66</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5002bf7ec46d52971f9526e94172cfee"><div class="ttname"><a href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;... iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00077">Helpers.inl:77</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a47cbdedef5ff798e3946a011bf58a0cb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a47cbdedef5ff798e3946a011bf58a0cb">&#9670;&nbsp;</a></span>fill_tensor_zero()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::utils::fill_tensor_zero </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828">TensorType</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="utils_2_utils_8h_source.xhtml#l00706">706</a> of file <a class="el" href="utils_2_utils_8h_source.xhtml">Utils.h</a>.</p>

<p class="reference">References <a class="el" href="utils_2_utils_8h_source.xhtml#l00688">fill_tensor_value()</a>.</p>
<div class="fragment"><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;{</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;    <a class="code" href="namespacearm__compute_1_1utils.xhtml#a0a68ee1366ba27dd1e493dde02e57a59">fill_tensor_value</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, T(0));</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1utils_xhtml_a0a68ee1366ba27dd1e493dde02e57a59"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a0a68ee1366ba27dd1e493dde02e57a59">arm_compute::utils::fill_tensor_value</a></div><div class="ttdeci">void fill_tensor_value(TensorType &amp;tensor, T value)</div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00688">Utils.h:688</a></div></div>
<div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00066">ClWorkloadRuntime.cpp:66</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac71977d367133149be76363b0915c3af"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac71977d367133149be76363b0915c3af">&#9670;&nbsp;</a></span>get_accessor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1graph_1_1_i_tensor_accessor.xhtml">graph::ITensorAccessor</a>&gt; arm_compute::utils::get_accessor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1utils_1_1_tensor_params.xhtml">TensorParams</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a>&#160;</td>
          <td class="paramname"><em>lower</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a>&#160;</td>
          <td class="paramname"><em>upper</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::random_device::result_type&#160;</td>
          <td class="paramname"><em>seed</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Generates appropriate accessor according to the specified graph parameters. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a> parameters </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">lower</td><td>Lower random values bound </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">upper</td><td>Upper random values bound </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">seed</td><td>Random generator seed</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An appropriate tensor accessor </dd></dl>

<p class="definition">Definition at line <a class="el" href="graph__validate__utils_8h_source.xhtml#l00335">335</a> of file <a class="el" href="graph__validate__utils_8h_source.xhtml">graph_validate_utils.h</a>.</p>

<p class="reference">References <a class="el" href="graph__validate__utils_8h_source.xhtml#l00113">TensorParams::npy</a>.</p>

<p class="reference">Referenced by <a class="el" href="graph__validate__utils_8h_source.xhtml#l00638">GraphValidateExample&lt; DepthwiseConvolutionLayer, DepthConvolutionOptions, DepthConvolutionVerifyAccessor &gt;::do_setup()</a>.</p>
<div class="fragment"><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;{</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    <span class="keywordflow">if</span>(!<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.npy.empty())</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    {</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        <span class="keywordflow">return</span> std::make_unique&lt;arm_compute::graph_utils::NumPyBinLoader&gt;(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.npy);</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    }</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    {</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;        <span class="keywordflow">return</span> std::make_unique&lt;arm_compute::graph_utils::RandomAccessor&gt;(lower, upper, seed);</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    }</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;}</div><div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00066">ClWorkloadRuntime.cpp:66</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a779702024b509e6797b2d526d382cf65"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a779702024b509e6797b2d526d382cf65">&#9670;&nbsp;</a></span>get_image_type_from_file()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1utils.xhtml#a3154c405c975616503bac23f51b78fc0">ImageType</a> get_image_type_from_file </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>filename</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets image type given a file. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">filename</td><td>File to identify its image type</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="struct_image.xhtml" title="Structure to hold Image information. ">Image</a> type </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_utils_8cpp_source.xhtml#l00167">167</a> of file <a class="el" href="utils_2_utils_8cpp_source.xhtml">Utils.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00346">ARM_COMPUTE_ERROR_VAR</a>, <a class="el" href="namespacearm__compute_1_1utils.xhtml#a3154c405c975616503bac23f51b78fc0a907e06a16862d82ca6907a28a68d0ad6">JPEG</a>, <a class="el" href="namespacearm__compute_1_1utils.xhtml#a3154c405c975616503bac23f51b78fc0a4bb1ebdeeb70354069bc644b9c94ee5f">PPM</a>, <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00261">type</a>, and <a class="el" href="namespacearm__compute_1_1utils.xhtml#a3154c405c975616503bac23f51b78fc0a696b031073e74bf2cb98e5ef201d4aa3">UNKNOWN</a>.</p>

<p class="reference">Referenced by <a class="el" href="_image_loader_8h_source.xhtml#l00509">ImageLoaderFactory::create()</a>, and <a class="el" href="utils_2_utils_8h_source.xhtml#l00107">run_example()</a>.</p>
<div class="fragment"><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;{</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <a class="code" href="namespacearm__compute_1_1utils.xhtml#a3154c405c975616503bac23f51b78fc0">ImageType</a> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a> = <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c">ImageType::UNKNOWN</a>;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keywordflow">try</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    {</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <span class="comment">// Open file</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        std::ifstream fs;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        fs.exceptions(std::ifstream::failbit | std::ifstream::badbit);</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        fs.open(filename, std::ios::in | std::ios::binary);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <span class="comment">// Identify type from magic number</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        std::array&lt;unsigned char, 2&gt; magic_number{ { 0 } };</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        fs &gt;&gt; magic_number[0] &gt;&gt; magic_number[1];</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        <span class="comment">// PPM check</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        <span class="keywordflow">if</span>(static_cast&lt;char&gt;(magic_number[0]) == <span class="charliteral">&#39;P&#39;</span> &amp;&amp; static_cast&lt;char&gt;(magic_number[1]) == <span class="charliteral">&#39;6&#39;</span>)</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        {</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;            type = ImageType::PPM;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        }</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(magic_number[0] == 0xFF &amp;&amp; magic_number[1] == 0xD8)</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        {</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            type = ImageType::JPEG;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        }</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        fs.close();</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    }</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="keywordflow">catch</span>(std::runtime_error &amp;e)</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    {</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        <a class="code" href="_error_8h.xhtml#abd040a16dc0dbc75733e07aff93048a8">ARM_COMPUTE_ERROR_VAR</a>(<span class="stringliteral">&quot;Accessing %s: %s&quot;</span>, filename.c_str(), e.what());</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    }</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a>;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c"><div class="ttname"><a href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c">arm_compute::UNKNOWN</a></div><div class="ttdoc">Unknown CL kernel type. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_types_8h_source.xhtml#l00082">CLTypes.h:82</a></div></div>
<div class="ttc" id="_error_8h_xhtml_abd040a16dc0dbc75733e07aff93048a8"><div class="ttname"><a href="_error_8h.xhtml#abd040a16dc0dbc75733e07aff93048a8">ARM_COMPUTE_ERROR_VAR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_VAR(msg,...)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00346">Error.h:346</a></div></div>
<div class="ttc" id="gemm__interleaved_8hpp_xhtml_a6fbca3dca9ecb372332fc525529cc086"><div class="ttname"><a href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></div><div class="ttdeci">decltype(strategy::transforms) typedef type</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00261">gemm_interleaved.hpp:261</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_xhtml_a3154c405c975616503bac23f51b78fc0"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a3154c405c975616503bac23f51b78fc0">arm_compute::utils::ImageType</a></div><div class="ttdeci">ImageType</div><div class="ttdoc">Supported image types. </div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00063">Utils.h:63</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="afb7b08e5c044dba650037628089a4e7c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afb7b08e5c044dba650037628089a4e7c">&#9670;&nbsp;</a></span>get_mem_free_from_meminfo()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint64_t get_mem_free_from_meminfo </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This function returns the amount of memory free reading from /proc/meminfo. </p>
<dl class="section return"><dt>Returns</dt><dd>The free memory in kB </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_utils_8cpp_source.xhtml#l00253">253</a> of file <a class="el" href="utils_2_utils_8cpp_source.xhtml">Utils.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="utils_2_utils_8h_source.xhtml#l00767">init_sgemm_output()</a>.</p>
<div class="fragment"><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;{</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    std::string   line_attribute;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    std::ifstream file_meminfo(<span class="stringliteral">&quot;/proc/meminfo&quot;</span>);</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="keywordflow">if</span>(file_meminfo.is_open())</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    {</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        <span class="keywordflow">while</span>(!(file_meminfo &gt;&gt; line_attribute).fail())</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        {</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;            <span class="comment">//Test if is the line containing MemFree</span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;            <span class="keywordflow">if</span>(line_attribute == <span class="stringliteral">&quot;MemFree:&quot;</span>)</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;            {</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                uint64_t mem_available;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                <span class="keywordflow">if</span>(!(file_meminfo &gt;&gt; mem_available).fail())</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                {</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                    <span class="keywordflow">return</span> mem_available;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                }</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                <span class="keywordflow">else</span></div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                {</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                    <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                }</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;            }</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;            <span class="comment">// if it&#39;s not MemFree ignore rest of the line</span></div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;            file_meminfo.ignore(std::numeric_limits&lt;std::streamsize&gt;::max(), <span class="charliteral">&#39;\n&#39;</span>);</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        }</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    }</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    <span class="comment">// Nothing found or an error during opening the file</span></div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a7990fd2b875e2f6d4c1eded54539cb19"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7990fd2b875e2f6d4c1eded54539cb19">&#9670;&nbsp;</a></span>get_typestring()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::utils::get_typestring </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>data_type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Obtain numpy type string from DataType. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">data_type</td><td>Data type.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>numpy type string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_utils_8h_source.xhtml#l00154">154</a> of file <a class="el" href="utils_2_utils_8h_source.xhtml">Utils.h</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00352">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">arm_compute::F16</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::F32</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a1ad5f6f3069070ec4cbbdc94d5e61e0e">arm_compute::F64</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3b989c6b5398b3b9538ad103a324205e">arm_compute::QASYMM16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">arm_compute::QASYMM8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">arm_compute::QSYMM16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a5f007421a4becd11c0666c2058b0b36c">arm_compute::QSYMM8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a34f500e941c4df30b870126ec868ebd5">arm_compute::QSYMM8_PER_CHANNEL</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">arm_compute::S16</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::S32</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a115dca124dc6423c7a400b8a8a0270cc">arm_compute::S64</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">arm_compute::S8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6abd7ef6d4f35bc7d05c559b65032f15d1">arm_compute::SIZET</a>, <a class="el" href="_string_support_8h_source.xhtml#l00168">arm_compute::support::cpp11::to_string()</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">arm_compute::U16</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">arm_compute::U32</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a31d65cccd6593e4101db93fb878abcaa">arm_compute::U64</a>, and <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::U8</a>.</p>

<p class="reference">Referenced by <a class="el" href="utils_2_utils_8h_source.xhtml#l00365">NPYLoader::fill_tensor()</a>.</p>
<div class="fragment"><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;{</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="comment">// Check endianness</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 1;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span>        *c = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">char</span> *<span class="keyword">&gt;</span>(&amp;i);</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    std::string        endianness;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keywordflow">if</span>(*c == 1)</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    {</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        endianness = std::string(<span class="stringliteral">&quot;&lt;&quot;</span>);</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    }</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    {</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        endianness = std::string(<span class="stringliteral">&quot;&gt;&quot;</span>);</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    }</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keyword">const</span> std::string no_endianness(<span class="stringliteral">&quot;|&quot;</span>);</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="keywordflow">switch</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>)</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    {</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <span class="keywordflow">case</span> DataType::U8:</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM8:</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            <span class="keywordflow">return</span> no_endianness + <span class="stringliteral">&quot;u&quot;</span> + <a class="code" href="namespacearm__compute_1_1mlgo.xhtml#abd50adb0aaecb76f3d753cdf3785872e">support::cpp11::to_string</a>(<span class="keyword">sizeof</span>(uint8_t));</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        <span class="keywordflow">case</span> DataType::S8:</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM8:</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM8_PER_CHANNEL:</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            <span class="keywordflow">return</span> no_endianness + <span class="stringliteral">&quot;i&quot;</span> + <a class="code" href="namespacearm__compute_1_1mlgo.xhtml#abd50adb0aaecb76f3d753cdf3785872e">support::cpp11::to_string</a>(<span class="keyword">sizeof</span>(int8_t));</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="keywordflow">case</span> DataType::U16:</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM16:</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            <span class="keywordflow">return</span> endianness + <span class="stringliteral">&quot;u&quot;</span> + <a class="code" href="namespacearm__compute_1_1mlgo.xhtml#abd50adb0aaecb76f3d753cdf3785872e">support::cpp11::to_string</a>(<span class="keyword">sizeof</span>(uint16_t));</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        <span class="keywordflow">case</span> DataType::S16:</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM16:</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            <span class="keywordflow">return</span> endianness + <span class="stringliteral">&quot;i&quot;</span> + <a class="code" href="namespacearm__compute_1_1mlgo.xhtml#abd50adb0aaecb76f3d753cdf3785872e">support::cpp11::to_string</a>(<span class="keyword">sizeof</span>(int16_t));</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        <span class="keywordflow">case</span> DataType::U32:</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            <span class="keywordflow">return</span> endianness + <span class="stringliteral">&quot;u&quot;</span> + <a class="code" href="namespacearm__compute_1_1mlgo.xhtml#abd50adb0aaecb76f3d753cdf3785872e">support::cpp11::to_string</a>(<span class="keyword">sizeof</span>(uint32_t));</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        <span class="keywordflow">case</span> DataType::S32:</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            <span class="keywordflow">return</span> endianness + <span class="stringliteral">&quot;i&quot;</span> + <a class="code" href="namespacearm__compute_1_1mlgo.xhtml#abd50adb0aaecb76f3d753cdf3785872e">support::cpp11::to_string</a>(<span class="keyword">sizeof</span>(int32_t));</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        <span class="keywordflow">case</span> DataType::U64:</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            <span class="keywordflow">return</span> endianness + <span class="stringliteral">&quot;u&quot;</span> + <a class="code" href="namespacearm__compute_1_1mlgo.xhtml#abd50adb0aaecb76f3d753cdf3785872e">support::cpp11::to_string</a>(<span class="keyword">sizeof</span>(uint64_t));</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        <span class="keywordflow">case</span> DataType::S64:</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            <span class="keywordflow">return</span> endianness + <span class="stringliteral">&quot;i&quot;</span> + <a class="code" href="namespacearm__compute_1_1mlgo.xhtml#abd50adb0aaecb76f3d753cdf3785872e">support::cpp11::to_string</a>(<span class="keyword">sizeof</span>(int64_t));</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        <span class="keywordflow">case</span> DataType::F16:</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            <span class="keywordflow">return</span> endianness + <span class="stringliteral">&quot;f&quot;</span> + <a class="code" href="namespacearm__compute_1_1mlgo.xhtml#abd50adb0aaecb76f3d753cdf3785872e">support::cpp11::to_string</a>(<span class="keyword">sizeof</span>(<a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a>));</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        <span class="keywordflow">case</span> DataType::F32:</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            <span class="keywordflow">return</span> endianness + <span class="stringliteral">&quot;f&quot;</span> + <a class="code" href="namespacearm__compute_1_1mlgo.xhtml#abd50adb0aaecb76f3d753cdf3785872e">support::cpp11::to_string</a>(<span class="keyword">sizeof</span>(<span class="keywordtype">float</span>));</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        <span class="keywordflow">case</span> DataType::F64:</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            <span class="keywordflow">return</span> endianness + <span class="stringliteral">&quot;f&quot;</span> + <a class="code" href="namespacearm__compute_1_1mlgo.xhtml#abd50adb0aaecb76f3d753cdf3785872e">support::cpp11::to_string</a>(<span class="keyword">sizeof</span>(<span class="keywordtype">double</span>));</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        <span class="keywordflow">case</span> DataType::SIZET:</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            <span class="keywordflow">return</span> endianness + <span class="stringliteral">&quot;u&quot;</span> + <a class="code" href="namespacearm__compute_1_1mlgo.xhtml#abd50adb0aaecb76f3d753cdf3785872e">support::cpp11::to_string</a>(<span class="keyword">sizeof</span>(<span class="keywordtype">size_t</span>));</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Data type not supported&quot;</span>);</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    }</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a73e2825fd61d349c5ca2f5313e3c8ea1"><div class="ttname"><a href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">arm_compute::half</a></div><div class="ttdeci">half_float::half half</div><div class="ttdoc">16-bit floating point type </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00048">Types.h:48</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1mlgo_xhtml_abd50adb0aaecb76f3d753cdf3785872e"><div class="ttname"><a href="namespacearm__compute_1_1mlgo.xhtml#abd50adb0aaecb76f3d753cdf3785872e">arm_compute::mlgo::to_string</a></div><div class="ttdeci">std::string to_string(const GEMMConfigNative &amp;config)</div><div class="ttdef"><b>Definition:</b> <a href="src_2runtime_2_c_l_2mlgo_2_utils_8cpp_source.xhtml#l00156">Utils.cpp:156</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a5f5b6c4337eac9e2e0046ca2304d80dc"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">arm_compute::test::validation::data_type</a></div><div class="ttdeci">data_type</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_cast_8cpp_source.xhtml#l00203">Cast.cpp:203</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae55aa860d1d119bc2a2812ef0391b9ae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae55aa860d1d119bc2a2812ef0391b9ae">&#9670;&nbsp;</a></span>get_verify_accessor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1graph_1_1_i_tensor_accessor.xhtml">graph::ITensorAccessor</a>&gt; arm_compute::utils::get_verify_accessor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1utils_1_1_example_params.xhtml">ExampleParams</a>&#160;</td>
          <td class="paramname"><em>params</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Generates appropriate convolution verify accessor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>User supplied parameters for convolution.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A convolution verify accessor for the requested datatype. </dd></dl>

<p class="definition">Definition at line <a class="el" href="graph__validate__utils_8h_source.xhtml#l00603">603</a> of file <a class="el" href="graph__validate__utils_8h_source.xhtml">graph_validate_utils.h</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00352">ARM_COMPUTE_ERROR</a>, <a class="el" href="graph__validate__utils_8h_source.xhtml#l00143">CommonParams::data_type</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">arm_compute::F16</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::F32</a>, and <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">arm_compute::QASYMM8</a>.</p>
<div class="fragment"><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;{</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;    <span class="keywordflow">switch</span>(params.data_type)</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;    {</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM8:</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;        {</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;VerifyAccessorT&lt;uint8_t&gt;&gt;(</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;                       params);</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;        }</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;        <span class="keywordflow">case</span> DataType::F16:</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;        {</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;VerifyAccessorT&lt;half&gt;&gt;(</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;                       params);</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;        }</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;        <span class="keywordflow">case</span> DataType::F32:</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;        {</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;            <span class="keywordflow">return</span> std::make_unique&lt;VerifyAccessorT&lt;float&gt;&gt;(</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;                       params);</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;        }</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT SUPPORTED!&quot;</span>);</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;    }</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3ff90da00700526d89a0ee29f85fd804"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3ff90da00700526d89a0ee29f85fd804">&#9670;&nbsp;</a></span>init_sgemm_output()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::utils::init_sgemm_output </td>
          <td>(</td>
          <td class="paramtype">T &amp;&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T &amp;&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T &amp;&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">arm_compute::DataType</a>&#160;</td>
          <td class="paramname"><em>dt</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="utils_2_utils_8h_source.xhtml#l00767">767</a> of file <a class="el" href="utils_2_utils_8h_source.xhtml">Utils.h</a>.</p>

<p class="reference">References <a class="el" href="utils_2_utils_8cpp_source.xhtml#l00253">get_mem_free_from_meminfo()</a>.</p>
<div class="fragment"><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;{</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.allocator()-&gt;init(TensorInfo(TensorShape(src1.info()-&gt;dimension(0), src0.info()-&gt;dimension(1), src0.info()-&gt;dimension(2)), 1, <a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>));</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;}</div><div class="ttc" id="_n_e_batch_normalization_layer_kernel_8cpp_xhtml_aa36901a4911e511f25f42e191df3526d"><div class="ttname"><a href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a></div><div class="ttdeci">DataType dt</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00051">NEBatchNormalizationLayerKernel.cpp:51</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab394a46b54a9f73b47493691f0a0ab9f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab394a46b54a9f73b47493691f0a0ab9f">&#9670;&nbsp;</a></span>is_in()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::utils::is_in </td>
          <td>(</td>
          <td class="paramtype">E&#160;</td>
          <td class="paramname"><em>check</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::initializer_list&lt; E &gt;&#160;</td>
          <td class="paramname"><em>list</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if the given value is in the given enum value list. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">E</td><td>The type of the enum</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">check</td><td>Value to check </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">list</td><td>List of enum values to check against</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the given value is found in the list </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2common_2utils_2_utils_8h_source.xhtml#l00073">73</a> of file <a class="el" href="src_2common_2utils_2_utils_8h_source.xhtml">Utils.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dependency_graph_8h_source.xhtml#l00352">DependencyGraph::get_root_ops()</a>.</p>
<div class="fragment"><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;{</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordflow">return</span> std::any_of(std::cbegin(list), std::cend(list), [&amp;check](E e)</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    {</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="keywordflow">return</span> check == e;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    });</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="af214346f90d640ac468dd90fa2a275cc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af214346f90d640ac468dd90fa2a275cc">&#9670;&nbsp;</a></span>load_trained_data()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::utils::load_trained_data </td>
          <td>(</td>
          <td class="paramtype">T &amp;&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>filename</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Load the tensor with pre-trained data from a binary file. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td>The tensor to be filled. Data type supported: F32. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">filename</td><td>Filename of the binary file to load from. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="utils_2_utils_8h_source.xhtml#l00641">641</a> of file <a class="el" href="utils_2_utils_8h_source.xhtml">Utils.h</a>.</p>

<p class="reference">References <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00786">ARM_COMPUTE_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>, <a class="el" href="_error_8h_source.xhtml#l00346">ARM_COMPUTE_ERROR_VAR</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00077">arm_compute::execute_window_loop()</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::F32</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00212">map()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00149">Iterator::ptr()</a>, <a class="el" href="_window_8inl_source.xhtml#l00049">Window::set()</a>, and <a class="el" href="utils_2_utils_8h_source.xhtml#l00223">unmap()</a>.</p>
<div class="fragment"><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;{</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#aadf5c9cff86327b96d88d04649d9715e">ARM_COMPUTE_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(&amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, 1, DataType::F32);</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;    std::ifstream fs;</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;    <span class="keywordflow">try</span></div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;    {</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;        fs.exceptions(std::ofstream::failbit | std::ofstream::badbit | std::ofstream::eofbit);</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;        <span class="comment">// Open file</span></div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;        fs.open(filename, std::ios::in | std::ios::binary);</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;        <span class="keywordflow">if</span>(!fs.good())</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;        {</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;            <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Could not load binary data: &quot;</span> + filename);</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;        }</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;        <span class="comment">// Map buffer if creating a CLTensor</span></div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;        <a class="code" href="namespacearm__compute_1_1utils.xhtml#a9c3303817ba653b5d1e78efb88d02bcf">map</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <span class="keyword">true</span>);</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;        Window window;</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;        window.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">arm_compute::Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">arm_compute::Window::Dimension</a>(0, 1, 1));</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> d = 1; d &lt; <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;num_dimensions(); ++d)</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;        {</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;            window.set(d, Window::Dimension(0, <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;tensor_shape()[d], 1));</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;        }</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">arm_compute::Iterator</a> in(&amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, window);</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;        {</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;            fs.read(reinterpret_cast&lt;std::fstream::char_type *&gt;(in.ptr()), <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;tensor_shape()[0] * <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;element_size());</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;        },</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;        in);</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;        <span class="comment">// Unmap buffer if creating a CLTensor</span></div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;        <a class="code" href="namespacearm__compute_1_1utils.xhtml#a4ff2134cb88cb5a27120cddb98b59774">unmap</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;    }</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;    <span class="keywordflow">catch</span>(<span class="keyword">const</span> std::ofstream::failure &amp;e)</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;    {</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;        <a class="code" href="_error_8h.xhtml#abd040a16dc0dbc75733e07aff93048a8">ARM_COMPUTE_ERROR_VAR</a>(<span class="stringliteral">&quot;Writing %s: (%s)&quot;</span>, filename.c_str(), e.what());</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;    }</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_abd040a16dc0dbc75733e07aff93048a8"><div class="ttname"><a href="_error_8h.xhtml#abd040a16dc0dbc75733e07aff93048a8">ARM_COMPUTE_ERROR_VAR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_VAR(msg,...)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00346">Error.h:346</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_1_1_dimension_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml">arm_compute::Window::Dimension</a></div><div class="ttdoc">Describe one of the image&amp;#39;s dimensions with a start, end and step. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00079">Window.h:79</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_xhtml_a4ff2134cb88cb5a27120cddb98b59774"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a4ff2134cb88cb5a27120cddb98b59774">arm_compute::utils::unmap</a></div><div class="ttdeci">void unmap(T &amp;tensor)</div><div class="ttdoc">Unmaps a tensor if needed. </div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00223">Utils.h:223</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_aa96e81276ee4f87ab386cd05a5539a7d"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">arm_compute::Window::DimX</a></div><div class="ttdeci">static constexpr size_t DimX</div><div class="ttdoc">Alias for dimension 0 also known as X dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00043">Window.h:43</a></div></div>
<div class="ttc" id="arm__compute_2core_2_validate_8h_xhtml_aadf5c9cff86327b96d88d04649d9715e"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#aadf5c9cff86327b96d88d04649d9715e">ARM_COMPUTE_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN(t, c,...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00786">Validate.h:786</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_xhtml_a9c3303817ba653b5d1e78efb88d02bcf"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a9c3303817ba653b5d1e78efb88d02bcf">arm_compute::utils::map</a></div><div class="ttdeci">void map(T &amp;tensor, bool blocking)</div><div class="ttdoc">Maps a tensor if needed. </div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00212">Utils.h:212</a></div></div>
<div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00066">ClWorkloadRuntime.cpp:66</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5002bf7ec46d52971f9526e94172cfee"><div class="ttname"><a href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;... iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00077">Helpers.inl:77</a></div></div>
<div class="ttc" id="classarm__compute_1_1_iterator_xhtml"><div class="ttname"><a href="classarm__compute_1_1_iterator.xhtml">arm_compute::Iterator</a></div><div class="ttdoc">Iterator updated by execute_window_loop for each window element. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00046">Helpers.h:46</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a9c3303817ba653b5d1e78efb88d02bcf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9c3303817ba653b5d1e78efb88d02bcf">&#9670;&nbsp;</a></span>map()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::utils::map </td>
          <td>(</td>
          <td class="paramtype">T &amp;&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>blocking</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Maps a tensor if needed. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a> to be mapped </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">blocking</td><td>Specified if map is blocking or not </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="utils_2_utils_8h_source.xhtml#l00212">212</a> of file <a class="el" href="utils_2_utils_8h_source.xhtml">Utils.h</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00152">ARM_COMPUTE_UNUSED</a>.</p>

<p class="reference">Referenced by <a class="el" href="_gemm_tuner_8py_source.xhtml#l00057">GEMMParam::__str__()</a>, <a class="el" href="_gemm_tuner_8py_source.xhtml#l00072">NativeGEMMConfig::__str__()</a>, <a class="el" href="_gemm_tuner_8py_source.xhtml#l00098">ReshapedOnlyRHSGEMMConfig::__str__()</a>, <a class="el" href="_gemm_tuner_8py_source.xhtml#l00129">ReshapedGEMMConfig::__str__()</a>, <a class="el" href="_gemm_tuner_8py_source.xhtml#l00184">Measurement::__str__()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00786">compare_tensor()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00733">fill_random_tensor()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00365">NPYLoader::fill_tensor()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00688">fill_tensor_value()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00712">fill_tensor_vector()</a>, <a class="el" href="_i_tensor_v2_8h_source.xhtml#l00069">ITensorV2::is_valid()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00641">load_trained_data()</a>, <a class="el" href="_gemm_tuner_8py_source.xhtml#l00468">GemmTuner::parse_benchmark_commandline()</a>, <a class="el" href="_gemm_tuner_8py_source.xhtml#l00054">GEMMParam::parse_from_strs()</a>, <a class="el" href="_gemm_tuner_8py_source.xhtml#l00068">NativeGEMMConfig::parse_from_strs()</a>, <a class="el" href="_gemm_tuner_8py_source.xhtml#l00091">ReshapedOnlyRHSGEMMConfig::parse_from_strs()</a>, <a class="el" href="_gemm_tuner_8py_source.xhtml#l00121">ReshapedGEMMConfig::parse_from_strs()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00586">save_to_npy()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00506">save_to_ppm()</a>, and <a class="el" href="utils_2_utils_8h_source.xhtml#l00223">unmap()</a>.</p>
<div class="fragment"><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;{</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(blocking);</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00066">ClWorkloadRuntime.cpp:66</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a24e5f40fb2db725a749dd5103ced9760"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a24e5f40fb2db725a749dd5103ced9760">&#9670;&nbsp;</a></span>operator<<() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::ostream &amp; operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1utils_1_1_common_graph_params.xhtml">CommonGraphParams</a> &amp;&#160;</td>
          <td class="paramname"><em>common_params</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the <a class="el" href="structarm__compute_1_1utils_1_1_common_graph_params.xhtml" title="Structure holding all the common graph parameters. ">CommonGraphParams</a> type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">common_params</td><td>Common parameters to output</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_common_graph_options_8cpp_source.xhtml#l00077">77</a> of file <a class="el" href="_common_graph_options_8cpp_source.xhtml">CommonGraphOptions.cpp</a>.</p>

<p class="reference">References <a class="el" href="_common_graph_options_8h_source.xhtml#l00100">CommonGraphParams::data_layout</a>, <a class="el" href="_common_graph_options_8h_source.xhtml#l00105">CommonGraphParams::data_path</a>, <a class="el" href="_common_graph_options_8h_source.xhtml#l00099">CommonGraphParams::data_type</a>, <a class="el" href="_common_graph_options_8h_source.xhtml#l00102">CommonGraphParams::enable_cl_cache</a>, <a class="el" href="_common_graph_options_8h_source.xhtml#l00101">CommonGraphParams::enable_tuner</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11a00d23a76e43b46dae9ec7aa9dcbebb32">arm_compute::graph::Enabled</a>, <a class="el" href="_common_graph_options_8h_source.xhtml#l00104">CommonGraphParams::fast_math_hint</a>, <a class="el" href="_common_graph_options_8h_source.xhtml#l00106">CommonGraphParams::image</a>, <a class="el" href="_common_graph_options_8h_source.xhtml#l00107">CommonGraphParams::labels</a>, <a class="el" href="_common_graph_options_8h_source.xhtml#l00111">CommonGraphParams::mlgo_file</a>, <a class="el" href="_common_graph_options_8h_source.xhtml#l00098">CommonGraphParams::target</a>, <a class="el" href="_common_graph_options_8h_source.xhtml#l00096">CommonGraphParams::threads</a>, <a class="el" href="_common_graph_options_8h_source.xhtml#l00110">CommonGraphParams::tuner_file</a>, <a class="el" href="_common_graph_options_8h_source.xhtml#l00103">CommonGraphParams::tuner_mode</a>, <a class="el" href="_common_graph_options_8h_source.xhtml#l00108">CommonGraphParams::validation_file</a>, <a class="el" href="_common_graph_options_8h_source.xhtml#l00109">CommonGraphParams::validation_path</a>, <a class="el" href="_common_graph_options_8h_source.xhtml#l00113">CommonGraphParams::validation_range_end</a>, and <a class="el" href="_common_graph_options_8h_source.xhtml#l00112">CommonGraphParams::validation_range_start</a>.</p>
<div class="fragment"><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;{</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    std::string false_str = std::string(<span class="stringliteral">&quot;false&quot;</span>);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    std::string true_str  = std::string(<span class="stringliteral">&quot;true&quot;</span>);</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;Threads : &quot;</span> &lt;&lt; common_params.threads &lt;&lt; std::endl;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;Target : &quot;</span> &lt;&lt; common_params.target &lt;&lt; std::endl;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;Data type : &quot;</span> &lt;&lt; common_params.data_type &lt;&lt; std::endl;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;Data layout : &quot;</span> &lt;&lt; common_params.data_layout &lt;&lt; std::endl;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;Tuner enabled? : &quot;</span> &lt;&lt; (common_params.enable_tuner ? true_str : false_str) &lt;&lt; std::endl;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;Cache enabled? : &quot;</span> &lt;&lt; (common_params.enable_cl_cache ? true_str : false_str) &lt;&lt; std::endl;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;Tuner mode : &quot;</span> &lt;&lt; common_params.tuner_mode &lt;&lt; std::endl;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;Tuner file : &quot;</span> &lt;&lt; common_params.tuner_file &lt;&lt; std::endl;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;MLGO file : &quot;</span> &lt;&lt; common_params.mlgo_file &lt;&lt; std::endl;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;Fast math enabled? : &quot;</span> &lt;&lt; (common_params.fast_math_hint == FastMathHint::Enabled ? true_str : false_str) &lt;&lt; std::endl;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keywordflow">if</span>(!common_params.data_path.empty())</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    {</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        os &lt;&lt; <span class="stringliteral">&quot;Data path : &quot;</span> &lt;&lt; common_params.data_path &lt;&lt; std::endl;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    }</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keywordflow">if</span>(!common_params.image.empty())</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    {</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        os &lt;&lt; <span class="stringliteral">&quot;Image file : &quot;</span> &lt;&lt; common_params.image &lt;&lt; std::endl;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    }</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keywordflow">if</span>(!common_params.labels.empty())</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    {</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        os &lt;&lt; <span class="stringliteral">&quot;Labels file : &quot;</span> &lt;&lt; common_params.labels &lt;&lt; std::endl;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    }</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keywordflow">if</span>(!common_params.validation_file.empty())</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    {</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        os &lt;&lt; <span class="stringliteral">&quot;Validation range : &quot;</span> &lt;&lt; common_params.validation_range_start &lt;&lt; <span class="stringliteral">&quot;-&quot;</span> &lt;&lt; common_params.validation_range_end &lt;&lt; std::endl;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        os &lt;&lt; <span class="stringliteral">&quot;Validation file : &quot;</span> &lt;&lt; common_params.validation_file &lt;&lt; std::endl;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <span class="keywordflow">if</span>(!common_params.validation_path.empty())</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        {</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;Validation path : &quot;</span> &lt;&lt; common_params.validation_path &lt;&lt; std::endl;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        }</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    }</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aaea51d53fd1d57be4dde4e38874d9019"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaea51d53fd1d57be4dde4e38874d9019">&#9670;&nbsp;</a></span>operator<<() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::utils::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1utils.xhtml#a52b975f9f11b484d21969f9a8fefb29d">ConvolutionPaddingMode</a>&#160;</td>
          <td class="paramname"><em>Mode</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the ConvolutionPaddingMode type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">Mode</td><td>ConvolutionPaddingMode to output</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Modified output stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="graph__validate__utils_8h_source.xhtml#l00085">85</a> of file <a class="el" href="graph__validate__utils_8h_source.xhtml">graph_validate_utils.h</a>.</p>

<p class="reference">References <a class="el" href="namespacearm__compute_1_1utils.xhtml#a52b975f9f11b484d21969f9a8fefb29dae1ba155a9f2e8c3be94020eef32a0301">Manual</a>, <a class="el" href="namespacearm__compute_1_1utils.xhtml#a52b975f9f11b484d21969f9a8fefb29dac90a13d8ec8fe53c6bb33fe10af6f2fe">Same</a>, and <a class="el" href="namespacearm__compute_1_1utils.xhtml#a52b975f9f11b484d21969f9a8fefb29da3ac705f2acd51a4613f9188c05c91d0d">Valid</a>.</p>
<div class="fragment"><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;{</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keywordflow">switch</span>(Mode)</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    {</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <span class="keywordflow">case</span> ConvolutionPaddingMode::Valid:</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;Valid&quot;</span>;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="keywordflow">case</span> ConvolutionPaddingMode::Same:</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;Same&quot;</span>;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="keywordflow">case</span> ConvolutionPaddingMode::Manual:</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;Manual&quot;</span>;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            <span class="keywordflow">throw</span> std::invalid_argument(<span class="stringliteral">&quot;Unsupported padding mode format&quot;</span>);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    }</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a96696b615d35757e96ea6310297f8ba5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a96696b615d35757e96ea6310297f8ba5">&#9670;&nbsp;</a></span>operator>>()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::istream&amp; arm_compute::utils::operator&gt;&gt; </td>
          <td>(</td>
          <td class="paramtype">::std::istream &amp;&#160;</td>
          <td class="paramname"><em>stream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1utils.xhtml#a52b975f9f11b484d21969f9a8fefb29d">ConvolutionPaddingMode</a> &amp;&#160;</td>
          <td class="paramname"><em>Mode</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Stream Input operator for the ConvolutionPaddingMode type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">stream</td><td>Input stream. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">Mode</td><td>Convolution parameters to output</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>input stream. </dd></dl>

<p class="definition">Definition at line <a class="el" href="graph__validate__utils_8h_source.xhtml#l00052">52</a> of file <a class="el" href="graph__validate__utils_8h_source.xhtml">graph_validate_utils.h</a>.</p>

<p class="reference">References <a class="el" href="namespacearm__compute_1_1utils.xhtml#a52b975f9f11b484d21969f9a8fefb29dae1ba155a9f2e8c3be94020eef32a0301">Manual</a>, <a class="el" href="namespacearm__compute_1_1utils.xhtml#a52b975f9f11b484d21969f9a8fefb29dac90a13d8ec8fe53c6bb33fe10af6f2fe">Same</a>, <a class="el" href="_utility_8h_source.xhtml#l00206">arm_compute::utility::tolower()</a>, and <a class="el" href="namespacearm__compute_1_1utils.xhtml#a52b975f9f11b484d21969f9a8fefb29da3ac705f2acd51a4613f9188c05c91d0d">Valid</a>.</p>
<div class="fragment"><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;{</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> std::map&lt;std::string, ConvolutionPaddingMode&gt; modes =</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    {</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        { <span class="stringliteral">&quot;valid&quot;</span>, ConvolutionPaddingMode::Valid },</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        { <span class="stringliteral">&quot;same&quot;</span>, ConvolutionPaddingMode::Same },</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        { <span class="stringliteral">&quot;manual&quot;</span>, ConvolutionPaddingMode::Manual }</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    };</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    std::string value;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    stream &gt;&gt; value;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_EXCEPTIONS_DISABLED</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keywordflow">try</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    {</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_EXCEPTIONS_DISABLED */</span><span class="preprocessor"></span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        Mode = modes.at(<a class="code" href="namespacearm__compute_1_1utility.xhtml#abb96ad5c7071ec3a47ea5f07e817a636">arm_compute::utility::tolower</a>(value));</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_EXCEPTIONS_DISABLED</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    }</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordflow">catch</span>(<span class="keyword">const</span> std::out_of_range &amp;)</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    {</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keywordflow">throw</span> std::invalid_argument(value);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    }</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_EXCEPTIONS_DISABLED */</span><span class="preprocessor"></span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordflow">return</span> stream;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1utility_xhtml_abb96ad5c7071ec3a47ea5f07e817a636"><div class="ttname"><a href="namespacearm__compute_1_1utility.xhtml#abb96ad5c7071ec3a47ea5f07e817a636">arm_compute::utility::tolower</a></div><div class="ttdeci">std::string tolower(std::string string)</div><div class="ttdoc">Convert string to lower case. </div><div class="ttdef"><b>Definition:</b> <a href="_utility_8h_source.xhtml#l00206">Utility.h:206</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac936cf76357103ce35d91cdcf75d71cc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac936cf76357103ce35d91cdcf75d71cc">&#9670;&nbsp;</a></span>parse_npy_header()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">npy::header_t parse_npy_header </td>
          <td>(</td>
          <td class="paramtype">std::ifstream &amp;&#160;</td>
          <td class="paramname"><em>fs</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Parse the npy header from an input file stream. </p>
<p>At the end of the execution, the file position pointer will be located at the first pixel stored in the npy file //TODO</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">fs</td><td>Input file stream to parse</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The width and height stored in the header of the NPY file </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_utils_8cpp_source.xhtml#l00233">233</a> of file <a class="el" href="utils_2_utils_8cpp_source.xhtml">Utils.cpp</a>.</p>

<p class="reference">References <a class="el" href="_m_l_g_o_parser_8cpp_source.xhtml#l00481">arm_compute::mlgo::parser::header()</a>, <a class="el" href="reference_2_reverse_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::reverse()</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">arm_compute::test::validation::shape</a>.</p>

<p class="reference">Referenced by <a class="el" href="utils_2_utils_8h_source.xhtml#l00298">NPYLoader::open()</a>, and <a class="el" href="utils_2_utils_8h_source.xhtml#l00107">run_example()</a>.</p>
<div class="fragment"><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;{</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="comment">// Read header</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    std::string header_s = npy::read_header(fs);</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="comment">// Parse header</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    npy::header_t <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a723a2d3874520624df4c3214ef0ec420">header</a> = npy::parse_header(header_s);</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keywordtype">bool</span> fortran_order = <span class="keyword">false</span>;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    std::vector&lt;unsigned long&gt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a> = header.shape;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a1936f5feb8c9357acc4555686d4e5cf2">std::reverse</a>(shape.begin(), shape.end());</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <span class="keywordflow">return</span> npy::header_t{ header.dtype, fortran_order, shape };</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_a1936f5feb8c9357acc4555686d4e5cf2"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a1936f5feb8c9357acc4555686d4e5cf2">arm_compute::test::validation::reference::reverse</a></div><div class="ttdeci">SimpleTensor&lt; T &gt; reverse(const SimpleTensor&lt; T &gt; &amp;src, const SimpleTensor&lt; uint32_t &gt; &amp;axis)</div><div class="ttdef"><b>Definition:</b> <a href="reference_2_reverse_8cpp_source.xhtml#l00038">Reverse.cpp:38</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a45cde9abb508c62d67c3bb2b9bf566a5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">arm_compute::test::validation::shape</a></div><div class="ttdeci">shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">DFT.cpp:115</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1mlgo_1_1parser_xhtml_a723a2d3874520624df4c3214ef0ec420"><div class="ttname"><a href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a723a2d3874520624df4c3214ef0ec420">arm_compute::mlgo::parser::header</a></div><div class="ttdeci">void header(TokenStream &amp;in, bool &amp;valid)</div><div class="ttdef"><b>Definition:</b> <a href="_m_l_g_o_parser_8cpp_source.xhtml#l00481">MLGOParser.cpp:481</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3aa8f5f1b94f88fdf5b43a53e29379cf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3aa8f5f1b94f88fdf5b43a53e29379cf">&#9670;&nbsp;</a></span>parse_ppm_header()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::tuple&lt; unsigned int, unsigned int, int &gt; parse_ppm_header </td>
          <td>(</td>
          <td class="paramtype">std::ifstream &amp;&#160;</td>
          <td class="paramname"><em>fs</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Parse the ppm header from an input file stream. </p>
<p>At the end of the execution, the file position pointer will be located at the first pixel stored in the ppm file</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">fs</td><td>Input file stream to parse</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The width, height and max value stored in the header of the PPM file </dd></dl>

<p class="definition">Definition at line <a class="el" href="utils_2_utils_8cpp_source.xhtml#l00202">202</a> of file <a class="el" href="utils_2_utils_8cpp_source.xhtml">Utils.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00456">ARM_COMPUTE_ERROR_ON_MSG</a>, and <a class="el" href="_error_8h_source.xhtml#l00152">ARM_COMPUTE_UNUSED</a>.</p>

<p class="reference">Referenced by <a class="el" href="_image_loader_8h_source.xhtml#l00381">PPMLoader::open()</a>, and <a class="el" href="utils_2_utils_8h_source.xhtml#l00107">run_example()</a>.</p>
<div class="fragment"><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;{</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="comment">// Check the PPM magic number is valid</span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    std::array&lt;char, 2&gt; magic_number{ { 0 } };</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    fs &gt;&gt; magic_number[0] &gt;&gt; magic_number[1];</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(magic_number[0] != <span class="charliteral">&#39;P&#39;</span> || magic_number[1] != <span class="charliteral">&#39;6&#39;</span>, <span class="stringliteral">&quot;Invalid file type&quot;</span>);</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(magic_number);</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    discard_comments_and_spaces(fs);</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> width = 0;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    fs &gt;&gt; width;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    discard_comments_and_spaces(fs);</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> height = 0;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    fs &gt;&gt; height;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    discard_comments_and_spaces(fs);</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="keywordtype">int</span> max_val = 0;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    fs &gt;&gt; max_val;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    discard_comments(fs);</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(isspace(fs.peek()) == 0, <span class="stringliteral">&quot;Invalid PPM header&quot;</span>);</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    fs.ignore(1);</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="keywordflow">return</span> std::make_tuple(width, height, max_val);</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a0b0eb3235749a2909dc5a101afe59a1b"><div class="ttname"><a href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond, msg)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00456">Error.h:456</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a8249d4be92399495c0d3c9a5004aeb40"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8249d4be92399495c0d3c9a5004aeb40">&#9670;&nbsp;</a></span>run_example() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int run_example </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char **&#160;</td>
          <td class="paramname"><em>argv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1utils_1_1_example.xhtml">Example</a> &gt;&#160;</td>
          <td class="paramname"><em>example</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Run an example and handle the potential exceptions it throws. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">argc</td><td>Number of command line arguments </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">argv</td><td>Command line arguments </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">example</td><td><a class="el" href="classarm__compute_1_1utils_1_1_example.xhtml" title="Abstract Example class. ">Example</a> to run </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="benchmark__examples_2_run_example_8cpp_source.xhtml#l00094">94</a> of file <a class="el" href="benchmark__examples_2_run_example_8cpp_source.xhtml">RunExample.cpp</a>.</p>

<p class="reference">References <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba18ff74f43da410c5529f7d6fca84f115">TestCaseFactory::ACTIVE</a>, <a class="el" href="_command_line_parser_8h_source.xhtml#l00104">CommandLineParser::add_option()</a>, <a class="el" href="_framework_8cpp_source.xhtml#l00673">Framework::add_printer()</a>, <a class="el" href="_framework_8h_source.xhtml#l00374">Framework::add_test_case()</a>, <a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#a7edf31944a6144ffd493d2f9a7bfb5cfa5fb1f955b45e38e31789286a1790398d">arm_compute::test::framework::ALL</a>, <a class="el" href="_error_8h_source.xhtml#l00456">ARM_COMPUTE_ERROR_ON_MSG</a>, <a class="el" href="namespacearm__compute.xhtml#a64c17a5a42d2499a1626222ff9753b4d">arm_compute::build_information()</a>, <a class="el" href="namespacearm__compute.xhtml#a94eb95e47316e7dc5af7615592d26bdda0a6798f16ee70831a001417215fb28d1">arm_compute::Clvk</a>, <a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a73e99d350a4aa6f1a5af04ec29173f73">arm_compute::test::framework::CONFIG</a>, <a class="el" href="runtime_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00126">arm_compute::create_opencl_context_and_device()</a>, <a class="el" href="_common_options_8cpp_source.xhtml#l00102">CommonOptions::create_printers()</a>, <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00110">CLScheduler::default_init_with_context()</a>, <a class="el" href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00039">CLKernelLibrary::get()</a>, <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00103">CLScheduler::get()</a>, <a class="el" href="_framework_8cpp_source.xhtml#l00124">Framework::get()</a>, <a class="el" href="_common_options_8h_source.xhtml#l00074">CommonOptions::help</a>, <a class="el" href="_framework_8cpp_source.xhtml#l00130">Framework::init()</a>, <a class="el" href="_framework_8h_source.xhtml#l00059">FrameworkConfig::instruments</a>, <a class="el" href="_common_options_8h_source.xhtml#l00075">CommonOptions::instruments</a>, <a class="el" href="_option_8h_source.xhtml#l00135">Option::is_set()</a>, <a class="el" href="_common_options_8h_source.xhtml#l00076">CommonOptions::iterations</a>, <a class="el" href="_framework_8h_source.xhtml#l00065">FrameworkConfig::log_level</a>, <a class="el" href="_common_options_8h_source.xhtml#l00079">CommonOptions::log_level</a>, <a class="el" href="namespacearm__compute.xhtml#a94eb95e47316e7dc5af7615592d26bdda925641e0b76c28cc940e8f3ca178d826">arm_compute::Native</a>, <a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9ab50339a10e1de285ac99d4c3990b8693">arm_compute::test::framework::NONE</a>, <a class="el" href="_framework_8h_source.xhtml#l00063">FrameworkConfig::num_iterations</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00203">arm_compute::opencl_is_available()</a>, <a class="el" href="_command_line_parser_8h_source.xhtml#l00117">CommandLineParser::parse()</a>, <a class="el" href="_gemm_tuner_8py_source.xhtml#l00640">GemmTuner::parser</a>, <a class="el" href="_command_line_parser_8h_source.xhtml#l00218">CommandLineParser::print_help()</a>, <a class="el" href="_framework_8cpp_source.xhtml#l00543">Framework::run()</a>, <a class="el" href="_option_8h_source.xhtml#l00125">Option::set_help()</a>, <a class="el" href="_framework_8cpp_source.xhtml#l00265">Framework::set_throw_errors()</a>, <a class="el" href="_common_options_8h_source.xhtml#l00080">CommonOptions::throw_errors</a>, <a class="el" href="_string_support_8h_source.xhtml#l00168">arm_compute::support::cpp11::to_string()</a>, <a class="el" href="classarm__compute_1_1utils_1_1_enum_option.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">EnumOption&lt; T &gt;::value()</a>, <a class="el" href="_enum_list_option_8h_source.xhtml#l00144">EnumListOption&lt; T &gt;::value()</a>, and <a class="el" href="_simple_option_8h_source.xhtml#l00112">SimpleOption&lt; T &gt;::value()</a>.</p>

<p class="reference">Referenced by <a class="el" href="utils_2_utils_8h_source.xhtml#l00092">Example::do_teardown()</a>, <a class="el" href="_validate_example_8h_source.xhtml#l00069">ValidateExample::print_parameters()</a>, and <a class="el" href="utils_2_utils_8h_source.xhtml#l00107">run_example()</a>.</p>
<div class="fragment"><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;{</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <a class="code" href="classarm__compute_1_1utils_1_1_command_line_parser.xhtml">utils::CommandLineParser</a> <a class="code" href="namespace_gemm_tuner.xhtml#a90eee7a4677ca8b1ed116364a24367f9">parser</a>;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_common_options.xhtml">framework::CommonOptions</a> options(parser);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keyword">auto</span>                     example_args = parser.<a class="code" href="classarm__compute_1_1utils_1_1_command_line_parser.xhtml#a68e2f681ec6686a130c4af96caf4d9fc">add_option</a>&lt;<a class="code" href="classarm__compute_1_1utils_1_1_list_option.xhtml">utils::ListOption&lt;std::string&gt;</a>&gt;(<span class="stringliteral">&quot;example_args&quot;</span>);</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    example_args-&gt;<a class="code" href="classarm__compute_1_1utils_1_1_option.xhtml#a48a2672f362eeed9a3e93403f4d3de37">set_help</a>(<span class="stringliteral">&quot;Arguments to pass to the example separated by commas (e.g: arg0,arg1,arg2)&quot;</span>);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml">framework::Framework</a> &amp;framework = framework::Framework::get();</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    parser.<a class="code" href="classarm__compute_1_1utils_1_1_command_line_parser.xhtml#a66fa8f960eac1bf561ba2cb8be0cc58a">parse</a>(argc, argv);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keywordflow">if</span>(options.help-&gt;is_set() &amp;&amp; options.help-&gt;value())</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    {</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        parser.<a class="code" href="classarm__compute_1_1utils_1_1_command_line_parser.xhtml#aa5da3e535faa6847a0da40fe7fb28383">print_help</a>(argv[0]);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    }</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    std::vector&lt;std::unique_ptr&lt;framework::Printer&gt;&gt; printers = options.create_printers();</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    g_example                                                 = std::move(example);</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    g_example_argv.clear();</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    g_example_argv.emplace_back(argv[0]);</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;arg : example_args-&gt;value())</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    {</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        g_example_argv.emplace_back(const_cast&lt;char *&gt;(arg.c_str())); <span class="comment">// NOLINT</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    }</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keywordflow">if</span>(options.log_level-&gt;value() &gt; framework::LogLevel::NONE)</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    {</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;p : printers)</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        {</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            p-&gt;print_global_header();</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        }</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    }</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="preprocessor">#ifdef ARM_COMPUTE_CL</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_heuristics_handle.xhtml">CLGEMMHeuristicsHandle</a> gemm_h;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute.xhtml#a5f49decb4b0a74d5361686ab45db8961">opencl_is_available</a>())</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    {</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a94eb95e47316e7dc5af7615592d26bdd">CLBackendType</a> backend_type = CLBackendType::Native;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;arg : example_args-&gt;value())</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        {</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            <span class="keywordflow">if</span>(arg.find(<span class="stringliteral">&quot;--target=clvk&quot;</span>) != std::string::npos)</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            {</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                backend_type = CLBackendType::Clvk;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            }</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        }</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        <span class="keyword">auto</span> ctx_dev_err = <a class="code" href="namespacearm__compute.xhtml#a419153497f83b7db0c19112371b10a3f">create_opencl_context_and_device</a>(backend_type);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(std::get&lt;2&gt;(ctx_dev_err) != CL_SUCCESS, <span class="stringliteral">&quot;Failed to create OpenCL context&quot;</span>);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        CLScheduler::get()</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        .default_init_with_context(std::get&lt;1&gt;(ctx_dev_err), std::get&lt;0&gt;(ctx_dev_err), <span class="keyword">nullptr</span>, &amp;gemm_h);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    }</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_CL */</span><span class="preprocessor"></span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keywordflow">if</span>(options.log_level-&gt;value() &gt;= framework::LogLevel::CONFIG)</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    {</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;p : printers)</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        {</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            p-&gt;print_entry(<span class="stringliteral">&quot;Version&quot;</span>, <a class="code" href="namespacearm__compute.xhtml#a64c17a5a42d2499a1626222ff9753b4d">build_information</a>());</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            p-&gt;print_entry(<span class="stringliteral">&quot;CommandLine&quot;</span>, command_line(argc, argv));</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="preprocessor">#ifdef ARM_COMPUTE_CL</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute.xhtml#a5f49decb4b0a74d5361686ab45db8961">opencl_is_available</a>())</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            {</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                p-&gt;print_entry(<span class="stringliteral">&quot;CL_DEVICE_VERSION&quot;</span>, CLKernelLibrary::get().get_device_version());</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            }</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            {</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                p-&gt;print_entry(<span class="stringliteral">&quot;CL_DEVICE_VERSION&quot;</span>, <span class="stringliteral">&quot;Unavailable&quot;</span>);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;            }</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_CL */</span><span class="preprocessor"></span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            p-&gt;print_entry(<span class="stringliteral">&quot;Iterations&quot;</span>, <a class="code" href="namespacearm__compute_1_1mlgo.xhtml#abd50adb0aaecb76f3d753cdf3785872e">support::cpp11::to_string</a>(options.iterations-&gt;value()));</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        }</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    }</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="comment">// Initialize framework</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_framework_config.xhtml">framework::FrameworkConfig</a> fconfig;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    fconfig.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_framework_config.xhtml#a4ad3b7ba69599b41ab0954a39d7e7cbc">instruments</a>    = options.instruments-&gt;value();</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    fconfig.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_framework_config.xhtml#ab702e2f7530d6172eea3780d8923bd71">num_iterations</a> = options.iterations-&gt;value();</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    fconfig.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_framework_config.xhtml#a16fda368866c2a2e2d5a54eda52050f9">log_level</a>      = options.log_level-&gt;value();</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    framework.<a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a01e3aa67ceaeae837e9a68050d850724">init</a>(fconfig);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;p : printers)</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    {</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        framework.<a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a5f16ced78873ee3a193490197fbf57a5">add_printer</a>(p.get());</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    }</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    framework.<a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a5e61ba4403f0d2bd4f755f59193af692">set_throw_errors</a>(options.throw_errors-&gt;value());</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1framework_1_1detail_1_1_test_suite_registrar.xhtml">arm_compute::test::framework::detail::TestSuiteRegistrar</a> suite{ <span class="stringliteral">&quot;Examples&quot;</span> };</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="preprocessor">#ifdef BARE_METAL</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    framework.<a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#ad8e7764125fcd790e0b151d26cfe949c">add_test_case</a>&lt;ExampleTest&gt;(argv[0], framework::DatasetMode::ALL, <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba18ff74f43da410c5529f7d6fca84f115">arm_compute::test::framework::TestCaseFactory::Status::ACTIVE</a>);</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="preprocessor">#else  </span><span class="comment">/* BARE_METAL */</span><span class="preprocessor"></span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    framework.<a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#ad8e7764125fcd790e0b151d26cfe949c">add_test_case</a>&lt;ExampleTest&gt;(basename(argv[0]), framework::DatasetMode::ALL, <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba18ff74f43da410c5529f7d6fca84f115">arm_compute::test::framework::TestCaseFactory::Status::ACTIVE</a>);</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* BARE_METAL */</span><span class="preprocessor"></span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="comment">//func(argc, argv);</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="keywordtype">bool</span> success = framework.<a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a149ad6701e3e2414cb566bb414029841">run</a>();</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="keywordflow">if</span>(options.log_level-&gt;value() &gt; framework::LogLevel::NONE)</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    {</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;p : printers)</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        {</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            p-&gt;print_global_footer();</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        }</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    }</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="keywordflow">return</span> (success ? 0 : 1);</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;}</div><div class="ttc" id="structarm__compute_1_1test_1_1framework_1_1_framework_config_xhtml"><div class="ttname"><a href="structarm__compute_1_1test_1_1framework_1_1_framework_config.xhtml">arm_compute::test::framework::FrameworkConfig</a></div><div class="ttdoc">Framework configuration structure. </div><div class="ttdef"><b>Definition:</b> <a href="_framework_8h_source.xhtml#l00057">Framework.h:57</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1framework_1_1_framework_config_xhtml_ab702e2f7530d6172eea3780d8923bd71"><div class="ttname"><a href="structarm__compute_1_1test_1_1framework_1_1_framework_config.xhtml#ab702e2f7530d6172eea3780d8923bd71">arm_compute::test::framework::FrameworkConfig::num_iterations</a></div><div class="ttdeci">int num_iterations</div><div class="ttdoc">Number of iterations per test. </div><div class="ttdef"><b>Definition:</b> <a href="_framework_8h_source.xhtml#l00063">Framework.h:63</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_framework_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml">arm_compute::test::framework::Framework</a></div><div class="ttdoc">Main framework class. </div><div class="ttdef"><b>Definition:</b> <a href="_framework_8h_source.xhtml#l00095">Framework.h:95</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_framework_xhtml_a5e61ba4403f0d2bd4f755f59193af692"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a5e61ba4403f0d2bd4f755f59193af692">arm_compute::test::framework::Framework::set_throw_errors</a></div><div class="ttdeci">void set_throw_errors(bool throw_errors)</div><div class="ttdoc">Set whether errors are caught or thrown by the framework. </div><div class="ttdef"><b>Definition:</b> <a href="_framework_8cpp_source.xhtml#l00265">Framework.cpp:265</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1mlgo_xhtml_abd50adb0aaecb76f3d753cdf3785872e"><div class="ttname"><a href="namespacearm__compute_1_1mlgo.xhtml#abd50adb0aaecb76f3d753cdf3785872e">arm_compute::mlgo::to_string</a></div><div class="ttdeci">std::string to_string(const GEMMConfigNative &amp;config)</div><div class="ttdef"><b>Definition:</b> <a href="src_2runtime_2_c_l_2mlgo_2_utils_8cpp_source.xhtml#l00156">Utils.cpp:156</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_framework_xhtml_ad8e7764125fcd790e0b151d26cfe949c"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#ad8e7764125fcd790e0b151d26cfe949c">arm_compute::test::framework::Framework::add_test_case</a></div><div class="ttdeci">void add_test_case(std::string test_name, DatasetMode mode, TestCaseFactory::Status status)</div><div class="ttdoc">Add a test case to the framework. </div><div class="ttdef"><b>Definition:</b> <a href="_framework_8h_source.xhtml#l00374">Framework.h:374</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a419153497f83b7db0c19112371b10a3f"><div class="ttname"><a href="namespacearm__compute.xhtml#a419153497f83b7db0c19112371b10a3f">arm_compute::create_opencl_context_and_device</a></div><div class="ttdeci">std::tuple&lt; cl::Context, cl::Device, cl_int &gt; create_opencl_context_and_device(CLBackendType cl_backend_type)</div><div class="ttdoc">This function creates an OpenCL context and a device. </div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00126">CLHelpers.cpp:126</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_command_line_parser_xhtml"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_command_line_parser.xhtml">arm_compute::utils::CommandLineParser</a></div><div class="ttdoc">Class to parse command line arguments. </div><div class="ttdef"><b>Definition:</b> <a href="_command_line_parser_8h_source.xhtml#l00045">CommandLineParser.h:45</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_list_option_xhtml"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_list_option.xhtml">arm_compute::utils::ListOption</a></div><div class="ttdoc">Implementation of an option that accepts any number of values. </div><div class="ttdef"><b>Definition:</b> <a href="_list_option_8h_source.xhtml#l00041">ListOption.h:41</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_command_line_parser_xhtml_a68e2f681ec6686a130c4af96caf4d9fc"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_command_line_parser.xhtml#a68e2f681ec6686a130c4af96caf4d9fc">arm_compute::utils::CommandLineParser::add_option</a></div><div class="ttdeci">T * add_option(const std::string &amp;name, As &amp;&amp;... args)</div><div class="ttdoc">Function to add a new option to the parser. </div><div class="ttdef"><b>Definition:</b> <a href="_command_line_parser_8h_source.xhtml#l00104">CommandLineParser.h:104</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_test_case_factory_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70ba18ff74f43da410c5529f7d6fca84f115"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba18ff74f43da410c5529f7d6fca84f115">arm_compute::test::framework::TestCaseFactory::Status::ACTIVE</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1framework_1_1_framework_config_xhtml_a16fda368866c2a2e2d5a54eda52050f9"><div class="ttname"><a href="structarm__compute_1_1test_1_1framework_1_1_framework_config.xhtml#a16fda368866c2a2e2d5a54eda52050f9">arm_compute::test::framework::FrameworkConfig::log_level</a></div><div class="ttdeci">LogLevel log_level</div><div class="ttdoc">Verbosity of the output. </div><div class="ttdef"><b>Definition:</b> <a href="_framework_8h_source.xhtml#l00065">Framework.h:65</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_framework_xhtml_a149ad6701e3e2414cb566bb414029841"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a149ad6701e3e2414cb566bb414029841">arm_compute::test::framework::Framework::run</a></div><div class="ttdeci">bool run()</div><div class="ttdoc">Run all enabled test cases. </div><div class="ttdef"><b>Definition:</b> <a href="_framework_8cpp_source.xhtml#l00543">Framework.cpp:543</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_command_line_parser_xhtml_a66fa8f960eac1bf561ba2cb8be0cc58a"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_command_line_parser.xhtml#a66fa8f960eac1bf561ba2cb8be0cc58a">arm_compute::utils::CommandLineParser::parse</a></div><div class="ttdeci">void parse(int argc, char **argv)</div><div class="ttdoc">Parses the command line arguments and updates the options accordingly. </div><div class="ttdef"><b>Definition:</b> <a href="_command_line_parser_8h_source.xhtml#l00117">CommandLineParser.h:117</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1framework_1_1_framework_config_xhtml_a4ad3b7ba69599b41ab0954a39d7e7cbc"><div class="ttname"><a href="structarm__compute_1_1test_1_1framework_1_1_framework_config.xhtml#a4ad3b7ba69599b41ab0954a39d7e7cbc">arm_compute::test::framework::FrameworkConfig::instruments</a></div><div class="ttdeci">std::vector&lt; framework::InstrumentsDescription &gt; instruments</div><div class="ttdoc">Instrument types that will be used for benchmarking. </div><div class="ttdef"><b>Definition:</b> <a href="_framework_8h_source.xhtml#l00059">Framework.h:59</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a0b0eb3235749a2909dc5a101afe59a1b"><div class="ttname"><a href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond, msg)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00456">Error.h:456</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1detail_1_1_test_suite_registrar_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1detail_1_1_test_suite_registrar.xhtml">arm_compute::test::framework::detail::TestSuiteRegistrar</a></div><div class="ttdoc">Helper class to statically begin and end a test suite. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2framework_2_registrars_8h_source.xhtml#l00066">Registrars.h:66</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_g_e_m_m_heuristics_handle_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_g_e_m_m_heuristics_handle.xhtml">arm_compute::CLGEMMHeuristicsHandle</a></div><div class="ttdoc">Handle for loading and retrieving GEMM heuristics. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_g_e_m_m_heuristics_handle_8h_source.xhtml#l00038">CLGEMMHeuristicsHandle.h:38</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a94eb95e47316e7dc5af7615592d26bdd"><div class="ttname"><a href="namespacearm__compute.xhtml#a94eb95e47316e7dc5af7615592d26bdd">arm_compute::CLBackendType</a></div><div class="ttdeci">CLBackendType</div><div class="ttdoc">List the possible OpenCL backends. </div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2_c_l_types_8h_source.xhtml#l00055">CLTypes.h:55</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a64c17a5a42d2499a1626222ff9753b4d"><div class="ttname"><a href="namespacearm__compute.xhtml#a64c17a5a42d2499a1626222ff9753b4d">arm_compute::build_information</a></div><div class="ttdeci">std::string build_information()</div><div class="ttdoc">Returns the arm_compute library build information. </div></div>
<div class="ttc" id="namespace_gemm_tuner_xhtml_a90eee7a4677ca8b1ed116364a24367f9"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a90eee7a4677ca8b1ed116364a24367f9">GemmTuner.parser</a></div><div class="ttdeci">parser</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00640">GemmTuner.py:640</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_framework_xhtml_a5f16ced78873ee3a193490197fbf57a5"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a5f16ced78873ee3a193490197fbf57a5">arm_compute::test::framework::Framework::add_printer</a></div><div class="ttdeci">void add_printer(Printer *printer)</div><div class="ttdoc">Set the printer used for the output of test results. </div><div class="ttdef"><b>Definition:</b> <a href="_framework_8cpp_source.xhtml#l00673">Framework.cpp:673</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_command_line_parser_xhtml_aa5da3e535faa6847a0da40fe7fb28383"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_command_line_parser.xhtml#aa5da3e535faa6847a0da40fe7fb28383">arm_compute::utils::CommandLineParser::print_help</a></div><div class="ttdeci">void print_help(const std::string &amp;program_name) const</div><div class="ttdoc">Prints a help message for all configured options. </div><div class="ttdef"><b>Definition:</b> <a href="_command_line_parser_8h_source.xhtml#l00218">CommandLineParser.h:218</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_common_options_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_common_options.xhtml">arm_compute::test::framework::CommonOptions</a></div><div class="ttdoc">Common command line options used to configure the framework. </div><div class="ttdef"><b>Definition:</b> <a href="_common_options_8h_source.xhtml#l00054">CommonOptions.h:54</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_option_xhtml_a48a2672f362eeed9a3e93403f4d3de37"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_option.xhtml#a48a2672f362eeed9a3e93403f4d3de37">arm_compute::utils::Option::set_help</a></div><div class="ttdeci">void set_help(std::string help)</div><div class="ttdoc">Set the help message for the option. </div><div class="ttdef"><b>Definition:</b> <a href="_option_8h_source.xhtml#l00125">Option.h:125</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_framework_xhtml_a01e3aa67ceaeae837e9a68050d850724"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a01e3aa67ceaeae837e9a68050d850724">arm_compute::test::framework::Framework::init</a></div><div class="ttdeci">void init(const FrameworkConfig &amp;config)</div><div class="ttdoc">Init the framework. </div><div class="ttdef"><b>Definition:</b> <a href="_framework_8cpp_source.xhtml#l00130">Framework.cpp:130</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5f49decb4b0a74d5361686ab45db8961"><div class="ttname"><a href="namespacearm__compute.xhtml#a5f49decb4b0a74d5361686ab45db8961">arm_compute::opencl_is_available</a></div><div class="ttdeci">bool opencl_is_available()</div><div class="ttdoc">Check if OpenCL is available. </div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8cpp_source.xhtml#l00203">OpenCL.cpp:203</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac6126fda74b244d4c9a75328a3f436a3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac6126fda74b244d4c9a75328a3f436a3">&#9670;&nbsp;</a></span>run_example() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::utils::run_example </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char **&#160;</td>
          <td class="paramname"><em>argv</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="utils_2_utils_8h_source.xhtml#l00107">107</a> of file <a class="el" href="utils_2_utils_8h_source.xhtml">Utils.h</a>.</p>

<p class="reference">References <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, <a class="el" href="utils_2_utils_8cpp_source.xhtml#l00130">draw_detection_rectangle()</a>, <a class="el" href="utils_2_utils_8cpp_source.xhtml#l00167">get_image_type_from_file()</a>, <a class="el" href="utils_2_utils_8cpp_source.xhtml#l00233">parse_npy_header()</a>, <a class="el" href="utils_2_utils_8cpp_source.xhtml#l00202">parse_ppm_header()</a>, <a class="el" href="benchmark__examples_2_run_example_8cpp_source.xhtml#l00094">run_example()</a>, and <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00066">tensor</a>.</p>
<div class="fragment"><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;{</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1utils.xhtml#ac6126fda74b244d4c9a75328a3f436a3">run_example</a>(argc, argv, std::make_unique&lt;T&gt;());</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1utils_xhtml_ac6126fda74b244d4c9a75328a3f436a3"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#ac6126fda74b244d4c9a75328a3f436a3">arm_compute::utils::run_example</a></div><div class="ttdeci">int run_example(int argc, char **argv)</div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00107">Utils.h:107</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="afdb36468694a529fa7c5389b278aa14b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afdb36468694a529fa7c5389b278aa14b">&#9670;&nbsp;</a></span>run_example() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int run_example </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char **&#160;</td>
          <td class="paramname"><em>argv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1utils_1_1_validate_example.xhtml">ValidateExample</a> &gt;&#160;</td>
          <td class="paramname"><em>example</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Run an example and handle the potential exceptions it throws. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">argc</td><td>Number of command line arguments </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">argv</td><td>Command line arguments </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">example</td><td><a class="el" href="classarm__compute_1_1utils_1_1_example.xhtml" title="Abstract Example class. ">Example</a> to run </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="validate__examples_2_run_example_8cpp_source.xhtml#l00109">109</a> of file <a class="el" href="validate__examples_2_run_example_8cpp_source.xhtml">RunExample.cpp</a>.</p>

<p class="reference">References <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba18ff74f43da410c5529f7d6fca84f115">TestCaseFactory::ACTIVE</a>, <a class="el" href="_command_line_parser_8h_source.xhtml#l00104">CommandLineParser::add_option()</a>, <a class="el" href="_framework_8cpp_source.xhtml#l00673">Framework::add_printer()</a>, <a class="el" href="_framework_8h_source.xhtml#l00374">Framework::add_test_case()</a>, <a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#a7edf31944a6144ffd493d2f9a7bfb5cfa5fb1f955b45e38e31789286a1790398d">arm_compute::test::framework::ALL</a>, <a class="el" href="_error_8h_source.xhtml#l00456">ARM_COMPUTE_ERROR_ON_MSG</a>, <a class="el" href="namespacearm__compute.xhtml#a64c17a5a42d2499a1626222ff9753b4d">arm_compute::build_information()</a>, <a class="el" href="namespacearm__compute.xhtml#a94eb95e47316e7dc5af7615592d26bdda0a6798f16ee70831a001417215fb28d1">arm_compute::Clvk</a>, <a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a73e99d350a4aa6f1a5af04ec29173f73">arm_compute::test::framework::CONFIG</a>, <a class="el" href="runtime_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00126">arm_compute::create_opencl_context_and_device()</a>, <a class="el" href="_common_options_8cpp_source.xhtml#l00102">CommonOptions::create_printers()</a>, <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00110">CLScheduler::default_init_with_context()</a>, <a class="el" href="main_8cpp_source.xhtml#l00079">arm_compute::test::fixed_library</a>, <a class="el" href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00039">CLKernelLibrary::get()</a>, <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00103">CLScheduler::get()</a>, <a class="el" href="_framework_8cpp_source.xhtml#l00124">Framework::get()</a>, <a class="el" href="_common_options_8h_source.xhtml#l00074">CommonOptions::help</a>, <a class="el" href="_framework_8cpp_source.xhtml#l00130">Framework::init()</a>, <a class="el" href="_framework_8h_source.xhtml#l00059">FrameworkConfig::instruments</a>, <a class="el" href="_common_options_8h_source.xhtml#l00075">CommonOptions::instruments</a>, <a class="el" href="_option_8h_source.xhtml#l00135">Option::is_set()</a>, <a class="el" href="_common_options_8h_source.xhtml#l00076">CommonOptions::iterations</a>, <a class="el" href="main_8cpp_source.xhtml#l00076">arm_compute::test::library</a>, <a class="el" href="_framework_8h_source.xhtml#l00065">FrameworkConfig::log_level</a>, <a class="el" href="_common_options_8h_source.xhtml#l00079">CommonOptions::log_level</a>, <a class="el" href="namespacearm__compute.xhtml#a94eb95e47316e7dc5af7615592d26bdda925641e0b76c28cc940e8f3ca178d826">arm_compute::Native</a>, <a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#aca1fd1d8935433e6ba2e3918214e07f9ab50339a10e1de285ac99d4c3990b8693">arm_compute::test::framework::NONE</a>, <a class="el" href="_framework_8h_source.xhtml#l00063">FrameworkConfig::num_iterations</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00203">arm_compute::opencl_is_available()</a>, <a class="el" href="_command_line_parser_8h_source.xhtml#l00117">CommandLineParser::parse()</a>, <a class="el" href="_gemm_tuner_8py_source.xhtml#l00640">GemmTuner::parser</a>, <a class="el" href="_command_line_parser_8h_source.xhtml#l00218">CommandLineParser::print_help()</a>, <a class="el" href="_framework_8cpp_source.xhtml#l00543">Framework::run()</a>, <a class="el" href="_option_8h_source.xhtml#l00125">Option::set_help()</a>, <a class="el" href="_framework_8cpp_source.xhtml#l00265">Framework::set_throw_errors()</a>, <a class="el" href="_common_options_8h_source.xhtml#l00080">CommonOptions::throw_errors</a>, <a class="el" href="_string_support_8h_source.xhtml#l00168">arm_compute::support::cpp11::to_string()</a>, <a class="el" href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00214">arm_compute::validate()</a>, <a class="el" href="classarm__compute_1_1utils_1_1_enum_option.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">EnumOption&lt; T &gt;::value()</a>, <a class="el" href="_enum_list_option_8h_source.xhtml#l00144">EnumListOption&lt; T &gt;::value()</a>, and <a class="el" href="_simple_option_8h_source.xhtml#l00112">SimpleOption&lt; T &gt;::value()</a>.</p>
<div class="fragment"><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;{</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <a class="code" href="classarm__compute_1_1utils_1_1_command_line_parser.xhtml">utils::CommandLineParser</a> <a class="code" href="namespace_gemm_tuner.xhtml#a90eee7a4677ca8b1ed116364a24367f9">parser</a>;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_common_options.xhtml">framework::CommonOptions</a> options(parser);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keyword">auto</span>                     example_args = parser.<a class="code" href="classarm__compute_1_1utils_1_1_command_line_parser.xhtml#a68e2f681ec6686a130c4af96caf4d9fc">add_option</a>&lt;<a class="code" href="classarm__compute_1_1utils_1_1_list_option.xhtml">utils::ListOption&lt;std::string&gt;</a>&gt;(<span class="stringliteral">&quot;example_args&quot;</span>);</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    example_args-&gt;<a class="code" href="classarm__compute_1_1utils_1_1_option.xhtml#a48a2672f362eeed9a3e93403f4d3de37">set_help</a>(<span class="stringliteral">&quot;Arguments to pass to the example separated by commas (e.g: arg0,arg1,arg2)&quot;</span>);</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keyword">auto</span> seed = parser.<a class="code" href="classarm__compute_1_1utils_1_1_command_line_parser.xhtml#a68e2f681ec6686a130c4af96caf4d9fc">add_option</a>&lt;<a class="code" href="classarm__compute_1_1utils_1_1_simple_option.xhtml">utils::SimpleOption&lt;std::random_device::result_type&gt;</a>&gt;(<span class="stringliteral">&quot;seed&quot;</span>, std::random_device()());</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    seed-&gt;set_help(<span class="stringliteral">&quot;Global seed for random number generation&quot;</span>);</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keyword">auto</span> <a class="code" href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">validate</a> = parser.<a class="code" href="classarm__compute_1_1utils_1_1_command_line_parser.xhtml#a68e2f681ec6686a130c4af96caf4d9fc">add_option</a>&lt;<a class="code" href="classarm__compute_1_1utils_1_1_simple_option.xhtml">utils::SimpleOption&lt;int&gt;</a>&gt;(<span class="stringliteral">&quot;validate&quot;</span>, 1);</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">validate</a>-&gt;set_help(<span class="stringliteral">&quot;Enable / disable output validation (0/1)&quot;</span>);</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml">framework::Framework</a> &amp;framework = framework::Framework::get();</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    parser.<a class="code" href="classarm__compute_1_1utils_1_1_command_line_parser.xhtml#a66fa8f960eac1bf561ba2cb8be0cc58a">parse</a>(argc, argv);</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keywordflow">if</span>(options.help-&gt;is_set() &amp;&amp; options.help-&gt;value())</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    {</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        parser.<a class="code" href="classarm__compute_1_1utils_1_1_command_line_parser.xhtml#aa5da3e535faa6847a0da40fe7fb28383">print_help</a>(argv[0]);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    }</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    std::vector&lt;std::unique_ptr&lt;framework::Printer&gt;&gt; printers = options.create_printers();</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    g_example                                                 = std::move(example);</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    g_example_argv.clear();</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    g_example_argv.emplace_back(argv[0]);</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;arg : example_args-&gt;value())</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    {</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        g_example_argv.emplace_back(const_cast&lt;char *&gt;(arg.c_str())); <span class="comment">// NOLINT</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    }</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <a class="code" href="namespacearm__compute_1_1test.xhtml#a71326f0909d77386e29b511e1990a11f">library</a>       = std::make_unique&lt;AssetsLibrary&gt;(<span class="stringliteral">&quot;.&quot;</span> <span class="comment">/* Only using random values */</span>, seed-&gt;value());</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <a class="code" href="namespacearm__compute_1_1test.xhtml#af90c2445eb8a45fd74b11c574c8cb6b9">fixed_library</a> = std::make_unique&lt;AssetsLibrary&gt;(<span class="stringliteral">&quot;.&quot;</span>, fixed_seed);</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="keywordflow">if</span>(options.log_level-&gt;value() &gt; framework::LogLevel::NONE)</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    {</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;p : printers)</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        {</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            p-&gt;print_global_header();</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        }</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    }</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="preprocessor">#ifdef ARM_COMPUTE_CL</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute.xhtml#a5f49decb4b0a74d5361686ab45db8961">opencl_is_available</a>())</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    {</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a94eb95e47316e7dc5af7615592d26bdd">CLBackendType</a> backend_type = CLBackendType::Native;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;arg : example_args-&gt;value())</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        {</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            <span class="keywordflow">if</span>(arg.find(<span class="stringliteral">&quot;--target=clvk&quot;</span>) != std::string::npos)</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            {</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                backend_type = CLBackendType::Clvk;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            }</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        }</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <span class="keyword">auto</span> ctx_dev_err = <a class="code" href="namespacearm__compute.xhtml#a419153497f83b7db0c19112371b10a3f">create_opencl_context_and_device</a>(backend_type);</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(std::get&lt;2&gt;(ctx_dev_err) != CL_SUCCESS, <span class="stringliteral">&quot;Failed to create OpenCL context&quot;</span>);</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        CLScheduler::get().default_init_with_context(std::get&lt;1&gt;(ctx_dev_err), std::get&lt;0&gt;(ctx_dev_err), <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    }</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_CL */</span><span class="preprocessor"></span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keywordflow">if</span>(options.log_level-&gt;value() &gt;= framework::LogLevel::CONFIG)</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    {</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;p : printers)</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        {</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            p-&gt;print_entry(<span class="stringliteral">&quot;Version&quot;</span>, <a class="code" href="namespacearm__compute.xhtml#a64c17a5a42d2499a1626222ff9753b4d">build_information</a>());</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            p-&gt;print_entry(<span class="stringliteral">&quot;CommandLine&quot;</span>, command_line(argc, argv));</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            p-&gt;print_entry(<span class="stringliteral">&quot;Seed&quot;</span>, <a class="code" href="namespacearm__compute_1_1mlgo.xhtml#abd50adb0aaecb76f3d753cdf3785872e">support::cpp11::to_string</a>(seed-&gt;value()));</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="preprocessor">#ifdef ARM_COMPUTE_CL</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute.xhtml#a5f49decb4b0a74d5361686ab45db8961">opencl_is_available</a>())</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            {</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                p-&gt;print_entry(<span class="stringliteral">&quot;CL_DEVICE_VERSION&quot;</span>, CLKernelLibrary::get().get_device_version());</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;            }</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            {</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                p-&gt;print_entry(<span class="stringliteral">&quot;CL_DEVICE_VERSION&quot;</span>, <span class="stringliteral">&quot;Unavailable&quot;</span>);</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;            }</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_CL */</span><span class="preprocessor"></span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;            p-&gt;print_entry(<span class="stringliteral">&quot;Iterations&quot;</span>, <a class="code" href="namespacearm__compute_1_1mlgo.xhtml#abd50adb0aaecb76f3d753cdf3785872e">support::cpp11::to_string</a>(options.iterations-&gt;value()));</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            g_example-&gt;print_parameters(*p);</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        }</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    }</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="comment">// Initialize framework</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <a class="code" href="structarm__compute_1_1test_1_1framework_1_1_framework_config.xhtml">framework::FrameworkConfig</a> fconfig;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    fconfig.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_framework_config.xhtml#a4ad3b7ba69599b41ab0954a39d7e7cbc">instruments</a>    = options.instruments-&gt;value();</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    fconfig.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_framework_config.xhtml#ab702e2f7530d6172eea3780d8923bd71">num_iterations</a> = options.iterations-&gt;value();</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    fconfig.<a class="code" href="structarm__compute_1_1test_1_1framework_1_1_framework_config.xhtml#a16fda368866c2a2e2d5a54eda52050f9">log_level</a>      = options.log_level-&gt;value();</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    framework.<a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a01e3aa67ceaeae837e9a68050d850724">init</a>(fconfig);</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;p : printers)</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    {</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        framework.<a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a5f16ced78873ee3a193490197fbf57a5">add_printer</a>(p.get());</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    }</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    framework.<a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a5e61ba4403f0d2bd4f755f59193af692">set_throw_errors</a>(options.throw_errors-&gt;value());</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1framework_1_1detail_1_1_test_suite_registrar.xhtml">arm_compute::test::framework::detail::TestSuiteRegistrar</a> suite{ <span class="stringliteral">&quot;Examples&quot;</span> };</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">validate</a>-&gt;value() != 0)</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    {</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        framework.<a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#ad8e7764125fcd790e0b151d26cfe949c">add_test_case</a>&lt;ExampleTest&lt;true&gt;&gt;(basename(argv[0]), framework::DatasetMode::ALL, <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba18ff74f43da410c5529f7d6fca84f115">arm_compute::test::framework::TestCaseFactory::Status::ACTIVE</a>);</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    }</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    {</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        framework.<a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#ad8e7764125fcd790e0b151d26cfe949c">add_test_case</a>&lt;ExampleTest&lt;false&gt;&gt;(basename(argv[0]), framework::DatasetMode::ALL, <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba18ff74f43da410c5529f7d6fca84f115">arm_compute::test::framework::TestCaseFactory::Status::ACTIVE</a>);</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    }</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="comment">//func(argc, argv);</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="keywordtype">bool</span> success = framework.<a class="code" href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a149ad6701e3e2414cb566bb414029841">run</a>();</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="keywordflow">if</span>(options.log_level-&gt;value() &gt; framework::LogLevel::NONE)</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    {</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;p : printers)</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        {</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            p-&gt;print_global_footer();</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        }</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    }</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="keywordflow">return</span> (success ? 0 : 1);</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;}</div><div class="ttc" id="structarm__compute_1_1test_1_1framework_1_1_framework_config_xhtml"><div class="ttname"><a href="structarm__compute_1_1test_1_1framework_1_1_framework_config.xhtml">arm_compute::test::framework::FrameworkConfig</a></div><div class="ttdoc">Framework configuration structure. </div><div class="ttdef"><b>Definition:</b> <a href="_framework_8h_source.xhtml#l00057">Framework.h:57</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1framework_1_1_framework_config_xhtml_ab702e2f7530d6172eea3780d8923bd71"><div class="ttname"><a href="structarm__compute_1_1test_1_1framework_1_1_framework_config.xhtml#ab702e2f7530d6172eea3780d8923bd71">arm_compute::test::framework::FrameworkConfig::num_iterations</a></div><div class="ttdeci">int num_iterations</div><div class="ttdoc">Number of iterations per test. </div><div class="ttdef"><b>Definition:</b> <a href="_framework_8h_source.xhtml#l00063">Framework.h:63</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_framework_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml">arm_compute::test::framework::Framework</a></div><div class="ttdoc">Main framework class. </div><div class="ttdef"><b>Definition:</b> <a href="_framework_8h_source.xhtml#l00095">Framework.h:95</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_framework_xhtml_a5e61ba4403f0d2bd4f755f59193af692"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a5e61ba4403f0d2bd4f755f59193af692">arm_compute::test::framework::Framework::set_throw_errors</a></div><div class="ttdeci">void set_throw_errors(bool throw_errors)</div><div class="ttdoc">Set whether errors are caught or thrown by the framework. </div><div class="ttdef"><b>Definition:</b> <a href="_framework_8cpp_source.xhtml#l00265">Framework.cpp:265</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1mlgo_xhtml_abd50adb0aaecb76f3d753cdf3785872e"><div class="ttname"><a href="namespacearm__compute_1_1mlgo.xhtml#abd50adb0aaecb76f3d753cdf3785872e">arm_compute::mlgo::to_string</a></div><div class="ttdeci">std::string to_string(const GEMMConfigNative &amp;config)</div><div class="ttdef"><b>Definition:</b> <a href="src_2runtime_2_c_l_2mlgo_2_utils_8cpp_source.xhtml#l00156">Utils.cpp:156</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_framework_xhtml_ad8e7764125fcd790e0b151d26cfe949c"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#ad8e7764125fcd790e0b151d26cfe949c">arm_compute::test::framework::Framework::add_test_case</a></div><div class="ttdeci">void add_test_case(std::string test_name, DatasetMode mode, TestCaseFactory::Status status)</div><div class="ttdoc">Add a test case to the framework. </div><div class="ttdef"><b>Definition:</b> <a href="_framework_8h_source.xhtml#l00374">Framework.h:374</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a419153497f83b7db0c19112371b10a3f"><div class="ttname"><a href="namespacearm__compute.xhtml#a419153497f83b7db0c19112371b10a3f">arm_compute::create_opencl_context_and_device</a></div><div class="ttdeci">std::tuple&lt; cl::Context, cl::Device, cl_int &gt; create_opencl_context_and_device(CLBackendType cl_backend_type)</div><div class="ttdoc">This function creates an OpenCL context and a device. </div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00126">CLHelpers.cpp:126</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_command_line_parser_xhtml"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_command_line_parser.xhtml">arm_compute::utils::CommandLineParser</a></div><div class="ttdoc">Class to parse command line arguments. </div><div class="ttdef"><b>Definition:</b> <a href="_command_line_parser_8h_source.xhtml#l00045">CommandLineParser.h:45</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_list_option_xhtml"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_list_option.xhtml">arm_compute::utils::ListOption</a></div><div class="ttdoc">Implementation of an option that accepts any number of values. </div><div class="ttdef"><b>Definition:</b> <a href="_list_option_8h_source.xhtml#l00041">ListOption.h:41</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_command_line_parser_xhtml_a68e2f681ec6686a130c4af96caf4d9fc"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_command_line_parser.xhtml#a68e2f681ec6686a130c4af96caf4d9fc">arm_compute::utils::CommandLineParser::add_option</a></div><div class="ttdeci">T * add_option(const std::string &amp;name, As &amp;&amp;... args)</div><div class="ttdoc">Function to add a new option to the parser. </div><div class="ttdef"><b>Definition:</b> <a href="_command_line_parser_8h_source.xhtml#l00104">CommandLineParser.h:104</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_test_case_factory_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70ba18ff74f43da410c5529f7d6fca84f115"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba18ff74f43da410c5529f7d6fca84f115">arm_compute::test::framework::TestCaseFactory::Status::ACTIVE</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1framework_1_1_framework_config_xhtml_a16fda368866c2a2e2d5a54eda52050f9"><div class="ttname"><a href="structarm__compute_1_1test_1_1framework_1_1_framework_config.xhtml#a16fda368866c2a2e2d5a54eda52050f9">arm_compute::test::framework::FrameworkConfig::log_level</a></div><div class="ttdeci">LogLevel log_level</div><div class="ttdoc">Verbosity of the output. </div><div class="ttdef"><b>Definition:</b> <a href="_framework_8h_source.xhtml#l00065">Framework.h:65</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_framework_xhtml_a149ad6701e3e2414cb566bb414029841"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a149ad6701e3e2414cb566bb414029841">arm_compute::test::framework::Framework::run</a></div><div class="ttdeci">bool run()</div><div class="ttdoc">Run all enabled test cases. </div><div class="ttdef"><b>Definition:</b> <a href="_framework_8cpp_source.xhtml#l00543">Framework.cpp:543</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_command_line_parser_xhtml_a66fa8f960eac1bf561ba2cb8be0cc58a"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_command_line_parser.xhtml#a66fa8f960eac1bf561ba2cb8be0cc58a">arm_compute::utils::CommandLineParser::parse</a></div><div class="ttdeci">void parse(int argc, char **argv)</div><div class="ttdoc">Parses the command line arguments and updates the options accordingly. </div><div class="ttdef"><b>Definition:</b> <a href="_command_line_parser_8h_source.xhtml#l00117">CommandLineParser.h:117</a></div></div>
<div class="ttc" id="structarm__compute_1_1test_1_1framework_1_1_framework_config_xhtml_a4ad3b7ba69599b41ab0954a39d7e7cbc"><div class="ttname"><a href="structarm__compute_1_1test_1_1framework_1_1_framework_config.xhtml#a4ad3b7ba69599b41ab0954a39d7e7cbc">arm_compute::test::framework::FrameworkConfig::instruments</a></div><div class="ttdeci">std::vector&lt; framework::InstrumentsDescription &gt; instruments</div><div class="ttdoc">Instrument types that will be used for benchmarking. </div><div class="ttdef"><b>Definition:</b> <a href="_framework_8h_source.xhtml#l00059">Framework.h:59</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a71326f0909d77386e29b511e1990a11f"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a71326f0909d77386e29b511e1990a11f">arm_compute::test::library</a></div><div class="ttdeci">std::unique_ptr&lt; AssetsLibrary &gt; library</div><div class="ttdef"><b>Definition:</b> <a href="main_8cpp_source.xhtml#l00076">main.cpp:76</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a0b0eb3235749a2909dc5a101afe59a1b"><div class="ttname"><a href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond, msg)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00456">Error.h:456</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1detail_1_1_test_suite_registrar_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1detail_1_1_test_suite_registrar.xhtml">arm_compute::test::framework::detail::TestSuiteRegistrar</a></div><div class="ttdoc">Helper class to statically begin and end a test suite. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2framework_2_registrars_8h_source.xhtml#l00066">Registrars.h:66</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a94eb95e47316e7dc5af7615592d26bdd"><div class="ttname"><a href="namespacearm__compute.xhtml#a94eb95e47316e7dc5af7615592d26bdd">arm_compute::CLBackendType</a></div><div class="ttdeci">CLBackendType</div><div class="ttdoc">List the possible OpenCL backends. </div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2_c_l_types_8h_source.xhtml#l00055">CLTypes.h:55</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a64c17a5a42d2499a1626222ff9753b4d"><div class="ttname"><a href="namespacearm__compute.xhtml#a64c17a5a42d2499a1626222ff9753b4d">arm_compute::build_information</a></div><div class="ttdeci">std::string build_information()</div><div class="ttdoc">Returns the arm_compute library build information. </div></div>
<div class="ttc" id="namespace_gemm_tuner_xhtml_a90eee7a4677ca8b1ed116364a24367f9"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a90eee7a4677ca8b1ed116364a24367f9">GemmTuner.parser</a></div><div class="ttdeci">parser</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00640">GemmTuner.py:640</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_framework_xhtml_a5f16ced78873ee3a193490197fbf57a5"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a5f16ced78873ee3a193490197fbf57a5">arm_compute::test::framework::Framework::add_printer</a></div><div class="ttdeci">void add_printer(Printer *printer)</div><div class="ttdoc">Set the printer used for the output of test results. </div><div class="ttdef"><b>Definition:</b> <a href="_framework_8cpp_source.xhtml#l00673">Framework.cpp:673</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_command_line_parser_xhtml_aa5da3e535faa6847a0da40fe7fb28383"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_command_line_parser.xhtml#aa5da3e535faa6847a0da40fe7fb28383">arm_compute::utils::CommandLineParser::print_help</a></div><div class="ttdeci">void print_help(const std::string &amp;program_name) const</div><div class="ttdoc">Prints a help message for all configured options. </div><div class="ttdef"><b>Definition:</b> <a href="_command_line_parser_8h_source.xhtml#l00218">CommandLineParser.h:218</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_common_options_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_common_options.xhtml">arm_compute::test::framework::CommonOptions</a></div><div class="ttdoc">Common command line options used to configure the framework. </div><div class="ttdef"><b>Definition:</b> <a href="_common_options_8h_source.xhtml#l00054">CommonOptions.h:54</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_simple_option_xhtml"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_simple_option.xhtml">arm_compute::utils::SimpleOption</a></div><div class="ttdoc">Implementation of an option that accepts a single value. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_option_8h_source.xhtml#l00039">SimpleOption.h:39</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_option_xhtml_a48a2672f362eeed9a3e93403f4d3de37"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_option.xhtml#a48a2672f362eeed9a3e93403f4d3de37">arm_compute::utils::Option::set_help</a></div><div class="ttdeci">void set_help(std::string help)</div><div class="ttdoc">Set the help message for the option. </div><div class="ttdef"><b>Definition:</b> <a href="_option_8h_source.xhtml#l00125">Option.h:125</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_framework_xhtml_a01e3aa67ceaeae837e9a68050d850724"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a01e3aa67ceaeae837e9a68050d850724">arm_compute::test::framework::Framework::init</a></div><div class="ttdeci">void init(const FrameworkConfig &amp;config)</div><div class="ttdoc">Init the framework. </div><div class="ttdef"><b>Definition:</b> <a href="_framework_8cpp_source.xhtml#l00130">Framework.cpp:130</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a4feaaa70771629f4b5dcf3b219c8b647"><div class="ttname"><a href="namespacearm__compute.xhtml#a4feaaa70771629f4b5dcf3b219c8b647">arm_compute::validate</a></div><div class="ttdeci">Status validate(const ITensorInfo *scores_in, const ITensorInfo *boxes_in, const ITensorInfo *batch_splits_in, const ITensorInfo *scores_out, const ITensorInfo *boxes_out, const ITensorInfo *classes, const ITensorInfo *batch_splits_out, const ITensorInfo *keeps, const ITensorInfo *keeps_size, const BoxNMSLimitInfo info)</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00214">CPPBoxWithNonMaximaSuppressionLimit.cpp:214</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5f49decb4b0a74d5361686ab45db8961"><div class="ttname"><a href="namespacearm__compute.xhtml#a5f49decb4b0a74d5361686ab45db8961">arm_compute::opencl_is_available</a></div><div class="ttdeci">bool opencl_is_available()</div><div class="ttdoc">Check if OpenCL is available. </div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8cpp_source.xhtml#l00203">OpenCL.cpp:203</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_af90c2445eb8a45fd74b11c574c8cb6b9"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#af90c2445eb8a45fd74b11c574c8cb6b9">arm_compute::test::fixed_library</a></div><div class="ttdeci">std::unique_ptr&lt; AssetsLibrary &gt; fixed_library</div><div class="ttdef"><b>Definition:</b> <a href="main_8cpp_source.xhtml#l00079">main.cpp:79</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a48c0efb64637ab6e965b32d7c683efe9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a48c0efb64637ab6e965b32d7c683efe9">&#9670;&nbsp;</a></span>save_to_npy()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::utils::save_to_npy </td>
          <td>(</td>
          <td class="paramtype">T &amp;&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>npy_filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>fortran_order</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Template helper function to save a tensor image to a NPY file. </p>
<dl class="section note"><dt>Note</dt><dd>Only F32 data type supported. </dd>
<dd>
If the input tensor is a <a class="el" href="classarm__compute_1_1_c_l_tensor.xhtml" title="Basic implementation of the OpenCL tensor interface. ">CLTensor</a>, the function maps and unmaps the image</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td>The tensor to save as NPY file </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">npy_filename</td><td>Filename of the file to create. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fortran_order</td><td>If true, save matrix in fortran order. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="utils_2_utils_8h_source.xhtml#l00586">586</a> of file <a class="el" href="utils_2_utils_8h_source.xhtml">Utils.h</a>.</p>

<p class="reference">References <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00688">ARM_COMPUTE_ERROR_ON_DATA_TYPE_NOT_IN</a>, <a class="el" href="_error_8h_source.xhtml#l00346">ARM_COMPUTE_ERROR_VAR</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00077">arm_compute::execute_window_loop()</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::F32</a>, <a class="el" href="_m_l_g_o_parser_8cpp_source.xhtml#l00481">arm_compute::mlgo::parser::header()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00212">map()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00149">Iterator::ptr()</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">arm_compute::QASYMM8</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">arm_compute::test::validation::shape</a>, <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00261">type</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00223">unmap()</a>, and <a class="el" href="_window_8inl_source.xhtml#l00276">Window::use_tensor_dimensions()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_utils_8cpp_source.xhtml#l00249">SaveNumPyAccessor::access_tensor()</a>.</p>
<div class="fragment"><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;{</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a4264d7e3318c4188e48127a75f3f0f8a">ARM_COMPUTE_ERROR_ON_DATA_TYPE_NOT_IN</a>(&amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::DataType::F32</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">arm_compute::DataType::QASYMM8</a>);</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;    std::ofstream fs;</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;    <span class="keywordflow">try</span></div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;    {</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;        fs.exceptions(std::ofstream::failbit | std::ofstream::badbit | std::ofstream::eofbit);</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;        fs.open(npy_filename, std::ios::out | std::ios::binary);</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;        std::vector&lt;npy::ndarray_len_t&gt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;num_dimensions());</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0, j = <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;num_dimensions() - 1; i &lt; <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;num_dimensions(); ++i, --j)</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;        {</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>[i] = <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;tensor_shape()[!fortran_order ? j : i];</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;        }</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;        <span class="comment">// Map buffer if creating a CLTensor</span></div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;        <a class="code" href="namespacearm__compute_1_1utils.xhtml#a9c3303817ba653b5d1e78efb88d02bcf">map</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <span class="keyword">true</span>);</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;        <span class="keyword">using</span> typestring_type = <span class="keyword">typename</span> std::conditional&lt;std::is_floating_point&lt;U&gt;::value, float, <a class="code" href="namespacearm__compute.xhtml#ab8938bcb3ec0f5f8d93285eb3a28b701">qasymm8_t</a>&gt;<a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">::type</a>;</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;        std::vector&lt;typestring_type&gt; tmp; <span class="comment">/* Used only to get the typestring */</span></div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;        <span class="keyword">const</span> npy::dtype_t           dtype = npy::dtype_map.at(std::type_index(<span class="keyword">typeid</span>(tmp)));</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;        std::ofstream stream(npy_filename, std::ofstream::binary);</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;        npy::header_t <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a723a2d3874520624df4c3214ef0ec420">header</a>{ dtype, fortran_order, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a> };</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;        npy::write_header(stream, <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a723a2d3874520624df4c3214ef0ec420">header</a>);</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;        <a class="code" href="classarm__compute_1_1_window.xhtml">arm_compute::Window</a> window;</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;        window.<a class="code" href="classarm__compute_1_1_window.xhtml#a14470b4cb59140a1b6ff3b8f16c89ab6">use_tensor_dimensions</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;tensor_shape());</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">arm_compute::Iterator</a> in(&amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, window);</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">arm_compute::Coordinates</a> &amp;)</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;        {</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;            stream.write(reinterpret_cast&lt;const char *&gt;(in.ptr()), <span class="keyword">sizeof</span>(typestring_type));</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;        },</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;        in);</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;        <span class="comment">// Unmap buffer if creating a CLTensor</span></div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;        <a class="code" href="namespacearm__compute_1_1utils.xhtml#a4ff2134cb88cb5a27120cddb98b59774">unmap</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;    }</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;    <span class="keywordflow">catch</span>(<span class="keyword">const</span> std::ofstream::failure &amp;e)</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;    {</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;        <a class="code" href="_error_8h.xhtml#abd040a16dc0dbc75733e07aff93048a8">ARM_COMPUTE_ERROR_VAR</a>(<span class="stringliteral">&quot;Writing %s: (%s)&quot;</span>, npy_filename.c_str(), e.what());</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;    }</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a45cde9abb508c62d67c3bb2b9bf566a5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">arm_compute::test::validation::shape</a></div><div class="ttdeci">shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">DFT.cpp:115</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::Format::F32</a></div><div class="ttdoc">1 channel, 1 F32 per channel </div></div>
<div class="ttc" id="_error_8h_xhtml_abd040a16dc0dbc75733e07aff93048a8"><div class="ttname"><a href="_error_8h.xhtml#abd040a16dc0dbc75733e07aff93048a8">ARM_COMPUTE_ERROR_VAR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_VAR(msg,...)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00346">Error.h:346</a></div></div>
<div class="ttc" id="gemm__interleaved_8hpp_xhtml_a6fbca3dca9ecb372332fc525529cc086"><div class="ttname"><a href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></div><div class="ttdeci">decltype(strategy::transforms) typedef type</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00261">gemm_interleaved.hpp:261</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_a14470b4cb59140a1b6ff3b8f16c89ab6"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a14470b4cb59140a1b6ff3b8f16c89ab6">arm_compute::Window::use_tensor_dimensions</a></div><div class="ttdeci">void use_tensor_dimensions(const TensorShape &amp;shape, size_t first_dimension=Window::DimX)</div><div class="ttdoc">Use the tensor&amp;#39;s dimensions to fill the window dimensions. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00276">Window.inl:276</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_xhtml_a4ff2134cb88cb5a27120cddb98b59774"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a4ff2134cb88cb5a27120cddb98b59774">arm_compute::utils::unmap</a></div><div class="ttdeci">void unmap(T &amp;tensor)</div><div class="ttdoc">Unmaps a tensor if needed. </div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00223">Utils.h:223</a></div></div>
<div class="ttc" id="arm__compute_2core_2_validate_8h_xhtml_a4264d7e3318c4188e48127a75f3f0f8a"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a4264d7e3318c4188e48127a75f3f0f8a">ARM_COMPUTE_ERROR_ON_DATA_TYPE_NOT_IN</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_DATA_TYPE_NOT_IN(t,...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00688">Validate.h:688</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">arm_compute::DataType::QASYMM8</a></div><div class="ttdoc">quantized, asymmetric fixed-point 8-bit number unsigned </div></div>
<div class="ttc" id="classarm__compute_1_1_coordinates_xhtml"><div class="ttname"><a href="classarm__compute_1_1_coordinates.xhtml">arm_compute::Coordinates</a></div><div class="ttdoc">Coordinates of an item. </div><div class="ttdef"><b>Definition:</b> <a href="_coordinates_8h_source.xhtml#l00037">Coordinates.h:37</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_xhtml_a9c3303817ba653b5d1e78efb88d02bcf"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a9c3303817ba653b5d1e78efb88d02bcf">arm_compute::utils::map</a></div><div class="ttdeci">void map(T &amp;tensor, bool blocking)</div><div class="ttdoc">Maps a tensor if needed. </div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00212">Utils.h:212</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab8938bcb3ec0f5f8d93285eb3a28b701"><div class="ttname"><a href="namespacearm__compute.xhtml#ab8938bcb3ec0f5f8d93285eb3a28b701">arm_compute::qasymm8_t</a></div><div class="ttdeci">uint8_t qasymm8_t</div><div class="ttdoc">8 bit quantized asymmetric scalar value </div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00039">QuantizationInfo.h:39</a></div></div>
<div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00066">ClWorkloadRuntime.cpp:66</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5002bf7ec46d52971f9526e94172cfee"><div class="ttname"><a href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;... iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00077">Helpers.inl:77</a></div></div>
<div class="ttc" id="classarm__compute_1_1_iterator_xhtml"><div class="ttname"><a href="classarm__compute_1_1_iterator.xhtml">arm_compute::Iterator</a></div><div class="ttdoc">Iterator updated by execute_window_loop for each window element. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00046">Helpers.h:46</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1mlgo_1_1parser_xhtml_a723a2d3874520624df4c3214ef0ec420"><div class="ttname"><a href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a723a2d3874520624df4c3214ef0ec420">arm_compute::mlgo::parser::header</a></div><div class="ttdeci">void header(TokenStream &amp;in, bool &amp;valid)</div><div class="ttdef"><b>Definition:</b> <a href="_m_l_g_o_parser_8cpp_source.xhtml#l00481">MLGOParser.cpp:481</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml">arm_compute::Window</a></div><div class="ttdoc">Describe a multidimensional execution window. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00039">Window.h:39</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a301d0b7bfd70f73fc1924f4281938d08"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a301d0b7bfd70f73fc1924f4281938d08">&#9670;&nbsp;</a></span>save_to_ppm()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::utils::save_to_ppm </td>
          <td>(</td>
          <td class="paramtype">T &amp;&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>ppm_filename</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Template helper function to save a tensor image to a PPM file. </p>
<dl class="section note"><dt>Note</dt><dd>Only U8 and RGB888 formats supported. </dd>
<dd>
Only works with 2D tensors. </dd>
<dd>
If the input tensor is a <a class="el" href="classarm__compute_1_1_c_l_tensor.xhtml" title="Basic implementation of the OpenCL tensor interface. ">CLTensor</a>, the function maps and unmaps the image</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td>The tensor to save as PPM file </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ppm_filename</td><td>Filename of the file to create. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="utils_2_utils_8h_source.xhtml#l00506">506</a> of file <a class="el" href="utils_2_utils_8h_source.xhtml">Utils.h</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00352">ARM_COMPUTE_ERROR</a>, <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00639">ARM_COMPUTE_ERROR_ON_FORMAT_NOT_IN</a>, <a class="el" href="_error_8h_source.xhtml#l00346">ARM_COMPUTE_ERROR_VAR</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00045">Window::DimY</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00077">arm_compute::execute_window_loop()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00212">map()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00149">Iterator::ptr()</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0">arm_compute::RGB888</a>, <a class="el" href="_window_8inl_source.xhtml#l00049">Window::set()</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::U8</a>, and <a class="el" href="utils_2_utils_8h_source.xhtml#l00223">unmap()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_utils_8cpp_source.xhtml#l00145">PPMWriter::access_tensor()</a>.</p>
<div class="fragment"><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;{</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a0d34a8aa07600727e4e5034c7cdad47d">ARM_COMPUTE_ERROR_ON_FORMAT_NOT_IN</a>(&amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0">arm_compute::Format::RGB888</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::Format::U8</a>);</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;num_dimensions() &gt; 2);</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    std::ofstream fs;</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    <span class="keywordflow">try</span></div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    {</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;        fs.exceptions(std::ofstream::failbit | std::ofstream::badbit | std::ofstream::eofbit);</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;        fs.open(ppm_filename, std::ios::out | std::ios::binary);</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> width  = <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;tensor_shape()[0];</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> height = <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;tensor_shape()[1];</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;        fs &lt;&lt; <span class="stringliteral">&quot;P6\n&quot;</span></div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;           &lt;&lt; width &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; height &lt;&lt; <span class="stringliteral">&quot; 255\n&quot;</span>;</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;        <span class="comment">// Map buffer if creating a CLTensor</span></div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;        <a class="code" href="namespacearm__compute_1_1utils.xhtml#a9c3303817ba653b5d1e78efb88d02bcf">map</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <span class="keyword">true</span>);</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;        <span class="keywordflow">switch</span>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;format())</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;        {</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::Format::U8</a>:</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;            {</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;                <a class="code" href="classarm__compute_1_1_window.xhtml">arm_compute::Window</a> window;</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;                window.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">arm_compute::Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">arm_compute::Window::Dimension</a>(0, width, 1));</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;                window.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">arm_compute::Window::DimY</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">arm_compute::Window::Dimension</a>(0, height, 1));</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;                <a class="code" href="classarm__compute_1_1_iterator.xhtml">arm_compute::Iterator</a> in(&amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, window);</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;                <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">arm_compute::Coordinates</a> &amp;)</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;                {</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> value = *in.ptr();</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;                    fs &lt;&lt; value &lt;&lt; value &lt;&lt; value;</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;                },</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;                in);</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;            }</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0">arm_compute::Format::RGB888</a>:</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;            {</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;                <a class="code" href="classarm__compute_1_1_window.xhtml">arm_compute::Window</a> window;</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;                window.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">arm_compute::Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">arm_compute::Window::Dimension</a>(0, width, width));</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;                window.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">arm_compute::Window::DimY</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">arm_compute::Window::Dimension</a>(0, height, 1));</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;                <a class="code" href="classarm__compute_1_1_iterator.xhtml">arm_compute::Iterator</a> in(&amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, window);</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;                <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">arm_compute::Coordinates</a> &amp;)</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;                {</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;                    fs.write(reinterpret_cast&lt;std::fstream::char_type *&gt;(in.ptr()), width * <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;element_size());</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;                },</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;                in);</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;            }</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;            <span class="keywordflow">default</span>:</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;                <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported format&quot;</span>);</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;        }</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;        <span class="comment">// Unmap buffer if creating a CLTensor</span></div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;        <a class="code" href="namespacearm__compute_1_1utils.xhtml#a4ff2134cb88cb5a27120cddb98b59774">unmap</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;    }</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;    <span class="keywordflow">catch</span>(<span class="keyword">const</span> std::ofstream::failure &amp;e)</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;    {</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;        <a class="code" href="_error_8h.xhtml#abd040a16dc0dbc75733e07aff93048a8">ARM_COMPUTE_ERROR_VAR</a>(<span class="stringliteral">&quot;Writing %s: (%s)&quot;</span>, ppm_filename.c_str(), e.what());</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;    }</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::Format::U8</a></div><div class="ttdoc">1 channel, 1 U8 per channel </div></div>
<div class="ttc" id="_error_8h_xhtml_abd040a16dc0dbc75733e07aff93048a8"><div class="ttname"><a href="_error_8h.xhtml#abd040a16dc0dbc75733e07aff93048a8">ARM_COMPUTE_ERROR_VAR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_VAR(msg,...)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00346">Error.h:346</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_1_1_dimension_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml">arm_compute::Window::Dimension</a></div><div class="ttdoc">Describe one of the image&amp;#39;s dimensions with a start, end and step. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00079">Window.h:79</a></div></div>
<div class="ttc" id="arm__compute_2core_2_validate_8h_xhtml_a0d34a8aa07600727e4e5034c7cdad47d"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a0d34a8aa07600727e4e5034c7cdad47d">ARM_COMPUTE_ERROR_ON_FORMAT_NOT_IN</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_FORMAT_NOT_IN(t,...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00639">Validate.h:639</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_xhtml_a4ff2134cb88cb5a27120cddb98b59774"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a4ff2134cb88cb5a27120cddb98b59774">arm_compute::utils::unmap</a></div><div class="ttdeci">void unmap(T &amp;tensor)</div><div class="ttdoc">Unmaps a tensor if needed. </div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00223">Utils.h:223</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a30ff380a3be74628024063a99fba10f0">arm_compute::Format::RGB888</a></div><div class="ttdoc">3 channels, 1 U8 per channel </div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_aa96e81276ee4f87ab386cd05a5539a7d"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">arm_compute::Window::DimX</a></div><div class="ttdeci">static constexpr size_t DimX</div><div class="ttdoc">Alias for dimension 0 also known as X dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00043">Window.h:43</a></div></div>
<div class="ttc" id="classarm__compute_1_1_coordinates_xhtml"><div class="ttname"><a href="classarm__compute_1_1_coordinates.xhtml">arm_compute::Coordinates</a></div><div class="ttdoc">Coordinates of an item. </div><div class="ttdef"><b>Definition:</b> <a href="_coordinates_8h_source.xhtml#l00037">Coordinates.h:37</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_acd3d2bba51cb84d34dd7656ad2375a6e"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">arm_compute::Window::set</a></div><div class="ttdeci">void set(size_t dimension, const Dimension &amp;dim)</div><div class="ttdoc">Set the values of a given dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00049">Window.inl:49</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_ad2d402364fa822b0b7775081291eeca9"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">arm_compute::Window::DimY</a></div><div class="ttdeci">static constexpr size_t DimY</div><div class="ttdoc">Alias for dimension 1 also known as Y dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00045">Window.h:45</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_xhtml_a9c3303817ba653b5d1e78efb88d02bcf"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a9c3303817ba653b5d1e78efb88d02bcf">arm_compute::utils::map</a></div><div class="ttdeci">void map(T &amp;tensor, bool blocking)</div><div class="ttdoc">Maps a tensor if needed. </div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00212">Utils.h:212</a></div></div>
<div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00066">ClWorkloadRuntime.cpp:66</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5002bf7ec46d52971f9526e94172cfee"><div class="ttname"><a href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;... iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00077">Helpers.inl:77</a></div></div>
<div class="ttc" id="classarm__compute_1_1_iterator_xhtml"><div class="ttname"><a href="classarm__compute_1_1_iterator.xhtml">arm_compute::Iterator</a></div><div class="ttdoc">Iterator updated by execute_window_loop for each window element. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00046">Helpers.h:46</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml">arm_compute::Window</a></div><div class="ttdoc">Describe a multidimensional execution window. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00039">Window.h:39</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aad377315df05925a2c720f50a20917ba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aad377315df05925a2c720f50a20917ba">&#9670;&nbsp;</a></span>schedule_kernel_on_ctx()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void schedule_kernel_on_ctx </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_runtime_context.xhtml">IRuntimeContext</a> *&#160;</td>
          <td class="paramname"><em>ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml">ICPPKernel</a> *&#160;</td>
          <td class="paramname"><em>kernel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml">IScheduler::Hints</a> &amp;&#160;</td>
          <td class="paramname"><em>hints</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Schedules a kernel using the context if not nullptr else uses the legacy scheduling flow. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">ctx</td><td>Context to use. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">kernel</td><td><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class. ">Kernel</a> to schedule. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">hints</td><td>Hints to use. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="src_2runtime_2_utils_8cpp_source.xhtml#l00055">55</a> of file <a class="el" href="src_2runtime_2_utils_8cpp_source.xhtml">Utils.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_scheduler_8cpp_source.xhtml#l00094">Scheduler::get()</a>, <a class="el" href="classarm__compute_1_1_i_scheduler.xhtml#a4e58f95544bd5ac6559a421671bd9842">IScheduler::schedule()</a>, and <a class="el" href="classarm__compute_1_1_i_runtime_context.xhtml#a5a8c9bfdfbdcdddc697f438ba2244620">IRuntimeContext::scheduler()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_n_e_simple_function_no_border_8cpp_source.xhtml#l00041">INESimpleFunctionNoBorder::run()</a>.</p>
<div class="fragment"><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;{</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keywordflow">if</span>(ctx)</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    {</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(ctx-&gt;scheduler() == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        ctx-&gt;scheduler()-&gt;schedule(kernel, hints);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    }</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    {</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        NEScheduler::get().schedule(kernel, hints);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    }</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a192c7cf59b34ae925eb1c8c315a06225"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a192c7cf59b34ae925eb1c8c315a06225">&#9670;&nbsp;</a></span>string_from_scheduler_type()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const std::string &amp; string_from_scheduler_type </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_scheduler.xhtml#a1d1cfd8ffb84e947f82999c682b666a7">Scheduler::Type</a>&#160;</td>
          <td class="paramname"><em>t</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert a <a class="el" href="classarm__compute_1_1_scheduler.xhtml#a1d1cfd8ffb84e947f82999c682b666a7" title="Scheduler type. ">Scheduler::Type</a> into a string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">t</td><td><a class="el" href="classarm__compute_1_1_scheduler.xhtml#a1d1cfd8ffb84e947f82999c682b666a7">Scheduler::Type</a> to be translated to string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The string describing the scheduler type. </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2runtime_2_utils_8cpp_source.xhtml#l00042">42</a> of file <a class="el" href="src_2runtime_2_utils_8cpp_source.xhtml">Utils.cpp</a>.</p>

<p class="reference">References <a class="el" href="classarm__compute_1_1_scheduler.xhtml#a1d1cfd8ffb84e947f82999c682b666a7a4c162442ef22c58f6f1e330e6b692c7e">Scheduler::CPP</a>, <a class="el" href="classarm__compute_1_1_scheduler.xhtml#a1d1cfd8ffb84e947f82999c682b666a7a72baef04098f035e8a320b03ad197818">Scheduler::CUSTOM</a>, <a class="el" href="classarm__compute_1_1_scheduler.xhtml#a1d1cfd8ffb84e947f82999c682b666a7a6a1f3212967c1a0ff6774f09de77330f">Scheduler::OMP</a>, <a class="el" href="classarm__compute_1_1_scheduler.xhtml#a1d1cfd8ffb84e947f82999c682b666a7aec8e57d71f07e31203035548b79d03c8">Scheduler::ST</a>, and <a class="el" href="tf__frozen__model__extractor_8py_source.xhtml#l00049">tf_frozen_model_extractor::t</a>.</p>
<div class="fragment"><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;{</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keyword">static</span> std::map&lt;Scheduler::Type, const std::string&gt; scheduler_type_map =</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    {</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        { Scheduler::Type::ST, <span class="stringliteral">&quot;Single Thread&quot;</span> },</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        { Scheduler::Type::CPP, <span class="stringliteral">&quot;C++11 Threads&quot;</span> },</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        { Scheduler::Type::OMP, <span class="stringliteral">&quot;OpenMP Threads&quot;</span> },</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        { Scheduler::Type::CUSTOM, <span class="stringliteral">&quot;Custom&quot;</span> }</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    };</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keywordflow">return</span> scheduler_type_map[<a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a>];</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;}</div><div class="ttc" id="namespacetf__frozen__model__extractor_xhtml_aaccc9105df5383111407fd5b41255e23"><div class="ttname"><a href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">tf_frozen_model_extractor.t</a></div><div class="ttdeci">t</div><div class="ttdef"><b>Definition:</b> <a href="tf__frozen__model__extractor_8py_source.xhtml#l00049">tf_frozen_model_extractor.py:49</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a4ff2134cb88cb5a27120cddb98b59774"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4ff2134cb88cb5a27120cddb98b59774">&#9670;&nbsp;</a></span>unmap()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::utils::unmap </td>
          <td>(</td>
          <td class="paramtype">T &amp;&#160;</td>
          <td class="paramname"><em>tensor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Unmaps a tensor if needed. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">tensor</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a> to be unmapped </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="utils_2_utils_8h_source.xhtml#l00223">223</a> of file <a class="el" href="utils_2_utils_8h_source.xhtml">Utils.h</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00152">ARM_COMPUTE_UNUSED</a>, <a class="el" href="runtime_2_c_l_2_cl_tensor_8cpp_source.xhtml#l00066">CLTensor::map()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00212">map()</a>, and <a class="el" href="runtime_2_c_l_2_cl_tensor_8cpp_source.xhtml#l00071">CLTensor::unmap()</a>.</p>

<p class="reference">Referenced by <a class="el" href="utils_2_utils_8h_source.xhtml#l00786">compare_tensor()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00733">fill_random_tensor()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00365">NPYLoader::fill_tensor()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00688">fill_tensor_value()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00712">fill_tensor_vector()</a>, <a class="el" href="_i_tensor_v2_8h_source.xhtml#l00069">ITensorV2::is_valid()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00641">load_trained_data()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00586">save_to_npy()</a>, and <a class="el" href="utils_2_utils_8h_source.xhtml#l00506">save_to_ppm()</a>.</p>
<div class="fragment"><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;{</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00066">ClWorkloadRuntime.cpp:66</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a id="a813cd3ddc61ff2066016e023927cced0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a813cd3ddc61ff2066016e023927cced0">&#9670;&nbsp;</a></span>_allowed_values</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">_allowed_values</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">{ std::move(allowed_values) }</div><div class="line">{</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="keyword">inline</span> EnumOption&lt;T&gt;::EnumOption(std::string <a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a>, std::set&lt;T&gt; allowed_values, T default_value)</div><div class="line">    : SimpleOption&lt;T&gt;{ std::move(name), std::move(default_value) }</div><div class="ttc" id="_n_e_batch_normalization_layer_kernel_8cpp_xhtml_a8f8f80d37794cde9472343e4487ba3eb"><div class="ttname"><a href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a></div><div class="ttdeci">const char * name</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00060">NEBatchNormalizationLayerKernel.cpp:60</a></div></div>
</div><!-- fragment -->
<p class="definition">Definition at line <a class="el" href="_enum_option_8h_source.xhtml#l00073">73</a> of file <a class="el" href="_enum_option_8h_source.xhtml">EnumOption.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="_enum_list_option_8h_source.xhtml#l00075">EnumListOption&lt; InstrumentsDescription &gt;::EnumListOption()</a>, <a class="el" href="_enum_list_option_8h_source.xhtml#l00128">EnumListOption&lt; InstrumentsDescription &gt;::help()</a>, and <a class="el" href="_enum_list_option_8h_source.xhtml#l00087">EnumListOption&lt; InstrumentsDescription &gt;::parse()</a>.</p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1utils.xhtml">utils</a></li>
    <li class="footer">Generated on Thu May 18 2023 14:52:46 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
