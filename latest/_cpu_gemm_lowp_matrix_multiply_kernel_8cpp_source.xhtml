<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/cpu/kernels/CpuGemmLowpMatrixMultiplyKernel.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_cpu_gemm_lowp_matrix_multiply_kernel_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">CpuGemmLowpMatrixMultiplyKernel.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_cpu_gemm_lowp_matrix_multiply_kernel_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017-2021 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_cpu_gemm_lowp_matrix_multiply_kernel_8h.xhtml">src/cpu/kernels/CpuGemmLowpMatrixMultiplyKernel.h</a>&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_error_8h.xhtml">arm_compute/core/Error.h</a>&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_helpers_8h.xhtml">arm_compute/core/Helpers.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_tensor_8h.xhtml">arm_compute/core/ITensor.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_tensor_info_8h.xhtml">arm_compute/core/TensorInfo.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_types_8h.xhtml">arm_compute/core/Types.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_utils_8h.xhtml">arm_compute/core/Utils.h</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_validate_8h.xhtml">arm_compute/core/Validate.h</a>&quot;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_window_8h.xhtml">arm_compute/core/Window.h</a>&quot;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_auto_configuration_8h.xhtml">src/core/helpers/AutoConfiguration.h</a>&quot;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_window_helpers_8h.xhtml">src/core/helpers/WindowHelpers.h</a>&quot;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include &lt;arm_neon.h&gt;</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keyword">namespace </span>cpu</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="keyword">namespace </span>kernels</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;{</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="keyword">namespace</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="keywordtype">void</span> <span class="keyword">inline</span> vector_matrix_multiply_u8(Iterator &amp;ina, Iterator &amp;inb, Iterator &amp;out, <span class="keywordtype">int</span> width_a, <span class="keywordtype">int</span> width_b, <span class="keywordtype">int</span> width_out, <span class="keywordtype">size_t</span> stride_b, <span class="keyword">const</span> Window &amp;window)</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;{</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> Coordinates &amp; <span class="keywordtype">id</span>)</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    {</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <span class="keywordflow">if</span>(<span class="keywordtype">id</span>.x() &gt; width_b)</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        {</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;            <span class="keywordflow">return</span>;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        }</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="comment">// Note: Since the input are all positives, we can use uint32_t</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <span class="comment">// Accumulators for the block 0</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        uint32x4x4_t c0 =</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        {</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;            {</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                vdupq_n_u32(0),</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                vdupq_n_u32(0),</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                vdupq_n_u32(0),</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                vdupq_n_u32(0)</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            }</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        };</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keyword">auto</span> vec_a          = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(ina.ptr());</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keyword">auto</span> matrix_b       = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(inb.ptr());</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="keyword">auto</span> vec_a_end_addr = vec_a + width_a;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <span class="comment">// This for loop performs 8 accumulations</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="keywordflow">for</span>(; vec_a &lt;= (vec_a_end_addr - 8);)</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        {</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            <span class="keyword">const</span> uint8x8_t  a00_u8 = vld1_u8(vec_a);</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            <span class="keyword">const</span> uint8x16_t b00_u8 = vld1q_u8(matrix_b + 0 * stride_b);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            <span class="keyword">const</span> uint8x16_t b10_u8 = vld1q_u8(matrix_b + 1 * stride_b);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            <span class="keyword">const</span> uint8x16_t b20_u8 = vld1q_u8(matrix_b + 2 * stride_b);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            <span class="keyword">const</span> uint8x16_t b30_u8 = vld1q_u8(matrix_b + 3 * stride_b);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            <span class="keyword">const</span> uint8x16_t b40_u8 = vld1q_u8(matrix_b + 4 * stride_b);</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            <span class="keyword">const</span> uint8x16_t b50_u8 = vld1q_u8(matrix_b + 5 * stride_b);</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            <span class="keyword">const</span> uint8x16_t b60_u8 = vld1q_u8(matrix_b + 6 * stride_b);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            <span class="keyword">const</span> uint8x16_t b70_u8 = vld1q_u8(matrix_b + 7 * stride_b);</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            <span class="comment">// Convert a00_u8 to uint16_t and get the lower part</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            <span class="keyword">const</span> uint16x4x2_t a00_u16 =</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            {</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                {</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                    vget_low_u16(vmovl_u8(a00_u8)),</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                    vget_high_u16(vmovl_u8(a00_u8))</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                }</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            };</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            <span class="keyword">const</span> uint16x4x4_t b00_u16 =</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            {</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                {</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                    vget_low_u16(vmovl_u8(vget_low_u8(b00_u8))),</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                    vget_high_u16(vmovl_u8(vget_low_u8(b00_u8))),</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                    vget_low_u16(vmovl_u8(vget_high_u8(b00_u8))),</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                    vget_high_u16(vmovl_u8(vget_high_u8(b00_u8)))</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                }</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            };</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            <span class="keyword">const</span> uint16x4x4_t b10_u16 =</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            {</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                {</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                    vget_low_u16(vmovl_u8(vget_low_u8(b10_u8))),</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                    vget_high_u16(vmovl_u8(vget_low_u8(b10_u8))),</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                    vget_low_u16(vmovl_u8(vget_high_u8(b10_u8))),</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                    vget_high_u16(vmovl_u8(vget_high_u8(b10_u8)))</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                }</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            };</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            <span class="keyword">const</span> uint16x4x4_t b20_u16 =</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            {</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                {</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                    vget_low_u16(vmovl_u8(vget_low_u8(b20_u8))),</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                    vget_high_u16(vmovl_u8(vget_low_u8(b20_u8))),</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                    vget_low_u16(vmovl_u8(vget_high_u8(b20_u8))),</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                    vget_high_u16(vmovl_u8(vget_high_u8(b20_u8)))</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                }</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            };</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            <span class="keyword">const</span> uint16x4x4_t b30_u16 =</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            {</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                {</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                    vget_low_u16(vmovl_u8(vget_low_u8(b30_u8))),</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                    vget_high_u16(vmovl_u8(vget_low_u8(b30_u8))),</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                    vget_low_u16(vmovl_u8(vget_high_u8(b30_u8))),</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                    vget_high_u16(vmovl_u8(vget_high_u8(b30_u8)))</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                }</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            };</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            <span class="keyword">const</span> uint16x4x4_t b40_u16 =</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            {</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                {</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                    vget_low_u16(vmovl_u8(vget_low_u8(b40_u8))),</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                    vget_high_u16(vmovl_u8(vget_low_u8(b40_u8))),</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                    vget_low_u16(vmovl_u8(vget_high_u8(b40_u8))),</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                    vget_high_u16(vmovl_u8(vget_high_u8(b40_u8)))</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                }</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            };</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            <span class="keyword">const</span> uint16x4x4_t b50_u16 =</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            {</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                {</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                    vget_low_u16(vmovl_u8(vget_low_u8(b50_u8))),</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                    vget_high_u16(vmovl_u8(vget_low_u8(b50_u8))),</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                    vget_low_u16(vmovl_u8(vget_high_u8(b50_u8))),</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                    vget_high_u16(vmovl_u8(vget_high_u8(b50_u8)))</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                }</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            };</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            <span class="keyword">const</span> uint16x4x4_t b60_u16 =</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            {</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                {</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                    vget_low_u16(vmovl_u8(vget_low_u8(b60_u8))),</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                    vget_high_u16(vmovl_u8(vget_low_u8(b60_u8))),</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                    vget_low_u16(vmovl_u8(vget_high_u8(b60_u8))),</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                    vget_high_u16(vmovl_u8(vget_high_u8(b60_u8)))</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                }</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;            };</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            <span class="keyword">const</span> uint16x4x4_t b70_u16 =</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            {</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                {</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                    vget_low_u16(vmovl_u8(vget_low_u8(b70_u8))),</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                    vget_high_u16(vmovl_u8(vget_low_u8(b70_u8))),</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                    vget_low_u16(vmovl_u8(vget_high_u8(b70_u8))),</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                    vget_high_u16(vmovl_u8(vget_high_u8(b70_u8)))</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                }</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            };</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            <span class="comment">// Accumulate 0:</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            c0.val[0] = vmlal_lane_u16(c0.val[0], b00_u16.val[0], a00_u16.val[0], 0);</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            c0.val[1] = vmlal_lane_u16(c0.val[1], b00_u16.val[1], a00_u16.val[0], 0);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            c0.val[2] = vmlal_lane_u16(c0.val[2], b00_u16.val[2], a00_u16.val[0], 0);</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            c0.val[3] = vmlal_lane_u16(c0.val[3], b00_u16.val[3], a00_u16.val[0], 0);</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            <span class="comment">// Accumulate 1:</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            c0.val[0] = vmlal_lane_u16(c0.val[0], b10_u16.val[0], a00_u16.val[0], 1);</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;            c0.val[1] = vmlal_lane_u16(c0.val[1], b10_u16.val[1], a00_u16.val[0], 1);</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;            c0.val[2] = vmlal_lane_u16(c0.val[2], b10_u16.val[2], a00_u16.val[0], 1);</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            c0.val[3] = vmlal_lane_u16(c0.val[3], b10_u16.val[3], a00_u16.val[0], 1);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            <span class="comment">// Accumulate 2:</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            c0.val[0] = vmlal_lane_u16(c0.val[0], b20_u16.val[0], a00_u16.val[0], 2);</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            c0.val[1] = vmlal_lane_u16(c0.val[1], b20_u16.val[1], a00_u16.val[0], 2);</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            c0.val[2] = vmlal_lane_u16(c0.val[2], b20_u16.val[2], a00_u16.val[0], 2);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            c0.val[3] = vmlal_lane_u16(c0.val[3], b20_u16.val[3], a00_u16.val[0], 2);</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            <span class="comment">// Accumulate 3:</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            c0.val[0] = vmlal_lane_u16(c0.val[0], b30_u16.val[0], a00_u16.val[0], 3);</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            c0.val[1] = vmlal_lane_u16(c0.val[1], b30_u16.val[1], a00_u16.val[0], 3);</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            c0.val[2] = vmlal_lane_u16(c0.val[2], b30_u16.val[2], a00_u16.val[0], 3);</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            c0.val[3] = vmlal_lane_u16(c0.val[3], b30_u16.val[3], a00_u16.val[0], 3);</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            <span class="comment">// Accumulate 4:</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            c0.val[0] = vmlal_lane_u16(c0.val[0], b40_u16.val[0], a00_u16.val[1], 0);</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            c0.val[1] = vmlal_lane_u16(c0.val[1], b40_u16.val[1], a00_u16.val[1], 0);</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            c0.val[2] = vmlal_lane_u16(c0.val[2], b40_u16.val[2], a00_u16.val[1], 0);</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            c0.val[3] = vmlal_lane_u16(c0.val[3], b40_u16.val[3], a00_u16.val[1], 0);</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            <span class="comment">// Accumulate 5:</span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            c0.val[0] = vmlal_lane_u16(c0.val[0], b50_u16.val[0], a00_u16.val[1], 1);</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;            c0.val[1] = vmlal_lane_u16(c0.val[1], b50_u16.val[1], a00_u16.val[1], 1);</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;            c0.val[2] = vmlal_lane_u16(c0.val[2], b50_u16.val[2], a00_u16.val[1], 1);</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;            c0.val[3] = vmlal_lane_u16(c0.val[3], b50_u16.val[3], a00_u16.val[1], 1);</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            <span class="comment">// Accumulate 6:</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            c0.val[0] = vmlal_lane_u16(c0.val[0], b60_u16.val[0], a00_u16.val[1], 2);</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            c0.val[1] = vmlal_lane_u16(c0.val[1], b60_u16.val[1], a00_u16.val[1], 2);</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;            c0.val[2] = vmlal_lane_u16(c0.val[2], b60_u16.val[2], a00_u16.val[1], 2);</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            c0.val[3] = vmlal_lane_u16(c0.val[3], b60_u16.val[3], a00_u16.val[1], 2);</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;            <span class="comment">// Accumulate 7:</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            c0.val[0] = vmlal_lane_u16(c0.val[0], b70_u16.val[0], a00_u16.val[1], 3);</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;            c0.val[1] = vmlal_lane_u16(c0.val[1], b70_u16.val[1], a00_u16.val[1], 3);</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            c0.val[2] = vmlal_lane_u16(c0.val[2], b70_u16.val[2], a00_u16.val[1], 3);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            c0.val[3] = vmlal_lane_u16(c0.val[3], b70_u16.val[3], a00_u16.val[1], 3);</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;            vec_a += 8;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;            matrix_b += 8 * stride_b;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        }</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        <span class="comment">// This for loop performs the left-over accumulations</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        <span class="keywordflow">for</span>(; vec_a &lt; vec_a_end_addr;)</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        {</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;            <span class="keyword">const</span> uint8x8_t  a00_u8 = vld1_dup_u8(vec_a);</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;            <span class="keyword">const</span> uint8x16_t b00_u8 = vld1q_u8(matrix_b);</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;            <span class="keyword">const</span> uint16x4x4_t b00_u16 =</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;            {</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                {</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                    vget_low_u16(vmovl_u8(vget_low_u8(b00_u8))),</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                    vget_high_u16(vmovl_u8(vget_low_u8(b00_u8))),</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                    vget_low_u16(vmovl_u8(vget_high_u8(b00_u8))),</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                    vget_high_u16(vmovl_u8(vget_high_u8(b00_u8)))</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                }</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;            };</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;            <span class="comment">// Convert a00_u8 to uint16_t and get the lower part</span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;            <span class="keyword">const</span> uint16x4_t a00_u16 = vget_low_u16(vmovl_u8(a00_u8));</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;            <span class="comment">// Accumulate 0:</span></div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;            c0.val[0] = vmlal_lane_u16(c0.val[0], b00_u16.val[0], a00_u16, 0);</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;            c0.val[1] = vmlal_lane_u16(c0.val[1], b00_u16.val[1], a00_u16, 0);</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;            c0.val[2] = vmlal_lane_u16(c0.val[2], b00_u16.val[2], a00_u16, 0);</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;            c0.val[3] = vmlal_lane_u16(c0.val[3], b00_u16.val[3], a00_u16, 0);</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;            vec_a += 1;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;            matrix_b += stride_b;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        }</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        <span class="keyword">auto</span> vec_out = <span class="keyword">reinterpret_cast&lt;</span>int32_t *<span class="keyword">&gt;</span>(out.ptr());</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        <span class="keywordflow">if</span>(<span class="keywordtype">id</span>.x() &lt; (width_out - 16))</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        {</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;            vst1q_s32(vec_out + 0, vreinterpretq_s32_u32(c0.val[0]));</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;            vst1q_s32(vec_out + 4, vreinterpretq_s32_u32(c0.val[1]));</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;            vst1q_s32(vec_out + 8, vreinterpretq_s32_u32(c0.val[2]));</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;            vst1q_s32(vec_out + 12, vreinterpretq_s32_u32(c0.val[3]));</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        }</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        {</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;            <span class="keyword">auto</span> left_over = width_out - <span class="keywordtype">id</span>.x();</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;            <span class="keywordflow">for</span>(<span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a> = 0; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a> &lt; 4 &amp;&amp; left_over; ++<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a>)</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;            {</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                <span class="keywordflow">for</span>(<span class="keyword">auto</span> j = 0; j &lt; 4 &amp;&amp; left_over; ++j, --left_over)</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                {</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                    *(vec_out + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a> * 4 + j) = c0.val[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a>][j];</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                }</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;            }</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        }</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    },</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    ina, inb, out);</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;}</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="keywordtype">void</span> <span class="keyword">inline</span> vector_matrix_multiply_s8(Iterator &amp;ina, Iterator &amp;inb, Iterator &amp;out, <span class="keywordtype">int</span> width_a, <span class="keywordtype">int</span> width_b, <span class="keywordtype">int</span> width_out, <span class="keywordtype">size_t</span> stride_b, <span class="keyword">const</span> Window &amp;window)</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;{</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> Coordinates &amp; <span class="keywordtype">id</span>)</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    {</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        <span class="keywordflow">if</span>(<span class="keywordtype">id</span>.x() &gt; width_b)</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        {</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;            <span class="keywordflow">return</span>;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        }</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        <span class="comment">// Accumulators for the block 0</span></div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        int32x4x4_t c0 =</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;        {</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;            {</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                vdupq_n_s32(0),</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                vdupq_n_s32(0),</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                vdupq_n_s32(0),</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                vdupq_n_s32(0)</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;            }</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;        };</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        <span class="keyword">auto</span> vec_a          = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(ina.ptr());</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        <span class="keyword">auto</span> matrix_b       = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(inb.ptr());</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        <span class="keyword">auto</span> vec_a_end_addr = vec_a + width_a;</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        <span class="comment">// This for loop performs 8 accumulations</span></div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;        <span class="keywordflow">for</span>(; vec_a &lt;= (vec_a_end_addr - 8);)</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        {</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;            <span class="keyword">const</span> int8x8_t  a00_s8 = vld1_s8(vec_a);</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;            <span class="keyword">const</span> int8x16_t b00_s8 = vld1q_s8(matrix_b + 0 * stride_b);</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;            <span class="keyword">const</span> int8x16_t b10_s8 = vld1q_s8(matrix_b + 1 * stride_b);</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;            <span class="keyword">const</span> int8x16_t b20_s8 = vld1q_s8(matrix_b + 2 * stride_b);</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;            <span class="keyword">const</span> int8x16_t b30_s8 = vld1q_s8(matrix_b + 3 * stride_b);</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;            <span class="keyword">const</span> int8x16_t b40_s8 = vld1q_s8(matrix_b + 4 * stride_b);</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;            <span class="keyword">const</span> int8x16_t b50_s8 = vld1q_s8(matrix_b + 5 * stride_b);</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;            <span class="keyword">const</span> int8x16_t b60_s8 = vld1q_s8(matrix_b + 6 * stride_b);</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;            <span class="keyword">const</span> int8x16_t b70_s8 = vld1q_s8(matrix_b + 7 * stride_b);</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;            <span class="comment">// Convert a00_s8 to int16_t and get the lower part</span></div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;            <span class="keyword">const</span> int16x4x2_t a00_s16 =</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;            {</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                {</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                    vget_low_s16(vmovl_s8(a00_s8)),</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                    vget_high_s16(vmovl_s8(a00_s8))</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;                }</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;            };</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;            <span class="keyword">const</span> int16x4x4_t b00_s16 =</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;            {</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;                {</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                    vget_low_s16(vmovl_s8(vget_low_s8(b00_s8))),</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;                    vget_high_s16(vmovl_s8(vget_low_s8(b00_s8))),</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;                    vget_low_s16(vmovl_s8(vget_high_s8(b00_s8))),</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                    vget_high_s16(vmovl_s8(vget_high_s8(b00_s8)))</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                }</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;            };</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;            <span class="keyword">const</span> int16x4x4_t b10_s16 =</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;            {</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                {</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                    vget_low_s16(vmovl_s8(vget_low_s8(b10_s8))),</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                    vget_high_s16(vmovl_s8(vget_low_s8(b10_s8))),</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                    vget_low_s16(vmovl_s8(vget_high_s8(b10_s8))),</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                    vget_high_s16(vmovl_s8(vget_high_s8(b10_s8)))</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                }</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;            };</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;            <span class="keyword">const</span> int16x4x4_t b20_s16 =</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;            {</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                {</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                    vget_low_s16(vmovl_s8(vget_low_s8(b20_s8))),</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                    vget_high_s16(vmovl_s8(vget_low_s8(b20_s8))),</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                    vget_low_s16(vmovl_s8(vget_high_s8(b20_s8))),</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                    vget_high_s16(vmovl_s8(vget_high_s8(b20_s8)))</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                }</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;            };</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;            <span class="keyword">const</span> int16x4x4_t b30_s16 =</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;            {</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                {</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                    vget_low_s16(vmovl_s8(vget_low_s8(b30_s8))),</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                    vget_high_s16(vmovl_s8(vget_low_s8(b30_s8))),</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                    vget_low_s16(vmovl_s8(vget_high_s8(b30_s8))),</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                    vget_high_s16(vmovl_s8(vget_high_s8(b30_s8)))</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                }</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;            };</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;            <span class="keyword">const</span> int16x4x4_t b40_s16 =</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;            {</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                {</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                    vget_low_s16(vmovl_s8(vget_low_s8(b40_s8))),</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                    vget_high_s16(vmovl_s8(vget_low_s8(b40_s8))),</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                    vget_low_s16(vmovl_s8(vget_high_s8(b40_s8))),</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                    vget_high_s16(vmovl_s8(vget_high_s8(b40_s8)))</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                }</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;            };</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;            <span class="keyword">const</span> int16x4x4_t b50_s16 =</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;            {</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;                {</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;                    vget_low_s16(vmovl_s8(vget_low_s8(b50_s8))),</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;                    vget_high_s16(vmovl_s8(vget_low_s8(b50_s8))),</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;                    vget_low_s16(vmovl_s8(vget_high_s8(b50_s8))),</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                    vget_high_s16(vmovl_s8(vget_high_s8(b50_s8)))</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                }</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;            };</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;            <span class="keyword">const</span> int16x4x4_t b60_s16 =</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;            {</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;                {</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                    vget_low_s16(vmovl_s8(vget_low_s8(b60_s8))),</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                    vget_high_s16(vmovl_s8(vget_low_s8(b60_s8))),</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                    vget_low_s16(vmovl_s8(vget_high_s8(b60_s8))),</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                    vget_high_s16(vmovl_s8(vget_high_s8(b60_s8)))</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                }</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;            };</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;            <span class="keyword">const</span> int16x4x4_t b70_s16 =</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;            {</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;                {</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                    vget_low_s16(vmovl_s8(vget_low_s8(b70_s8))),</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                    vget_high_s16(vmovl_s8(vget_low_s8(b70_s8))),</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                    vget_low_s16(vmovl_s8(vget_high_s8(b70_s8))),</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;                    vget_high_s16(vmovl_s8(vget_high_s8(b70_s8)))</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                }</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;            };</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;            <span class="comment">// Accumulate 0:</span></div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;            c0.val[0] = vmlal_lane_s16(c0.val[0], b00_s16.val[0], a00_s16.val[0], 0);</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;            c0.val[1] = vmlal_lane_s16(c0.val[1], b00_s16.val[1], a00_s16.val[0], 0);</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;            c0.val[2] = vmlal_lane_s16(c0.val[2], b00_s16.val[2], a00_s16.val[0], 0);</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;            c0.val[3] = vmlal_lane_s16(c0.val[3], b00_s16.val[3], a00_s16.val[0], 0);</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;            <span class="comment">// Accumulate 1:</span></div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;            c0.val[0] = vmlal_lane_s16(c0.val[0], b10_s16.val[0], a00_s16.val[0], 1);</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;            c0.val[1] = vmlal_lane_s16(c0.val[1], b10_s16.val[1], a00_s16.val[0], 1);</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;            c0.val[2] = vmlal_lane_s16(c0.val[2], b10_s16.val[2], a00_s16.val[0], 1);</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;            c0.val[3] = vmlal_lane_s16(c0.val[3], b10_s16.val[3], a00_s16.val[0], 1);</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;            <span class="comment">// Accumulate 2:</span></div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;            c0.val[0] = vmlal_lane_s16(c0.val[0], b20_s16.val[0], a00_s16.val[0], 2);</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;            c0.val[1] = vmlal_lane_s16(c0.val[1], b20_s16.val[1], a00_s16.val[0], 2);</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;            c0.val[2] = vmlal_lane_s16(c0.val[2], b20_s16.val[2], a00_s16.val[0], 2);</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;            c0.val[3] = vmlal_lane_s16(c0.val[3], b20_s16.val[3], a00_s16.val[0], 2);</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;            <span class="comment">// Accumulate 3:</span></div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;            c0.val[0] = vmlal_lane_s16(c0.val[0], b30_s16.val[0], a00_s16.val[0], 3);</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;            c0.val[1] = vmlal_lane_s16(c0.val[1], b30_s16.val[1], a00_s16.val[0], 3);</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;            c0.val[2] = vmlal_lane_s16(c0.val[2], b30_s16.val[2], a00_s16.val[0], 3);</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;            c0.val[3] = vmlal_lane_s16(c0.val[3], b30_s16.val[3], a00_s16.val[0], 3);</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;            <span class="comment">// Accumulate 4:</span></div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;            c0.val[0] = vmlal_lane_s16(c0.val[0], b40_s16.val[0], a00_s16.val[1], 0);</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;            c0.val[1] = vmlal_lane_s16(c0.val[1], b40_s16.val[1], a00_s16.val[1], 0);</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;            c0.val[2] = vmlal_lane_s16(c0.val[2], b40_s16.val[2], a00_s16.val[1], 0);</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;            c0.val[3] = vmlal_lane_s16(c0.val[3], b40_s16.val[3], a00_s16.val[1], 0);</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;            <span class="comment">// Accumulate 5:</span></div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;            c0.val[0] = vmlal_lane_s16(c0.val[0], b50_s16.val[0], a00_s16.val[1], 1);</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;            c0.val[1] = vmlal_lane_s16(c0.val[1], b50_s16.val[1], a00_s16.val[1], 1);</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;            c0.val[2] = vmlal_lane_s16(c0.val[2], b50_s16.val[2], a00_s16.val[1], 1);</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;            c0.val[3] = vmlal_lane_s16(c0.val[3], b50_s16.val[3], a00_s16.val[1], 1);</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;            <span class="comment">// Accumulate 6:</span></div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;            c0.val[0] = vmlal_lane_s16(c0.val[0], b60_s16.val[0], a00_s16.val[1], 2);</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;            c0.val[1] = vmlal_lane_s16(c0.val[1], b60_s16.val[1], a00_s16.val[1], 2);</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;            c0.val[2] = vmlal_lane_s16(c0.val[2], b60_s16.val[2], a00_s16.val[1], 2);</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;            c0.val[3] = vmlal_lane_s16(c0.val[3], b60_s16.val[3], a00_s16.val[1], 2);</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;            <span class="comment">// Accumulate 7:</span></div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;            c0.val[0] = vmlal_lane_s16(c0.val[0], b70_s16.val[0], a00_s16.val[1], 3);</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;            c0.val[1] = vmlal_lane_s16(c0.val[1], b70_s16.val[1], a00_s16.val[1], 3);</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;            c0.val[2] = vmlal_lane_s16(c0.val[2], b70_s16.val[2], a00_s16.val[1], 3);</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;            c0.val[3] = vmlal_lane_s16(c0.val[3], b70_s16.val[3], a00_s16.val[1], 3);</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;            vec_a += 8;</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;            matrix_b += 8 * stride_b;</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;        }</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;        <span class="comment">// This for loop performs the left-over accumulations</span></div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;        <span class="keywordflow">for</span>(; vec_a &lt; vec_a_end_addr;)</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;        {</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;            <span class="keyword">const</span> int8x8_t  a00_s8 = vld1_dup_s8(vec_a);</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;            <span class="keyword">const</span> int8x16_t b00_s8 = vld1q_s8(matrix_b);</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;            <span class="keyword">const</span> int16x4x4_t b00_s16 =</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;            {</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;                {</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;                    vget_low_s16(vmovl_s8(vget_low_s8(b00_s8))),</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;                    vget_high_s16(vmovl_s8(vget_low_s8(b00_s8))),</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;                    vget_low_s16(vmovl_s8(vget_high_s8(b00_s8))),</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;                    vget_high_s16(vmovl_s8(vget_high_s8(b00_s8)))</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;                }</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;            };</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;            <span class="comment">// Convert a00_s8 to uint16_t and get the lower part</span></div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;            <span class="keyword">const</span> int16x4_t a00_s16 = vget_low_s16(vmovl_s8(a00_s8));</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;            <span class="comment">// Accumulate 0:</span></div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;            c0.val[0] = vmlal_lane_s16(c0.val[0], b00_s16.val[0], a00_s16, 0);</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;            c0.val[1] = vmlal_lane_s16(c0.val[1], b00_s16.val[1], a00_s16, 0);</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;            c0.val[2] = vmlal_lane_s16(c0.val[2], b00_s16.val[2], a00_s16, 0);</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;            c0.val[3] = vmlal_lane_s16(c0.val[3], b00_s16.val[3], a00_s16, 0);</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;            vec_a += 1;</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;            matrix_b += stride_b;</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;        }</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;        <span class="keyword">auto</span> vec_out = <span class="keyword">reinterpret_cast&lt;</span>int32_t *<span class="keyword">&gt;</span>(out.ptr());</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;        <span class="keywordflow">if</span>(<span class="keywordtype">id</span>.x() &lt; (width_out - 16))</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;        {</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;            vst1q_s32(vec_out + 0, c0.val[0]);</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;            vst1q_s32(vec_out + 4, c0.val[1]);</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;            vst1q_s32(vec_out + 8, c0.val[2]);</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;            vst1q_s32(vec_out + 12, c0.val[3]);</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;        }</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;        {</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;            <span class="keyword">auto</span> left_over = width_out - <span class="keywordtype">id</span>.x();</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;            <span class="keywordflow">for</span>(<span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a> = 0; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a> &lt; 4 &amp;&amp; left_over; ++<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a>)</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;            {</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;                <span class="keywordflow">for</span>(<span class="keyword">auto</span> j = 0; j &lt; 4 &amp;&amp; left_over; ++j, --left_over)</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;                {</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;                    *(vec_out + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a> * 4 + j) = c0.val[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a>][j];</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;                }</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;            }</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;        }</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    },</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;    ina, inb, out);</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;}</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;<span class="keywordtype">void</span> <span class="keyword">inline</span> matrix_multiply_u8(Iterator &amp;ina, Iterator &amp;inb, Iterator &amp;out, <span class="keywordtype">int</span> width_b, <span class="keyword">const</span> TensorInfo &amp;out_info, <span class="keyword">const</span> Window &amp;window)</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;{</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>   width_out  = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(out_info.dimension(0));</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>   height_out = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(out_info.dimension(1));</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> out_stride = out_info.strides_in_bytes()[1] / out_info.element_size();</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> Coordinates &amp; <span class="keywordtype">id</span>)</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    {</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;        <span class="keyword">const</span> uint8_t *mtx_a0 = ina.ptr();</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;        <span class="keyword">const</span> uint8_t *mtx_b0 = inb.ptr();</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;        <span class="comment">// Note: Since the input are all positives, we can use uint32_t</span></div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;        <span class="comment">// Accumulators for the block 0</span></div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;        uint32x4x4_t c0 =</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;        {</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;            {</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;                vdupq_n_u32(0),</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;                vdupq_n_u32(0),</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;                vdupq_n_u32(0),</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;                vdupq_n_u32(0)</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;            }</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;        };</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;        <span class="comment">// Accumulators for the block 1</span></div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;        uint32x4x4_t c1 =</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;        {</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;            {</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;                vdupq_n_u32(0),</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;                vdupq_n_u32(0),</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;                vdupq_n_u32(0),</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;                vdupq_n_u32(0)</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;            }</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;        };</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;        <span class="comment">// Accumulators for the block 2</span></div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;        uint32x4x4_t c2 =</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;        {</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;            {</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;                vdupq_n_u32(0),</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;                vdupq_n_u32(0),</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;                vdupq_n_u32(0),</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;                vdupq_n_u32(0)</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;            }</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;        };</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;        <span class="comment">// Accumulators for the block 3</span></div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;        uint32x4x4_t c3 =</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;        {</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;            {</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;                vdupq_n_u32(0),</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;                vdupq_n_u32(0),</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;                vdupq_n_u32(0),</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;                vdupq_n_u32(0)</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;            }</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;        };</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a> = 0; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a> &lt; width_b; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a> += 16, mtx_a0 += 4, mtx_b0 += 16)</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;        {</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;            <span class="keyword">const</span> uint8x8_t  a00_u8 = vld1_u8(mtx_a0);</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;            <span class="keyword">const</span> uint8x16_t b00_u8 = vld1q_u8(mtx_b0);</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;            <span class="comment">// Convert a00_u8 to uint16_t and get the lower part</span></div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;            <span class="keyword">const</span> uint16x4_t a00_u16 = vget_low_u16(vmovl_u8(a00_u8));</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;            <span class="comment">// Convert b00_s8 to uint16_t</span></div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;            <span class="keyword">const</span> uint16x4x4_t b00_u16 =</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;            {</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;                {</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;                    vget_low_u16(vmovl_u8(vget_low_u8(b00_u8))),</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;                    vget_high_u16(vmovl_u8(vget_low_u8(b00_u8))),</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;                    vget_low_u16(vmovl_u8(vget_high_u8(b00_u8))),</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;                    vget_high_u16(vmovl_u8(vget_high_u8(b00_u8)))</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;                }</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;            };</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;            <span class="comment">// 4x4 block 0</span></div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;            c0.val[0] = vmlal_lane_u16(c0.val[0], b00_u16.val[0], a00_u16, 0);</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;            c0.val[1] = vmlal_lane_u16(c0.val[1], b00_u16.val[1], a00_u16, 0);</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;            c0.val[2] = vmlal_lane_u16(c0.val[2], b00_u16.val[2], a00_u16, 0);</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;            c0.val[3] = vmlal_lane_u16(c0.val[3], b00_u16.val[3], a00_u16, 0);</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;            <span class="comment">// 4x4 block 1</span></div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;            c1.val[0] = vmlal_lane_u16(c1.val[0], b00_u16.val[0], a00_u16, 1);</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;            c1.val[1] = vmlal_lane_u16(c1.val[1], b00_u16.val[1], a00_u16, 1);</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;            c1.val[2] = vmlal_lane_u16(c1.val[2], b00_u16.val[2], a00_u16, 1);</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;            c1.val[3] = vmlal_lane_u16(c1.val[3], b00_u16.val[3], a00_u16, 1);</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;            <span class="comment">// 4x4 block 2</span></div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;            c2.val[0] = vmlal_lane_u16(c2.val[0], b00_u16.val[0], a00_u16, 2);</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;            c2.val[1] = vmlal_lane_u16(c2.val[1], b00_u16.val[1], a00_u16, 2);</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;            c2.val[2] = vmlal_lane_u16(c2.val[2], b00_u16.val[2], a00_u16, 2);</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;            c2.val[3] = vmlal_lane_u16(c2.val[3], b00_u16.val[3], a00_u16, 2);</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;            <span class="comment">// 4x4 block 3</span></div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;            c3.val[0] = vmlal_lane_u16(c3.val[0], b00_u16.val[0], a00_u16, 3);</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;            c3.val[1] = vmlal_lane_u16(c3.val[1], b00_u16.val[1], a00_u16, 3);</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;            c3.val[2] = vmlal_lane_u16(c3.val[2], b00_u16.val[2], a00_u16, 3);</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;            c3.val[3] = vmlal_lane_u16(c3.val[3], b00_u16.val[3], a00_u16, 3);</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;        }</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;        <span class="keyword">auto</span> mtx_out = <span class="keyword">reinterpret_cast&lt;</span>int32_t *<span class="keyword">&gt;</span>(out.ptr());</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;        <span class="keywordflow">if</span>(<span class="keywordtype">id</span>.y() &lt; height_out &amp;&amp; <span class="keywordtype">id</span>.x() &lt; (width_out - 16))</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;        {</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;            vst1q_s32(mtx_out + 0 * out_stride + 0, vreinterpretq_s32_u32(c0.val[0]));</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;            vst1q_s32(mtx_out + 0 * out_stride + 4, vreinterpretq_s32_u32(c0.val[1]));</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;            vst1q_s32(mtx_out + 0 * out_stride + 8, vreinterpretq_s32_u32(c0.val[2]));</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;            vst1q_s32(mtx_out + 0 * out_stride + 12, vreinterpretq_s32_u32(c0.val[3]));</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;            <span class="keywordflow">if</span>(<span class="keywordtype">id</span>.y() + 1 &lt; height_out)</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;            {</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;                vst1q_s32(mtx_out + 1 * out_stride + 0, vreinterpretq_s32_u32(c1.val[0]));</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;                vst1q_s32(mtx_out + 1 * out_stride + 4, vreinterpretq_s32_u32(c1.val[1]));</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;                vst1q_s32(mtx_out + 1 * out_stride + 8, vreinterpretq_s32_u32(c1.val[2]));</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;                vst1q_s32(mtx_out + 1 * out_stride + 12, vreinterpretq_s32_u32(c1.val[3]));</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;                <span class="keywordflow">if</span>(<span class="keywordtype">id</span>.y() + 2 &lt; height_out)</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;                {</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;                    vst1q_s32(mtx_out + 2 * out_stride + 0, vreinterpretq_s32_u32(c2.val[0]));</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;                    vst1q_s32(mtx_out + 2 * out_stride + 4, vreinterpretq_s32_u32(c2.val[1]));</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;                    vst1q_s32(mtx_out + 2 * out_stride + 8, vreinterpretq_s32_u32(c2.val[2]));</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;                    vst1q_s32(mtx_out + 2 * out_stride + 12, vreinterpretq_s32_u32(c2.val[3]));</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;                    <span class="keywordflow">if</span>(<span class="keywordtype">id</span>.y() + 3 &lt; height_out)</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;                    {</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;                        vst1q_s32(mtx_out + 3 * out_stride + 0, vreinterpretq_s32_u32(c3.val[0]));</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;                        vst1q_s32(mtx_out + 3 * out_stride + 4, vreinterpretq_s32_u32(c3.val[1]));</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;                        vst1q_s32(mtx_out + 3 * out_stride + 8, vreinterpretq_s32_u32(c3.val[2]));</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;                        vst1q_s32(mtx_out + 3 * out_stride + 12, vreinterpretq_s32_u32(c3.val[3]));</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;                    }</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;                }</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;            }</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;        }</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;        {</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> left_over_value = width_out - <span class="keywordtype">id</span>.x();</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;            <span class="keyword">auto</span>       left_over       = left_over_value;</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;            <span class="keywordflow">for</span>(<span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a> = 0; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a> &lt; 4 &amp;&amp; left_over; ++<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a>)</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;            {</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;                <span class="keywordflow">for</span>(<span class="keyword">auto</span> j = 0; j &lt; 4 &amp;&amp; left_over; ++j, --left_over)</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;                {</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;                    *(mtx_out + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a> * 4 + j) = c0.val[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a>][j];</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;                }</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;            }</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;            <span class="keywordflow">if</span>(<span class="keywordtype">id</span>.y() + 1 &lt; height_out)</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;            {</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;                left_over = left_over_value;</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;                <span class="keywordflow">for</span>(<span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a> = 0; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a> &lt; 4 &amp;&amp; left_over; ++<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a>)</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;                {</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;                    <span class="keywordflow">for</span>(<span class="keyword">auto</span> j = 0; j &lt; 4 &amp;&amp; left_over; ++j, --left_over)</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;                    {</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;                        *(mtx_out + out_stride + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a> * 4 + j) = c1.val[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a>][j];</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;                    }</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;                }</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;                <span class="keywordflow">if</span>(<span class="keywordtype">id</span>.y() + 2 &lt; height_out)</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;                {</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;                    left_over = left_over_value;</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;                    <span class="keywordflow">for</span>(<span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a> = 0; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a> &lt; 4 &amp;&amp; left_over; ++<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a>)</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;                    {</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;                        <span class="keywordflow">for</span>(<span class="keyword">auto</span> j = 0; j &lt; 4 &amp;&amp; left_over; ++j, --left_over)</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;                        {</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;                            *(mtx_out + out_stride * 2 + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a> * 4 + j) = c2.val[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a>][j];</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;                        }</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;                    }</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;                    <span class="keywordflow">if</span>(<span class="keywordtype">id</span>.y() + 3 &lt; height_out)</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;                    {</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;                        left_over = left_over_value;</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;                        <span class="keywordflow">for</span>(<span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a> = 0; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a> &lt; 4 &amp;&amp; left_over; ++<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a>)</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;                        {</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;                            <span class="keywordflow">for</span>(<span class="keyword">auto</span> j = 0; j &lt; 4 &amp;&amp; left_over; ++j, --left_over)</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;                            {</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;                                *(mtx_out + out_stride * 3 + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a> * 4 + j) = c3.val[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a>][j];</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;                            }</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;                        }</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;                    }</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;                }</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;            }</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;        }</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;    },</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;    ina, inb, out);</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;}</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;<span class="keywordtype">void</span> <span class="keyword">inline</span> matrix_multiply_s8(Iterator &amp;ina, Iterator &amp;inb, Iterator &amp;out, <span class="keywordtype">int</span> width_b, <span class="keyword">const</span> TensorInfo &amp;out_info, <span class="keyword">const</span> Window &amp;window)</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;{</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>   width_out  = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(out_info.dimension(0));</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>   height_out = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(out_info.dimension(1));</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> out_stride = out_info.strides_in_bytes()[1] / out_info.element_size();</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;    <span class="comment">// The implementation assumes that the matrix A and Matrix B have been reshaped respectively with CpuGemmInterleave4x4 and CpuGemmTranspose1xW</span></div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;    <span class="comment">// The reshaping of the matrices helps to have a cache friendly implementation and helps to avoid the data re-arrangements needed for computing 16x4 elements per iteration</span></div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;    <span class="comment">// All the values needed for computing a single 4x4 block will be read from consecutive memory positions</span></div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> Coordinates &amp; <span class="keywordtype">id</span>)</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;    {</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;        <span class="keyword">auto</span> *mtx_a0 = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(ina.ptr());</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;        <span class="keyword">auto</span> *mtx_b0 = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(inb.ptr());</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;        <span class="comment">// Note: Since the input are all positives, we can use uint32_t</span></div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;        <span class="comment">// Accumulators for the block 0</span></div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;        int32x4x4_t c0 =</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;        {</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;            {</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;                vdupq_n_s32(0),</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;                vdupq_n_s32(0),</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;                vdupq_n_s32(0),</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;                vdupq_n_s32(0)</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;            }</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;        };</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;        <span class="comment">// Accumulators for the block 1</span></div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;        int32x4x4_t c1 =</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;        {</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;            {</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;                vdupq_n_s32(0),</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;                vdupq_n_s32(0),</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;                vdupq_n_s32(0),</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;                vdupq_n_s32(0)</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;            }</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;        };</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;        <span class="comment">// Accumulators for the block 2</span></div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;        int32x4x4_t c2 =</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;        {</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;            {</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;                vdupq_n_s32(0),</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;                vdupq_n_s32(0),</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;                vdupq_n_s32(0),</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;                vdupq_n_s32(0)</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;            }</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;        };</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;        <span class="comment">// Accumulators for the block 3</span></div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;        int32x4x4_t c3 =</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;        {</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;            {</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;                vdupq_n_s32(0),</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;                vdupq_n_s32(0),</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;                vdupq_n_s32(0),</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;                vdupq_n_s32(0)</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;            }</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;        };</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a> = 0; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a> &lt; width_b; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a> += 16, mtx_a0 += 4, mtx_b0 += 16)</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;        {</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;            <span class="keyword">const</span> int8x8_t  a00_s8 = vld1_s8(mtx_a0);</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;            <span class="keyword">const</span> int8x16_t b00_s8 = vld1q_s8(mtx_b0);</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;            <span class="comment">// Convert a00_s8 to uint16_t and get the lower part</span></div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;            <span class="keyword">const</span> int16x4_t a00_s16 = vget_low_s16(vmovl_s8(a00_s8));</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;            <span class="comment">// Convert b00_s8 to int16_t</span></div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;            <span class="keyword">const</span> int16x4x4_t b00_s16 =</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;            {</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;                {</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;                    vget_low_s16(vmovl_s8(vget_low_s8(b00_s8))),</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;                    vget_high_s16(vmovl_s8(vget_low_s8(b00_s8))),</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;                    vget_low_s16(vmovl_s8(vget_high_s8(b00_s8))),</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;                    vget_high_s16(vmovl_s8(vget_high_s8(b00_s8)))</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;                }</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;            };</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;            <span class="comment">// 4x4 block 0</span></div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;            c0.val[0] = vmlal_lane_s16(c0.val[0], b00_s16.val[0], a00_s16, 0);</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;            c0.val[1] = vmlal_lane_s16(c0.val[1], b00_s16.val[1], a00_s16, 0);</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;            c0.val[2] = vmlal_lane_s16(c0.val[2], b00_s16.val[2], a00_s16, 0);</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;            c0.val[3] = vmlal_lane_s16(c0.val[3], b00_s16.val[3], a00_s16, 0);</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;            <span class="comment">// 4x4 block 1</span></div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;            c1.val[0] = vmlal_lane_s16(c1.val[0], b00_s16.val[0], a00_s16, 1);</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;            c1.val[1] = vmlal_lane_s16(c1.val[1], b00_s16.val[1], a00_s16, 1);</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;            c1.val[2] = vmlal_lane_s16(c1.val[2], b00_s16.val[2], a00_s16, 1);</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;            c1.val[3] = vmlal_lane_s16(c1.val[3], b00_s16.val[3], a00_s16, 1);</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;            <span class="comment">// 4x4 block 2</span></div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;            c2.val[0] = vmlal_lane_s16(c2.val[0], b00_s16.val[0], a00_s16, 2);</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;            c2.val[1] = vmlal_lane_s16(c2.val[1], b00_s16.val[1], a00_s16, 2);</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;            c2.val[2] = vmlal_lane_s16(c2.val[2], b00_s16.val[2], a00_s16, 2);</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;            c2.val[3] = vmlal_lane_s16(c2.val[3], b00_s16.val[3], a00_s16, 2);</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;            <span class="comment">// 4x4 block 3</span></div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;            c3.val[0] = vmlal_lane_s16(c3.val[0], b00_s16.val[0], a00_s16, 3);</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;            c3.val[1] = vmlal_lane_s16(c3.val[1], b00_s16.val[1], a00_s16, 3);</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;            c3.val[2] = vmlal_lane_s16(c3.val[2], b00_s16.val[2], a00_s16, 3);</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;            c3.val[3] = vmlal_lane_s16(c3.val[3], b00_s16.val[3], a00_s16, 3);</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;        }</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;        <span class="keyword">auto</span> mtx_out = <span class="keyword">reinterpret_cast&lt;</span>int32_t *<span class="keyword">&gt;</span>(out.ptr());</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;        <span class="keywordflow">if</span>(<span class="keywordtype">id</span>.y() &lt; height_out &amp;&amp; <span class="keywordtype">id</span>.x() &lt; (width_out - 16))</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;        {</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;            vst1q_s32(mtx_out + 0 * out_stride + 0, c0.val[0]);</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;            vst1q_s32(mtx_out + 0 * out_stride + 4, c0.val[1]);</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;            vst1q_s32(mtx_out + 0 * out_stride + 8, c0.val[2]);</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;            vst1q_s32(mtx_out + 0 * out_stride + 12, c0.val[3]);</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;            <span class="keywordflow">if</span>(<span class="keywordtype">id</span>.y() + 1 &lt; height_out)</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;            {</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;                vst1q_s32(mtx_out + 1 * out_stride + 0, c1.val[0]);</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;                vst1q_s32(mtx_out + 1 * out_stride + 4, c1.val[1]);</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;                vst1q_s32(mtx_out + 1 * out_stride + 8, c1.val[2]);</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;                vst1q_s32(mtx_out + 1 * out_stride + 12, c1.val[3]);</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;                <span class="keywordflow">if</span>(<span class="keywordtype">id</span>.y() + 2 &lt; height_out)</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;                {</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;                    vst1q_s32(mtx_out + 2 * out_stride + 0, c2.val[0]);</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;                    vst1q_s32(mtx_out + 2 * out_stride + 4, c2.val[1]);</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;                    vst1q_s32(mtx_out + 2 * out_stride + 8, c2.val[2]);</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;                    vst1q_s32(mtx_out + 2 * out_stride + 12, c2.val[3]);</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;                    <span class="keywordflow">if</span>(<span class="keywordtype">id</span>.y() + 3 &lt; height_out)</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;                    {</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;                        vst1q_s32(mtx_out + 3 * out_stride + 0, c3.val[0]);</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;                        vst1q_s32(mtx_out + 3 * out_stride + 4, c3.val[1]);</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;                        vst1q_s32(mtx_out + 3 * out_stride + 8, c3.val[2]);</div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;                        vst1q_s32(mtx_out + 3 * out_stride + 12, c3.val[3]);</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;                    }</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;                }</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;            }</div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;        }</div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(<span class="keywordtype">id</span>.y() &lt; height_out)</div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;        {</div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> left_over_value = width_out - <span class="keywordtype">id</span>.x();</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;            <span class="keyword">auto</span>       left_over       = left_over_value;</div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;            <span class="keywordflow">for</span>(<span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a> = 0; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a> &lt; 4 &amp;&amp; left_over; ++<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a>)</div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;            {</div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;                <span class="keywordflow">for</span>(<span class="keyword">auto</span> j = 0; j &lt; 4 &amp;&amp; left_over; ++j, --left_over)</div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;                {</div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;                    *(mtx_out + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a> * 4 + j) = c0.val[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a>][j];</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;                }</div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;            }</div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;            <span class="keywordflow">if</span>(<span class="keywordtype">id</span>.y() + 1 &lt; height_out)</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;            {</div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;                left_over = left_over_value;</div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;                <span class="keywordflow">for</span>(<span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a> = 0; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a> &lt; 4 &amp;&amp; left_over; ++<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a>)</div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;                {</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;                    <span class="keywordflow">for</span>(<span class="keyword">auto</span> j = 0; j &lt; 4 &amp;&amp; left_over; ++j, --left_over)</div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;                    {</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;                        *(mtx_out + out_stride + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a> * 4 + j) = c1.val[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a>][j];</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;                    }</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;                }</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;                <span class="keywordflow">if</span>(<span class="keywordtype">id</span>.y() + 2 &lt; height_out)</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;                {</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;                    left_over = left_over_value;</div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;                    <span class="keywordflow">for</span>(<span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a> = 0; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a> &lt; 4 &amp;&amp; left_over; ++<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a>)</div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;                    {</div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;                        <span class="keywordflow">for</span>(<span class="keyword">auto</span> j = 0; j &lt; 4 &amp;&amp; left_over; ++j, --left_over)</div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;                        {</div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;                            *(mtx_out + out_stride * 2 + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a> * 4 + j) = c2.val[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a>][j];</div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;                        }</div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;                    }</div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;                    <span class="keywordflow">if</span>(<span class="keywordtype">id</span>.y() + 3 &lt; height_out)</div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;                    {</div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;                        left_over = left_over_value;</div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;                        <span class="keywordflow">for</span>(<span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a> = 0; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a> &lt; 4 &amp;&amp; left_over; ++<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a>)</div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;                        {</div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;                            <span class="keywordflow">for</span>(<span class="keyword">auto</span> j = 0; j &lt; 4 &amp;&amp; left_over; ++j, --left_over)</div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;                            {</div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;                                *(mtx_out + out_stride * 3 + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a> * 4 + j) = c3.val[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a>][j];</div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;                            }</div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;                        }</div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;                    }</div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;                }</div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;            }</div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;        }</div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;</div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;    },</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;    ina, inb, out);</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;}</div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;Status <a class="code" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#acf9ea6633274730cd08b8b8fab3a6fe6">validate_arguments</a>(<span class="keyword">const</span> ITensorInfo *src0, <span class="keyword">const</span> ITensorInfo *src1, <span class="keyword">const</span> ITensorInfo *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>)</div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;{</div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(src0, 1, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">DataType::QASYMM8_SIGNED</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">DataType::S8</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>);</div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(src1, 1, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">DataType::QASYMM8_SIGNED</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a5f007421a4becd11c0666c2058b0b36c">DataType::QSYMM8</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a34f500e941c4df30b870126ec868ebd5">DataType::QSYMM8_PER_CHANNEL</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">DataType::S8</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>);</div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(dst, 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>);</div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;</div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;    TensorShape in0_shape = src0-&gt;tensor_shape();</div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;    TensorShape in1_shape = src1-&gt;tensor_shape();</div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;    TensorShape out_shape = dst-&gt;tensor_shape();</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;</div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;    <span class="comment">// Check vector-by-matrix case</span></div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;    <span class="keywordflow">if</span>(out_shape[1] == 1)</div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;    {</div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;        <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(in0_shape[0] != in1_shape[1], <span class="stringliteral">&quot;The number of input0&#39;s columns must be equal to input1&#39;s rows&quot;</span>);</div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;    }</div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;    {</div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;        in0_shape.collapse(2);</div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;        in1_shape.collapse(2);</div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;        out_shape.collapse(2);</div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;</div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;        <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(in0_shape[2] != out_shape[2], <span class="stringliteral">&quot;Output tensor must have the same number of batches of input0 tensor&quot;</span>);</div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;        <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(in1_shape[2] != 1 &amp;&amp; in0_shape[2] != in1_shape[2], <span class="stringliteral">&quot;Input1 tensor must have the same number of batches of input0 or the number of batches must be set to 1&quot;</span>);</div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;        <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(in1_shape[0] % 16, <span class="stringliteral">&quot;Input1&#39;s width must be a multiple of 16&quot;</span>);</div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;    }</div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;</div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;    <span class="keywordflow">return</span> Status{};</div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;}</div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;} <span class="comment">// namespace</span></div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;</div><div class="line"><a name="l00896"></a><span class="lineno"><a class="line" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_matrix_multiply_kernel.xhtml#abaa7c687413b5a67403a4df97c1189b2">  896</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_matrix_multiply_kernel.xhtml#abaa7c687413b5a67403a4df97c1189b2">CpuGemmLowpMatrixMultiplyKernel::configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *src0, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *src1, <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *dst)</div><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;{</div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(src0);</div><div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a>(src0, src1, dst);</div><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;    <a class="code" href="_error_8h.xhtml#a938dcd406ce611ef5345ad2531cdb948">ARM_COMPUTE_ERROR_THROW_ON</a>(<a class="code" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#acf9ea6633274730cd08b8b8fab3a6fe6">validate_arguments</a>(src0, src1, dst));</div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;</div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> in1_shape = src1-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>();</div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;    in1_shape.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#a8e15e87871211f98c2b566137e38ef99">collapse</a>(2);</div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;</div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;    _slide_matrix_b = in1_shape[2] != 1;</div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;</div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;    constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_elems_processed_per_iteration_x = 16;</div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;    constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_elems_processed_per_iteration_y = 4;</div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;</div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> win;</div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;    <span class="comment">// Check if the output tensor is a vector. If so,the kernel runs the vector-matrix multiplication</span></div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;    <span class="keywordflow">if</span>((dst-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(1) == 1))</div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;    {</div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;        <span class="comment">// Configure kernel window</span></div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;        win = <a class="code" href="namespacearm__compute.xhtml#aa84c2eae36ca4b68fa36c226df6f94e7">calculate_max_window</a>(*dst, <a class="code" href="classarm__compute_1_1_steps.xhtml">Steps</a>(num_elems_processed_per_iteration_x));</div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;    }</div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;    {</div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;        win = <a class="code" href="namespacearm__compute.xhtml#aa84c2eae36ca4b68fa36c226df6f94e7">calculate_max_window</a>(*dst, <a class="code" href="classarm__compute_1_1_steps.xhtml">Steps</a>(num_elems_processed_per_iteration_x, num_elems_processed_per_iteration_y));</div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;    }</div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;</div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;    ICpuKernel::configure(win);</div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;}</div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;</div><div class="line"><a name="l00925"></a><span class="lineno"><a class="line" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_matrix_multiply_kernel.xhtml#ade7f7ca859a4bc67b2a7f4588940dcd8">  925</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_matrix_multiply_kernel.xhtml#ade7f7ca859a4bc67b2a7f4588940dcd8">CpuGemmLowpMatrixMultiplyKernel::validate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *src0, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *src1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *dst)</div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;{</div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#acf9ea6633274730cd08b8b8fab3a6fe6">validate_arguments</a>(src0, src1, dst));</div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a>{};</div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;}</div><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;</div><div class="line"><a name="l00931"></a><span class="lineno"><a class="line" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_matrix_multiply_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">  931</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_matrix_multiply_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuGemmLowpMatrixMultiplyKernel::run_op</a>(<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> &amp;tensors, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>)</div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;{</div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(info);</div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a1b35b0d258183cf9ef36adf684d0b88c">ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL</a>(<span class="keyword">this</span>);</div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a6eb9ce82815fe429250189da7592ba75">ARM_COMPUTE_ERROR_ON_INVALID_SUBWINDOW</a>(<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">ICpuKernel::window</a>(), window);</div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;</div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;    <span class="keyword">auto</span> src0 = tensors.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a000c70e9839ed364ab7343de880a4d35">get_const_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5">TensorType::ACL_SRC_0</a>);</div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;    <span class="keyword">auto</span> src1 = tensors.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a000c70e9839ed364ab7343de880a4d35">get_const_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0">TensorType::ACL_SRC_1</a>);</div><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;    <span class="keyword">auto</span> dst  = tensors.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a341a4c8a24d190d39504656989573d91">get_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2">TensorType::ACL_DST</a>);</div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;</div><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;    <span class="comment">// Check if the output tensor is a vector. If so,the kernel runs the vector-matrix multiplication path</span></div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;    <span class="keywordflow">if</span>((dst-&gt;info()-&gt;dimension(1) == 1))</div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;    {</div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> width_matrix_a = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(src0-&gt;info()-&gt;dimension(0));</div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> width_matrix_b = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(src1-&gt;info()-&gt;dimension(0));</div><div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> width_out      = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(dst-&gt;info()-&gt;dimension(0));</div><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> in_b_stride    = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(src1-&gt;info()-&gt;strides_in_bytes()[1] / <a class="code" href="namespacearm__compute.xhtml#abb7e0f23a4f2e63f39433f158dad47ab">data_size_from_type</a>(src1-&gt;info()-&gt;data_type()));</div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;</div><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;        <span class="comment">// The implementation computes 16 elements per iteration</span></div><div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> window_start_x = 16 * info.<a class="code" href="structarm__compute_1_1_thread_info.xhtml#ab488bfc5d1f76143651f915915046354">thread_id</a>;</div><div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> window_step_x  = 16 * info.<a class="code" href="structarm__compute_1_1_thread_info.xhtml#a08963f7335eef295237ab460863bc3d5">num_threads</a>;</div><div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;        <span class="comment">// Make sure (window_end_x - window_start_x) is a multiple of window_step_x</span></div><div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> window_end_x = <a class="code" href="namespacearm__compute.xhtml#ab237a0a375cf382d52b61653248d3d4a">ceil_to_multiple</a>(width_matrix_b - window_start_x, window_step_x) + window_start_x;</div><div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;</div><div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;        <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> win_out(window);</div><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;        win_out.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(window_start_x, window_end_x, window_step_x));</div><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;        win_out.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 1, 1));</div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;</div><div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;        <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> win_a(window);</div><div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;        win_a.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 0, 0));</div><div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;        win_a.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 0, 0));</div><div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;</div><div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;        <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> win_b;</div><div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;        <span class="comment">// Don&#39;t slice matrix B along the z dimension if matrix B has just 2 dimensions and matrix A more than 2</span></div><div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;        <span class="comment">// This scenario can happen when the the matrix multiplication is used to perform a convolution operation</span></div><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;        <span class="keywordflow">if</span>(src1-&gt;info()-&gt;num_dimensions() &gt;= 3)</div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;        {</div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;            win_b = <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>;</div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;        }</div><div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;        win_b.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(window_start_x, window_end_x, window_step_x));</div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;        win_b.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 1, 1));</div><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;</div><div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> ina(src0, win_a);</div><div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> inb(src1, win_b);</div><div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> out(dst, win_out);</div><div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;</div><div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;        <span class="keywordflow">switch</span>(src0-&gt;info()-&gt;data_type())</div><div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;        {</div><div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">DataType::S8</a>:</div><div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">DataType::QASYMM8_SIGNED</a>:</div><div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;            {</div><div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;                vector_matrix_multiply_s8(ina, inb, out, width_matrix_a, width_matrix_b, width_out, in_b_stride, window);</div><div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;            }</div><div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>:</div><div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>:</div><div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;            {</div><div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;                vector_matrix_multiply_u8(ina, inb, out, width_matrix_a, width_matrix_b, width_out, in_b_stride, window);</div><div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;            }</div><div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;            <span class="keywordflow">default</span>:</div><div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;            {</div><div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;                <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Not supported&quot;</span>);</div><div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;            }</div><div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;        }</div><div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;    }</div><div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;    {</div><div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">size_t</span> in_b_stride = src1-&gt;info()-&gt;strides_in_bytes()[1];</div><div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>    width_b     = src1-&gt;info()-&gt;dimension(0);</div><div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;</div><div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;        <span class="comment">// Set step_x and step_y for matrix A. Scale by a factor of 4 the Y range as the input interleaved matrix A has 4 times less the rows of the output matrix</span></div><div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;        <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> win_a(window);</div><div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;        win_a.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 0, 0));</div><div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;        win_a.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(window.<a class="code" href="classarm__compute_1_1_window.xhtml#a1b522b073f3ca32d24eb4e03495ef8a6">y</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>() / 4, window.<a class="code" href="classarm__compute_1_1_window.xhtml#a1b522b073f3ca32d24eb4e03495ef8a6">y</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">end</a>() / 4, 1));</div><div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;</div><div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;        <span class="comment">// Set step_x and step_y for matrix B. Scale by a factor of 16 the X range as the input transposed matrix A has 16 times less the columns of the output matrix</span></div><div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;        <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> win_b;</div><div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;        <span class="comment">// Don&#39;t slice matrix B along the z dimension if matrix B has just 2 dimensions and matrix A more than 2</span></div><div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;        <span class="comment">// This scenario can happen when the the matrix multiplication is used to perform a convolution operation</span></div><div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;        <span class="keywordflow">if</span>(_slide_matrix_b)</div><div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;        {</div><div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;            win_b = <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>;</div><div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;        }</div><div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;        win_b.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>() / 16, window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">end</a>() / 16, in_b_stride));</div><div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;        win_b.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 0, 0));</div><div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;</div><div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;        <span class="comment">// The step x and step y for the output matrix has been already set using in configure()</span></div><div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> ina(src0, win_a);</div><div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> inb(src1, win_b);</div><div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> out(dst, window);</div><div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;</div><div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;        <span class="keywordflow">switch</span>(src0-&gt;info()-&gt;data_type())</div><div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;        {</div><div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">DataType::S8</a>:</div><div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">DataType::QASYMM8_SIGNED</a>:</div><div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;            {</div><div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;                matrix_multiply_s8(ina, inb, out, width_b, *dst-&gt;info(), <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>);</div><div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;            }</div><div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>:</div><div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>:</div><div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;            {</div><div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;                matrix_multiply_u8(ina, inb, out, width_b, *dst-&gt;info(), <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>);</div><div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;            }</div><div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;            <span class="keywordflow">default</span>:</div><div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;            {</div><div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;                <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Not supported&quot;</span>);</div><div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;            }</div><div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;        }</div><div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;    }</div><div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;}</div><div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;</div><div class="line"><a name="l01047"></a><span class="lineno"><a class="line" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_matrix_multiply_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd"> 1047</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_matrix_multiply_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuGemmLowpMatrixMultiplyKernel::name</a>()<span class="keyword"> const</span></div><div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;    <span class="keywordflow">return</span> <span class="stringliteral">&quot;CpuGemmLowpMatrixMultiplyKernel&quot;</span>;</div><div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;}</div><div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;} <span class="comment">// namespace kernels</span></div><div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;} <span class="comment">// namespace cpu</span></div><div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="ttc" id="namespacearm__compute_xhtml_aa84c2eae36ca4b68fa36c226df6f94e7"><div class="ttname"><a href="namespacearm__compute.xhtml#aa84c2eae36ca4b68fa36c226df6f94e7">arm_compute::calculate_max_window</a></div><div class="ttdeci">Window calculate_max_window(const ValidRegion &amp;valid_region, const Steps &amp;steps, bool skip_border, BorderSize border_size)</div><div class="ttdef"><b>Definition:</b> <a href="_window_helpers_8cpp_source.xhtml#l00028">WindowHelpers.cpp:28</a></div></div>
<div class="ttc" id="_window_helpers_8h_xhtml"><div class="ttname"><a href="_window_helpers_8h.xhtml">WindowHelpers.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_kernel_xhtml_ad34a46f53686c12a5c5e717cc9617fb6"><div class="ttname"><a href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">arm_compute::IKernel::window</a></div><div class="ttdeci">const Window &amp; window() const</div><div class="ttdoc">The maximum window the kernel can be executed on. </div><div class="ttdef"><b>Definition:</b> <a href="_i_kernel_8cpp_source.xhtml#l00028">IKernel.cpp:28</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml">arm_compute::TensorShape</a></div><div class="ttdoc">Shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00039">TensorShape.h:39</a></div></div>
<div class="ttc" id="_i_tensor_8h_xhtml"><div class="ttname"><a href="_i_tensor_8h.xhtml">ITensor.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2">arm_compute::ACL_DST</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00055">Types.h:55</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a178f0d3d87f959e00a743328d95359d2"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">arm_compute::ITensorInfo::dimension</a></div><div class="ttdeci">virtual size_t dimension(size_t index) const =0</div><div class="ttdoc">Return the size of the requested dimension. </div></div>
<div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::Format::U8</a></div><div class="ttdoc">1 channel, 1 U8 per channel </div></div>
<div class="ttc" id="_error_8h_xhtml_a8a1e1c105f0bdaf37db408c7cfcb77a4"><div class="ttname"><a href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ON_ERROR(status)</div><div class="ttdoc">Checks if a status contains an error and returns it. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00204">Error.h:204</a></div></div>
<div class="ttc" id="_window_8h_xhtml"><div class="ttname"><a href="_window_8h.xhtml">Window.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor&amp;#39;s metadata. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00043">ITensorInfo.h:43</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a938dcd406ce611ef5345ad2531cdb948"><div class="ttname"><a href="_error_8h.xhtml#a938dcd406ce611ef5345ad2531cdb948">ARM_COMPUTE_ERROR_THROW_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_THROW_ON(status)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00455">Error.h:455</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_1_1_dimension_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml">arm_compute::Window::Dimension</a></div><div class="ttdoc">Describe one of the image&amp;#39;s dimensions with a start, end and step. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00079">Window.h:79</a></div></div>
<div class="ttc" id="classarm__compute_1_1_status_xhtml"><div class="ttname"><a href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a></div><div class="ttdoc">Status class. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00052">Error.h:52</a></div></div>
<div class="ttc" id="_tensor_info_8h_xhtml"><div class="ttname"><a href="_tensor_info_8h.xhtml">TensorInfo.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_1_1kernels_xhtml_acf9ea6633274730cd08b8b8fab3a6fe6"><div class="ttname"><a href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#acf9ea6633274730cd08b8b8fab3a6fe6">arm_compute::cpu::kernels::validate_arguments</a></div><div class="ttdeci">Status validate_arguments(const ITensorInfo *src, const ITensorInfo *weights, const ITensorInfo *dst, const PadStrideInfo &amp;conv_info)</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_direct_conv2d_kernel_8cpp_source.xhtml#l00060">CpuDirectConv2dKernel.cpp:60</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2023 Arm Limited. </div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::Format::S32</a></div><div class="ttdoc">1 channel, 1 S32 per channel </div></div>
<div class="ttc" id="arm__compute_2core_2_utils_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_utils_8h.xhtml">Utils.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_pack_xhtml_a000c70e9839ed364ab7343de880a4d35"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_pack.xhtml#a000c70e9839ed364ab7343de880a4d35">arm_compute::ITensorPack::get_const_tensor</a></div><div class="ttdeci">const ITensor * get_const_tensor(int id) const</div><div class="ttdoc">Get constant tensor of a given id. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_pack_8cpp_source.xhtml#l00054">ITensorPack.cpp:54</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_aa96e81276ee4f87ab386cd05a5539a7d"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">arm_compute::Window::DimX</a></div><div class="ttdeci">static constexpr size_t DimX</div><div class="ttdoc">Alias for dimension 0 also known as X dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00043">Window.h:43</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_matrix_multiply_kernel_xhtml_abaa7c687413b5a67403a4df97c1189b2"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_matrix_multiply_kernel.xhtml#abaa7c687413b5a67403a4df97c1189b2">arm_compute::cpu::kernels::CpuGemmLowpMatrixMultiplyKernel::configure</a></div><div class="ttdeci">void configure(const ITensorInfo *src0, const ITensorInfo *src1, ITensorInfo *dst)</div><div class="ttdoc">Initialise the kernel&amp;#39;s input and output. </div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_lowp_matrix_multiply_kernel_8cpp_source.xhtml#l00896">CpuGemmLowpMatrixMultiplyKernel.cpp:896</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a7c66505457d00ece3aa4b34cab80757d"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">arm_compute::ITensorInfo::tensor_shape</a></div><div class="ttdeci">virtual const TensorShape &amp; tensor_shape() const =0</div><div class="ttdoc">Size for each dimension of the tensor. </div></div>
<div class="ttc" id="structarm__compute_1_1_thread_info_xhtml_ab488bfc5d1f76143651f915915046354"><div class="ttname"><a href="structarm__compute_1_1_thread_info.xhtml#ab488bfc5d1f76143651f915915046354">arm_compute::ThreadInfo::thread_id</a></div><div class="ttdeci">int thread_id</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_types_8h_source.xhtml#l00182">CPPTypes.h:182</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab237a0a375cf382d52b61653248d3d4a"><div class="ttname"><a href="namespacearm__compute.xhtml#ab237a0a375cf382d52b61653248d3d4a">arm_compute::ceil_to_multiple</a></div><div class="ttdeci">auto ceil_to_multiple(S value, T divisor) -&gt; decltype(((value+divisor - 1)/divisor) *divisor)</div><div class="ttdoc">Computes the smallest number larger or equal to value that is a multiple of divisor. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l00071">Utils.h:71</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">arm_compute::DataType::QASYMM8</a></div><div class="ttdoc">quantized, asymmetric fixed-point 8-bit number unsigned </div></div>
<div class="ttc" id="classarm__compute_1_1_steps_xhtml"><div class="ttname"><a href="classarm__compute_1_1_steps.xhtml">arm_compute::Steps</a></div><div class="ttdoc">Class to describe a number of elements in each dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_steps_8h_source.xhtml#l00040">Steps.h:40</a></div></div>
<div class="ttc" id="arm__compute_2core_2_validate_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml">Validate.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_abb7e0f23a4f2e63f39433f158dad47ab"><div class="ttname"><a href="namespacearm__compute.xhtml#abb7e0f23a4f2e63f39433f158dad47ab">arm_compute::data_size_from_type</a></div><div class="ttdeci">size_t data_size_from_type(DataType data_type)</div><div class="ttdoc">The size in bytes of the data type. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l00106">Utils.h:106</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_acd3d2bba51cb84d34dd7656ad2375a6e"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">arm_compute::Window::set</a></div><div class="ttdeci">void set(size_t dimension, const Dimension &amp;dim)</div><div class="ttdoc">Set the values of a given dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00049">Window.inl:49</a></div></div>
<div class="ttc" id="_error_8h_xhtml"><div class="ttname"><a href="_error_8h.xhtml">Error.h</a></div></div>
<div class="ttc" id="arm__compute_2core_2_validate_8h_xhtml_a1b35b0d258183cf9ef36adf684d0b88c"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a1b35b0d258183cf9ef36adf684d0b88c">ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL(k)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00915">Validate.h:915</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5">arm_compute::ACL_SRC_0</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00045">Types.h:45</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a5f007421a4becd11c0666c2058b0b36c"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a5f007421a4becd11c0666c2058b0b36c">arm_compute::DataType::QSYMM8</a></div><div class="ttdoc">quantized, symmetric fixed-point 8-bit number </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a73aa59d7b088082ec257a1c65edbf1d0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">arm_compute::test::validation::k</a></div><div class="ttdeci">const unsigned int k</div><div class="ttdef"><b>Definition:</b> <a href="_g_e_m_m_matrix_multiply_native_8cpp_source.xhtml#l00361">GEMMMatrixMultiplyNative.cpp:361</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0">arm_compute::ACL_SRC_1</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00046">Types.h:46</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a34f500e941c4df30b870126ec868ebd5"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a34f500e941c4df30b870126ec868ebd5">arm_compute::DataType::QSYMM8_PER_CHANNEL</a></div><div class="ttdoc">quantized, symmetric per channel fixed-point 8-bit number </div></div>
<div class="ttc" id="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_matrix_multiply_kernel_xhtml_ade7f7ca859a4bc67b2a7f4588940dcd8"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_matrix_multiply_kernel.xhtml#ade7f7ca859a4bc67b2a7f4588940dcd8">arm_compute::cpu::kernels::CpuGemmLowpMatrixMultiplyKernel::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *src0, const ITensorInfo *src1, const ITensorInfo *dst)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration. </div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_lowp_matrix_multiply_kernel_8cpp_source.xhtml#l00925">CpuGemmLowpMatrixMultiplyKernel.cpp:925</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_ad2d402364fa822b0b7775081291eeca9"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">arm_compute::Window::DimY</a></div><div class="ttdeci">static constexpr size_t DimY</div><div class="ttdoc">Alias for dimension 1 also known as Y dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00045">Window.h:45</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ac57b92957968088a392021cac1d2076b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a></div><div class="ttdeci">ScaleKernelInfo info(interpolation_policy, default_border_mode, PixelValue(), sampling_policy, false)</div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_pack_xhtml_a341a4c8a24d190d39504656989573d91"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_pack.xhtml#a341a4c8a24d190d39504656989573d91">arm_compute::ITensorPack::get_tensor</a></div><div class="ttdeci">ITensor * get_tensor(int id)</div><div class="ttdoc">Get tensor of a given id from the pac. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_pack_8cpp_source.xhtml#l00064">ITensorPack.cpp:64</a></div></div>
<div class="ttc" id="_auto_configuration_8h_xhtml"><div class="ttname"><a href="_auto_configuration_8h.xhtml">AutoConfiguration.h</a></div></div>
<div class="ttc" id="structarm__compute_1_1_thread_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_thread_info.xhtml">arm_compute::ThreadInfo</a></div><div class="ttdoc">Information about executing thread and CPU. </div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_types_8h_source.xhtml#l00180">CPPTypes.h:180</a></div></div>
<div class="ttc" id="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_matrix_multiply_kernel_xhtml_aef1a10d4d6422ca58d53d8414d5954bd"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_matrix_multiply_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">arm_compute::cpu::kernels::CpuGemmLowpMatrixMultiplyKernel::name</a></div><div class="ttdeci">const char * name() const override</div><div class="ttdoc">Name of the kernel. </div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_lowp_matrix_multiply_kernel_8cpp_source.xhtml#l01047">CpuGemmLowpMatrixMultiplyKernel.cpp:1047</a></div></div>
<div class="ttc" id="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_matrix_multiply_kernel_xhtml_a883429dd6cf828bfdd64b255afc458da"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_matrix_multiply_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">arm_compute::cpu::kernels::CpuGemmLowpMatrixMultiplyKernel::run_op</a></div><div class="ttdeci">void run_op(ITensorPack &amp;tensors, const Window &amp;window, const ThreadInfo &amp;info) override</div><div class="ttdoc">Execute the kernel on the passed window. </div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_lowp_matrix_multiply_kernel_8cpp_source.xhtml#l00931">CpuGemmLowpMatrixMultiplyKernel.cpp:931</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_a1b522b073f3ca32d24eb4e03495ef8a6"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a1b522b073f3ca32d24eb4e03495ef8a6">arm_compute::Window::y</a></div><div class="ttdeci">constexpr const Dimension &amp; y() const</div><div class="ttdoc">Alias to access the second dimension of the window. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00168">Window.h:168</a></div></div>
<div class="ttc" id="arm__compute_2core_2_validate_8h_xhtml_ae7eed178dac535c6e727061b1f5bc6eb"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN(t, c,...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00788">Validate.h:788</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a1c69762a42ab8add645d0a949b6f4b1f"><div class="ttname"><a href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_MSG(cond, msg)</div><div class="ttdoc">If the condition is true, an error is returned. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00244">Error.h:244</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_pack_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_pack.xhtml">arm_compute::ITensorPack</a></div><div class="ttdoc">Tensor packing service. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_pack_8h_source.xhtml#l00039">ITensorPack.h:39</a></div></div>
<div class="ttc" id="structarm__compute_1_1_thread_info_xhtml_a08963f7335eef295237ab460863bc3d5"><div class="ttname"><a href="structarm__compute_1_1_thread_info.xhtml#a08963f7335eef295237ab460863bc3d5">arm_compute::ThreadInfo::num_threads</a></div><div class="ttdeci">int num_threads</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_types_8h_source.xhtml#l00183">CPPTypes.h:183</a></div></div>
<div class="ttc" id="arm__compute_2core_2_validate_8h_xhtml_a921b705e9e3e0fe928928447869e62a5"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_NULLPTR(...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00157">Validate.h:157</a></div></div>
<div class="ttc" id="arm__compute_2core_2_helpers_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_helpers_8h.xhtml">Helpers.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5002bf7ec46d52971f9526e94172cfee"><div class="ttname"><a href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;... iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00077">Helpers.inl:77</a></div></div>
<div class="ttc" id="_cpu_gemm_lowp_matrix_multiply_kernel_8h_xhtml"><div class="ttname"><a href="_cpu_gemm_lowp_matrix_multiply_kernel_8h.xhtml">CpuGemmLowpMatrixMultiplyKernel.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">arm_compute::DataType::QASYMM8_SIGNED</a></div><div class="ttdoc">quantized, asymmetric fixed-point 8-bit number signed </div></div>
<div class="ttc" id="classarm__compute_1_1_window_1_1_dimension_xhtml_a0f590bfcf19110f44efc502e7b5c1d9e"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">arm_compute::Window::Dimension::end</a></div><div class="ttdeci">constexpr int end() const</div><div class="ttdoc">Return the end of the dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00102">Window.h:102</a></div></div>
<div class="ttc" id="classarm__compute_1_1_iterator_xhtml"><div class="ttname"><a href="classarm__compute_1_1_iterator.xhtml">arm_compute::Iterator</a></div><div class="ttdoc">Iterator updated by execute_window_loop for each window element. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00046">Helpers.h:46</a></div></div>
<div class="ttc" id="arm__compute_2core_2_types_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_1_1_dimension_xhtml_ab24e31d1a4830bf79564ee902ec6c060"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">arm_compute::Window::Dimension::start</a></div><div class="ttdeci">constexpr int start() const</div><div class="ttdoc">Return the start of the dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00097">Window.h:97</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">arm_compute::DataType::S8</a></div><div class="ttdoc">signed 8-bit number </div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml">arm_compute::Window</a></div><div class="ttdoc">Describe a multidimensional execution window. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00039">Window.h:39</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml_a8e15e87871211f98c2b566137e38ef99"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml#a8e15e87871211f98c2b566137e38ef99">arm_compute::TensorShape::collapse</a></div><div class="ttdeci">void collapse(size_t n, size_t first=0)</div><div class="ttdoc">Collapse the first n dimensions. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00133">TensorShape.h:133</a></div></div>
<div class="ttc" id="arm__compute_2core_2_validate_8h_xhtml_a6eb9ce82815fe429250189da7592ba75"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a6eb9ce82815fe429250189da7592ba75">ARM_COMPUTE_ERROR_ON_INVALID_SUBWINDOW</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_INVALID_SUBWINDOW(f, s)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00201">Validate.h:201</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_a273fd2ecdd45169b2f702f01a7e5e382"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">arm_compute::Window::x</a></div><div class="ttdeci">constexpr const Dimension &amp; x() const</div><div class="ttdoc">Alias to access the first dimension of the window. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00159">Window.h:159</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_2c61f424fd391396db977702a2beee9a.xhtml">cpu</a></li><li class="navelem"><a class="el" href="dir_1de7bcbbdec2bf3559cb3c688662d4f5.xhtml">kernels</a></li><li class="navelem"><a class="el" href="_cpu_gemm_lowp_matrix_multiply_kernel_8cpp.xhtml">CpuGemmLowpMatrixMultiplyKernel.cpp</a></li>
    <li class="footer">Generated on Thu May 18 2023 14:52:28 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
