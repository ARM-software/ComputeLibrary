<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute::graph Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('namespacearm__compute_1_1graph.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#namespaces">Namespaces</a> &#124;
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">arm_compute::graph Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:namespacearm__compute_1_1graph_1_1backends"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1backends.xhtml">backends</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1graph_1_1descriptors"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1descriptors.xhtml">descriptors</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1graph_1_1detail"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1detail.xhtml">detail</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1graph_1_1frontend"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph_1_1frontend.xhtml">frontend</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_activation_layer_node.xhtml">ActivationLayerNode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Activation Layer node.  <a href="classarm__compute_1_1graph_1_1_activation_layer_node.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_arg_min_max_layer_node.xhtml">ArgMinMaxLayerNode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Arg Min/Max Layer node.  <a href="classarm__compute_1_1graph_1_1_arg_min_max_layer_node.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_batch_normalization_layer_node.xhtml">BatchNormalizationLayerNode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Batch Normalization Layer node.  <a href="classarm__compute_1_1graph_1_1_batch_normalization_layer_node.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_bounding_box_transform_layer_node.xhtml">BoundingBoxTransformLayerNode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bounding Box Transform Layer node.  <a href="classarm__compute_1_1graph_1_1_bounding_box_transform_layer_node.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_channel_shuffle_layer_node.xhtml">ChannelShuffleLayerNode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Channel Shuffle Layer node.  <a href="classarm__compute_1_1graph_1_1_channel_shuffle_layer_node.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_concatenate_layer_node.xhtml">ConcatenateLayerNode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Concatenation Layer node.  <a href="classarm__compute_1_1graph_1_1_concatenate_layer_node.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_const_node.xhtml">ConstNode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Const node.  <a href="classarm__compute_1_1graph_1_1_const_node.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_convolution_layer_node.xhtml">ConvolutionLayerNode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convolution Layer node.  <a href="classarm__compute_1_1graph_1_1_convolution_layer_node.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_conv_post_op_info.xhtml">ConvPostOpInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convolution post operator info.  <a href="classarm__compute_1_1graph_1_1_conv_post_op_info.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_conv_post_op_info_activation.xhtml">ConvPostOpInfoActivation</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_conv_post_op_info_eltwise_add.xhtml">ConvPostOpInfoEltwiseAdd</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_data_layer_visitor.xhtml">DataLayerVisitor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class. ">Graph</a> printer visitor.  <a href="classarm__compute_1_1graph_1_1_data_layer_visitor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_deconvolution_layer_node.xhtml">DeconvolutionLayerNode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Deconvolution Layer node.  <a href="classarm__compute_1_1graph_1_1_deconvolution_layer_node.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_default_node_visitor.xhtml">DefaultNodeVisitor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default visitor implementation.  <a href="classarm__compute_1_1graph_1_1_default_node_visitor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_depth_concat_sub_tensor_mutator.xhtml">DepthConcatSubTensorMutator</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Mutation pass to optimize depth concatenation operations by using sub-tensors.  <a href="classarm__compute_1_1graph_1_1_depth_concat_sub_tensor_mutator.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_depth_to_space_layer_node.xhtml">DepthToSpaceLayerNode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">DepthToSpace Layer node.  <a href="classarm__compute_1_1graph_1_1_depth_to_space_layer_node.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_depthwise_convolution_layer_node.xhtml">DepthwiseConvolutionLayerNode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Depthwise Convolution Layer node.  <a href="classarm__compute_1_1graph_1_1_depthwise_convolution_layer_node.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_dequantization_layer_node.xhtml">DequantizationLayerNode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Dequantize Layer node.  <a href="classarm__compute_1_1graph_1_1_dequantization_layer_node.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_detection_output_layer_node.xhtml">DetectionOutputLayerNode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">DetectionOutput Layer node.  <a href="classarm__compute_1_1graph_1_1_detection_output_layer_node.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_detection_post_process_layer_node.xhtml">DetectionPostProcessLayerNode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">DetectionPostProcess Layer node.  <a href="classarm__compute_1_1graph_1_1_detection_post_process_layer_node.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_dot_graph_printer.xhtml">DotGraphPrinter</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class. ">Graph</a> printer interface.  <a href="classarm__compute_1_1graph_1_1_dot_graph_printer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_dot_graph_visitor.xhtml">DotGraphVisitor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class. ">Graph</a> printer visitor.  <a href="classarm__compute_1_1graph_1_1_dot_graph_visitor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_dummy_node.xhtml">DummyNode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Dummy Layer node.  <a href="classarm__compute_1_1graph_1_1_dummy_node.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_edge.xhtml">Edge</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class. ">Graph</a> <a class="el" href="classarm__compute_1_1graph_1_1_edge.xhtml" title="Graph Edge. ">Edge</a>.  <a href="classarm__compute_1_1graph_1_1_edge.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_eltwise_layer_node.xhtml">EltwiseLayerNode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Eltwise Layer node.  <a href="classarm__compute_1_1graph_1_1_eltwise_layer_node.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1graph_1_1_execution_task.xhtml">ExecutionTask</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Execution task.  <a href="structarm__compute_1_1graph_1_1_execution_task.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1graph_1_1_execution_workload.xhtml">ExecutionWorkload</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Execution workload.  <a href="structarm__compute_1_1graph_1_1_execution_workload.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_flatten_layer_node.xhtml">FlattenLayerNode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Flatten Layer node.  <a href="classarm__compute_1_1graph_1_1_flatten_layer_node.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_fully_connected_layer_node.xhtml">FullyConnectedLayerNode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fully Connected Layer node.  <a href="classarm__compute_1_1graph_1_1_fully_connected_layer_node.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_node.xhtml">FusedConvolutionBatchNormalizationNode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Batch Normalization node.  <a href="classarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_node.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_with_post_ops_node.xhtml">FusedConvolutionBatchNormalizationWithPostOpsNode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Batch Normalization node.  <a href="classarm__compute_1_1graph_1_1_fused_convolution_batch_normalization_with_post_ops_node.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_fused_convolution_with_post_op_node.xhtml">FusedConvolutionWithPostOpNode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convolution node.  <a href="classarm__compute_1_1graph_1_1_fused_convolution_with_post_op_node.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_fused_depthwise_convolution_batch_normalization_node.xhtml">FusedDepthwiseConvolutionBatchNormalizationNode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fused Depthwise Convolution Batch Normalization node.  <a href="classarm__compute_1_1graph_1_1_fused_depthwise_convolution_batch_normalization_node.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_generate_proposals_layer_node.xhtml">GenerateProposalsLayerNode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generate Proposals Layer node.  <a href="classarm__compute_1_1graph_1_1_generate_proposals_layer_node.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class. ">Graph</a> class.  <a href="classarm__compute_1_1graph_1_1_graph.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml">GraphBuilder</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class. ">Graph</a> builder class.  <a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1graph_1_1_graph_config.xhtml">GraphConfig</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class. ">Graph</a> configuration structure Device target types.  <a href="structarm__compute_1_1graph_1_1_graph_config.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class. ">Graph</a> context.  <a href="classarm__compute_1_1graph_1_1_graph_context.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph_manager.xhtml">GraphManager</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class. ">Graph</a> manager class.  <a href="classarm__compute_1_1graph_1_1_graph_manager.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_grouped_convolution_mutator.xhtml">GroupedConvolutionMutator</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Mutation pass to implement/optimize grouped convolutions.  <a href="classarm__compute_1_1graph_1_1_grouped_convolution_mutator.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_i_graph_mutator.xhtml">IGraphMutator</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class. ">Graph</a> mutator interface.  <a href="classarm__compute_1_1graph_1_1_i_graph_mutator.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_i_graph_printer.xhtml">IGraphPrinter</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class. ">Graph</a> printer interface.  <a href="classarm__compute_1_1graph_1_1_i_graph_printer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Node interface.  <a href="classarm__compute_1_1graph_1_1_i_node.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_i_node_visitor.xhtml">INodeVisitor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Node visitor interface.  <a href="classarm__compute_1_1graph_1_1_i_node_visitor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_in_place_operation_mutator.xhtml">InPlaceOperationMutator</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Mutation pass to optimize operations that can be performed in-place.  <a href="classarm__compute_1_1graph_1_1_in_place_operation_mutator.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_input_node.xhtml">InputNode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Input Layer node.  <a href="classarm__compute_1_1graph_1_1_input_node.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_i_tensor_accessor.xhtml">ITensorAccessor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml" title="Tensor object. ">Tensor</a> accessor interface.  <a href="classarm__compute_1_1graph_1_1_i_tensor_accessor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_i_tensor_handle.xhtml">ITensorHandle</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml" title="Tensor object. ">Tensor</a> handle interface object.  <a href="classarm__compute_1_1graph_1_1_i_tensor_handle.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_l2_normalize_layer_node.xhtml">L2NormalizeLayerNode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">L2Normalize Layer node.  <a href="classarm__compute_1_1graph_1_1_l2_normalize_layer_node.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1graph_1_1_memory_manager_context.xhtml">MemoryManagerContext</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Contains structs required for memory management.  <a href="structarm__compute_1_1graph_1_1_memory_manager_context.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_node_execution_method_mutator.xhtml">NodeExecutionMethodMutator</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Mutation pass to fall-back to default execution method.  <a href="classarm__compute_1_1graph_1_1_node_execution_method_mutator.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_node_fusion_mutator.xhtml">NodeFusionMutator</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Mutation pass to fuss nodes.  <a href="classarm__compute_1_1graph_1_1_node_fusion_mutator.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">NodeID-index struct.  <a href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Common node parameters.  <a href="structarm__compute_1_1graph_1_1_node_params.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_normalization_layer_node.xhtml">NormalizationLayerNode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Normalization Layer node.  <a href="classarm__compute_1_1graph_1_1_normalization_layer_node.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_normalize_planar_y_u_v_layer_node.xhtml">NormalizePlanarYUVLayerNode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Batch Normalization Layer node.  <a href="classarm__compute_1_1graph_1_1_normalize_planar_y_u_v_layer_node.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_output_node.xhtml">OutputNode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Output Layer node.  <a href="classarm__compute_1_1graph_1_1_output_node.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_pad_layer_node.xhtml">PadLayerNode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Pad Layer node.  <a href="classarm__compute_1_1graph_1_1_pad_layer_node.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_pass_manager.xhtml">PassManager</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Pass manager.  <a href="classarm__compute_1_1graph_1_1_pass_manager.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_permute_layer_node.xhtml">PermuteLayerNode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Permute Layer node.  <a href="classarm__compute_1_1graph_1_1_permute_layer_node.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_pooling_layer_node.xhtml">PoolingLayerNode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Pooling Layer node.  <a href="classarm__compute_1_1graph_1_1_pooling_layer_node.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_p_relu_layer_node.xhtml">PReluLayerNode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">PRelu Layer node.  <a href="classarm__compute_1_1graph_1_1_p_relu_layer_node.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_print_layer_node.xhtml">PrintLayerNode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Print Layer node.  <a href="classarm__compute_1_1graph_1_1_print_layer_node.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_prior_box_layer_node.xhtml">PriorBoxLayerNode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">PriorBox Layer node.  <a href="classarm__compute_1_1graph_1_1_prior_box_layer_node.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_quantization_layer_node.xhtml">QuantizationLayerNode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Quantization Layer node.  <a href="classarm__compute_1_1graph_1_1_quantization_layer_node.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_reduction_layer_node.xhtml">ReductionLayerNode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reduction Operation node.  <a href="classarm__compute_1_1graph_1_1_reduction_layer_node.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_reorg_layer_node.xhtml">ReorgLayerNode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reorg Layer node.  <a href="classarm__compute_1_1graph_1_1_reorg_layer_node.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_reshape_layer_node.xhtml">ReshapeLayerNode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reshape Layer node.  <a href="classarm__compute_1_1graph_1_1_reshape_layer_node.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_resize_layer_node.xhtml">ResizeLayerNode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Resize Layer node.  <a href="classarm__compute_1_1graph_1_1_resize_layer_node.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_r_o_i_align_layer_node.xhtml">ROIAlignLayerNode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">ROI Align node.  <a href="classarm__compute_1_1graph_1_1_r_o_i_align_layer_node.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_slice_layer_node.xhtml">SliceLayerNode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Slice Layer node.  <a href="classarm__compute_1_1graph_1_1_slice_layer_node.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_softmax_layer_node.xhtml">SoftmaxLayerNode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Softmax Layer node.  <a href="classarm__compute_1_1graph_1_1_softmax_layer_node.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_split_layer_node.xhtml">SplitLayerNode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Split Layer node.  <a href="classarm__compute_1_1graph_1_1_split_layer_node.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_split_layer_sub_tensor_mutator.xhtml">SplitLayerSubTensorMutator</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Mutation pass to optimize split operations by using sub-tensors.  <a href="classarm__compute_1_1graph_1_1_split_layer_sub_tensor_mutator.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_stack_layer_node.xhtml">StackLayerNode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stack Layer node.  <a href="classarm__compute_1_1graph_1_1_stack_layer_node.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_strided_slice_layer_node.xhtml">StridedSliceLayerNode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Slice Layer node.  <a href="classarm__compute_1_1graph_1_1_strided_slice_layer_node.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_synthetic_data_type_mutator.xhtml">SyntheticDataTypeMutator</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Mutation pass to create synthetic graphs of a given data type.  <a href="classarm__compute_1_1graph_1_1_synthetic_data_type_mutator.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_task_executor.xhtml">TaskExecutor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Task executor.  <a href="classarm__compute_1_1graph_1_1_task_executor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml">Tensor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml" title="Tensor object. ">Tensor</a> object.  <a href="classarm__compute_1_1graph_1_1_tensor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml">TensorDescriptor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml" title="Tensor object. ">Tensor</a> metadata class.  <a href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_unary_eltwise_layer_node.xhtml">UnaryEltwiseLayerNode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Unary Eltwise Layer node.  <a href="classarm__compute_1_1graph_1_1_unary_eltwise_layer_node.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1graph_1_1_weights_manager_context.xhtml">WeightsManagerContext</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Contains structs required for weights management.  <a href="structarm__compute_1_1graph_1_1_weights_manager_context.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:a41c3f59161734b8492782359f583b676"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a> = std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1graph_1_1_i_tensor_accessor.xhtml">ITensorAccessor</a> &gt;</td></tr>
<tr class="separator:a41c3f59161734b8492782359f583b676"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa00f40248e92f039410443bfd3aa208f"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph.xhtml#aa00f40248e92f039410443bfd3aa208f">GraphID</a> = unsigned int</td></tr>
<tr class="separator:aa00f40248e92f039410443bfd3aa208f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a615af95e19b5d9f74d2760183566a9a3"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a615af95e19b5d9f74d2760183566a9a3">TensorID</a> = unsigned int</td></tr>
<tr class="separator:a615af95e19b5d9f74d2760183566a9a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a56952a8591a9d8481450ae707ae355e7"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> = unsigned int</td></tr>
<tr class="separator:a56952a8591a9d8481450ae707ae355e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abba17a56bbf16c7cbc7acd4aa54abcea"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph.xhtml#abba17a56bbf16c7cbc7acd4aa54abcea">EdgeID</a> = unsigned int</td></tr>
<tr class="separator:abba17a56bbf16c7cbc7acd4aa54abcea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5f9016ea3e28a033b7cc216bdda912be"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a5f9016ea3e28a033b7cc216bdda912be">Activation</a> = <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9ea">arm_compute::ActivationLayerInfo::ActivationFunction</a></td></tr>
<tr class="memdesc:a5f9016ea3e28a033b7cc216bdda912be"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constant TensorID specifying an equivalent of null tensor.  <a href="#a5f9016ea3e28a033b7cc216bdda912be">More...</a><br /></td></tr>
<tr class="separator:a5f9016ea3e28a033b7cc216bdda912be"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:a31488d29805a596498c0234ae392d35d"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a> { <a class="el" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35da1c04cc3823d476c3017238679a0fdf52">UNSPECIFIED</a>, 
<a class="el" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35dacaf162e9233294cadf62d2a71a14ca09">NEON</a>, 
<a class="el" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35da5bc574a47246f122016869b32a6aa6f0">CL</a>, 
<a class="el" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35da6c83d364c26a490210700ad9ac6ad236">CLVK</a>
 }</td></tr>
<tr class="separator:a31488d29805a596498c0234ae392d35d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa12973876c037bddff8e9ece94aca0e4"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4">EltwiseOperation</a> { <br />
&#160;&#160;<a class="el" href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4aec211f7c20af43e742bf2570c3cb84f9">Add</a>, 
<a class="el" href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4ae80155eceb940c89e2de63ad05868db2">Sub</a>, 
<a class="el" href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4a62b6d55816cf737bfc6f42e60df1a3f2">Mul</a>, 
<a class="el" href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4a6a061313d22e51e0f25b7cd4dc065233">Max</a>, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4a43d11850893d2fe84a1e618121c1cc0a">Div</a>, 
<a class="el" href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4a78d811e98514cd165dda532286610fd2">Min</a>
<br />
 }<tr class="memdesc:aa12973876c037bddff8e9ece94aca0e4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Supported Element-wise operations.  <a href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4">More...</a><br /></td></tr>
</td></tr>
<tr class="separator:aa12973876c037bddff8e9ece94aca0e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3805b9005b1d842bad30e09846e1f4e7"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a3805b9005b1d842bad30e09846e1f4e7">UnaryEltwiseOperation</a> { <a class="el" href="namespacearm__compute_1_1graph.xhtml#a3805b9005b1d842bad30e09846e1f4e7acad39a154bffb61175f674d6eefaf6d0">Exp</a>
 }<tr class="memdesc:a3805b9005b1d842bad30e09846e1f4e7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Supported Unary Element-wise operations.  <a href="namespacearm__compute_1_1graph.xhtml#a3805b9005b1d842bad30e09846e1f4e7">More...</a><br /></td></tr>
</td></tr>
<tr class="separator:a3805b9005b1d842bad30e09846e1f4e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a683661ae75dcb7aef16b9c9bde31517d"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517d">ConvolutionMethod</a> { <a class="el" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517da7a1920d61156abc05a60135aefe8bc67">Default</a>, 
<a class="el" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517da5174aac3927faa9ee34befb7fc87a9e3">GEMM</a>, 
<a class="el" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517dafd1dd0c603be8170f9eae0be9f2f6afb">Direct</a>, 
<a class="el" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517da09db1dd1078ec6bdbe2722b4558e578f">Winograd</a>
 }<tr class="memdesc:a683661ae75dcb7aef16b9c9bde31517d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Supported Convolution layer methods.  <a href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517d">More...</a><br /></td></tr>
</td></tr>
<tr class="separator:a683661ae75dcb7aef16b9c9bde31517d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a75ce9b1baad4303a53124d6f0795821f"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a75ce9b1baad4303a53124d6f0795821f">DepthwiseConvolutionMethod</a> { <a class="el" href="namespacearm__compute_1_1graph.xhtml#a75ce9b1baad4303a53124d6f0795821fa7a1920d61156abc05a60135aefe8bc67">Default</a>, 
<a class="el" href="namespacearm__compute_1_1graph.xhtml#a75ce9b1baad4303a53124d6f0795821fa87dc825930f866018839a6374a5e68d2">GEMV</a>, 
<a class="el" href="namespacearm__compute_1_1graph.xhtml#a75ce9b1baad4303a53124d6f0795821fa3bb7b7f3f021a006e65111fc1d226938">Optimized3x3</a>
 }<tr class="memdesc:a75ce9b1baad4303a53124d6f0795821f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Supported Depthwise Convolution layer methods.  <a href="namespacearm__compute_1_1graph.xhtml#a75ce9b1baad4303a53124d6f0795821f">More...</a><br /></td></tr>
</td></tr>
<tr class="separator:a75ce9b1baad4303a53124d6f0795821f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac85a46f3ebd3ab09f576a994ac2dce11"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11">FastMathHint</a> { <a class="el" href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11a00d23a76e43b46dae9ec7aa9dcbebb32">Enabled</a>, 
<a class="el" href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11ab9f5c797ebbf55adccdd8539a65a0241">Disabled</a>
 }<tr class="memdesc:ac85a46f3ebd3ab09f576a994ac2dce11"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enable or disable fast math for Convolution layer.  <a href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11">More...</a><br /></td></tr>
</td></tr>
<tr class="separator:ac85a46f3ebd3ab09f576a994ac2dce11"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acac9cbaeea226ed297804c012dc12b16"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16">NodeType</a> { <br />
&#160;&#160;<a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a041485a3394541feee82a34d40249d70">ActivationLayer</a>, 
<a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a8b64190e5c453f3ab8003e15a32042bb">ArgMinMaxLayer</a>, 
<a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16ad0146d2051fad860923cf31f7e00a732">BatchNormalizationLayer</a>, 
<a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16aab5cbd6c92ca9262ddd46d573bd2d2a5">BoundingBoxTransformLayer</a>, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16af5505217824e3e9e8000ef0d63360158">ChannelShuffleLayer</a>, 
<a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a5c436066fbad2e22ccab352c0d554809">ConcatenateLayer</a>, 
<a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16aa252659b59a03bc61e5ec827ab4448b7">ConvolutionLayer</a>, 
<a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16ac814c26a7c5317e2a2f58fe0e5a0d410">DeconvolutionLayer</a>, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a2c77fe48e06dc15838adafc96eb07809">DepthToSpaceLayer</a>, 
<a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a5b7955cb74be105cc7e044a370d4fce8">DepthwiseConvolutionLayer</a>, 
<a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a6dc16ed47490b9162258248a67a28149">DequantizationLayer</a>, 
<a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16ae1b0b91c003f871664a4e289977ef02e">DetectionOutputLayer</a>, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a0e5a1913b18dbe59dcbcf4e85148802d">DetectionPostProcessLayer</a>, 
<a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16ad1b3837fe6a80018e7002c7f7905439d">EltwiseLayer</a>, 
<a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16ad87240455a60f188b358a370fe1a83a5">FlattenLayer</a>, 
<a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a658061ff1dac70c02116fae6c044da1a">FullyConnectedLayer</a>, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a6f89e5fc5edf43300199d6bc8f5088de">FusedConvolutionBatchNormalizationLayer</a>, 
<a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16adae196145a8fa13b72810b57e3c11f97">FusedConvolutionWithPostOp</a>, 
<a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a8cb85de50d6c327c6d656865dd2d50ce">FusedConvolutionBatchNormalizationLayerWithPostOpsLayer</a>, 
<a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a5955c7816e24dbfab34403cca9a133fc">FusedDepthwiseConvolutionBatchNormalizationLayer</a>, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a728d2f08dedae314e27241a256449973">GenerateProposalsLayer</a>, 
<a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16ae680fa991b49d90435920390522e4bfa">L2NormalizeLayer</a>, 
<a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a227ecc6e858c8d1f61664f1967173bea">NormalizationLayer</a>, 
<a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a7844e69eea1226939211d12a975aa512">NormalizePlanarYUVLayer</a>, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a979ac8e70d367e1e442d76f00b6f0ad1">PadLayer</a>, 
<a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16aa84a001cb23ac473e7aae73a9eaf369a">PermuteLayer</a>, 
<a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16aea068ae5aae640d018c4300bc7619575">PoolingLayer</a>, 
<a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a44da30946f36dcb01ca8be92a1420536">PReluLayer</a>, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a415d76e29ed6d61c9f71cc6f7cf3f656">PrintLayer</a>, 
<a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a77329845031ba38f828a884f40beb69c">PriorBoxLayer</a>, 
<a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a399e260d5d6886e9917d4313cd05f6fe">QuantizationLayer</a>, 
<a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a7315a114ff1ceed2eb2410f0cb4bfd04">ReductionOperationLayer</a>, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16af119c4b7a889a65e39ef53786dce0c84">ReorgLayer</a>, 
<a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a1ee0d44744be1e17e38ad5a4e9dcf5dd">ReshapeLayer</a>, 
<a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16aea2ded20d74b2bf7921551363737777e">ResizeLayer</a>, 
<a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a9724a5f06f63ab3de9e8af69d20069fb">ROIAlignLayer</a>, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a4a9567bc4a6c28a527c973010eaf9a25">SoftmaxLayer</a>, 
<a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16ad6aa9a2c35e0cb2a5777860d8fd1084e">SliceLayer</a>, 
<a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16af2ee14b628c0a45e1682de8f33983dc1">SplitLayer</a>, 
<a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a6a1f3bd45caa35d2537fcacb4460920e">StackLayer</a>, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16ad38a8512f70410f9f3b55e58951a7e7e">StridedSliceLayer</a>, 
<a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a1634ae65e32998568feae7e5e8e3bb65">UpsampleLayer</a>, 
<a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a12bb7868a77981ec3c64e03574f36566">UnaryEltwiseLayer</a>, 
<a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a324118a6721dd6b8a9b9f4e327df2bf5">Input</a>, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a29c2c02a361c9d7028472e5d92cd4a54">Output</a>, 
<a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a79ceee9f8e3c1f0cc74223e05d2448bf">Const</a>, 
<a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16abcf036b6f33e182d4705f4f5b1af13ac">Dummy</a>
<br />
 }<tr class="memdesc:acac9cbaeea226ed297804c012dc12b16"><td class="mdescLeft">&#160;</td><td class="mdescRight">Supported nodes.  <a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16">More...</a><br /></td></tr>
</td></tr>
<tr class="separator:acac9cbaeea226ed297804c012dc12b16"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac866c81ec0f5526139dfc62ddc3f206e"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph.xhtml#ac866c81ec0f5526139dfc62ddc3f206e">MemoryManagerAffinity</a> { <a class="el" href="namespacearm__compute_1_1graph.xhtml#ac866c81ec0f5526139dfc62ddc3f206ea7e62bc342f41c946868f0ea6f0b712d8">Buffer</a>, 
<a class="el" href="namespacearm__compute_1_1graph.xhtml#ac866c81ec0f5526139dfc62ddc3f206eadfd0a82c4bf37b1e90b690a22a20692e">Offset</a>
 }<tr class="memdesc:ac866c81ec0f5526139dfc62ddc3f206e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Backend Memory Manager affinity.  <a href="namespacearm__compute_1_1graph.xhtml#ac866c81ec0f5526139dfc62ddc3f206e">More...</a><br /></td></tr>
</td></tr>
<tr class="separator:ac866c81ec0f5526139dfc62ddc3f206e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:aa1c6a4a70ded6258fff31b3de53dfb8f"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g)</td></tr>
<tr class="memdesc:aa1c6a4a70ded6258fff31b3de53dfb8f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Breadth first search traversal.  <a href="#aa1c6a4a70ded6258fff31b3de53dfb8f">More...</a><br /></td></tr>
<tr class="separator:aa1c6a4a70ded6258fff31b3de53dfb8f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a14abdeb0f575e919aa6d586a95f23920"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a14abdeb0f575e919aa6d586a95f23920">dfs</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g)</td></tr>
<tr class="memdesc:a14abdeb0f575e919aa6d586a95f23920"><td class="mdescLeft">&#160;</td><td class="mdescRight">Depth first search traversal.  <a href="#a14abdeb0f575e919aa6d586a95f23920">More...</a><br /></td></tr>
<tr class="separator:a14abdeb0f575e919aa6d586a95f23920"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adcd882fc459bcf59d5e155c73e410ff9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph.xhtml#adcd882fc459bcf59d5e155c73e410ff9">target_from_name</a> (const std::string &amp;<a class="el" href="_n_e_select_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a>)</td></tr>
<tr class="memdesc:adcd882fc459bcf59d5e155c73e410ff9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a string to a strong types enumeration <a class="el" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a>.  <a href="#adcd882fc459bcf59d5e155c73e410ff9">More...</a><br /></td></tr>
<tr class="separator:adcd882fc459bcf59d5e155c73e410ff9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a81a73c1d68104f16b1d2f63e412b06be"><td class="memItemLeft" align="right" valign="top">inline ::std::istream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a81a73c1d68104f16b1d2f63e412b06be">operator&gt;&gt;</a> (::std::istream &amp;stream, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a> &amp;target)</td></tr>
<tr class="memdesc:a81a73c1d68104f16b1d2f63e412b06be"><td class="mdescLeft">&#160;</td><td class="mdescRight">Input Stream operator for <a class="el" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a>.  <a href="#a81a73c1d68104f16b1d2f63e412b06be">More...</a><br /></td></tr>
<tr class="separator:a81a73c1d68104f16b1d2f63e412b06be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af5bf30d1d655abfcb8b0175c5b161a95"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517d">ConvolutionMethod</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph.xhtml#af5bf30d1d655abfcb8b0175c5b161a95">Convolution_method_from_name</a> (const std::string &amp;<a class="el" href="_n_e_select_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a>)</td></tr>
<tr class="memdesc:af5bf30d1d655abfcb8b0175c5b161a95"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a string to a strong types enumeration <a class="el" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517d">ConvolutionMethod</a>.  <a href="#af5bf30d1d655abfcb8b0175c5b161a95">More...</a><br /></td></tr>
<tr class="separator:af5bf30d1d655abfcb8b0175c5b161a95"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae8f190277bdf7c7e97dbffb4d42cc13f"><td class="memItemLeft" align="right" valign="top">inline ::std::istream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph.xhtml#ae8f190277bdf7c7e97dbffb4d42cc13f">operator&gt;&gt;</a> (::std::istream &amp;stream, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517d">ConvolutionMethod</a> &amp;target)</td></tr>
<tr class="memdesc:ae8f190277bdf7c7e97dbffb4d42cc13f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Input Stream operator for <a class="el" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517d">ConvolutionMethod</a>.  <a href="#ae8f190277bdf7c7e97dbffb4d42cc13f">More...</a><br /></td></tr>
<tr class="separator:ae8f190277bdf7c7e97dbffb4d42cc13f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6dbaf2e51ef91725f852766f923fd5a6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a75ce9b1baad4303a53124d6f0795821f">DepthwiseConvolutionMethod</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a6dbaf2e51ef91725f852766f923fd5a6">depthwise_convolution_method_from_name</a> (const std::string &amp;<a class="el" href="_n_e_select_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a>)</td></tr>
<tr class="memdesc:a6dbaf2e51ef91725f852766f923fd5a6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a string to a strong types enumeration <a class="el" href="namespacearm__compute_1_1graph.xhtml#a75ce9b1baad4303a53124d6f0795821f">DepthwiseConvolutionMethod</a>.  <a href="#a6dbaf2e51ef91725f852766f923fd5a6">More...</a><br /></td></tr>
<tr class="separator:a6dbaf2e51ef91725f852766f923fd5a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a801203ab1fe36fc780b7b272c03beb6b"><td class="memItemLeft" align="right" valign="top">inline ::std::istream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a801203ab1fe36fc780b7b272c03beb6b">operator&gt;&gt;</a> (::std::istream &amp;stream, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a75ce9b1baad4303a53124d6f0795821f">DepthwiseConvolutionMethod</a> &amp;target)</td></tr>
<tr class="memdesc:a801203ab1fe36fc780b7b272c03beb6b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Input Stream operator for <a class="el" href="namespacearm__compute_1_1graph.xhtml#a75ce9b1baad4303a53124d6f0795821f">DepthwiseConvolutionMethod</a>.  <a href="#a801203ab1fe36fc780b7b272c03beb6b">More...</a><br /></td></tr>
<tr class="separator:a801203ab1fe36fc780b7b272c03beb6b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e067080ce8169b2f8be64c190edab9e"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a7e067080ce8169b2f8be64c190edab9e">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a> &amp;target)</td></tr>
<tr class="memdesc:a7e067080ce8169b2f8be64c190edab9e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the Target.  <a href="#a7e067080ce8169b2f8be64c190edab9e">More...</a><br /></td></tr>
<tr class="separator:a7e067080ce8169b2f8be64c190edab9e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a108f26d15227710831dbdb30e40e608e"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a108f26d15227710831dbdb30e40e608e">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16">NodeType</a> &amp;node_type)</td></tr>
<tr class="separator:a108f26d15227710831dbdb30e40e608e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abcd88ed51472e534decef274fb32bcaa"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph.xhtml#abcd88ed51472e534decef274fb32bcaa">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4">EltwiseOperation</a> &amp;eltwise_op)</td></tr>
<tr class="memdesc:abcd88ed51472e534decef274fb32bcaa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the EltwiseOperation type.  <a href="#abcd88ed51472e534decef274fb32bcaa">More...</a><br /></td></tr>
<tr class="separator:abcd88ed51472e534decef274fb32bcaa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab90b7a7fcc12792b0b6cb6486bb383dd"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph.xhtml#ab90b7a7fcc12792b0b6cb6486bb383dd">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517d">ConvolutionMethod</a> &amp;method)</td></tr>
<tr class="memdesc:ab90b7a7fcc12792b0b6cb6486bb383dd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the ConvolutionMethod type.  <a href="#ab90b7a7fcc12792b0b6cb6486bb383dd">More...</a><br /></td></tr>
<tr class="separator:ab90b7a7fcc12792b0b6cb6486bb383dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c721497fdfc121b38630f89b625ac39"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a6c721497fdfc121b38630f89b625ac39">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11">FastMathHint</a> &amp;hint)</td></tr>
<tr class="memdesc:a6c721497fdfc121b38630f89b625ac39"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the FastMathHint type.  <a href="#a6c721497fdfc121b38630f89b625ac39">More...</a><br /></td></tr>
<tr class="separator:a6c721497fdfc121b38630f89b625ac39"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a36f71403d9328a10245a6d9d62518527"><td class="memItemLeft" align="right" valign="top">inline ::std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a36f71403d9328a10245a6d9d62518527">operator&lt;&lt;</a> (::std::ostream &amp;os, const <a class="el" href="namespacearm__compute_1_1graph.xhtml#a75ce9b1baad4303a53124d6f0795821f">DepthwiseConvolutionMethod</a> &amp;method)</td></tr>
<tr class="memdesc:a36f71403d9328a10245a6d9d62518527"><td class="mdescLeft">&#160;</td><td class="mdescRight">Formatted output of the DepthwiseConvolutionMethod type.  <a href="#a36f71403d9328a10245a6d9d62518527">More...</a><br /></td></tr>
<tr class="separator:a36f71403d9328a10245a6d9d62518527"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adaf571380533c75338da47ba3a68c199"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph.xhtml#adaf571380533c75338da47ba3a68c199">is_utility_node</a> (<a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> *node)</td></tr>
<tr class="separator:adaf571380533c75338da47ba3a68c199"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade2275ecfd6f344e3ec7086427863aa8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml">TensorDescriptor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph.xhtml#ade2275ecfd6f344e3ec7086427863aa8">get_tensor_descriptor</a> (const <a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a615af95e19b5d9f74d2760183566a9a3">TensorID</a> tid)</td></tr>
<tr class="memdesc:ade2275ecfd6f344e3ec7086427863aa8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the tensor descriptor of a given tensor.  <a href="#ade2275ecfd6f344e3ec7086427863aa8">More...</a><br /></td></tr>
<tr class="separator:ade2275ecfd6f344e3ec7086427863aa8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4ebedbbf720dd9a5bd14584f723b056e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a4ebedbbf720dd9a5bd14584f723b056e">set_tensor_accessor</a> (<a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml">Tensor</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1graph_1_1_i_tensor_accessor.xhtml">ITensorAccessor</a> &gt; accessor)</td></tr>
<tr class="memdesc:a4ebedbbf720dd9a5bd14584f723b056e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets an accessor on a given tensor.  <a href="#a4ebedbbf720dd9a5bd14584f723b056e">More...</a><br /></td></tr>
<tr class="separator:a4ebedbbf720dd9a5bd14584f723b056e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6fd498c55b126dc3f078d38e8528effb"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a6fd498c55b126dc3f078d38e8528effb">is_target_supported</a> (<a class="el" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a> target)</td></tr>
<tr class="memdesc:a6fd498c55b126dc3f078d38e8528effb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks if a specific target is supported.  <a href="#a6fd498c55b126dc3f078d38e8528effb">More...</a><br /></td></tr>
<tr class="separator:a6fd498c55b126dc3f078d38e8528effb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:addc5c907a850a8b4d5458bd14f50c6f7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph.xhtml#addc5c907a850a8b4d5458bd14f50c6f7">get_default_target</a> ()</td></tr>
<tr class="memdesc:addc5c907a850a8b4d5458bd14f50c6f7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns default target for execution.  <a href="#addc5c907a850a8b4d5458bd14f50c6f7">More...</a><br /></td></tr>
<tr class="separator:addc5c907a850a8b4d5458bd14f50c6f7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac5712330ef2d40408efb4eae5665dc6e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph.xhtml#ac5712330ef2d40408efb4eae5665dc6e">force_target_to_graph</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a> target)</td></tr>
<tr class="memdesc:ac5712330ef2d40408efb4eae5665dc6e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Forces a single target to all graph constructs.  <a href="#ac5712330ef2d40408efb4eae5665dc6e">More...</a><br /></td></tr>
<tr class="separator:ac5712330ef2d40408efb4eae5665dc6e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0a2d08174e24bcb1dfdf9d8893cd9363"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1graph_1_1_pass_manager.xhtml">PassManager</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a0a2d08174e24bcb1dfdf9d8893cd9363">create_default_pass_manager</a> (<a class="el" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a> target, const <a class="el" href="structarm__compute_1_1graph_1_1_graph_config.xhtml">GraphConfig</a> &amp;cfg)</td></tr>
<tr class="memdesc:a0a2d08174e24bcb1dfdf9d8893cd9363"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a default <a class="el" href="classarm__compute_1_1graph_1_1_pass_manager.xhtml">PassManager</a>.  <a href="#a0a2d08174e24bcb1dfdf9d8893cd9363">More...</a><br /></td></tr>
<tr class="separator:a0a2d08174e24bcb1dfdf9d8893cd9363"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaef0102f19fc08d670766506b1a0b66e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph.xhtml#aaef0102f19fc08d670766506b1a0b66e">setup_requested_backend_context</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;ctx, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a> target)</td></tr>
<tr class="memdesc:aaef0102f19fc08d670766506b1a0b66e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Setups requested backend context if it exists, is supported and hasn't been initialized already.  <a href="#aaef0102f19fc08d670766506b1a0b66e">More...</a><br /></td></tr>
<tr class="separator:aaef0102f19fc08d670766506b1a0b66e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9562c1c1399af2f10714a7d901e19311"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a9562c1c1399af2f10714a7d901e19311">release_default_graph_context</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;ctx)</td></tr>
<tr class="memdesc:a9562c1c1399af2f10714a7d901e19311"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default releases the graph context if not done manually.  <a href="#a9562c1c1399af2f10714a7d901e19311">More...</a><br /></td></tr>
<tr class="separator:a9562c1c1399af2f10714a7d901e19311"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae8f18192b411ffc62fdd293f908b4c78"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph.xhtml#ae8f18192b411ffc62fdd293f908b4c78">sync_backends</a> ()</td></tr>
<tr class="memdesc:ae8f18192b411ffc62fdd293f908b4c78"><td class="mdescLeft">&#160;</td><td class="mdescRight">Synchronize kernels execution on the backends.  <a href="#ae8f18192b411ffc62fdd293f908b4c78">More...</a><br /></td></tr>
<tr class="separator:ae8f18192b411ffc62fdd293f908b4c78"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a75f8e464c6b01b0a4771de38669ee9a1"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a75f8e464c6b01b0a4771de38669ee9a1">get_dimension_size</a> (const <a class="el" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml">TensorDescriptor</a> &amp;descriptor, const <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02">DataLayoutDimension</a> data_layout_dimension)</td></tr>
<tr class="memdesc:a75f8e464c6b01b0a4771de38669ee9a1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get size of a tensor's given dimension depending on its layout.  <a href="#a75f8e464c6b01b0a4771de38669ee9a1">More...</a><br /></td></tr>
<tr class="separator:a75f8e464c6b01b0a4771de38669ee9a1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1df15aed3ed531f442ecea2a131d65a4"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a1df15aed3ed531f442ecea2a131d65a4">get_dimension_idx</a> (<a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> data_layout, const <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02">DataLayoutDimension</a> data_layout_dimension)</td></tr>
<tr class="memdesc:a1df15aed3ed531f442ecea2a131d65a4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get index of a tensor's given dimension depending on its layout.  <a href="#a1df15aed3ed531f442ecea2a131d65a4">More...</a><br /></td></tr>
<tr class="separator:a1df15aed3ed531f442ecea2a131d65a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a634230f98a5918f214e47d913c452d3b"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a634230f98a5918f214e47d913c452d3b">get_driving_nodes</a> (const <a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &amp;node)</td></tr>
<tr class="memdesc:a634230f98a5918f214e47d913c452d3b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the list of driving nodes of a given node.  <a href="#a634230f98a5918f214e47d913c452d3b">More...</a><br /></td></tr>
<tr class="separator:a634230f98a5918f214e47d913c452d3b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad17fa352dabb4482cb996a9f8f7f3ba3"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph.xhtml#ad17fa352dabb4482cb996a9f8f7f3ba3">get_driver_nodes</a> (const <a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &amp;node)</td></tr>
<tr class="memdesc:ad17fa352dabb4482cb996a9f8f7f3ba3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the list of driver nodes of a given node.  <a href="#ad17fa352dabb4482cb996a9f8f7f3ba3">More...</a><br /></td></tr>
<tr class="separator:ad17fa352dabb4482cb996a9f8f7f3ba3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a36fd3cfa2e1d33e59e1d3e95664d8b9c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a36fd3cfa2e1d33e59e1d3e95664d8b9c">configure_tensor</a> (<a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml">Tensor</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)</td></tr>
<tr class="memdesc:a36fd3cfa2e1d33e59e1d3e95664d8b9c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configures tensor.  <a href="#a36fd3cfa2e1d33e59e1d3e95664d8b9c">More...</a><br /></td></tr>
<tr class="separator:a36fd3cfa2e1d33e59e1d3e95664d8b9c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9e7501e803a9892419f72540671233f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph.xhtml#ad9e7501e803a9892419f72540671233f">execute_task</a> (<a class="el" href="structarm__compute_1_1graph_1_1_execution_task.xhtml">ExecutionTask</a> &amp;task)</td></tr>
<tr class="separator:ad9e7501e803a9892419f72540671233f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa3f58c337d128b2d530251c422b05f69"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph.xhtml#aa3f58c337d128b2d530251c422b05f69">is_padding_in_height_or_width</a> (const <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> &amp;layout, const <a class="el" href="namespacearm__compute.xhtml#ac1a1b012674e0f1de071a611391828ad">PaddingList</a> &amp;padding_list)</td></tr>
<tr class="memdesc:aa3f58c337d128b2d530251c422b05f69"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if padding is in height and/or width dimensions.  <a href="#aa3f58c337d128b2d530251c422b05f69">More...</a><br /></td></tr>
<tr class="separator:aa3f58c337d128b2d530251c422b05f69"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:aa94938a3eb11fda4724c362c53c28f24"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="namespacearm__compute_1_1graph.xhtml#a615af95e19b5d9f74d2760183566a9a3">TensorID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph.xhtml#aa94938a3eb11fda4724c362c53c28f24">NullTensorID</a> = std::numeric_limits&lt;<a class="el" href="namespacearm__compute_1_1graph.xhtml#a615af95e19b5d9f74d2760183566a9a3">TensorID</a>&gt;::max()</td></tr>
<tr class="memdesc:aa94938a3eb11fda4724c362c53c28f24"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constant NodeID specifying an equivalent of null node.  <a href="#aa94938a3eb11fda4724c362c53c28f24">More...</a><br /></td></tr>
<tr class="separator:aa94938a3eb11fda4724c362c53c28f24"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aad3f5296ec88b9d552c109b04b89ad9f"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph.xhtml#aad3f5296ec88b9d552c109b04b89ad9f">EmptyNodeID</a> = std::numeric_limits&lt;<a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&gt;::max()</td></tr>
<tr class="memdesc:aad3f5296ec88b9d552c109b04b89ad9f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constant EdgeID specifying an equivalent of null edge.  <a href="#aad3f5296ec88b9d552c109b04b89ad9f">More...</a><br /></td></tr>
<tr class="separator:aad3f5296ec88b9d552c109b04b89ad9f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8e0b093eda0649ddbce791bb5076104f"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="namespacearm__compute_1_1graph.xhtml#abba17a56bbf16c7cbc7acd4aa54abcea">EdgeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a8e0b093eda0649ddbce791bb5076104f">EmptyEdgeID</a> = std::numeric_limits&lt;<a class="el" href="namespacearm__compute_1_1graph.xhtml#abba17a56bbf16c7cbc7acd4aa54abcea">EdgeID</a>&gt;::max()</td></tr>
<tr class="separator:a8e0b093eda0649ddbce791bb5076104f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Typedef Documentation</h2>
<a id="a5f9016ea3e28a033b7cc216bdda912be"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5f9016ea3e28a033b7cc216bdda912be">&#9670;&nbsp;</a></span>Activation</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9ea">Activation</a> =  <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9ea">arm_compute::ActivationLayerInfo::ActivationFunction</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Constant TensorID specifying an equivalent of null tensor. </p>

<p class="definition">Definition at line <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00073">73</a> of file <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml">Types.h</a>.</p>

</div>
</div>
<a id="abba17a56bbf16c7cbc7acd4aa54abcea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abba17a56bbf16c7cbc7acd4aa54abcea">&#9670;&nbsp;</a></span>EdgeID</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1graph.xhtml#abba17a56bbf16c7cbc7acd4aa54abcea">EdgeID</a> =  unsigned int</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00070">70</a> of file <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml">Types.h</a>.</p>

</div>
</div>
<a id="aa00f40248e92f039410443bfd3aa208f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa00f40248e92f039410443bfd3aa208f">&#9670;&nbsp;</a></span>GraphID</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1graph.xhtml#aa00f40248e92f039410443bfd3aa208f">GraphID</a> =  unsigned int</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00067">67</a> of file <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml">Types.h</a>.</p>

</div>
</div>
<a id="a41c3f59161734b8492782359f583b676"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a41c3f59161734b8492782359f583b676">&#9670;&nbsp;</a></span>ITensorAccessorUPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a> =  std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1graph_1_1_i_tensor_accessor.xhtml">ITensorAccessor</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_i_tensor_accessor_8h_source.xhtml#l00058">58</a> of file <a class="el" href="_i_tensor_accessor_8h_source.xhtml">ITensorAccessor.h</a>.</p>

</div>
</div>
<a id="a56952a8591a9d8481450ae707ae355e7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a56952a8591a9d8481450ae707ae355e7">&#9670;&nbsp;</a></span>NodeID</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> =  unsigned int</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00069">69</a> of file <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml">Types.h</a>.</p>

</div>
</div>
<a id="a615af95e19b5d9f74d2760183566a9a3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a615af95e19b5d9f74d2760183566a9a3">&#9670;&nbsp;</a></span>TensorID</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1graph.xhtml#a615af95e19b5d9f74d2760183566a9a3">TensorID</a> =  unsigned int</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00068">68</a> of file <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml">Types.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Enumeration Type Documentation</h2>
<a id="a683661ae75dcb7aef16b9c9bde31517d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a683661ae75dcb7aef16b9c9bde31517d">&#9670;&nbsp;</a></span>ConvolutionMethod</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517d">ConvolutionMethod</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Supported Convolution layer methods. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a683661ae75dcb7aef16b9c9bde31517da7a1920d61156abc05a60135aefe8bc67"></a>Default&#160;</td><td class="fielddoc"><p>Default approach using internal heuristics. </p>
</td></tr>
<tr><td class="fieldname"><a id="a683661ae75dcb7aef16b9c9bde31517da5174aac3927faa9ee34befb7fc87a9e3"></a>GEMM&#160;</td><td class="fielddoc"><p>GEMM based convolution. </p>
</td></tr>
<tr><td class="fieldname"><a id="a683661ae75dcb7aef16b9c9bde31517dafd1dd0c603be8170f9eae0be9f2f6afb"></a>Direct&#160;</td><td class="fielddoc"><p>Deep direct convolution. </p>
</td></tr>
<tr><td class="fieldname"><a id="a683661ae75dcb7aef16b9c9bde31517da09db1dd1078ec6bdbe2722b4558e578f"></a>Winograd&#160;</td><td class="fielddoc"><p>Winograd based convolution. </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00126">126</a> of file <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;{</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517da7a1920d61156abc05a60135aefe8bc67">Default</a>, <span class="comment">/**&lt; Default approach using internal heuristics */</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea3a3719691bd6b7da7ff9e45d54fd32ba">GEMM</a>,    <span class="comment">/**&lt; GEMM based convolution */</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517dafd1dd0c603be8170f9eae0be9f2f6afb">Direct</a>,  <span class="comment">/**&lt; Deep direct convolution */</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517da09db1dd1078ec6bdbe2722b4558e578f">Winograd</a> <span class="comment">/**&lt; Winograd based convolution */</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;};</div><div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a683661ae75dcb7aef16b9c9bde31517dafd1dd0c603be8170f9eae0be9f2f6afb"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517dafd1dd0c603be8170f9eae0be9f2f6afb">arm_compute::graph::ConvolutionMethod::Direct</a></div><div class="ttdoc">Deep direct convolution. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a6df16a1b3b5af590a14f55e983d3428ea3a3719691bd6b7da7ff9e45d54fd32ba"><div class="ttname"><a href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea3a3719691bd6b7da7ff9e45d54fd32ba">arm_compute::GEMM</a></div><div class="ttdoc">GEMM CL kernel type. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_types_8h_source.xhtml#l00086">CLTypes.h:86</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a683661ae75dcb7aef16b9c9bde31517da7a1920d61156abc05a60135aefe8bc67"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517da7a1920d61156abc05a60135aefe8bc67">arm_compute::graph::ConvolutionMethod::Default</a></div><div class="ttdoc">Default approach using internal heuristics. </div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a683661ae75dcb7aef16b9c9bde31517da09db1dd1078ec6bdbe2722b4558e578f"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517da09db1dd1078ec6bdbe2722b4558e578f">arm_compute::graph::ConvolutionMethod::Winograd</a></div><div class="ttdoc">Winograd based convolution. </div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a75ce9b1baad4303a53124d6f0795821f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a75ce9b1baad4303a53124d6f0795821f">&#9670;&nbsp;</a></span>DepthwiseConvolutionMethod</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute_1_1graph.xhtml#a75ce9b1baad4303a53124d6f0795821f">DepthwiseConvolutionMethod</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Supported Depthwise Convolution layer methods. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a75ce9b1baad4303a53124d6f0795821fa7a1920d61156abc05a60135aefe8bc67"></a>Default&#160;</td><td class="fielddoc"><p>Default approach using internal heuristics. </p>
</td></tr>
<tr><td class="fieldname"><a id="a75ce9b1baad4303a53124d6f0795821fa87dc825930f866018839a6374a5e68d2"></a>GEMV&#160;</td><td class="fielddoc"><p>Generic GEMV based depthwise convolution. </p>
</td></tr>
<tr><td class="fieldname"><a id="a75ce9b1baad4303a53124d6f0795821fa3bb7b7f3f021a006e65111fc1d226938"></a>Optimized3x3&#160;</td><td class="fielddoc"><p>Optimized 3x3 direct depthwise convolution. </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00135">135</a> of file <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;{</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517da7a1920d61156abc05a60135aefe8bc67">Default</a>,      <span class="comment">/**&lt; Default approach using internal heuristics */</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a75ce9b1baad4303a53124d6f0795821fa87dc825930f866018839a6374a5e68d2">GEMV</a>,         <span class="comment">/**&lt; Generic GEMV based depthwise convolution */</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a75ce9b1baad4303a53124d6f0795821fa3bb7b7f3f021a006e65111fc1d226938">Optimized3x3</a>, <span class="comment">/**&lt; Optimized 3x3 direct depthwise convolution */</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;};</div><div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a75ce9b1baad4303a53124d6f0795821fa87dc825930f866018839a6374a5e68d2"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a75ce9b1baad4303a53124d6f0795821fa87dc825930f866018839a6374a5e68d2">arm_compute::graph::DepthwiseConvolutionMethod::GEMV</a></div><div class="ttdoc">Generic GEMV based depthwise convolution. </div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a683661ae75dcb7aef16b9c9bde31517da7a1920d61156abc05a60135aefe8bc67"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517da7a1920d61156abc05a60135aefe8bc67">arm_compute::graph::ConvolutionMethod::Default</a></div><div class="ttdoc">Default approach using internal heuristics. </div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a75ce9b1baad4303a53124d6f0795821fa3bb7b7f3f021a006e65111fc1d226938"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a75ce9b1baad4303a53124d6f0795821fa3bb7b7f3f021a006e65111fc1d226938">arm_compute::graph::DepthwiseConvolutionMethod::Optimized3x3</a></div><div class="ttdoc">Optimized 3x3 direct depthwise convolution. </div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa12973876c037bddff8e9ece94aca0e4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa12973876c037bddff8e9ece94aca0e4">&#9670;&nbsp;</a></span>EltwiseOperation</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4">EltwiseOperation</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Supported Element-wise operations. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="aa12973876c037bddff8e9ece94aca0e4aec211f7c20af43e742bf2570c3cb84f9"></a>Add&#160;</td><td class="fielddoc"><p>Arithmetic addition. </p>
</td></tr>
<tr><td class="fieldname"><a id="aa12973876c037bddff8e9ece94aca0e4ae80155eceb940c89e2de63ad05868db2"></a>Sub&#160;</td><td class="fielddoc"><p>Arithmetic subtraction. </p>
</td></tr>
<tr><td class="fieldname"><a id="aa12973876c037bddff8e9ece94aca0e4a62b6d55816cf737bfc6f42e60df1a3f2"></a>Mul&#160;</td><td class="fielddoc"><p>Arithmetic multiplication. </p>
</td></tr>
<tr><td class="fieldname"><a id="aa12973876c037bddff8e9ece94aca0e4a6a061313d22e51e0f25b7cd4dc065233"></a>Max&#160;</td><td class="fielddoc"><p>Arithmetic maximum. </p>
</td></tr>
<tr><td class="fieldname"><a id="aa12973876c037bddff8e9ece94aca0e4a43d11850893d2fe84a1e618121c1cc0a"></a>Div&#160;</td><td class="fielddoc"><p>Arithmetic division. </p>
</td></tr>
<tr><td class="fieldname"><a id="aa12973876c037bddff8e9ece94aca0e4a78d811e98514cd165dda532286610fd2"></a>Min&#160;</td><td class="fielddoc"><p>Arithmetic minimum. </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00109">109</a> of file <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;{</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4aec211f7c20af43e742bf2570c3cb84f9">Add</a>, <span class="comment">/**&lt; Arithmetic addition */</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4ae80155eceb940c89e2de63ad05868db2">Sub</a>, <span class="comment">/**&lt; Arithmetic subtraction */</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4a62b6d55816cf737bfc6f42e60df1a3f2">Mul</a>, <span class="comment">/**&lt; Arithmetic multiplication */</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4a6a061313d22e51e0f25b7cd4dc065233">Max</a>, <span class="comment">/**&lt; Arithmetic maximum */</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4a43d11850893d2fe84a1e618121c1cc0a">Div</a>, <span class="comment">/**&lt; Arithmetic division */</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4a78d811e98514cd165dda532286610fd2">Min</a>, <span class="comment">/**&lt; Arithmetic minimum */</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;};</div><div class="ttc" id="namespacearm__compute_1_1graph_xhtml_aa12973876c037bddff8e9ece94aca0e4ae80155eceb940c89e2de63ad05868db2"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4ae80155eceb940c89e2de63ad05868db2">arm_compute::graph::EltwiseOperation::Sub</a></div><div class="ttdoc">Arithmetic subtraction. </div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_aa12973876c037bddff8e9ece94aca0e4a43d11850893d2fe84a1e618121c1cc0a"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4a43d11850893d2fe84a1e618121c1cc0a">arm_compute::graph::EltwiseOperation::Div</a></div><div class="ttdoc">Arithmetic division. </div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_aa12973876c037bddff8e9ece94aca0e4a78d811e98514cd165dda532286610fd2"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4a78d811e98514cd165dda532286610fd2">arm_compute::graph::EltwiseOperation::Min</a></div><div class="ttdoc">Arithmetic minimum. </div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_aa12973876c037bddff8e9ece94aca0e4a6a061313d22e51e0f25b7cd4dc065233"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4a6a061313d22e51e0f25b7cd4dc065233">arm_compute::graph::EltwiseOperation::Max</a></div><div class="ttdoc">Arithmetic maximum. </div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_aa12973876c037bddff8e9ece94aca0e4aec211f7c20af43e742bf2570c3cb84f9"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4aec211f7c20af43e742bf2570c3cb84f9">arm_compute::graph::EltwiseOperation::Add</a></div><div class="ttdoc">Arithmetic addition. </div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_aa12973876c037bddff8e9ece94aca0e4a62b6d55816cf737bfc6f42e60df1a3f2"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4a62b6d55816cf737bfc6f42e60df1a3f2">arm_compute::graph::EltwiseOperation::Mul</a></div><div class="ttdoc">Arithmetic multiplication. </div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac85a46f3ebd3ab09f576a994ac2dce11"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac85a46f3ebd3ab09f576a994ac2dce11">&#9670;&nbsp;</a></span>FastMathHint</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11">FastMathHint</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Enable or disable fast math for Convolution layer. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="ac85a46f3ebd3ab09f576a994ac2dce11a00d23a76e43b46dae9ec7aa9dcbebb32"></a>Enabled&#160;</td><td class="fielddoc"><p>Fast math enabled for Convolution layer. </p>
</td></tr>
<tr><td class="fieldname"><a id="ac85a46f3ebd3ab09f576a994ac2dce11ab9f5c797ebbf55adccdd8539a65a0241"></a>Disabled&#160;</td><td class="fielddoc"><p>Fast math disabled for Convolution layer. </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00143">143</a> of file <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;{</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11a00d23a76e43b46dae9ec7aa9dcbebb32">Enabled</a>,  <span class="comment">/**&lt; Fast math enabled for Convolution layer */</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11ab9f5c797ebbf55adccdd8539a65a0241">Disabled</a>, <span class="comment">/**&lt; Fast math disabled for Convolution layer */</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;};</div><div class="ttc" id="namespacearm__compute_1_1graph_xhtml_ac85a46f3ebd3ab09f576a994ac2dce11a00d23a76e43b46dae9ec7aa9dcbebb32"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11a00d23a76e43b46dae9ec7aa9dcbebb32">arm_compute::graph::FastMathHint::Enabled</a></div><div class="ttdoc">Fast math enabled for Convolution layer. </div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_ac85a46f3ebd3ab09f576a994ac2dce11ab9f5c797ebbf55adccdd8539a65a0241"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11ab9f5c797ebbf55adccdd8539a65a0241">arm_compute::graph::FastMathHint::Disabled</a></div><div class="ttdoc">Fast math disabled for Convolution layer. </div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac866c81ec0f5526139dfc62ddc3f206e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac866c81ec0f5526139dfc62ddc3f206e">&#9670;&nbsp;</a></span>MemoryManagerAffinity</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute_1_1graph.xhtml#ac866c81ec0f5526139dfc62ddc3f206e">MemoryManagerAffinity</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Backend <a class="el" href="classarm__compute_1_1_memory.xhtml" title="CPU implementation of memory object. ">Memory</a> Manager affinity. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="ac866c81ec0f5526139dfc62ddc3f206ea7e62bc342f41c946868f0ea6f0b712d8"></a>Buffer&#160;</td><td class="fielddoc"><p>Affinity at buffer level. </p>
</td></tr>
<tr><td class="fieldname"><a id="ac866c81ec0f5526139dfc62ddc3f206eadfd0a82c4bf37b1e90b690a22a20692e"></a>Offset&#160;</td><td class="fielddoc"><p>Affinity at offset level. </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00253">253</a> of file <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;{</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#ac866c81ec0f5526139dfc62ddc3f206ea7e62bc342f41c946868f0ea6f0b712d8">Buffer</a>, <span class="comment">/**&lt; Affinity at buffer level */</span></div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#ac866c81ec0f5526139dfc62ddc3f206eadfd0a82c4bf37b1e90b690a22a20692e">Offset</a>  <span class="comment">/**&lt; Affinity at offset level */</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;};</div><div class="ttc" id="namespacearm__compute_1_1graph_xhtml_ac866c81ec0f5526139dfc62ddc3f206ea7e62bc342f41c946868f0ea6f0b712d8"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#ac866c81ec0f5526139dfc62ddc3f206ea7e62bc342f41c946868f0ea6f0b712d8">arm_compute::graph::MemoryManagerAffinity::Buffer</a></div><div class="ttdoc">Affinity at buffer level. </div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_ac866c81ec0f5526139dfc62ddc3f206eadfd0a82c4bf37b1e90b690a22a20692e"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#ac866c81ec0f5526139dfc62ddc3f206eadfd0a82c4bf37b1e90b690a22a20692e">arm_compute::graph::MemoryManagerAffinity::Offset</a></div><div class="ttdoc">Affinity at offset level. </div></div>
</div><!-- fragment -->
</div>
</div>
<a id="acac9cbaeea226ed297804c012dc12b16"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acac9cbaeea226ed297804c012dc12b16">&#9670;&nbsp;</a></span>NodeType</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16">NodeType</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Supported nodes. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="acac9cbaeea226ed297804c012dc12b16a041485a3394541feee82a34d40249d70"></a>ActivationLayer&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acac9cbaeea226ed297804c012dc12b16a8b64190e5c453f3ab8003e15a32042bb"></a>ArgMinMaxLayer&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acac9cbaeea226ed297804c012dc12b16ad0146d2051fad860923cf31f7e00a732"></a>BatchNormalizationLayer&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acac9cbaeea226ed297804c012dc12b16aab5cbd6c92ca9262ddd46d573bd2d2a5"></a>BoundingBoxTransformLayer&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acac9cbaeea226ed297804c012dc12b16af5505217824e3e9e8000ef0d63360158"></a>ChannelShuffleLayer&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acac9cbaeea226ed297804c012dc12b16a5c436066fbad2e22ccab352c0d554809"></a>ConcatenateLayer&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acac9cbaeea226ed297804c012dc12b16aa252659b59a03bc61e5ec827ab4448b7"></a>ConvolutionLayer&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acac9cbaeea226ed297804c012dc12b16ac814c26a7c5317e2a2f58fe0e5a0d410"></a>DeconvolutionLayer&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acac9cbaeea226ed297804c012dc12b16a2c77fe48e06dc15838adafc96eb07809"></a>DepthToSpaceLayer&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acac9cbaeea226ed297804c012dc12b16a5b7955cb74be105cc7e044a370d4fce8"></a>DepthwiseConvolutionLayer&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acac9cbaeea226ed297804c012dc12b16a6dc16ed47490b9162258248a67a28149"></a>DequantizationLayer&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acac9cbaeea226ed297804c012dc12b16ae1b0b91c003f871664a4e289977ef02e"></a>DetectionOutputLayer&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acac9cbaeea226ed297804c012dc12b16a0e5a1913b18dbe59dcbcf4e85148802d"></a>DetectionPostProcessLayer&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acac9cbaeea226ed297804c012dc12b16ad1b3837fe6a80018e7002c7f7905439d"></a>EltwiseLayer&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acac9cbaeea226ed297804c012dc12b16ad87240455a60f188b358a370fe1a83a5"></a>FlattenLayer&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acac9cbaeea226ed297804c012dc12b16a658061ff1dac70c02116fae6c044da1a"></a>FullyConnectedLayer&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acac9cbaeea226ed297804c012dc12b16a6f89e5fc5edf43300199d6bc8f5088de"></a>FusedConvolutionBatchNormalizationLayer&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acac9cbaeea226ed297804c012dc12b16adae196145a8fa13b72810b57e3c11f97"></a>FusedConvolutionWithPostOp&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acac9cbaeea226ed297804c012dc12b16a8cb85de50d6c327c6d656865dd2d50ce"></a>FusedConvolutionBatchNormalizationLayerWithPostOpsLayer&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acac9cbaeea226ed297804c012dc12b16a5955c7816e24dbfab34403cca9a133fc"></a>FusedDepthwiseConvolutionBatchNormalizationLayer&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acac9cbaeea226ed297804c012dc12b16a728d2f08dedae314e27241a256449973"></a>GenerateProposalsLayer&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acac9cbaeea226ed297804c012dc12b16ae680fa991b49d90435920390522e4bfa"></a>L2NormalizeLayer&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acac9cbaeea226ed297804c012dc12b16a227ecc6e858c8d1f61664f1967173bea"></a>NormalizationLayer&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acac9cbaeea226ed297804c012dc12b16a7844e69eea1226939211d12a975aa512"></a>NormalizePlanarYUVLayer&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acac9cbaeea226ed297804c012dc12b16a979ac8e70d367e1e442d76f00b6f0ad1"></a>PadLayer&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acac9cbaeea226ed297804c012dc12b16aa84a001cb23ac473e7aae73a9eaf369a"></a>PermuteLayer&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acac9cbaeea226ed297804c012dc12b16aea068ae5aae640d018c4300bc7619575"></a>PoolingLayer&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acac9cbaeea226ed297804c012dc12b16a44da30946f36dcb01ca8be92a1420536"></a>PReluLayer&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acac9cbaeea226ed297804c012dc12b16a415d76e29ed6d61c9f71cc6f7cf3f656"></a>PrintLayer&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acac9cbaeea226ed297804c012dc12b16a77329845031ba38f828a884f40beb69c"></a>PriorBoxLayer&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acac9cbaeea226ed297804c012dc12b16a399e260d5d6886e9917d4313cd05f6fe"></a>QuantizationLayer&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acac9cbaeea226ed297804c012dc12b16a7315a114ff1ceed2eb2410f0cb4bfd04"></a>ReductionOperationLayer&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acac9cbaeea226ed297804c012dc12b16af119c4b7a889a65e39ef53786dce0c84"></a>ReorgLayer&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acac9cbaeea226ed297804c012dc12b16a1ee0d44744be1e17e38ad5a4e9dcf5dd"></a>ReshapeLayer&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acac9cbaeea226ed297804c012dc12b16aea2ded20d74b2bf7921551363737777e"></a>ResizeLayer&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acac9cbaeea226ed297804c012dc12b16a9724a5f06f63ab3de9e8af69d20069fb"></a>ROIAlignLayer&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acac9cbaeea226ed297804c012dc12b16a4a9567bc4a6c28a527c973010eaf9a25"></a>SoftmaxLayer&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acac9cbaeea226ed297804c012dc12b16ad6aa9a2c35e0cb2a5777860d8fd1084e"></a>SliceLayer&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acac9cbaeea226ed297804c012dc12b16af2ee14b628c0a45e1682de8f33983dc1"></a>SplitLayer&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acac9cbaeea226ed297804c012dc12b16a6a1f3bd45caa35d2537fcacb4460920e"></a>StackLayer&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acac9cbaeea226ed297804c012dc12b16ad38a8512f70410f9f3b55e58951a7e7e"></a>StridedSliceLayer&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acac9cbaeea226ed297804c012dc12b16a1634ae65e32998568feae7e5e8e3bb65"></a>UpsampleLayer&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acac9cbaeea226ed297804c012dc12b16a12bb7868a77981ec3c64e03574f36566"></a>UnaryEltwiseLayer&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acac9cbaeea226ed297804c012dc12b16a324118a6721dd6b8a9b9f4e327df2bf5"></a>Input&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acac9cbaeea226ed297804c012dc12b16a29c2c02a361c9d7028472e5d92cd4a54"></a>Output&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acac9cbaeea226ed297804c012dc12b16a79ceee9f8e3c1f0cc74223e05d2448bf"></a>Const&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="acac9cbaeea226ed297804c012dc12b16abcf036b6f33e182d4705f4f5b1af13ac"></a>Dummy&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00199">199</a> of file <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;{</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a041485a3394541feee82a34d40249d70">ActivationLayer</a>,</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a8b64190e5c453f3ab8003e15a32042bb">ArgMinMaxLayer</a>,</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16ad0146d2051fad860923cf31f7e00a732">BatchNormalizationLayer</a>,</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16aab5cbd6c92ca9262ddd46d573bd2d2a5">BoundingBoxTransformLayer</a>,</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16af5505217824e3e9e8000ef0d63360158">ChannelShuffleLayer</a>,</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a5c436066fbad2e22ccab352c0d554809">ConcatenateLayer</a>,</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16aa252659b59a03bc61e5ec827ab4448b7">ConvolutionLayer</a>,</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16ac814c26a7c5317e2a2f58fe0e5a0d410">DeconvolutionLayer</a>,</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a2c77fe48e06dc15838adafc96eb07809">DepthToSpaceLayer</a>,</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a5b7955cb74be105cc7e044a370d4fce8">DepthwiseConvolutionLayer</a>,</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a6dc16ed47490b9162258248a67a28149">DequantizationLayer</a>,</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16ae1b0b91c003f871664a4e289977ef02e">DetectionOutputLayer</a>,</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a0e5a1913b18dbe59dcbcf4e85148802d">DetectionPostProcessLayer</a>,</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16ad1b3837fe6a80018e7002c7f7905439d">EltwiseLayer</a>,</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16ad87240455a60f188b358a370fe1a83a5">FlattenLayer</a>,</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a658061ff1dac70c02116fae6c044da1a">FullyConnectedLayer</a>,</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a6f89e5fc5edf43300199d6bc8f5088de">FusedConvolutionBatchNormalizationLayer</a>,</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16adae196145a8fa13b72810b57e3c11f97">FusedConvolutionWithPostOp</a>,</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a8cb85de50d6c327c6d656865dd2d50ce">FusedConvolutionBatchNormalizationLayerWithPostOpsLayer</a>,</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a5955c7816e24dbfab34403cca9a133fc">FusedDepthwiseConvolutionBatchNormalizationLayer</a>,</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a728d2f08dedae314e27241a256449973">GenerateProposalsLayer</a>,</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16ae680fa991b49d90435920390522e4bfa">L2NormalizeLayer</a>,</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a227ecc6e858c8d1f61664f1967173bea">NormalizationLayer</a>,</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a7844e69eea1226939211d12a975aa512">NormalizePlanarYUVLayer</a>,</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a979ac8e70d367e1e442d76f00b6f0ad1">PadLayer</a>,</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16aa84a001cb23ac473e7aae73a9eaf369a">PermuteLayer</a>,</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16aea068ae5aae640d018c4300bc7619575">PoolingLayer</a>,</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a44da30946f36dcb01ca8be92a1420536">PReluLayer</a>,</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a415d76e29ed6d61c9f71cc6f7cf3f656">PrintLayer</a>,</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a77329845031ba38f828a884f40beb69c">PriorBoxLayer</a>,</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a399e260d5d6886e9917d4313cd05f6fe">QuantizationLayer</a>,</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a7315a114ff1ceed2eb2410f0cb4bfd04">ReductionOperationLayer</a>,</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16af119c4b7a889a65e39ef53786dce0c84">ReorgLayer</a>,</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a1ee0d44744be1e17e38ad5a4e9dcf5dd">ReshapeLayer</a>,</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16aea2ded20d74b2bf7921551363737777e">ResizeLayer</a>,</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a9724a5f06f63ab3de9e8af69d20069fb">ROIAlignLayer</a>,</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a4a9567bc4a6c28a527c973010eaf9a25">SoftmaxLayer</a>,</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16ad6aa9a2c35e0cb2a5777860d8fd1084e">SliceLayer</a>,</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16af2ee14b628c0a45e1682de8f33983dc1">SplitLayer</a>,</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a6a1f3bd45caa35d2537fcacb4460920e">StackLayer</a>,</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16ad38a8512f70410f9f3b55e58951a7e7e">StridedSliceLayer</a>,</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a1634ae65e32998568feae7e5e8e3bb65">UpsampleLayer</a>,</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a12bb7868a77981ec3c64e03574f36566">UnaryEltwiseLayer</a>,</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a324118a6721dd6b8a9b9f4e327df2bf5">Input</a>,</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a29c2c02a361c9d7028472e5d92cd4a54">Output</a>,</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a79ceee9f8e3c1f0cc74223e05d2448bf">Const</a>,</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16abcf036b6f33e182d4705f4f5b1af13ac">Dummy</a></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;};</div><div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16a041485a3394541feee82a34d40249d70"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a041485a3394541feee82a34d40249d70">arm_compute::graph::NodeType::ActivationLayer</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16adae196145a8fa13b72810b57e3c11f97"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16adae196145a8fa13b72810b57e3c11f97">arm_compute::graph::NodeType::FusedConvolutionWithPostOp</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16aea068ae5aae640d018c4300bc7619575"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16aea068ae5aae640d018c4300bc7619575">arm_compute::graph::NodeType::PoolingLayer</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16ad0146d2051fad860923cf31f7e00a732"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16ad0146d2051fad860923cf31f7e00a732">arm_compute::graph::NodeType::BatchNormalizationLayer</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16af119c4b7a889a65e39ef53786dce0c84"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16af119c4b7a889a65e39ef53786dce0c84">arm_compute::graph::NodeType::ReorgLayer</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16ac814c26a7c5317e2a2f58fe0e5a0d410"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16ac814c26a7c5317e2a2f58fe0e5a0d410">arm_compute::graph::NodeType::DeconvolutionLayer</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16ad87240455a60f188b358a370fe1a83a5"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16ad87240455a60f188b358a370fe1a83a5">arm_compute::graph::NodeType::FlattenLayer</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16aab5cbd6c92ca9262ddd46d573bd2d2a5"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16aab5cbd6c92ca9262ddd46d573bd2d2a5">arm_compute::graph::NodeType::BoundingBoxTransformLayer</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16a1634ae65e32998568feae7e5e8e3bb65"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a1634ae65e32998568feae7e5e8e3bb65">arm_compute::graph::NodeType::UpsampleLayer</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16a77329845031ba38f828a884f40beb69c"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a77329845031ba38f828a884f40beb69c">arm_compute::graph::NodeType::PriorBoxLayer</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16abcf036b6f33e182d4705f4f5b1af13ac"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16abcf036b6f33e182d4705f4f5b1af13ac">arm_compute::graph::NodeType::Dummy</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16aa84a001cb23ac473e7aae73a9eaf369a"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16aa84a001cb23ac473e7aae73a9eaf369a">arm_compute::graph::NodeType::PermuteLayer</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16ad1b3837fe6a80018e7002c7f7905439d"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16ad1b3837fe6a80018e7002c7f7905439d">arm_compute::graph::NodeType::EltwiseLayer</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16a227ecc6e858c8d1f61664f1967173bea"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a227ecc6e858c8d1f61664f1967173bea">arm_compute::graph::NodeType::NormalizationLayer</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16a7844e69eea1226939211d12a975aa512"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a7844e69eea1226939211d12a975aa512">arm_compute::graph::NodeType::NormalizePlanarYUVLayer</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16a5955c7816e24dbfab34403cca9a133fc"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a5955c7816e24dbfab34403cca9a133fc">arm_compute::graph::NodeType::FusedDepthwiseConvolutionBatchNormalizationLayer</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16a979ac8e70d367e1e442d76f00b6f0ad1"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a979ac8e70d367e1e442d76f00b6f0ad1">arm_compute::graph::NodeType::PadLayer</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16a6dc16ed47490b9162258248a67a28149"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a6dc16ed47490b9162258248a67a28149">arm_compute::graph::NodeType::DequantizationLayer</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16ae680fa991b49d90435920390522e4bfa"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16ae680fa991b49d90435920390522e4bfa">arm_compute::graph::NodeType::L2NormalizeLayer</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16a9724a5f06f63ab3de9e8af69d20069fb"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a9724a5f06f63ab3de9e8af69d20069fb">arm_compute::graph::NodeType::ROIAlignLayer</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16a44da30946f36dcb01ca8be92a1420536"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a44da30946f36dcb01ca8be92a1420536">arm_compute::graph::NodeType::PReluLayer</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16ad38a8512f70410f9f3b55e58951a7e7e"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16ad38a8512f70410f9f3b55e58951a7e7e">arm_compute::graph::NodeType::StridedSliceLayer</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16a1ee0d44744be1e17e38ad5a4e9dcf5dd"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a1ee0d44744be1e17e38ad5a4e9dcf5dd">arm_compute::graph::NodeType::ReshapeLayer</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16aa252659b59a03bc61e5ec827ab4448b7"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16aa252659b59a03bc61e5ec827ab4448b7">arm_compute::graph::NodeType::ConvolutionLayer</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16a12bb7868a77981ec3c64e03574f36566"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a12bb7868a77981ec3c64e03574f36566">arm_compute::graph::NodeType::UnaryEltwiseLayer</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16a0e5a1913b18dbe59dcbcf4e85148802d"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a0e5a1913b18dbe59dcbcf4e85148802d">arm_compute::graph::NodeType::DetectionPostProcessLayer</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16a4a9567bc4a6c28a527c973010eaf9a25"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a4a9567bc4a6c28a527c973010eaf9a25">arm_compute::graph::NodeType::SoftmaxLayer</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16a658061ff1dac70c02116fae6c044da1a"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a658061ff1dac70c02116fae6c044da1a">arm_compute::graph::NodeType::FullyConnectedLayer</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16a79ceee9f8e3c1f0cc74223e05d2448bf"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a79ceee9f8e3c1f0cc74223e05d2448bf">arm_compute::graph::NodeType::Const</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16af5505217824e3e9e8000ef0d63360158"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16af5505217824e3e9e8000ef0d63360158">arm_compute::graph::NodeType::ChannelShuffleLayer</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16aea2ded20d74b2bf7921551363737777e"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16aea2ded20d74b2bf7921551363737777e">arm_compute::graph::NodeType::ResizeLayer</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16af2ee14b628c0a45e1682de8f33983dc1"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16af2ee14b628c0a45e1682de8f33983dc1">arm_compute::graph::NodeType::SplitLayer</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16a415d76e29ed6d61c9f71cc6f7cf3f656"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a415d76e29ed6d61c9f71cc6f7cf3f656">arm_compute::graph::NodeType::PrintLayer</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16a324118a6721dd6b8a9b9f4e327df2bf5"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a324118a6721dd6b8a9b9f4e327df2bf5">arm_compute::graph::NodeType::Input</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16a728d2f08dedae314e27241a256449973"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a728d2f08dedae314e27241a256449973">arm_compute::graph::NodeType::GenerateProposalsLayer</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16a6a1f3bd45caa35d2537fcacb4460920e"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a6a1f3bd45caa35d2537fcacb4460920e">arm_compute::graph::NodeType::StackLayer</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16a2c77fe48e06dc15838adafc96eb07809"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a2c77fe48e06dc15838adafc96eb07809">arm_compute::graph::NodeType::DepthToSpaceLayer</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16a8b64190e5c453f3ab8003e15a32042bb"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a8b64190e5c453f3ab8003e15a32042bb">arm_compute::graph::NodeType::ArgMinMaxLayer</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16a5c436066fbad2e22ccab352c0d554809"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a5c436066fbad2e22ccab352c0d554809">arm_compute::graph::NodeType::ConcatenateLayer</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16a7315a114ff1ceed2eb2410f0cb4bfd04"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a7315a114ff1ceed2eb2410f0cb4bfd04">arm_compute::graph::NodeType::ReductionOperationLayer</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16a6f89e5fc5edf43300199d6bc8f5088de"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a6f89e5fc5edf43300199d6bc8f5088de">arm_compute::graph::NodeType::FusedConvolutionBatchNormalizationLayer</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16a5b7955cb74be105cc7e044a370d4fce8"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a5b7955cb74be105cc7e044a370d4fce8">arm_compute::graph::NodeType::DepthwiseConvolutionLayer</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16ae1b0b91c003f871664a4e289977ef02e"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16ae1b0b91c003f871664a4e289977ef02e">arm_compute::graph::NodeType::DetectionOutputLayer</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16ad6aa9a2c35e0cb2a5777860d8fd1084e"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16ad6aa9a2c35e0cb2a5777860d8fd1084e">arm_compute::graph::NodeType::SliceLayer</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16a399e260d5d6886e9917d4313cd05f6fe"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a399e260d5d6886e9917d4313cd05f6fe">arm_compute::graph::NodeType::QuantizationLayer</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16a8cb85de50d6c327c6d656865dd2d50ce"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a8cb85de50d6c327c6d656865dd2d50ce">arm_compute::graph::NodeType::FusedConvolutionBatchNormalizationLayerWithPostOpsLayer</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16a29c2c02a361c9d7028472e5d92cd4a54"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a29c2c02a361c9d7028472e5d92cd4a54">arm_compute::graph::NodeType::Output</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a31488d29805a596498c0234ae392d35d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a31488d29805a596498c0234ae392d35d">&#9670;&nbsp;</a></span>Target</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a31488d29805a596498c0234ae392d35da1c04cc3823d476c3017238679a0fdf52"></a>UNSPECIFIED&#160;</td><td class="fielddoc"><p>Unspecified Target. </p>
</td></tr>
<tr><td class="fieldname"><a id="a31488d29805a596498c0234ae392d35dacaf162e9233294cadf62d2a71a14ca09"></a>NEON&#160;</td><td class="fielddoc"><p>Arm® Neon™ capable target device. </p>
</td></tr>
<tr><td class="fieldname"><a id="a31488d29805a596498c0234ae392d35da5bc574a47246f122016869b32a6aa6f0"></a>CL&#160;</td><td class="fielddoc"><p>OpenCL capable target device. </p>
</td></tr>
<tr><td class="fieldname"><a id="a31488d29805a596498c0234ae392d35da6c83d364c26a490210700ad9ac6ad236"></a>CLVK&#160;</td><td class="fielddoc"><p>CLVK capable target device. </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00100">100</a> of file <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;{</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a1c04cc3823d476c3017238679a0fdf52">UNSPECIFIED</a>, <span class="comment">/**&lt; Unspecified Target */</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad258d4c51629346fceac4679b3209ad9acaf162e9233294cadf62d2a71a14ca09">NEON</a>,        <span class="comment">/**&lt; Arm® Neon™ capable target device */</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad258d4c51629346fceac4679b3209ad9a5bc574a47246f122016869b32a6aa6f0">CL</a>,          <span class="comment">/**&lt; OpenCL capable target device */</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35da6c83d364c26a490210700ad9ac6ad236">CLVK</a>,        <span class="comment">/**&lt; CLVK capable target device */</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;};</div><div class="ttc" id="namespacearm__compute_xhtml_ad258d4c51629346fceac4679b3209ad9acaf162e9233294cadf62d2a71a14ca09"><div class="ttname"><a href="namespacearm__compute.xhtml#ad258d4c51629346fceac4679b3209ad9acaf162e9233294cadf62d2a71a14ca09">arm_compute::DeviceType::NEON</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a31488d29805a596498c0234ae392d35da6c83d364c26a490210700ad9ac6ad236"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35da6c83d364c26a490210700ad9ac6ad236">arm_compute::graph::Target::CLVK</a></div><div class="ttdoc">CLVK capable target device. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad258d4c51629346fceac4679b3209ad9a5bc574a47246f122016869b32a6aa6f0"><div class="ttname"><a href="namespacearm__compute.xhtml#ad258d4c51629346fceac4679b3209ad9a5bc574a47246f122016869b32a6aa6f0">arm_compute::DeviceType::CL</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5a1c04cc3823d476c3017238679a0fdf52"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a1c04cc3823d476c3017238679a0fdf52">arm_compute::WeightFormat::UNSPECIFIED</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3805b9005b1d842bad30e09846e1f4e7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3805b9005b1d842bad30e09846e1f4e7">&#9670;&nbsp;</a></span>UnaryEltwiseOperation</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute_1_1graph.xhtml#a3805b9005b1d842bad30e09846e1f4e7">UnaryEltwiseOperation</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Supported Unary Element-wise operations. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a3805b9005b1d842bad30e09846e1f4e7acad39a154bffb61175f674d6eefaf6d0"></a>Exp&#160;</td><td class="fielddoc"><p>Exp. </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00120">120</a> of file <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;{</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a3805b9005b1d842bad30e09846e1f4e7acad39a154bffb61175f674d6eefaf6d0">Exp</a> <span class="comment">/**&lt; Exp */</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;};</div><div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a3805b9005b1d842bad30e09846e1f4e7acad39a154bffb61175f674d6eefaf6d0"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a3805b9005b1d842bad30e09846e1f4e7acad39a154bffb61175f674d6eefaf6d0">arm_compute::graph::UnaryEltwiseOperation::Exp</a></div><div class="ttdoc">Exp. </div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="aa1c6a4a70ded6258fff31b3de53dfb8f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa1c6a4a70ded6258fff31b3de53dfb8f">&#9670;&nbsp;</a></span>bfs()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> &gt; bfs </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Breadth first search traversal. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class. ">Graph</a> to traverse</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A vector with the node id traversal order </dd></dl>

<p class="definition">Definition at line <a class="el" href="_topological_sort_8cpp_source.xhtml#l00072">72</a> of file <a class="el" href="_topological_sort_8cpp_source.xhtml">TopologicalSort.cpp</a>.</p>

<p class="reference">References <a class="el" href="_topological_sort_8cpp_source.xhtml#l00046">arm_compute::graph::detail::all_inputs_are_visited()</a>, <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a79ceee9f8e3c1f0cc74223e05d2448bf">Const</a>, <a class="el" href="_edge_8h_source.xhtml#l00092">Edge::consumer()</a>, <a class="el" href="_edge_8h_source.xhtml#l00076">Edge::consumer_id()</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00214">Graph::edge()</a>, <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00076">EmptyNodeID</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a324118a6721dd6b8a9b9f4e327df2bf5">Input</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="_g_e_m_m_matrix_multiply_native_8cpp_source.xhtml#l00360">arm_compute::test::validation::n</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00204">Graph::node()</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00174">Graph::nodes()</a>, and <a class="el" href="_i_node_8cpp_source.xhtml#l00133">INode::output_edges()</a>.</p>

<p class="reference">Referenced by <a class="el" href="add_2generic_2neon_2qsymm16_8cpp_source.xhtml#l00035">arm_compute::cpu::add_qsymm16_neon()</a>, <a class="el" href="add_2generic_2neon_2impl_8cpp_source.xhtml#l00382">arm_compute::cpu::add_sub_qasymm8_neon()</a>, <a class="el" href="add_2generic_2neon_2impl_8cpp_source.xhtml#l00565">arm_compute::cpu::add_sub_qasymm8_signed_neon()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00856">arm_compute::cpu::elementwise_comp_quantized_signed()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00748">arm_compute::cpu::elementwise_op_quantized()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00963">arm_compute::cpu::elementwise_op_quantized_signed()</a>, and <a class="el" href="sub_2neon_2qsymm16_8cpp_source.xhtml#l00035">arm_compute::cpu::sub_qsymm16_neon()</a>.</p>
<div class="fragment"><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;{</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    std::vector&lt;NodeID&gt; bfs_order_vector;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="comment">// Created visited vector</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    std::vector&lt;bool&gt; visited(g.nodes().size(), <span class="keyword">false</span>);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="comment">// Create BFS queue</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    std::list&lt;NodeID&gt; queue;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="comment">// Push inputs and mark as visited</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> : g.nodes(NodeType::Input))</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    {</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> != <a class="code" href="namespacearm__compute_1_1graph.xhtml#aad3f5296ec88b9d552c109b04b89ad9f">EmptyNodeID</a>)</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        {</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            visited[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>] = <span class="keyword">true</span>;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            queue.push_back(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>);</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        }</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    }</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="comment">// Push const nodes and mark as visited</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;const_node : g.nodes(NodeType::Const))</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    {</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="keywordflow">if</span>(const_node != <a class="code" href="namespacearm__compute_1_1graph.xhtml#aad3f5296ec88b9d552c109b04b89ad9f">EmptyNodeID</a>)</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        {</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            visited[const_node] = <span class="keyword">true</span>;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            queue.push_back(const_node);</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        }</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    }</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="comment">// Iterate over vector and edges</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordflow">while</span>(!queue.empty())</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="comment">// Dequeue a node from queue and process</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a> = queue.front();</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        bfs_order_vector.push_back(n);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        queue.pop_front();</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <span class="keyword">const</span> INode *node = g.node(n);</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(node == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;eid : node-&gt;output_edges())</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        {</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            <span class="keyword">const</span> Edge *e = g.edge(eid);</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(e == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            <span class="keywordflow">if</span>(!visited[e-&gt;consumer_id()] &amp;&amp; <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#ae668406fdc43b21e5dcb3904fa683ea0">detail::all_inputs_are_visited</a>(e-&gt;consumer(), visited))</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            {</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                visited[e-&gt;consumer_id()] = <span class="keyword">true</span>;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                queue.push_back(e-&gt;consumer_id());</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            }</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        }</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    }</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keywordflow">return</span> bfs_order_vector;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">LSTMLayerQuantized.cpp:486</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a56952a8591a9d8481450ae707ae355e7"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">arm_compute::graph::NodeID</a></div><div class="ttdeci">unsigned int NodeID</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00069">Types.h:69</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_aad3f5296ec88b9d552c109b04b89ad9f"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aad3f5296ec88b9d552c109b04b89ad9f">arm_compute::graph::EmptyNodeID</a></div><div class="ttdeci">constexpr NodeID EmptyNodeID</div><div class="ttdoc">Constant EdgeID specifying an equivalent of null edge. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00076">Types.h:76</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1detail_xhtml_ae668406fdc43b21e5dcb3904fa683ea0"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1detail.xhtml#ae668406fdc43b21e5dcb3904fa683ea0">arm_compute::graph::detail::all_inputs_are_visited</a></div><div class="ttdeci">bool all_inputs_are_visited(const INode *node, const std::vector&lt; bool &gt; &amp;visited)</div><div class="ttdoc">Checks if all the input dependencies of a node have been visited. </div><div class="ttdef"><b>Definition:</b> <a href="_topological_sort_8cpp_source.xhtml#l00046">TopologicalSort.cpp:46</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a47196b5f5be413bedc213df1640c19cb"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">arm_compute::test::validation::n</a></div><div class="ttdeci">const unsigned int n</div><div class="ttdef"><b>Definition:</b> <a href="_g_e_m_m_matrix_multiply_native_8cpp_source.xhtml#l00360">GEMMMatrixMultiplyNative.cpp:360</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a36fd3cfa2e1d33e59e1d3e95664d8b9c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a36fd3cfa2e1d33e59e1d3e95664d8b9c">&#9670;&nbsp;</a></span>configure_tensor()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void configure_tensor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml">Tensor</a> *&#160;</td>
          <td class="paramname"><em>tensor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Configures tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">tensor</td><td><a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml" title="Tensor object. ">Tensor</a> to configure </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00217">217</a> of file <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml">Utils.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00456">ARM_COMPUTE_ERROR_ON_MSG</a>, <a class="el" href="classarm__compute_1_1graph_1_1backends_1_1_i_device_backend.xhtml#a0f46e4fef818b4114b3d09c799944046">IDeviceBackend::create_tensor()</a>, <a class="el" href="src_2graph_2_tensor_8cpp_source.xhtml#l00040">Tensor::desc()</a>, <a class="el" href="_backend_registry_8cpp_source.xhtml#l00039">BackendRegistry::get()</a>, <a class="el" href="_backend_registry_8cpp_source.xhtml#l00051">BackendRegistry::get_backend()</a>, <a class="el" href="src_2graph_2_tensor_8cpp_source.xhtml#l00055">Tensor::handle()</a>, <a class="el" href="src_2graph_2_tensor_8cpp_source.xhtml#l00050">Tensor::set_handle()</a>, and <a class="el" href="_tensor_descriptor_8h_source.xhtml#l00113">TensorDescriptor::target</a>.</p>

<p class="reference">Referenced by <a class="el" href="_grouped_convolution_mutator_8cpp_source.xhtml#l00113">GroupedConvolutionMutator::mutate()</a>, <a class="el" href="arm__compute_2graph_2_utils_8h_source.xhtml#l00062">set_tensor_accessor()</a>, and <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00048">arm_compute::graph::detail::transfer_driving_nodes_and_remove_old_node()</a>.</p>
<div class="fragment"><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;{</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> != <span class="keyword">nullptr</span> &amp;&amp; <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;handle() == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    {</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        <a class="code" href="namespaceacl.xhtml#a31488d29805a596498c0234ae392d35d">Target</a>                         target  = <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;desc().target;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        backends::IDeviceBackend      &amp;backend = backends::BackendRegistry::get().get_backend(target);</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        std::unique_ptr&lt;ITensorHandle&gt; handle  = backend.create_tensor(*<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(!handle, <span class="stringliteral">&quot;Couldn&#39;t create backend handle!&quot;</span>);</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;set_handle(std::move(handle));</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    }</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a0b0eb3235749a2909dc5a101afe59a1b"><div class="ttname"><a href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond, msg)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00456">Error.h:456</a></div></div>
<div class="ttc" id="namespaceacl_xhtml_a31488d29805a596498c0234ae392d35d"><div class="ttname"><a href="namespaceacl.xhtml#a31488d29805a596498c0234ae392d35d">acl::Target</a></div><div class="ttdeci">Target</div><div class="ttdoc">&lt; Target enum </div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00293">Acl.hpp:293</a></div></div>
<div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00066">ClWorkloadRuntime.cpp:66</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af5bf30d1d655abfcb8b0175c5b161a95"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af5bf30d1d655abfcb8b0175c5b161a95">&#9670;&nbsp;</a></span>Convolution_method_from_name()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517d">ConvolutionMethod</a> Convolution_method_from_name </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Converts a string to a strong types enumeration <a class="el" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517d">ConvolutionMethod</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">name</td><td>String to convert</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Converted Target enumeration </dd></dl>

<p class="definition">Definition at line <a class="el" href="_type_loader_8cpp_source.xhtml#l00080">80</a> of file <a class="el" href="_type_loader_8cpp_source.xhtml">TypeLoader.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517da7a1920d61156abc05a60135aefe8bc67">Default</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517dafd1dd0c603be8170f9eae0be9f2f6afb">Direct</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517da5174aac3927faa9ee34befb7fc87a9e3">GEMM</a>, <a class="el" href="_utility_8h_source.xhtml#l00206">arm_compute::utility::tolower()</a>, and <a class="el" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517da09db1dd1078ec6bdbe2722b4558e578f">Winograd</a>.</p>

<p class="reference">Referenced by <a class="el" href="_type_loader_8h_source.xhtml#l00073">operator&gt;&gt;()</a>.</p>
<div class="fragment"><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;{</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> std::map&lt;std::string, ConvolutionMethod&gt; methods =</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    {</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        { <span class="stringliteral">&quot;default&quot;</span>, ConvolutionMethod::Default },</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        { <span class="stringliteral">&quot;direct&quot;</span>, ConvolutionMethod::Direct },</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        { <span class="stringliteral">&quot;gemm&quot;</span>, <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea3a3719691bd6b7da7ff9e45d54fd32ba">ConvolutionMethod::GEMM</a> },</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        { <span class="stringliteral">&quot;winograd&quot;</span>, ConvolutionMethod::Winograd },</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    };</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_EXCEPTIONS_DISABLED</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keywordflow">try</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    {</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_EXCEPTIONS_DISABLED */</span><span class="preprocessor"></span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <span class="keywordflow">return</span> methods.at(<a class="code" href="namespacearm__compute_1_1utility.xhtml#abb96ad5c7071ec3a47ea5f07e817a636">arm_compute::utility::tolower</a>(<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a>));</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_EXCEPTIONS_DISABLED</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    }</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keywordflow">catch</span>(<span class="keyword">const</span> std::out_of_range &amp;)</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    {</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        <span class="keywordflow">throw</span> std::invalid_argument(<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a>);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    }</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_EXCEPTIONS_DISABLED */</span><span class="preprocessor"></span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1utility_xhtml_abb96ad5c7071ec3a47ea5f07e817a636"><div class="ttname"><a href="namespacearm__compute_1_1utility.xhtml#abb96ad5c7071ec3a47ea5f07e817a636">arm_compute::utility::tolower</a></div><div class="ttdeci">std::string tolower(std::string string)</div><div class="ttdoc">Convert string to lower case. </div><div class="ttdef"><b>Definition:</b> <a href="_utility_8h_source.xhtml#l00206">Utility.h:206</a></div></div>
<div class="ttc" id="_n_e_batch_normalization_layer_kernel_8cpp_xhtml_a8f8f80d37794cde9472343e4487ba3eb"><div class="ttname"><a href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a></div><div class="ttdeci">const char * name</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00060">NEBatchNormalizationLayerKernel.cpp:60</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a6df16a1b3b5af590a14f55e983d3428ea3a3719691bd6b7da7ff9e45d54fd32ba"><div class="ttname"><a href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea3a3719691bd6b7da7ff9e45d54fd32ba">arm_compute::GEMM</a></div><div class="ttdoc">GEMM CL kernel type. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_types_8h_source.xhtml#l00086">CLTypes.h:86</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0a2d08174e24bcb1dfdf9d8893cd9363"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0a2d08174e24bcb1dfdf9d8893cd9363">&#9670;&nbsp;</a></span>create_default_pass_manager()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1graph_1_1_pass_manager.xhtml">PassManager</a> create_default_pass_manager </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a>&#160;</td>
          <td class="paramname"><em>target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1graph_1_1_graph_config.xhtml">GraphConfig</a> &amp;&#160;</td>
          <td class="paramname"><em>cfg</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Creates a default <a class="el" href="classarm__compute_1_1graph_1_1_pass_manager.xhtml">PassManager</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">target</td><td>Target to create the pass manager for </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cfg</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class. ">Graph</a> configuration meta-data</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A <a class="el" href="classarm__compute_1_1graph_1_1_pass_manager.xhtml" title="Pass manager. ">PassManager</a> with default mutating passes </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00073">73</a> of file <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml">Utils.cpp</a>.</p>

<p class="reference">References <a class="el" href="_pass_manager_8cpp_source.xhtml#l00047">PassManager::append()</a>, <a class="el" href="_error_8h_source.xhtml#l00352">ARM_COMPUTE_ERROR</a>, <a class="el" href="_error_8h_source.xhtml#l00152">ARM_COMPUTE_UNUSED</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">arm_compute::QASYMM8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">arm_compute::QASYMM8_SIGNED</a>, <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00091">GraphConfig::synthetic_type</a>, and <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00090">GraphConfig::use_synthetic_type</a>.</p>

<p class="reference">Referenced by <a class="el" href="_stream_8cpp_source.xhtml#l00040">Stream::finalize()</a>, and <a class="el" href="arm__compute_2graph_2_utils_8h_source.xhtml#l00062">set_tensor_accessor()</a>.</p>
<div class="fragment"><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;{</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(target);</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    PassManager pm;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="comment">// Passes that mutate graph IR</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordflow">if</span>(cfg.use_synthetic_type)</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    {</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <span class="keywordflow">switch</span>(cfg.synthetic_type)</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        {</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            <span class="keywordflow">case</span> DataType::QASYMM8:</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            <span class="keywordflow">case</span> DataType::QASYMM8_SIGNED:</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            {</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                pm.append(std::make_unique&lt;SyntheticDataTypeMutator&gt;(cfg.synthetic_type));</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            }</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            <span class="keywordflow">default</span>:</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            {</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported DataType for SyntheticDataTypeMutator&quot;</span>);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            }</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        }</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    }</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    pm.append(std::make_unique&lt;NodeFusionMutator&gt;());</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    pm.append(std::make_unique&lt;GroupedConvolutionMutator&gt;());</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    pm.append(std::make_unique&lt;InPlaceOperationMutator&gt;());</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="comment">// Passes that mutate backend information</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    pm.append(std::make_unique&lt;DepthConcatSubTensorMutator&gt;());</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    pm.append(std::make_unique&lt;SplitLayerSubTensorMutator&gt;());</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    pm.append(std::make_unique&lt;NodeExecutionMethodMutator&gt;());</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keywordflow">return</span> pm;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a6dbaf2e51ef91725f852766f923fd5a6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6dbaf2e51ef91725f852766f923fd5a6">&#9670;&nbsp;</a></span>depthwise_convolution_method_from_name()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a75ce9b1baad4303a53124d6f0795821f">DepthwiseConvolutionMethod</a> depthwise_convolution_method_from_name </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Converts a string to a strong types enumeration <a class="el" href="namespacearm__compute_1_1graph.xhtml#a75ce9b1baad4303a53124d6f0795821f">DepthwiseConvolutionMethod</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">name</td><td>String to convert</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Converted Target enumeration </dd></dl>

<p class="definition">Definition at line <a class="el" href="_type_loader_8cpp_source.xhtml#l00105">105</a> of file <a class="el" href="_type_loader_8cpp_source.xhtml">TypeLoader.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearm__compute_1_1graph.xhtml#a75ce9b1baad4303a53124d6f0795821fa7a1920d61156abc05a60135aefe8bc67">Default</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a75ce9b1baad4303a53124d6f0795821fa3bb7b7f3f021a006e65111fc1d226938">Optimized3x3</a>, and <a class="el" href="_utility_8h_source.xhtml#l00206">arm_compute::utility::tolower()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_type_loader_8h_source.xhtml#l00096">operator&gt;&gt;()</a>.</p>
<div class="fragment"><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;{</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> std::map&lt;std::string, DepthwiseConvolutionMethod&gt; methods =</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    {</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        { <span class="stringliteral">&quot;default&quot;</span>, DepthwiseConvolutionMethod::Default },</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        { <span class="stringliteral">&quot;optimized3x3&quot;</span>, DepthwiseConvolutionMethod::Optimized3x3 },</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    };</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_EXCEPTIONS_DISABLED</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keywordflow">try</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    {</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_EXCEPTIONS_DISABLED */</span><span class="preprocessor"></span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <span class="keywordflow">return</span> methods.at(<a class="code" href="namespacearm__compute_1_1utility.xhtml#abb96ad5c7071ec3a47ea5f07e817a636">arm_compute::utility::tolower</a>(<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a>));</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_EXCEPTIONS_DISABLED</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    }</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="keywordflow">catch</span>(<span class="keyword">const</span> std::out_of_range &amp;)</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    {</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        <span class="keywordflow">throw</span> std::invalid_argument(<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a>);</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    }</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_EXCEPTIONS_DISABLED */</span><span class="preprocessor"></span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1utility_xhtml_abb96ad5c7071ec3a47ea5f07e817a636"><div class="ttname"><a href="namespacearm__compute_1_1utility.xhtml#abb96ad5c7071ec3a47ea5f07e817a636">arm_compute::utility::tolower</a></div><div class="ttdeci">std::string tolower(std::string string)</div><div class="ttdoc">Convert string to lower case. </div><div class="ttdef"><b>Definition:</b> <a href="_utility_8h_source.xhtml#l00206">Utility.h:206</a></div></div>
<div class="ttc" id="_n_e_batch_normalization_layer_kernel_8cpp_xhtml_a8f8f80d37794cde9472343e4487ba3eb"><div class="ttname"><a href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a></div><div class="ttdeci">const char * name</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00060">NEBatchNormalizationLayerKernel.cpp:60</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a14abdeb0f575e919aa6d586a95f23920"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a14abdeb0f575e919aa6d586a95f23920">&#9670;&nbsp;</a></span>dfs()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> &gt; dfs </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Depth first search traversal. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class. ">Graph</a> to traverse</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A vector with the node id traversal order </dd></dl>

<p class="definition">Definition at line <a class="el" href="_topological_sort_8cpp_source.xhtml#l00127">127</a> of file <a class="el" href="_topological_sort_8cpp_source.xhtml">TopologicalSort.cpp</a>.</p>

<p class="reference">References <a class="el" href="_topological_sort_8cpp_source.xhtml#l00046">arm_compute::graph::detail::all_inputs_are_visited()</a>, <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a79ceee9f8e3c1f0cc74223e05d2448bf">Const</a>, <a class="el" href="_edge_8h_source.xhtml#l00092">Edge::consumer()</a>, <a class="el" href="_edge_8h_source.xhtml#l00076">Edge::consumer_id()</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00214">Graph::edge()</a>, <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00076">EmptyNodeID</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a324118a6721dd6b8a9b9f4e327df2bf5">Input</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="_g_e_m_m_matrix_multiply_native_8cpp_source.xhtml#l00360">arm_compute::test::validation::n</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00204">Graph::node()</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00174">Graph::nodes()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00133">INode::output_edges()</a>, and <a class="el" href="_iterable_8h_source.xhtml#l00101">arm_compute::utils::iterable::reverse_iterate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_manager_8cpp_source.xhtml#l00047">GraphManager::finalize_graph()</a>, <a class="el" href="_split_layer_sub_tensor_mutator_8cpp_source.xhtml#l00050">SplitLayerSubTensorMutator::mutate()</a>, and <a class="el" href="_depth_concat_sub_tensor_mutator_8cpp_source.xhtml#l00050">DepthConcatSubTensorMutator::mutate()</a>.</p>
<div class="fragment"><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;{</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    std::vector&lt;NodeID&gt; dfs_order_vector;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="comment">// Created visited vector</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    std::vector&lt;bool&gt; visited(g.nodes().size(), <span class="keyword">false</span>);</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="comment">// Create DFS stack</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    std::stack&lt;NodeID&gt; stack;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="comment">// Push inputs and mark as visited</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> : g.nodes(NodeType::Input))</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    {</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> != <a class="code" href="namespacearm__compute_1_1graph.xhtml#aad3f5296ec88b9d552c109b04b89ad9f">EmptyNodeID</a>)</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        {</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            visited[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>] = <span class="keyword">true</span>;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            stack.push(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        }</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    }</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="comment">// Push const nodes and mark as visited</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;const_node : g.nodes(NodeType::Const))</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    {</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="keywordflow">if</span>(const_node != <a class="code" href="namespacearm__compute_1_1graph.xhtml#aad3f5296ec88b9d552c109b04b89ad9f">EmptyNodeID</a>)</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        {</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            visited[const_node] = <span class="keyword">true</span>;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            stack.push(const_node);</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        }</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    }</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="comment">// Iterate over vector and edges</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="keywordflow">while</span>(!stack.empty())</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    {</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        <span class="comment">// Pop a node from stack and process</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a> = stack.top();</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        dfs_order_vector.push_back(n);</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        stack.pop();</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <span class="comment">// Mark node as visited</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="keywordflow">if</span>(!visited[n])</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        {</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            visited[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a>] = <span class="keyword">true</span>;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        }</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        <span class="keyword">const</span> INode *node = g.node(n);</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(node == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <span class="comment">// Reverse iterate to push branches from right to left and pop on the opposite order</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;eid : <a class="code" href="namespacearm__compute_1_1utils_1_1iterable.xhtml#ad093dbcab3409be5ca29a73556df5290">arm_compute::utils::iterable::reverse_iterate</a>(node-&gt;output_edges()))</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        {</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            <span class="keyword">const</span> Edge *e = g.edge(eid);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(e == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            <span class="keywordflow">if</span>(!visited[e-&gt;consumer_id()] &amp;&amp; <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#ae668406fdc43b21e5dcb3904fa683ea0">detail::all_inputs_are_visited</a>(e-&gt;consumer(), visited))</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;            {</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                stack.push(e-&gt;consumer_id());</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            }</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        }</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    }</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keywordflow">return</span> dfs_order_vector;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">LSTMLayerQuantized.cpp:486</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a56952a8591a9d8481450ae707ae355e7"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">arm_compute::graph::NodeID</a></div><div class="ttdeci">unsigned int NodeID</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00069">Types.h:69</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_aad3f5296ec88b9d552c109b04b89ad9f"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aad3f5296ec88b9d552c109b04b89ad9f">arm_compute::graph::EmptyNodeID</a></div><div class="ttdeci">constexpr NodeID EmptyNodeID</div><div class="ttdoc">Constant EdgeID specifying an equivalent of null edge. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00076">Types.h:76</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_1_1iterable_xhtml_ad093dbcab3409be5ca29a73556df5290"><div class="ttname"><a href="namespacearm__compute_1_1utils_1_1iterable.xhtml#ad093dbcab3409be5ca29a73556df5290">arm_compute::utils::iterable::reverse_iterate</a></div><div class="ttdeci">reverse_iterable&lt; T &gt; reverse_iterate(T &amp;val)</div><div class="ttdoc">Creates a reverse iterable for a given type. </div><div class="ttdef"><b>Definition:</b> <a href="_iterable_8h_source.xhtml#l00101">Iterable.h:101</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1detail_xhtml_ae668406fdc43b21e5dcb3904fa683ea0"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1detail.xhtml#ae668406fdc43b21e5dcb3904fa683ea0">arm_compute::graph::detail::all_inputs_are_visited</a></div><div class="ttdeci">bool all_inputs_are_visited(const INode *node, const std::vector&lt; bool &gt; &amp;visited)</div><div class="ttdoc">Checks if all the input dependencies of a node have been visited. </div><div class="ttdef"><b>Definition:</b> <a href="_topological_sort_8cpp_source.xhtml#l00046">TopologicalSort.cpp:46</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a47196b5f5be413bedc213df1640c19cb"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">arm_compute::test::validation::n</a></div><div class="ttdeci">const unsigned int n</div><div class="ttdef"><b>Definition:</b> <a href="_g_e_m_m_matrix_multiply_native_8cpp_source.xhtml#l00360">GEMMMatrixMultiplyNative.cpp:360</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad9e7501e803a9892419f72540671233f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad9e7501e803a9892419f72540671233f">&#9670;&nbsp;</a></span>execute_task()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void execute_task </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_execution_task.xhtml">ExecutionTask</a> &amp;&#160;</td>
          <td class="paramname"><em>task</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_workload_8cpp_source.xhtml#l00041">41</a> of file <a class="el" href="_workload_8cpp_source.xhtml">Workload.cpp</a>.</p>

<p class="reference">References <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="_workload_8h_source.xhtml#l00088">ExecutionTask::node</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#ade74189c92e70baa2848986c10dbe7ef">ITensor::print()</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a415d76e29ed6d61c9f71cc6f7cf3f656">PrintLayer</a>, <a class="el" href="_workload_8h_source.xhtml#l00087">ExecutionTask::task</a>, and <a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a6b2d83e561886647467f86c20ce39bec">INode::type()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_8cpp_source.xhtml#l00062">ExecutionTask::prepare()</a>.</p>
<div class="fragment"><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordflow">if</span>(task.task)</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    {</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        task.task-&gt;run();</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    }</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="preprocessor">#ifdef ARM_COMPUTE_ASSERTS_ENABLED</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(task.node-&gt;type() == NodeType::PrintLayer)</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    {</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="keyword">auto</span> print_node   = utils::cast::polymorphic_downcast&lt;PrintLayerNode *&gt;(task.node);</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <span class="keyword">auto</span> input_handle = print_node-&gt;input(0)-&gt;handle();</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="keyword">auto</span> transform    = print_node-&gt;transform();</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        input_handle-&gt;map(<span class="keyword">true</span>);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        ITensor *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> = transform ? transform(&amp;input_handle-&gt;tensor()) : &amp;input_handle-&gt;tensor();</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        input-&gt;print(print_node-&gt;stream(), print_node-&gt;format_info());</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        input_handle-&gt;unmap();</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    }</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="preprocessor">#endif // ARM_COMPUTE_ASSERTS_ENABLED</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">LSTMLayerQuantized.cpp:486</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac5712330ef2d40408efb4eae5665dc6e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac5712330ef2d40408efb4eae5665dc6e">&#9670;&nbsp;</a></span>force_target_to_graph()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void force_target_to_graph </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a>&#160;</td>
          <td class="paramname"><em>target</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Forces a single target to all graph constructs. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class. ">Graph</a> to force target on </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">target</td><td>Target to force </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00052">52</a> of file <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml">Utils.cpp</a>.</p>

<p class="reference">References <a class="el" href="_graph_8cpp_source.xhtml#l00174">Graph::nodes()</a>, <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00066">tensor</a>, and <a class="el" href="_graph_8cpp_source.xhtml#l00194">Graph::tensors()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_manager_8cpp_source.xhtml#l00047">GraphManager::finalize_graph()</a>, and <a class="el" href="arm__compute_2graph_2_utils_8h_source.xhtml#l00062">set_tensor_accessor()</a>.</p>
<div class="fragment"><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;{</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">auto</span> &amp;nodes = g.nodes();</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;node : nodes)</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    {</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <span class="keywordflow">if</span>(node)</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        {</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            node-&gt;set_assigned_target(target);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        }</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    }</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">auto</span> &amp;tensors = g.tensors();</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> : tensors)</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    {</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keywordflow">if</span>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        {</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;desc().target = target;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        }</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    }</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;}</div><div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00066">ClWorkloadRuntime.cpp:66</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="addc5c907a850a8b4d5458bd14f50c6f7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#addc5c907a850a8b4d5458bd14f50c6f7">&#9670;&nbsp;</a></span>get_default_target()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a> get_default_target </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns default target for execution. </p>
<dl class="section note"><dt>Note</dt><dd>If an OpenCL backend exists then OpenCL is returned, else if the CPU backend exists returns <a class="el" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35dacaf162e9233294cadf62d2a71a14ca09">Target::NEON</a> as target. If no backends are registered an error is raised.</dd></dl>
<dl class="section return"><dt>Returns</dt><dd>Default target </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00039">39</a> of file <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml">Utils.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00352">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35da5bc574a47246f122016869b32a6aa6f0">CL</a>, <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00034">is_target_supported()</a>, and <a class="el" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35dacaf162e9233294cadf62d2a71a14ca09">NEON</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_manager_8cpp_source.xhtml#l00047">GraphManager::finalize_graph()</a>, and <a class="el" href="arm__compute_2graph_2_utils_8h_source.xhtml#l00062">set_tensor_accessor()</a>.</p>
<div class="fragment"><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1graph.xhtml#a6fd498c55b126dc3f078d38e8528effb">is_target_supported</a>(Target::NEON))</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    {</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        <span class="keywordflow">return</span> Target::NEON;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    }</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1graph.xhtml#a6fd498c55b126dc3f078d38e8528effb">is_target_supported</a>(Target::CL))</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    {</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <span class="keywordflow">return</span> Target::CL;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    }</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;No backend exists!&quot;</span>);</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a6fd498c55b126dc3f078d38e8528effb"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a6fd498c55b126dc3f078d38e8528effb">arm_compute::graph::is_target_supported</a></div><div class="ttdeci">bool is_target_supported(Target target)</div><div class="ttdoc">Checks if a specific target is supported. </div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_utils_8cpp_source.xhtml#l00034">Utils.cpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1df15aed3ed531f442ecea2a131d65a4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1df15aed3ed531f442ecea2a131d65a4">&#9670;&nbsp;</a></span>get_dimension_idx()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t get_dimension_idx </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>&#160;</td>
          <td class="paramname"><em>data_layout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02">DataLayoutDimension</a>&#160;</td>
          <td class="paramname"><em>data_layout_dimension</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get index of a tensor's given dimension depending on its layout. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">data_layout</td><td>Data layout of the tensor </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data_layout_dimension</td><td><a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml" title="Tensor object. ">Tensor</a> data layout dimension</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Idx of given dimension </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00148">148</a> of file <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml">Utils.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00352">ARM_COMPUTE_ERROR</a>, <a class="el" href="_error_8h_source.xhtml#l00456">ARM_COMPUTE_ERROR_ON_MSG</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a628bcf7e10fc1c2a984f379a1ec3393a">arm_compute::BATCHES</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">arm_compute::CHANNEL</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">arm_compute::HEIGHT</a>, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">arm_compute::NCHW</a>, <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a696b031073e74bf2cb98e5ef201d4aa3">arm_compute::UNKNOWN</a>, and <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">arm_compute::WIDTH</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_builder_8cpp_source.xhtml#l00219">GraphBuilder::add_convolution_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00276">GraphBuilder::add_deconvolution_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00332">GraphBuilder::add_depthwise_convolution_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00680">GraphBuilder::add_scale_layer()</a>, <a class="el" href="_concatenate_layer_node_8cpp_source.xhtml#l00064">ConcatenateLayerNode::compute_output_descriptor()</a>, <a class="el" href="_pooling_layer_node_8cpp_source.xhtml#l00047">PoolingLayerNode::compute_output_descriptor()</a>, <a class="el" href="_reorg_layer_node_8cpp_source.xhtml#l00046">ReorgLayerNode::compute_output_descriptor()</a>, <a class="el" href="_deconvolution_layer_node_8cpp_source.xhtml#l00047">DeconvolutionLayerNode::compute_output_descriptor()</a>, <a class="el" href="_fused_convolution_batch_normalization_with_post_ops_node_8cpp_source.xhtml#l00080">FusedConvolutionBatchNormalizationWithPostOpsNode::compute_output_descriptor()</a>, <a class="el" href="_fused_convolution_batch_normalization_node_8cpp_source.xhtml#l00091">FusedConvolutionBatchNormalizationNode::compute_output_descriptor()</a>, <a class="el" href="_fused_depthwise_convolution_batch_normalization_node_8cpp_source.xhtml#l00081">FusedDepthwiseConvolutionBatchNormalizationNode::compute_output_descriptor()</a>, <a class="el" href="_depthwise_convolution_layer_node_8cpp_source.xhtml#l00078">DepthwiseConvolutionLayerNode::compute_output_descriptor()</a>, <a class="el" href="_convolution_layer_node_8cpp_source.xhtml#l00091">ConvolutionLayerNode::compute_output_descriptor()</a>, <a class="el" href="_fused_convolution_with_post_op_node_8cpp_source.xhtml#l00091">FusedConvolutionWithPostOpNode::compute_output_descriptor()</a>, <a class="el" href="_resize_layer_node_8cpp_source.xhtml#l00063">ResizeLayerNode::configure_output()</a>, <a class="el" href="_function_helpers_8h_source.xhtml#l00407">arm_compute::graph::backends::detail::create_concatenate_layer()</a>, <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00266">arm_compute::graph::detail::fuse_pad_with_convolution()</a>, <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00142">get_dimension_size()</a>, <a class="el" href="_mutator_utils_8cpp_source.xhtml#l00030">is_padding_in_height_or_width()</a>, <a class="el" href="_depth_concat_sub_tensor_mutator_8cpp_source.xhtml#l00050">DepthConcatSubTensorMutator::mutate()</a>, and <a class="el" href="arm__compute_2graph_2_utils_8h_source.xhtml#l00062">set_tensor_accessor()</a>.</p>
<div class="fragment"><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;{</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a> == <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c">DataLayout::UNKNOWN</a>, <span class="stringliteral">&quot;Cannot retrieve the dimension index for an unknown layout!&quot;</span>);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="comment">/* Return the index based on the data layout</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment">     * [N C H W]</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment">     * [3 2 1 0]</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">     * [N H W C]</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keywordflow">switch</span>(data_layout_dimension)</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    {</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        <span class="keywordflow">case</span> DataLayoutDimension::CHANNEL:</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            <span class="keywordflow">return</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a> == DataLayout::NCHW) ? 2 : 0;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <span class="keywordflow">case</span> DataLayoutDimension::HEIGHT:</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            <span class="keywordflow">return</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a> == DataLayout::NCHW) ? 1 : 2;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <span class="keywordflow">case</span> DataLayoutDimension::WIDTH:</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            <span class="keywordflow">return</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a> == DataLayout::NCHW) ? 0 : 1;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        <span class="keywordflow">case</span> DataLayoutDimension::BATCHES:</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            <span class="keywordflow">return</span> 3;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    }</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Data layout index not supported!&quot;</span>);</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_acf5f12bbab64dd614bd8220c97fe484f"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">arm_compute::test::validation::data_layout</a></div><div class="ttdeci">const auto data_layout</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00406">ConvolutionLayer.cpp:406</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c"><div class="ttname"><a href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c">arm_compute::UNKNOWN</a></div><div class="ttdoc">Unknown CL kernel type. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_types_8h_source.xhtml#l00082">CLTypes.h:82</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a0b0eb3235749a2909dc5a101afe59a1b"><div class="ttname"><a href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond, msg)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00456">Error.h:456</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a75f8e464c6b01b0a4771de38669ee9a1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a75f8e464c6b01b0a4771de38669ee9a1">&#9670;&nbsp;</a></span>get_dimension_size()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t get_dimension_size </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml">TensorDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02">DataLayoutDimension</a>&#160;</td>
          <td class="paramname"><em>data_layout_dimension</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get size of a tensor's given dimension depending on its layout. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">descriptor</td><td>Descriptor </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data_layout_dimension</td><td><a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml" title="Tensor object. ">Tensor</a> data layout dimension</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Size of requested dimension </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00142">142</a> of file <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml">Utils.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00456">ARM_COMPUTE_ERROR_ON_MSG</a>, <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00148">get_dimension_idx()</a>, <a class="el" href="_tensor_descriptor_8h_source.xhtml#l00111">TensorDescriptor::layout</a>, <a class="el" href="_tensor_descriptor_8h_source.xhtml#l00109">TensorDescriptor::shape</a>, and <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a696b031073e74bf2cb98e5ef201d4aa3">arm_compute::UNKNOWN</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_builder_8cpp_source.xhtml#l00148">GraphBuilder::add_batch_normalization_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00219">GraphBuilder::add_convolution_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00276">GraphBuilder::add_deconvolution_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00332">GraphBuilder::add_depthwise_convolution_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00565">GraphBuilder::add_normalize_planar_yuv_node()</a>, <a class="el" href="_reorg_layer_node_8cpp_source.xhtml#l00046">ReorgLayerNode::compute_output_descriptor()</a>, <a class="el" href="_prior_box_layer_node_8cpp_source.xhtml#l00047">PriorBoxLayerNode::compute_output_descriptor()</a>, <a class="el" href="_pooling_layer_node_8cpp_source.xhtml#l00047">PoolingLayerNode::compute_output_descriptor()</a>, <a class="el" href="_deconvolution_layer_node_8cpp_source.xhtml#l00047">DeconvolutionLayerNode::compute_output_descriptor()</a>, <a class="el" href="_fused_convolution_batch_normalization_with_post_ops_node_8cpp_source.xhtml#l00080">FusedConvolutionBatchNormalizationWithPostOpsNode::compute_output_descriptor()</a>, <a class="el" href="_fused_convolution_batch_normalization_node_8cpp_source.xhtml#l00091">FusedConvolutionBatchNormalizationNode::compute_output_descriptor()</a>, <a class="el" href="_fused_depthwise_convolution_batch_normalization_node_8cpp_source.xhtml#l00081">FusedDepthwiseConvolutionBatchNormalizationNode::compute_output_descriptor()</a>, <a class="el" href="_depthwise_convolution_layer_node_8cpp_source.xhtml#l00078">DepthwiseConvolutionLayerNode::compute_output_descriptor()</a>, <a class="el" href="_convolution_layer_node_8cpp_source.xhtml#l00091">ConvolutionLayerNode::compute_output_descriptor()</a>, <a class="el" href="_fused_convolution_with_post_op_node_8cpp_source.xhtml#l00091">FusedConvolutionWithPostOpNode::compute_output_descriptor()</a>, and <a class="el" href="arm__compute_2graph_2_utils_8h_source.xhtml#l00062">set_tensor_accessor()</a>.</p>
<div class="fragment"><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;{</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(descriptor.layout == <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c">DataLayout::UNKNOWN</a>, <span class="stringliteral">&quot;Cannot retrieve the dimension index for an unknown layout!&quot;</span>);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keywordflow">return</span> descriptor.shape[<a class="code" href="namespacearm__compute_1_1graph.xhtml#a1df15aed3ed531f442ecea2a131d65a4">get_dimension_idx</a>(descriptor.layout, data_layout_dimension)];</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c"><div class="ttname"><a href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c">arm_compute::UNKNOWN</a></div><div class="ttdoc">Unknown CL kernel type. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_types_8h_source.xhtml#l00082">CLTypes.h:82</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a0b0eb3235749a2909dc5a101afe59a1b"><div class="ttname"><a href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond, msg)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00456">Error.h:456</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a1df15aed3ed531f442ecea2a131d65a4"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a1df15aed3ed531f442ecea2a131d65a4">arm_compute::graph::get_dimension_idx</a></div><div class="ttdeci">size_t get_dimension_idx(DataLayout data_layout, const DataLayoutDimension data_layout_dimension)</div><div class="ttdoc">Get index of a tensor&amp;#39;s given dimension depending on its layout. </div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_utils_8cpp_source.xhtml#l00148">Utils.cpp:148</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad17fa352dabb4482cb996a9f8f7f3ba3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad17fa352dabb4482cb996a9f8f7f3ba3">&#9670;&nbsp;</a></span>get_driver_nodes()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> &gt; get_driver_nodes </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the list of driver nodes of a given node. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to find the driver node of</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A list with the driver node of a given node </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00197">197</a> of file <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml">Utils.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00214">Graph::edge()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00113">INode::graph()</a>, and <a class="el" href="_i_node_8cpp_source.xhtml#l00128">INode::input_edges()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00266">arm_compute::graph::detail::fuse_pad_with_convolution()</a>, and <a class="el" href="arm__compute_2graph_2_utils_8h_source.xhtml#l00062">set_tensor_accessor()</a>.</p>
<div class="fragment"><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;{</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    std::vector&lt;NodeIdxPair&gt; driver_nodes;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="keyword">const</span> Graph *g = node.graph();</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(g == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;input_edge_id : node.input_edges())</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    {</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        <span class="keyword">auto</span> input_edge = g-&gt;edge(input_edge_id);</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        <span class="keywordflow">if</span>(input_edge != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        {</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input_edge-&gt;producer() == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            driver_nodes.push_back({ input_edge-&gt;producer_id(), input_edge-&gt;producer_idx() });</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        }</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    }</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="keywordflow">return</span> driver_nodes;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a634230f98a5918f214e47d913c452d3b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a634230f98a5918f214e47d913c452d3b">&#9670;&nbsp;</a></span>get_driving_nodes()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> &gt; get_driving_nodes </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the list of driving nodes of a given node. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>Node to find the driving node of</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A list with the driving node of a given node </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00177">177</a> of file <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml">Utils.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00214">Graph::edge()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00113">INode::graph()</a>, and <a class="el" href="_i_node_8cpp_source.xhtml#l00133">INode::output_edges()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_grouped_convolution_mutator_8cpp_source.xhtml#l00113">GroupedConvolutionMutator::mutate()</a>, <a class="el" href="arm__compute_2graph_2_utils_8h_source.xhtml#l00062">set_tensor_accessor()</a>, and <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00048">arm_compute::graph::detail::transfer_driving_nodes_and_remove_old_node()</a>.</p>
<div class="fragment"><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;{</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    std::vector&lt;NodeIdxPair&gt; driving_nodes;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="keyword">const</span> Graph *g = node.graph();</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(g == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;output_edge_id : node.output_edges())</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    {</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        <span class="keyword">auto</span> output_edge = g-&gt;edge(output_edge_id);</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        <span class="keywordflow">if</span>(output_edge != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        {</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output_edge-&gt;consumer() == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            driving_nodes.push_back({ output_edge-&gt;consumer_id(), output_edge-&gt;consumer_idx() });</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        }</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    }</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="keywordflow">return</span> driving_nodes;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ade2275ecfd6f344e3ec7086427863aa8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ade2275ecfd6f344e3ec7086427863aa8">&#9670;&nbsp;</a></span>get_tensor_descriptor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml">TensorDescriptor</a> arm_compute::graph::get_tensor_descriptor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a615af95e19b5d9f74d2760183566a9a3">TensorID</a>&#160;</td>
          <td class="paramname"><em>tid</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the tensor descriptor of a given tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class. ">Graph</a> that the tensor belongs to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tid</td><td><a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml" title="Tensor object. ">Tensor</a> ID</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml" title="Tensor object. ">Tensor</a> descriptor if tensor was found else empty descriptor </dd></dl>

<p class="definition">Definition at line <a class="el" href="arm__compute_2graph_2_utils_8h_source.xhtml#l00050">50</a> of file <a class="el" href="arm__compute_2graph_2_utils_8h_source.xhtml">Utils.h</a>.</p>

<p class="reference">References <a class="el" href="src_2graph_2_tensor_8cpp_source.xhtml#l00040">Tensor::desc()</a>, <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00066">tensor</a>, and <a class="el" href="_graph_8cpp_source.xhtml#l00224">Graph::tensor()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_builder_8cpp_source.xhtml#l00148">GraphBuilder::add_batch_normalization_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00219">GraphBuilder::add_convolution_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00276">GraphBuilder::add_deconvolution_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00332">GraphBuilder::add_depthwise_convolution_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00413">GraphBuilder::add_detection_post_process_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00468">GraphBuilder::add_fully_connected_layer()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00565">GraphBuilder::add_normalize_planar_yuv_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00680">GraphBuilder::add_scale_layer()</a>, and <a class="el" href="_graph_builder_8cpp_source.xhtml#l00735">GraphBuilder::add_yolo_node()</a>.</p>
<div class="fragment"><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;{</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#a2c0ee4eb5bed32d6fb8358d113995aa4af20fc369b14cb5d40e695dab98bcb742">Tensor</a> *<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> = g.tensor(tid);</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordflow">return</span> (tensor != <span class="keyword">nullptr</span>) ? tensor-&gt;desc() : TensorDescriptor();</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1detail_xhtml_a2c0ee4eb5bed32d6fb8358d113995aa4af20fc369b14cb5d40e695dab98bcb742"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#a2c0ee4eb5bed32d6fb8358d113995aa4af20fc369b14cb5d40e695dab98bcb742">arm_compute::detail::ObjectType::Tensor</a></div></div>
<div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00066">ClWorkloadRuntime.cpp:66</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa3f58c337d128b2d530251c422b05f69"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa3f58c337d128b2d530251c422b05f69">&#9670;&nbsp;</a></span>is_padding_in_height_or_width()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool is_padding_in_height_or_width </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> &amp;&#160;</td>
          <td class="paramname"><em>layout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#ac1a1b012674e0f1de071a611391828ad">PaddingList</a> &amp;&#160;</td>
          <td class="paramname"><em>padding_list</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if padding is in height and/or width dimensions. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">layout</td><td>Data layout of the tensor </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">padding_list</td><td>List of padding pairs </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_mutator_utils_8cpp_source.xhtml#l00030">30</a> of file <a class="el" href="_mutator_utils_8cpp_source.xhtml">MutatorUtils.cpp</a>.</p>

<p class="reference">References <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00148">get_dimension_idx()</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">arm_compute::HEIGHT</a>, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">arm_compute::NCHW</a>, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">arm_compute::NHWC</a>, and <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">arm_compute::WIDTH</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_2_pad_layer_8cpp_source.xhtml#l00115">arm_compute::test::validation::DATA_TEST_CASE()</a>, and <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00266">arm_compute::graph::detail::fuse_pad_with_convolution()</a>.</p>
<div class="fragment"><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;{</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <span class="keywordflow">if</span>(layout == DataLayout::NCHW || layout == DataLayout::NHWC)</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    {</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> height_index = <a class="code" href="namespacearm__compute_1_1graph.xhtml#a1df15aed3ed531f442ecea2a131d65a4">get_dimension_idx</a>(layout, DataLayoutDimension::HEIGHT);</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> width_index  = <a class="code" href="namespacearm__compute_1_1graph.xhtml#a1df15aed3ed531f442ecea2a131d65a4">get_dimension_idx</a>(layout, DataLayoutDimension::WIDTH);</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; padding_list.size(); ++i)</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        {</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;            <span class="keywordflow">if</span>(i != height_index &amp;&amp; i != width_index &amp;&amp; padding_list[i] != <a class="code" href="namespacearm__compute.xhtml#a669b5d3c5994f9ae3be31df9a1014297">PaddingInfo</a>(0, 0))</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;            {</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;                <span class="comment">// if the index is not either height or width, don&#39;t fuse</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;            }</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        }</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    }</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_a669b5d3c5994f9ae3be31df9a1014297"><div class="ttname"><a href="namespacearm__compute.xhtml#a669b5d3c5994f9ae3be31df9a1014297">arm_compute::PaddingInfo</a></div><div class="ttdeci">std::pair&lt; uint32_t, uint32_t &gt; PaddingInfo</div><div class="ttdoc">Padding information as a pair of unsigned int start/end. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00452">Types.h:452</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a1df15aed3ed531f442ecea2a131d65a4"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a1df15aed3ed531f442ecea2a131d65a4">arm_compute::graph::get_dimension_idx</a></div><div class="ttdeci">size_t get_dimension_idx(DataLayout data_layout, const DataLayoutDimension data_layout_dimension)</div><div class="ttdoc">Get index of a tensor&amp;#39;s given dimension depending on its layout. </div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_utils_8cpp_source.xhtml#l00148">Utils.cpp:148</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a6fd498c55b126dc3f078d38e8528effb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6fd498c55b126dc3f078d38e8528effb">&#9670;&nbsp;</a></span>is_target_supported()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool is_target_supported </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a>&#160;</td>
          <td class="paramname"><em>target</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Checks if a specific target is supported. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">target</td><td>Target to check</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if target is support else false </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00034">34</a> of file <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml">Utils.cpp</a>.</p>

<p class="reference">References <a class="el" href="_backend_registry_8cpp_source.xhtml#l00059">BackendRegistry::contains()</a>, <a class="el" href="_backend_registry_8cpp_source.xhtml#l00045">BackendRegistry::find_backend()</a>, <a class="el" href="_backend_registry_8cpp_source.xhtml#l00039">BackendRegistry::get()</a>, and <a class="el" href="classarm__compute_1_1graph_1_1backends_1_1_i_device_backend.xhtml#aba671d383a01749f55e49d5750646c05">IDeviceBackend::is_backend_supported()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_manager_8cpp_source.xhtml#l00047">GraphManager::finalize_graph()</a>, <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00039">get_default_target()</a>, <a class="el" href="_depth_concat_sub_tensor_mutator_8cpp_source.xhtml#l00050">DepthConcatSubTensorMutator::mutate()</a>, <a class="el" href="_split_layer_sub_tensor_mutator_8cpp_source.xhtml#l00050">SplitLayerSubTensorMutator::mutate()</a>, and <a class="el" href="arm__compute_2graph_2_utils_8h_source.xhtml#l00062">set_tensor_accessor()</a>.</p>
<div class="fragment"><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keywordflow">return</span> backends::BackendRegistry::get().contains(target) &amp;&amp; backends::BackendRegistry::get().find_backend(target)-&gt;is_backend_supported();</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="adaf571380533c75338da47ba3a68c199"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adaf571380533c75338da47ba3a68c199">&#9670;&nbsp;</a></span>is_utility_node()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::graph::is_utility_node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> *&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="arm__compute_2graph_2_utils_8h_source.xhtml#l00037">37</a> of file <a class="el" href="arm__compute_2graph_2_utils_8h_source.xhtml">Utils.h</a>.</p>

<p class="reference">References <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a415d76e29ed6d61c9f71cc6f7cf3f656">PrintLayer</a>, and <a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a6b2d83e561886647467f86c20ce39bec">INode::type()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00133">arm_compute::graph::detail::configure_all_nodes()</a>.</p>
<div class="fragment"><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    std::set&lt;NodeType&gt; utility_node_types = { NodeType::PrintLayer };</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keywordflow">return</span> utility_node_types.find(node-&gt;type()) != utility_node_types.end();</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a7e067080ce8169b2f8be64c190edab9e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7e067080ce8169b2f8be64c190edab9e">&#9670;&nbsp;</a></span>operator<<() <span class="overload">[1/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::graph::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a> &amp;&#160;</td>
          <td class="paramname"><em>target</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the Target. </p>

<p class="definition">Definition at line <a class="el" href="arm__compute_2graph_2_type_printer_8h_source.xhtml#l00038">38</a> of file <a class="el" href="arm__compute_2graph_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00352">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35da5bc574a47246f122016869b32a6aa6f0">CL</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35da6c83d364c26a490210700ad9ac6ad236">CLVK</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35dacaf162e9233294cadf62d2a71a14ca09">NEON</a>, and <a class="el" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35da1c04cc3823d476c3017238679a0fdf52">UNSPECIFIED</a>.</p>
<div class="fragment"><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keywordflow">switch</span>(target)</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    {</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        <span class="keywordflow">case</span> Target::UNSPECIFIED:</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;UNSPECIFIED&quot;</span>;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <span class="keywordflow">case</span> Target::NEON:</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;Neon&quot;</span>;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <span class="keywordflow">case</span> Target::CL:</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;CL&quot;</span>;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <span class="keywordflow">case</span> Target::CLVK:</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;CLVK&quot;</span>;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    }</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a108f26d15227710831dbdb30e40e608e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a108f26d15227710831dbdb30e40e608e">&#9670;&nbsp;</a></span>operator<<() <span class="overload">[2/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::graph::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16">NodeType</a> &amp;&#160;</td>
          <td class="paramname"><em>node_type</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="arm__compute_2graph_2_type_printer_8h_source.xhtml#l00061">61</a> of file <a class="el" href="arm__compute_2graph_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>

<p class="reference">References <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a041485a3394541feee82a34d40249d70">ActivationLayer</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a8b64190e5c453f3ab8003e15a32042bb">ArgMinMaxLayer</a>, <a class="el" href="_error_8h_source.xhtml#l00352">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16ad0146d2051fad860923cf31f7e00a732">BatchNormalizationLayer</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16aab5cbd6c92ca9262ddd46d573bd2d2a5">BoundingBoxTransformLayer</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16af5505217824e3e9e8000ef0d63360158">ChannelShuffleLayer</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a5c436066fbad2e22ccab352c0d554809">ConcatenateLayer</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a79ceee9f8e3c1f0cc74223e05d2448bf">Const</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16aa252659b59a03bc61e5ec827ab4448b7">ConvolutionLayer</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16ac814c26a7c5317e2a2f58fe0e5a0d410">DeconvolutionLayer</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a2c77fe48e06dc15838adafc96eb07809">DepthToSpaceLayer</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a5b7955cb74be105cc7e044a370d4fce8">DepthwiseConvolutionLayer</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a6dc16ed47490b9162258248a67a28149">DequantizationLayer</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16ae1b0b91c003f871664a4e289977ef02e">DetectionOutputLayer</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a0e5a1913b18dbe59dcbcf4e85148802d">DetectionPostProcessLayer</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16abcf036b6f33e182d4705f4f5b1af13ac">Dummy</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16ad1b3837fe6a80018e7002c7f7905439d">EltwiseLayer</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16ad87240455a60f188b358a370fe1a83a5">FlattenLayer</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a658061ff1dac70c02116fae6c044da1a">FullyConnectedLayer</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a6f89e5fc5edf43300199d6bc8f5088de">FusedConvolutionBatchNormalizationLayer</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a8cb85de50d6c327c6d656865dd2d50ce">FusedConvolutionBatchNormalizationLayerWithPostOpsLayer</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16adae196145a8fa13b72810b57e3c11f97">FusedConvolutionWithPostOp</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a5955c7816e24dbfab34403cca9a133fc">FusedDepthwiseConvolutionBatchNormalizationLayer</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a728d2f08dedae314e27241a256449973">GenerateProposalsLayer</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a324118a6721dd6b8a9b9f4e327df2bf5">Input</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16ae680fa991b49d90435920390522e4bfa">L2NormalizeLayer</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a227ecc6e858c8d1f61664f1967173bea">NormalizationLayer</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a7844e69eea1226939211d12a975aa512">NormalizePlanarYUVLayer</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a29c2c02a361c9d7028472e5d92cd4a54">Output</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a979ac8e70d367e1e442d76f00b6f0ad1">PadLayer</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16aa84a001cb23ac473e7aae73a9eaf369a">PermuteLayer</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16aea068ae5aae640d018c4300bc7619575">PoolingLayer</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a44da30946f36dcb01ca8be92a1420536">PReluLayer</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a415d76e29ed6d61c9f71cc6f7cf3f656">PrintLayer</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a77329845031ba38f828a884f40beb69c">PriorBoxLayer</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a399e260d5d6886e9917d4313cd05f6fe">QuantizationLayer</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a7315a114ff1ceed2eb2410f0cb4bfd04">ReductionOperationLayer</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16af119c4b7a889a65e39ef53786dce0c84">ReorgLayer</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a1ee0d44744be1e17e38ad5a4e9dcf5dd">ReshapeLayer</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16aea2ded20d74b2bf7921551363737777e">ResizeLayer</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a9724a5f06f63ab3de9e8af69d20069fb">ROIAlignLayer</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16ad6aa9a2c35e0cb2a5777860d8fd1084e">SliceLayer</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a4a9567bc4a6c28a527c973010eaf9a25">SoftmaxLayer</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16af2ee14b628c0a45e1682de8f33983dc1">SplitLayer</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a6a1f3bd45caa35d2537fcacb4460920e">StackLayer</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16ad38a8512f70410f9f3b55e58951a7e7e">StridedSliceLayer</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a12bb7868a77981ec3c64e03574f36566">UnaryEltwiseLayer</a>, and <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a1634ae65e32998568feae7e5e8e3bb65">UpsampleLayer</a>.</p>
<div class="fragment"><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;{</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keywordflow">switch</span>(node_type)</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    {</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="keywordflow">case</span> NodeType::ActivationLayer:</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;ActivationLayer&quot;</span>;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keywordflow">case</span> NodeType::ArgMinMaxLayer:</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;ArgMinMaxLayer&quot;</span>;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keywordflow">case</span> NodeType::BatchNormalizationLayer:</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;BatchNormalizationLayer&quot;</span>;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="keywordflow">case</span> NodeType::BoundingBoxTransformLayer:</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;BoundingBoxTransformLayer&quot;</span>;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="keywordflow">case</span> NodeType::ChannelShuffleLayer:</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;ChannelShuffleLayer&quot;</span>;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <span class="keywordflow">case</span> NodeType::ConcatenateLayer:</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;ConcatenateLayer&quot;</span>;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <span class="keywordflow">case</span> NodeType::ConvolutionLayer:</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;ConvolutionLayer&quot;</span>;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="keywordflow">case</span> NodeType::DeconvolutionLayer:</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;DeconvolutionLayer&quot;</span>;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <span class="keywordflow">case</span> NodeType::DepthToSpaceLayer:</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;DepthToSpaceLayer&quot;</span>;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="keywordflow">case</span> NodeType::DequantizationLayer:</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;DequantizationLayer&quot;</span>;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="keywordflow">case</span> NodeType::DetectionOutputLayer:</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;DetectionOutputLayer&quot;</span>;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        <span class="keywordflow">case</span> NodeType::DetectionPostProcessLayer:</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;DetectionPostProcessLayer&quot;</span>;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <span class="keywordflow">case</span> NodeType::DepthwiseConvolutionLayer:</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;DepthwiseConvolutionLayer&quot;</span>;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="keywordflow">case</span> NodeType::EltwiseLayer:</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;EltwiseLayer&quot;</span>;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        <span class="keywordflow">case</span> NodeType::UnaryEltwiseLayer:</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;UnaryEltwiseLayer&quot;</span>;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <span class="keywordflow">case</span> NodeType::FlattenLayer:</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;FlattenLayer&quot;</span>;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="keywordflow">case</span> NodeType::FullyConnectedLayer:</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;FullyConnectedLayer&quot;</span>;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        <span class="keywordflow">case</span> NodeType::FusedConvolutionBatchNormalizationLayer:</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;FusedConvolutionBatchNormalizationLayer&quot;</span>;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <span class="keywordflow">case</span> NodeType::FusedConvolutionBatchNormalizationLayerWithPostOpsLayer:</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;FusedConvolutionBatchNormalizationLayerWithPostOpsLayer&quot;</span>;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        <span class="keywordflow">case</span> NodeType::FusedConvolutionWithPostOp:</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;FusedConvolutionWithPostOp&quot;</span>;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <span class="keywordflow">case</span> NodeType::FusedDepthwiseConvolutionBatchNormalizationLayer:</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;FusedDepthwiseConvolutionBatchNormalizationLayer&quot;</span>;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        <span class="keywordflow">case</span> NodeType::GenerateProposalsLayer:</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;GenerateProposalsLayer&quot;</span>;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        <span class="keywordflow">case</span> NodeType::L2NormalizeLayer:</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;L2NormalizeLayer&quot;</span>;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <span class="keywordflow">case</span> NodeType::NormalizationLayer:</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;NormalizationLayer&quot;</span>;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="keywordflow">case</span> NodeType::NormalizePlanarYUVLayer:</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;NormalizePlanarYUVLayer&quot;</span>;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="keywordflow">case</span> NodeType::PadLayer:</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;PadLayer&quot;</span>;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <span class="keywordflow">case</span> NodeType::PermuteLayer:</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;PermuteLayer&quot;</span>;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        <span class="keywordflow">case</span> NodeType::PoolingLayer:</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;PoolingLayer&quot;</span>;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <span class="keywordflow">case</span> NodeType::PReluLayer:</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;PReluLayer&quot;</span>;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <span class="keywordflow">case</span> NodeType::PrintLayer:</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;PrintLayer&quot;</span>;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <span class="keywordflow">case</span> NodeType::PriorBoxLayer:</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;PriorBoxLayer&quot;</span>;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        <span class="keywordflow">case</span> NodeType::QuantizationLayer:</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;QuantizationLayer&quot;</span>;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        <span class="keywordflow">case</span> NodeType::ReductionOperationLayer:</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;ReductionOperationLayer&quot;</span>;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        <span class="keywordflow">case</span> NodeType::ReorgLayer:</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;ReorgLayer&quot;</span>;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <span class="keywordflow">case</span> NodeType::ReshapeLayer:</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;ReshapeLayer&quot;</span>;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <span class="keywordflow">case</span> NodeType::ResizeLayer:</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;ResizeLayer&quot;</span>;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <span class="keywordflow">case</span> NodeType::ROIAlignLayer:</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;ROIAlignLayer&quot;</span>;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        <span class="keywordflow">case</span> NodeType::SoftmaxLayer:</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;SoftmaxLayer&quot;</span>;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="keywordflow">case</span> NodeType::SliceLayer:</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;SliceLayer&quot;</span>;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        <span class="keywordflow">case</span> NodeType::SplitLayer:</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;SplitLayer&quot;</span>;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        <span class="keywordflow">case</span> NodeType::StackLayer:</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;StackLayer&quot;</span>;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <span class="keywordflow">case</span> NodeType::StridedSliceLayer:</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;StridedSliceLayer&quot;</span>;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        <span class="keywordflow">case</span> NodeType::UpsampleLayer:</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;UpsampleLayer&quot;</span>;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        <span class="keywordflow">case</span> NodeType::Input:</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;Input&quot;</span>;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        <span class="keywordflow">case</span> NodeType::Output:</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;Output&quot;</span>;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        <span class="keywordflow">case</span> NodeType::Const:</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;Const&quot;</span>;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        <span class="keywordflow">case</span> NodeType::Dummy:</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;Dummy&quot;</span>;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    }</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="abcd88ed51472e534decef274fb32bcaa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abcd88ed51472e534decef274fb32bcaa">&#9670;&nbsp;</a></span>operator<<() <span class="overload">[3/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::graph::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4">EltwiseOperation</a> &amp;&#160;</td>
          <td class="paramname"><em>eltwise_op</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the EltwiseOperation type. </p>

<p class="definition">Definition at line <a class="el" href="arm__compute_2graph_2_type_printer_8h_source.xhtml#l00214">214</a> of file <a class="el" href="arm__compute_2graph_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>

<p class="reference">References <a class="el" href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4aec211f7c20af43e742bf2570c3cb84f9">Add</a>, <a class="el" href="_error_8h_source.xhtml#l00352">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4a43d11850893d2fe84a1e618121c1cc0a">Div</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4a62b6d55816cf737bfc6f42e60df1a3f2">Mul</a>, and <a class="el" href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4ae80155eceb940c89e2de63ad05868db2">Sub</a>.</p>
<div class="fragment"><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;{</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="keywordflow">switch</span>(eltwise_op)</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    {</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        <span class="keywordflow">case</span> EltwiseOperation::Add:</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;Add&quot;</span>;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        <span class="keywordflow">case</span> EltwiseOperation::Mul:</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;Mul&quot;</span>;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        <span class="keywordflow">case</span> EltwiseOperation::Sub:</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;Sub&quot;</span>;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        <span class="keywordflow">case</span> EltwiseOperation::Div:</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;Div&quot;</span>;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    }</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab90b7a7fcc12792b0b6cb6486bb383dd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab90b7a7fcc12792b0b6cb6486bb383dd">&#9670;&nbsp;</a></span>operator<<() <span class="overload">[4/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::graph::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517d">ConvolutionMethod</a> &amp;&#160;</td>
          <td class="paramname"><em>method</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the ConvolutionMethod type. </p>

<p class="definition">Definition at line <a class="el" href="arm__compute_2graph_2_type_printer_8h_source.xhtml#l00238">238</a> of file <a class="el" href="arm__compute_2graph_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00352">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517da7a1920d61156abc05a60135aefe8bc67">Default</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517dafd1dd0c603be8170f9eae0be9f2f6afb">Direct</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517da5174aac3927faa9ee34befb7fc87a9e3">GEMM</a>, and <a class="el" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517da09db1dd1078ec6bdbe2722b4558e578f">Winograd</a>.</p>
<div class="fragment"><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;{</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="keywordflow">switch</span>(method)</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    {</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        <span class="keywordflow">case</span> ConvolutionMethod::Default:</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;Default&quot;</span>;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        <span class="keywordflow">case</span> ConvolutionMethod::Direct:</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;Direct&quot;</span>;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea3a3719691bd6b7da7ff9e45d54fd32ba">ConvolutionMethod::GEMM</a>:</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;GEMM&quot;</span>;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        <span class="keywordflow">case</span> ConvolutionMethod::Winograd:</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;Winograd&quot;</span>;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    }</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a6df16a1b3b5af590a14f55e983d3428ea3a3719691bd6b7da7ff9e45d54fd32ba"><div class="ttname"><a href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea3a3719691bd6b7da7ff9e45d54fd32ba">arm_compute::GEMM</a></div><div class="ttdoc">GEMM CL kernel type. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_types_8h_source.xhtml#l00086">CLTypes.h:86</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a6c721497fdfc121b38630f89b625ac39"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6c721497fdfc121b38630f89b625ac39">&#9670;&nbsp;</a></span>operator<<() <span class="overload">[5/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::graph::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11">FastMathHint</a> &amp;&#160;</td>
          <td class="paramname"><em>hint</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the FastMathHint type. </p>

<p class="definition">Definition at line <a class="el" href="arm__compute_2graph_2_type_printer_8h_source.xhtml#l00262">262</a> of file <a class="el" href="arm__compute_2graph_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00352">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11ab9f5c797ebbf55adccdd8539a65a0241">Disabled</a>, and <a class="el" href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11a00d23a76e43b46dae9ec7aa9dcbebb32">Enabled</a>.</p>
<div class="fragment"><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;{</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    <span class="keywordflow">switch</span>(hint)</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    {</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        <span class="keywordflow">case</span> FastMathHint::Enabled:</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;Enabled&quot;</span>;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        <span class="keywordflow">case</span> FastMathHint::Disabled:</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;Disabled&quot;</span>;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    }</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a36f71403d9328a10245a6d9d62518527"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a36f71403d9328a10245a6d9d62518527">&#9670;&nbsp;</a></span>operator<<() <span class="overload">[6/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::ostream&amp; arm_compute::graph::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">::std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute_1_1graph.xhtml#a75ce9b1baad4303a53124d6f0795821f">DepthwiseConvolutionMethod</a> &amp;&#160;</td>
          <td class="paramname"><em>method</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Formatted output of the DepthwiseConvolutionMethod type. </p>

<p class="definition">Definition at line <a class="el" href="arm__compute_2graph_2_type_printer_8h_source.xhtml#l00280">280</a> of file <a class="el" href="arm__compute_2graph_2_type_printer_8h_source.xhtml">TypePrinter.h</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00352">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a75ce9b1baad4303a53124d6f0795821fa7a1920d61156abc05a60135aefe8bc67">Default</a>, and <a class="el" href="namespacearm__compute_1_1graph.xhtml#a75ce9b1baad4303a53124d6f0795821fa3bb7b7f3f021a006e65111fc1d226938">Optimized3x3</a>.</p>
<div class="fragment"><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;{</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <span class="keywordflow">switch</span>(method)</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    {</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        <span class="keywordflow">case</span> DepthwiseConvolutionMethod::Default:</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;DEFAULT&quot;</span>;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        <span class="keywordflow">case</span> DepthwiseConvolutionMethod::Optimized3x3:</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;Optimized3x3&quot;</span>;</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    }</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a81a73c1d68104f16b1d2f63e412b06be"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a81a73c1d68104f16b1d2f63e412b06be">&#9670;&nbsp;</a></span>operator>>() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::istream&amp; arm_compute::graph::operator&gt;&gt; </td>
          <td>(</td>
          <td class="paramtype">::std::istream &amp;&#160;</td>
          <td class="paramname"><em>stream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a> &amp;&#160;</td>
          <td class="paramname"><em>target</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Input Stream operator for <a class="el" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">stream</td><td>Stream to parse </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">target</td><td>Output target</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Updated stream </dd></dl>

<p class="definition">Definition at line <a class="el" href="_type_loader_8h_source.xhtml#l00073">73</a> of file <a class="el" href="_type_loader_8h_source.xhtml">TypeLoader.h</a>.</p>

<p class="reference">References <a class="el" href="_type_loader_8cpp_source.xhtml#l00080">Convolution_method_from_name()</a>, and <a class="el" href="_type_loader_8cpp_source.xhtml#l00056">target_from_name()</a>.</p>
<div class="fragment"><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;{</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    std::string value;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    stream &gt;&gt; value;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    target = <a class="code" href="namespacearm__compute_1_1graph.xhtml#adcd882fc459bcf59d5e155c73e410ff9">target_from_name</a>(value);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordflow">return</span> stream;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1graph_xhtml_adcd882fc459bcf59d5e155c73e410ff9"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#adcd882fc459bcf59d5e155c73e410ff9">arm_compute::graph::target_from_name</a></div><div class="ttdeci">Target target_from_name(const std::string &amp;name)</div><div class="ttdoc">Converts a string to a strong types enumeration Target. </div><div class="ttdef"><b>Definition:</b> <a href="_type_loader_8cpp_source.xhtml#l00056">TypeLoader.cpp:56</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae8f190277bdf7c7e97dbffb4d42cc13f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae8f190277bdf7c7e97dbffb4d42cc13f">&#9670;&nbsp;</a></span>operator>>() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::istream&amp; arm_compute::graph::operator&gt;&gt; </td>
          <td>(</td>
          <td class="paramtype">::std::istream &amp;&#160;</td>
          <td class="paramname"><em>stream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517d">ConvolutionMethod</a> &amp;&#160;</td>
          <td class="paramname"><em>target</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Input Stream operator for <a class="el" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517d">ConvolutionMethod</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">stream</td><td>Stream to parse </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">target</td><td>Output target</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Updated stream </dd></dl>

<p class="definition">Definition at line <a class="el" href="_type_loader_8h_source.xhtml#l00096">96</a> of file <a class="el" href="_type_loader_8h_source.xhtml">TypeLoader.h</a>.</p>

<p class="reference">References <a class="el" href="_type_loader_8cpp_source.xhtml#l00080">Convolution_method_from_name()</a>, and <a class="el" href="_type_loader_8cpp_source.xhtml#l00105">depthwise_convolution_method_from_name()</a>.</p>
<div class="fragment"><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;{</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    std::string value;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    stream &gt;&gt; value;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    target = <a class="code" href="namespacearm__compute_1_1graph.xhtml#af5bf30d1d655abfcb8b0175c5b161a95">Convolution_method_from_name</a>(value);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keywordflow">return</span> stream;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1graph_xhtml_af5bf30d1d655abfcb8b0175c5b161a95"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#af5bf30d1d655abfcb8b0175c5b161a95">arm_compute::graph::Convolution_method_from_name</a></div><div class="ttdeci">ConvolutionMethod Convolution_method_from_name(const std::string &amp;name)</div><div class="ttdoc">Converts a string to a strong types enumeration ConvolutionMethod. </div><div class="ttdef"><b>Definition:</b> <a href="_type_loader_8cpp_source.xhtml#l00080">TypeLoader.cpp:80</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a801203ab1fe36fc780b7b272c03beb6b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a801203ab1fe36fc780b7b272c03beb6b">&#9670;&nbsp;</a></span>operator>>() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">inline ::std::istream&amp; arm_compute::graph::operator&gt;&gt; </td>
          <td>(</td>
          <td class="paramtype">::std::istream &amp;&#160;</td>
          <td class="paramname"><em>stream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a75ce9b1baad4303a53124d6f0795821f">DepthwiseConvolutionMethod</a> &amp;&#160;</td>
          <td class="paramname"><em>target</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Input Stream operator for <a class="el" href="namespacearm__compute_1_1graph.xhtml#a75ce9b1baad4303a53124d6f0795821f">DepthwiseConvolutionMethod</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">stream</td><td>Stream to parse </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">target</td><td>Output target</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Updated stream </dd></dl>

<p class="definition">Definition at line <a class="el" href="_type_loader_8h_source.xhtml#l00119">119</a> of file <a class="el" href="_type_loader_8h_source.xhtml">TypeLoader.h</a>.</p>

<p class="reference">References <a class="el" href="_type_loader_8cpp_source.xhtml#l00105">depthwise_convolution_method_from_name()</a>.</p>
<div class="fragment"><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;{</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    std::string value;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    stream &gt;&gt; value;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    target = <a class="code" href="namespacearm__compute_1_1graph.xhtml#a6dbaf2e51ef91725f852766f923fd5a6">depthwise_convolution_method_from_name</a>(value);</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keywordflow">return</span> stream;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a6dbaf2e51ef91725f852766f923fd5a6"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a6dbaf2e51ef91725f852766f923fd5a6">arm_compute::graph::depthwise_convolution_method_from_name</a></div><div class="ttdeci">DepthwiseConvolutionMethod depthwise_convolution_method_from_name(const std::string &amp;name)</div><div class="ttdoc">Converts a string to a strong types enumeration DepthwiseConvolutionMethod. </div><div class="ttdef"><b>Definition:</b> <a href="_type_loader_8cpp_source.xhtml#l00105">TypeLoader.cpp:105</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a9562c1c1399af2f10714a7d901e19311"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9562c1c1399af2f10714a7d901e19311">&#9670;&nbsp;</a></span>release_default_graph_context()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void release_default_graph_context </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;&#160;</td>
          <td class="paramname"><em>ctx</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Default releases the graph context if not done manually. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">ctx</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class. ">Graph</a> Context </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00108">108</a> of file <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml">Utils.cpp</a>.</p>

<p class="reference">References <a class="el" href="_backend_registry_8cpp_source.xhtml#l00039">BackendRegistry::get()</a>.</p>

<p class="reference">Referenced by <a class="el" href="arm__compute_2graph_2_utils_8h_source.xhtml#l00062">set_tensor_accessor()</a>, and <a class="el" href="_graph_context_8cpp_source.xhtml#l00039">GraphContext::~GraphContext()</a>.</p>
<div class="fragment"><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;{</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;backend : backends::BackendRegistry::get().backends())</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    {</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <span class="keywordflow">if</span>(backend.second-&gt;is_backend_supported())</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        {</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            backend.second-&gt;release_backend_context(ctx);</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        }</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    }</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a4ebedbbf720dd9a5bd14584f723b056e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4ebedbbf720dd9a5bd14584f723b056e">&#9670;&nbsp;</a></span>set_tensor_accessor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> arm_compute::graph::set_tensor_accessor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml">Tensor</a> *&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1graph_1_1_i_tensor_accessor.xhtml">ITensorAccessor</a> &gt;&#160;</td>
          <td class="paramname"><em>accessor</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets an accessor on a given tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td><a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml" title="Tensor object. ">Tensor</a> to set the accessor to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">accessor</td><td>Accessor to set</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if accessor was set else false </dd></dl>

<p class="definition">Definition at line <a class="el" href="arm__compute_2graph_2_utils_8h_source.xhtml#l00062">62</a> of file <a class="el" href="arm__compute_2graph_2_utils_8h_source.xhtml">Utils.h</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00296">ARM_COMPUTE_RETURN_ERROR_ON</a>, <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00217">configure_tensor()</a>, <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00073">create_default_pass_manager()</a>, <a class="el" href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00406">arm_compute::test::validation::data_layout</a>, <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00052">force_target_to_graph()</a>, <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00039">get_default_target()</a>, <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00148">get_dimension_idx()</a>, <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00142">get_dimension_size()</a>, <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00197">get_driver_nodes()</a>, <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00177">get_driving_nodes()</a>, <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00034">is_target_supported()</a>, <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00108">release_default_graph_context()</a>, <a class="el" href="src_2graph_2_tensor_8cpp_source.xhtml#l00060">Tensor::set_accessor()</a>, <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00130">setup_requested_backend_context()</a>, <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00119">sync_backends()</a>, and <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00066">tensor</a>.</p>
<div class="fragment"><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;{</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;set_accessor(std::move(accessor));</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keywordflow">return</span> Status{};</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a206d6e247e0957ac3dee45d27756fc25"><div class="ttname"><a href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true, an error is returned. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00296">Error.h:296</a></div></div>
<div class="ttc" id="_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00066">ClWorkloadRuntime.cpp:66</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aaef0102f19fc08d670766506b1a0b66e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaef0102f19fc08d670766506b1a0b66e">&#9670;&nbsp;</a></span>setup_requested_backend_context()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void setup_requested_backend_context </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;&#160;</td>
          <td class="paramname"><em>ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a>&#160;</td>
          <td class="paramname"><em>target</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Setups requested backend context if it exists, is supported and hasn't been initialized already. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">ctx</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class. ">Graph</a> Context. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">target</td><td>Target to setup the backend for. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00130">130</a> of file <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml">Utils.cpp</a>.</p>

<p class="reference">References <a class="el" href="_backend_registry_8cpp_source.xhtml#l00045">BackendRegistry::find_backend()</a>, <a class="el" href="_backend_registry_8cpp_source.xhtml#l00039">BackendRegistry::get()</a>, and <a class="el" href="classarm__compute_1_1graph_1_1backends_1_1_i_device_backend.xhtml#ad172b9815229e40cd25ad1c401d2a0e4">IDeviceBackend::setup_backend_context()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_manager_8cpp_source.xhtml#l00047">GraphManager::finalize_graph()</a>, and <a class="el" href="arm__compute_2graph_2_utils_8h_source.xhtml#l00062">set_tensor_accessor()</a>.</p>
<div class="fragment"><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;{</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="keywordflow">if</span>(backends::BackendRegistry::get().contains(target))</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    {</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> &amp;backend = backends::BackendRegistry::get().find_backend(target);</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <span class="keywordflow">if</span>(backend-&gt;is_backend_supported())</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        {</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            backend-&gt;setup_backend_context(ctx);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        }</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    }</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ae8f18192b411ffc62fdd293f908b4c78"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae8f18192b411ffc62fdd293f908b4c78">&#9670;&nbsp;</a></span>sync_backends()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sync_backends </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Synchronize kernels execution on the backends. </p>
<p>On GPU, this results in a blocking call waiting for all kernels to be completed. </p>

<p class="definition">Definition at line <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00119">119</a> of file <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml">Utils.cpp</a>.</p>

<p class="reference">References <a class="el" href="_backend_registry_8cpp_source.xhtml#l00039">BackendRegistry::get()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_execution_helpers_8cpp_source.xhtml#l00259">arm_compute::graph::detail::call_all_output_node_accessors()</a>, and <a class="el" href="arm__compute_2graph_2_utils_8h_source.xhtml#l00062">set_tensor_accessor()</a>.</p>
<div class="fragment"><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;{</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;backend : backends::BackendRegistry::get().backends())</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    {</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        <span class="keywordflow">if</span>(backend.second-&gt;backend_allocator())</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        {</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            backend.second-&gt;sync();</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        }</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    }</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="adcd882fc459bcf59d5e155c73e410ff9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adcd882fc459bcf59d5e155c73e410ff9">&#9670;&nbsp;</a></span>target_from_name()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a> target_from_name </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Converts a string to a strong types enumeration <a class="el" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">name</td><td>String to convert</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Converted Target enumeration </dd></dl>

<p class="definition">Definition at line <a class="el" href="_type_loader_8cpp_source.xhtml#l00056">56</a> of file <a class="el" href="_type_loader_8cpp_source.xhtml">TypeLoader.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35da5bc574a47246f122016869b32a6aa6f0">CL</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35da6c83d364c26a490210700ad9ac6ad236">CLVK</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35dacaf162e9233294cadf62d2a71a14ca09">NEON</a>, and <a class="el" href="_utility_8h_source.xhtml#l00206">arm_compute::utility::tolower()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_type_loader_8h_source.xhtml#l00048">arm_compute::operator&gt;&gt;()</a>, and <a class="el" href="_type_loader_8h_source.xhtml#l00073">operator&gt;&gt;()</a>.</p>
<div class="fragment"><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;{</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> std::map&lt;std::string, Target&gt; targets =</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    {</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        { <span class="stringliteral">&quot;neon&quot;</span>, Target::NEON },</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        { <span class="stringliteral">&quot;cl&quot;</span>, Target::CL },</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        { <span class="stringliteral">&quot;clvk&quot;</span>, Target::CLVK },</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    };</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_EXCEPTIONS_DISABLED</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keywordflow">try</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    {</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_EXCEPTIONS_DISABLED */</span><span class="preprocessor"></span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keywordflow">return</span> targets.at(<a class="code" href="namespacearm__compute_1_1utility.xhtml#abb96ad5c7071ec3a47ea5f07e817a636">arm_compute::utility::tolower</a>(<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a>));</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_EXCEPTIONS_DISABLED</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    }</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keywordflow">catch</span>(<span class="keyword">const</span> std::out_of_range &amp;)</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    {</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="keywordflow">throw</span> std::invalid_argument(<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a>);</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    }</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_EXCEPTIONS_DISABLED */</span><span class="preprocessor"></span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1utility_xhtml_abb96ad5c7071ec3a47ea5f07e817a636"><div class="ttname"><a href="namespacearm__compute_1_1utility.xhtml#abb96ad5c7071ec3a47ea5f07e817a636">arm_compute::utility::tolower</a></div><div class="ttdeci">std::string tolower(std::string string)</div><div class="ttdoc">Convert string to lower case. </div><div class="ttdef"><b>Definition:</b> <a href="_utility_8h_source.xhtml#l00206">Utility.h:206</a></div></div>
<div class="ttc" id="_n_e_batch_normalization_layer_kernel_8cpp_xhtml_a8f8f80d37794cde9472343e4487ba3eb"><div class="ttname"><a href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a></div><div class="ttdeci">const char * name</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00060">NEBatchNormalizationLayerKernel.cpp:60</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a id="a8e0b093eda0649ddbce791bb5076104f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8e0b093eda0649ddbce791bb5076104f">&#9670;&nbsp;</a></span>EmptyEdgeID</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="namespacearm__compute_1_1graph.xhtml#abba17a56bbf16c7cbc7acd4aa54abcea">EdgeID</a> EmptyEdgeID = std::numeric_limits&lt;<a class="el" href="namespacearm__compute_1_1graph.xhtml#abba17a56bbf16c7cbc7acd4aa54abcea">EdgeID</a>&gt;::max()</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00078">78</a> of file <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml">Types.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="_arg_min_max_layer_node_8cpp_source.xhtml#l00035">ArgMinMaxLayerNode::ArgMinMaxLayerNode()</a>, <a class="el" href="_batch_normalization_layer_node_8cpp_source.xhtml#l00034">BatchNormalizationLayerNode::BatchNormalizationLayerNode()</a>, <a class="el" href="_bounding_box_transform_layer_node_8cpp_source.xhtml#l00035">BoundingBoxTransformLayerNode::BoundingBoxTransformLayerNode()</a>, <a class="el" href="_channel_shuffle_layer_node_8cpp_source.xhtml#l00033">ChannelShuffleLayerNode::ChannelShuffleLayerNode()</a>, <a class="el" href="_concatenate_layer_node_8cpp_source.xhtml#l00037">ConcatenateLayerNode::ConcatenateLayerNode()</a>, <a class="el" href="_stack_layer_node_8cpp_source.xhtml#l00077">StackLayerNode::configure_output()</a>, <a class="el" href="_concatenate_layer_node_8cpp_source.xhtml#l00098">ConcatenateLayerNode::configure_output()</a>, <a class="el" href="_deconvolution_layer_node_8cpp_source.xhtml#l00035">DeconvolutionLayerNode::DeconvolutionLayerNode()</a>, <a class="el" href="_depth_to_space_layer_node_8cpp_source.xhtml#l00035">DepthToSpaceLayerNode::DepthToSpaceLayerNode()</a>, <a class="el" href="_dequantization_layer_node_8cpp_source.xhtml#l00035">DequantizationLayerNode::DequantizationLayerNode()</a>, <a class="el" href="_dummy_node_8cpp_source.xhtml#l00035">DummyNode::DummyNode()</a>, <a class="el" href="_eltwise_layer_node_8cpp_source.xhtml#l00034">EltwiseLayerNode::EltwiseLayerNode()</a>, <a class="el" href="_flatten_layer_node_8cpp_source.xhtml#l00033">FlattenLayerNode::FlattenLayerNode()</a>, <a class="el" href="_l2_normalize_layer_node_8cpp_source.xhtml#l00043">L2NormalizeLayerNode::L2NormalizeLayerNode()</a>, <a class="el" href="_normalize_planar_y_u_v_layer_node_8cpp_source.xhtml#l00034">NormalizePlanarYUVLayerNode::NormalizePlanarYUVLayerNode()</a>, <a class="el" href="_output_node_8cpp_source.xhtml#l00035">OutputNode::OutputNode()</a>, <a class="el" href="_pad_layer_node_8cpp_source.xhtml#l00035">PadLayerNode::PadLayerNode()</a>, <a class="el" href="_permute_layer_node_8cpp_source.xhtml#l00035">PermuteLayerNode::PermuteLayerNode()</a>, <a class="el" href="_p_relu_layer_node_8cpp_source.xhtml#l00033">PReluLayerNode::PReluLayerNode()</a>, <a class="el" href="_print_layer_node_8cpp_source.xhtml#l00035">PrintLayerNode::PrintLayerNode()</a>, <a class="el" href="_quantization_layer_node_8cpp_source.xhtml#l00038">QuantizationLayerNode::QuantizationLayerNode()</a>, <a class="el" href="_reduction_layer_node_8cpp_source.xhtml#l00035">ReductionLayerNode::ReductionLayerNode()</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00118">Graph::remove_connection()</a>, <a class="el" href="_reorg_layer_node_8cpp_source.xhtml#l00034">ReorgLayerNode::ReorgLayerNode()</a>, <a class="el" href="src_2graph_2nodes_2_reshape_layer_8cpp_source.xhtml#l00033">ReshapeLayerNode::ReshapeLayerNode()</a>, <a class="el" href="_resize_layer_node_8cpp_source.xhtml#l00034">ResizeLayerNode::ResizeLayerNode()</a>, <a class="el" href="_r_o_i_align_layer_node_8cpp_source.xhtml#l00036">ROIAlignLayerNode::ROIAlignLayerNode()</a>, <a class="el" href="_slice_layer_node_8cpp_source.xhtml#l00035">SliceLayerNode::SliceLayerNode()</a>, <a class="el" href="_softmax_layer_node_8cpp_source.xhtml#l00034">SoftmaxLayerNode::SoftmaxLayerNode()</a>, <a class="el" href="_split_layer_node_8cpp_source.xhtml#l00035">SplitLayerNode::SplitLayerNode()</a>, <a class="el" href="_stack_layer_node_8cpp_source.xhtml#l00038">StackLayerNode::StackLayerNode()</a>, and <a class="el" href="_eltwise_layer_node_8cpp_source.xhtml#l00118">UnaryEltwiseLayerNode::UnaryEltwiseLayerNode()</a>.</p>

</div>
</div>
<a id="aad3f5296ec88b9d552c109b04b89ad9f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aad3f5296ec88b9d552c109b04b89ad9f">&#9670;&nbsp;</a></span>EmptyNodeID</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> EmptyNodeID = std::numeric_limits&lt;<a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&gt;::max()</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Constant EdgeID specifying an equivalent of null edge. </p>

<p class="definition">Definition at line <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00076">76</a> of file <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml">Types.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_builder_8cpp_source.xhtml#l00148">GraphBuilder::add_batch_normalization_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00219">GraphBuilder::add_convolution_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00276">GraphBuilder::add_deconvolution_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00332">GraphBuilder::add_depthwise_convolution_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00468">GraphBuilder::add_fully_connected_layer()</a>, <a class="el" href="_topological_sort_8cpp_source.xhtml#l00046">arm_compute::graph::detail::all_inputs_are_visited()</a>, <a class="el" href="_topological_sort_8cpp_source.xhtml#l00072">bfs()</a>, <a class="el" href="_edge_8h_source.xhtml#l00076">Edge::consumer_id()</a>, <a class="el" href="_layers_8h_source.xhtml#l00342">ConcatLayer::create_layer()</a>, <a class="el" href="_layers_8h_source.xhtml#l00771">FullyConnectedLayer::create_layer()</a>, <a class="el" href="_layers_8h_source.xhtml#l01399">StackLayer::create_layer()</a>, <a class="el" href="_topological_sort_8cpp_source.xhtml#l00127">dfs()</a>, <a class="el" href="_i_stream_8h_source.xhtml#l00081">IStream::forward_tail()</a>, <a class="el" href="_grouped_convolution_mutator_8cpp_source.xhtml#l00113">GroupedConvolutionMutator::mutate()</a>, and <a class="el" href="_edge_8h_source.xhtml#l00068">Edge::producer_id()</a>.</p>

</div>
</div>
<a id="aa94938a3eb11fda4724c362c53c28f24"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa94938a3eb11fda4724c362c53c28f24">&#9670;&nbsp;</a></span>NullTensorID</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="namespacearm__compute_1_1graph.xhtml#a615af95e19b5d9f74d2760183566a9a3">TensorID</a> NullTensorID = std::numeric_limits&lt;<a class="el" href="namespacearm__compute_1_1graph.xhtml#a615af95e19b5d9f74d2760183566a9a3">TensorID</a>&gt;::max()</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Constant NodeID specifying an equivalent of null node. </p>

<p class="definition">Definition at line <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00074">74</a> of file <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml">Types.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_8cpp_source.xhtml#l00069">Graph::add_connection()</a>, <a class="el" href="_arg_min_max_layer_node_8cpp_source.xhtml#l00035">ArgMinMaxLayerNode::ArgMinMaxLayerNode()</a>, <a class="el" href="_batch_normalization_layer_node_8cpp_source.xhtml#l00034">BatchNormalizationLayerNode::BatchNormalizationLayerNode()</a>, <a class="el" href="_bounding_box_transform_layer_node_8cpp_source.xhtml#l00035">BoundingBoxTransformLayerNode::BoundingBoxTransformLayerNode()</a>, <a class="el" href="_channel_shuffle_layer_node_8cpp_source.xhtml#l00033">ChannelShuffleLayerNode::ChannelShuffleLayerNode()</a>, <a class="el" href="_concatenate_layer_node_8cpp_source.xhtml#l00037">ConcatenateLayerNode::ConcatenateLayerNode()</a>, <a class="el" href="_const_node_8cpp_source.xhtml#l00033">ConstNode::ConstNode()</a>, <a class="el" href="_deconvolution_layer_node_8cpp_source.xhtml#l00035">DeconvolutionLayerNode::DeconvolutionLayerNode()</a>, <a class="el" href="_depth_to_space_layer_node_8cpp_source.xhtml#l00035">DepthToSpaceLayerNode::DepthToSpaceLayerNode()</a>, <a class="el" href="_dequantization_layer_node_8cpp_source.xhtml#l00035">DequantizationLayerNode::DequantizationLayerNode()</a>, <a class="el" href="_dummy_node_8cpp_source.xhtml#l00035">DummyNode::DummyNode()</a>, <a class="el" href="_eltwise_layer_node_8cpp_source.xhtml#l00034">EltwiseLayerNode::EltwiseLayerNode()</a>, <a class="el" href="_flatten_layer_node_8cpp_source.xhtml#l00033">FlattenLayerNode::FlattenLayerNode()</a>, <a class="el" href="_flatten_layer_node_8cpp_source.xhtml#l00039">FlattenLayerNode::forward_descriptors()</a>, <a class="el" href="_normalize_planar_y_u_v_layer_node_8cpp_source.xhtml#l00040">NormalizePlanarYUVLayerNode::forward_descriptors()</a>, <a class="el" href="_p_relu_layer_node_8cpp_source.xhtml#l00039">PReluLayerNode::forward_descriptors()</a>, <a class="el" href="src_2graph_2nodes_2_reshape_layer_8cpp_source.xhtml#l00040">ReshapeLayerNode::forward_descriptors()</a>, <a class="el" href="_const_node_8cpp_source.xhtml#l00039">ConstNode::forward_descriptors()</a>, <a class="el" href="_input_node_8cpp_source.xhtml#l00039">InputNode::forward_descriptors()</a>, <a class="el" href="_dequantization_layer_node_8cpp_source.xhtml#l00041">DequantizationLayerNode::forward_descriptors()</a>, <a class="el" href="_softmax_layer_node_8cpp_source.xhtml#l00046">SoftmaxLayerNode::forward_descriptors()</a>, <a class="el" href="_normalization_layer_node_8cpp_source.xhtml#l00046">NormalizationLayerNode::forward_descriptors()</a>, <a class="el" href="_detection_post_process_layer_node_8cpp_source.xhtml#l00047">DetectionPostProcessLayerNode::forward_descriptors()</a>, <a class="el" href="_channel_shuffle_layer_node_8cpp_source.xhtml#l00045">ChannelShuffleLayerNode::forward_descriptors()</a>, <a class="el" href="_generate_proposals_layer_node_8cpp_source.xhtml#l00047">GenerateProposalsLayerNode::forward_descriptors()</a>, <a class="el" href="_bounding_box_transform_layer_node_8cpp_source.xhtml#l00047">BoundingBoxTransformLayerNode::forward_descriptors()</a>, <a class="el" href="_resize_layer_node_8cpp_source.xhtml#l00051">ResizeLayerNode::forward_descriptors()</a>, <a class="el" href="_permute_layer_node_8cpp_source.xhtml#l00047">PermuteLayerNode::forward_descriptors()</a>, <a class="el" href="_activation_layer_node_8cpp_source.xhtml#l00045">ActivationLayerNode::forward_descriptors()</a>, <a class="el" href="_dummy_node_8cpp_source.xhtml#l00042">DummyNode::forward_descriptors()</a>, <a class="el" href="_quantization_layer_node_8cpp_source.xhtml#l00047">QuantizationLayerNode::forward_descriptors()</a>, <a class="el" href="_r_o_i_align_layer_node_8cpp_source.xhtml#l00048">ROIAlignLayerNode::forward_descriptors()</a>, <a class="el" href="_depth_to_space_layer_node_8cpp_source.xhtml#l00061">DepthToSpaceLayerNode::forward_descriptors()</a>, <a class="el" href="_pad_layer_node_8cpp_source.xhtml#l00052">PadLayerNode::forward_descriptors()</a>, <a class="el" href="_reduction_layer_node_8cpp_source.xhtml#l00057">ReductionLayerNode::forward_descriptors()</a>, <a class="el" href="_reorg_layer_node_8cpp_source.xhtml#l00065">ReorgLayerNode::forward_descriptors()</a>, <a class="el" href="_detection_output_layer_node_8cpp_source.xhtml#l00059">DetectionOutputLayerNode::forward_descriptors()</a>, <a class="el" href="_pooling_layer_node_8cpp_source.xhtml#l00068">PoolingLayerNode::forward_descriptors()</a>, <a class="el" href="_prior_box_layer_node_8cpp_source.xhtml#l00062">PriorBoxLayerNode::forward_descriptors()</a>, <a class="el" href="_stack_layer_node_8cpp_source.xhtml#l00065">StackLayerNode::forward_descriptors()</a>, <a class="el" href="_batch_normalization_layer_node_8cpp_source.xhtml#l00056">BatchNormalizationLayerNode::forward_descriptors()</a>, <a class="el" href="_deconvolution_layer_node_8cpp_source.xhtml#l00070">DeconvolutionLayerNode::forward_descriptors()</a>, <a class="el" href="_arg_min_max_layer_node_8cpp_source.xhtml#l00057">ArgMinMaxLayerNode::forward_descriptors()</a>, <a class="el" href="_slice_layer_node_8cpp_source.xhtml#l00063">SliceLayerNode::forward_descriptors()</a>, <a class="el" href="_print_layer_node_8cpp_source.xhtml#l00057">PrintLayerNode::forward_descriptors()</a>, <a class="el" href="_l2_normalize_layer_node_8cpp_source.xhtml#l00050">L2NormalizeLayerNode::forward_descriptors()</a>, <a class="el" href="_split_layer_node_8cpp_source.xhtml#l00085">SplitLayerNode::forward_descriptors()</a>, <a class="el" href="_concatenate_layer_node_8cpp_source.xhtml#l00086">ConcatenateLayerNode::forward_descriptors()</a>, <a class="el" href="_eltwise_layer_node_8cpp_source.xhtml#l00071">EltwiseLayerNode::forward_descriptors()</a>, <a class="el" href="_strided_slice_layer_node_8cpp_source.xhtml#l00080">StridedSliceLayerNode::forward_descriptors()</a>, <a class="el" href="src_2graph_2nodes_2_fully_connected_layer_8cpp_source.xhtml#l00119">FullyConnectedLayerNode::forward_descriptors()</a>, <a class="el" href="_depthwise_convolution_layer_node_8cpp_source.xhtml#l00103">DepthwiseConvolutionLayerNode::forward_descriptors()</a>, <a class="el" href="_fused_convolution_batch_normalization_with_post_ops_node_8cpp_source.xhtml#l00103">FusedConvolutionBatchNormalizationWithPostOpsNode::forward_descriptors()</a>, <a class="el" href="_convolution_layer_node_8cpp_source.xhtml#l00114">ConvolutionLayerNode::forward_descriptors()</a>, <a class="el" href="_eltwise_layer_node_8cpp_source.xhtml#l00135">UnaryEltwiseLayerNode::forward_descriptors()</a>, <a class="el" href="_fused_convolution_with_post_op_node_8cpp_source.xhtml#l00114">FusedConvolutionWithPostOpNode::forward_descriptors()</a>, <a class="el" href="_fused_depthwise_convolution_batch_normalization_node_8cpp_source.xhtml#l00105">FusedDepthwiseConvolutionBatchNormalizationNode::forward_descriptors()</a>, <a class="el" href="_fused_convolution_batch_normalization_node_8cpp_source.xhtml#l00114">FusedConvolutionBatchNormalizationNode::forward_descriptors()</a>, <a class="el" href="_i_stream_8h_source.xhtml#l00081">IStream::forward_tail()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00138">INode::input_id()</a>, <a class="el" href="_input_node_8cpp_source.xhtml#l00033">InputNode::InputNode()</a>, <a class="el" href="_l2_normalize_layer_node_8cpp_source.xhtml#l00043">L2NormalizeLayerNode::L2NormalizeLayerNode()</a>, <a class="el" href="_normalize_planar_y_u_v_layer_node_8cpp_source.xhtml#l00034">NormalizePlanarYUVLayerNode::NormalizePlanarYUVLayerNode()</a>, <a class="el" href="_pad_layer_node_8cpp_source.xhtml#l00035">PadLayerNode::PadLayerNode()</a>, <a class="el" href="_permute_layer_node_8cpp_source.xhtml#l00035">PermuteLayerNode::PermuteLayerNode()</a>, <a class="el" href="_p_relu_layer_node_8cpp_source.xhtml#l00033">PReluLayerNode::PReluLayerNode()</a>, <a class="el" href="_print_layer_node_8cpp_source.xhtml#l00035">PrintLayerNode::PrintLayerNode()</a>, <a class="el" href="_quantization_layer_node_8cpp_source.xhtml#l00038">QuantizationLayerNode::QuantizationLayerNode()</a>, <a class="el" href="_reduction_layer_node_8cpp_source.xhtml#l00035">ReductionLayerNode::ReductionLayerNode()</a>, <a class="el" href="_reorg_layer_node_8cpp_source.xhtml#l00034">ReorgLayerNode::ReorgLayerNode()</a>, <a class="el" href="src_2graph_2nodes_2_reshape_layer_8cpp_source.xhtml#l00033">ReshapeLayerNode::ReshapeLayerNode()</a>, <a class="el" href="_resize_layer_node_8cpp_source.xhtml#l00034">ResizeLayerNode::ResizeLayerNode()</a>, <a class="el" href="_r_o_i_align_layer_node_8cpp_source.xhtml#l00036">ROIAlignLayerNode::ROIAlignLayerNode()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00077">INode::set_output_tensor()</a>, <a class="el" href="_slice_layer_node_8cpp_source.xhtml#l00035">SliceLayerNode::SliceLayerNode()</a>, <a class="el" href="_softmax_layer_node_8cpp_source.xhtml#l00034">SoftmaxLayerNode::SoftmaxLayerNode()</a>, <a class="el" href="_split_layer_node_8cpp_source.xhtml#l00035">SplitLayerNode::SplitLayerNode()</a>, <a class="el" href="_stack_layer_node_8cpp_source.xhtml#l00038">StackLayerNode::StackLayerNode()</a>, <a class="el" href="_edge_8h_source.xhtml#l00124">Edge::tensor_id()</a>, and <a class="el" href="_eltwise_layer_node_8cpp_source.xhtml#l00118">UnaryEltwiseLayerNode::UnaryEltwiseLayerNode()</a>.</p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1graph.xhtml">graph</a></li>
    <li class="footer">Generated on Thu May 18 2023 14:52:41 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
