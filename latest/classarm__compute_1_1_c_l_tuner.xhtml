<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: CLTuner Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarm__compute_1_1_c_l_tuner.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-attribs">Data Fields</a>  </div>
  <div class="headertitle">
<div class="title">CLTuner Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Basic implementation of the OpenCL tuner interface.  
 <a href="classarm__compute_1_1_c_l_tuner.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_c_l_tuner_8h_source.xhtml">CLTuner.h</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for CLTuner:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classarm__compute_1_1_c_l_tuner__coll__graph.svg" width="86" height="112"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:af40cb6e89337657d0fea6a8629f69a32"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml#af40cb6e89337657d0fea6a8629f69a32">CLTuner</a> (bool <a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml#a362184f6651ae4acde05d5ce85cfd16f">tune_new_kernels</a>=true, <a class="el" href="structarm__compute_1_1_c_l_tuning_info.xhtml">CLTuningInfo</a> tuning_info=<a class="el" href="structarm__compute_1_1_c_l_tuning_info.xhtml">CLTuningInfo</a>())</td></tr>
<tr class="memdesc:af40cb6e89337657d0fea6a8629f69a32"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor.  <a href="#af40cb6e89337657d0fea6a8629f69a32">More...</a><br /></td></tr>
<tr class="separator:af40cb6e89337657d0fea6a8629f69a32"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a577ac5b9d244bdf031905faaf08b968c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml#a577ac5b9d244bdf031905faaf08b968c">~CLTuner</a> ()=default</td></tr>
<tr class="memdesc:a577ac5b9d244bdf031905faaf08b968c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="#a577ac5b9d244bdf031905faaf08b968c">More...</a><br /></td></tr>
<tr class="separator:a577ac5b9d244bdf031905faaf08b968c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba10acdb2d58e3e0a96364c487a71d40"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml#aba10acdb2d58e3e0a96364c487a71d40">set_tune_new_kernels</a> (bool <a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml#a362184f6651ae4acde05d5ce85cfd16f">tune_new_kernels</a>)</td></tr>
<tr class="memdesc:aba10acdb2d58e3e0a96364c487a71d40"><td class="mdescLeft">&#160;</td><td class="mdescRight">Setter for tune_new_kernels option.  <a href="#aba10acdb2d58e3e0a96364c487a71d40">More...</a><br /></td></tr>
<tr class="separator:aba10acdb2d58e3e0a96364c487a71d40"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a362184f6651ae4acde05d5ce85cfd16f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml#a362184f6651ae4acde05d5ce85cfd16f">tune_new_kernels</a> () const</td></tr>
<tr class="memdesc:a362184f6651ae4acde05d5ce85cfd16f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tune kernels that are not in the tuning parameters table.  <a href="#a362184f6651ae4acde05d5ce85cfd16f">More...</a><br /></td></tr>
<tr class="separator:a362184f6651ae4acde05d5ce85cfd16f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a867dcc8110e466575c074674c0db52ac"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml#a867dcc8110e466575c074674c0db52ac">set_tuning_parameters</a> (<a class="el" href="structarm__compute_1_1_c_l_tuning_info.xhtml">CLTuningInfo</a> tuning_info)</td></tr>
<tr class="memdesc:a867dcc8110e466575c074674c0db52ac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Setter for tune parameters option.  <a href="#a867dcc8110e466575c074674c0db52ac">More...</a><br /></td></tr>
<tr class="separator:a867dcc8110e466575c074674c0db52ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae485b24df65d39cb646e48317f49639"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml#aae485b24df65d39cb646e48317f49639">set_tuner_mode</a> (<a class="el" href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5c">CLTunerMode</a> mode)</td></tr>
<tr class="memdesc:aae485b24df65d39cb646e48317f49639"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set OpenCL tuner mode.  <a href="#aae485b24df65d39cb646e48317f49639">More...</a><br /></td></tr>
<tr class="separator:aae485b24df65d39cb646e48317f49639"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7993b367bfe0275459eafb09059da1d8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml#a7993b367bfe0275459eafb09059da1d8">add_tuning_params</a> (const std::string &amp;kernel_id, <a class="el" href="classarm__compute_1_1_c_l_tuning_params.xhtml">CLTuningParams</a> optimal_tuning_params)</td></tr>
<tr class="memdesc:a7993b367bfe0275459eafb09059da1d8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Manually add tuning parameters for a kernel.  <a href="#a7993b367bfe0275459eafb09059da1d8">More...</a><br /></td></tr>
<tr class="separator:a7993b367bfe0275459eafb09059da1d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afbcfe4307e76d284d098b1ca3f83e065"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml#afbcfe4307e76d284d098b1ca3f83e065">import_tuning_params</a> (const std::unordered_map&lt; std::string, <a class="el" href="classarm__compute_1_1_c_l_tuning_params.xhtml">CLTuningParams</a> &gt; &amp;<a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml#a09f3664a934e7bb4b227fbe3a7df555f">tuning_params_table</a>)</td></tr>
<tr class="memdesc:afbcfe4307e76d284d098b1ca3f83e065"><td class="mdescLeft">&#160;</td><td class="mdescRight">Import tuning parameters table.  <a href="#afbcfe4307e76d284d098b1ca3f83e065">More...</a><br /></td></tr>
<tr class="separator:afbcfe4307e76d284d098b1ca3f83e065"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a09f3664a934e7bb4b227fbe3a7df555f"><td class="memItemLeft" align="right" valign="top">const std::unordered_map&lt; std::string, <a class="el" href="classarm__compute_1_1_c_l_tuning_params.xhtml">CLTuningParams</a> &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml#a09f3664a934e7bb4b227fbe3a7df555f">tuning_params_table</a> () const</td></tr>
<tr class="memdesc:a09f3664a934e7bb4b227fbe3a7df555f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Give read access to the tuning params table.  <a href="#a09f3664a934e7bb4b227fbe3a7df555f">More...</a><br /></td></tr>
<tr class="separator:a09f3664a934e7bb4b227fbe3a7df555f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7937dca7876064401bb14b4443bf5d8d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml#a7937dca7876064401bb14b4443bf5d8d">set_cl_kernel_event</a> (cl_event kernel_event)</td></tr>
<tr class="memdesc:a7937dca7876064401bb14b4443bf5d8d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the OpenCL kernel event.  <a href="#a7937dca7876064401bb14b4443bf5d8d">More...</a><br /></td></tr>
<tr class="separator:a7937dca7876064401bb14b4443bf5d8d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ddfa449f78e4c4d8345e37f1719cc57"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml#a5ddfa449f78e4c4d8345e37f1719cc57">load_from_file</a> (const std::string &amp;filename)</td></tr>
<tr class="memdesc:a5ddfa449f78e4c4d8345e37f1719cc57"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load the tuning parameters table from file.  <a href="#a5ddfa449f78e4c4d8345e37f1719cc57">More...</a><br /></td></tr>
<tr class="separator:a5ddfa449f78e4c4d8345e37f1719cc57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3954437274c111b1d51ae164fbe6bb2f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml#a3954437274c111b1d51ae164fbe6bb2f">save_to_file</a> (const std::string &amp;filename) const</td></tr>
<tr class="memdesc:a3954437274c111b1d51ae164fbe6bb2f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Save the content of the tuning parameters table to file.  <a href="#a3954437274c111b1d51ae164fbe6bb2f">More...</a><br /></td></tr>
<tr class="separator:a3954437274c111b1d51ae164fbe6bb2f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a52f755d664bbdcb9346cdf5cc4a7e958"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml#a52f755d664bbdcb9346cdf5cc4a7e958">tune_kernel_static</a> (<a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml">ICLKernel</a> &amp;kernel) override</td></tr>
<tr class="memdesc:a52f755d664bbdcb9346cdf5cc4a7e958"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tune OpenCL kernel statically.  <a href="#a52f755d664bbdcb9346cdf5cc4a7e958">More...</a><br /></td></tr>
<tr class="separator:a52f755d664bbdcb9346cdf5cc4a7e958"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af073b532560e2105dd22d381f5888ce7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml#af073b532560e2105dd22d381f5888ce7">tune_kernel_dynamic</a> (<a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml">ICLKernel</a> &amp;kernel) override</td></tr>
<tr class="memdesc:af073b532560e2105dd22d381f5888ce7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tune OpenCL kernel dynamically.  <a href="#af073b532560e2105dd22d381f5888ce7">More...</a><br /></td></tr>
<tr class="separator:af073b532560e2105dd22d381f5888ce7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b900b566993081d019a907df150842d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml#a3b900b566993081d019a907df150842d">tune_kernel_dynamic</a> (<a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml">ICLKernel</a> &amp;kernel, <a class="el" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> &amp;tensors) override</td></tr>
<tr class="memdesc:a3b900b566993081d019a907df150842d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tune OpenCL kernel dynamically.  <a href="#a3b900b566993081d019a907df150842d">More...</a><br /></td></tr>
<tr class="separator:a3b900b566993081d019a907df150842d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6fe363cafdd1fcfb6179a7cceac7dad"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml#ac6fe363cafdd1fcfb6179a7cceac7dad">kernel_event_is_set</a> () const</td></tr>
<tr class="memdesc:ac6fe363cafdd1fcfb6179a7cceac7dad"><td class="mdescLeft">&#160;</td><td class="mdescRight">Is the kernel_event set ?  <a href="#ac6fe363cafdd1fcfb6179a7cceac7dad">More...</a><br /></td></tr>
<tr class="separator:ac6fe363cafdd1fcfb6179a7cceac7dad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarm__compute_1_1_i_c_l_tuner"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarm__compute_1_1_i_c_l_tuner')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarm__compute_1_1_i_c_l_tuner.xhtml">ICLTuner</a></td></tr>
<tr class="memitem:a7103799fdecd6abca8fc84efebb3653f inherit pub_methods_classarm__compute_1_1_i_c_l_tuner"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_tuner.xhtml#a7103799fdecd6abca8fc84efebb3653f">~ICLTuner</a> ()=default</td></tr>
<tr class="memdesc:a7103799fdecd6abca8fc84efebb3653f inherit pub_methods_classarm__compute_1_1_i_c_l_tuner"><td class="mdescLeft">&#160;</td><td class="mdescRight">Virtual destructor.  <a href="classarm__compute_1_1_i_c_l_tuner.xhtml#a7103799fdecd6abca8fc84efebb3653f">More...</a><br /></td></tr>
<tr class="separator:a7103799fdecd6abca8fc84efebb3653f inherit pub_methods_classarm__compute_1_1_i_c_l_tuner"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"></a>
Data Fields</h2></td></tr>
<tr class="memitem:a5baba955626e8da33ed5dd829a538974"><td class="memItemLeft" align="right" valign="top">std::function&lt; decltype(<a class="el" href="_open_c_l_8cpp.xhtml#a0152f4b089c26f22f032162d0b7a0d21">clEnqueueNDRangeKernel</a>)&gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml#a5baba955626e8da33ed5dd829a538974">real_clEnqueueNDRangeKernel</a></td></tr>
<tr class="memdesc:a5baba955626e8da33ed5dd829a538974"><td class="mdescLeft">&#160;</td><td class="mdescRight">clEnqueueNDRangeKernel symbol  <a href="#a5baba955626e8da33ed5dd829a538974">More...</a><br /></td></tr>
<tr class="separator:a5baba955626e8da33ed5dd829a538974"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Basic implementation of the OpenCL tuner interface. </p>

<p class="definition">Definition at line <a class="el" href="_c_l_tuner_8h_source.xhtml#l00040">40</a> of file <a class="el" href="_c_l_tuner_8h_source.xhtml">CLTuner.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="af40cb6e89337657d0fea6a8629f69a32"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af40cb6e89337657d0fea6a8629f69a32">&#9670;&nbsp;</a></span>CLTuner()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml">CLTuner</a> </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>tune_new_kernels</em> = <code>true</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_c_l_tuning_info.xhtml">CLTuningInfo</a>&#160;</td>
          <td class="paramname"><em>tuning_info</em> = <code><a class="el" href="structarm__compute_1_1_c_l_tuning_info.xhtml">CLTuningInfo</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Constructor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tune_new_kernels</td><td>Find the optimal local workgroup size for kernels which are not present in the table ? </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tuning_info</td><td>(Optional) opencl parameters to tune </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00039">39</a> of file <a class="el" href="_c_l_tuner_8cpp_source.xhtml">CLTuner.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    : <a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#a5baba955626e8da33ed5dd829a538974">real_clEnqueueNDRangeKernel</a>(<span class="keyword">nullptr</span>), _tuning_params_table(), _lws_table(), _kernel_event(), _tune_new_kernels(<a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#a362184f6651ae4acde05d5ce85cfd16f">tune_new_kernels</a>), _tuning_info(tuning_info)</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_tuner_xhtml_a5baba955626e8da33ed5dd829a538974"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuner.xhtml#a5baba955626e8da33ed5dd829a538974">arm_compute::CLTuner::real_clEnqueueNDRangeKernel</a></div><div class="ttdeci">std::function&lt; decltype(clEnqueueNDRangeKernel)&gt; real_clEnqueueNDRangeKernel</div><div class="ttdoc">clEnqueueNDRangeKernel symbol </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_8h_source.xhtml#l00106">CLTuner.h:106</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tuner_xhtml_a362184f6651ae4acde05d5ce85cfd16f"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuner.xhtml#a362184f6651ae4acde05d5ce85cfd16f">arm_compute::CLTuner::tune_new_kernels</a></div><div class="ttdeci">bool tune_new_kernels() const</div><div class="ttdoc">Tune kernels that are not in the tuning parameters table. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_8cpp_source.xhtml#l00079">CLTuner.cpp:79</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a577ac5b9d244bdf031905faaf08b968c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a577ac5b9d244bdf031905faaf08b968c">&#9670;&nbsp;</a></span>~CLTuner()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml">CLTuner</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Destructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a7993b367bfe0275459eafb09059da1d8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7993b367bfe0275459eafb09059da1d8">&#9670;&nbsp;</a></span>add_tuning_params()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void add_tuning_params </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>kernel_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_c_l_tuning_params.xhtml">CLTuningParams</a>&#160;</td>
          <td class="paramname"><em>optimal_tuning_params</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Manually add tuning parameters for a kernel. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">kernel_id</td><td>Unique identifiant of the kernel </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">optimal_tuning_params</td><td>Optimal tuning parameters to use for the given kernel </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00146">146</a> of file <a class="el" href="_c_l_tuner_8cpp_source.xhtml">CLTuner.cpp</a>.</p>

<p class="reference">References <a class="el" href="src_2common_2utils_2_log_8h_source.xhtml#l00066">ARM_COMPUTE_LOG_MSG_WITH_FORMAT_ACL</a>, <a class="el" href="_open_c_l_8h_source.xhtml#l00100">CLSymbols::clEnqueueNDRangeKernel_ptr</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00922">clRetainEvent()</a>, <a class="el" href="_m_l_g_o_parser_8cpp_source.xhtml#l00290">arm_compute::mlgo::parser::end()</a>, <a class="el" href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00039">CLKernelLibrary::get()</a>, <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00103">CLScheduler::get()</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00047">CLSymbols::get()</a>, <a class="el" href="_c_l_tuning_params_8h_source.xhtml#l00069">CLTuningParams::get_lws()</a>, <a class="el" href="_c_l_tuning_parameters_list_8cpp_source.xhtml#l00266">arm_compute::cl_tuner::get_tuning_parameters_list()</a>, <a class="el" href="_c_l_tuning_params_8h_source.xhtml#l00079">CLTuningParams::get_wbsm()</a>, <a class="el" href="namespacearm__compute_1_1logging.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a551b723eafd6a31d444fcb2f5920fbd3">arm_compute::logging::INFO</a>, <a class="el" href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00105">CLKernelLibrary::is_wbsm_supported()</a>, <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00066">CLTuner::kernel_event_is_set()</a>, <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00039">CLScheduler::queue()</a>, <a class="el" href="_c_l_tuner_8h_source.xhtml#l00106">CLTuner::real_clEnqueueNDRangeKernel</a>, <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00070">CLTuner::set_cl_kernel_event()</a>, <a class="el" href="_c_l_tuning_params_8h_source.xhtml#l00064">CLTuningParams::set_lws()</a>, <a class="el" href="_c_l_tuning_params_8h_source.xhtml#l00074">CLTuningParams::set_wbsm()</a>, and <a class="el" href="utils_2_type_printer_8h_source.xhtml#l00088">arm_compute::to_string()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00290">CLTuner::load_from_file()</a>, and <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00094">CLTuner::tune_kernel_dynamic()</a>.</p>
<div class="fragment"><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;{</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    _tuning_params_table.emplace(kernel_id, optimal_tuning_params);</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="afbcfe4307e76d284d098b1ca3f83e065"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afbcfe4307e76d284d098b1ca3f83e065">&#9670;&nbsp;</a></span>import_tuning_params()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void import_tuning_params </td>
          <td>(</td>
          <td class="paramtype">const std::unordered_map&lt; std::string, <a class="el" href="classarm__compute_1_1_c_l_tuning_params.xhtml">CLTuningParams</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>tuning_params_table</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Import tuning parameters table. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tuning_params_table</td><td>The unordered_map container to import </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00284">284</a> of file <a class="el" href="_c_l_tuner_8cpp_source.xhtml">CLTuner.cpp</a>.</p>

<p class="reference">References <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00279">CLTuner::tuning_params_table()</a>.</p>
<div class="fragment"><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;{</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    _tuning_params_table.clear();</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    _tuning_params_table = <a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#a09f3664a934e7bb4b227fbe3a7df555f">tuning_params_table</a>;</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_tuner_xhtml_a09f3664a934e7bb4b227fbe3a7df555f"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuner.xhtml#a09f3664a934e7bb4b227fbe3a7df555f">arm_compute::CLTuner::tuning_params_table</a></div><div class="ttdeci">const std::unordered_map&lt; std::string, CLTuningParams &gt; &amp; tuning_params_table() const</div><div class="ttdoc">Give read access to the tuning params table. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_8cpp_source.xhtml#l00279">CLTuner.cpp:279</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac6fe363cafdd1fcfb6179a7cceac7dad"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac6fe363cafdd1fcfb6179a7cceac7dad">&#9670;&nbsp;</a></span>kernel_event_is_set()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool kernel_event_is_set </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Is the kernel_event set ? </p>
<dl class="section return"><dt>Returns</dt><dd>true if the kernel_event is set. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00066">66</a> of file <a class="el" href="_c_l_tuner_8cpp_source.xhtml">CLTuner.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00146">CLTuner::add_tuning_params()</a>.</p>
<div class="fragment"><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;{</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keywordflow">return</span> _kernel_event() != <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a5ddfa449f78e4c4d8345e37f1719cc57"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5ddfa449f78e4c4d8345e37f1719cc57">&#9670;&nbsp;</a></span>load_from_file()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void load_from_file </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>filename</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Load the tuning parameters table from file. </p>
<p>It also sets up the tuning read from the file</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">filename</td><td>Load the tuning parameters table from this file.(Must exist) </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00290">290</a> of file <a class="el" href="_c_l_tuner_8cpp_source.xhtml">CLTuner.cpp</a>.</p>

<p class="reference">References <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00146">CLTuner::add_tuning_params()</a>, <a class="el" href="_error_8h_source.xhtml#l00346">ARM_COMPUTE_ERROR_VAR</a>, and <a class="el" href="_c_l_tuning_params_8h_source.xhtml#l00095">CLTuningParams::from_string()</a>.</p>

<p class="reference">Referenced by <a class="el" href="main_8cpp_source.xhtml#l00096">main()</a>, and <a class="el" href="_c_l_device_backend_8cpp_source.xhtml#l00104">CLDeviceBackend::setup_backend_context()</a>.</p>
<div class="fragment"><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;{</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    std::ifstream fs;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    fs.exceptions(std::ifstream::badbit);</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    fs.open(filename, std::ios::in);</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <span class="keywordflow">if</span>(!fs.is_open())</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    {</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        <a class="code" href="_error_8h.xhtml#abd040a16dc0dbc75733e07aff93048a8">ARM_COMPUTE_ERROR_VAR</a>(<span class="stringliteral">&quot;Failed to open &#39;%s&#39; (%s [%d])&quot;</span>, filename.c_str(), strerror(errno), errno);</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    }</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    std::string line;</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    <span class="keywordtype">bool</span>        header_line = <span class="keyword">true</span>;</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    <span class="keywordflow">while</span>(!std::getline(fs, line).fail())</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    {</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;        <span class="keywordflow">if</span>(header_line)</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        {</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;            header_line            = <span class="keyword">false</span>;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;            <span class="keywordtype">size_t</span> pos_lws         = line.find(<span class="stringliteral">&quot;lws&quot;</span>);</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;            <span class="keywordtype">size_t</span> pos_wbsm        = line.find(<span class="stringliteral">&quot;wbsm&quot;</span>);</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;            _tuning_info.<a class="code" href="structarm__compute_1_1_c_l_tuning_info.xhtml#a93490954be8daf7e7326c5375e122259">tune_wbsm</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;            <span class="keywordflow">if</span>(pos_lws != std::string::npos || pos_wbsm != std::string::npos)</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;            {</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                <span class="comment">// The file has in the first line the parameters it has been tuned on</span></div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                <span class="keywordflow">if</span>(pos_wbsm != std::string::npos)</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                {</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                    _tuning_info.<a class="code" href="structarm__compute_1_1_c_l_tuning_info.xhtml#a93490954be8daf7e7326c5375e122259">tune_wbsm</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                }</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                <span class="comment">// Once the line with the tuning parameter is read we can</span></div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                <span class="comment">// read the next one to start collecting the values</span></div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                <span class="keywordflow">if</span>(std::getline(fs, line).fail())</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                {</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;                }</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;            }</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        }</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        CLTuningParams tuning_params;</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        <span class="keywordtype">size_t</span>         pos = line.find(<span class="stringliteral">&quot;;&quot;</span>);</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;        <span class="keywordflow">if</span>(pos == std::string::npos)</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        {</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;            <a class="code" href="_error_8h.xhtml#abd040a16dc0dbc75733e07aff93048a8">ARM_COMPUTE_ERROR_VAR</a>(<span class="stringliteral">&quot;Malformed row &#39;%s&#39; in %s&quot;</span>, line.c_str(), filename.c_str());</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        }</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        std::string kernel_id = line.substr(0, pos);</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        line.erase(0, pos + 1);</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        <span class="keywordflow">if</span>(!tuning_params.from_string(_tuning_info, line))</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;        {</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;            <a class="code" href="_error_8h.xhtml#abd040a16dc0dbc75733e07aff93048a8">ARM_COMPUTE_ERROR_VAR</a>(<span class="stringliteral">&quot;Malformed row &#39;%s&#39; in %s&quot;</span>, line.c_str(), filename.c_str());</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;        }</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#a7993b367bfe0275459eafb09059da1d8">add_tuning_params</a>(kernel_id, tuning_params);</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    }</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    fs.close();</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;}</div><div class="ttc" id="structarm__compute_1_1_c_l_tuning_info_xhtml_a93490954be8daf7e7326c5375e122259"><div class="ttname"><a href="structarm__compute_1_1_c_l_tuning_info.xhtml#a93490954be8daf7e7326c5375e122259">arm_compute::CLTuningInfo::tune_wbsm</a></div><div class="ttdeci">bool tune_wbsm</div><div class="ttdoc">Flag to tune the batches of work groups distributed to compute units. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_types_8h_source.xhtml#l00046">CLTunerTypes.h:46</a></div></div>
<div class="ttc" id="_error_8h_xhtml_abd040a16dc0dbc75733e07aff93048a8"><div class="ttname"><a href="_error_8h.xhtml#abd040a16dc0dbc75733e07aff93048a8">ARM_COMPUTE_ERROR_VAR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_VAR(msg,...)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00346">Error.h:346</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tuner_xhtml_a7993b367bfe0275459eafb09059da1d8"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuner.xhtml#a7993b367bfe0275459eafb09059da1d8">arm_compute::CLTuner::add_tuning_params</a></div><div class="ttdeci">void add_tuning_params(const std::string &amp;kernel_id, CLTuningParams optimal_tuning_params)</div><div class="ttdoc">Manually add tuning parameters for a kernel. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_8cpp_source.xhtml#l00146">CLTuner.cpp:146</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3954437274c111b1d51ae164fbe6bb2f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3954437274c111b1d51ae164fbe6bb2f">&#9670;&nbsp;</a></span>save_to_file()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool save_to_file </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>filename</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Save the content of the tuning parameters table to file. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">filename</td><td>Save the tuning parameters table to this file. (Content will be overwritten)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if the file was created </dd></dl>

<p class="definition">Definition at line <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00342">342</a> of file <a class="el" href="_c_l_tuner_8cpp_source.xhtml">CLTuner.cpp</a>.</p>

<p class="reference">References <a class="el" href="_c_l_tuning_params_8h_source.xhtml#l00084">CLTuningParams::to_string()</a>.</p>

<p class="reference">Referenced by <a class="el" href="main_8cpp_source.xhtml#l00096">main()</a>, and <a class="el" href="_c_l_device_backend_8cpp_source.xhtml#l00071">CLDeviceBackend::~CLDeviceBackend()</a>.</p>
<div class="fragment"><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;{</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    <span class="keywordflow">if</span>(!_tune_new_kernels || _tuning_params_table.empty() || filename.empty())</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    {</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    }</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    std::ofstream fs;</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    fs.exceptions(std::ifstream::failbit | std::ifstream::badbit);</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    fs.open(filename, std::ios::out);</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    std::string header_string = <span class="stringliteral">&quot;&quot;</span>;</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    header_string += <span class="stringliteral">&quot;lws&quot;</span>;</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    <span class="keywordflow">if</span>(_tuning_info.<a class="code" href="structarm__compute_1_1_c_l_tuning_info.xhtml#a93490954be8daf7e7326c5375e122259">tune_wbsm</a>)</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    {</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;        <span class="keywordflow">if</span>(!header_string.empty())</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;        {</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;            header_string += <span class="stringliteral">&quot; &quot;</span>;</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;        }</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;        header_string += <span class="stringliteral">&quot;wbsm&quot;</span>;</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    }</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    fs &lt;&lt; header_string &lt;&lt; std::endl;</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> <span class="keyword">const</span> &amp;kernel_data : _tuning_params_table)</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    {</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        CLTuningParams tun_pams(kernel_data.second);</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;        fs &lt;&lt; kernel_data.first &lt;&lt; tun_pams.to_string(_tuning_info) &lt;&lt; std::endl;</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    }</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    fs.close();</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;}</div><div class="ttc" id="structarm__compute_1_1_c_l_tuning_info_xhtml_a93490954be8daf7e7326c5375e122259"><div class="ttname"><a href="structarm__compute_1_1_c_l_tuning_info.xhtml#a93490954be8daf7e7326c5375e122259">arm_compute::CLTuningInfo::tune_wbsm</a></div><div class="ttdeci">bool tune_wbsm</div><div class="ttdoc">Flag to tune the batches of work groups distributed to compute units. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_types_8h_source.xhtml#l00046">CLTunerTypes.h:46</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7937dca7876064401bb14b4443bf5d8d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7937dca7876064401bb14b4443bf5d8d">&#9670;&nbsp;</a></span>set_cl_kernel_event()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void set_cl_kernel_event </td>
          <td>(</td>
          <td class="paramtype">cl_event&#160;</td>
          <td class="paramname"><em>kernel_event</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the OpenCL kernel event. </p>
<dl class="section note"><dt>Note</dt><dd>The interceptor can use this function to store the event associated to the OpenCL kernel</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">kernel_event</td><td>The OpenCL kernel event </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00070">70</a> of file <a class="el" href="_c_l_tuner_8cpp_source.xhtml">CLTuner.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00146">CLTuner::add_tuning_params()</a>.</p>
<div class="fragment"><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;{</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    _kernel_event = kernel_event;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aba10acdb2d58e3e0a96364c487a71d40"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aba10acdb2d58e3e0a96364c487a71d40">&#9670;&nbsp;</a></span>set_tune_new_kernels()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void set_tune_new_kernels </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>tune_new_kernels</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Setter for tune_new_kernels option. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tune_new_kernels</td><td>Find the optimal local workgroup size for kernels which are not present in the table ? </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00075">75</a> of file <a class="el" href="_c_l_tuner_8cpp_source.xhtml">CLTuner.cpp</a>.</p>

<p class="reference">References <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00079">CLTuner::tune_new_kernels()</a>.</p>

<p class="reference">Referenced by <a class="el" href="main_8cpp_source.xhtml#l00096">main()</a>, and <a class="el" href="_c_l_device_backend_8cpp_source.xhtml#l00076">CLDeviceBackend::set_kernel_tuning()</a>.</p>
<div class="fragment"><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;{</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    _tune_new_kernels = <a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#a362184f6651ae4acde05d5ce85cfd16f">tune_new_kernels</a>;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_tuner_xhtml_a362184f6651ae4acde05d5ce85cfd16f"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuner.xhtml#a362184f6651ae4acde05d5ce85cfd16f">arm_compute::CLTuner::tune_new_kernels</a></div><div class="ttdeci">bool tune_new_kernels() const</div><div class="ttdoc">Tune kernels that are not in the tuning parameters table. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_8cpp_source.xhtml#l00079">CLTuner.cpp:79</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aae485b24df65d39cb646e48317f49639"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aae485b24df65d39cb646e48317f49639">&#9670;&nbsp;</a></span>set_tuner_mode()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void set_tuner_mode </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5c">CLTunerMode</a>&#160;</td>
          <td class="paramname"><em>mode</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set OpenCL tuner mode. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">mode</td><td>Indicates how exhaustive the search for the optimal tuning parameters should be while tuning. Default is Exhaustive mode </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00084">84</a> of file <a class="el" href="_c_l_tuner_8cpp_source.xhtml">CLTuner.cpp</a>.</p>

<p class="reference">References <a class="el" href="clang__tidy__rules_8py_source.xhtml#l00189">clang_tidy_rules::mode</a>.</p>

<p class="reference">Referenced by <a class="el" href="main_8cpp_source.xhtml#l00096">main()</a>, and <a class="el" href="_c_l_device_backend_8cpp_source.xhtml#l00081">CLDeviceBackend::set_kernel_tuning_mode()</a>.</p>
<div class="fragment"><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;{</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    _tuning_info.<a class="code" href="structarm__compute_1_1_c_l_tuning_info.xhtml#a249f3f713c6ea8f564e760559cf509f4">tuner_mode</a> = <a class="code" href="namespaceclang__tidy__rules.xhtml#a1a6b6fb557d8d37d59700faf4e4c9167">mode</a>;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;}</div><div class="ttc" id="namespaceclang__tidy__rules_xhtml_a1a6b6fb557d8d37d59700faf4e4c9167"><div class="ttname"><a href="namespaceclang__tidy__rules.xhtml#a1a6b6fb557d8d37d59700faf4e4c9167">clang_tidy_rules.mode</a></div><div class="ttdeci">mode</div><div class="ttdef"><b>Definition:</b> <a href="clang__tidy__rules_8py_source.xhtml#l00189">clang_tidy_rules.py:189</a></div></div>
<div class="ttc" id="structarm__compute_1_1_c_l_tuning_info_xhtml_a249f3f713c6ea8f564e760559cf509f4"><div class="ttname"><a href="structarm__compute_1_1_c_l_tuning_info.xhtml#a249f3f713c6ea8f564e760559cf509f4">arm_compute::CLTuningInfo::tuner_mode</a></div><div class="ttdeci">CLTunerMode tuner_mode</div><div class="ttdoc">Parameter to select the level (granularity) of the tuning. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_types_8h_source.xhtml#l00045">CLTunerTypes.h:45</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a867dcc8110e466575c074674c0db52ac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a867dcc8110e466575c074674c0db52ac">&#9670;&nbsp;</a></span>set_tuning_parameters()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void set_tuning_parameters </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_c_l_tuning_info.xhtml">CLTuningInfo</a>&#160;</td>
          <td class="paramname"><em>tuning_info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Setter for tune parameters option. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tuning_info</td><td>opencl parameters to tune </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="af073b532560e2105dd22d381f5888ce7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af073b532560e2105dd22d381f5888ce7">&#9670;&nbsp;</a></span>tune_kernel_dynamic() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void tune_kernel_dynamic </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml">ICLKernel</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Tune OpenCL kernel dynamically. </p>
<dl class="section note"><dt>Note</dt><dd>Tuning requires memory to be available on all kernel tensors and objects in order to be performed</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">kernel</td><td><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class. ">Kernel</a> to tune </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_c_l_tuner.xhtml#ae12d76ff3471c1f73c62b7c65addc1ec">ICLTuner</a>.</p>

<p class="definition">Definition at line <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00094">94</a> of file <a class="el" href="_c_l_tuner_8cpp_source.xhtml">CLTuner.cpp</a>.</p>

<p class="reference">References <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00146">CLTuner::add_tuning_params()</a>, <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00407">ICLKernel::config_id()</a>, <a class="el" href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00039">CLKernelLibrary::get()</a>, <a class="el" href="_c_l_tuning_params_8h_source.xhtml#l00069">CLTuningParams::get_lws()</a>, <a class="el" href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00126">CLKernelLibrary::get_num_compute_units()</a>, <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00431">ICLKernel::get_target()</a>, <a class="el" href="_c_l_tuning_params_8h_source.xhtml#l00079">CLTuningParams::get_wbsm()</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00188">arm_compute::test::validation::pack</a>, <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00361">ICLKernel::set_lws_hint()</a>, <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00382">ICLKernel::set_wbsm_hint()</a>, <a class="el" href="src_2core_2_g_p_u_target_8cpp_source.xhtml#l00151">arm_compute::string_from_target()</a>, and <a class="el" href="_string_support_8h_source.xhtml#l00168">arm_compute::support::cpp11::to_string()</a>.</p>
<div class="fragment"><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;{</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    ITensorPack <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#af073b532560e2105dd22d381f5888ce7">tune_kernel_dynamic</a>(kernel, pack);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_tuner_xhtml_af073b532560e2105dd22d381f5888ce7"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuner.xhtml#af073b532560e2105dd22d381f5888ce7">arm_compute::CLTuner::tune_kernel_dynamic</a></div><div class="ttdeci">void tune_kernel_dynamic(ICLKernel &amp;kernel) override</div><div class="ttdoc">Tune OpenCL kernel dynamically. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_8cpp_source.xhtml#l00094">CLTuner.cpp:94</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a1e041dc03ff256dfc8b0bf5c5fe099e0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">arm_compute::test::validation::pack</a></div><div class="ttdeci">ITensorPack pack</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00188">Im2Col.cpp:188</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3b900b566993081d019a907df150842d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3b900b566993081d019a907df150842d">&#9670;&nbsp;</a></span>tune_kernel_dynamic() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void tune_kernel_dynamic </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml">ICLKernel</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> &amp;&#160;</td>
          <td class="paramname"><em>tensors</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Tune OpenCL kernel dynamically. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">kernel</td><td><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class. ">Kernel</a> to tune </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">tensors</td><td>Tensors for the kernel to use </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_c_l_tuner.xhtml#af473439167aea3200015321b2327e021">ICLTuner</a>.</p>

<p class="definition">Definition at line <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00139">139</a> of file <a class="el" href="_c_l_tuner_8cpp_source.xhtml">CLTuner.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;{</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    DefaultKernelData data{ tensors };</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    do_tune_kernel_dynamic(kernel, &amp;data);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a52f755d664bbdcb9346cdf5cc4a7e958"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a52f755d664bbdcb9346cdf5cc4a7e958">&#9670;&nbsp;</a></span>tune_kernel_static()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void tune_kernel_static </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml">ICLKernel</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Tune OpenCL kernel statically. </p>
<dl class="section note"><dt>Note</dt><dd>Tuning is performed using only kernel and tensor metadata, thus can be performed when memory is not available</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">kernel</td><td><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class. ">Kernel</a> to tune </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_c_l_tuner.xhtml#a384fdc1bc38a4fc6e79af675cc4aa8e3">ICLTuner</a>.</p>

<p class="definition">Definition at line <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00089">89</a> of file <a class="el" href="_c_l_tuner_8cpp_source.xhtml">CLTuner.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00152">ARM_COMPUTE_UNUSED</a>.</p>
<div class="fragment"><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;{</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(kernel);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a362184f6651ae4acde05d5ce85cfd16f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a362184f6651ae4acde05d5ce85cfd16f">&#9670;&nbsp;</a></span>tune_new_kernels()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool tune_new_kernels </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Tune kernels that are not in the tuning parameters table. </p>
<dl class="section return"><dt>Returns</dt><dd>True if tuning of new kernels is enabled. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00079">79</a> of file <a class="el" href="_c_l_tuner_8cpp_source.xhtml">CLTuner.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00075">CLTuner::set_tune_new_kernels()</a>.</p>
<div class="fragment"><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;{</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordflow">return</span> _tune_new_kernels;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a09f3664a934e7bb4b227fbe3a7df555f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a09f3664a934e7bb4b227fbe3a7df555f">&#9670;&nbsp;</a></span>tuning_params_table()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const std::unordered_map&lt; std::string, <a class="el" href="classarm__compute_1_1_c_l_tuning_params.xhtml">CLTuningParams</a> &gt; &amp; tuning_params_table </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Give read access to the tuning params table. </p>
<dl class="section return"><dt>Returns</dt><dd>The tuning params table as unordered_map container </dd></dl>

<p class="definition">Definition at line <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00279">279</a> of file <a class="el" href="_c_l_tuner_8cpp_source.xhtml">CLTuner.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00284">CLTuner::import_tuning_params()</a>.</p>
<div class="fragment"><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;{</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <span class="keywordflow">return</span> _tuning_params_table;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Field Documentation</h2>
<a id="a5baba955626e8da33ed5dd829a538974"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5baba955626e8da33ed5dd829a538974">&#9670;&nbsp;</a></span>real_clEnqueueNDRangeKernel</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::function&lt;decltype(<a class="el" href="_open_c_l_8cpp.xhtml#a0152f4b089c26f22f032162d0b7a0d21">clEnqueueNDRangeKernel</a>)&gt; real_clEnqueueNDRangeKernel</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>clEnqueueNDRangeKernel symbol </p>

<p class="definition">Definition at line <a class="el" href="_c_l_tuner_8h_source.xhtml#l00106">106</a> of file <a class="el" href="_c_l_tuner_8h_source.xhtml">CLTuner.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00146">CLTuner::add_tuning_params()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>arm_compute/runtime/CL/<a class="el" href="_c_l_tuner_8h_source.xhtml">CLTuner.h</a></li>
<li>src/runtime/CL/<a class="el" href="_c_l_tuner_8cpp_source.xhtml">CLTuner.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml">CLTuner</a></li>
    <li class="footer">Generated on Thu May 18 2023 14:52:38 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
