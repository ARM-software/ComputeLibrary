<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/cpu/kernels/elementwise_binary/generic/neon/integer.cpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('elementwise__binary_2generic_2neon_2integer_8cpp.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#namespaces">Namespaces</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">integer.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="arm__compute_2core_2_helpers_8h_source.xhtml">arm_compute/core/Helpers.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml">src/cpu/kernels/elementwise_binary/generic/neon/impl.h</a>&quot;</code><br />
</div>
<p><a href="elementwise__binary_2generic_2neon_2integer_8cpp_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:namespacearm__compute"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></td></tr>
<tr class="memdesc:namespacearm__compute"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copyright (c) 2017-2023 Arm Limited. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1cpu"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml">arm_compute::cpu</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a80f249016dbcc431fa33089ec6fadd4e"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op&gt; </td></tr>
<tr class="memitem:a80f249016dbcc431fa33089ec6fadd4e"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a80f249016dbcc431fa33089ec6fadd4e">neon_s32_elementwise_binary</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a80f249016dbcc431fa33089ec6fadd4e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a49b8ebb4367a9d5b49a1dccbf1111e75"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a49b8ebb4367a9d5b49a1dccbf1111e75">neon_s32_elementwise_binary&lt; ArithmeticOperation::ADD &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a49b8ebb4367a9d5b49a1dccbf1111e75"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f1fdb9c9d8b0aac643147d41a5b9c04"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a0f1fdb9c9d8b0aac643147d41a5b9c04">neon_s32_elementwise_binary&lt; ArithmeticOperation::SUB &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a0f1fdb9c9d8b0aac643147d41a5b9c04"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa7024c326dd6dbc4a1ed84afdae251e7"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa7024c326dd6dbc4a1ed84afdae251e7">neon_s32_elementwise_binary&lt; ArithmeticOperation::DIV &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:aa7024c326dd6dbc4a1ed84afdae251e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a933845a7603c8c4295d2df3f885db306"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a933845a7603c8c4295d2df3f885db306">neon_s32_elementwise_binary&lt; ArithmeticOperation::MIN &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a933845a7603c8c4295d2df3f885db306"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acbb27906986fe741d69a2f64ad7e6ae0"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#acbb27906986fe741d69a2f64ad7e6ae0">neon_s32_elementwise_binary&lt; ArithmeticOperation::MAX &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:acbb27906986fe741d69a2f64ad7e6ae0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adf1dfa31b7a48f836c5ee7bbc52f7cc4"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#adf1dfa31b7a48f836c5ee7bbc52f7cc4">neon_s32_elementwise_binary&lt; ArithmeticOperation::SQUARED_DIFF &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:adf1dfa31b7a48f836c5ee7bbc52f7cc4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb06f70b91a8f81b90bd80426d795d3a"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#acb06f70b91a8f81b90bd80426d795d3a">neon_s32_elementwise_binary&lt; ArithmeticOperation::POWER &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:acb06f70b91a8f81b90bd80426d795d3a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a35f4e9d1fdbc3b7c270ac2c1e155619a"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a35f4e9d1fdbc3b7c270ac2c1e155619a">neon_s32_elementwise_binary&lt; ArithmeticOperation::PRELU &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a35f4e9d1fdbc3b7c270ac2c1e155619a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0469bd9f1f5a4df12bcb7ff3cdbb6a43"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op&gt; </td></tr>
<tr class="memitem:a0469bd9f1f5a4df12bcb7ff3cdbb6a43"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a0469bd9f1f5a4df12bcb7ff3cdbb6a43">neon_s16_elementwise_binary</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a0469bd9f1f5a4df12bcb7ff3cdbb6a43"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a63574b05c48d24c551186e2e581dbc61"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a63574b05c48d24c551186e2e581dbc61">neon_s16_elementwise_binary&lt; ArithmeticOperation::ADD &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a63574b05c48d24c551186e2e581dbc61"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa75e9d50ad6be3295188f9349c934d39"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa75e9d50ad6be3295188f9349c934d39">neon_s16_elementwise_binary&lt; ArithmeticOperation::SUB &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:aa75e9d50ad6be3295188f9349c934d39"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a540ffb4e984eb7515c23f7de1a365076"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a540ffb4e984eb7515c23f7de1a365076">neon_s16_elementwise_binary&lt; ArithmeticOperation::DIV &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a540ffb4e984eb7515c23f7de1a365076"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a936e5fd5f8904fce51155d450165e012"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a936e5fd5f8904fce51155d450165e012">neon_s16_elementwise_binary&lt; ArithmeticOperation::MIN &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a936e5fd5f8904fce51155d450165e012"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f012f2d513566b6c9c8a54891dacede"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a0f012f2d513566b6c9c8a54891dacede">neon_s16_elementwise_binary&lt; ArithmeticOperation::MAX &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a0f012f2d513566b6c9c8a54891dacede"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a97b8783af088791994b2412cafde8944"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a97b8783af088791994b2412cafde8944">neon_s16_elementwise_binary&lt; ArithmeticOperation::SQUARED_DIFF &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a97b8783af088791994b2412cafde8944"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af786536ae3569e727a983b444ac78bc8"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#af786536ae3569e727a983b444ac78bc8">neon_s16_elementwise_binary&lt; ArithmeticOperation::POWER &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:af786536ae3569e727a983b444ac78bc8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1554298a63c25c943d3964490a2f571"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#af1554298a63c25c943d3964490a2f571">neon_s16_elementwise_binary&lt; ArithmeticOperation::PRELU &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:af1554298a63c25c943d3964490a2f571"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab11b3f4b86665b08ca8b9fb00e38bb9d"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op&gt; </td></tr>
<tr class="memitem:ab11b3f4b86665b08ca8b9fb00e38bb9d"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ab11b3f4b86665b08ca8b9fb00e38bb9d">neon_u8_comparison_elementwise_binary</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:ab11b3f4b86665b08ca8b9fb00e38bb9d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a47e02212404334bb7684275e2b183719"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a47e02212404334bb7684275e2b183719">neon_u8_comparison_elementwise_binary&lt; ComparisonOperation::Equal &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a47e02212404334bb7684275e2b183719"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca40b8e906e7c797b78f611217e2017c"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aca40b8e906e7c797b78f611217e2017c">neon_u8_comparison_elementwise_binary&lt; ComparisonOperation::NotEqual &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:aca40b8e906e7c797b78f611217e2017c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a380179c89ead515c75eae47612ddf9bb"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a380179c89ead515c75eae47612ddf9bb">neon_u8_comparison_elementwise_binary&lt; ComparisonOperation::Greater &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a380179c89ead515c75eae47612ddf9bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2442fd415b42ceeba06051d5908bb210"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a2442fd415b42ceeba06051d5908bb210">neon_u8_comparison_elementwise_binary&lt; ComparisonOperation::GreaterEqual &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a2442fd415b42ceeba06051d5908bb210"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:addef285be991e7bee50060465f455459"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#addef285be991e7bee50060465f455459">neon_u8_comparison_elementwise_binary&lt; ComparisonOperation::Less &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:addef285be991e7bee50060465f455459"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b6616dc7142e89df08763de1e61733f"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8b6616dc7142e89df08763de1e61733f">neon_u8_comparison_elementwise_binary&lt; ComparisonOperation::LessEqual &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a8b6616dc7142e89df08763de1e61733f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b0752a4d54894e23581ff38b15aada9"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op&gt; </td></tr>
<tr class="memitem:a8b0752a4d54894e23581ff38b15aada9"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8b0752a4d54894e23581ff38b15aada9">neon_s16_comparison_elementwise_binary</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a8b0752a4d54894e23581ff38b15aada9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa813ea436e922c1658d5040583a67439"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa813ea436e922c1658d5040583a67439">neon_s16_comparison_elementwise_binary&lt; ComparisonOperation::Equal &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:aa813ea436e922c1658d5040583a67439"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45c86ddbd5f40d0e0d6875fce3279702"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a45c86ddbd5f40d0e0d6875fce3279702">neon_s16_comparison_elementwise_binary&lt; ComparisonOperation::NotEqual &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a45c86ddbd5f40d0e0d6875fce3279702"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a52f14392b48a6b49e4c4ba59a0d919cc"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a52f14392b48a6b49e4c4ba59a0d919cc">neon_s16_comparison_elementwise_binary&lt; ComparisonOperation::Greater &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a52f14392b48a6b49e4c4ba59a0d919cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ef4712ef5c670d134c366a36cd7a5f5"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a6ef4712ef5c670d134c366a36cd7a5f5">neon_s16_comparison_elementwise_binary&lt; ComparisonOperation::GreaterEqual &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a6ef4712ef5c670d134c366a36cd7a5f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e76328d3f2d1d0757d9c5d05cbf8466"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a1e76328d3f2d1d0757d9c5d05cbf8466">neon_s16_comparison_elementwise_binary&lt; ComparisonOperation::Less &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a1e76328d3f2d1d0757d9c5d05cbf8466"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a764259e9c2bb12070806136a3f59d429"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a764259e9c2bb12070806136a3f59d429">neon_s16_comparison_elementwise_binary&lt; ComparisonOperation::LessEqual &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a764259e9c2bb12070806136a3f59d429"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8109015040dabe0728f37ebf7facf3df"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op&gt; </td></tr>
<tr class="memitem:a8109015040dabe0728f37ebf7facf3df"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8109015040dabe0728f37ebf7facf3df">neon_s32_comparison_elementwise_binary</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a8109015040dabe0728f37ebf7facf3df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac20b0bcbe2d5163a9a70e8d84b2effbb"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ac20b0bcbe2d5163a9a70e8d84b2effbb">neon_s32_comparison_elementwise_binary&lt; ComparisonOperation::Equal &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:ac20b0bcbe2d5163a9a70e8d84b2effbb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2d90675d2c2470f2aafc2bed01621d0"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa2d90675d2c2470f2aafc2bed01621d0">neon_s32_comparison_elementwise_binary&lt; ComparisonOperation::NotEqual &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:aa2d90675d2c2470f2aafc2bed01621d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adeae56332e60300e0cb61c540fd40d3f"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#adeae56332e60300e0cb61c540fd40d3f">neon_s32_comparison_elementwise_binary&lt; ComparisonOperation::Greater &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:adeae56332e60300e0cb61c540fd40d3f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4cb6e822641c2d1ba5249dc9966e2418"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a4cb6e822641c2d1ba5249dc9966e2418">neon_s32_comparison_elementwise_binary&lt; ComparisonOperation::GreaterEqual &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:a4cb6e822641c2d1ba5249dc9966e2418"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae14e2d1aeaa5ee1f7392efd1b0fcc40e"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ae14e2d1aeaa5ee1f7392efd1b0fcc40e">neon_s32_comparison_elementwise_binary&lt; ComparisonOperation::Less &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:ae14e2d1aeaa5ee1f7392efd1b0fcc40e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe8e18cc7c50f2a571de0958cdc6bf9e"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#abe8e18cc7c50f2a571de0958cdc6bf9e">neon_s32_comparison_elementwise_binary&lt; ComparisonOperation::LessEqual &gt;</a> (const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</td></tr>
<tr class="separator:abe8e18cc7c50f2a571de0958cdc6bf9e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_2c61f424fd391396db977702a2beee9a.xhtml">cpu</a></li><li class="navelem"><a class="el" href="dir_1de7bcbbdec2bf3559cb3c688662d4f5.xhtml">kernels</a></li><li class="navelem"><a class="el" href="dir_66520ab4814343cef4d99a57e61c0978.xhtml">elementwise_binary</a></li><li class="navelem"><a class="el" href="dir_8009c81bd03a5456d0f628033db7357f.xhtml">generic</a></li><li class="navelem"><a class="el" href="dir_6a94b41c7969531305f6d4628e056858.xhtml">neon</a></li><li class="navelem"><a class="el" href="elementwise__binary_2generic_2neon_2integer_8cpp.xhtml">integer.cpp</a></li>
    <li class="footer">Generated on Thu May 18 2023 14:52:34 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
