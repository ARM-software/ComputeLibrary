<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/NEON/kernels/arm_gemm/interleave_indirect_impl.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('interleave__indirect__impl_8hpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">interleave_indirect_impl.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="interleave__indirect__impl_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2022 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">// Implementations of interleave functions</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">// These must be included with a &quot;namespace arm_gemm&quot; block.</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment"> * Core function that does heavy lifting - interleave &#39;int_by&#39; rows of width &#39;width&#39; together.</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment"> * &#39;height&#39; indicates the actual number of rows to interleave, so if it&#39;s less than int_by then the remaining</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment"> * entries are padded (note that this is &quot;GEMM&quot; padding rather than convolution padding, so there is no need to pad</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment"> * with a particular value.</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment"> * Note that it is not expected for this templated version to ever be used - all cases that matter should be</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment"> * explicitly specialized with an optimized implementation.</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="keyword">template</span>&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> height_vectors, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> block, VLType vlt, <span class="keywordtype">bool</span> <span class="keywordtype">int</span>egrate_sums, <span class="keyword">typename</span> TIn, <span class="keyword">typename</span> TOut&gt;</div><div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="interleave__indirect__impl_8hpp.xhtml#a93ab1d882dff72f281412d2b3fe2c2bb">   41</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="interleave__indirect__impl_8hpp.xhtml#a93ab1d882dff72f281412d2b3fe2c2bb">interleave_block</a>( TOut * &amp;out, <span class="keyword">const</span> TIn * <span class="keyword">const</span> *in, <span class="keywordtype">size_t</span> width, <span class="keywordtype">size_t</span> height, <span class="keywordtype">size_t</span> row_offset, <span class="keywordtype">bool</span> first) {</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> int_by = height_vectors * (vlt == VLType::SVE ? get_vector_length&lt;TOut&gt;() / block :</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;                                                  (vlt == VLType::SME ? sme::get_vector_length&lt;TOut&gt;() / block : 1 ));</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    std::vector&lt;int32_t&gt; the_sums;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keywordflow">if</span> (integrate_sums) {</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        the_sums = std::vector&lt;int32_t&gt;(int_by, 0);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="keywordflow">if</span> (!first) {</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;            <span class="comment">// In &#39;integrate sums&#39; mode, we dump the sums at the end on each pass.</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;            <span class="comment">// On the last pass this is correct, but on other passes it is not -</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            <span class="comment">// so on the subsequent pass we need to take the output written by</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            <span class="comment">// the previous pass as starting point for the sums, and then</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            <span class="comment">// overwrite them with new interleaved data.</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            int32_t *out_int32 = <span class="keyword">reinterpret_cast&lt;</span>int32_t *<span class="keyword">&gt;</span>(out);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            <span class="comment">// Rewind pointer to where we wrote out the sums last time.</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;            out_int32 -= int_by;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            <span class="comment">// Restore the running sums.</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            memcpy(the_sums.data(), out_int32, int_by * <span class="keyword">sizeof</span>(int32_t));</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            <span class="comment">// Update the &quot;real&quot; pointer so that the next output will clobber the old sums.</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            out = <span class="keyword">reinterpret_cast&lt;</span>TOut *<span class="keyword">&gt;</span>(out_int32);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        }</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    }</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pos=0; pos&lt;width; pos+=block) {</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> row=0; row&lt;int_by; row++) {</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            <span class="comment">// Row out of range - pad &#39;block&#39; entries.</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            <span class="keywordflow">if</span> (row &gt;= height) {</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> col=0; col&lt;block; col++) {</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                    *out++ = 0;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                }</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            }</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> col=0; col&lt;block; col++) {</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                <span class="comment">// Column out of range - pad a single entry</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                <span class="keywordflow">if</span> (pos + col &gt;= width) {</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                    *out++ = 0;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                    <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                }</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                <span class="keywordflow">if</span> (integrate_sums) {</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                    the_sums[row] += in[row][row_offset + pos + col];</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                }</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                *out++ = in[row][row_offset + pos + col];</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            }</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        }</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    }</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keywordflow">if</span> (integrate_sums) {</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        int32_t *out_int32 = <span class="keyword">reinterpret_cast&lt;</span>int32_t *<span class="keyword">&gt;</span>(out);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        memcpy(out_int32, the_sums.data(), int_by * <span class="keyword">sizeof</span>(int32_t));</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        out = <span class="keyword">reinterpret_cast&lt;</span>TOut *<span class="keyword">&gt;</span>(out_int32 + int_by);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    }</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;}</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="keyword">template</span>&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> height_vectors, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> block, VLType vlt, <span class="keyword">typename</span> TOut&gt;</div><div class="line"><a name="l00106"></a><span class="lineno"><a class="line" href="interleave__indirect__impl_8hpp.xhtml#ae5906e6a6b6d9b3483717ed904366483">  106</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="interleave__indirect__impl_8hpp.xhtml#ae5906e6a6b6d9b3483717ed904366483">FixupRowSums</a>(TOut * &amp;out, <span class="keyword">const</span> int32_t row_sum_multiplier) {</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> height = height_vectors * (vlt == VLType::SVE ? get_vector_length&lt;TOut&gt;() / block :</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                                                  (vlt == VLType::SME ? sme::get_vector_length&lt;TOut&gt;() / block : 1 ));</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="comment">// If we are integrating row sums, we need to do some fix up, depending on whether the multiplier is non-zero or not.</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keywordflow">if</span> (row_sum_multiplier) {</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <span class="comment">// Non-zero: interleave_block&lt;&gt;() will have done the sums, so &#39;out&#39; will point to the start of the</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="comment">// next block (post sums).</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <span class="comment">// We need to go back and apply the multiplier to the computed sums.  We don&#39;t need to change &#39;out&#39;.</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        int32_t *out_int32 = <span class="keyword">reinterpret_cast&lt;</span>int32_t *<span class="keyword">&gt;</span>(out);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        out_int32 -= height;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0; i&lt;height; i++) {</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            out_int32[i] *= row_sum_multiplier;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        }</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        <span class="comment">// Zero: interleave_block&lt;&gt;() will *not* have done the sums, so &#39;out&#39; will point to the start of the</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        <span class="comment">// sum block.  We need to insert the (zero) sums, and advance &#39;out&#39;.</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        int32_t *out_int32 = <span class="keyword">reinterpret_cast&lt;</span>int32_t *<span class="keyword">&gt;</span>(out);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0; i&lt;height; i++) {</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            out_int32[i] = 0;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        }</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        out_int32 += height;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        out = <span class="keyword">reinterpret_cast&lt;</span>TOut *<span class="keyword">&gt;</span>(out_int32);</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    }</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;}</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="keyword">template</span>&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> height_vectors, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> block, VLType vlt, <span class="keyword">typename</span> TIn, <span class="keyword">typename</span> TOut&gt;</div><div class="line"><a name="l00137"></a><span class="lineno"><a class="line" href="interleave__indirect__impl_8hpp.xhtml#af49ac1de6bfb52f17065e939891cb511">  137</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="interleave__indirect__impl_8hpp.xhtml#af49ac1de6bfb52f17065e939891cb511">IndirectInterleave</a>(TOut *out, <span class="keyword">const</span> TIn * <span class="keyword">const</span> * <span class="keyword">const</span> *ptr, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> stringlen,</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> rounded_stringlen, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> y0, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ymax,</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k0, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kmax, <span class="keywordtype">bool</span> integrate_sums,</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                        <span class="keyword">const</span> int32_t row_sum_multiplier) {</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> height = height_vectors * (vlt == VLType::SVE ? get_vector_length&lt;TOut&gt;() / block :</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                                                  (vlt == VLType::SME ? sme::get_vector_length&lt;TOut&gt;() / block : 1 ));</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="comment">// &#39;interleave_block&#39; implementations are entitled to read a pointer for each row they handle from the input</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="comment">// pointer array, even for out of range rows (although they must not subsequently dereference those pointers for</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="comment">// out of range rows).  This allows interleave_block to use techniques like row predication, or loading all</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="comment">// pointers and conditionally overriding the out of range ones.</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="comment">// This is problematic in the &quot;pure&quot; indirect case when we get to the last rows, where it can lead to out of</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="comment">// range reads.  Avoid this with a local buffer to use in last-rows cases.  Use alloca as a std::vector can be</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="comment">// expensive in highly threaded scenarios.</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keyword">const</span> TIn **row_ptrs = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>TIn **<span class="keyword">&gt;</span>(alloca(height * <span class="keyword">sizeof</span>(<span class="keyword">const</span> TIn *)));</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="comment">// Figure out the starting position based on k0 (with rounded length)</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> start_string      = k0 / rounded_stringlen;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> start_stringpos   = k0 % rounded_stringlen;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="comment">// Process blocks of &#39;height&#39; height...</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ybase = y0; ybase &lt; ymax; ybase+=height) {</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        <span class="comment">// Height to process</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> active_height = std::min(ymax - ybase, height);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <span class="comment">// Track our progress through the various strings</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k_left    = (kmax - k0);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <span class="keywordtype">string</span>    = start_string;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> stringpos = start_stringpos;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        <span class="keywordtype">bool</span> first = <span class="keyword">true</span>;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <span class="comment">// Prepare to call &#39;interleave_block&#39; above for each string encompassed by K range</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        <span class="keywordflow">while</span> (k_left &gt; 0) {</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            <span class="comment">// Width to process - and the width we will generate (with padding)</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> in_width   = std::min(k_left, stringlen - stringpos);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> out_width  = std::min(k_left, rounded_stringlen - stringpos);</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            <span class="keyword">const</span> TIn * <span class="keyword">const</span> *row_base = ptr[string] + ybase;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            <span class="comment">// If not all rows are valid, copy the ones that are into local array (see above comment).</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;            <span class="keywordflow">if</span> (active_height &lt; height) {</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0; i&lt;active_height; i++) {</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                    row_ptrs[i] = ptr[string][ybase + i];</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                }</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                row_base = row_ptrs;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;            }</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            <span class="comment">// &#39;integrate_sums&#39; is a function parameter rather than a template parameter to prevent duplicating too</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            <span class="comment">// much code.  However, integrated sums make no sense for non-integral types and won&#39;t ever be</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            <span class="comment">// requested.  So put a type trait check here to avoid generating pointless code.</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            <span class="keywordflow">if</span> (std::is_integral&lt;TOut&gt;::value &amp;&amp; integrate_sums &amp;&amp; row_sum_multiplier) {</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                interleave_block&lt;height_vectors, block, vlt, true&gt;(out, row_base, in_width, active_height, stringpos, first);</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                interleave_block&lt;height_vectors, block, vlt, false&gt;(out, row_base, in_width, active_height, stringpos, first);</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            }</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            k_left -= out_width;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            <span class="keywordtype">string</span>++;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            stringpos=0;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            first=<span class="keyword">false</span>;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        }</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        <span class="keywordflow">if</span> (std::is_integral&lt;TOut&gt;::value &amp;&amp; integrate_sums) {</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;            FixupRowSums&lt;height_vectors, block, vlt&gt;(out, row_sum_multiplier);</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        }</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    }</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;}</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="keyword">template</span>&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> height_vectors, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> block, VLType vlt, <span class="keyword">typename</span> TIn, <span class="keyword">typename</span> TOut&gt;</div><div class="line"><a name="l00209"></a><span class="lineno"><a class="line" href="interleave__indirect__impl_8hpp.xhtml#a80848207d37829b2adcb02ec4dbc6e25">  209</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="interleave__indirect__impl_8hpp.xhtml#a80848207d37829b2adcb02ec4dbc6e25">ConvolutionInterleave</a>(TOut *out, <span class="keyword">const</span> TIn *in, <span class="keywordtype">size_t</span> in_stride, <span class="keyword">const</span> convolver&lt;TIn&gt; &amp;conv, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> rounded_stringlen,</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> y0, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ymax, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k0, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kmax, <span class="keywordtype">bool</span> integrate_sums, <span class="keyword">const</span> int32_t row_sum_multiplier) {</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> height = height_vectors * (vlt == VLType::SVE ? get_vector_length&lt;TOut&gt;() / block :</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                                                  (vlt == VLType::SME ? sme::get_vector_length&lt;TOut&gt;() / block : 1 ));</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keyword">auto</span> conv_cols = conv.process_columns(in, in_stride, k0, kmax, rounded_stringlen);</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="comment">// Use alloca here as a std::vector can be expensive in highly threaded scenarios.</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="keyword">const</span> TIn **row_ptrs = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>TIn **<span class="keyword">&gt;</span>(alloca(height * <span class="keyword">sizeof</span>(<span class="keyword">const</span> TIn *)));</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ybase = y0; ybase &lt; ymax; ybase += height) {</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        <span class="comment">// How many of the rows are active - the rest will get padded in interleave_block.</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> active_height   = std::min(ymax - ybase, height);</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        <span class="keywordtype">bool</span> first = <span class="keyword">true</span>;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        <span class="keyword">auto</span> conv_rows = conv_cols.process_rows(ybase, active_height);</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        <span class="keywordflow">while</span> (!conv_rows.finished()) {</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> width, <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;            <span class="comment">// Get next set of parameters</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;            std::tie(width, offset) = conv_rows.next_block(row_ptrs);</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;            <span class="comment">// Perform the interleave</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;            <span class="keywordflow">if</span> (std::is_integral&lt;TOut&gt;::value &amp;&amp; integrate_sums &amp;&amp; row_sum_multiplier) {</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                interleave_block&lt;height_vectors, block, vlt, true&gt;(out, row_ptrs, width, active_height, <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, first);</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;            } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                interleave_block&lt;height_vectors, block, vlt, false&gt;(out, row_ptrs, width, active_height, <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, first);</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;            }</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;            first=<span class="keyword">false</span>;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        }</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        <span class="keywordflow">if</span> (std::is_integral&lt;TOut&gt;::value &amp;&amp; integrate_sums) {</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;            FixupRowSums&lt;height_vectors, block, vlt&gt;(out, row_sum_multiplier);</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        }</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    }</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;}</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="keyword">template</span>&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> height_vectors, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> block, VLType vlt, <span class="keyword">typename</span> TIn, <span class="keyword">typename</span> TOut&gt;</div><div class="line"><a name="l00248"></a><span class="lineno"><a class="line" href="interleave__indirect__impl_8hpp.xhtml#a83586687128e412348362f142c42f0de">  248</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="interleave__indirect__impl_8hpp.xhtml#a83586687128e412348362f142c42f0de">Interleave</a>(TOut *out, <span class="keyword">const</span> TIn *in, <span class="keywordtype">size_t</span> in_stride, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> y0, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ymax, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k0, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kmax, <span class="keywordtype">bool</span> integrate_sums, <span class="keyword">const</span> int32_t row_sum_multiplier) {</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> height = height_vectors * (vlt == VLType::SVE ? get_vector_length&lt;TOut&gt;() / block :</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                                                  (vlt == VLType::SME ? sme::get_vector_length&lt;TOut&gt;() / block : 1 ));</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="comment">// Use alloca here as a std::vector can be expensive in highly threaded scenarios.</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="keyword">const</span> TIn **row_ptrs = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>TIn **<span class="keyword">&gt;</span>(alloca(height * <span class="keyword">sizeof</span>(<span class="keyword">const</span> TIn *)));</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> width=kmax-k0;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> y=y0; y&lt;ymax; y+=height) {</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> r=0; r&lt;height; r++) {</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;            row_ptrs[r] = in + ((y + r) * in_stride);</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        }</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        <span class="keywordflow">if</span> (std::is_integral&lt;TOut&gt;::value &amp;&amp; integrate_sums &amp;&amp; row_sum_multiplier) {</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;            interleave_block&lt;height_vectors, block, vlt, true&gt;(out, row_ptrs, width, std::min(height, ymax-y), k0, <span class="keyword">true</span>);</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;            interleave_block&lt;height_vectors, block, vlt, false&gt;(out, row_ptrs, width, std::min(height, ymax-y), k0, <span class="keyword">true</span>);</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        }</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        <span class="keywordflow">if</span> (std::is_integral&lt;TOut&gt;::value &amp;&amp; integrate_sums) {</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;            FixupRowSums&lt;height_vectors, block, vlt&gt;(out, row_sum_multiplier);</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        }</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    }</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;}</div><div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a009469e4d9b8fce3b6d5e97d2077827d"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a></div><div class="ttdeci">__global uchar * offset(const Image *img, int x, int y)</div><div class="ttdoc">Get the pointer position of a Image. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01110">helpers.h:1110</a></div></div>
<div class="ttc" id="interleave__indirect__impl_8hpp_xhtml_af49ac1de6bfb52f17065e939891cb511"><div class="ttname"><a href="interleave__indirect__impl_8hpp.xhtml#af49ac1de6bfb52f17065e939891cb511">IndirectInterleave</a></div><div class="ttdeci">void IndirectInterleave(TOut *out, const TIn *const *const *ptr, unsigned int stringlen, unsigned int rounded_stringlen, const unsigned int y0, const unsigned int ymax, const unsigned int k0, const unsigned int kmax, bool integrate_sums, const int32_t row_sum_multiplier)</div><div class="ttdef"><b>Definition:</b> <a href="interleave__indirect__impl_8hpp_source.xhtml#l00137">interleave_indirect_impl.hpp:137</a></div></div>
<div class="ttc" id="interleave__indirect__impl_8hpp_xhtml_a93ab1d882dff72f281412d2b3fe2c2bb"><div class="ttname"><a href="interleave__indirect__impl_8hpp.xhtml#a93ab1d882dff72f281412d2b3fe2c2bb">interleave_block</a></div><div class="ttdeci">void interleave_block(TOut *&amp;out, const TIn *const *in, size_t width, size_t height, size_t row_offset, bool first)</div><div class="ttdef"><b>Definition:</b> <a href="interleave__indirect__impl_8hpp_source.xhtml#l00041">interleave_indirect_impl.hpp:41</a></div></div>
<div class="ttc" id="interleave__indirect__impl_8hpp_xhtml_a83586687128e412348362f142c42f0de"><div class="ttname"><a href="interleave__indirect__impl_8hpp.xhtml#a83586687128e412348362f142c42f0de">Interleave</a></div><div class="ttdeci">void Interleave(TOut *out, const TIn *in, size_t in_stride, const unsigned int y0, const unsigned int ymax, const unsigned int k0, const unsigned int kmax, bool integrate_sums, const int32_t row_sum_multiplier)</div><div class="ttdef"><b>Definition:</b> <a href="interleave__indirect__impl_8hpp_source.xhtml#l00248">interleave_indirect_impl.hpp:248</a></div></div>
<div class="ttc" id="interleave__indirect__impl_8hpp_xhtml_ae5906e6a6b6d9b3483717ed904366483"><div class="ttname"><a href="interleave__indirect__impl_8hpp.xhtml#ae5906e6a6b6d9b3483717ed904366483">FixupRowSums</a></div><div class="ttdeci">void FixupRowSums(TOut *&amp;out, const int32_t row_sum_multiplier)</div><div class="ttdef"><b>Definition:</b> <a href="interleave__indirect__impl_8hpp_source.xhtml#l00106">interleave_indirect_impl.hpp:106</a></div></div>
<div class="ttc" id="interleave__indirect__impl_8hpp_xhtml_a80848207d37829b2adcb02ec4dbc6e25"><div class="ttname"><a href="interleave__indirect__impl_8hpp.xhtml#a80848207d37829b2adcb02ec4dbc6e25">ConvolutionInterleave</a></div><div class="ttdeci">void ConvolutionInterleave(TOut *out, const TIn *in, size_t in_stride, const convolver&lt; TIn &gt; &amp;conv, const unsigned int rounded_stringlen, const unsigned int y0, const unsigned int ymax, const unsigned int k0, const unsigned int kmax, bool integrate_sums, const int32_t row_sum_multiplier)</div><div class="ttdef"><b>Definition:</b> <a href="interleave__indirect__impl_8hpp_source.xhtml#l00209">interleave_indirect_impl.hpp:209</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_d91e1966cc57df4f49d1e07be7697713.xhtml">NEON</a></li><li class="navelem"><a class="el" href="dir_1ce938f580a6f304b99685e2c1dd19db.xhtml">kernels</a></li><li class="navelem"><a class="el" href="dir_9847dd9cb7a28e46201717fa7336cf62.xhtml">arm_gemm</a></li><li class="navelem"><a class="el" href="interleave__indirect__impl_8hpp.xhtml">interleave_indirect_impl.hpp</a></li>
    <li class="footer">Generated on Thu May 18 2023 14:52:27 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
