<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/runtime/CL/CLScheduler.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_c_l_scheduler_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">CLScheduler.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_c_l_scheduler_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2016-2022 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_c_l_scheduler_8h.xhtml">arm_compute/runtime/CL/CLScheduler.h</a>&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_c_l_2_c_l_kernel_library_8h.xhtml">arm_compute/core/CL/CLKernelLibrary.h</a>&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_c_l_tuner_8h.xhtml">arm_compute/runtime/CL/CLTuner.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="core_2_c_l_2_i_c_l_kernel_8h.xhtml">src/core/CL/ICLKernel.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;{</div><div class="line"><a name="l00032"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_scheduler.xhtml#a86409f541991c3ac377c2a6b7d1f832d">   32</a></span>&#160;cl::Context &amp;<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a86409f541991c3ac377c2a6b7d1f832d">CLScheduler::context</a>()</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;{</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!_is_initialised);</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    _context = <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">CLKernelLibrary::get</a>().<a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a86409f541991c3ac377c2a6b7d1f832d">context</a>();</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keywordflow">return</span> _context;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;}</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_scheduler.xhtml#a398a2582c746d28fc125487a44c9ed74">   39</a></span>&#160;cl::CommandQueue &amp;<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a398a2582c746d28fc125487a44c9ed74">CLScheduler::queue</a>()</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!_is_initialised);</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keywordflow">return</span> _queue;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;}</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_scheduler.xhtml#a27561688e2fc60176608ef725a4ecb30">   45</a></span>&#160;<a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a> <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a27561688e2fc60176608ef725a4ecb30">CLScheduler::target</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keywordflow">return</span> _target;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;}</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_scheduler.xhtml#a5c3cecc6734b01ed92d5e66876411e00">   50</a></span>&#160;<a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_heuristics_handle.xhtml">CLGEMMHeuristicsHandle</a> *<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a5c3cecc6734b01ed92d5e66876411e00">CLScheduler::gemm_heuristics</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keywordflow">return</span> _gemm_heuristics;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;}</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9608e5af9f3a199f69ca6aa41b94359a">   55</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9608e5af9f3a199f69ca6aa41b94359a">CLScheduler::set_queue</a>(cl::CommandQueue <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a398a2582c746d28fc125487a44c9ed74">queue</a>)</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;{</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    _queue = std::move(queue);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;}</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_scheduler.xhtml#ad5ba9d34a3a855bf1dd2e36316ff550a">   60</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ad5ba9d34a3a855bf1dd2e36316ff550a">CLScheduler::set_target</a>(<a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a> <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a27561688e2fc60176608ef725a4ecb30">target</a>)</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;{</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    _target = <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a27561688e2fc60176608ef725a4ecb30">target</a>;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;}</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_scheduler.xhtml#ad4e05822793fb639fd65ac30428a7878">   65</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ad4e05822793fb639fd65ac30428a7878">CLScheduler::set_tuner</a>(<a class="code" href="classarm__compute_1_1_i_c_l_tuner.xhtml">ICLTuner</a> *tuner)</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;{</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    _cl_tuner = tuner;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;}</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_scheduler.xhtml#ad55f80ed3cd8b6c4f247763b747016af">   70</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ad55f80ed3cd8b6c4f247763b747016af">CLScheduler::sync</a>()</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;{</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    _queue.finish();</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;}</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_scheduler.xhtml#a6096d26e8e29e1a7f01b0f083fb7e33f">   75</a></span>&#160;cl::Event <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a6096d26e8e29e1a7f01b0f083fb7e33f">CLScheduler::enqueue_sync_event</a>()</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;{</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    cl::Event event;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    _queue.enqueueMarker(&amp;event);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordflow">return</span> event;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;}</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_scheduler.xhtml#a6c2059df991a75abef4eb643510c9544">   82</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a6c2059df991a75abef4eb643510c9544">CLScheduler::tune_kernel_static</a>(<a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml">ICLKernel</a> &amp;kernel)</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;{</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keywordflow">if</span>(_cl_tuner != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    {</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        _cl_tuner-&gt;<a class="code" href="classarm__compute_1_1_i_c_l_tuner.xhtml#a384fdc1bc38a4fc6e79af675cc4aa8e3">tune_kernel_static</a>(kernel);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    }</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;}</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_scheduler.xhtml#acd81d12c19e4080b463244a58118e503">   90</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#acd81d12c19e4080b463244a58118e503">CLScheduler::is_initialised</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keywordflow">return</span> _is_initialised;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;}</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;std::once_flag CLScheduler::_initialize_symbols;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_scheduler.xhtml#a98c15ddf61f1cf0c8d90429f41db09fb">   97</a></span>&#160;<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a98c15ddf61f1cf0c8d90429f41db09fb">CLScheduler::CLScheduler</a>()</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    : _context(), _queue(), _target(<a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a>::<a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3afa362f4daec88442a387ff7cda411a38">MIDGARD</a>), _is_initialised(false), _cl_tuner(nullptr), _gemm_heuristics(nullptr), _backend_type(<a class="code" href="namespacearm__compute.xhtml#a94eb95e47316e7dc5af7615592d26bdd">CLBackendType</a>::<a class="code" href="namespacearm__compute.xhtml#a94eb95e47316e7dc5af7615592d26bdda925641e0b76c28cc940e8f3ca178d826">Native</a>), _job_chaining_enabled(false),</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;      _job_chaining_size(), _job_chaining_count(0)</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;{</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;}</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">  103</a></span>&#160;<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml">CLScheduler</a> &amp;<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>()</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;{</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    std::call_once(_initialize_symbols, <a class="code" href="namespacearm__compute.xhtml#a5f49decb4b0a74d5361686ab45db8961">opencl_is_available</a>);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keyword">static</span> <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml">CLScheduler</a> scheduler;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keywordflow">return</span> scheduler;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;}</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_scheduler.xhtml#ab74ade35e03d97dc260789e541a157ef">  110</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ab74ade35e03d97dc260789e541a157ef">CLScheduler::default_init_with_context</a>(cl::Device &amp;device, cl::Context &amp;ctx, <a class="code" href="classarm__compute_1_1_i_c_l_tuner.xhtml">ICLTuner</a> *cl_tuner, <a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_heuristics_handle.xhtml">CLGEMMHeuristicsHandle</a> *gemm_h)</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;{</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keywordflow">if</span>(!_is_initialised)</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    {</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <span class="keyword">const</span> std::string cl_kernels_folder(<span class="stringliteral">&quot;./cl_kernels/&quot;</span>);</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        cl::CommandQueue  <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a398a2582c746d28fc125487a44c9ed74">queue</a> = cl::CommandQueue(ctx, device);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">CLKernelLibrary::get</a>().<a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a9f976367edcd9ab787375373e050b94b">init</a>(cl_kernels_folder, ctx, device);</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ade56e13dd46cf95a8430a7530ae2cb7f">init</a>(ctx, queue, device, cl_tuner, gemm_h);</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        _cl_tuner = cl_tuner;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    }</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;}</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_scheduler.xhtml#a56d8f451f6b30093a49f1b4978681b07">  122</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a56d8f451f6b30093a49f1b4978681b07">CLScheduler::default_init</a>(<a class="code" href="classarm__compute_1_1_i_c_l_tuner.xhtml">ICLTuner</a> *cl_tuner, <a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_heuristics_handle.xhtml">CLGEMMHeuristicsHandle</a> *gemm_h, <a class="code" href="namespacearm__compute.xhtml#a94eb95e47316e7dc5af7615592d26bdd">CLBackendType</a> cl_backend_type)</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;{</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keywordflow">if</span>(!_is_initialised)</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    {</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        cl::Context ctx;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        cl::Device  dev;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        cl_int      err;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        std::tie(ctx, dev, err) = <a class="code" href="namespacearm__compute.xhtml#a419153497f83b7db0c19112371b10a3f">create_opencl_context_and_device</a>(cl_backend_type);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(err != CL_SUCCESS, <span class="stringliteral">&quot;Failed to create OpenCL context&quot;</span>);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        cl::CommandQueue <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a398a2582c746d28fc125487a44c9ed74">queue</a> = cl::CommandQueue(ctx, dev);</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">CLKernelLibrary::get</a>().<a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a9f976367edcd9ab787375373e050b94b">init</a>(<span class="stringliteral">&quot;./cl_kernels/&quot;</span>, ctx, dev);</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ade56e13dd46cf95a8430a7530ae2cb7f">init</a>(ctx, queue, dev, cl_tuner, gemm_h);</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    }</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="comment">// Set CL tuner and GEMM heuristics</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    _cl_tuner        = cl_tuner;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    _gemm_heuristics = gemm_h;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;}</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_scheduler.xhtml#a038d136792f815c57fcdf93b0a59f5f1">  141</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a038d136792f815c57fcdf93b0a59f5f1">CLScheduler::default_reinit</a>(<a class="code" href="classarm__compute_1_1_i_c_l_tuner.xhtml">ICLTuner</a> *cl_tuner, <a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_heuristics_handle.xhtml">CLGEMMHeuristicsHandle</a> *gemm_h, <a class="code" href="namespacearm__compute.xhtml#a94eb95e47316e7dc5af7615592d26bdd">CLBackendType</a> cl_backend_type)</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;{</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    _is_initialised = <span class="keyword">false</span>;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a56d8f451f6b30093a49f1b4978681b07">default_init</a>(cl_tuner, gemm_h, cl_backend_type);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;}</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_scheduler.xhtml#a293edc1bbcbddffb7228ac97917ed107">  148</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a293edc1bbcbddffb7228ac97917ed107">CLScheduler::set_context</a>(cl::Context <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a86409f541991c3ac377c2a6b7d1f832d">context</a>)</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;{</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    _context = std::move(context);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">CLKernelLibrary::get</a>().<a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a293edc1bbcbddffb7228ac97917ed107">set_context</a>(_context);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;}</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_scheduler.xhtml#ade56e13dd46cf95a8430a7530ae2cb7f">  154</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ade56e13dd46cf95a8430a7530ae2cb7f">CLScheduler::init</a>(cl::Context <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a86409f541991c3ac377c2a6b7d1f832d">context</a>, cl::CommandQueue <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a398a2582c746d28fc125487a44c9ed74">queue</a>, <span class="keyword">const</span> cl::Device &amp;device, <a class="code" href="classarm__compute_1_1_i_c_l_tuner.xhtml">ICLTuner</a> *cl_tuner, <a class="code" href="classarm__compute_1_1_c_l_g_e_m_m_heuristics_handle.xhtml">CLGEMMHeuristicsHandle</a> *gemm_h, <a class="code" href="namespacearm__compute.xhtml#a94eb95e47316e7dc5af7615592d26bdd">CLBackendType</a> cl_backend_type)</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;{</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a293edc1bbcbddffb7228ac97917ed107">set_context</a>(std::move(context));</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    _queue           = std::move(queue);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    _target          = <a class="code" href="namespacearm__compute.xhtml#a281384aa081efe5819eedd6a7c2a429b">get_target_from_device</a>(device);</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    _is_initialised  = <span class="keyword">true</span>;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    _cl_tuner        = cl_tuner;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    _gemm_heuristics = gemm_h;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    _backend_type    = cl_backend_type;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;}</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="keywordtype">void</span> CLScheduler::enqueue_common(<a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml">ICLKernel</a> &amp;kernel, <a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> &amp;tensors, <span class="keywordtype">bool</span> flush)</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;{</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(!_is_initialised,</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                             <span class="stringliteral">&quot;The CLScheduler is not initialised yet! Please call the CLScheduler::get().default_init(), \</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="stringliteral">                             or CLScheduler::get()::init() and CLKernelLibrary::get()::init() function before running functions!&quot;</span>);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> inject_memory = !tensors.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a644718bb2fb240de962dc3c9a1fdf0dc">empty</a>();</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="comment">// Tune the kernel if the CLTuner has been provided</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keywordflow">if</span>(_cl_tuner != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    {</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        inject_memory ? _cl_tuner-&gt;<a class="code" href="classarm__compute_1_1_i_c_l_tuner.xhtml#ae12d76ff3471c1f73c62b7c65addc1ec">tune_kernel_dynamic</a>(kernel, tensors) : _cl_tuner-&gt;<a class="code" href="classarm__compute_1_1_i_c_l_tuner.xhtml#ae12d76ff3471c1f73c62b7c65addc1ec">tune_kernel_dynamic</a>(kernel);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    }</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="comment">// Run kernel</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    inject_memory ? kernel.<a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a11b2791dada6be4d5857a18b0dafb550">run_op</a>(tensors, kernel.<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>(), _queue) : kernel.<a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a9d5ccb74e06677836b3ca4f30e6962da">run</a>(kernel.<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>(), _queue);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="keywordflow">if</span>(_job_chaining_enabled)</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    {</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        ++_job_chaining_count;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    }</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    flush_queue(flush);</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;}</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="keywordtype">void</span> CLScheduler::flush_queue(<span class="keywordtype">bool</span> flush)</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;{</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="keywordflow">if</span>(_job_chaining_enabled)</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    {</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        <span class="keywordflow">if</span>(_job_chaining_count &gt;= _job_chaining_size)</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        {</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            _job_chaining_count = 0;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            _queue.flush();</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        }</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    }</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(flush)</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    {</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        _queue.flush();</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    }</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;}</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div><div class="line"><a name="l00205"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">  205</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">CLScheduler::enqueue</a>(<a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml">ICLKernel</a> &amp;kernel, <span class="keywordtype">bool</span> flush)</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;{</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    enqueue_common(kernel, pack, flush);</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;}</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_scheduler.xhtml#a5c0fc6f465cae029d60ffdfc7f3e99d9">  211</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a5c0fc6f465cae029d60ffdfc7f3e99d9">CLScheduler::enqueue_op</a>(<a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml">ICLKernel</a> &amp;kernel, <a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> &amp;tensors, <span class="keywordtype">bool</span> flush)</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;{</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    enqueue_common(kernel, tensors, flush);</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;}</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div><div class="line"><a name="l00216"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_scheduler.xhtml#a82200125de0667aac827261b47121ff7">  216</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a82200125de0667aac827261b47121ff7">CLScheduler::enable_job_chaining</a>(<span class="keywordtype">int</span> job_chaining_size)</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;{</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    _job_chaining_enabled = <span class="keyword">true</span>;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    _job_chaining_size    = job_chaining_size;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;}</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_ad5ba9d34a3a855bf1dd2e36316ff550a"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#ad5ba9d34a3a855bf1dd2e36316ff550a">arm_compute::CLScheduler::set_target</a></div><div class="ttdeci">void set_target(GPUTarget target)</div><div class="ttdoc">Accessor to set target GPU to be used by the scheduler. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00060">CLScheduler.cpp:60</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_kernel_xhtml_ad34a46f53686c12a5c5e717cc9617fb6"><div class="ttname"><a href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">arm_compute::IKernel::window</a></div><div class="ttdeci">const Window &amp; window() const</div><div class="ttdoc">The maximum window the kernel can be executed on. </div><div class="ttdef"><b>Definition:</b> <a href="_i_kernel_8cpp_source.xhtml#l00028">IKernel.cpp:28</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a038d136792f815c57fcdf93b0a59f5f1"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a038d136792f815c57fcdf93b0a59f5f1">arm_compute::CLScheduler::default_reinit</a></div><div class="ttdeci">void default_reinit(ICLTuner *cl_tuner=nullptr, CLGEMMHeuristicsHandle *gemm_h=nullptr, CLBackendType cl_backend_type=CLBackendType::Native)</div><div class="ttdoc">Re-initializes the context and command queue used by the scheduler to default values and sets a defau...</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00141">CLScheduler.cpp:141</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_kernel_xhtml_a9d5ccb74e06677836b3ca4f30e6962da"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml#a9d5ccb74e06677836b3ca4f30e6962da">arm_compute::ICLKernel::run</a></div><div class="ttdeci">virtual void run(const Window &amp;window, cl::CommandQueue &amp;queue)</div><div class="ttdoc">Enqueue the OpenCL kernel to process the given window on the passed OpenCL command queue...</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00328">ICLKernel.h:328</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a9b58d0eb9a2af8e6d7908695e1557d6c"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">arm_compute::CLScheduler::get</a></div><div class="ttdeci">static CLScheduler &amp; get()</div><div class="ttdoc">Access the scheduler singleton. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00103">CLScheduler.cpp:103</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a82200125de0667aac827261b47121ff7"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a82200125de0667aac827261b47121ff7">arm_compute::CLScheduler::enable_job_chaining</a></div><div class="ttdeci">void enable_job_chaining(int job_chaining_size)</div><div class="ttdoc">Enable job chaining. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00216">CLScheduler.cpp:216</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_pack_xhtml_a644718bb2fb240de962dc3c9a1fdf0dc"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_pack.xhtml#a644718bb2fb240de962dc3c9a1fdf0dc">arm_compute::ITensorPack::empty</a></div><div class="ttdeci">bool empty() const</div><div class="ttdoc">Checks if pack is empty. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_pack_8cpp_source.xhtml#l00080">ITensorPack.cpp:80</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a27561688e2fc60176608ef725a4ecb30"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a27561688e2fc60176608ef725a4ecb30">arm_compute::CLScheduler::target</a></div><div class="ttdeci">GPUTarget target() const</div><div class="ttdoc">Get the target GPU. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00045">CLScheduler.cpp:45</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a293edc1bbcbddffb7228ac97917ed107"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a293edc1bbcbddffb7228ac97917ed107">arm_compute::CLScheduler::set_context</a></div><div class="ttdeci">void set_context(cl::Context context)</div><div class="ttdoc">Accessor to set the CL context to be used by the scheduler. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00148">CLScheduler.cpp:148</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_ab74ade35e03d97dc260789e541a157ef"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#ab74ade35e03d97dc260789e541a157ef">arm_compute::CLScheduler::default_init_with_context</a></div><div class="ttdeci">void default_init_with_context(cl::Device &amp;device, cl::Context &amp;ctx, ICLTuner *cl_tuner=nullptr, CLGEMMHeuristicsHandle *gemm_h=nullptr)</div><div class="ttdoc">Initialises the scheduler with context and device provided by the user. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00110">CLScheduler.cpp:110</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a56d8f451f6b30093a49f1b4978681b07"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a56d8f451f6b30093a49f1b4978681b07">arm_compute::CLScheduler::default_init</a></div><div class="ttdeci">void default_init(ICLTuner *cl_tuner=nullptr, CLGEMMHeuristicsHandle *gemm_h=nullptr, CLBackendType cl_backend_type=CLBackendType::Native)</div><div class="ttdoc">Initialises the context and command queue used by the scheduler to default values and sets a default ...</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00122">CLScheduler.cpp:122</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a94eb95e47316e7dc5af7615592d26bdda925641e0b76c28cc940e8f3ca178d826"><div class="ttname"><a href="namespacearm__compute.xhtml#a94eb95e47316e7dc5af7615592d26bdda925641e0b76c28cc940e8f3ca178d826">arm_compute::CLBackendType::Native</a></div><div class="ttdoc">OpenCL native backend. </div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_tuner_xhtml_ae12d76ff3471c1f73c62b7c65addc1ec"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_tuner.xhtml#ae12d76ff3471c1f73c62b7c65addc1ec">arm_compute::ICLTuner::tune_kernel_dynamic</a></div><div class="ttdeci">virtual void tune_kernel_dynamic(ICLKernel &amp;kernel)=0</div><div class="ttdoc">Tune OpenCL kernel dynamically. </div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_acba005f5ce2c62cbf3f94d074d9007aa"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">arm_compute::CLKernelLibrary::get</a></div><div class="ttdeci">static CLKernelLibrary &amp; get()</div><div class="ttdoc">Access the KernelLibrary singleton. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00039">CLKernelLibrary.cpp:39</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_acd81d12c19e4080b463244a58118e503"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#acd81d12c19e4080b463244a58118e503">arm_compute::CLScheduler::is_initialised</a></div><div class="ttdeci">bool is_initialised() const</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00090">CLScheduler.cpp:90</a></div></div>
<div class="ttc" id="arm__compute_2core_2_c_l_2_c_l_kernel_library_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_c_l_2_c_l_kernel_library_8h.xhtml">CLKernelLibrary.h</a></div><div class="ttdoc">Manages all the OpenCL kernels compilation and caching, provides accessors for the OpenCL Context...</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a419153497f83b7db0c19112371b10a3f"><div class="ttname"><a href="namespacearm__compute.xhtml#a419153497f83b7db0c19112371b10a3f">arm_compute::create_opencl_context_and_device</a></div><div class="ttdeci">std::tuple&lt; cl::Context, cl::Device, cl_int &gt; create_opencl_context_and_device(CLBackendType cl_backend_type)</div><div class="ttdoc">This function creates an OpenCL context and a device. </div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00126">CLHelpers.cpp:126</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_a293edc1bbcbddffb7228ac97917ed107"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#a293edc1bbcbddffb7228ac97917ed107">arm_compute::CLKernelLibrary::set_context</a></div><div class="ttdeci">void set_context(cl::Context context)</div><div class="ttdoc">Sets the CL context used to create programs. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00077">CLKernelLibrary.cpp:77</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_kernel_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml">arm_compute::ICLKernel</a></div><div class="ttdoc">Common interface for all the OpenCL kernels. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00067">ICLKernel.h:67</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a5c3cecc6734b01ed92d5e66876411e00"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a5c3cecc6734b01ed92d5e66876411e00">arm_compute::CLScheduler::gemm_heuristics</a></div><div class="ttdeci">CLGEMMHeuristicsHandle * gemm_heuristics() const</div><div class="ttdoc">Accessor for the associated CLGEMMHeuristicsHandle. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00050">CLScheduler.cpp:50</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2023 Arm Limited. </div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="_c_l_scheduler_8h_xhtml"><div class="ttname"><a href="_c_l_scheduler_8h.xhtml">CLScheduler.h</a></div><div class="ttdoc">Interface to enqueue OpenCL kernels and get/set the OpenCL CommandQueue and ICLTuner. </div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a86409f541991c3ac377c2a6b7d1f832d"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a86409f541991c3ac377c2a6b7d1f832d">arm_compute::CLScheduler::context</a></div><div class="ttdeci">cl::Context &amp; context()</div><div class="ttdoc">Accessor for the associated CL context. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00032">CLScheduler.cpp:32</a></div></div>
<div class="ttc" id="core_2_c_l_2_i_c_l_kernel_8h_xhtml"><div class="ttname"><a href="core_2_c_l_2_i_c_l_kernel_8h.xhtml">ICLKernel.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a6096d26e8e29e1a7f01b0f083fb7e33f"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a6096d26e8e29e1a7f01b0f083fb7e33f">arm_compute::CLScheduler::enqueue_sync_event</a></div><div class="ttdeci">cl::Event enqueue_sync_event()</div><div class="ttdoc">Enqueues a marker into the associated command queue and return the event. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00075">CLScheduler.cpp:75</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a0b0eb3235749a2909dc5a101afe59a1b"><div class="ttname"><a href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond, msg)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00456">Error.h:456</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a5c0fc6f465cae029d60ffdfc7f3e99d9"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a5c0fc6f465cae029d60ffdfc7f3e99d9">arm_compute::CLScheduler::enqueue_op</a></div><div class="ttdeci">void enqueue_op(ICLKernel &amp;kernel, ITensorPack &amp;tensors, bool flush=true)</div><div class="ttdoc">Schedule the execution of the passed kernel if possible. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00211">CLScheduler.cpp:211</a></div></div>
<div class="ttc" id="_c_l_tuner_8h_xhtml"><div class="ttname"><a href="_c_l_tuner_8h.xhtml">CLTuner.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a281384aa081efe5819eedd6a7c2a429b"><div class="ttname"><a href="namespacearm__compute.xhtml#a281384aa081efe5819eedd6a7c2a429b">arm_compute::get_target_from_device</a></div><div class="ttdeci">GPUTarget get_target_from_device(const cl::Device &amp;device)</div><div class="ttdoc">Helper function to get the GPU target from CL device. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00223">CLHelpers.cpp:223</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_a9f976367edcd9ab787375373e050b94b"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#a9f976367edcd9ab787375373e050b94b">arm_compute::CLKernelLibrary::init</a></div><div class="ttdeci">void init(std::string kernel_path, cl::Context context, cl::Device device)</div><div class="ttdoc">Initialises the kernel library. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00056">CLKernelLibrary.cpp:56</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_ad4e05822793fb639fd65ac30428a7878"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#ad4e05822793fb639fd65ac30428a7878">arm_compute::CLScheduler::set_tuner</a></div><div class="ttdeci">void set_tuner(ICLTuner *tuner)</div><div class="ttdoc">Accessor to set the CL tuner to be used by the scheduler. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00065">CLScheduler.cpp:65</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a398a2582c746d28fc125487a44c9ed74"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a398a2582c746d28fc125487a44c9ed74">arm_compute::CLScheduler::queue</a></div><div class="ttdeci">cl::CommandQueue &amp; queue()</div><div class="ttdoc">Accessor for the associated CL command queue. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00039">CLScheduler.cpp:39</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_ae1a643e517f50bf0392fb6516dd7cf67"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">arm_compute::CLScheduler::enqueue</a></div><div class="ttdeci">void enqueue(ICLKernel &amp;kernel, bool flush=true)</div><div class="ttdoc">Schedule the execution of the passed kernel if possible. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00205">CLScheduler.cpp:205</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a9608e5af9f3a199f69ca6aa41b94359a"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a9608e5af9f3a199f69ca6aa41b94359a">arm_compute::CLScheduler::set_queue</a></div><div class="ttdeci">void set_queue(cl::CommandQueue queue)</div><div class="ttdoc">Accessor to set the CL command queue to be used by the scheduler. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00055">CLScheduler.cpp:55</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a1e041dc03ff256dfc8b0bf5c5fe099e0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">arm_compute::test::validation::pack</a></div><div class="ttdeci">ITensorPack pack</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00188">Im2Col.cpp:188</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a98c15ddf61f1cf0c8d90429f41db09fb"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a98c15ddf61f1cf0c8d90429f41db09fb">arm_compute::CLScheduler::CLScheduler</a></div><div class="ttdeci">CLScheduler()</div><div class="ttdoc">Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00097">CLScheduler.cpp:97</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_ad55f80ed3cd8b6c4f247763b747016af"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#ad55f80ed3cd8b6c4f247763b747016af">arm_compute::CLScheduler::sync</a></div><div class="ttdeci">void sync()</div><div class="ttdoc">Blocks until all commands in the associated command queue have finished. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00070">CLScheduler.cpp:70</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_g_e_m_m_heuristics_handle_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_g_e_m_m_heuristics_handle.xhtml">arm_compute::CLGEMMHeuristicsHandle</a></div><div class="ttdoc">Handle for loading and retrieving GEMM heuristics. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_g_e_m_m_heuristics_handle_8h_source.xhtml#l00038">CLGEMMHeuristicsHandle.h:38</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a94eb95e47316e7dc5af7615592d26bdd"><div class="ttname"><a href="namespacearm__compute.xhtml#a94eb95e47316e7dc5af7615592d26bdd">arm_compute::CLBackendType</a></div><div class="ttdeci">CLBackendType</div><div class="ttdoc">List the possible OpenCL backends. </div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2_c_l_types_8h_source.xhtml#l00055">CLTypes.h:55</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">arm_compute::GPUTarget</a></div><div class="ttdeci">GPUTarget</div><div class="ttdoc">Available GPU Targets. </div><div class="ttdef"><b>Definition:</b> <a href="_g_p_u_target_8h_source.xhtml#l00034">GPUTarget.h:34</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_tuner_xhtml_a384fdc1bc38a4fc6e79af675cc4aa8e3"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_tuner.xhtml#a384fdc1bc38a4fc6e79af675cc4aa8e3">arm_compute::ICLTuner::tune_kernel_static</a></div><div class="ttdeci">virtual void tune_kernel_static(ICLKernel &amp;kernel)=0</div><div class="ttdoc">Tune OpenCL kernel statically. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3afa362f4daec88442a387ff7cda411a38"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3afa362f4daec88442a387ff7cda411a38">arm_compute::GPUTarget::MIDGARD</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml">arm_compute::CLScheduler</a></div><div class="ttdoc">Provides global access to a CL context and command queue. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8h_source.xhtml#l00043">CLScheduler.h:43</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_pack_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_pack.xhtml">arm_compute::ITensorPack</a></div><div class="ttdoc">Tensor packing service. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_pack_8h_source.xhtml#l00039">ITensorPack.h:39</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_tuner_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_tuner.xhtml">arm_compute::ICLTuner</a></div><div class="ttdoc">Basic interface for tuning the OpenCL kernels. </div><div class="ttdef"><b>Definition:</b> <a href="_i_c_l_tuner_8h_source.xhtml#l00034">ICLTuner.h:34</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a6c2059df991a75abef4eb643510c9544"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a6c2059df991a75abef4eb643510c9544">arm_compute::CLScheduler::tune_kernel_static</a></div><div class="ttdeci">void tune_kernel_static(ICLKernel &amp;kernel)</div><div class="ttdoc">Tunes OpenCL kernel. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00082">CLScheduler.cpp:82</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_l_kernel_xhtml_a11b2791dada6be4d5857a18b0dafb550"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml#a11b2791dada6be4d5857a18b0dafb550">arm_compute::ICLKernel::run_op</a></div><div class="ttdeci">virtual void run_op(ITensorPack &amp;tensors, const Window &amp;window, cl::CommandQueue &amp;queue)</div><div class="ttdoc">Enqueue the OpenCL kernel to process the given window on the passed OpenCL command queue...</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00340">ICLKernel.h:340</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_ade56e13dd46cf95a8430a7530ae2cb7f"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#ade56e13dd46cf95a8430a7530ae2cb7f">arm_compute::CLScheduler::init</a></div><div class="ttdeci">void init(cl::Context context, cl::CommandQueue queue, const cl::Device &amp;device, ICLTuner *cl_tuner=nullptr, CLGEMMHeuristicsHandle *gemm_h=nullptr, CLBackendType cl_backend_type=CLBackendType::Native)</div><div class="ttdoc">Initialises the context and command queue to be used by the scheduler. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00154">CLScheduler.cpp:154</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5f49decb4b0a74d5361686ab45db8961"><div class="ttname"><a href="namespacearm__compute.xhtml#a5f49decb4b0a74d5361686ab45db8961">arm_compute::opencl_is_available</a></div><div class="ttdeci">bool opencl_is_available()</div><div class="ttdoc">Check if OpenCL is available. </div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8cpp_source.xhtml#l00203">OpenCL.cpp:203</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_a86409f541991c3ac377c2a6b7d1f832d"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#a86409f541991c3ac377c2a6b7d1f832d">arm_compute::CLKernelLibrary::context</a></div><div class="ttdeci">cl::Context &amp; context()</div><div class="ttdoc">Accessor for the associated CL context. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00065">CLKernelLibrary.cpp:65</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_bf9f26469d00835ba20ff8d80ee5a804.xhtml">runtime</a></li><li class="navelem"><a class="el" href="dir_43c3fdbf778d1fd99e2e38f09fddd920.xhtml">CL</a></li><li class="navelem"><a class="el" href="_c_l_scheduler_8cpp.xhtml">CLScheduler.cpp</a></li>
    <li class="footer">Generated on Thu May 18 2023 14:52:30 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
