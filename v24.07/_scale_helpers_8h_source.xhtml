<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/helpers/ScaleHelpers.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.07</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_scale_helpers_8h_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">ScaleHelpers.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_scale_helpers_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">* Copyright (c) 2020-2021 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef SRC_CORE_HELPERS_SCALEHELPERS_H</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define SRC_CORE_HELPERS_SCALEHELPERS_H</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160; </div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_error_8h.xhtml">arm_compute/core/Error.h</a>&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_quantization_info_8h.xhtml">arm_compute/core/QuantizationInfo.h</a>&quot;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160; </div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;cmath&gt;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;cstddef&gt;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &lt;cstdint&gt;</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160; </div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div>
<div class="line"><a name="l00037"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1scale__helpers.xhtml">   37</a></span>&#160;<span class="keyword">namespace </span>scale_helpers</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{<span class="comment"></span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">/** Computes bilinear interpolation for quantized input and output, using the pointer to the top-left pixel and the pixel&#39;s distance between</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment"> * the real coordinates and the smallest following integer coordinates. Input must be QASYMM8 and in single channel format.</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment"> * @param[in] pixel_ptr Pointer to the top-left pixel value of a single channel input.</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment"> * @param[in] stride    Stride to access the bottom-left and bottom-right pixel values</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment"> * @param[in] dx        Pixel&#39;s distance between the X real coordinate and the smallest X following integer</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment"> * @param[in] dy        Pixel&#39;s distance between the Y real coordinate and the smallest Y following integer</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment"> * @param[in] iq_info   Input QuantizationInfo</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment"> * @param[in] oq_info   Output QuantizationInfo</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment"> * @note dx and dy must be in the range [0, 1.0]</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment"> * @return The bilinear interpolated pixel value</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00053"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1scale__helpers.xhtml#a808177a93b7ebfd3a999f16c5ff08111">   53</a></span>&#160;<span class="keyword">inline</span> uint8_t <a class="code" href="namespacearm__compute_1_1scale__helpers.xhtml#a808177a93b7ebfd3a999f16c5ff08111">delta_bilinear_c1_quantized</a>(<span class="keyword">const</span> uint8_t          *pixel_ptr,</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;                                           <span class="keywordtype">size_t</span>                  stride,</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;                                           <span class="keywordtype">float</span>                   dx,</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;                                           <span class="keywordtype">float</span>                   dy,</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;                                           <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> iq_info,</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;                                           <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> oq_info)</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;{</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(pixel_ptr == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160; </div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> dx1 = 1.0f - dx;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> dy1 = 1.0f - dy;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160; </div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> a00 = <a class="code" href="namespacearm__compute.xhtml#ac1d8253f8b422e143ab989ad2a4d29dd">dequantize_qasymm8</a>(*pixel_ptr, iq_info);</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> a01 = <a class="code" href="namespacearm__compute.xhtml#ac1d8253f8b422e143ab989ad2a4d29dd">dequantize_qasymm8</a>(*(pixel_ptr + 1), iq_info);</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> a10 = <a class="code" href="namespacearm__compute.xhtml#ac1d8253f8b422e143ab989ad2a4d29dd">dequantize_qasymm8</a>(*(pixel_ptr + stride), iq_info);</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> a11 = <a class="code" href="namespacearm__compute.xhtml#ac1d8253f8b422e143ab989ad2a4d29dd">dequantize_qasymm8</a>(*(pixel_ptr + stride + 1), iq_info);</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160; </div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> w1  = dx1 * dy1;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> w2  = dx * dy1;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> w3  = dx1 * dy;</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> w4  = dx * dy;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keywordtype">float</span>       res = a00 * w1 + a01 * w2 + a10 * w3 + a11 * w4;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>uint8_t<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute.xhtml#ab8cef8b31b552b532a14ab8815e06285">quantize_qasymm8</a>(res, oq_info));</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;}</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">/** Computes bilinear interpolation for quantized input and output, using the pointer to the top-left pixel and the pixel&#39;s distance between</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment"> * the real coordinates and the smallest following integer coordinates. Input must be QASYMM8_SIGNED and in single channel format.</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment"> * @param[in] pixel_ptr Pointer to the top-left pixel value of a single channel input.</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment"> * @param[in] stride    Stride to access the bottom-left and bottom-right pixel values</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment"> * @param[in] dx        Pixel&#39;s distance between the X real coordinate and the smallest X following integer</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment"> * @param[in] dy        Pixel&#39;s distance between the Y real coordinate and the smallest Y following integer</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment"> * @param[in] iq_info   Input QuantizationInfo</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment"> * @param[in] oq_info   Output QuantizationInfo</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment"> * @note dx and dy must be in the range [0, 1.0]</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment"> * @return The bilinear interpolated pixel value</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00092"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1scale__helpers.xhtml#a853a7e5acb69871859a9e087ac192a84">   92</a></span>&#160;<span class="keyword">inline</span> int8_t <a class="code" href="namespacearm__compute_1_1scale__helpers.xhtml#a808177a93b7ebfd3a999f16c5ff08111">delta_bilinear_c1_quantized</a>(<span class="keyword">const</span> int8_t           *pixel_ptr,</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                                          <span class="keywordtype">size_t</span>                  stride,</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                                          <span class="keywordtype">float</span>                   dx,</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                                          <span class="keywordtype">float</span>                   dy,</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                                          <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> iq_info,</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                                          <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> oq_info)</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;{</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(pixel_ptr == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160; </div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> dx1 = 1.0f - dx;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> dy1 = 1.0f - dy;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160; </div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> a00 = <a class="code" href="namespacearm__compute.xhtml#afe6fcf1a0c6f6c2d2cb10a8c14fa9131">dequantize_qasymm8_signed</a>(*pixel_ptr, iq_info);</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> a01 = <a class="code" href="namespacearm__compute.xhtml#afe6fcf1a0c6f6c2d2cb10a8c14fa9131">dequantize_qasymm8_signed</a>(*(pixel_ptr + 1), iq_info);</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> a10 = <a class="code" href="namespacearm__compute.xhtml#afe6fcf1a0c6f6c2d2cb10a8c14fa9131">dequantize_qasymm8_signed</a>(*(pixel_ptr + stride), iq_info);</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> a11 = <a class="code" href="namespacearm__compute.xhtml#afe6fcf1a0c6f6c2d2cb10a8c14fa9131">dequantize_qasymm8_signed</a>(*(pixel_ptr + stride + 1), iq_info);</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160; </div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> w1  = dx1 * dy1;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> w2  = dx * dy1;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> w3  = dx1 * dy;</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> w4  = dx * dy;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keywordtype">float</span>       res = a00 * w1 + a01 * w2 + a10 * w3 + a11 * w4;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>int8_t<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">quantize_qasymm8_signed</a>(res, oq_info));</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;}</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">/** Return the pixel at (x,y) using area interpolation by clamping when out of borders. The image must be single channel U8</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment"> * @note The interpolation area depends on the width and height ration of the input and output images</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment"> * @note Currently average of the contributing pixels is calculated</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment"> * @param[in] first_pixel_ptr Pointer to the first pixel of a single channel U8 image.</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment"> * @param[in] stride          Stride in bytes of the image</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment"> * @param[in] width           Width of the image</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment"> * @param[in] height          Height of the image</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment"> * @param[in] wr              Width ratio among the input image width and output image width.</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment"> * @param[in] hr              Height ratio among the input image height and output image height.</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment"> * @param[in] x               X position of the wanted pixel</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment"> * @param[in] y               Y position of the wanted pixel</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment"> * @return The pixel at (x, y) using area interpolation.</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00133"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1scale__helpers.xhtml#a5381913903c50de7cbb7ebcb18ca4847">  133</a></span>&#160;<span class="keyword">inline</span> uint8_t <a class="code" href="namespacearm__compute_1_1scale__helpers.xhtml#a5381913903c50de7cbb7ebcb18ca4847">pixel_area_c1u8_clamp</a>(</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keyword">const</span> uint8_t *first_pixel_ptr, <span class="keywordtype">size_t</span> stride, <span class="keywordtype">size_t</span> width, <span class="keywordtype">size_t</span> height, <span class="keywordtype">float</span> wr, <span class="keywordtype">float</span> hr, <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y)</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;{</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(first_pixel_ptr == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160; </div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="comment">// Calculate sampling position</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keywordtype">float</span> in_x = (x + 0.5f) * wr - 0.5f;</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keywordtype">float</span> in_y = (y + 0.5f) * hr - 0.5f;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160; </div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="comment">// Get bounding box offsets</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keywordtype">int</span> x_from = std::floor(x * wr - 0.5f - in_x);</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keywordtype">int</span> y_from = std::floor(y * hr - 0.5f - in_y);</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keywordtype">int</span> x_to   = std::ceil((x + 1) * wr - 0.5f - in_x);</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keywordtype">int</span> y_to   = std::ceil((y + 1) * hr - 0.5f - in_y);</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160; </div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="comment">// Clamp position to borders</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    in_x = std::max(-1.f, std::min(in_x, <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(width)));</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    in_y = std::max(-1.f, std::min(in_y, <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(height)));</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160; </div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="comment">// Clamp bounding box offsets to borders</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    x_from = ((in_x + x_from) &lt; -1) ? -1 : x_from;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    y_from = ((in_y + y_from) &lt; -1) ? -1 : y_from;</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    x_to   = ((in_x + x_to) &gt; width) ? (width - in_x) : x_to;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    y_to   = ((in_y + y_to) &gt; height) ? (height - in_y) : y_to;</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160; </div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="comment">// Get pixel index</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> xi = std::floor(in_x);</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> yi = std::floor(in_y);</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160; </div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="comment">// Bounding box elements in each dimension</span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> x_elements = (x_to - x_from + 1);</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> y_elements = (y_to - y_from + 1);</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(x_elements == 0 || y_elements == 0);</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160; </div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="comment">// Sum pixels in area</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keywordtype">int</span> sum = 0;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = yi + y_from, je = yi + y_to; j &lt;= je; ++j)</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    {</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        <span class="keyword">const</span> uint8_t *ptr = first_pixel_ptr + j * stride + xi + x_from;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        sum                = <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a48e7832f8e28c3f7fc0ded12467f8bb0">std::accumulate</a>(ptr, ptr + x_elements, sum);</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    }</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160; </div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="comment">// Return average</span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="keywordflow">return</span> sum / (x_elements * y_elements);</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;}</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="comment">/** Computes bilinear interpolation using the top-left, top-right, bottom-left, bottom-right pixels and the pixel&#39;s distance between</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment"> * the real coordinates and the smallest following integer coordinates.</span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment"> * @param[in] a00    The top-left pixel value.</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment"> * @param[in] a01    The top-right pixel value.</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="comment"> * @param[in] a10    The bottom-left pixel value.</span></div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment"> * @param[in] a11    The bottom-right pixel value.</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment"> * @param[in] dx_val Pixel&#39;s distance between the X real coordinate and the smallest X following integer</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment"> * @param[in] dy_val Pixel&#39;s distance between the Y real coordinate and the smallest Y following integer</span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment"> * @note dx and dy must be in the range [0, 1.0]</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="comment"> * @return The bilinear interpolated pixel value</span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00193"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1scale__helpers.xhtml#aeb969d3b0e5ceb8597c39b708f0df6e8">  193</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1scale__helpers.xhtml#aeb969d3b0e5ceb8597c39b708f0df6e8">delta_bilinear</a>(<span class="keywordtype">float</span> a00, <span class="keywordtype">float</span> a01, <span class="keywordtype">float</span> a10, <span class="keywordtype">float</span> a11, <span class="keywordtype">float</span> dx_val, <span class="keywordtype">float</span> dy_val)</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;{</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> dx1_val = 1.0f - dx_val;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> dy1_val = 1.0f - dy_val;</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160; </div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> w1 = dx1_val * dy1_val;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> w2 = dx_val * dy1_val;</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> w3 = dx1_val * dy_val;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> w4 = dx_val * dy_val;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="keywordflow">return</span> a00 * w1 + a01 * w2 + a10 * w3 + a11 * w4;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;}</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;} <span class="comment">// namespace scale_helpers</span></div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;} <span class="comment">// namespace arm_compute</span></div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160; </div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* SRC_CORE_HELPERS_SCALEHELPERS_H */</span><span class="preprocessor"></span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="anamespacearm__compute_1_1scale__helpers_xhtml_aeb969d3b0e5ceb8597c39b708f0df6e8"><div class="ttname"><a href="namespacearm__compute_1_1scale__helpers.xhtml#aeb969d3b0e5ceb8597c39b708f0df6e8">arm_compute::scale_helpers::delta_bilinear</a></div><div class="ttdeci">float delta_bilinear(float a00, float a01, float a10, float a11, float dx_val, float dy_val)</div><div class="ttdoc">Computes bilinear interpolation using the top-left, top-right, bottom-left, bottom-right pixels and t...</div><div class="ttdef"><b>Definition:</b> <a href="_scale_helpers_8h_source.xhtml#l00193">ScaleHelpers.h:193</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ac1d8253f8b422e143ab989ad2a4d29dd"><div class="ttname"><a href="namespacearm__compute.xhtml#ac1d8253f8b422e143ab989ad2a4d29dd">arm_compute::dequantize_qasymm8</a></div><div class="ttdeci">float dequantize_qasymm8(uint8_t value, const INFO_TYPE &amp;qinfo)</div><div class="ttdoc">Dequantize a value given an unsigned 8-bit asymmetric quantization scheme.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00367">QuantizationInfo.h:367</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ab8cef8b31b552b532a14ab8815e06285"><div class="ttname"><a href="namespacearm__compute.xhtml#ab8cef8b31b552b532a14ab8815e06285">arm_compute::quantize_qasymm8</a></div><div class="ttdeci">uint8_t quantize_qasymm8(float value, const INFO_TYPE &amp;qinfo, RoundingPolicy rounding_policy=RoundingPolicy::TO_NEAREST_UP)</div><div class="ttdoc">Quantize a value given an unsigned 8-bit asymmetric quantization scheme.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00309">QuantizationInfo.h:309</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_uniform_quantization_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_uniform_quantization_info.xhtml">arm_compute::UniformQuantizationInfo</a></div><div class="ttdoc">Quantization info when assuming per layer quantization.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00042">QuantizationInfo.h:42</a></div></div>
<div class="ttc" id="a_error_8h_xhtml"><div class="ttname"><a href="_error_8h.xhtml">Error.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1scale__helpers_xhtml_a808177a93b7ebfd3a999f16c5ff08111"><div class="ttname"><a href="namespacearm__compute_1_1scale__helpers.xhtml#a808177a93b7ebfd3a999f16c5ff08111">arm_compute::scale_helpers::delta_bilinear_c1_quantized</a></div><div class="ttdeci">uint8_t delta_bilinear_c1_quantized(const uint8_t *pixel_ptr, size_t stride, float dx, float dy, UniformQuantizationInfo iq_info, UniformQuantizationInfo oq_info)</div><div class="ttdoc">Computes bilinear interpolation for quantized input and output, using the pointer to the top-left pix...</div><div class="ttdef"><b>Definition:</b> <a href="_scale_helpers_8h_source.xhtml#l00053">ScaleHelpers.h:53</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a464ea9027ae01e64014040d69302800f"><div class="ttname"><a href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">arm_compute::quantize_qasymm8_signed</a></div><div class="ttdeci">int8_t quantize_qasymm8_signed(float value, const INFO_TYPE &amp;qinfo, RoundingPolicy rounding_policy=RoundingPolicy::TO_NEAREST_UP)</div><div class="ttdoc">Quantize a value given a signed 8-bit asymmetric quantization scheme.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00323">QuantizationInfo.h:323</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_a48e7832f8e28c3f7fc0ded12467f8bb0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a48e7832f8e28c3f7fc0ded12467f8bb0">arm_compute::test::validation::reference::accumulate</a></div><div class="ttdeci">SimpleTensor&lt; T2 &gt; accumulate(const SimpleTensor&lt; T1 &gt; &amp;src, DataType output_data_type)</div><div class="ttdef"><b>Definition:</b> <a href="_accumulate_8cpp_source.xhtml#l00038">Accumulate.cpp:38</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1scale__helpers_xhtml_a5381913903c50de7cbb7ebcb18ca4847"><div class="ttname"><a href="namespacearm__compute_1_1scale__helpers.xhtml#a5381913903c50de7cbb7ebcb18ca4847">arm_compute::scale_helpers::pixel_area_c1u8_clamp</a></div><div class="ttdeci">uint8_t pixel_area_c1u8_clamp(const uint8_t *first_pixel_ptr, size_t stride, size_t width, size_t height, float wr, float hr, int x, int y)</div><div class="ttdoc">Return the pixel at (x,y) using area interpolation by clamping when out of borders.</div><div class="ttdef"><b>Definition:</b> <a href="_scale_helpers_8h_source.xhtml#l00133">ScaleHelpers.h:133</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_afe6fcf1a0c6f6c2d2cb10a8c14fa9131"><div class="ttname"><a href="namespacearm__compute.xhtml#afe6fcf1a0c6f6c2d2cb10a8c14fa9131">arm_compute::dequantize_qasymm8_signed</a></div><div class="ttdeci">float dequantize_qasymm8_signed(int8_t value, const INFO_TYPE &amp;qinfo)</div><div class="ttdoc">Dequantize a value given a signed 8-bit asymmetric quantization scheme.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00380">QuantizationInfo.h:380</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2024 Arm Limited.</div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="a_quantization_info_8h_xhtml"><div class="ttname"><a href="_quantization_info_8h.xhtml">QuantizationInfo.h</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_707aa52d67938117542c6646238d6f70.xhtml">helpers</a></li><li class="navelem"><a class="el" href="_scale_helpers_8h.xhtml">ScaleHelpers.h</a></li>
    <li class="footer">Generated on Fri Jul 26 2024 12:08:17 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
