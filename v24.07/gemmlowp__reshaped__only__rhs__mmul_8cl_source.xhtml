<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/CL/cl_kernels/common/gemmlowp_reshaped_only_rhs_mmul.cl Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.07</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('gemmlowp__reshaped__only__rhs__mmul_8cl_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">gemmlowp_reshaped_only_rhs_mmul.cl</div>  </div>
</div><!--header-->
<div class="contents">
<a href="gemmlowp__reshaped__only__rhs__mmul_8cl.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2022 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="activation__float__helpers_8h.xhtml">activation_float_helpers.h</a>&quot;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml">helpers.h</a>&quot;</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="tile__helpers_8h.xhtml">tile_helpers.h</a>&quot;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#if defined(GEMMLOWP_MM_RESHAPED_ONLY_RHS_MMUL)</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">/** This OpenCL kernel computes the matrix multiplication between 2 matrices using the MMUL extension:</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment"> *  The LHS matrix is NOT reshaped</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment"> *  The RHS is reshaped with @ref ClGemmMatrixMultiplyReshapedOnlyRhsKernel and the block K0xN0 is transposed</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment"> * @note The block&#39;s dimensions used for reshaping the RHS matrix (N0 and K0) must be passed at compile time using -DN0 and -DK0 (e.g. -DN0=1, -DK0=1).</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment"> * @note The number of M0 rows to process must be passed at compile time using -DM0 (e.g. -DM0=1)</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment"> * @note The number of output columns processed by the the cooperative mmul extension must be passed at compile time using -DMMUL_N0 (e.g., -DMMUL_N0=4)</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment"> * @note The number of output rows processed by the the cooperative mmul extension must be passed at compile time using -DMMUL_M0 (e.g., -DMMUL_M0=4)</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment"> * @note The number of lhs columns (or rhs rows) processed by the the cooperative mmul extension must be passed at compile time using -DMMUL_K0 (e.g., -DMMUL_K0=16)</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment"> * @note Only the following configurations of M0, N0 and K0 are currently supported:</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment"> *  - M0 = 1, 2, 4</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment"> *  - N0 = 1, 4, 8</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment"> *  - K0 = 4</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment"> * @note If the activation type were passed at compile time through -DACTIVATION_TYPE (e.g. -DACTIVATION_TYPE=RELU), A, B variables, required by some activation functions, should be passed at compile time as well using -DA_VAL= and -DB_VAL= respectively.</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment"> *       The activation function is performed after the bias addition</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment"> * @param[in]  lhs_ptr                               Pointer to the LHS tensor. Supported data types: QASYMM8/QASYMM8_SIGNED</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment"> * @param[in]  lhs_stride_y                          Stride of the LHS tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment"> * @param[in]  lhs_stride_z                          Stride of the LHS tensor in Z dimension (in bytes)</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment"> * @param[in]  lhs_w                                 The size of the width dimension of the LHS tensor</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment"> * @param[in]  lhs_h                                 The size of the height dimension of the LHS tensor</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment"> * @param[in]  lhs_n                                 The size of the depth dimension of the LHS tensor</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment"> * @param[in]  lhs_offset_first_element_in_bytes     The offset of the first element in the LHS tensor</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment"> * @param[in]  rhs_ptr                               Pointer to the RHS reshaped tensor. Supported data type: same as @p lhs_ptr</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment"> * @param[in]  rhs_stride_y                          Stride of the RHS tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment"> * @param[in]  rhs_stride_z                          Stride of the RHS tensor in Z dimension (in bytes)</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment"> * @param[in]  rhs_w                                 The size of the width dimension of the RHS tensor</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment"> * @param[in]  rhs_h                                 The size of the height dimension of the RHS tensor</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment"> * @param[in]  rhs_n                                 The size of the depth dimension of the RHS tensor</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment"> * @param[in]  rhs_offset_first_element_in_bytes     The offset of the first element in the RHS tensor</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment"> * @param[in]  bia_ptr                               (Optional) Pointer to the bias tensor. Supported data type: S32</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment"> * @param[in]  bia_stride_y                          (Optional) Stride of the bias tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment"> * @param[in]  bia_stride_z                          (Optional) Stride of the bias tensor in Z dimension (in bytes)</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment"> * @param[in]  bia_w                                 (Optional) The size of the width dimension of the bias tensor</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment"> * @param[in]  bia_h                                 (Optional) The size of the height dimension of the bias tensor</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment"> * @param[in]  bia_n                                 (Optional) The size of the depth dimension of the bias tensor</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment"> * @param[in]  bia_offset_first_element_in_bytes     (Optional) The offset of the first element in the bias tensor</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment"> * @param[out] dst_ptr                               Pointer to the destination tensor. Supported data type: same as @p lhs_ptr or S32</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment"> * @param[in]  dst_stride_y                          Stride of the destination tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment"> * @param[in]  dst_stride_z                          Stride of the destination tensor in Z dimension (in bytes)</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment"> * @param[in]  dst_w                                 The size of the width dimension of the destination tensor</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment"> * @param[in]  dst_h                                 The size of the height dimension of the destination tensor</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment"> * @param[in]  dst_n                                 The size of the depth dimension of the destination tensor</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment"> * @param[in]  dst_offset_first_element_in_bytes     The offset of the first element in the destination tensor</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment"> * @param[in]  M                                     Number of rows in LHS matrix not reshaped</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment"> * @param[in]  N                                     Number of columns in RHS matrix not reshaped</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment"> * @param[in]  K                                     Number of columns in LHS matrix and rows in RHS matrix not reshaped</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment"> * @param[in]  sum_col_ptr                           (Optional) Pointer to the source tensor. Supported data type: S32</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment"> * @param[in]  sum_col_stride_x                      (Optional) Stride of the source tensor in X dimension (in bytes)</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment"> * @param[in]  sum_col_step_x                        (Optional) sum_col_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment"> * @param[in]  sum_col_stride_y                      (Optional) Stride of the source tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment"> * @param[in]  sum_col_step_y                        (Optional) sum_col_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment"> * @param[in]  sum_col_offset_first_element_in_bytes (Optional) The offset of the first element in the source tensor</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment"> * @param[in]  sum_row_ptr                           (Optional) Pointer to the source tensor. Supported data type: S32</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment"> * @param[in]  sum_row_stride_x                      (Optional) Stride of the source tensor in X dimension (in bytes)</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment"> * @param[in]  sum_row_step_x                        (Optional) sum_row_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment"> * @param[in]  sum_row_stride_y                      (Optional) Stride of the source tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment"> * @param[in]  sum_row_step_y                        (Optional) sum_row_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment"> * @param[in]  sum_row_offset_first_element_in_bytes (Optional) The offset of the first element in the source tensor</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;__kernel <span class="keywordtype">void</span> gemmlowp_mm_reshaped_only_rhs_mmul(</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#aebcece1e7d624a61ef24217c754cb6fe">TENSOR3D_T</a>(lhs, BUFFER),</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#aebcece1e7d624a61ef24217c754cb6fe">TENSOR3D_T</a>(rhs, BUFFER),</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;#<span class="keywordflow">if</span> defined(ADD_BIAS)</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#aebcece1e7d624a61ef24217c754cb6fe">TENSOR3D_T</a>(bia, BUFFER),</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;#endif <span class="comment">// defined(ADD_BIAS)</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#aebcece1e7d624a61ef24217c754cb6fe">TENSOR3D_T</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, BUFFER),</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a68dc0bf731afd0463b8e8cc4ed81c0f8">M</a>,</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ae8b170dcb376fe60270f4675f84e4477">N</a>,</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a42247993f81d6a8f73d2e0cb805c663b">K</a></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;#<span class="keywordflow">if</span> defined(A_OFFSET)</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    ,</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#aebcece1e7d624a61ef24217c754cb6fe">TENSOR3D_T</a>(sum_col, BUFFER)</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;#endif <span class="comment">// defined(A_OFFSET)</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;#<span class="keywordflow">if</span> defined(B_OFFSET)</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    ,</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#aebcece1e7d624a61ef24217c754cb6fe">TENSOR3D_T</a>(sum_row, BUFFER)</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;#endif <span class="comment">// defined(B_OFFSET)</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;)</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;{</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="preprocessor">#define MMUL_BLOCK_SIZE (MMUL_N0 * MMUL_M0)</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="preprocessor">#define VEC_SIZE 4 // For int8 types input to mmul instruction is a length 4 vector</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160; </div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    uint x0 = get_global_id(0);</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    uint y0 = get_global_id(1);</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    uint z  = get_global_id(2);</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160; </div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="comment">// Get block ID and thread ID within the block</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    uint block_id  = (x0 / <a class="code" href="mat__mul__quantized__mmul_8cl.xhtml#a6713b1afa49e62825bc7c941d181fdf3">MMUL_BLOCK_SIZE</a>);</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    uint thread_id = (x0 % <a class="code" href="mat__mul__quantized__mmul_8cl.xhtml#a6713b1afa49e62825bc7c941d181fdf3">MMUL_BLOCK_SIZE</a>);</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160; </div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="comment">// Coordinate within a block</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    uint block_x = thread_id % MMUL_N0;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    uint block_y = (thread_id / MMUL_M0);</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160; </div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="comment">// Starting destination coordinates</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    uint dst_x = min(block_x * N0 + block_id * MMUL_N0 * N0, (uint)(<a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ae8b170dcb376fe60270f4675f84e4477">N</a> - 1));</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    uint dst_y = min(block_y * M0 + y0 * M0 * MMUL_M0, (uint)(<a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a68dc0bf731afd0463b8e8cc4ed81c0f8">M</a> - M0));</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160; </div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    uint lhs_x = <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a> * block_x;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    uint lhs_y = dst_y;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160; </div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    uint rhs_x = <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a> * N0 * block_y;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    uint rhs_y = 4 * block_id + block_x;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160; </div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="comment">// Compute LHS/RHS/DST matrix address</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    lhs_offset_first_element_in_bytes += lhs_x * <span class="keyword">sizeof</span>(DATA_TYPE) + lhs_y * lhs_stride_y + z * lhs_stride_z;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    rhs_offset_first_element_in_bytes += rhs_x * <span class="keyword">sizeof</span>(DATA_TYPE) + rhs_y * rhs_stride_y + z * rhs_stride_z;</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    dst_offset_first_element_in_bytes += dst_x * <span class="keyword">sizeof</span>(OUT_DATA_TYPE) + dst_y * dst_stride_y + z * dst_stride_z;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160; </div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#a1b7124ed4713f1c104761e8deba36004">TILE</a>(ACC_DATA_TYPE, M0, N0, c);</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#af5e0dc11a939b317bb77a58beb291fe7">LOOP_UNROLLING</a>(<span class="keywordtype">int</span>, i, 0, 1, M0,</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    {</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        c[i].v = 0;</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    })</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160; </div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k = 0; k &lt;= <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a42247993f81d6a8f73d2e0cb805c663b">K</a> - MMUL_K0; k += MMUL_K0)</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    {</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        <a class="code" href="tile__helpers_8h.xhtml#a1b7124ed4713f1c104761e8deba36004">TILE</a>(DATA_TYPE, M0, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>, a);</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <a class="code" href="tile__helpers_8h.xhtml#a9e74d0f555507a56c1bf98a497f1ed6c">T_LOAD</a>(DATA_TYPE, M0, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>, BUFFER, lhs, 0, 0, 1, lhs_stride_y, a);</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160; </div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <a class="code" href="tile__helpers_8h.xhtml#a1b7124ed4713f1c104761e8deba36004">TILE</a>(DATA_TYPE, N0, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <a class="code" href="tile__helpers_8h.xhtml#a9e74d0f555507a56c1bf98a497f1ed6c">T_LOAD</a>(DATA_TYPE, N0, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>, BUFFER, rhs, 0, 0, 1, <a class="code" href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160; </div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <a class="code" href="tile__helpers_8h.xhtml#af5e0dc11a939b317bb77a58beb291fe7">LOOP_UNROLLING</a>(<span class="keywordtype">int</span>, m0, 0, 1, M0,</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        {</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            <a class="code" href="tile__helpers_8h.xhtml#af5e0dc11a939b317bb77a58beb291fe7">LOOP_UNROLLING</a>(<span class="keywordtype">int</span>, n0, 0, 1, N0,</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            {</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                VEC_TYPE vec_a = (VEC_TYPE)(a[m0].s[0], a[m0].s[1], a[m0].s[2], a[m0].s[3]);</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                VEC_TYPE vec_b = (VEC_TYPE)(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>[n0].s[0], <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>[n0].s[1], <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>[n0].s[2], <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>[n0].s[3]);</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                c[m0].s[n0]    = arm_matrix_multiply(vec_a, vec_b, c[m0].s[n0]);</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;            })</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        })</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160; </div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        lhs_offset_first_element_in_bytes += MMUL_K0 * <span class="keyword">sizeof</span>(DATA_TYPE);</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        rhs_offset_first_element_in_bytes += MMUL_K0 * N0 * <span class="keyword">sizeof</span>(DATA_TYPE);</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    }</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160; </div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keywordflow">if</span>(block_x * N0 + block_id * MMUL_N0 * N0 &gt;= <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ae8b170dcb376fe60270f4675f84e4477">N</a>)</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    {</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    }</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160; </div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keywordflow">if</span>(block_y * M0 + y0 * M0 * MMUL_M0 &gt;= <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a68dc0bf731afd0463b8e8cc4ed81c0f8">M</a>)</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    {</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    }</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160; </div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="preprocessor">#if defined(FUSED_OUTPUT_STAGE_FIXED_POINT)</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160; </div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#a1b7124ed4713f1c104761e8deba36004">TILE</a>(<span class="keywordtype">int</span>, M0, N0, offset_s32);</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#af5e0dc11a939b317bb77a58beb291fe7">LOOP_UNROLLING</a>(<span class="keywordtype">int</span>, i, 0, 1, M0,</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    {</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        offset_s32[i].v = (<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(<span class="keywordtype">int</span>, N0))K_OFFSET;</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    })</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160; </div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;#<span class="keywordflow">if</span> defined(A_OFFSET)</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160; </div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#a1b7124ed4713f1c104761e8deba36004">TILE</a>(<span class="keywordtype">int</span>, 1, N0, a_offset_s32);</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160; </div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#a9e74d0f555507a56c1bf98a497f1ed6c">T_LOAD</a>(<span class="keywordtype">int</span>, 1, N0, BUFFER, sum_col, dst_x, z, 1, sum_col_stride_z, a_offset_s32);</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160; </div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    a_offset_s32[0].v *= A_OFFSET;</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160; </div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#abf7882e0ece57c1f08b93465e5b62d40">T_ELTWISE_BROADCAST_ADD_X</a>(<span class="keywordtype">int</span>, M0, N0, offset_s32, a_offset_s32, offset_s32);</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="preprocessor">#endif // defined(A_OFFSET)</span></div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160; </div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="preprocessor">#if defined(B_OFFSET)</span></div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160; </div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#a1b7124ed4713f1c104761e8deba36004">TILE</a>(<span class="keywordtype">int</span>, M0, 1, b_offset_s32);</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160; </div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#a9e74d0f555507a56c1bf98a497f1ed6c">T_LOAD</a>(<span class="keywordtype">int</span>, M0, 1, BUFFER, sum_row, dst_y, z * <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a68dc0bf731afd0463b8e8cc4ed81c0f8">M</a>, 1, 4, b_offset_s32);</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160; </div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#af5e0dc11a939b317bb77a58beb291fe7">LOOP_UNROLLING</a>(<span class="keywordtype">int</span>, m0, 0, 1, M0,</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    {</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        offset_s32[m0].v += b_offset_s32[m0].v *B_OFFSET;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    })</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160; </div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;#endif <span class="comment">// defined(B_OFFSET)</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160; </div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;#<span class="keywordflow">if</span> defined(ADD_BIAS)</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="preprocessor">#if defined(BROADCAST_BIAS)</span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    bia_offset_first_element_in_bytes += dst_x * <span class="keyword">sizeof</span>(ACC_DATA_TYPE) + z * bia_stride_y;</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160; </div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#a1b7124ed4713f1c104761e8deba36004">TILE</a>(<span class="keywordtype">int</span>, M0, N0, <a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>);</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160; </div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#a9e74d0f555507a56c1bf98a497f1ed6c">T_LOAD</a>(<span class="keywordtype">int</span>, M0, N0, BUFFER, bia, dst_x, dst_y, 1, 1, <a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>);</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160; </div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#a154f08c5653ab9437108c613d293289a">T_ADD</a>(ACC_DATA_TYPE, M0, N0, offset_s32, <a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, offset_s32);</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160; </div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="preprocessor">#else // defined(BROADCAST_BIAS)</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    bia_offset_first_element_in_bytes += dst_x * <span class="keyword">sizeof</span>(ACC_DATA_TYPE);</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160; </div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#a1b7124ed4713f1c104761e8deba36004">TILE</a>(<span class="keywordtype">int</span>, 1, N0, <a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>);</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160; </div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="keywordflow">if</span>(dst_x + N0 &lt;= <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ae8b170dcb376fe60270f4675f84e4477">N</a> || N0_LEFTOVER == 0)</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    {</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        <a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>[0].v = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(N0)(0, (ACC_DATA_TYPE *)(bia_ptr + bia_offset_first_element_in_bytes));</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    }</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    {</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a58a817b637cae845ed931aa0e2723145">VLOAD_PARTIAL</a>(N0, N0_LEFTOVER)</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        (<a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>[0].v, 0, (ACC_DATA_TYPE *)(bia_ptr + bia_offset_first_element_in_bytes));</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    }</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160; </div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#abf7882e0ece57c1f08b93465e5b62d40">T_ELTWISE_BROADCAST_ADD_X</a>(<span class="keywordtype">int</span>, M0, N0, offset_s32, <a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, offset_s32);</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160; </div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="preprocessor">#endif // defined(BROADCAST_BIAS)</span></div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="preprocessor">#endif // defined(ADD_BIAS)</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160; </div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#a154f08c5653ab9437108c613d293289a">T_ADD</a>(ACC_DATA_TYPE, M0, N0, c, offset_s32, c);</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#a1b7124ed4713f1c104761e8deba36004">TILE</a>(OUT_DATA_TYPE, M0, N0, c_lp);</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#a6f18c9f4dce3e2975d093c7cff9e6106">T_QUANTIZE8</a>(ACC_DATA_TYPE, OUT_DATA_TYPE, PER_TENSOR, M0, N0, RESULT_OFFSET, RESULT_SHIFT, RESULT_MULTIPLIER, c, 0, 0, c_lp);</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160; </div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="preprocessor">#if defined(MIN_BOUND)</span></div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#af5e0dc11a939b317bb77a58beb291fe7">LOOP_UNROLLING</a>(<span class="keywordtype">int</span>, i, 0, 1, M0,</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    {</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        c_lp[i].v = max(c_lp[i].v, (<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(OUT_DATA_TYPE, N0))MIN_BOUND);</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    })</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;#endif <span class="comment">// defined(MIN_BOUND)</span></div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;#<span class="keywordflow">if</span> defined(MAX_BOUND)</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#af5e0dc11a939b317bb77a58beb291fe7">LOOP_UNROLLING</a>(<span class="keywordtype">int</span>, i, 0, 1, M0,</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    {</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        c_lp[i].v = min(c_lp[i].v, (<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(OUT_DATA_TYPE, N0))MAX_BOUND);</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    })</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;#endif <span class="comment">// defined(MAX_BOUND)</span></div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160; </div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <a class="code" href="tile__helpers_8h.xhtml#a336c1d61c904535dcf47e0baadc1d63e">T_ACTIVATION</a>(DATA_TYPE, M0, N0, ACTIVATION_TYPE, A_VAL, B_VAL, c, c);</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160; </div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keywordflow">if</span>(dst_x + N0 &lt;= <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ae8b170dcb376fe60270f4675f84e4477">N</a> || N0_LEFTOVER == 0)</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    {</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        <a class="code" href="tile__helpers_8h.xhtml#af5e0dc11a939b317bb77a58beb291fe7">LOOP_UNROLLING</a>(<span class="keywordtype">int</span>, m0, 0, 1, M0,</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        {</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;            <span class="keywordflow">if</span>(dst_y + m0 &lt; <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a68dc0bf731afd0463b8e8cc4ed81c0f8">M</a> || M0_LEFTOVER == 0)</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;            {</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#acb282042d1edeeaa3cc979a206f78b54">VSTORE</a>(N0)</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                (c_lp[m0].v, 0, (__global OUT_DATA_TYPE *)(dst_ptr + dst_offset_first_element_in_bytes + m0 * dst_stride_y));</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;            }</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        })</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    }</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    {</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        <a class="code" href="tile__helpers_8h.xhtml#af5e0dc11a939b317bb77a58beb291fe7">LOOP_UNROLLING</a>(<span class="keywordtype">int</span>, m0, 0, 1, M0,</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        {</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;            <span class="keywordflow">if</span>(dst_y + m0 &lt; <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a68dc0bf731afd0463b8e8cc4ed81c0f8">M</a> || M0_LEFTOVER == 0)</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;            {</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a2afdc4c751404e64315ecd22021abe9c">VSTORE_PARTIAL</a>(N0, N0_LEFTOVER)</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                (c_lp[m0].v, 0, (__global OUT_DATA_TYPE *)(dst_ptr + dst_offset_first_element_in_bytes + m0 * dst_stride_y));</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;            }</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        })</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    }</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160; </div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="preprocessor">#else  // FUSED_OUTPUT_STAGE_FIXED_POINT</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <span class="comment">// Store</span></div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <span class="keywordflow">if</span>(dst_x + N0 &lt;= <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ae8b170dcb376fe60270f4675f84e4477">N</a> || N0_LEFTOVER == 0)</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    {</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;        <a class="code" href="tile__helpers_8h.xhtml#af5e0dc11a939b317bb77a58beb291fe7">LOOP_UNROLLING</a>(<span class="keywordtype">int</span>, m0, 0, 1, M0,</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        {</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;            <span class="keywordflow">if</span>(dst_y + m0 &lt; <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a68dc0bf731afd0463b8e8cc4ed81c0f8">M</a> || M0_LEFTOVER == 0)</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;            {</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#acb282042d1edeeaa3cc979a206f78b54">VSTORE</a>(N0)</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                (c[m0].v, 0, (__global OUT_DATA_TYPE *)(dst_ptr + dst_offset_first_element_in_bytes + m0 * dst_stride_y));</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;            }</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        })</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    }</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    {</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        <a class="code" href="tile__helpers_8h.xhtml#af5e0dc11a939b317bb77a58beb291fe7">LOOP_UNROLLING</a>(<span class="keywordtype">int</span>, m0, 0, 1, M0,</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        {</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;            <span class="keywordflow">if</span>(dst_y + m0 &lt; <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a68dc0bf731afd0463b8e8cc4ed81c0f8">M</a> || M0_LEFTOVER == 0)</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;            {</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a2afdc4c751404e64315ecd22021abe9c">VSTORE_PARTIAL</a>(N0, N0_LEFTOVER)</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                (c[m0].v, 0, (__global OUT_DATA_TYPE *)(dst_ptr + dst_offset_first_element_in_bytes + m0 * dst_stride_y));</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;            }</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        })</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    }</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<span class="preprocessor">#endif // FUSED_OUTPUT_STAGE_FIXED_POINT</span></div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;}</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160; </div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="preprocessor">#endif // defined(GEMMLOWP_MM_RESHAPED_ONLY_RHS_MMUL)</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="atile__helpers_8h_xhtml_a9e74d0f555507a56c1bf98a497f1ed6c"><div class="ttname"><a href="tile__helpers_8h.xhtml#a9e74d0f555507a56c1bf98a497f1ed6c">T_LOAD</a></div><div class="ttdeci">#define T_LOAD(DATA_TYPE, HEIGHT, WIDTH, TENSOR_TYPE, TENSOR, X, Y, YI_MULTIPLIER, STRIDE_Y, dst)</div><div class="ttdoc">Load a tile from global memory (tensor)</div><div class="ttdef"><b>Definition:</b> <a href="tile__helpers_8h_source.xhtml#l00534">tile_helpers.h:534</a></div></div>
<div class="ttc" id="a_cpu_gemm_assembly_dispatch_8cpp_xhtml_ae8b170dcb376fe60270f4675f84e4477"><div class="ttname"><a href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ae8b170dcb376fe60270f4675f84e4477">N</a></div><div class="ttdeci">unsigned int N</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00105">CpuGemmAssemblyDispatch.cpp:105</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="atile__helpers_8h_xhtml_abf7882e0ece57c1f08b93465e5b62d40"><div class="ttname"><a href="tile__helpers_8h.xhtml#abf7882e0ece57c1f08b93465e5b62d40">T_ELTWISE_BROADCAST_ADD_X</a></div><div class="ttdeci">#define T_ELTWISE_BROADCAST_ADD_X(DST_DATA_TYPE, M0, N0, lhs, rhs, dst)</div><div class="ttdef"><b>Definition:</b> <a href="tile__helpers_8h_source.xhtml#l01228">tile_helpers.h:1228</a></div></div>
<div class="ttc" id="aqlstm__layer__normalization_8cl_xhtml_a3fffea119c04c7680f2e9cf3fadf63b4"><div class="ttname"><a href="qlstm__layer__normalization_8cl.xhtml#a3fffea119c04c7680f2e9cf3fadf63b4">VEC_SIZE</a></div><div class="ttdeci">#define VEC_SIZE</div><div class="ttdef"><b>Definition:</b> <a href="qlstm__layer__normalization_8cl_source.xhtml#l00054">qlstm_layer_normalization.cl:54</a></div></div>
<div class="ttc" id="asrc_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a36f754c05b6fddf6df0d8d0a74f8159f"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a></div><div class="ttdeci">#define VEC_DATA_TYPE(type, size)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00764">helpers.h:764</a></div></div>
<div class="ttc" id="atile__helpers_8h_xhtml_a336c1d61c904535dcf47e0baadc1d63e"><div class="ttname"><a href="tile__helpers_8h.xhtml#a336c1d61c904535dcf47e0baadc1d63e">T_ACTIVATION</a></div><div class="ttdeci">#define T_ACTIVATION(DATA_TYPE, M0, N0, ACTIVATION_TYPE, A_VAL, B_VAL, src, dst)</div><div class="ttdoc">Element-wise activation for floating point types.</div><div class="ttdef"><b>Definition:</b> <a href="tile__helpers_8h_source.xhtml#l01139">tile_helpers.h:1139</a></div></div>
<div class="ttc" id="amat__mul__quantized__mmul_8cl_xhtml_a6713b1afa49e62825bc7c941d181fdf3"><div class="ttname"><a href="mat__mul__quantized__mmul_8cl.xhtml#a6713b1afa49e62825bc7c941d181fdf3">MMUL_BLOCK_SIZE</a></div><div class="ttdeci">#define MMUL_BLOCK_SIZE</div><div class="ttdef"><b>Definition:</b> <a href="mat__mul__quantized__mmul_8cl_source.xhtml#l00043">mat_mul_quantized_mmul.cl:43</a></div></div>
<div class="ttc" id="asrc_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a287e2fc366c312b468382c95bb90f91f"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a></div><div class="ttdeci">#define VLOAD(size)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00204">helpers.h:204</a></div></div>
<div class="ttc" id="asrc_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_acb282042d1edeeaa3cc979a206f78b54"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#acb282042d1edeeaa3cc979a206f78b54">VSTORE</a></div><div class="ttdeci">#define VSTORE(size)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00500">helpers.h:500</a></div></div>
<div class="ttc" id="atile__helpers_8h_xhtml_aebcece1e7d624a61ef24217c754cb6fe"><div class="ttname"><a href="tile__helpers_8h.xhtml#aebcece1e7d624a61ef24217c754cb6fe">TENSOR3D_T</a></div><div class="ttdeci">#define TENSOR3D_T(name, type)</div><div class="ttdef"><b>Definition:</b> <a href="tile__helpers_8h_source.xhtml#l00191">tile_helpers.h:191</a></div></div>
<div class="ttc" id="aworking__space_8hpp_xhtml_a1fb7b822a92dd3ab6e7ab15c67b0ff9e"><div class="ttname"><a href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a></div><div class="ttdeci">const int32_t * bias</div><div class="ttdef"><b>Definition:</b> <a href="working__space_8hpp_source.xhtml#l00322">working_space.hpp:322</a></div></div>
<div class="ttc" id="a_cpu_gemm_assembly_dispatch_8cpp_xhtml_a42247993f81d6a8f73d2e0cb805c663b"><div class="ttname"><a href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a42247993f81d6a8f73d2e0cb805c663b">K</a></div><div class="ttdeci">unsigned int K</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00106">CpuGemmAssemblyDispatch.cpp:106</a></div></div>
<div class="ttc" id="atile__helpers_8h_xhtml_af5e0dc11a939b317bb77a58beb291fe7"><div class="ttname"><a href="tile__helpers_8h.xhtml#af5e0dc11a939b317bb77a58beb291fe7">LOOP_UNROLLING</a></div><div class="ttdeci">#define LOOP_UNROLLING(type, idx, start, step, num, macro)</div><div class="ttdef"><b>Definition:</b> <a href="tile__helpers_8h_source.xhtml#l00340">tile_helpers.h:340</a></div></div>
<div class="ttc" id="atile__helpers_8h_xhtml"><div class="ttname"><a href="tile__helpers_8h.xhtml">tile_helpers.h</a></div></div>
<div class="ttc" id="a_cpu_gemm_assembly_dispatch_8cpp_xhtml_a68dc0bf731afd0463b8e8cc4ed81c0f8"><div class="ttname"><a href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a68dc0bf731afd0463b8e8cc4ed81c0f8">M</a></div><div class="ttdeci">unsigned int M</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00104">CpuGemmAssemblyDispatch.cpp:104</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="asrc_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a58a817b637cae845ed931aa0e2723145"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a58a817b637cae845ed931aa0e2723145">VLOAD_PARTIAL</a></div><div class="ttdeci">#define VLOAD_PARTIAL(size, load_size)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00222">helpers.h:222</a></div></div>
<div class="ttc" id="atile__helpers_8h_xhtml_a154f08c5653ab9437108c613d293289a"><div class="ttname"><a href="tile__helpers_8h.xhtml#a154f08c5653ab9437108c613d293289a">T_ADD</a></div><div class="ttdeci">#define T_ADD(DATA_TYPE, M0, N0, lhs, rhs, dst)</div><div class="ttdoc">Element-wise addition between two tiles.</div><div class="ttdef"><b>Definition:</b> <a href="tile__helpers_8h_source.xhtml#l01201">tile_helpers.h:1201</a></div></div>
<div class="ttc" id="atile__helpers_8h_xhtml_a6f18c9f4dce3e2975d093c7cff9e6106"><div class="ttname"><a href="tile__helpers_8h.xhtml#a6f18c9f4dce3e2975d093c7cff9e6106">T_QUANTIZE8</a></div><div class="ttdeci">#define T_QUANTIZE8(SRC_DATA_TYPE, DST_DATA_TYPE, QUANTIZATION_TYPE, M0, N0, DST_OFFSET, DST_SHIFT, DST_MULTIPLIER, src, dst_multipliers, dst_shifts, dst)</div><div class="ttdoc">8-bit quantization with fixed-point scale</div><div class="ttdef"><b>Definition:</b> <a href="tile__helpers_8h_source.xhtml#l00966">tile_helpers.h:966</a></div></div>
<div class="ttc" id="aactivation__float__helpers_8h_xhtml"><div class="ttname"><a href="activation__float__helpers_8h.xhtml">activation_float_helpers.h</a></div></div>
<div class="ttc" id="asrc_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml">helpers.h</a></div></div>
<div class="ttc" id="asrc_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a2afdc4c751404e64315ecd22021abe9c"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a2afdc4c751404e64315ecd22021abe9c">VSTORE_PARTIAL</a></div><div class="ttdeci">#define VSTORE_PARTIAL(size, store_size)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00533">helpers.h:533</a></div></div>
<div class="ttc" id="atile__helpers_8h_xhtml_a1b7124ed4713f1c104761e8deba36004"><div class="ttname"><a href="tile__helpers_8h.xhtml#a1b7124ed4713f1c104761e8deba36004">TILE</a></div><div class="ttdeci">#define TILE(DATA_TYPE, H, W, BASENAME)</div><div class="ttdoc">Tile object A tile object is a 2D memory block and can be accessed using the following syntax:</div><div class="ttdef"><b>Definition:</b> <a href="tile__helpers_8h_source.xhtml#l00074">tile_helpers.h:74</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_8c278f79c760e5c5fbd911f9870614c1.xhtml">CL</a></li><li class="navelem"><a class="el" href="dir_25885286e9dad4fa105b7b25a8031bbf.xhtml">cl_kernels</a></li><li class="navelem"><a class="el" href="dir_a50b9933354d81525095b5e7ad336497.xhtml">common</a></li><li class="navelem"><a class="el" href="gemmlowp__reshaped__only__rhs__mmul_8cl.xhtml">gemmlowp_reshaped_only_rhs_mmul.cl</a></li>
    <li class="footer">Generated on Fri Jul 26 2024 12:08:16 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
