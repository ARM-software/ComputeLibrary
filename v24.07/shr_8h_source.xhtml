<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/NEON/wrapper/intrinsics/shr.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.07</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('shr_8h_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">shr.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="shr_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2022 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160; </div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_WRAPPER_SHR_H</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#define ARM_COMPUTE_WRAPPER_SHR_H</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160; </div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;arm_neon.h&gt;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;type_traits&gt;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160; </div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;{</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">namespace </span>wrapper</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div>
<div class="line"><a name="l00035"></a><span class="lineno"><a class="line" href="shr_8h.xhtml#abe80743766bd7354f294079375f0ac12">   35</a></span>&#160;<span class="preprocessor">#define VQRSHRN_IMPL(half_vtype, vtype, prefix, postfix) \</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">    template &lt;int b&gt;                                     \</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">    inline half_vtype vqrshrn(const vtype &amp;a)            \</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">    {                                                    \</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">        return prefix##_##postfix(a, b);                 \</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">    }</span></div>
<div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1wrapper.xhtml#a701023985a16e9be00eda98ca62b1ff0">   41</a></span>&#160;<a class="code" href="shr_8h.xhtml#abe80743766bd7354f294079375f0ac12">VQRSHRN_IMPL</a>(int8x8_t, int16x8_t, vqrshrn_n, s16)</div>
<div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1wrapper.xhtml#aff736d99c68f0fea0ef0732864ef40ed">   42</a></span>&#160;<a class="code" href="shr_8h.xhtml#abe80743766bd7354f294079375f0ac12">VQRSHRN_IMPL</a>(uint8x8_t, uint16x8_t, vqrshrn_n, u16)</div>
<div class="line"><a name="l00043"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1wrapper.xhtml#aab8a47b2c25b408353e9315274b8903c">   43</a></span>&#160;<a class="code" href="shr_8h.xhtml#abe80743766bd7354f294079375f0ac12">VQRSHRN_IMPL</a>(int16x4_t, int32x4_t, vqrshrn_n, s32)</div>
<div class="line"><a name="l00044"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1wrapper.xhtml#a148cfcfd26fd4770318168ee60feda04">   44</a></span>&#160;<a class="code" href="shr_8h.xhtml#abe80743766bd7354f294079375f0ac12">VQRSHRN_IMPL</a>(uint16x4_t, uint32x4_t, vqrshrn_n, u32)</div>
<div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1wrapper.xhtml#a04164bace8f1614e3cdd1c8b808a87ce">   45</a></span>&#160;<a class="code" href="shr_8h.xhtml#abe80743766bd7354f294079375f0ac12">VQRSHRN_IMPL</a>(int32x2_t, int64x2_t, vqrshrn_n, s64)</div>
<div class="line"><a name="l00046"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1wrapper.xhtml#ac48035cdc7e1b7b6e68b0f84bd15d433">   46</a></span>&#160;<a class="code" href="shr_8h.xhtml#abe80743766bd7354f294079375f0ac12">VQRSHRN_IMPL</a>(uint32x2_t, uint64x2_t, vqrshrn_n, u64)</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160; </div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="preprocessor">#undef VQRSHRN_IMPL</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160; </div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="preprocessor">#define VQRSHRN_SCALAR_IMPL(half_vtype, vtype, prefix, postfix) \</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="preprocessor">    template &lt;int b&gt;                                            \</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="preprocessor">    inline half_vtype vqrshrn(const vtype &amp;a)                   \</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="preprocessor">    {                                                           \</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="preprocessor">        return prefix##_##postfix(a, b);                        \</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="preprocessor">    }</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160; </div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;VQRSHRN_SCALAR_IMPL(int8_t, int16_t, vqrshrnh_n, s16)</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;VQRSHRN_SCALAR_IMPL(uint8_t, uint16_t, vqrshrnh_n, u16)</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;VQRSHRN_SCALAR_IMPL(int16_t, int32_t, vqrshrns_n, s32)</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;VQRSHRN_SCALAR_IMPL(uint16_t, uint32_t, vqrshrns_n, u32)</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;VQRSHRN_SCALAR_IMPL(int32_t, int64_t, vqrshrnd_n, s64)</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;VQRSHRN_SCALAR_IMPL(uint32_t, uint64_t, vqrshrnd_n, u64)</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160; </div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="preprocessor">#undef VQRSHRN_SCALAR_IMPL</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="preprocessor">#endif // __aarch64__</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160; </div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">// This function is the mixed version of VQRSHRN and VQRSHRUN.</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment">// The input vector is always signed integer, while the returned vector</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment">// can be either signed or unsigned depending on the signedness of scalar type T.</span></div>
<div class="line"><a name="l00071"></a><span class="lineno"><a class="line" href="shr_8h.xhtml#af6043aa742d32273f3d4ae821431bbd3">   71</a></span>&#160;<span class="preprocessor">#define VQRSHRN_EX_IMPL(half_vtype, vtype, prefix_signed, prefix_unsigned, postfix)                              \</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="preprocessor">    template &lt;int b, typename T&gt;                                                                                 \</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="preprocessor">    inline typename std::enable_if&lt;std::is_integral&lt;T&gt;::value &amp;&amp; std::is_signed&lt;T&gt;::value, half_vtype&gt;::type     \</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="preprocessor">    vqrshrn_ex(const vtype &amp;a)                                                                                   \</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="preprocessor">    {                                                                                                            \</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="preprocessor">        return prefix_signed##_##postfix(a, b);                                                                  \</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="preprocessor">    }                                                                                                            \</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="preprocessor">                                                                                                                 \</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="preprocessor">    template &lt;int b, typename T&gt;                                                                                 \</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="preprocessor">    inline typename std::enable_if&lt;std::is_integral&lt;T&gt;::value &amp;&amp; !std::is_signed&lt;T&gt;::value, u##half_vtype&gt;::type \</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="preprocessor">    vqrshrn_ex(const vtype &amp;a)                                                                                   \</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="preprocessor">    {                                                                                                            \</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="preprocessor">        return prefix_unsigned##_##postfix(a, b);                                                                \</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="preprocessor">    }</span></div>
<div class="line"><a name="l00085"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1wrapper.xhtml#acbee47ff5600ce13f5f6e4741e0c2d56">   85</a></span>&#160;<a class="code" href="shr_8h.xhtml#af6043aa742d32273f3d4ae821431bbd3">VQRSHRN_EX_IMPL</a>(int8x8_t, int16x8_t, vqrshrn_n, vqrshrun_n, s16)</div>
<div class="line"><a name="l00086"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1wrapper.xhtml#a0569e98c172b22ab02223e49619e0738">   86</a></span>&#160;<a class="code" href="shr_8h.xhtml#af6043aa742d32273f3d4ae821431bbd3">VQRSHRN_EX_IMPL</a>(int16x4_t, int32x4_t, vqrshrn_n, vqrshrun_n, s32)</div>
<div class="line"><a name="l00087"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1wrapper.xhtml#a8969aa464755343434996477be5215b0">   87</a></span>&#160;<a class="code" href="shr_8h.xhtml#af6043aa742d32273f3d4ae821431bbd3">VQRSHRN_EX_IMPL</a>(int32x2_t, int64x2_t, vqrshrn_n, vqrshrun_n, s64)</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="preprocessor">#undef VQRSHRN_EX_IMPL</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160; </div>
<div class="line"><a name="l00090"></a><span class="lineno"><a class="line" href="shr_8h.xhtml#a0891535e0db4909af5e7024431c7a4c5">   90</a></span>&#160;<span class="preprocessor">#define VSHR_IMPL(vtype, prefix, postfix) \</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="preprocessor">    template &lt;int b&gt;                      \</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="preprocessor">    inline vtype vshr_n(const vtype &amp;a)   \</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="preprocessor">    {                                     \</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="preprocessor">        return prefix##_##postfix(a, b);  \</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="preprocessor">    }</span></div>
<div class="line"><a name="l00096"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1wrapper.xhtml#ab79161ad1deb12de294a220ae2b112d5">   96</a></span>&#160;<a class="code" href="shr_8h.xhtml#a0891535e0db4909af5e7024431c7a4c5">VSHR_IMPL</a>(uint8x8_t, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ab79161ad1deb12de294a220ae2b112d5">vshr_n</a>, u8)</div>
<div class="line"><a name="l00097"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1wrapper.xhtml#a513c4b70b1ef98fe65b62a8278040218">   97</a></span>&#160;<a class="code" href="shr_8h.xhtml#a0891535e0db4909af5e7024431c7a4c5">VSHR_IMPL</a>(int8x8_t, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ab79161ad1deb12de294a220ae2b112d5">vshr_n</a>, s8)</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="preprocessor">#undef VSHR_IMPL</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160; </div>
<div class="line"><a name="l00100"></a><span class="lineno"><a class="line" href="shr_8h.xhtml#a6f32734b3c751e6bc633f668ec0adf76">  100</a></span>&#160;<span class="preprocessor">#define VSHRQ_IMPL(vtype, prefix, postfix) \</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="preprocessor">    template &lt;int b&gt;                       \</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="preprocessor">    inline vtype vshrq_n(const vtype &amp;a)   \</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="preprocessor">    {                                      \</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="preprocessor">        return prefix##_##postfix(a, b);   \</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="preprocessor">    }</span></div>
<div class="line"><a name="l00106"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1wrapper.xhtml#a5894bf412cdefc06449a88c5c47c1cf9">  106</a></span>&#160;<a class="code" href="shr_8h.xhtml#a6f32734b3c751e6bc633f668ec0adf76">VSHRQ_IMPL</a>(uint32x4_t, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a5894bf412cdefc06449a88c5c47c1cf9">vshrq_n</a>, u32)</div>
<div class="line"><a name="l00107"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1wrapper.xhtml#aacf892ca109f9e2a9f5d967fc16b480d">  107</a></span>&#160;<a class="code" href="shr_8h.xhtml#a6f32734b3c751e6bc633f668ec0adf76">VSHRQ_IMPL</a>(int32x4_t, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a5894bf412cdefc06449a88c5c47c1cf9">vshrq_n</a>, s32)</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="preprocessor">#undef VSHRQ_IMPL</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160; </div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="preprocessor">#define VSHRQ_SCALAR_IMPL(vtype, prefix, postfix) \</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="preprocessor">    template &lt;int b&gt;                              \</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="preprocessor">    inline vtype vshrq_n(const vtype &amp;a)          \</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="preprocessor">    {                                             \</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="preprocessor">        return prefix##_##postfix(a, b);          \</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="preprocessor">    }</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;VSHRQ_SCALAR_IMPL(uint32_t, vshrd_n, u64)</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;VSHRQ_SCALAR_IMPL(int32_t, vshrd_n, s64)</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160; </div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="preprocessor">#undef VSHRQ_SCALAR_IMPL</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="preprocessor">#endif // __aarch64__</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160; </div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="preprocessor">#define VQRSHRN_EX_SCALAR_IMPL(half_vtype, vtype, prefix_signed, prefix_unsigned, postfix)                       \</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="preprocessor">    template &lt;int b, typename T&gt;                                                                                 \</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="preprocessor">    inline typename std::enable_if&lt;std::is_integral&lt;T&gt;::value &amp;&amp; std::is_signed&lt;T&gt;::value, half_vtype&gt;::type     \</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="preprocessor">    vqrshrn_ex(const vtype &amp;a)                                                                                   \</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="preprocessor">    {                                                                                                            \</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="preprocessor">        return prefix_signed##_##postfix(a, b);                                                                  \</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="preprocessor">    }                                                                                                            \</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="preprocessor">                                                                                                                 \</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="preprocessor">    template &lt;int b, typename T&gt;                                                                                 \</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="preprocessor">    inline typename std::enable_if&lt;std::is_integral&lt;T&gt;::value &amp;&amp; !std::is_signed&lt;T&gt;::value, u##half_vtype&gt;::type \</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="preprocessor">    vqrshrn_ex(const vtype &amp;a)                                                                                   \</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="preprocessor">    {                                                                                                            \</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="preprocessor">        return prefix_unsigned##_##postfix(a, b);                                                                \</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="preprocessor">    }</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160; </div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;VQRSHRN_EX_SCALAR_IMPL(int8_t, int16_t, vqrshrnh_n, vqrshrunh_n, s16)</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;VQRSHRN_EX_SCALAR_IMPL(int16_t, int32_t, vqrshrns_n, vqrshruns_n, s32)</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;VQRSHRN_EX_SCALAR_IMPL(int32_t, int64_t, vqrshrnd_n, vqrshrund_n, s64)</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160; </div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="preprocessor">#undef VQRSHRN_EX_IMPL</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="preprocessor">#endif // __aarch64__</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160; </div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;} <span class="comment">// namespace wrapper</span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;} <span class="comment">// namespace arm_compute</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_WRAPPER_SHR_H */</span><span class="preprocessor"></span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a5894bf412cdefc06449a88c5c47c1cf9"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a5894bf412cdefc06449a88c5c47c1cf9">arm_compute::wrapper::vshrq_n</a></div><div class="ttdeci">uint32x4_t vshrq_n(const uint32x4_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="shr_8h_source.xhtml#l00106">shr.h:106</a></div></div>
<div class="ttc" id="ashr_8h_xhtml_a6f32734b3c751e6bc633f668ec0adf76"><div class="ttname"><a href="shr_8h.xhtml#a6f32734b3c751e6bc633f668ec0adf76">VSHRQ_IMPL</a></div><div class="ttdeci">#define VSHRQ_IMPL(vtype, prefix, postfix)</div><div class="ttdef"><b>Definition:</b> <a href="shr_8h_source.xhtml#l00100">shr.h:100</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_ab79161ad1deb12de294a220ae2b112d5"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ab79161ad1deb12de294a220ae2b112d5">arm_compute::wrapper::vshr_n</a></div><div class="ttdeci">uint8x8_t vshr_n(const uint8x8_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="shr_8h_source.xhtml#l00096">shr.h:96</a></div></div>
<div class="ttc" id="ashr_8h_xhtml_abe80743766bd7354f294079375f0ac12"><div class="ttname"><a href="shr_8h.xhtml#abe80743766bd7354f294079375f0ac12">VQRSHRN_IMPL</a></div><div class="ttdeci">#define VQRSHRN_IMPL(half_vtype, vtype, prefix, postfix)</div><div class="ttdef"><b>Definition:</b> <a href="shr_8h_source.xhtml#l00035">shr.h:35</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2024 Arm Limited.</div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="ashr_8h_xhtml_af6043aa742d32273f3d4ae821431bbd3"><div class="ttname"><a href="shr_8h.xhtml#af6043aa742d32273f3d4ae821431bbd3">VQRSHRN_EX_IMPL</a></div><div class="ttdeci">#define VQRSHRN_EX_IMPL(half_vtype, vtype, prefix_signed, prefix_unsigned, postfix)</div><div class="ttdef"><b>Definition:</b> <a href="shr_8h_source.xhtml#l00071">shr.h:71</a></div></div>
<div class="ttc" id="ashr_8h_xhtml_a0891535e0db4909af5e7024431c7a4c5"><div class="ttname"><a href="shr_8h.xhtml#a0891535e0db4909af5e7024431c7a4c5">VSHR_IMPL</a></div><div class="ttdeci">#define VSHR_IMPL(vtype, prefix, postfix)</div><div class="ttdef"><b>Definition:</b> <a href="shr_8h_source.xhtml#l00090">shr.h:90</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_d91e1966cc57df4f49d1e07be7697713.xhtml">NEON</a></li><li class="navelem"><a class="el" href="dir_8224aa485683c095eaa3fd7faa788467.xhtml">wrapper</a></li><li class="navelem"><a class="el" href="dir_bc2a33106e4dbca04e80e17904e2949d.xhtml">intrinsics</a></li><li class="navelem"><a class="el" href="shr_8h.xhtml">shr.h</a></li>
    <li class="footer">Generated on Fri Jul 26 2024 12:08:20 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
