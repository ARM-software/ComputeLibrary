<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/dynamic_fusion/sketch/utils/DependencyGraph.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.07</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_dependency_graph_8h_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">DependencyGraph.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_dependency_graph_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2022 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef SRC_DYNAMIC_FUSION_SKETCH_UTILS_DEPENDENCYGRAPH</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define SRC_DYNAMIC_FUSION_SKETCH_UTILS_DEPENDENCYGRAPH</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160; </div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_error_8h.xhtml">arm_compute/core/Error.h</a>&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160; </div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;cstdint&gt;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;map&gt;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;set&gt;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;tuple&gt;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160; </div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">namespace </span>experimental</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="keyword">namespace </span>dynamic_fusion</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keyword">namespace</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute_1_1utils.xhtml#ab394a46b54a9f73b47493691f0a0ab9f">is_in</a>(<span class="keyword">const</span> T &amp;v, <span class="keyword">const</span> std::vector&lt;T&gt; &amp;vec)</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;{</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keywordflow">return</span> std::find(std::begin(vec), <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">std::end</a>(vec), v) != <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">std::end</a>(vec);</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;}</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;} <span class="comment">// namespace</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">/** A multi-input (tensors), multi-output (tensors) acyclic directed graph</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment"> *  Represented as a doubly-linked adjacency list with the differentiation between source and destination</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00053"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml">   53</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml">DependencyGraph</a></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;{</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00056"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a1fafaeb6e3ab8c0bc772532cc3fcff1a">   56</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a1fafaeb6e3ab8c0bc772532cc3fcff1a">Id</a>         = int32_t;</div>
<div class="line"><a name="l00057"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa1775ccb35b0d53526b272a7f23df7a0">   57</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa1775ccb35b0d53526b272a7f23df7a0">TensorId</a>   = <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a1fafaeb6e3ab8c0bc772532cc3fcff1a">Id</a>;</div>
<div class="line"><a name="l00058"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aae2526157a355e3de67c19aae6e5e133">   58</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aae2526157a355e3de67c19aae6e5e133">OperatorId</a> = <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a1fafaeb6e3ab8c0bc772532cc3fcff1a">Id</a>;<span class="comment"></span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">    /** Adjacency list</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00062"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a3037da158468d821b4cd5d1d831c79af">   62</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a3037da158468d821b4cd5d1d831c79af">AdjList</a> = std::map&lt;Id, std::vector&lt;Id&gt;&gt;;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">    /** A pack of operator including its input and output tensors, used by traversing through the graph in topological order</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00067"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_1_1_op_pack.xhtml">   67</a></span>&#160;    <span class="keyword">struct </span><a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_1_1_op_pack.xhtml">OpPack</a></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    {</div>
<div class="line"><a name="l00069"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_1_1_op_pack.xhtml#aad27dbef7960c3f6b8c02a36748a3cc2">   69</a></span>&#160;        <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aae2526157a355e3de67c19aae6e5e133">OperatorId</a>            <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_1_1_op_pack.xhtml#aad27dbef7960c3f6b8c02a36748a3cc2">op</a>{};</div>
<div class="line"><a name="l00070"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_1_1_op_pack.xhtml#aa40df149c9ca8fba2f9afbf956b80391">   70</a></span>&#160;        std::vector&lt;TensorId&gt; <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_1_1_op_pack.xhtml#aa40df149c9ca8fba2f9afbf956b80391">inputs</a>{};</div>
<div class="line"><a name="l00071"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_1_1_op_pack.xhtml#a187811064e63dd693df0427dc899efce">   71</a></span>&#160;        std::vector&lt;TensorId&gt; <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_1_1_op_pack.xhtml#a187811064e63dd693df0427dc899efce">outputs</a>{};</div>
<div class="line"><a name="l00072"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_1_1_op_pack.xhtml#a9f5eec44a39fbf7dc9da8508f36a950f">   72</a></span>&#160;        <span class="keyword">friend</span> <span class="keywordtype">bool</span>           <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_1_1_op_pack.xhtml#a9f5eec44a39fbf7dc9da8508f36a950f">operator==</a>(<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_1_1_op_pack.xhtml">OpPack</a> &amp;opp0, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_1_1_op_pack.xhtml">OpPack</a> &amp;opp1)</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        {</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            <span class="keywordflow">return</span> std::make_tuple(opp0.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_1_1_op_pack.xhtml#aad27dbef7960c3f6b8c02a36748a3cc2">op</a>, opp0.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_1_1_op_pack.xhtml#aa40df149c9ca8fba2f9afbf956b80391">inputs</a>, opp0.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_1_1_op_pack.xhtml#a187811064e63dd693df0427dc899efce">outputs</a>) ==</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                   std::make_tuple(opp1.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_1_1_op_pack.xhtml#aad27dbef7960c3f6b8c02a36748a3cc2">op</a>, opp1.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_1_1_op_pack.xhtml#aa40df149c9ca8fba2f9afbf956b80391">inputs</a>, opp1.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_1_1_op_pack.xhtml#a187811064e63dd693df0427dc899efce">outputs</a>);</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        }</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    };</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160; </div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a62293bb5739ed8756db079365187f720">DependencyGraph</a>() = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keyword">friend</span> std::ostream &amp;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#adaefd03137f6501b238946b911b6ff9d">operator&lt;&lt;</a>(std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml">DependencyGraph</a> &amp;);</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment">    /** Try adding an operator (without actually adding it), while keeping the graph as a &quot;linear sequence&quot; / list</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment">     * Rule: If the new operator is not the first operator, at least one input tensor must be</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment">     *       the output tensor of the last non-output operator. All other input tensors must be</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment">     *       the global input of the graph (i.e. not the output of any operator).</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">     * Rule: The output tensor of the new operator must not be the input tensor of any previously</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment">     *       added operator.</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment">     * PRECONDITION: The current graph is already linear</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment">     * @return true  If the operator can be added while keeping the graph as a linear sequence</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment">     * @return false  Otherwise</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00097"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#af4040a979c2f3bf8d4006b5c990f21db">   97</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#af4040a979c2f3bf8d4006b5c990f21db">try_add_operator_as_linear</a>(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aae2526157a355e3de67c19aae6e5e133">OperatorId</a>                   op,</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                                    <span class="keyword">const</span> std::vector&lt;TensorId&gt; &amp;inputs,</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                                    <span class="keyword">const</span> std::vector&lt;TensorId&gt; &amp;outputs,</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                                    <span class="keywordtype">bool</span>                         is_output = <span class="keyword">false</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(op, is_output);</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="keywordflow">if</span> (all_ops().empty())</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        {</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        }</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160; </div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <span class="comment">// If the new operator is not the first operator, at least one input tensor must be</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="comment">// the output tensor of the last non-output operator. All other input tensors must be</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <span class="comment">// the global input of the graph (i.e. not the output of any operator).</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <span class="keywordflow">if</span> (_last_op_available)</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        {</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            <span class="keyword">auto</span> use_input_from_last_op = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160; </div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            <span class="keywordflow">for</span> (<span class="keyword">auto</span> src_tensor : inputs)</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            {</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> src_ops = _adj_src_ops.find(src_tensor);</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160; </div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                <span class="keywordflow">if</span> (src_ops != _adj_src_ops.end())</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                {</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(src_ops-&gt;second.size() &gt; 1);</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160; </div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                    <span class="keywordflow">if</span> (!src_ops-&gt;second.empty())</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                    {</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> src_op = src_ops-&gt;second[0];</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160; </div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                        <span class="keywordflow">if</span> (src_op == _last_op)</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                        {</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                            <span class="keywordflow">if</span> (use_input_from_last_op)</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                            {</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                                <span class="comment">// To be safe, we also forbid using the output tensor</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                                <span class="comment">// of the last operator twice.</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                            }</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160; </div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                            use_input_from_last_op = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                        }</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                        {</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                            <span class="comment">// The input tensor of this operator must not be the output tensor</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                            <span class="comment">// of any other operator except the last non-output operator.</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                        }</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                    }</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                }</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            }</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160; </div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            <span class="keywordflow">if</span> (!use_input_from_last_op)</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            {</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                <span class="comment">// At least one input tensor must be the output tensor of the last non-output operator.</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            }</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        }</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160; </div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <span class="comment">// The output tensor of the new operator must not be the input tensor of any previously</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        <span class="comment">// added operator.</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> dst_tensor : outputs)</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        {</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            <span class="keywordflow">if</span> (_adj_dst_ops.find(dst_tensor) != _adj_dst_ops.end())</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            {</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;            }</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        }</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160; </div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    }<span class="comment"></span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment">    /** Add an operator, while keeping the graph as a &quot;linear sequence&quot;</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment">     * PRECONDITION: The current graph is already linear</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment">     * INVARIANT: The list can only grow from head to tail</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment">     * INVARIANT: POSTCONDITION: The graph is linear</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00173"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aad93356944397e10e5c315723914019a">  173</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aad93356944397e10e5c315723914019a">add_operator_as_linear</a>(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aae2526157a355e3de67c19aae6e5e133">OperatorId</a>                   op,</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                                <span class="keyword">const</span> std::vector&lt;TensorId&gt; &amp;inputs,</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                                <span class="keyword">const</span> std::vector&lt;TensorId&gt; &amp;outputs,</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                                <span class="keywordtype">bool</span>                         is_output = <span class="keyword">false</span>)</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    {</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> success = <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a4fa2090ba4e0caf4aa74327e9962511b">add_operator</a>(op, inputs, outputs, is_output);</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(success);</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!success);</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    }<span class="comment"></span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment">    /** Add a new operator</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment">     *  Return invalid if it violates the DAG invariant</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="comment">     *  Invalid operation will not change the graph</span></div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment">     * @param[in] op        Operator to add</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment">     * @param[in] inputs    Input tensors to the operator</span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment">     * @param[in] outputs   Output tensors to the operator</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment">     * @param[in] is_output Whether this is an output operator</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00191"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a4fa2090ba4e0caf4aa74327e9962511b">  191</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a4fa2090ba4e0caf4aa74327e9962511b">add_operator</a>(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aae2526157a355e3de67c19aae6e5e133">OperatorId</a>                   op,</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                      <span class="keyword">const</span> std::vector&lt;TensorId&gt; &amp;inputs,</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                      <span class="keyword">const</span> std::vector&lt;TensorId&gt; &amp;outputs,</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                      <span class="keywordtype">bool</span>                         is_output = <span class="keyword">false</span>)</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    {</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        <span class="keywordflow">if</span> (operator_exists(op))</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        {</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        }</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        _adj_src_tensors[op] = {};</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        _adj_dst_tensors[op] = {};</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> in_tensor : inputs)</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        {</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            <span class="comment">// Linking input tensor to operator node will never create a cycle / loop because we guarantee</span></div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            <span class="comment">// each op is newly created, so every &lt;input, op&gt; pair / edge is new</span></div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;            link_input(op, in_tensor);</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        }</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> out_tensor : outputs)</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        {</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            <span class="comment">// If there exists a back path from op&#39;s output tensor to op already, then linking the two will create a loop / cycle</span></div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            <span class="keywordflow">if</span> (path_exists_from_tensor_to_op(out_tensor, op))</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            {</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                remove_operator(op);</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;            }</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            {</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                link_output(op, out_tensor);</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            }</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        }</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160; </div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        <span class="keywordflow">if</span> (!is_output)</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        {</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;            _last_op_available = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;            _last_op           = op;</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        }</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160; </div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    }</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="comment">    /** Build a sequence of operators from the acyclic graph of operators.</span></div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="comment">     * The graph will be visited in depth-first strategy. The operator can only be added to</span></div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="comment">     * the sequence when all operators that supply the input tensors have been added. Otherwise,</span></div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="comment">     * the operator will be ignored and later visited again. In other words, the dependency between</span></div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="comment">     * operators will be preserved in the sequence.</span></div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00238"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a78baf70e426827a83bce389f3d9c7dca">  238</a></span>&#160;    std::vector&lt;OpPack&gt; <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a78baf70e426827a83bce389f3d9c7dca">build_operators_sequence</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        std::vector&lt;OpPack&gt; ops_seq;</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        std::set&lt;Id&gt;        done_ops;</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        std::set&lt;Id&gt;        done_tensors;</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160; </div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> input_tensors = <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a02b701633ac4981fdb5f19394c94caf9">global_src_tensors</a>();</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160; </div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> : input_tensors)</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        {</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;            done_tensors.insert(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160; </div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;            <span class="keywordflow">for</span> (<span class="keyword">auto</span> op : _adj_dst_ops.at(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>))</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;            {</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                build_operators_sequence_from_op(op, ops_seq, done_ops, done_tensors);</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;            }</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        }</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160; </div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        <span class="keywordflow">return</span> ops_seq;</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    }</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="comment">    /** Strict equality comparison (all internal ids and order of insertion matter).</span></div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="comment">     *        In the future this may be replaced with a topological comparison, allowing equivalent graphs with different internal ids to be equal</span></div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="comment">     * @param[in] g0</span></div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="comment">     * @param[in] g1</span></div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="comment">     * @return true  If the same</span></div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="comment">     * @return false Otherwise</span></div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00268"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a4e4a07e7e6126471b70b8f4793fb7af7">  268</a></span>&#160;    <span class="keyword">friend</span> <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a4e4a07e7e6126471b70b8f4793fb7af7">operator==</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml">DependencyGraph</a> &amp;g0, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml">DependencyGraph</a> &amp;g1)</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    {</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        <span class="comment">// Do not compare id allocators</span></div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        <span class="keywordflow">return</span> std::make_tuple(g0._adj_src_tensors, g0._adj_dst_tensors, g0._adj_src_ops, g0._adj_dst_ops) ==</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;               std::make_tuple(g1._adj_src_tensors, g1._adj_dst_tensors, g1._adj_src_ops, g1._adj_dst_ops);</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    }</div>
<div class="line"><a name="l00274"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa16ba811cfa71fadd1966a8969710584">  274</a></span>&#160;    std::vector&lt;OperatorId&gt; <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa16ba811cfa71fadd1966a8969710584">src_ops_from_tensor</a>(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa1775ccb35b0d53526b272a7f23df7a0">TensorId</a> <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        <span class="keywordflow">return</span> _adj_src_ops.at(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    }</div>
<div class="line"><a name="l00278"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa6cf5d3ba596288789eb3f85b87f97ba">  278</a></span>&#160;    std::vector&lt;OperatorId&gt; <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa6cf5d3ba596288789eb3f85b87f97ba">dst_ops_from_tensor</a>(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa1775ccb35b0d53526b272a7f23df7a0">TensorId</a> <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        <span class="keywordflow">return</span> _adj_dst_ops.at(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    }<span class="comment"></span></div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="comment">    /** Get all tensors</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="comment">     * @return std::vector&lt;TensorId&gt;</span></div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00286"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#afb059af9caf54facdaf1698bf6f80ab3">  286</a></span>&#160;    std::vector&lt;TensorId&gt; <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#afb059af9caf54facdaf1698bf6f80ab3">all_tensors</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        std::vector&lt;TensorId&gt; tensors{};</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;        std::transform(std::begin(_adj_src_ops), <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">std::end</a>(_adj_src_ops), std::back_inserter(tensors),</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                       [](<span class="keyword">const</span> <span class="keyword">auto</span> &amp;it) { <span class="keywordflow">return</span> it.first; });</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;        <span class="keywordflow">return</span> tensors;</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    }<span class="comment"></span></div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="comment">    /** Get source tensors of the whole graph</span></div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="comment">     * @return std::vector&lt;TensorId&gt;</span></div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00297"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a02b701633ac4981fdb5f19394c94caf9">  297</a></span>&#160;    std::vector&lt;TensorId&gt; <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a02b701633ac4981fdb5f19394c94caf9">global_src_tensors</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        std::vector&lt;TensorId&gt; tensors;</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> tensor_src_ops : _adj_src_ops)</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        {</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;            <span class="keywordflow">if</span> (tensor_src_ops.second.empty())</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;            {</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                tensors.push_back(tensor_src_ops.first);</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;            }</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        }</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        <span class="keywordflow">return</span> tensors;</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    }<span class="comment"></span></div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="comment">    /** Get destination tensors of the whole graph</span></div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;<span class="comment">     * @return std::vector&lt;TensorId&gt;</span></div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00313"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a6275638b3e225efcce14fa96f8952345">  313</a></span>&#160;    std::vector&lt;TensorId&gt; <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a6275638b3e225efcce14fa96f8952345">global_dst_tensors</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        std::vector&lt;TensorId&gt; tensors;</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> tensor_dst_ops : _adj_dst_ops)</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        {</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;            <span class="keywordflow">if</span> (tensor_dst_ops.second.empty())</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;            {</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                tensors.push_back(tensor_dst_ops.first);</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;            }</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        }</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        <span class="keywordflow">return</span> tensors;</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    }<span class="comment"></span></div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;<span class="comment">    /** Get intermediate tensors of the whole graph.</span></div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;<span class="comment">     * @return std::vector&lt;TensorId&gt;</span></div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00329"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a486b438340dcc49ea829c3a8724797ca">  329</a></span>&#160;    std::vector&lt;TensorId&gt; <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a486b438340dcc49ea829c3a8724797ca">intermediate_tensors</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        std::vector&lt;TensorId&gt; tensors;</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160; </div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        <span class="comment">// If a tensor is used to connect the input of an operator and the output of another operator,</span></div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;        <span class="comment">// it is not allocated in the memory. The tensor exists as a temporary variable only.</span></div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> src_tensor : _adj_src_ops)</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;        {</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;            <span class="keywordflow">if</span> (!src_tensor.second.empty())</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;            {</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> dst_tensor = _adj_dst_ops.find(src_tensor.first);</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                <span class="keywordflow">if</span> (dst_tensor != _adj_dst_ops.end())</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                {</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                    <span class="keywordflow">if</span> (!dst_tensor-&gt;second.empty())</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                    {</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                        tensors.push_back(src_tensor.first);</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                    }</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                }</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;            }</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        }</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160; </div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        <span class="keywordflow">return</span> tensors;</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    }<span class="comment"></span></div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;<span class="comment">    /** Get all root ops. Root ops can also be referred to as &quot;src ops&quot; of the whole graph</span></div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;<span class="comment">     * @return std::vector&lt;OperatorId&gt;</span></div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00356"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a63be0889f78146e9a728676958cab98e">  356</a></span>&#160;    std::vector&lt;OperatorId&gt; <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a63be0889f78146e9a728676958cab98e">get_root_ops</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;        std::vector&lt;OperatorId&gt; ops{};</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>              op_list = all_ops();</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160; </div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> op : op_list)</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        {</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;            <span class="keywordflow">if</span> (src_ops(op).empty())</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;            {</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                ops.emplace_back(op);</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;            }</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;        }</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;        <span class="keywordflow">return</span> ops;</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    }</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160; </div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    <span class="keywordtype">void</span> link_input(<a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a7c53fb0e6cdb59d291688a586922ae57">OperatorId</a> op, <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa1775ccb35b0d53526b272a7f23df7a0">TensorId</a> in_tensor)</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    {</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!operator_exists(op));</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;        <span class="keywordflow">if</span> (!tensor_exists(in_tensor))</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;        {</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;            insert_new_tensor(in_tensor);</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;        }</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(are_connected(op, in_tensor)); <span class="comment">// Prevent repetitive linking</span></div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;        _adj_src_tensors[op].push_back(in_tensor);</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;        _adj_dst_ops[in_tensor].push_back(op);</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    }</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    <span class="keywordtype">void</span> link_output(<a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a7c53fb0e6cdb59d291688a586922ae57">OperatorId</a> op, <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa1775ccb35b0d53526b272a7f23df7a0">TensorId</a> out_tensor)</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    {</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!operator_exists(op));</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;        <span class="keywordflow">if</span> (!tensor_exists(out_tensor))</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;        {</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;            insert_new_tensor(out_tensor);</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;        }</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(are_connected(op, out_tensor)); <span class="comment">// Prevent repetitive linking</span></div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;        _adj_dst_tensors[op].push_back(out_tensor);</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;        _adj_src_ops[out_tensor].push_back(op);</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    }</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160; </div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    std::vector&lt;OperatorId&gt; src_ops(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aae2526157a355e3de67c19aae6e5e133">OperatorId</a> op)<span class="keyword"> const</span></div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!operator_exists(op));</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;        std::vector&lt;OperatorId&gt; ops{};</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;        <span class="keywordflow">for</span> (<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa1775ccb35b0d53526b272a7f23df7a0">TensorId</a> src_tensor : src_tensors(op))</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;        {</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;            ops.insert(ops.end(), std::begin(_adj_src_ops.at(src_tensor)), <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">std::end</a>(_adj_src_ops.at(src_tensor)));</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;        }</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;        <span class="keywordflow">return</span> ops;</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    }</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    std::vector&lt;OperatorId&gt; dst_ops(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aae2526157a355e3de67c19aae6e5e133">OperatorId</a> op)<span class="keyword"> const</span></div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!operator_exists(op));</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;        std::vector&lt;OperatorId&gt; ops{};</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;        <span class="keywordflow">for</span> (<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa1775ccb35b0d53526b272a7f23df7a0">TensorId</a> dst_tensor : _adj_dst_tensors.at(op))</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;        {</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;            ops.insert(ops.end(), std::begin(_adj_dst_ops.at(dst_tensor)), <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">std::end</a>(_adj_dst_ops.at(dst_tensor)));</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        }</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        <span class="keywordflow">return</span> ops;</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    }</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;<span class="comment">    /** Get source tensors to an operator</span></div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;<span class="comment">     * @param[in] op</span></div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;<span class="comment">     * @return std::vector&lt;TensorId&gt;</span></div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    std::vector&lt;TensorId&gt; src_tensors(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aae2526157a355e3de67c19aae6e5e133">OperatorId</a> op)<span class="keyword"> const</span></div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!operator_exists(op));</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;        <span class="keywordflow">return</span> _adj_src_tensors.at(op);</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    }<span class="comment"></span></div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;<span class="comment">    /** Get destination tensors to an operator</span></div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;<span class="comment">     * @param[in] op</span></div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;<span class="comment">     * @return std::vector&lt;TensorId&gt;</span></div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    std::vector&lt;TensorId&gt; dst_tensors(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aae2526157a355e3de67c19aae6e5e133">OperatorId</a> op)<span class="keyword"> const</span></div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!operator_exists(op));</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;        <span class="keywordflow">return</span> _adj_dst_tensors.at(op);</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    }<span class="comment"></span></div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;<span class="comment">    /** Get all operators</span></div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;<span class="comment">     * @return std::vector&lt;OperatorId&gt;</span></div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    std::vector&lt;OperatorId&gt; all_ops()<span class="keyword"> const</span></div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;        std::vector&lt;OperatorId&gt; ops{};</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;        std::transform(std::begin(_adj_src_tensors), <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">std::end</a>(_adj_src_tensors), std::back_inserter(ops),</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;                       [](<span class="keyword">const</span> <span class="keyword">auto</span> &amp;it) { <span class="keywordflow">return</span> it.first; });</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;        <span class="keywordflow">return</span> ops;</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    }<span class="comment"></span></div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;<span class="comment">    /** Remove an operator from graph.</span></div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;<span class="comment">     * @param[in] op</span></div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    <span class="keywordtype">void</span> remove_operator(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aae2526157a355e3de67c19aae6e5e133">OperatorId</a> op)</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    {</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> src_tensor : _adj_src_tensors.at(op))</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;        {</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;            <span class="keyword">auto</span> &amp;dst_ops = _adj_dst_ops.at(src_tensor);</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;            dst_ops.erase(std::remove(std::begin(dst_ops), <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">std::end</a>(dst_ops), op), <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">std::end</a>(dst_ops));</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;        }</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> dst_tensor : _adj_dst_tensors.at(op))</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;        {</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;            <span class="keyword">auto</span> &amp;src_ops = _adj_src_ops.at(dst_tensor);</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;            src_ops.erase(std::remove(std::begin(src_ops), <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">std::end</a>(src_ops), op), <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">std::end</a>(src_ops));</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;        }</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;        <span class="comment">// Remove any isolated tensors</span></div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;        <span class="comment">// An isolated tensor is one where both its _adj_src_ops and _adj_dst_ops are empty</span></div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> <a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a> : <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#afb059af9caf54facdaf1698bf6f80ab3">all_tensors</a>())</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;        {</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;            <span class="keywordflow">if</span> (_adj_src_ops.at(<a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a>).empty() &amp;&amp; _adj_dst_ops.at(<a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a>).empty())</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;            {</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;                _adj_src_ops.erase(<a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a>);</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;                _adj_dst_ops.erase(<a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a>);</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;            }</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;        }</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;        _adj_src_tensors.erase(op);</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;        _adj_dst_tensors.erase(op);</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    }</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    <span class="keywordtype">void</span> insert_new_tensor(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa1775ccb35b0d53526b272a7f23df7a0">TensorId</a> <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;    {</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;        _adj_src_ops[<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>] = {};</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;        _adj_dst_ops[<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>] = {};</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    }</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    <span class="keywordtype">bool</span> tensor_exists(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa1775ccb35b0d53526b272a7f23df7a0">TensorId</a> <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;        <span class="keywordflow">return</span> _adj_src_ops.find(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>) != _adj_src_ops.end() &amp;&amp; _adj_dst_ops.find(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>) != _adj_dst_ops.end();</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    }</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    <span class="keywordtype">bool</span> operator_exists(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aae2526157a355e3de67c19aae6e5e133">OperatorId</a> op)<span class="keyword"> const</span></div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;        <span class="keywordflow">return</span> _adj_src_tensors.find(op) != _adj_src_tensors.end() &amp;&amp;</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;               _adj_dst_tensors.find(op) != _adj_dst_tensors.end();</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    }</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    <span class="keywordtype">bool</span> is_src_tensor_of(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aae2526157a355e3de67c19aae6e5e133">OperatorId</a> op, <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa1775ccb35b0d53526b272a7f23df7a0">TensorId</a> <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;        <span class="keywordflow">if</span> (!operator_exists(op) || !tensor_exists(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>))</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;        {</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;        }</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> op_inputs = src_tensors(op);</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;        <span class="keywordflow">return</span> std::find(op_inputs.begin(), op_inputs.end(), <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>) != op_inputs.end();</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    }</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    <span class="keywordtype">bool</span> is_dst_tensor_of(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aae2526157a355e3de67c19aae6e5e133">OperatorId</a> op, <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa1775ccb35b0d53526b272a7f23df7a0">TensorId</a> <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;        <span class="keywordflow">if</span> (!operator_exists(op) || !tensor_exists(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>))</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;        {</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;        }</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> op_outputs = dst_tensors(op);</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;        <span class="keywordflow">return</span> std::find(op_outputs.begin(), op_outputs.end(), <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>) != op_outputs.end();</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;    }</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    <span class="keywordtype">bool</span> are_connected(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aae2526157a355e3de67c19aae6e5e133">OperatorId</a> op, <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa1775ccb35b0d53526b272a7f23df7a0">TensorId</a> <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;        <span class="keywordflow">return</span> is_src_tensor_of(op, <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>) || is_dst_tensor_of(op, <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    }<span class="comment"></span></div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;<span class="comment">    /** If op is the destination / leaf operator of the whole graph</span></div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;<span class="comment">     * @param[in] op</span></div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;<span class="comment">     * @return true</span></div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;<span class="comment">     * @return false</span></div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    <span class="keywordtype">bool</span> is_dst_op(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aae2526157a355e3de67c19aae6e5e133">OperatorId</a> op)<span class="keyword"> const</span></div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;        <span class="keywordflow">return</span> dst_ops(op).empty();</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    }</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    std::vector&lt;OperatorId&gt; get_dst_ops()<span class="keyword"> const</span></div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;        std::vector&lt;OperatorId&gt; ops{};</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>              op_list = all_ops();</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160; </div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> op : op_list)</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;        {</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;            <span class="keywordflow">if</span> (is_dst_op(op))</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;            {</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;                ops.emplace_back(op);</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;            }</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;        }</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;        <span class="keywordflow">return</span> ops;</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;    }</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    <span class="keywordtype">bool</span> path_exists_from_tensor_to_op(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa1775ccb35b0d53526b272a7f23df7a0">TensorId</a> src_tensor, <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aae2526157a355e3de67c19aae6e5e133">OperatorId</a> dst_op)<span class="keyword"> const</span></div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;        <span class="keywordflow">if</span> (!tensor_exists(src_tensor) || !operator_exists(dst_op))</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;        {</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;        }</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> child_op : <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa6cf5d3ba596288789eb3f85b87f97ba">dst_ops_from_tensor</a>(src_tensor))</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;        {</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;            <span class="keywordflow">if</span> (path_exists_from_op_to_op(child_op, dst_op))</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;            {</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;            }</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;        }</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    }</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160; </div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;    <span class="keywordtype">bool</span> path_exists_from_op_to_op(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aae2526157a355e3de67c19aae6e5e133">OperatorId</a> src_op, <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aae2526157a355e3de67c19aae6e5e133">OperatorId</a> dst_op)<span class="keyword"> const</span></div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;        <span class="keywordflow">if</span> (!operator_exists(src_op) || !operator_exists(dst_op))</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;        {</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;        }</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;        <span class="keywordflow">if</span> (src_op == dst_op)</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;        {</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;        }</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1utils.xhtml#ab394a46b54a9f73b47493691f0a0ab9f">is_in</a>(src_op, get_dst_ops()))</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;        {</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;        }</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> child_tensor : dst_tensors(src_op))</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;        {</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;            <span class="keywordflow">if</span> (path_exists_from_tensor_to_op(child_tensor, dst_op))</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;            {</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;            }</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;        }</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    }</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160; </div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;    <span class="keywordtype">void</span> build_operators_sequence_from_op(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a1fafaeb6e3ab8c0bc772532cc3fcff1a">Id</a>                   op,</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;                                          std::vector&lt;OpPack&gt; &amp;ops_seq,</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;                                          std::set&lt;Id&gt;        &amp;done_ops,</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;                                          std::set&lt;Id&gt;        &amp;done_tensors)<span class="keyword"> const</span></div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;        <span class="keywordflow">while</span> (<span class="keyword">true</span>)</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;        {</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;            <span class="comment">// If the operator has been added to the sequence, ignore it.</span></div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;            <span class="keywordflow">if</span> (done_ops.find(op) != done_ops.end())</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;            {</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;                <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;            }</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160; </div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;            <span class="comment">// If not all the input tensors of the operator are available, this operator cannot be</span></div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;            <span class="comment">// added to the sequence for now. It will be visited again after the source operator</span></div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;            <span class="comment">// is added to the sequence.</span></div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> src_tensors = _adj_src_tensors.at(op);</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160; </div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;            <span class="keywordflow">for</span> (<span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a> : src_tensors)</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;            {</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;                <span class="keywordflow">if</span> (done_tensors.find(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>) == done_tensors.end())</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;                {</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;                    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;                }</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;            }</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160; </div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;            <span class="comment">// This operator is ready to be added to the sequence.</span></div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> dst_tensors = _adj_dst_tensors.at(op);</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160; </div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;            done_ops.insert(op);</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160; </div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;            OpPack <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>{op, src_tensors, dst_tensors};</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;            ops_seq.push_back(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>);</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160; </div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;            done_tensors.insert(dst_tensors.begin(), dst_tensors.end());</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160; </div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;            <span class="comment">// Visit all the sink operators.</span></div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;            <span class="comment">// Call this function recursively unless there is only one sink.</span></div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;            <span class="keywordflow">if</span> (dst_tensors.size() == 1 &amp;&amp; _adj_dst_ops.at(dst_tensors[0]).size() == 1)</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;            {</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;                op = _adj_dst_ops.at(dst_tensors[0])[0];</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;            }</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;            {</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;                <span class="keywordflow">for</span> (<span class="keyword">auto</span> dst_tensor : dst_tensors)</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;                {</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> dst_ops = _adj_dst_ops.at(dst_tensor);</div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160; </div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;                    <span class="keywordflow">for</span> (<span class="keyword">auto</span> dst_op : dst_ops)</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;                    {</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;                        build_operators_sequence_from_op(dst_op, ops_seq, done_ops, done_tensors);</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;                    }</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;                }</div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160; </div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;                <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;            }</div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;        }</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    }</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160; </div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a3037da158468d821b4cd5d1d831c79af">AdjList</a> _adj_src_tensors{};</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a3037da158468d821b4cd5d1d831c79af">AdjList</a> _adj_dst_tensors{};</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a3037da158468d821b4cd5d1d831c79af">AdjList</a> _adj_src_ops{};</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a3037da158468d821b4cd5d1d831c79af">AdjList</a> _adj_dst_ops{};</div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160; </div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;    <span class="keywordtype">bool</span>       _last_op_available{<span class="keyword">false</span>};</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aae2526157a355e3de67c19aae6e5e133">OperatorId</a> _last_op{0};</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;};</div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160; </div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;} <span class="comment">// namespace dynamic_fusion</span></div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;} <span class="comment">// namespace experimental</span></div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;} <span class="comment">// namespace arm_compute</span></div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* SRC_DYNAMIC_FUSION_SKETCH_UTILS_DEPENDENCYGRAPH */</span><span class="preprocessor"></span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_af4040a979c2f3bf8d4006b5c990f21db"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#af4040a979c2f3bf8d4006b5c990f21db">arm_compute::experimental::dynamic_fusion::DependencyGraph::try_add_operator_as_linear</a></div><div class="ttdeci">bool try_add_operator_as_linear(OperatorId op, const std::vector&lt; TensorId &gt; &amp;inputs, const std::vector&lt; TensorId &gt; &amp;outputs, bool is_output=false) const</div><div class="ttdoc">Try adding an operator (without actually adding it), while keeping the graph as a &quot;linear sequence&quot; /...</div><div class="ttdef"><b>Definition:</b> <a href="_dependency_graph_8h_source.xhtml#l00097">DependencyGraph.h:97</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_a63be0889f78146e9a728676958cab98e"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a63be0889f78146e9a728676958cab98e">arm_compute::experimental::dynamic_fusion::DependencyGraph::get_root_ops</a></div><div class="ttdeci">std::vector&lt; OperatorId &gt; get_root_ops() const</div><div class="ttdoc">Get all root ops.</div><div class="ttdef"><b>Definition:</b> <a href="_dependency_graph_8h_source.xhtml#l00356">DependencyGraph.h:356</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_a1fafaeb6e3ab8c0bc772532cc3fcff1a"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a1fafaeb6e3ab8c0bc772532cc3fcff1a">arm_compute::experimental::dynamic_fusion::DependencyGraph::Id</a></div><div class="ttdeci">int32_t Id</div><div class="ttdef"><b>Definition:</b> <a href="_dependency_graph_8h_source.xhtml#l00056">DependencyGraph.h:56</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_aae2526157a355e3de67c19aae6e5e133"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aae2526157a355e3de67c19aae6e5e133">arm_compute::experimental::dynamic_fusion::DependencyGraph::OperatorId</a></div><div class="ttdeci">Id OperatorId</div><div class="ttdef"><b>Definition:</b> <a href="_dependency_graph_8h_source.xhtml#l00058">DependencyGraph.h:58</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_a62293bb5739ed8756db079365187f720"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a62293bb5739ed8756db079365187f720">arm_compute::experimental::dynamic_fusion::DependencyGraph::DependencyGraph</a></div><div class="ttdeci">DependencyGraph()=default</div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_aad93356944397e10e5c315723914019a"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aad93356944397e10e5c315723914019a">arm_compute::experimental::dynamic_fusion::DependencyGraph::add_operator_as_linear</a></div><div class="ttdeci">void add_operator_as_linear(OperatorId op, const std::vector&lt; TensorId &gt; &amp;inputs, const std::vector&lt; TensorId &gt; &amp;outputs, bool is_output=false)</div><div class="ttdoc">Add an operator, while keeping the graph as a &quot;linear sequence&quot;.</div><div class="ttdef"><b>Definition:</b> <a href="_dependency_graph_8h_source.xhtml#l00173">DependencyGraph.h:173</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_a4e4a07e7e6126471b70b8f4793fb7af7"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a4e4a07e7e6126471b70b8f4793fb7af7">arm_compute::experimental::dynamic_fusion::DependencyGraph::operator==</a></div><div class="ttdeci">friend bool operator==(const DependencyGraph &amp;g0, const DependencyGraph &amp;g1)</div><div class="ttdoc">Strict equality comparison (all internal ids and order of insertion matter).</div><div class="ttdef"><b>Definition:</b> <a href="_dependency_graph_8h_source.xhtml#l00268">DependencyGraph.h:268</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_aa16ba811cfa71fadd1966a8969710584"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa16ba811cfa71fadd1966a8969710584">arm_compute::experimental::dynamic_fusion::DependencyGraph::src_ops_from_tensor</a></div><div class="ttdeci">std::vector&lt; OperatorId &gt; src_ops_from_tensor(TensorId tensor) const</div><div class="ttdef"><b>Definition:</b> <a href="_dependency_graph_8h_source.xhtml#l00274">DependencyGraph.h:274</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_afb059af9caf54facdaf1698bf6f80ab3"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#afb059af9caf54facdaf1698bf6f80ab3">arm_compute::experimental::dynamic_fusion::DependencyGraph::all_tensors</a></div><div class="ttdeci">std::vector&lt; TensorId &gt; all_tensors() const</div><div class="ttdoc">Get all tensors.</div><div class="ttdef"><b>Definition:</b> <a href="_dependency_graph_8h_source.xhtml#l00286">DependencyGraph.h:286</a></div></div>
<div class="ttc" id="a_error_8h_xhtml"><div class="ttname"><a href="_error_8h.xhtml">Error.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_aa1775ccb35b0d53526b272a7f23df7a0"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa1775ccb35b0d53526b272a7f23df7a0">arm_compute::experimental::dynamic_fusion::DependencyGraph::TensorId</a></div><div class="ttdeci">Id TensorId</div><div class="ttdef"><b>Definition:</b> <a href="_dependency_graph_8h_source.xhtml#l00057">DependencyGraph.h:57</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml">arm_compute::experimental::dynamic_fusion::DependencyGraph</a></div><div class="ttdoc">A multi-input (tensors), multi-output (tensors) acyclic directed graph Represented as a doubly-linked...</div><div class="ttdef"><b>Definition:</b> <a href="_dependency_graph_8h_source.xhtml#l00053">DependencyGraph.h:53</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_aa6cf5d3ba596288789eb3f85b87f97ba"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa6cf5d3ba596288789eb3f85b87f97ba">arm_compute::experimental::dynamic_fusion::DependencyGraph::dst_ops_from_tensor</a></div><div class="ttdeci">std::vector&lt; OperatorId &gt; dst_ops_from_tensor(TensorId tensor) const</div><div class="ttdef"><b>Definition:</b> <a href="_dependency_graph_8h_source.xhtml#l00278">DependencyGraph.h:278</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_a4fa2090ba4e0caf4aa74327e9962511b"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a4fa2090ba4e0caf4aa74327e9962511b">arm_compute::experimental::dynamic_fusion::DependencyGraph::add_operator</a></div><div class="ttdeci">bool add_operator(OperatorId op, const std::vector&lt; TensorId &gt; &amp;inputs, const std::vector&lt; TensorId &gt; &amp;outputs, bool is_output=false)</div><div class="ttdoc">Add a new operator Return invalid if it violates the DAG invariant Invalid operation will not change ...</div><div class="ttdef"><b>Definition:</b> <a href="_dependency_graph_8h_source.xhtml#l00191">DependencyGraph.h:191</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_a02b701633ac4981fdb5f19394c94caf9"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a02b701633ac4981fdb5f19394c94caf9">arm_compute::experimental::dynamic_fusion::DependencyGraph::global_src_tensors</a></div><div class="ttdeci">std::vector&lt; TensorId &gt; global_src_tensors() const</div><div class="ttdoc">Get source tensors of the whole graph.</div><div class="ttdef"><b>Definition:</b> <a href="_dependency_graph_8h_source.xhtml#l00297">DependencyGraph.h:297</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_a78baf70e426827a83bce389f3d9c7dca"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a78baf70e426827a83bce389f3d9c7dca">arm_compute::experimental::dynamic_fusion::DependencyGraph::build_operators_sequence</a></div><div class="ttdeci">std::vector&lt; OpPack &gt; build_operators_sequence() const</div><div class="ttdoc">Build a sequence of operators from the acyclic graph of operators.</div><div class="ttdef"><b>Definition:</b> <a href="_dependency_graph_8h_source.xhtml#l00238">DependencyGraph.h:238</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a7c53fb0e6cdb59d291688a586922ae57"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a7c53fb0e6cdb59d291688a586922ae57">arm_compute::experimental::dynamic_fusion::OperatorId</a></div><div class="ttdeci">DependencyGraph::OperatorId OperatorId</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_operator_group_8h_source.xhtml#l00041">GpuOperatorGroup.h:41</a></div></div>
<div class="ttc" id="astructarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_1_1_op_pack_xhtml_aa40df149c9ca8fba2f9afbf956b80391"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_1_1_op_pack.xhtml#aa40df149c9ca8fba2f9afbf956b80391">arm_compute::experimental::dynamic_fusion::DependencyGraph::OpPack::inputs</a></div><div class="ttdeci">std::vector&lt; TensorId &gt; inputs</div><div class="ttdef"><b>Definition:</b> <a href="_dependency_graph_8h_source.xhtml#l00070">DependencyGraph.h:70</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_adaefd03137f6501b238946b911b6ff9d"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#adaefd03137f6501b238946b911b6ff9d">arm_compute::experimental::dynamic_fusion::DependencyGraph::operator&lt;&lt;</a></div><div class="ttdeci">friend std::ostream &amp; operator&lt;&lt;(std::ostream &amp;os, const DependencyGraph &amp;)</div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a1e041dc03ff256dfc8b0bf5c5fe099e0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">arm_compute::test::validation::pack</a></div><div class="ttdeci">ITensorPack pack</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00204">Im2Col.cpp:204</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00151">Error.h:151</a></div></div>
<div class="ttc" id="a_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00067">ClWorkloadRuntime.cpp:67</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1utils_xhtml_ab394a46b54a9f73b47493691f0a0ab9f"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#ab394a46b54a9f73b47493691f0a0ab9f">arm_compute::utils::is_in</a></div><div class="ttdeci">bool is_in(E check, std::initializer_list&lt; E &gt; list)</div><div class="ttdoc">Check if the given value is in the given enum value list.</div><div class="ttdef"><b>Definition:</b> <a href="src_2common_2utils_2_utils_8h_source.xhtml#l00075">Utils.h:75</a></div></div>
<div class="ttc" id="astructarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_1_1_op_pack_xhtml_a9f5eec44a39fbf7dc9da8508f36a950f"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_1_1_op_pack.xhtml#a9f5eec44a39fbf7dc9da8508f36a950f">arm_compute::experimental::dynamic_fusion::DependencyGraph::OpPack::operator==</a></div><div class="ttdeci">friend bool operator==(const OpPack &amp;opp0, const OpPack &amp;opp1)</div><div class="ttdef"><b>Definition:</b> <a href="_dependency_graph_8h_source.xhtml#l00072">DependencyGraph.h:72</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_a3037da158468d821b4cd5d1d831c79af"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a3037da158468d821b4cd5d1d831c79af">arm_compute::experimental::dynamic_fusion::DependencyGraph::AdjList</a></div><div class="ttdeci">std::map&lt; Id, std::vector&lt; Id &gt; &gt; AdjList</div><div class="ttdoc">Adjacency list.</div><div class="ttdef"><b>Definition:</b> <a href="_dependency_graph_8h_source.xhtml#l00062">DependencyGraph.h:62</a></div></div>
<div class="ttc" id="astructarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_1_1_op_pack_xhtml"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_1_1_op_pack.xhtml">arm_compute::experimental::dynamic_fusion::DependencyGraph::OpPack</a></div><div class="ttdoc">A pack of operator including its input and output tensors, used by traversing through the graph in to...</div><div class="ttdef"><b>Definition:</b> <a href="_dependency_graph_8h_source.xhtml#l00067">DependencyGraph.h:67</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2024 Arm Limited.</div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1mlgo_1_1parser_xhtml_a9fe67a1da3e2628bade473115ecbb5be"><div class="ttname"><a href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">arm_compute::mlgo::parser::end</a></div><div class="ttdeci">void end(TokenStream &amp;in, bool &amp;valid)</div><div class="ttdef"><b>Definition:</b> <a href="_m_l_g_o_parser_8cpp_source.xhtml#l00283">MLGOParser.cpp:283</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_a486b438340dcc49ea829c3a8724797ca"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a486b438340dcc49ea829c3a8724797ca">arm_compute::experimental::dynamic_fusion::DependencyGraph::intermediate_tensors</a></div><div class="ttdeci">std::vector&lt; TensorId &gt; intermediate_tensors() const</div><div class="ttdoc">Get intermediate tensors of the whole graph.</div><div class="ttdef"><b>Definition:</b> <a href="_dependency_graph_8h_source.xhtml#l00329">DependencyGraph.h:329</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_a6275638b3e225efcce14fa96f8952345"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a6275638b3e225efcce14fa96f8952345">arm_compute::experimental::dynamic_fusion::DependencyGraph::global_dst_tensors</a></div><div class="ttdeci">std::vector&lt; TensorId &gt; global_dst_tensors() const</div><div class="ttdoc">Get destination tensors of the whole graph.</div><div class="ttdef"><b>Definition:</b> <a href="_dependency_graph_8h_source.xhtml#l00313">DependencyGraph.h:313</a></div></div>
<div class="ttc" id="astructarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_1_1_op_pack_xhtml_aad27dbef7960c3f6b8c02a36748a3cc2"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_1_1_op_pack.xhtml#aad27dbef7960c3f6b8c02a36748a3cc2">arm_compute::experimental::dynamic_fusion::DependencyGraph::OpPack::op</a></div><div class="ttdeci">OperatorId op</div><div class="ttdef"><b>Definition:</b> <a href="_dependency_graph_8h_source.xhtml#l00069">DependencyGraph.h:69</a></div></div>
<div class="ttc" id="anamespacetf__frozen__model__extractor_xhtml_aaccc9105df5383111407fd5b41255e23"><div class="ttname"><a href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">tf_frozen_model_extractor.t</a></div><div class="ttdeci">t</div><div class="ttdef"><b>Definition:</b> <a href="tf__frozen__model__extractor_8py_source.xhtml#l00049">tf_frozen_model_extractor.py:49</a></div></div>
<div class="ttc" id="astructarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_1_1_op_pack_xhtml_a187811064e63dd693df0427dc899efce"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_1_1_op_pack.xhtml#a187811064e63dd693df0427dc899efce">arm_compute::experimental::dynamic_fusion::DependencyGraph::OpPack::outputs</a></div><div class="ttdeci">std::vector&lt; TensorId &gt; outputs</div><div class="ttdef"><b>Definition:</b> <a href="_dependency_graph_8h_source.xhtml#l00071">DependencyGraph.h:71</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_5ff8356557e4f59c6a20c3735e8d2267.xhtml">dynamic_fusion</a></li><li class="navelem"><a class="el" href="dir_729ca8b25cabcdcb8b11b571ea7b237a.xhtml">sketch</a></li><li class="navelem"><a class="el" href="dir_bdd04b65c107278b5119b030d13de22c.xhtml">utils</a></li><li class="navelem"><a class="el" href="_dependency_graph_8h.xhtml">DependencyGraph.h</a></li>
    <li class="footer">Generated on Fri Jul 26 2024 12:08:22 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
