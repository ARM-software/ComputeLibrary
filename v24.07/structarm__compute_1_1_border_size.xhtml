<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: BorderSize Struct Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.07</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('structarm__compute_1_1_border_size.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-attribs">Data Fields</a>  </div>
  <div class="headertitle">
<div class="title">BorderSize Struct Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Container for 2D border size.  
 <a href="structarm__compute_1_1_border_size.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">Types.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ae415dd6029ea707421701cd13ae4fcef"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_border_size.xhtml#ae415dd6029ea707421701cd13ae4fcef">BorderSize</a> () noexcept</td></tr>
<tr class="memdesc:ae415dd6029ea707421701cd13ae4fcef"><td class="mdescLeft">&#160;</td><td class="mdescRight">Empty border, i.e.  <a href="structarm__compute_1_1_border_size.xhtml#ae415dd6029ea707421701cd13ae4fcef">More...</a><br /></td></tr>
<tr class="separator:ae415dd6029ea707421701cd13ae4fcef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7a8ad863b84b105b9275ffef67761bfd"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_border_size.xhtml#a7a8ad863b84b105b9275ffef67761bfd">BorderSize</a> (unsigned int size) noexcept</td></tr>
<tr class="memdesc:a7a8ad863b84b105b9275ffef67761bfd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Border with equal size around the 2D plane.  <a href="structarm__compute_1_1_border_size.xhtml#a7a8ad863b84b105b9275ffef67761bfd">More...</a><br /></td></tr>
<tr class="separator:a7a8ad863b84b105b9275ffef67761bfd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a44089024084b73c5b83e509518df48e0"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_border_size.xhtml#a44089024084b73c5b83e509518df48e0">BorderSize</a> (unsigned int top_bottom, unsigned int left_right)</td></tr>
<tr class="memdesc:a44089024084b73c5b83e509518df48e0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Border with same size for top/bottom and left/right.  <a href="structarm__compute_1_1_border_size.xhtml#a44089024084b73c5b83e509518df48e0">More...</a><br /></td></tr>
<tr class="separator:a44089024084b73c5b83e509518df48e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a10a8505b7c7458d1f60cac844d42e023"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_border_size.xhtml#a10a8505b7c7458d1f60cac844d42e023">BorderSize</a> (unsigned int <a class="el" href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">top</a>, unsigned int <a class="el" href="structarm__compute_1_1_border_size.xhtml#a78b0fed184c642b78f32fd34b228a5f9">right</a>, unsigned int <a class="el" href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">bottom</a>, unsigned int <a class="el" href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">left</a>)</td></tr>
<tr class="memdesc:a10a8505b7c7458d1f60cac844d42e023"><td class="mdescLeft">&#160;</td><td class="mdescRight">Border with different sizes.  <a href="structarm__compute_1_1_border_size.xhtml#a10a8505b7c7458d1f60cac844d42e023">More...</a><br /></td></tr>
<tr class="separator:a10a8505b7c7458d1f60cac844d42e023"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afaafdfc441c2433c70959e3dfe46fd97"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_border_size.xhtml#afaafdfc441c2433c70959e3dfe46fd97">empty</a> () const</td></tr>
<tr class="memdesc:afaafdfc441c2433c70959e3dfe46fd97"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if the entire border is zero.  <a href="structarm__compute_1_1_border_size.xhtml#afaafdfc441c2433c70959e3dfe46fd97">More...</a><br /></td></tr>
<tr class="separator:afaafdfc441c2433c70959e3dfe46fd97"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb448bef8c5a6ab061f5b852bd93a427"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_border_size.xhtml#adb448bef8c5a6ab061f5b852bd93a427">uniform</a> () const</td></tr>
<tr class="memdesc:adb448bef8c5a6ab061f5b852bd93a427"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if the border is the same size on all sides.  <a href="structarm__compute_1_1_border_size.xhtml#adb448bef8c5a6ab061f5b852bd93a427">More...</a><br /></td></tr>
<tr class="separator:adb448bef8c5a6ab061f5b852bd93a427"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac2ed52112076ed0fd2aab3fbfb758837"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_border_size.xhtml#ac2ed52112076ed0fd2aab3fbfb758837">operator*=</a> (float scale)</td></tr>
<tr class="memdesc:ac2ed52112076ed0fd2aab3fbfb758837"><td class="mdescLeft">&#160;</td><td class="mdescRight">Scale this border size.  <a href="structarm__compute_1_1_border_size.xhtml#ac2ed52112076ed0fd2aab3fbfb758837">More...</a><br /></td></tr>
<tr class="separator:ac2ed52112076ed0fd2aab3fbfb758837"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a19da960d23eca69f8e65d52c741147e2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_border_size.xhtml#a19da960d23eca69f8e65d52c741147e2">operator*</a> (float scale)</td></tr>
<tr class="memdesc:a19da960d23eca69f8e65d52c741147e2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Scale a copy of this border size.  <a href="structarm__compute_1_1_border_size.xhtml#a19da960d23eca69f8e65d52c741147e2">More...</a><br /></td></tr>
<tr class="separator:a19da960d23eca69f8e65d52c741147e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a606e0a25401c9b861b360c29688d7a2f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_border_size.xhtml#a606e0a25401c9b861b360c29688d7a2f">operator==</a> (const <a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a> &amp;rhs) const</td></tr>
<tr class="memdesc:a606e0a25401c9b861b360c29688d7a2f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check equality with another <a class="el" href="structarm__compute_1_1_border_size.xhtml" title="Container for 2D border size.">BorderSize</a> struct.  <a href="structarm__compute_1_1_border_size.xhtml#a606e0a25401c9b861b360c29688d7a2f">More...</a><br /></td></tr>
<tr class="separator:a606e0a25401c9b861b360c29688d7a2f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac164b20b5aa0b7de17d49ed853473896"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_border_size.xhtml#ac164b20b5aa0b7de17d49ed853473896">operator!=</a> (const <a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a> &amp;rhs) const</td></tr>
<tr class="memdesc:ac164b20b5aa0b7de17d49ed853473896"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check non-equality with another <a class="el" href="structarm__compute_1_1_border_size.xhtml" title="Container for 2D border size.">BorderSize</a> struct.  <a href="structarm__compute_1_1_border_size.xhtml#ac164b20b5aa0b7de17d49ed853473896">More...</a><br /></td></tr>
<tr class="separator:ac164b20b5aa0b7de17d49ed853473896"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a00ac5d6334fe3217b4ef49ea8dc61fb0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_border_size.xhtml#a00ac5d6334fe3217b4ef49ea8dc61fb0">limit</a> (const <a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a> &amp;limit)</td></tr>
<tr class="memdesc:a00ac5d6334fe3217b4ef49ea8dc61fb0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Limit this border size.  <a href="structarm__compute_1_1_border_size.xhtml#a00ac5d6334fe3217b4ef49ea8dc61fb0">More...</a><br /></td></tr>
<tr class="separator:a00ac5d6334fe3217b4ef49ea8dc61fb0"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"></a>
Data Fields</h2></td></tr>
<tr class="memitem:a3fdd42ea34070a54e696b3adc28c4be3"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">top</a></td></tr>
<tr class="memdesc:a3fdd42ea34070a54e696b3adc28c4be3"><td class="mdescLeft">&#160;</td><td class="mdescRight">top of the border  <a href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">More...</a><br /></td></tr>
<tr class="separator:a3fdd42ea34070a54e696b3adc28c4be3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a78b0fed184c642b78f32fd34b228a5f9"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_border_size.xhtml#a78b0fed184c642b78f32fd34b228a5f9">right</a></td></tr>
<tr class="memdesc:a78b0fed184c642b78f32fd34b228a5f9"><td class="mdescLeft">&#160;</td><td class="mdescRight">right of the border  <a href="structarm__compute_1_1_border_size.xhtml#a78b0fed184c642b78f32fd34b228a5f9">More...</a><br /></td></tr>
<tr class="separator:a78b0fed184c642b78f32fd34b228a5f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a802ffcf1b49237efe5be8a314d3f3869"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">bottom</a></td></tr>
<tr class="memdesc:a802ffcf1b49237efe5be8a314d3f3869"><td class="mdescLeft">&#160;</td><td class="mdescRight">bottom of the border  <a href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">More...</a><br /></td></tr>
<tr class="separator:a802ffcf1b49237efe5be8a314d3f3869"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a05374b750b0fc472c34ee61e6f028bba"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">left</a></td></tr>
<tr class="memdesc:a05374b750b0fc472c34ee61e6f028bba"><td class="mdescLeft">&#160;</td><td class="mdescRight">left of the border  <a href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">More...</a><br /></td></tr>
<tr class="separator:a05374b750b0fc472c34ee61e6f028bba"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Container for 2D border size. </p>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00239">239</a> of file <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">Types.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="ae415dd6029ea707421701cd13ae4fcef"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae415dd6029ea707421701cd13ae4fcef">&#9670;&nbsp;</a></span>BorderSize() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Empty border, i.e. </p>
<p>no border </p>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00242">242</a> of file <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                                    : <a class="code" href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">top</a>{0}, <a class="code" href="structarm__compute_1_1_border_size.xhtml#a78b0fed184c642b78f32fd34b228a5f9">right</a>{0}, <a class="code" href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">bottom</a>{0}, <a class="code" href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">left</a>{0}</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    {</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    }</div>
</div><!-- fragment -->
</div>
</div>
<a id="a7a8ad863b84b105b9275ffef67761bfd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7a8ad863b84b105b9275ffef67761bfd">&#9670;&nbsp;</a></span>BorderSize() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a> </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>size</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">explicit</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Border with equal size around the 2D plane. </p>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00247">247</a> of file <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                                                              : <a class="code" href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">top</a>{size}, <a class="code" href="structarm__compute_1_1_border_size.xhtml#a78b0fed184c642b78f32fd34b228a5f9">right</a>{size}, <a class="code" href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">bottom</a>{size}, <a class="code" href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">left</a>{size}</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    {</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    }</div>
</div><!-- fragment -->
</div>
</div>
<a id="a44089024084b73c5b83e509518df48e0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a44089024084b73c5b83e509518df48e0">&#9670;&nbsp;</a></span>BorderSize() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a> </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>top_bottom</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>left_right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Border with same size for top/bottom and left/right. </p>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00252">252</a> of file <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        : <a class="code" href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">top</a>{top_bottom}, <a class="code" href="structarm__compute_1_1_border_size.xhtml#a78b0fed184c642b78f32fd34b228a5f9">right</a>{left_right}, <a class="code" href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">bottom</a>{top_bottom}, <a class="code" href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">left</a>{left_right}</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    {</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    }</div>
</div><!-- fragment -->
</div>
</div>
<a id="a10a8505b7c7458d1f60cac844d42e023"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a10a8505b7c7458d1f60cac844d42e023">&#9670;&nbsp;</a></span>BorderSize() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a> </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>right</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>bottom</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>left</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Border with different sizes. </p>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00258">258</a> of file <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        : <a class="code" href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">top</a>{<a class="code" href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">top</a>}, <a class="code" href="structarm__compute_1_1_border_size.xhtml#a78b0fed184c642b78f32fd34b228a5f9">right</a>{<a class="code" href="structarm__compute_1_1_border_size.xhtml#a78b0fed184c642b78f32fd34b228a5f9">right</a>}, <a class="code" href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">bottom</a>{<a class="code" href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">bottom</a>}, <a class="code" href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">left</a>{<a class="code" href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">left</a>}</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    {</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00339">BorderSize::top</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="afaafdfc441c2433c70959e3dfe46fd97"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afaafdfc441c2433c70959e3dfe46fd97">&#9670;&nbsp;</a></span>empty()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr bool empty </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Check if the entire border is zero. </p>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00264">264</a> of file <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    {</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">top</a> == 0 &amp;&amp; <a class="code" href="structarm__compute_1_1_border_size.xhtml#a78b0fed184c642b78f32fd34b228a5f9">right</a> == 0 &amp;&amp; <a class="code" href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">bottom</a> == 0 &amp;&amp; <a class="code" href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">left</a> == 0;</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00341">BorderSize::bottom</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00342">BorderSize::left</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00340">BorderSize::right</a>, and <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00339">BorderSize::top</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_fill_border_kernel_8cpp_source.xhtml#l00077">CLFillBorderKernel::configure()</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00269">TensorInfo::has_padding()</a>, and <a class="el" href="_n_e_fill_border_kernel_8cpp_source.xhtml#l00137">NEFillBorderKernel::run()</a>.</p>

</div>
</div>
<a id="a00ac5d6334fe3217b4ef49ea8dc61fb0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a00ac5d6334fe3217b4ef49ea8dc61fb0">&#9670;&nbsp;</a></span>limit()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void limit </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a> &amp;&#160;</td>
          <td class="paramname"><em>limit</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Limit this border size. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">limit</td><td>Border size to limit this border size to. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00331">331</a> of file <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    {</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        <a class="code" href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">top</a>    = std::min(<a class="code" href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">top</a>, <a class="code" href="structarm__compute_1_1_border_size.xhtml#a00ac5d6334fe3217b4ef49ea8dc61fb0">limit</a>.top);</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;        <a class="code" href="structarm__compute_1_1_border_size.xhtml#a78b0fed184c642b78f32fd34b228a5f9">right</a>  = std::min(<a class="code" href="structarm__compute_1_1_border_size.xhtml#a78b0fed184c642b78f32fd34b228a5f9">right</a>, <a class="code" href="structarm__compute_1_1_border_size.xhtml#a00ac5d6334fe3217b4ef49ea8dc61fb0">limit</a>.right);</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;        <a class="code" href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">bottom</a> = std::min(<a class="code" href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">bottom</a>, <a class="code" href="structarm__compute_1_1_border_size.xhtml#a00ac5d6334fe3217b4ef49ea8dc61fb0">limit</a>.bottom);</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;        <a class="code" href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">left</a>   = std::min(<a class="code" href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">left</a>, <a class="code" href="structarm__compute_1_1_border_size.xhtml#a00ac5d6334fe3217b4ef49ea8dc61fb0">limit</a>.left);</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00341">BorderSize::bottom</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00342">BorderSize::left</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00340">BorderSize::right</a>, and <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00339">BorderSize::top</a>.</p>

<p class="reference">Referenced by <a class="el" href="_n_e_fill_border_kernel_8cpp_source.xhtml#l00115">NEFillBorderKernel::configure()</a>, and <a class="el" href="_c_l_fill_border_kernel_8cpp_source.xhtml#l00077">CLFillBorderKernel::configure()</a>.</p>

</div>
</div>
<a id="ac164b20b5aa0b7de17d49ed853473896"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac164b20b5aa0b7de17d49ed853473896">&#9670;&nbsp;</a></span>operator!=()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool operator!= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Check non-equality with another <a class="el" href="structarm__compute_1_1_border_size.xhtml" title="Container for 2D border size.">BorderSize</a> struct. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>other struct to check against</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if they are different </dd></dl>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00322">322</a> of file <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    {</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        <span class="keywordflow">return</span> !(*<span class="keyword">this</span> == rhs);</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    }</div>
</div><!-- fragment -->
</div>
</div>
<a id="a19da960d23eca69f8e65d52c741147e2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a19da960d23eca69f8e65d52c741147e2">&#9670;&nbsp;</a></span>operator*()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a> operator* </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>scale</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Scale a copy of this border size. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">scale</td><td>Scale to multiply border size by.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a scaled copy of this. </dd></dl>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00297">297</a> of file <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    {</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        <a class="code" href="structarm__compute_1_1_border_size.xhtml#ae415dd6029ea707421701cd13ae4fcef">BorderSize</a> size = *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        size *= <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>;</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160; </div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        <span class="keywordflow">return</span> size;</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00272">arm_compute::test::validation::scale</a>.</p>

</div>
</div>
<a id="ac2ed52112076ed0fd2aab3fbfb758837"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac2ed52112076ed0fd2aab3fbfb758837">&#9670;&nbsp;</a></span>operator*=()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a>&amp; operator*= </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>scale</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Scale this border size. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">scale</td><td>Scale to multiply border size by.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>*this. </dd></dl>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00281">281</a> of file <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    {</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        <a class="code" href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">top</a> *= <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>;</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        <a class="code" href="structarm__compute_1_1_border_size.xhtml#a78b0fed184c642b78f32fd34b228a5f9">right</a> *= <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>;</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        <a class="code" href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">bottom</a> *= <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>;</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;        <a class="code" href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">left</a> *= <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>;</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160; </div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00341">BorderSize::bottom</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00342">BorderSize::left</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00340">BorderSize::right</a>, <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00272">arm_compute::test::validation::scale</a>, and <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00339">BorderSize::top</a>.</p>

</div>
</div>
<a id="a606e0a25401c9b861b360c29688d7a2f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a606e0a25401c9b861b360c29688d7a2f">&#9670;&nbsp;</a></span>operator==()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Check equality with another <a class="el" href="structarm__compute_1_1_border_size.xhtml" title="Container for 2D border size.">BorderSize</a> struct. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>other struct to check against</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if they are equal </dd></dl>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00311">311</a> of file <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    {</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;        <span class="keywordflow">return</span> (<a class="code" href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">top</a> == rhs.top) &amp;&amp; (<a class="code" href="structarm__compute_1_1_border_size.xhtml#a78b0fed184c642b78f32fd34b228a5f9">right</a> == rhs.right) &amp;&amp; (<a class="code" href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">bottom</a> == rhs.bottom) &amp;&amp; (<a class="code" href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">left</a> == rhs.left);</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00341">BorderSize::bottom</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00342">BorderSize::left</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00340">BorderSize::right</a>, and <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00339">BorderSize::top</a>.</p>

</div>
</div>
<a id="adb448bef8c5a6ab061f5b852bd93a427"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adb448bef8c5a6ab061f5b852bd93a427">&#9670;&nbsp;</a></span>uniform()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr bool uniform </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Check if the border is the same size on all sides. </p>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00270">270</a> of file <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    {</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">top</a> == <a class="code" href="structarm__compute_1_1_border_size.xhtml#a78b0fed184c642b78f32fd34b228a5f9">right</a> &amp;&amp; <a class="code" href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">top</a> == <a class="code" href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">bottom</a> &amp;&amp; <a class="code" href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">top</a> == <a class="code" href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">left</a>;</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00341">BorderSize::bottom</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00342">BorderSize::left</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00340">BorderSize::right</a>, and <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00339">BorderSize::top</a>.</p>

</div>
</div>
<h2 class="groupheader">Field Documentation</h2>
<a id="a802ffcf1b49237efe5be8a314d3f3869"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a802ffcf1b49237efe5be8a314d3f3869">&#9670;&nbsp;</a></span>bottom</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int bottom</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>bottom of the border </p>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00341">341</a> of file <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">Types.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="_window_helpers_8cpp_source.xhtml#l00147">arm_compute::calculate_max_enlarged_window()</a>, <a class="el" href="_window_helpers_8cpp_source.xhtml#l00029">arm_compute::calculate_max_window()</a>, <a class="el" href="_window_helpers_8cpp_source.xhtml#l00198">arm_compute::calculate_max_window_horizontal()</a>, <a class="el" href="_access_window_transpose_8cpp_source.xhtml#l00032">AccessWindowTranspose::compute_valid_region()</a>, <a class="el" href="_i_access_window_8cpp_source.xhtml#l00038">AccessWindowRectangle::compute_valid_region()</a>, <a class="el" href="_c_l_fill_border_kernel_8cpp_source.xhtml#l00077">CLFillBorderKernel::configure()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00264">BorderSize::empty()</a>, <a class="el" href="src_2core_2_sub_tensor_info_8cpp_source.xhtml#l00140">SubTensorInfo::extend_padding()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00298">TensorInfo::extend_padding()</a>, <a class="el" href="_assets_library_8h_source.xhtml#l00506">AssetsLibrary::fill_borders_with_garbage()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00331">BorderSize::limit()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00281">BorderSize::operator*=()</a>, <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01042">arm_compute::operator&lt;&lt;()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00311">BorderSize::operator==()</a>, <a class="el" href="_n_e_fill_border_kernel_8cpp_source.xhtml#l00137">NEFillBorderKernel::run()</a>, <a class="el" href="gpu_2cl_2operators_2_cl_gemm_8cpp_source.xhtml#l00786">ClGemm::run()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00270">BorderSize::uniform()</a>, <a class="el" href="_access_window_transpose_8cpp_source.xhtml#l00201">AccessWindowTranspose::update_padding_if_needed()</a>, <a class="el" href="_access_window_static_8cpp_source.xhtml#l00165">AccessWindowStatic::update_padding_if_needed()</a>, <a class="el" href="_i_access_window_8cpp_source.xhtml#l00108">AccessWindowRectangle::update_window_if_needed()</a>, and <a class="el" href="_validation_8cpp_source.xhtml#l00161">arm_compute::test::validation::validate()</a>.</p>

</div>
</div>
<a id="a05374b750b0fc472c34ee61e6f028bba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a05374b750b0fc472c34ee61e6f028bba">&#9670;&nbsp;</a></span>left</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int left</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>left of the border </p>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00342">342</a> of file <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">Types.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="_window_helpers_8cpp_source.xhtml#l00147">arm_compute::calculate_max_enlarged_window()</a>, <a class="el" href="_window_helpers_8cpp_source.xhtml#l00029">arm_compute::calculate_max_window()</a>, <a class="el" href="_window_helpers_8cpp_source.xhtml#l00198">arm_compute::calculate_max_window_horizontal()</a>, <a class="el" href="_access_window_transpose_8cpp_source.xhtml#l00032">AccessWindowTranspose::compute_valid_region()</a>, <a class="el" href="_i_access_window_8cpp_source.xhtml#l00038">AccessWindowRectangle::compute_valid_region()</a>, <a class="el" href="_c_l_fill_border_kernel_8cpp_source.xhtml#l00077">CLFillBorderKernel::configure()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00264">BorderSize::empty()</a>, <a class="el" href="src_2core_2_sub_tensor_info_8cpp_source.xhtml#l00140">SubTensorInfo::extend_padding()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00298">TensorInfo::extend_padding()</a>, <a class="el" href="_assets_library_8h_source.xhtml#l00506">AssetsLibrary::fill_borders_with_garbage()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00331">BorderSize::limit()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00281">BorderSize::operator*=()</a>, <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01042">arm_compute::operator&lt;&lt;()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00311">BorderSize::operator==()</a>, <a class="el" href="_cpu_depthwise_conv2d_assembly_dispatch_8cpp_source.xhtml#l00118">CpuDepthwiseConv2dAssemblyDispatch::prepare()</a>, <a class="el" href="_n_e_f_f_t_radix_stage_kernel_8cpp_source.xhtml#l01139">NEFFTRadixStageKernel::run()</a>, <a class="el" href="_n_e_fill_border_kernel_8cpp_source.xhtml#l00137">NEFillBorderKernel::run()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00270">BorderSize::uniform()</a>, <a class="el" href="_access_window_transpose_8cpp_source.xhtml#l00201">AccessWindowTranspose::update_padding_if_needed()</a>, <a class="el" href="_access_window_static_8cpp_source.xhtml#l00165">AccessWindowStatic::update_padding_if_needed()</a>, <a class="el" href="_i_access_window_8cpp_source.xhtml#l00108">AccessWindowRectangle::update_window_if_needed()</a>, and <a class="el" href="_validation_8cpp_source.xhtml#l00161">arm_compute::test::validation::validate()</a>.</p>

</div>
</div>
<a id="a78b0fed184c642b78f32fd34b228a5f9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a78b0fed184c642b78f32fd34b228a5f9">&#9670;&nbsp;</a></span>right</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int right</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>right of the border </p>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00340">340</a> of file <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">Types.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="_window_helpers_8cpp_source.xhtml#l00147">arm_compute::calculate_max_enlarged_window()</a>, <a class="el" href="_window_helpers_8cpp_source.xhtml#l00029">arm_compute::calculate_max_window()</a>, <a class="el" href="_window_helpers_8cpp_source.xhtml#l00198">arm_compute::calculate_max_window_horizontal()</a>, <a class="el" href="_access_window_transpose_8cpp_source.xhtml#l00032">AccessWindowTranspose::compute_valid_region()</a>, <a class="el" href="_i_access_window_8cpp_source.xhtml#l00038">AccessWindowRectangle::compute_valid_region()</a>, <a class="el" href="_cl_indirect_conv2d_kernel_8cpp_source.xhtml#l00126">ClIndirectConv2dKernel::configure()</a>, <a class="el" href="_c_l_fill_border_kernel_8cpp_source.xhtml#l00077">CLFillBorderKernel::configure()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00264">BorderSize::empty()</a>, <a class="el" href="src_2core_2_sub_tensor_info_8cpp_source.xhtml#l00140">SubTensorInfo::extend_padding()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00298">TensorInfo::extend_padding()</a>, <a class="el" href="_assets_library_8h_source.xhtml#l00506">AssetsLibrary::fill_borders_with_garbage()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00331">BorderSize::limit()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00281">BorderSize::operator*=()</a>, <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01042">arm_compute::operator&lt;&lt;()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00311">BorderSize::operator==()</a>, <a class="el" href="_n_e_f_f_t_radix_stage_kernel_8cpp_source.xhtml#l01139">NEFFTRadixStageKernel::run()</a>, <a class="el" href="_n_e_fill_border_kernel_8cpp_source.xhtml#l00137">NEFillBorderKernel::run()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00270">BorderSize::uniform()</a>, <a class="el" href="_access_window_transpose_8cpp_source.xhtml#l00201">AccessWindowTranspose::update_padding_if_needed()</a>, <a class="el" href="_access_window_static_8cpp_source.xhtml#l00165">AccessWindowStatic::update_padding_if_needed()</a>, <a class="el" href="_i_access_window_8cpp_source.xhtml#l00108">AccessWindowRectangle::update_window_if_needed()</a>, and <a class="el" href="_validation_8cpp_source.xhtml#l00161">arm_compute::test::validation::validate()</a>.</p>

</div>
</div>
<a id="a3fdd42ea34070a54e696b3adc28c4be3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3fdd42ea34070a54e696b3adc28c4be3">&#9670;&nbsp;</a></span>top</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int top</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>top of the border </p>

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00339">339</a> of file <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">Types.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00258">BorderSize::BorderSize()</a>, <a class="el" href="_window_helpers_8cpp_source.xhtml#l00147">arm_compute::calculate_max_enlarged_window()</a>, <a class="el" href="_window_helpers_8cpp_source.xhtml#l00029">arm_compute::calculate_max_window()</a>, <a class="el" href="_window_helpers_8cpp_source.xhtml#l00198">arm_compute::calculate_max_window_horizontal()</a>, <a class="el" href="_access_window_transpose_8cpp_source.xhtml#l00032">AccessWindowTranspose::compute_valid_region()</a>, <a class="el" href="_i_access_window_8cpp_source.xhtml#l00038">AccessWindowRectangle::compute_valid_region()</a>, <a class="el" href="_c_l_fill_border_kernel_8cpp_source.xhtml#l00077">CLFillBorderKernel::configure()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00264">BorderSize::empty()</a>, <a class="el" href="src_2core_2_sub_tensor_info_8cpp_source.xhtml#l00140">SubTensorInfo::extend_padding()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00298">TensorInfo::extend_padding()</a>, <a class="el" href="_assets_library_8h_source.xhtml#l00506">AssetsLibrary::fill_borders_with_garbage()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00331">BorderSize::limit()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00281">BorderSize::operator*=()</a>, <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01042">arm_compute::operator&lt;&lt;()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00311">BorderSize::operator==()</a>, <a class="el" href="_n_e_fill_border_kernel_8cpp_source.xhtml#l00137">NEFillBorderKernel::run()</a>, <a class="el" href="gpu_2cl_2operators_2_cl_gemm_8cpp_source.xhtml#l00786">ClGemm::run()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00270">BorderSize::uniform()</a>, <a class="el" href="_access_window_transpose_8cpp_source.xhtml#l00201">AccessWindowTranspose::update_padding_if_needed()</a>, <a class="el" href="_access_window_static_8cpp_source.xhtml#l00165">AccessWindowStatic::update_padding_if_needed()</a>, <a class="el" href="_i_access_window_8cpp_source.xhtml#l00108">AccessWindowRectangle::update_window_if_needed()</a>, and <a class="el" href="_validation_8cpp_source.xhtml#l00161">arm_compute::test::validation::validate()</a>.</p>

</div>
</div>
<hr/>The documentation for this struct was generated from the following file:<ul>
<li>arm_compute/core/<a class="el" href="arm__compute_2core_2_types_8h_source.xhtml">Types.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="astructarm__compute_1_1_border_size_xhtml_a78b0fed184c642b78f32fd34b228a5f9"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a78b0fed184c642b78f32fd34b228a5f9">arm_compute::BorderSize::right</a></div><div class="ttdeci">unsigned int right</div><div class="ttdoc">right of the border</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00340">Types.h:340</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_border_size_xhtml_a3fdd42ea34070a54e696b3adc28c4be3"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">arm_compute::BorderSize::top</a></div><div class="ttdeci">unsigned int top</div><div class="ttdoc">top of the border</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00339">Types.h:339</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_border_size_xhtml_ae415dd6029ea707421701cd13ae4fcef"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#ae415dd6029ea707421701cd13ae4fcef">arm_compute::BorderSize::BorderSize</a></div><div class="ttdeci">constexpr BorderSize() noexcept</div><div class="ttdoc">Empty border, i.e.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00242">Types.h:242</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_border_size_xhtml_a802ffcf1b49237efe5be8a314d3f3869"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">arm_compute::BorderSize::bottom</a></div><div class="ttdeci">unsigned int bottom</div><div class="ttdoc">bottom of the border</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00341">Types.h:341</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_border_size_xhtml_a00ac5d6334fe3217b4ef49ea8dc61fb0"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a00ac5d6334fe3217b4ef49ea8dc61fb0">arm_compute::BorderSize::limit</a></div><div class="ttdeci">void limit(const BorderSize &amp;limit)</div><div class="ttdoc">Limit this border size.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00331">Types.h:331</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a4f12b7902ae53e3898b2ab779f962340"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">arm_compute::test::validation::scale</a></div><div class="ttdeci">NEScale scale</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00272">Scale.cpp:272</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_border_size_xhtml_a05374b750b0fc472c34ee61e6f028bba"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">arm_compute::BorderSize::left</a></div><div class="ttdeci">unsigned int left</div><div class="ttdoc">left of the border</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00342">Types.h:342</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a></li>
    <li class="footer">Generated on Fri Jul 26 2024 12:08:29 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
