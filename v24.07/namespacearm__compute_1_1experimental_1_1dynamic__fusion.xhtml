<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute::experimental::dynamic_fusion Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.07</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">arm_compute::experimental::dynamic_fusion Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml">ArgumentPack</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a generic class that packs the arguments of an operator.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_argument_pack.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_aux_memory_info.xhtml">AuxMemoryInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_memory.xhtml" title="CPU implementation of memory object.">Memory</a> information for tensors with <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01a81cbcdf2b235a9fac1b797ce93322276">MemoryType::Auxiliary</a>.  <a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_aux_memory_info.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cast_attributes.xhtml">CastAttributes</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cast_attributes.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_clamp_attributes.xhtml">ClampAttributes</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_clamp_attributes.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_activation.xhtml">ClComponentActivation</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_cast.xhtml">ClComponentCast</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_cast_settings.xhtml">ClComponentCastSettings</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Component specific settings.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_cast_settings.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_depthwise_conv2d.xhtml">ClComponentDepthwiseConv2d</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_depthwise_conv2d_settings.xhtml">ClComponentDepthwiseConv2dSettings</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Component specific settings.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_depthwise_conv2d_settings.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_direct_conv2d.xhtml">ClComponentDirectConv2d</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_direct_conv2d_settings.xhtml">ClComponentDirectConv2dSettings</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Component specific settings.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_direct_conv2d_settings.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_elementwise_binary.xhtml">ClComponentElementwiseBinary</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_mat_mul.xhtml">ClComponentMatMul</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_pool2d.xhtml">ClComponentPool2d</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_reshape.xhtml">ClComponentReshape</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_resize.xhtml">ClComponentResize</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_store.xhtml">ClComponentStore</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_runtime.xhtml">ClKernelRuntime</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">OpenCL runtime to run a single kernel.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_runtime.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_runtime.xhtml">ClWorkloadRuntime</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">OpenCL runtime to run a workload.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_runtime.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_attributes.xhtml">Conv2dAttributes</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_attributes.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml">DependencyGraph</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A multi-input (tensors), multi-output (tensors) acyclic directed graph Represented as a doubly-linked adjacency list with the differentiation between source and destination.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_depthwise_conv2d_attributes.xhtml">DepthwiseConv2dAttributes</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_depthwise_conv2d_attributes.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_elementwise_binary_common_attributes.xhtml">ElementwiseBinaryCommonAttributes</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_add.xhtml">GpuAdd</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="An operator for the sole purpose of validating fusion.">Operator</a> interface.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_add.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_cast.xhtml">GpuCast</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="An operator for the sole purpose of validating fusion.">Operator</a> interface.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_cast.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_activation.xhtml">GpuCkwActivation</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_cast.xhtml">GpuCkwCast</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml">GpuCkwComponentArgument</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">The argument of a dynamic fusion component which can be either user tensor or virtual tensor.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_component_argument.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_depthwise_conv2d.xhtml">GpuCkwDepthwiseConv2d</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_direct_conv2d.xhtml">GpuCkwDirectConv2d</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_driver.xhtml">GpuCkwDriver</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Use <a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> Writer to write kernel code Used by <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml">dynamic_fusion</a> module.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_driver.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_elementwise_binary.xhtml">GpuCkwElementwiseBinary</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_mat_mul.xhtml">GpuCkwMatMul</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_pool2d.xhtml">GpuCkwPool2d</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_resize.xhtml">GpuCkwResize</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_scoped_kernel_writer.xhtml">GpuCkwScopedKernelWriter</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper to automatically manage kernel writer ID space.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_scoped_kernel_writer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_store.xhtml">GpuCkwStore</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_variable_table.xhtml">GpuCkwVariableTable</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A table of all the variables used in the kernel.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_variable_table.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_clamp.xhtml">GpuClamp</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="An operator for the sole purpose of validating fusion.">Operator</a> interface.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_clamp.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_component_services.xhtml">GpuComponentServices</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Services that are used throughout the creation phase of workload code.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_component_services.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_conv2d.xhtml">GpuConv2d</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="An operator for the sole purpose of validating fusion.">Operator</a> interface.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_conv2d.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_depthwise_conv2d.xhtml">GpuDepthwiseConv2d</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="An operator for the sole purpose of validating fusion.">Operator</a> interface.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_depthwise_conv2d.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_elementwise_binary_common.xhtml">GpuElementwiseBinaryCommon</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="An operator for the sole purpose of validating fusion.">Operator</a> interface.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_elementwise_binary_common.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_argument_binding.xhtml">GpuKernelArgumentBinding</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Describe how to extract information from a runtime Gpu tensor, and set it as an argument to a gpu kernel at runtime.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_argument_binding.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_factory.xhtml">GpuKernelComponentFactory</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Factory class that creates new instances of <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_kernel_component.xhtml">IGpuKernelComponent</a> by assigning new component ids.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_factory.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_graph.xhtml">GpuKernelComponentGraph</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A multi-input (tensors), multi-output (tensors) acyclic directed graph of gpu kernel components Its main purposes are:  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_graph.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml">GpuKernelComponentGroup</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A group of gpu kernel components to be fused together PRECONDITIONS:  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_stream.xhtml">GpuKernelComponentStream</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A linear sequence of component groups serialized from the <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_graph.xhtml">GpuKernelComponentGraph</a> Each component group in the stream denotes a complete kernel that may consist of multiple components.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_stream.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_source_code.xhtml">GpuKernelSourceCode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Container of kernel code to be compiled and run in a <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_unit_workload.xhtml">GpuUnitWorkload</a>.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_source_code.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_logical_kernel.xhtml">GpuLogicalKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A wrapper-processor of a <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_component_group.xhtml">GpuKernelComponentGroup</a> It adds the load (if any) and store components to the component group The <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_logical_kernel.xhtml">GpuLogicalKernel</a> represents a complete kernel, and can proceed to invoke any kernel writer to generate the full kernel code.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_logical_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_mat_mul.xhtml">GpuMatMul</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="An operator for the sole purpose of validating fusion.">Operator</a> interface.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_mat_mul.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_mat_mul_settings.xhtml">GpuMatMulSettings</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="An operator for the sole purpose of validating fusion.">Operator</a> backend specific settings.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_mat_mul_settings.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_mul.xhtml">GpuMul</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="An operator for the sole purpose of validating fusion.">Operator</a> interface.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_mul.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_operator_group.xhtml">GpuOperatorGroup</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A linear sequence of operators to be fused in a workload For the time being, this class is only used for validating operator fusion INVARIANTS:  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_operator_group.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_output.xhtml">GpuOutput</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="An operator for the sole purpose of validating fusion.">Operator</a> interface.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_output.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_pool2d.xhtml">GpuPool2d</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="An operator for the sole purpose of validating fusion.">Operator</a> interface.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_pool2d.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_pool2d_settings.xhtml">GpuPool2dSettings</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="An operator for the sole purpose of validating fusion.">Operator</a> backend specific settings.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_pool2d_settings.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_reshape.xhtml">GpuReshape</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="An operator for the sole purpose of validating fusion.">Operator</a> interface.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_reshape.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_resize.xhtml">GpuResize</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="An operator for the sole purpose of validating fusion.">Operator</a> interface.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_resize.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_sigmoid.xhtml">GpuSigmoid</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="An operator for the sole purpose of validating fusion.">Operator</a> interface.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_sigmoid.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_softmax.xhtml">GpuSoftmax</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="An operator for the sole purpose of validating fusion.">Operator</a> interface.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_softmax.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_sub.xhtml">GpuSub</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="An operator for the sole purpose of validating fusion.">Operator</a> interface.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_sub.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_tanh.xhtml">GpuTanh</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="An operator for the sole purpose of validating fusion.">Operator</a> interface.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_tanh.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_unit_workload.xhtml">GpuUnitWorkload</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">The atomic unit in a Gpu workload.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_unit_workload.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument.xhtml">GpuWorkloadArgument</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Describes all the info related to a <b>workload argument</b> (tensor) in order to:  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_context.xhtml">GpuWorkloadContext</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Provide context necessary for the creation and configuration of a workload e.g.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_context.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_sketch.xhtml">GpuWorkloadSketch</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A descriptor of a workload of operators.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_sketch.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code.xhtml">GpuWorkloadSourceCode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Hold the generated kernel source code and other information required to compile and run the workload.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml">IGpuCkwComponentDriver</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">An interface used by <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_driver.xhtml">GpuCkwDriver</a> to write source code for a kernel component.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_ckw_component_driver.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_kernel_component.xhtml">IGpuKernelComponent</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">An abstract interface of a component.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_kernel_component.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_kernel_writer.xhtml">IGpuKernelWriter</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">An interface that can write a gpu kernel.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_gpu_kernel_writer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_kernel_properties.xhtml">KernelProperties</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Properties common to all kernel component types.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_kernel_properties.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_mat_mul_attributes.xhtml">MatMulAttributes</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_mat_mul_attributes.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_memory_descriptor.xhtml">MemoryDescriptor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Descriptor of a workload tensor memory.  <a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_memory_descriptor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml">Operator</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">An operator for the sole purpose of validating fusion.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_pool2d_attributes.xhtml">Pool2dAttributes</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_pool2d_attributes.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_reshape_attributes.xhtml">ReshapeAttributes</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_reshape_attributes.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_resize_attributes.xhtml">ResizeAttributes</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_resize_attributes.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_softmax_attributes.xhtml">SoftmaxAttributes</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Attributes are backend-agnostic parameters (in addition to the input/output tensors) of an operator.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_softmax_attributes.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage.xhtml">UnitWorkloadStage</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Describes when a unit workload is run.  <a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:a37e4969b4b21379046bb4d89690af049"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a37e4969b4b21379046bb4d89690af049">GpuTarget</a> = ::<a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">arm_compute::GPUTarget</a></td></tr>
<tr class="memdesc:a37e4969b4b21379046bb4d89690af049"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gpu Information such as the Gpu target (for example, G76)  <a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a37e4969b4b21379046bb4d89690af049">More...</a><br /></td></tr>
<tr class="separator:a37e4969b4b21379046bb4d89690af049"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe5718c3616edd5134e3058a1bb50b76"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#abe5718c3616edd5134e3058a1bb50b76">MemoryDescriptorMap</a> = std::map&lt; <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a1fafaeb6e3ab8c0bc772532cc3fcff1a">ITensorInfo::Id</a>, <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_memory_descriptor.xhtml">MemoryDescriptor</a> &gt;</td></tr>
<tr class="memdesc:abe5718c3616edd5134e3058a1bb50b76"><td class="mdescLeft">&#160;</td><td class="mdescRight">A map from <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> to their corresponding <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_memory_descriptor.xhtml">MemoryDescriptor</a>.  <a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#abe5718c3616edd5134e3058a1bb50b76">More...</a><br /></td></tr>
<tr class="separator:abe5718c3616edd5134e3058a1bb50b76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc7903553dd77d72eb2baf6297b0d2f2"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#adc7903553dd77d72eb2baf6297b0d2f2">TileContainer</a> = std::vector&lt; std::vector&lt; int32_t &gt; &gt;</td></tr>
<tr class="separator:adc7903553dd77d72eb2baf6297b0d2f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a03b0a94b67bc162ab8e33fffab3269a0"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a03b0a94b67bc162ab8e33fffab3269a0">Settings</a> = <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_depthwise_conv2d_settings.xhtml">ClComponentDepthwiseConv2dSettings</a></td></tr>
<tr class="separator:a03b0a94b67bc162ab8e33fffab3269a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afff13da4ff0bb0cd14e24f19743c8225"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#afff13da4ff0bb0cd14e24f19743c8225">ComponentId</a> = int32_t</td></tr>
<tr class="memdesc:afff13da4ff0bb0cd14e24f19743c8225"><td class="mdescLeft">&#160;</td><td class="mdescRight">Uniquely identifies a kernel component within a workload.  <a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#afff13da4ff0bb0cd14e24f19743c8225">More...</a><br /></td></tr>
<tr class="separator:afff13da4ff0bb0cd14e24f19743c8225"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a204855c6bb170912fc54f8ad10ee2b96"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a204855c6bb170912fc54f8ad10ee2b96">GpuKernelArgumentList</a> = std::deque&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_argument_binding.xhtml">GpuKernelArgumentBinding</a> &gt;</td></tr>
<tr class="memdesc:a204855c6bb170912fc54f8ad10ee2b96"><td class="mdescLeft">&#160;</td><td class="mdescRight">The argument list of a <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_source_code.xhtml">GpuKernelSourceCode</a>.  <a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a204855c6bb170912fc54f8ad10ee2b96">More...</a><br /></td></tr>
<tr class="separator:a204855c6bb170912fc54f8ad10ee2b96"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7c53fb0e6cdb59d291688a586922ae57"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a7c53fb0e6cdb59d291688a586922ae57">OperatorId</a> = <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aae2526157a355e3de67c19aae6e5e133">DependencyGraph::OperatorId</a></td></tr>
<tr class="separator:a7c53fb0e6cdb59d291688a586922ae57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d71b29724606979807dcfc1ad80ef6c"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4d71b29724606979807dcfc1ad80ef6c">UnitWorkloadId</a> = int32_t</td></tr>
<tr class="memdesc:a4d71b29724606979807dcfc1ad80ef6c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Uniquely identifies a <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_unit_workload.xhtml">GpuUnitWorkload</a> within a <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code.xhtml">GpuWorkloadSourceCode</a>.  <a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4d71b29724606979807dcfc1ad80ef6c">More...</a><br /></td></tr>
<tr class="separator:a4d71b29724606979807dcfc1ad80ef6c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:aa334134c2d2596d8de13df6f9cb67d1d"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#aa334134c2d2596d8de13df6f9cb67d1d">GpuLanguage</a> { <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#aa334134c2d2596d8de13df6f9cb67d1da7982b09a852b37f2afb1227eaf552e47">OpenCL</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#aa334134c2d2596d8de13df6f9cb67d1da88183b946cc5f0e8c96b2e66e1c74a7e">Unknown</a>
 }</td></tr>
<tr class="memdesc:aa334134c2d2596d8de13df6f9cb67d1d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gpu Language.  <a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#aa334134c2d2596d8de13df6f9cb67d1d">More...</a><br /></td></tr>
<tr class="separator:aa334134c2d2596d8de13df6f9cb67d1d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a462bfa9dfea81692463ecb192183dd01"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01">MemoryType</a> { <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01a8f9bfe9d1345237cb3b2b205864da075">User</a> = 0, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01a81cbcdf2b235a9fac1b797ce93322276">Auxiliary</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01a615e6f9baca5553d44683a098d342b70">Virtual</a>
 }</td></tr>
<tr class="memdesc:a462bfa9dfea81692463ecb192183dd01"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of memory used by a workload tensor.  <a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01">More...</a><br /></td></tr>
<tr class="separator:a462bfa9dfea81692463ecb192183dd01"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab26c0327042b802ca8cff46a9bc67670"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670">GpuComponentType</a> { <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670a10b4eb76294b70d7fd6df997ff06edb1">Complex</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670a1fbb1e3943c2c6c560247ac8f9289780">Simple</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670ae157cdc2ee225c7a081c7bae83f17b0c">Unfusable</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670a29c2c02a361c9d7028472e5d92cd4a54">Output</a>
 }</td></tr>
<tr class="memdesc:ab26c0327042b802ca8cff46a9bc67670"><td class="mdescLeft">&#160;</td><td class="mdescRight">Component type in the context of fusion Its main purpose is to inform the optimizer how to perform fusion.  <a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670">More...</a><br /></td></tr>
<tr class="separator:ab26c0327042b802ca8cff46a9bc67670"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a75c170cf528423bcef54834f6abad95d"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a75c170cf528423bcef54834f6abad95d">TensorStorageType</a> { <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a75c170cf528423bcef54834f6abad95da88183b946cc5f0e8c96b2e66e1c74a7e">Unknown</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a75c170cf528423bcef54834f6abad95daf368a9df1a9e1958e6b9784f42e8ab3c">ClBufferUint8Ptr</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a75c170cf528423bcef54834f6abad95da5e5df97fcf18f69b21caabba47034419">ClImage2dReadOnly</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a75c170cf528423bcef54834f6abad95dafea9b17c253f9e05d20b10b878f4ce93">ClImage2dWriteOnly</a>
 }</td></tr>
<tr class="memdesc:a75c170cf528423bcef54834f6abad95d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Describe how the tensor runtime memory can be accessed.  <a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a75c170cf528423bcef54834f6abad95d">More...</a><br /></td></tr>
<tr class="separator:a75c170cf528423bcef54834f6abad95d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab14b36d0ef48001465fe49c3689e27df"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27df">TensorComponentType</a> { <br />
&#160;&#160;<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfa88183b946cc5f0e8c96b2e66e1c74a7e">Unknown</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfa0d43d985fc3a7e81bd0a2392bfa375f2">OffsetFirstElement</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfa951a4eb66fe4736f2dc28c444d194197">Stride0</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfa56458b2cf5b9cf6680f7a1a2df201088">Stride1</a>, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfa96cdc37a3a7c2c8d3495d713d1d293e1">Stride2</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfa830e11331f9da0cc171d1554bf91afdf">Stride3</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfa08d73a8dedbfeee532f8aea75a0f7e3f">Stride4</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfad3455d1cff9716d43c455aa959720525">Dim0</a>, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfaf714267608d53bc244cb23f12d46573f">Dim1</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfa6910fb9de80a184c63575625d5ac6063">Dim2</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfab51cb01d37be2f9684fe7f52f62034cf">Dim3</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfae663b146594eb6dd6c5ed3ca9687d111">Dim4</a>, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfaf3d2f2608a883924237d73e639fe91f9">Dim1xDim2</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfa11bc5c4991b2c0d1e633683c73816395">Dim2xDim3</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfae72f3c6fb1c5222747434dc4471d108a">Dim1xDim2xDim3</a>
<br />
 }</td></tr>
<tr class="memdesc:ab14b36d0ef48001465fe49c3689e27df"><td class="mdescLeft">&#160;</td><td class="mdescRight">Describe additional runtime information about the tensor.  <a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27df">More...</a><br /></td></tr>
<tr class="separator:ab14b36d0ef48001465fe49c3689e27df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a17730d14d0e88d5aed17a12e872c4efe"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17730d14d0e88d5aed17a12e872c4efe">GpuOperatorType</a> { <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17730d14d0e88d5aed17a12e872c4efea1fbb1e3943c2c6c560247ac8f9289780">Simple</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17730d14d0e88d5aed17a12e872c4efea10b4eb76294b70d7fd6df997ff06edb1">Complex</a>, 
<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17730d14d0e88d5aed17a12e872c4efeae157cdc2ee225c7a081c7bae83f17b0c">Unfusable</a>
 }</td></tr>
<tr class="memdesc:a17730d14d0e88d5aed17a12e872c4efe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Contain properties common to all operator types.  <a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17730d14d0e88d5aed17a12e872c4efe">More...</a><br /></td></tr>
<tr class="separator:a17730d14d0e88d5aed17a12e872c4efe"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a5e44619cc49fc50ee746e6dece3897f4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a5e44619cc49fc50ee746e6dece3897f4">cl_add_tensor_component_argument</a> (cl::Kernel &amp;kernel, unsigned int &amp;idx, const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27df">TensorComponentType</a> component)</td></tr>
<tr class="memdesc:a5e44619cc49fc50ee746e6dece3897f4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Select a Compute <a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> Writer tensor component from a tensor and add to the kernel's arguments at the specified index idx.  <a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a5e44619cc49fc50ee746e6dece3897f4">More...</a><br /></td></tr>
<tr class="separator:a5e44619cc49fc50ee746e6dece3897f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abc5a464154fab3b146898c6be4224c2d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#abc5a464154fab3b146898c6be4224c2d">cl_add_buffer_argument</a> (cl::Kernel &amp;kernel, unsigned int &amp;idx, const cl::Buffer &amp;buffer)</td></tr>
<tr class="memdesc:abc5a464154fab3b146898c6be4224c2d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add an OpenCL buffer object to the kernel's arguments at the specified index <code>idx</code>.  <a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#abc5a464154fab3b146898c6be4224c2d">More...</a><br /></td></tr>
<tr class="separator:abc5a464154fab3b146898c6be4224c2d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5b754bc23e9853931746766d3aeb6a9d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a5b754bc23e9853931746766d3aeb6a9d">cl_add_texture_argument</a> (cl::Kernel &amp;kernel, unsigned int &amp;idx, const <a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#acf12205a65321baefe5174db248f56f6">cl::Image</a> &amp;image)</td></tr>
<tr class="memdesc:a5b754bc23e9853931746766d3aeb6a9d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add an OpenCL image object to the kernel's arguments at the specified index <code>idx</code>.  <a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a5b754bc23e9853931746766d3aeb6a9d">More...</a><br /></td></tr>
<tr class="separator:a5b754bc23e9853931746766d3aeb6a9d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a2bbeb7b1b6544f6e17b09491385bce"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a9a2bbeb7b1b6544f6e17b09491385bce">get_coordinate_from_gws</a> (<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_scoped_kernel_writer.xhtml">GpuCkwScopedKernelWriter</a> writer, ckw::TileOperand &amp;coord, const ckw::TileOperand &amp;gid, ckw::TileOperand &amp;step)</td></tr>
<tr class="memdesc:a9a2bbeb7b1b6544f6e17b09491385bce"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get coordinate along one axis.  <a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a9a2bbeb7b1b6544f6e17b09491385bce">More...</a><br /></td></tr>
<tr class="separator:a9a2bbeb7b1b6544f6e17b09491385bce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8173252b41cb85ccb7e222495fbe9d0f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a8173252b41cb85ccb7e222495fbe9d0f">get_coordinate_from_gws_overlapping_min</a> (<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_scoped_kernel_writer.xhtml">GpuCkwScopedKernelWriter</a> writer, ckw::TileOperand &amp;coord, const ckw::TileOperand &amp;gid, ckw::TileOperand &amp;step, ckw::TileOperand &amp;shift_back, ckw::TileOperand &amp;const_0)</td></tr>
<tr class="memdesc:a8173252b41cb85ccb7e222495fbe9d0f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get boundary aware coordinate along one axis.  <a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a8173252b41cb85ccb7e222495fbe9d0f">More...</a><br /></td></tr>
<tr class="separator:a8173252b41cb85ccb7e222495fbe9d0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af3686c3e3c5e56e66d4425ca22380a91"><td class="memItemLeft" align="right" valign="top">ckw::DataType&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#af3686c3e3c5e56e66d4425ca22380a91">to_ckw</a> (<a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="el" href="_n_e_select_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>)</td></tr>
<tr class="memdesc:af3686c3e3c5e56e66d4425ca22380a91"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert the Compute Library data type to Compute <a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> Writer data type.  <a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#af3686c3e3c5e56e66d4425ca22380a91">More...</a><br /></td></tr>
<tr class="separator:af3686c3e3c5e56e66d4425ca22380a91"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a42efa77c8c1898a9ecf74b6ac3af3b40"><td class="memItemLeft" align="right" valign="top">ckw::TensorShape&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a42efa77c8c1898a9ecf74b6ac3af3b40">to_ckw</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape)</td></tr>
<tr class="memdesc:a42efa77c8c1898a9ecf74b6ac3af3b40"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert the Compute Library tensor shape to Compute <a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> Writer tensor shape.  <a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a42efa77c8c1898a9ecf74b6ac3af3b40">More...</a><br /></td></tr>
<tr class="separator:a42efa77c8c1898a9ecf74b6ac3af3b40"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5786103fc3433a4251736a4aa5a10983"><td class="memItemLeft" align="right" valign="top">ckw::TensorDataLayout&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a5786103fc3433a4251736a4aa5a10983">to_ckw</a> (<a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="el" href="_n_e_fuse_batch_normalization_kernel_8cpp.xhtml#a6f725602583bcad27d0d2cad1e871128">dl</a>)</td></tr>
<tr class="memdesc:a5786103fc3433a4251736a4aa5a10983"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert the Compute Library data layout to Compute <a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> Writer data layout.  <a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a5786103fc3433a4251736a4aa5a10983">More...</a><br /></td></tr>
<tr class="separator:a5786103fc3433a4251736a4aa5a10983"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8765006aa2ace878b93759853ebfba8b"><td class="memItemLeft" align="right" valign="top">ckw::TensorInfo&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a8765006aa2ace878b93759853ebfba8b">to_ckw</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a>)</td></tr>
<tr class="memdesc:a8765006aa2ace878b93759853ebfba8b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert the Compute Library tensor info to Compute <a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> Writer tensor info.  <a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a8765006aa2ace878b93759853ebfba8b">More...</a><br /></td></tr>
<tr class="separator:a8765006aa2ace878b93759853ebfba8b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0d9efc610b9abef3116b2e3fde52d242"><td class="memItemLeft" align="right" valign="top">ckw::TensorStorageType&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a0d9efc610b9abef3116b2e3fde52d242">to_ckw</a> (const <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a75c170cf528423bcef54834f6abad95d">TensorStorageType</a> &amp;storage)</td></tr>
<tr class="memdesc:a0d9efc610b9abef3116b2e3fde52d242"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert the Compute Library tensor storage to Compute <a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> Writer tensor storage.  <a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a0d9efc610b9abef3116b2e3fde52d242">More...</a><br /></td></tr>
<tr class="separator:a0d9efc610b9abef3116b2e3fde52d242"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a49ee5c1a04d75e5c378ebe5e880f0578"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27df">TensorComponentType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a49ee5c1a04d75e5c378ebe5e880f0578">from_ckw</a> (const ckw::TensorComponentType &amp;component)</td></tr>
<tr class="memdesc:a49ee5c1a04d75e5c378ebe5e880f0578"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert the Compute <a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> Writer tensor component to Compute Library tensor component.  <a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a49ee5c1a04d75e5c378ebe5e880f0578">More...</a><br /></td></tr>
<tr class="separator:a49ee5c1a04d75e5c378ebe5e880f0578"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2237081231e7f62671a9e795cb5919d7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a75c170cf528423bcef54834f6abad95d">TensorStorageType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a2237081231e7f62671a9e795cb5919d7">from_ckw</a> (const ckw::TensorStorageType &amp;storage)</td></tr>
<tr class="memdesc:a2237081231e7f62671a9e795cb5919d7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert the Compute <a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> Writer tensor storage to Compute Library tensor storage.  <a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a2237081231e7f62671a9e795cb5919d7">More...</a><br /></td></tr>
<tr class="separator:a2237081231e7f62671a9e795cb5919d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a92aabaaa807578643b3ce4acfc96e02b"><td class="memItemLeft" align="right" valign="top">ckw::BinaryOp&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a92aabaaa807578643b3ce4acfc96e02b">to_ckw</a> (const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_elementwise_binary_common_attributes.xhtml">ElementwiseBinaryCommonAttributes</a> &amp;attributes)</td></tr>
<tr class="separator:a92aabaaa807578643b3ce4acfc96e02b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7bf4bff4857d4c4853192a2ad42f3328"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a7bf4bff4857d4c4853192a2ad42f3328">operator==</a> (const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_kernel_properties.xhtml">KernelProperties</a> &amp;config0, const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_kernel_properties.xhtml">KernelProperties</a> &amp;config1)</td></tr>
<tr class="separator:a7bf4bff4857d4c4853192a2ad42f3328"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d8c915c15145d6e31f8123d349cd895"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4d8c915c15145d6e31f8123d349cd895">operator==</a> (const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage.xhtml">UnitWorkloadStage</a> &amp;stage0, const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage.xhtml">UnitWorkloadStage</a> &amp;stage1)</td></tr>
<tr class="separator:a4d8c915c15145d6e31f8123d349cd895"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a118248edb8d3a4911bc101671512856b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a118248edb8d3a4911bc101671512856b">is_alloc_tensor</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a>)</td></tr>
<tr class="memdesc:a118248edb8d3a4911bc101671512856b"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> should have backing memory.  <a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a118248edb8d3a4911bc101671512856b">More...</a><br /></td></tr>
<tr class="separator:a118248edb8d3a4911bc101671512856b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a499dfe6aa8bf166e03f1a15eca55355e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a499dfe6aa8bf166e03f1a15eca55355e">is_noalloc_tensor</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a>)</td></tr>
<tr class="memdesc:a499dfe6aa8bf166e03f1a15eca55355e"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> should not have backing memory.  <a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a499dfe6aa8bf166e03f1a15eca55355e">More...</a><br /></td></tr>
<tr class="separator:a499dfe6aa8bf166e03f1a15eca55355e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a66520faad3ee3d1e34cc87dc42499e2c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a66520faad3ee3d1e34cc87dc42499e2c">is_valid_tensor</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a>)</td></tr>
<tr class="memdesc:a66520faad3ee3d1e34cc87dc42499e2c"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> has valid id  <a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a66520faad3ee3d1e34cc87dc42499e2c">More...</a><br /></td></tr>
<tr class="separator:a66520faad3ee3d1e34cc87dc42499e2c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abc943b3c8259d286f7f04e3dd5fcec7f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#abc943b3c8259d286f7f04e3dd5fcec7f">is_invalid_tensor</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a>)</td></tr>
<tr class="memdesc:abc943b3c8259d286f7f04e3dd5fcec7f"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> has invalid id  <a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#abc943b3c8259d286f7f04e3dd5fcec7f">More...</a><br /></td></tr>
<tr class="separator:abc943b3c8259d286f7f04e3dd5fcec7f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab7efcc693cd1a28a201322cf6b330bba"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab7efcc693cd1a28a201322cf6b330bba">convert_pool_attr_to_pool_info</a> (const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_pool2d_attributes.xhtml">Pool2dAttributes</a> &amp;pool_attr, bool mixed_precision=false, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> data_layout=<a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>)</td></tr>
<tr class="memdesc:ab7efcc693cd1a28a201322cf6b330bba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Inline function to convert <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_pool2d_attributes.xhtml">Pool2dAttributes</a> to <a class="el" href="structarm__compute_1_1_pooling_layer_info.xhtml" title="Pooling Layer Information struct.">PoolingLayerInfo</a>.  <a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab7efcc693cd1a28a201322cf6b330bba">More...</a><br /></td></tr>
<tr class="separator:ab7efcc693cd1a28a201322cf6b330bba"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Typedef Documentation</h2>
<a id="afff13da4ff0bb0cd14e24f19743c8225"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afff13da4ff0bb0cd14e24f19743c8225">&#9670;&nbsp;</a></span>ComponentId</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#afff13da4ff0bb0cd14e24f19743c8225">ComponentId</a> =  int32_t</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Uniquely identifies a kernel component within a workload. </p>

<p class="definition">Definition at line <a class="el" href="src_2dynamic__fusion_2sketch_2gpu_2components_2_types_8h_source.xhtml#l00037">37</a> of file <a class="el" href="src_2dynamic__fusion_2sketch_2gpu_2components_2_types_8h_source.xhtml">Types.h</a>.</p>

</div>
</div>
<a id="a204855c6bb170912fc54f8ad10ee2b96"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a204855c6bb170912fc54f8ad10ee2b96">&#9670;&nbsp;</a></span>GpuKernelArgumentList</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a204855c6bb170912fc54f8ad10ee2b96">GpuKernelArgumentList</a> =  std::deque&lt;<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_argument_binding.xhtml">GpuKernelArgumentBinding</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The argument list of a <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_source_code.xhtml">GpuKernelSourceCode</a>. </p>

<p class="definition">Definition at line <a class="el" href="_gpu_kernel_source_code_8h_source.xhtml#l00042">42</a> of file <a class="el" href="_gpu_kernel_source_code_8h_source.xhtml">GpuKernelSourceCode.h</a>.</p>

</div>
</div>
<a id="a37e4969b4b21379046bb4d89690af049"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a37e4969b4b21379046bb4d89690af049">&#9670;&nbsp;</a></span>GpuTarget</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GpuTarget</a> =  ::<a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">arm_compute::GPUTarget</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gpu Information such as the Gpu target (for example, G76) </p>

<p class="definition">Definition at line <a class="el" href="_gpu_workload_context_8h_source.xhtml#l00041">41</a> of file <a class="el" href="_gpu_workload_context_8h_source.xhtml">GpuWorkloadContext.h</a>.</p>

</div>
</div>
<a id="abe5718c3616edd5134e3058a1bb50b76"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abe5718c3616edd5134e3058a1bb50b76">&#9670;&nbsp;</a></span>MemoryDescriptorMap</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#abe5718c3616edd5134e3058a1bb50b76">MemoryDescriptorMap</a> =  std::map&lt;<a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a1fafaeb6e3ab8c0bc772532cc3fcff1a">ITensorInfo::Id</a>, <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_memory_descriptor.xhtml">MemoryDescriptor</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A map from <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> to their corresponding <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_memory_descriptor.xhtml">MemoryDescriptor</a>. </p>

<p class="definition">Definition at line <a class="el" href="_memory_descriptor_8h_source.xhtml#l00091">91</a> of file <a class="el" href="_memory_descriptor_8h_source.xhtml">MemoryDescriptor.h</a>.</p>

</div>
</div>
<a id="a7c53fb0e6cdb59d291688a586922ae57"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7c53fb0e6cdb59d291688a586922ae57">&#9670;&nbsp;</a></span>OperatorId</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a7c53fb0e6cdb59d291688a586922ae57">OperatorId</a> =  <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aae2526157a355e3de67c19aae6e5e133">DependencyGraph::OperatorId</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_gpu_operator_group_8h_source.xhtml#l00041">41</a> of file <a class="el" href="_gpu_operator_group_8h_source.xhtml">GpuOperatorGroup.h</a>.</p>

</div>
</div>
<a id="a03b0a94b67bc162ab8e33fffab3269a0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a03b0a94b67bc162ab8e33fffab3269a0">&#9670;&nbsp;</a></span>Settings</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a03b0a94b67bc162ab8e33fffab3269a0">Settings</a> =  <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_component_depthwise_conv2d_settings.xhtml">ClComponentDepthwiseConv2dSettings</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_component_depthwise_conv2d_8cpp_source.xhtml#l00039">39</a> of file <a class="el" href="_cl_component_depthwise_conv2d_8cpp_source.xhtml">ClComponentDepthwiseConv2d.cpp</a>.</p>

</div>
</div>
<a id="adc7903553dd77d72eb2baf6297b0d2f2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adc7903553dd77d72eb2baf6297b0d2f2">&#9670;&nbsp;</a></span>TileContainer</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#adc7903553dd77d72eb2baf6297b0d2f2">TileContainer</a> =  std::vector&lt;std::vector&lt;int32_t&gt; &gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_gpu_ckw_direct_conv2d_8cpp_source.xhtml#l00049">49</a> of file <a class="el" href="_gpu_ckw_direct_conv2d_8cpp_source.xhtml">GpuCkwDirectConv2d.cpp</a>.</p>

</div>
</div>
<a id="a4d71b29724606979807dcfc1ad80ef6c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4d71b29724606979807dcfc1ad80ef6c">&#9670;&nbsp;</a></span>UnitWorkloadId</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4d71b29724606979807dcfc1ad80ef6c">UnitWorkloadId</a> =  int32_t</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Uniquely identifies a <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_unit_workload.xhtml">GpuUnitWorkload</a> within a <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code.xhtml">GpuWorkloadSourceCode</a>. </p>

<p class="definition">Definition at line <a class="el" href="_gpu_workload_source_code_8h_source.xhtml#l00073">73</a> of file <a class="el" href="_gpu_workload_source_code_8h_source.xhtml">GpuWorkloadSourceCode.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Enumeration Type Documentation</h2>
<a id="ab26c0327042b802ca8cff46a9bc67670"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab26c0327042b802ca8cff46a9bc67670">&#9670;&nbsp;</a></span>GpuComponentType</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670">GpuComponentType</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Component type in the context of fusion Its main purpose is to inform the optimizer how to perform fusion. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="ab26c0327042b802ca8cff46a9bc67670a10b4eb76294b70d7fd6df997ff06edb1"></a>Complex&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ab26c0327042b802ca8cff46a9bc67670a1fbb1e3943c2c6c560247ac8f9289780"></a>Simple&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ab26c0327042b802ca8cff46a9bc67670ae157cdc2ee225c7a081c7bae83f17b0c"></a>Unfusable&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ab26c0327042b802ca8cff46a9bc67670a29c2c02a361c9d7028472e5d92cd4a54"></a>Output&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="src_2dynamic__fusion_2sketch_2gpu_2components_2_types_8h_source.xhtml#l00042">42</a> of file <a class="el" href="src_2dynamic__fusion_2sketch_2gpu_2components_2_types_8h_source.xhtml">Types.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;{</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670a10b4eb76294b70d7fd6df997ff06edb1">Complex</a>,</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670a1fbb1e3943c2c6c560247ac8f9289780">Simple</a>,</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670ae157cdc2ee225c7a081c7bae83f17b0c">Unfusable</a>,</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a29c2c02a361c9d7028472e5d92cd4a54">Output</a></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="aa334134c2d2596d8de13df6f9cb67d1d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa334134c2d2596d8de13df6f9cb67d1d">&#9670;&nbsp;</a></span>GpuLanguage</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#aa334134c2d2596d8de13df6f9cb67d1d">GpuLanguage</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gpu Language. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="aa334134c2d2596d8de13df6f9cb67d1da7982b09a852b37f2afb1227eaf552e47"></a>OpenCL&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="aa334134c2d2596d8de13df6f9cb67d1da88183b946cc5f0e8c96b2e66e1c74a7e"></a>Unknown&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_gpu_workload_context_8h_source.xhtml#l00044">44</a> of file <a class="el" href="_gpu_workload_context_8h_source.xhtml">GpuWorkloadContext.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;{</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#aa334134c2d2596d8de13df6f9cb67d1da7982b09a852b37f2afb1227eaf552e47">OpenCL</a>,</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <a class="code" href="namespaceacl.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a88183b946cc5f0e8c96b2e66e1c74a7e">Unknown</a></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a17730d14d0e88d5aed17a12e872c4efe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a17730d14d0e88d5aed17a12e872c4efe">&#9670;&nbsp;</a></span>GpuOperatorType</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17730d14d0e88d5aed17a12e872c4efe">GpuOperatorType</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Contain properties common to all operator types. </p>
<p><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="An operator for the sole purpose of validating fusion.">Operator</a> type in the context of fusion </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a17730d14d0e88d5aed17a12e872c4efea1fbb1e3943c2c6c560247ac8f9289780"></a>Simple&#160;</td><td class="fielddoc"><p>Simple operators are operators that: </p>
<ol type="1">
<li>Have a 1-to-1 mapping between the input elements and output elements, like elementwise</li>
<li>Have exactly 1 output </li>
</ol>
</td></tr>
<tr><td class="fieldname"><a id="a17730d14d0e88d5aed17a12e872c4efea10b4eb76294b70d7fd6df997ff06edb1"></a>Complex&#160;</td><td class="fielddoc"><p>Complex operators are operators that are not simple but are still fusable with simple ones. </p>
</td></tr>
<tr><td class="fieldname"><a id="a17730d14d0e88d5aed17a12e872c4efeae157cdc2ee225c7a081c7bae83f17b0c"></a>Unfusable&#160;</td><td class="fielddoc"><p>Unfusable operators are operators that cannot be fused with any other types of operators. </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_gpu_operator_properties_8h_source.xhtml#l00037">37</a> of file <a class="el" href="_gpu_operator_properties_8h_source.xhtml">GpuOperatorProperties.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{<span class="comment"></span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">    /** Simple operators are operators that:</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">     *  1. Have a 1-to-1 mapping between the input elements and output elements, like elementwise</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">     *  2. Have exactly 1 output</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670a1fbb1e3943c2c6c560247ac8f9289780">Simple</a>,<span class="comment"></span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">    /** Complex operators are operators that are not simple but are still fusable with simple ones</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670a10b4eb76294b70d7fd6df997ff06edb1">Complex</a>,<span class="comment"></span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment">    /** Unfusable operators are operators that cannot be fused with any other types of operators</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670ae157cdc2ee225c7a081c7bae83f17b0c">Unfusable</a></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a462bfa9dfea81692463ecb192183dd01"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a462bfa9dfea81692463ecb192183dd01">&#9670;&nbsp;</a></span>MemoryType</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01">MemoryType</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Type of memory used by a workload tensor. </p>
<p>We can classify tensors in 2 dimensions: Topology (where they are in a workload) and <a class="el" href="classarm__compute_1_1_memory.xhtml" title="CPU implementation of memory object.">Memory</a> allocation: Topology: Argument tensors: "Outer" tensors exposed to the users as inputs and outputs (arguments) Intermediate tensors: "Inner" tensors hidden from the users as links between operators <a class="el" href="classarm__compute_1_1_memory.xhtml" title="CPU implementation of memory object.">Memory</a> allocation: Alloc: Tensors that need to be allocated real backing memory No-Alloc: Tensors that don't need to be allocated real backing memory</p>
<p>We end up with 3 MemoryType based on the product of these two classifications | Argument | Intermediate | ------&mdash;*-------------&mdash;*----------------&mdash;* Alloc | User | Auxiliary | ------&mdash;*-------------&mdash;*----------------&mdash;* No-Alloc * N/A | Virtual | ------&mdash;*-------------&mdash;*----------------&mdash;* </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a462bfa9dfea81692463ecb192183dd01a8f9bfe9d1345237cb3b2b205864da075"></a>User&#160;</td><td class="fielddoc"><p>Both User and Auxiliary types are of Alloc type. </p>
<p>Since they require memory allocation <a class="el" href="classarm__compute_1_1_memory.xhtml" title="CPU implementation of memory object.">Memory</a> coming directly from users, e.g. for argument tensors </p>
</td></tr>
<tr><td class="fieldname"><a id="a462bfa9dfea81692463ecb192183dd01a81cbcdf2b235a9fac1b797ce93322276"></a>Auxiliary&#160;</td><td class="fielddoc"><p>Additional memory required by the workload tensor, e.g. </p>
<p>for tensors holding temporary results between kernels </p>
</td></tr>
<tr><td class="fieldname"><a id="a462bfa9dfea81692463ecb192183dd01a615e6f9baca5553d44683a098d342b70"></a>Virtual&#160;</td><td class="fielddoc"><p>Virtual type is of No-Alloc type. </p>
<p>Since it doesn't require memory allocation Temporary tile which is not allocated as a whole tensor in the memory. It is mainly used at sketch time to link operators; there should be no Virtual tensors at runtime </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_memory_descriptor_8h_source.xhtml#l00053">53</a> of file <a class="el" href="_memory_descriptor_8h_source.xhtml">MemoryDescriptor.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;{<span class="comment"></span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">    /** Both User and Auxiliary types are of Alloc type. Since they require memory allocation */</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01a8f9bfe9d1345237cb3b2b205864da075">User</a> = 0, <span class="comment">/**&lt; Memory coming directly from users, e.g. for argument tensors */</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01a81cbcdf2b235a9fac1b797ce93322276">Auxiliary</a> =</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        1, <span class="comment">/**&lt; Additional memory required by the workload tensor, e.g. for tensors holding temporary results between kernels */</span><span class="comment"></span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">    /** Virtual type is of No-Alloc type. Since it doesn&#39;t require memory allocation */</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01a615e6f9baca5553d44683a098d342b70">Virtual</a> =</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        2, <span class="comment">/**&lt; Temporary tile which is not allocated as a whole tensor in the memory. It is mainly used at sketch time to link operators; there should be no Virtual tensors at runtime */</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="ab14b36d0ef48001465fe49c3689e27df"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab14b36d0ef48001465fe49c3689e27df">&#9670;&nbsp;</a></span>TensorComponentType</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27df">TensorComponentType</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Describe additional runtime information about the tensor. </p>
<p>Please see documentation under <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_argument_binding.xhtml">GpuKernelArgumentBinding</a> </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="ab14b36d0ef48001465fe49c3689e27dfa88183b946cc5f0e8c96b2e66e1c74a7e"></a>Unknown&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ab14b36d0ef48001465fe49c3689e27dfa0d43d985fc3a7e81bd0a2392bfa375f2"></a>OffsetFirstElement&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ab14b36d0ef48001465fe49c3689e27dfa951a4eb66fe4736f2dc28c444d194197"></a>Stride0&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ab14b36d0ef48001465fe49c3689e27dfa56458b2cf5b9cf6680f7a1a2df201088"></a>Stride1&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ab14b36d0ef48001465fe49c3689e27dfa96cdc37a3a7c2c8d3495d713d1d293e1"></a>Stride2&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ab14b36d0ef48001465fe49c3689e27dfa830e11331f9da0cc171d1554bf91afdf"></a>Stride3&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ab14b36d0ef48001465fe49c3689e27dfa08d73a8dedbfeee532f8aea75a0f7e3f"></a>Stride4&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ab14b36d0ef48001465fe49c3689e27dfad3455d1cff9716d43c455aa959720525"></a>Dim0&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ab14b36d0ef48001465fe49c3689e27dfaf714267608d53bc244cb23f12d46573f"></a>Dim1&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ab14b36d0ef48001465fe49c3689e27dfa6910fb9de80a184c63575625d5ac6063"></a>Dim2&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ab14b36d0ef48001465fe49c3689e27dfab51cb01d37be2f9684fe7f52f62034cf"></a>Dim3&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ab14b36d0ef48001465fe49c3689e27dfae663b146594eb6dd6c5ed3ca9687d111"></a>Dim4&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ab14b36d0ef48001465fe49c3689e27dfaf3d2f2608a883924237d73e639fe91f9"></a>Dim1xDim2&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ab14b36d0ef48001465fe49c3689e27dfa11bc5c4991b2c0d1e633683c73816395"></a>Dim2xDim3&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ab14b36d0ef48001465fe49c3689e27dfae72f3c6fb1c5222747434dc4471d108a"></a>Dim1xDim2xDim3&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_gpu_kernel_argument_8h_source.xhtml#l00051">51</a> of file <a class="el" href="_gpu_kernel_argument_8h_source.xhtml">GpuKernelArgument.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;{</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <a class="code" href="namespaceacl.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a88183b946cc5f0e8c96b2e66e1c74a7e">Unknown</a>,</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfa0d43d985fc3a7e81bd0a2392bfa375f2">OffsetFirstElement</a>,</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfa951a4eb66fe4736f2dc28c444d194197">Stride0</a>,</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfa56458b2cf5b9cf6680f7a1a2df201088">Stride1</a>,</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfa96cdc37a3a7c2c8d3495d713d1d293e1">Stride2</a>,</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfa830e11331f9da0cc171d1554bf91afdf">Stride3</a>,</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfa08d73a8dedbfeee532f8aea75a0f7e3f">Stride4</a>,</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfad3455d1cff9716d43c455aa959720525">Dim0</a>,</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfaf714267608d53bc244cb23f12d46573f">Dim1</a>,</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfa6910fb9de80a184c63575625d5ac6063">Dim2</a>,</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfab51cb01d37be2f9684fe7f52f62034cf">Dim3</a>,</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfae663b146594eb6dd6c5ed3ca9687d111">Dim4</a>,</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfaf3d2f2608a883924237d73e639fe91f9">Dim1xDim2</a>,</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfa11bc5c4991b2c0d1e633683c73816395">Dim2xDim3</a>,</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfae72f3c6fb1c5222747434dc4471d108a">Dim1xDim2xDim3</a>,</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a75c170cf528423bcef54834f6abad95d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a75c170cf528423bcef54834f6abad95d">&#9670;&nbsp;</a></span>TensorStorageType</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a75c170cf528423bcef54834f6abad95d">TensorStorageType</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Describe how the tensor runtime memory can be accessed. </p>
<p>Please see documentation under <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_argument_binding.xhtml">GpuKernelArgumentBinding</a> </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a75c170cf528423bcef54834f6abad95da88183b946cc5f0e8c96b2e66e1c74a7e"></a>Unknown&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a75c170cf528423bcef54834f6abad95daf368a9df1a9e1958e6b9784f42e8ab3c"></a>ClBufferUint8Ptr&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a75c170cf528423bcef54834f6abad95da5e5df97fcf18f69b21caabba47034419"></a>ClImage2dReadOnly&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a75c170cf528423bcef54834f6abad95dafea9b17c253f9e05d20b10b878f4ce93"></a>ClImage2dWriteOnly&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_gpu_kernel_argument_8h_source.xhtml#l00039">39</a> of file <a class="el" href="_gpu_kernel_argument_8h_source.xhtml">GpuKernelArgument.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <a class="code" href="namespaceacl.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a88183b946cc5f0e8c96b2e66e1c74a7e">Unknown</a>,</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a75c170cf528423bcef54834f6abad95daf368a9df1a9e1958e6b9784f42e8ab3c">ClBufferUint8Ptr</a>,</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a75c170cf528423bcef54834f6abad95da5e5df97fcf18f69b21caabba47034419">ClImage2dReadOnly</a>,</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a75c170cf528423bcef54834f6abad95dafea9b17c253f9e05d20b10b878f4ce93">ClImage2dWriteOnly</a>,</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="abc5a464154fab3b146898c6be4224c2d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abc5a464154fab3b146898c6be4224c2d">&#9670;&nbsp;</a></span>cl_add_buffer_argument()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void cl_add_buffer_argument </td>
          <td>(</td>
          <td class="paramtype">cl::Kernel &amp;&#160;</td>
          <td class="paramname"><em>kernel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int &amp;&#160;</td>
          <td class="paramname"><em>idx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cl::Buffer &amp;&#160;</td>
          <td class="paramname"><em>buffer</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add an OpenCL buffer object to the kernel's arguments at the specified index <code>idx</code>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">kernel</td><td>OpenCL kernel to configure with the provided argument. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">idx</td><td>Index at which to add the argument. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">buffer</td><td>OpenCL buffer containing the tensor's data. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_gpu_ckw_kernel_arguments_helpers_8cpp_source.xhtml#l00093">93</a> of file <a class="el" href="_gpu_ckw_kernel_arguments_helpers_8cpp_source.xhtml">GpuCkwKernelArgumentsHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;{</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    kernel.setArg(idx++, buffer);</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a5e44619cc49fc50ee746e6dece3897f4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5e44619cc49fc50ee746e6dece3897f4">&#9670;&nbsp;</a></span>cl_add_tensor_component_argument()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void cl_add_tensor_component_argument </td>
          <td>(</td>
          <td class="paramtype">cl::Kernel &amp;&#160;</td>
          <td class="paramname"><em>kernel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int &amp;&#160;</td>
          <td class="paramname"><em>idx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> *&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27df">TensorComponentType</a>&#160;</td>
          <td class="paramname"><em>component</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Select a Compute <a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> Writer tensor component from a tensor and add to the kernel's arguments at the specified index idx. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">kernel</td><td>OpenCL kernel to configure with the provided argument. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">idx</td><td>Index at which to add the argument. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> from which to access the tensor component. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">component</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> component to select such as tensor dimensions, strides, etc. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_gpu_ckw_kernel_arguments_helpers_8cpp_source.xhtml#l00033">33</a> of file <a class="el" href="_gpu_ckw_kernel_arguments_helpers_8cpp_source.xhtml">GpuCkwKernelArgumentsHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160; </div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>    = <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;info();</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> &amp;strides = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>-&gt;strides_in_bytes();</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160; </div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordflow">switch</span> (component)</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    {</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <span class="keywordflow">case</span> TensorComponentType::OffsetFirstElement:</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;            kernel.setArg&lt;cl_uint&gt;(idx++, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>-&gt;offset_first_element_in_bytes());</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <span class="keywordflow">case</span> TensorComponentType::Stride0:</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;            kernel.setArg&lt;cl_uint&gt;(idx++, strides[0]);</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <span class="keywordflow">case</span> TensorComponentType::Stride1:</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;            kernel.setArg&lt;cl_uint&gt;(idx++, strides[1]);</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <span class="keywordflow">case</span> TensorComponentType::Stride2:</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            kernel.setArg&lt;cl_uint&gt;(idx++, strides[2]);</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <span class="keywordflow">case</span> TensorComponentType::Stride3:</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            kernel.setArg&lt;cl_uint&gt;(idx++, strides[3]);</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <span class="keywordflow">case</span> TensorComponentType::Stride4:</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;            kernel.setArg&lt;cl_uint&gt;(idx++, strides[4]);</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keywordflow">case</span> TensorComponentType::Dim0:</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            kernel.setArg&lt;cl_uint&gt;(idx++, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>-&gt;dimension(0));</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keywordflow">case</span> TensorComponentType::Dim1:</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            kernel.setArg&lt;cl_uint&gt;(idx++, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>-&gt;dimension(1));</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keywordflow">case</span> TensorComponentType::Dim2:</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            kernel.setArg&lt;cl_uint&gt;(idx++, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>-&gt;dimension(2));</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <span class="keywordflow">case</span> TensorComponentType::Dim3:</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            kernel.setArg&lt;cl_uint&gt;(idx++, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>-&gt;dimension(3));</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="keywordflow">case</span> TensorComponentType::Dim4:</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            kernel.setArg&lt;cl_uint&gt;(idx++, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>-&gt;dimension(4));</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <span class="keywordflow">case</span> TensorComponentType::Dim1xDim2:</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            kernel.setArg&lt;cl_uint&gt;(idx++, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>-&gt;dimension(1) * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>-&gt;dimension(2));</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <span class="keywordflow">case</span> TensorComponentType::Dim2xDim3:</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            kernel.setArg&lt;cl_uint&gt;(idx++, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>-&gt;dimension(2) * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>-&gt;dimension(3));</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        <span class="keywordflow">case</span> TensorComponentType::Dim1xDim2xDim3:</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            kernel.setArg&lt;cl_uint&gt;(idx++, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>-&gt;dimension(1) * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>-&gt;dimension(2) * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>-&gt;dimension(3));</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <span class="keywordflow">case</span> TensorComponentType::Unknown:</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unknown tensor component&quot;</span>);</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    }</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfad3455d1cff9716d43c455aa959720525">Dim0</a>, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfaf714267608d53bc244cb23f12d46573f">Dim1</a>, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfaf3d2f2608a883924237d73e639fe91f9">Dim1xDim2</a>, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfae72f3c6fb1c5222747434dc4471d108a">Dim1xDim2xDim3</a>, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfa6910fb9de80a184c63575625d5ac6063">Dim2</a>, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfa11bc5c4991b2c0d1e633683c73816395">Dim2xDim3</a>, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfab51cb01d37be2f9684fe7f52f62034cf">Dim3</a>, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfae663b146594eb6dd6c5ed3ca9687d111">Dim4</a>, <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfa0d43d985fc3a7e81bd0a2392bfa375f2">OffsetFirstElement</a>, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfa951a4eb66fe4736f2dc28c444d194197">Stride0</a>, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfa56458b2cf5b9cf6680f7a1a2df201088">Stride1</a>, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfa96cdc37a3a7c2c8d3495d713d1d293e1">Stride2</a>, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfa830e11331f9da0cc171d1554bf91afdf">Stride3</a>, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfa08d73a8dedbfeee532f8aea75a0f7e3f">Stride4</a>, <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00067">tensor</a>, and <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfa88183b946cc5f0e8c96b2e66e1c74a7e">Unknown</a>.</p>

</div>
</div>
<a id="a5b754bc23e9853931746766d3aeb6a9d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5b754bc23e9853931746766d3aeb6a9d">&#9670;&nbsp;</a></span>cl_add_texture_argument()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void cl_add_texture_argument </td>
          <td>(</td>
          <td class="paramtype">cl::Kernel &amp;&#160;</td>
          <td class="paramname"><em>kernel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int &amp;&#160;</td>
          <td class="paramname"><em>idx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#acf12205a65321baefe5174db248f56f6">cl::Image</a> &amp;&#160;</td>
          <td class="paramname"><em>image</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add an OpenCL image object to the kernel's arguments at the specified index <code>idx</code>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">kernel</td><td>OpenCL kernel to configure with the provided argument. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">idx</td><td>Index at which to add the argument. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">image</td><td>OpenCL image containing the image's data. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_gpu_ckw_kernel_arguments_helpers_8cpp_source.xhtml#l00098">98</a> of file <a class="el" href="_gpu_ckw_kernel_arguments_helpers_8cpp_source.xhtml">GpuCkwKernelArgumentsHelpers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;{</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    kernel.setArg(idx++, <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#acbb621ff2dd6abf95c0bec74f70acffd">image</a>);</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00043">caffe_mnist_image_extractor::image</a>.</p>

</div>
</div>
<a id="ab7efcc693cd1a28a201322cf6b330bba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab7efcc693cd1a28a201322cf6b330bba">&#9670;&nbsp;</a></span>convert_pool_attr_to_pool_info()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> arm_compute::experimental::dynamic_fusion::convert_pool_attr_to_pool_info </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_pool2d_attributes.xhtml">Pool2dAttributes</a> &amp;&#160;</td>
          <td class="paramname"><em>pool_attr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>mixed_precision</em> = <code>false</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>&#160;</td>
          <td class="paramname"><em>data_layout</em> = <code><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Inline function to convert <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_pool2d_attributes.xhtml">Pool2dAttributes</a> to <a class="el" href="structarm__compute_1_1_pooling_layer_info.xhtml" title="Pooling Layer Information struct.">PoolingLayerInfo</a>. </p>

<p class="definition">Definition at line <a class="el" href="src_2dynamic__fusion_2utils_2_utils_8h_source.xhtml#l00066">66</a> of file <a class="el" href="src_2dynamic__fusion_2utils_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;{</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="comment">// Create PadStrideInfo</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keyword">const</span> Size2D        stride  = pool_attr.stride();</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keyword">const</span> Padding2D     padding = pool_attr.pad();</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keyword">const</span> PadStrideInfo pad_stride(stride.x(), stride.y(), padding.left, padding.top,</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                                   <a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">arm_compute::DimensionRoundingType::FLOOR</a>);</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160; </div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordflow">return</span> PoolingLayerInfo(pool_attr.pool_type(), pool_attr.pool_size(), <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, pad_stride,</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                            pool_attr.exclude_padding(), mixed_precision);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00036">arm_compute::cpu::data_layout</a>, <a class="el" href="_pool2d_attributes_8cpp_source.xhtml#l00079">Pool2dAttributes::exclude_padding()</a>, <a class="el" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">arm_compute::FLOOR</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00615">Padding2D::left</a>, <a class="el" href="_pool2d_attributes_8cpp_source.xhtml#l00046">Pool2dAttributes::pad()</a>, <a class="el" href="_pool2d_attributes_8cpp_source.xhtml#l00057">Pool2dAttributes::pool_size()</a>, <a class="el" href="_pool2d_attributes_8cpp_source.xhtml#l00035">Pool2dAttributes::pool_type()</a>, <a class="el" href="_pool2d_attributes_8cpp_source.xhtml#l00068">Pool2dAttributes::stride()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00617">Padding2D::top</a>, <a class="el" href="_size2_d_8h_source.xhtml#l00073">Size2D::x()</a>, and <a class="el" href="_size2_d_8h_source.xhtml#l00082">Size2D::y()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_component_pool2d_8cpp_source.xhtml#l00043">ClComponentPool2d::validate()</a>.</p>

</div>
</div>
<a id="a49ee5c1a04d75e5c378ebe5e880f0578"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a49ee5c1a04d75e5c378ebe5e880f0578">&#9670;&nbsp;</a></span>from_ckw() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27df">TensorComponentType</a> from_ckw </td>
          <td>(</td>
          <td class="paramtype">const ckw::TensorComponentType &amp;&#160;</td>
          <td class="paramname"><em>component</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert the Compute <a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> Writer tensor component to Compute Library tensor component. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">component</td><td>The Compute <a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> Writer tensor component</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the Compute Library tensor component </dd></dl>

<p class="definition">Definition at line <a class="el" href="_common_8cpp_source.xhtml#l00105">105</a> of file <a class="el" href="_common_8cpp_source.xhtml">Common.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;{</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keywordflow">switch</span> (component)</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    {</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="keywordflow">case</span> ckw::TensorComponentType::OffsetFirstElement:</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            <span class="keywordflow">return</span> TensorComponentType::OffsetFirstElement;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <span class="keywordflow">case</span> ckw::TensorComponentType::Stride0:</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            <span class="keywordflow">return</span> TensorComponentType::Stride0;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="keywordflow">case</span> ckw::TensorComponentType::Stride1:</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            <span class="keywordflow">return</span> TensorComponentType::Stride1;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <span class="keywordflow">case</span> ckw::TensorComponentType::Stride2:</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            <span class="keywordflow">return</span> TensorComponentType::Stride2;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <span class="keywordflow">case</span> ckw::TensorComponentType::Stride3:</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            <span class="keywordflow">return</span> TensorComponentType::Stride3;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <span class="keywordflow">case</span> ckw::TensorComponentType::Stride4:</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            <span class="keywordflow">return</span> TensorComponentType::Stride4;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <span class="keywordflow">case</span> ckw::TensorComponentType::Dim0:</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            <span class="keywordflow">return</span> TensorComponentType::Dim0;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        <span class="keywordflow">case</span> ckw::TensorComponentType::Dim1:</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            <span class="keywordflow">return</span> TensorComponentType::Dim1;</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <span class="keywordflow">case</span> ckw::TensorComponentType::Dim2:</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            <span class="keywordflow">return</span> TensorComponentType::Dim2;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        <span class="keywordflow">case</span> ckw::TensorComponentType::Dim3:</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            <span class="keywordflow">return</span> TensorComponentType::Dim3;</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        <span class="keywordflow">case</span> ckw::TensorComponentType::Dim4:</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            <span class="keywordflow">return</span> TensorComponentType::Dim4;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        <span class="keywordflow">case</span> ckw::TensorComponentType::Dim1xDim2:</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            <span class="keywordflow">return</span> TensorComponentType::Dim1xDim2;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <span class="keywordflow">case</span> ckw::TensorComponentType::Dim2xDim3:</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            <span class="keywordflow">return</span> TensorComponentType::Dim2xDim3;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <span class="keywordflow">case</span> ckw::TensorComponentType::Dim1xDim2xDim3:</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            <span class="keywordflow">return</span> TensorComponentType::Dim1xDim2xDim3;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="keywordflow">case</span> ckw::TensorComponentType::Unknown:</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            <span class="keywordflow">return</span> TensorComponentType::Unknown;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unknown CKW tensor component&quot;</span>);</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    }</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfad3455d1cff9716d43c455aa959720525">Dim0</a>, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfaf714267608d53bc244cb23f12d46573f">Dim1</a>, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfaf3d2f2608a883924237d73e639fe91f9">Dim1xDim2</a>, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfae72f3c6fb1c5222747434dc4471d108a">Dim1xDim2xDim3</a>, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfa6910fb9de80a184c63575625d5ac6063">Dim2</a>, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfa11bc5c4991b2c0d1e633683c73816395">Dim2xDim3</a>, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfab51cb01d37be2f9684fe7f52f62034cf">Dim3</a>, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfae663b146594eb6dd6c5ed3ca9687d111">Dim4</a>, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfa0d43d985fc3a7e81bd0a2392bfa375f2">OffsetFirstElement</a>, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfa951a4eb66fe4736f2dc28c444d194197">Stride0</a>, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfa56458b2cf5b9cf6680f7a1a2df201088">Stride1</a>, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfa96cdc37a3a7c2c8d3495d713d1d293e1">Stride2</a>, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfa830e11331f9da0cc171d1554bf91afdf">Stride3</a>, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfa08d73a8dedbfeee532f8aea75a0f7e3f">Stride4</a>, and <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfa88183b946cc5f0e8c96b2e66e1c74a7e">Unknown</a>.</p>

<p class="reference">Referenced by <a class="el" href="_gpu_ckw_driver_8cpp_source.xhtml#l00110">GpuCkwDriver::get_kernel_arguments()</a>.</p>

</div>
</div>
<a id="a2237081231e7f62671a9e795cb5919d7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2237081231e7f62671a9e795cb5919d7">&#9670;&nbsp;</a></span>from_ckw() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a75c170cf528423bcef54834f6abad95d">TensorStorageType</a> from_ckw </td>
          <td>(</td>
          <td class="paramtype">const ckw::TensorStorageType &amp;&#160;</td>
          <td class="paramname"><em>storage</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert the Compute <a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> Writer tensor storage to Compute Library tensor storage. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">storage</td><td>The Compute <a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> Writer tensor storage</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the Compute Library tensor storage </dd></dl>

<p class="definition">Definition at line <a class="el" href="_common_8cpp_source.xhtml#l00144">144</a> of file <a class="el" href="_common_8cpp_source.xhtml">Common.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;{</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keywordflow">switch</span> (storage)</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    {</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        <span class="keywordflow">case</span> ckw::TensorStorageType::BufferUint8Ptr:</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            <span class="keywordflow">return</span> TensorStorageType::ClBufferUint8Ptr;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="keywordflow">case</span> ckw::TensorStorageType::Texture2dReadOnly:</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            <span class="keywordflow">return</span> TensorStorageType::ClImage2dReadOnly;</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <span class="keywordflow">case</span> ckw::TensorStorageType::Texture2dWriteOnly:</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            <span class="keywordflow">return</span> TensorStorageType::ClImage2dWriteOnly;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <span class="keywordflow">case</span> ckw::TensorStorageType::Unknown:</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            <span class="keywordflow">return</span> TensorStorageType::Unknown;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unknown CKW tensor storage type&quot;</span>);</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    }</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a75c170cf528423bcef54834f6abad95daf368a9df1a9e1958e6b9784f42e8ab3c">ClBufferUint8Ptr</a>, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a75c170cf528423bcef54834f6abad95da5e5df97fcf18f69b21caabba47034419">ClImage2dReadOnly</a>, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a75c170cf528423bcef54834f6abad95dafea9b17c253f9e05d20b10b878f4ce93">ClImage2dWriteOnly</a>, and <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a75c170cf528423bcef54834f6abad95da88183b946cc5f0e8c96b2e66e1c74a7e">Unknown</a>.</p>

</div>
</div>
<a id="a9a2bbeb7b1b6544f6e17b09491385bce"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9a2bbeb7b1b6544f6e17b09491385bce">&#9670;&nbsp;</a></span>get_coordinate_from_gws()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void get_coordinate_from_gws </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_scoped_kernel_writer.xhtml">GpuCkwScopedKernelWriter</a>&#160;</td>
          <td class="paramname"><em>writer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ckw::TileOperand &amp;&#160;</td>
          <td class="paramname"><em>coord</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const ckw::TileOperand &amp;&#160;</td>
          <td class="paramname"><em>gid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ckw::TileOperand &amp;&#160;</td>
          <td class="paramname"><em>step</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get coordinate along one axis. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">writer</td><td>Writer </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">coord</td><td>Resultant coordinate </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">gid</td><td>Global work item id </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">step</td><td>Step size / vector size </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_ckw_helper_8cpp_source.xhtml#l00032">32</a> of file <a class="el" href="_ckw_helper_8cpp_source.xhtml">CkwHelper.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    writer-&gt;op_binary(coord, ckw::BinaryOp::Mul, gid, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>);</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="cpu_2kernels_2floor_2neon_2fp32_8cpp_source.xhtml#l00035">arm_compute::cpu::step</a>.</p>

<p class="reference">Referenced by <a class="el" href="_gpu_ckw_store_8cpp_source.xhtml#l00047">GpuCkwStore::write_component_code()</a>, <a class="el" href="_gpu_ckw_activation_8cpp_source.xhtml#l00059">GpuCkwActivation::write_component_code()</a>, <a class="el" href="_gpu_ckw_cast_8cpp_source.xhtml#l00059">GpuCkwCast::write_component_code()</a>, <a class="el" href="_gpu_ckw_elementwise_binary_8cpp_source.xhtml#l00065">GpuCkwElementwiseBinary::write_component_code()</a>, <a class="el" href="_gpu_ckw_pool2d_8cpp_source.xhtml#l00059">GpuCkwPool2d::write_component_code()</a>, <a class="el" href="_gpu_ckw_depthwise_conv2d_8cpp_source.xhtml#l00064">GpuCkwDepthwiseConv2d::write_component_code()</a>, <a class="el" href="_gpu_ckw_direct_conv2d_8cpp_source.xhtml#l00064">GpuCkwDirectConv2d::write_component_code()</a>, and <a class="el" href="_gpu_ckw_mat_mul_8cpp_source.xhtml#l00060">GpuCkwMatMul::write_component_code()</a>.</p>

</div>
</div>
<a id="a8173252b41cb85ccb7e222495fbe9d0f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8173252b41cb85ccb7e222495fbe9d0f">&#9670;&nbsp;</a></span>get_coordinate_from_gws_overlapping_min()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void get_coordinate_from_gws_overlapping_min </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_ckw_scoped_kernel_writer.xhtml">GpuCkwScopedKernelWriter</a>&#160;</td>
          <td class="paramname"><em>writer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ckw::TileOperand &amp;&#160;</td>
          <td class="paramname"><em>coord</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const ckw::TileOperand &amp;&#160;</td>
          <td class="paramname"><em>gid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ckw::TileOperand &amp;&#160;</td>
          <td class="paramname"><em>step</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ckw::TileOperand &amp;&#160;</td>
          <td class="paramname"><em>shift_back</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ckw::TileOperand &amp;&#160;</td>
          <td class="paramname"><em>const_0</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get boundary aware coordinate along one axis. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">writer</td><td>Writer </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">coord</td><td>Resultant coordinate </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">gid</td><td>Global work item id </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">step</td><td>Step size / vector size </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">shift_back</td><td>It is (step - leftover_step) % step </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">const_0</td><td>Constant tile of value 0 </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_ckw_helper_8cpp_source.xhtml#l00040">40</a> of file <a class="el" href="_ckw_helper_8cpp_source.xhtml">CkwHelper.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="comment">// Applied formula: max((gid * step) - shift_back, 0)</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="comment">// where the shift_back operand is: (step - leftover_step) % step</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160; </div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    writer-&gt;op_binary(coord, ckw::BinaryOp::Mul, gid, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>);</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    writer-&gt;op_binary(coord, ckw::BinaryOp::Sub, coord, shift_back);</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    writer-&gt;op_binary(coord, ckw::BinaryOp::Max, coord, const_0);</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="cpu_2kernels_2floor_2neon_2fp32_8cpp_source.xhtml#l00035">arm_compute::cpu::step</a>.</p>

<p class="reference">Referenced by <a class="el" href="_gpu_ckw_store_8cpp_source.xhtml#l00047">GpuCkwStore::write_component_code()</a>, <a class="el" href="_gpu_ckw_activation_8cpp_source.xhtml#l00059">GpuCkwActivation::write_component_code()</a>, <a class="el" href="_gpu_ckw_cast_8cpp_source.xhtml#l00059">GpuCkwCast::write_component_code()</a>, <a class="el" href="_gpu_ckw_elementwise_binary_8cpp_source.xhtml#l00065">GpuCkwElementwiseBinary::write_component_code()</a>, <a class="el" href="_gpu_ckw_pool2d_8cpp_source.xhtml#l00059">GpuCkwPool2d::write_component_code()</a>, <a class="el" href="_gpu_ckw_depthwise_conv2d_8cpp_source.xhtml#l00064">GpuCkwDepthwiseConv2d::write_component_code()</a>, <a class="el" href="_gpu_ckw_direct_conv2d_8cpp_source.xhtml#l00064">GpuCkwDirectConv2d::write_component_code()</a>, and <a class="el" href="_gpu_ckw_mat_mul_8cpp_source.xhtml#l00060">GpuCkwMatMul::write_component_code()</a>.</p>

</div>
</div>
<a id="a118248edb8d3a4911bc101671512856b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a118248edb8d3a4911bc101671512856b">&#9670;&nbsp;</a></span>is_alloc_tensor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::experimental::dynamic_fusion::is_alloc_tensor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>tensor_info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> should have backing memory. </p>
<p><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01">MemoryType</a> </p>

<p class="definition">Definition at line <a class="el" href="src_2dynamic__fusion_2utils_2_utils_8h_source.xhtml#l00038">38</a> of file <a class="el" href="src_2dynamic__fusion_2utils_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a>-&gt;id() &gt; ITensorInfo::invalid_tensor_id;</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_tensor_info_8h_source.xhtml#l00052">ITensorInfo::invalid_tensor_id</a>, and <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00068">tensor_info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_gpu_output_8cpp_source.xhtml#l00060">GpuOutput::validate_op()</a>.</p>

</div>
</div>
<a id="abc943b3c8259d286f7f04e3dd5fcec7f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abc943b3c8259d286f7f04e3dd5fcec7f">&#9670;&nbsp;</a></span>is_invalid_tensor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::experimental::dynamic_fusion::is_invalid_tensor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>tensor_info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> has invalid id </p>

<p class="definition">Definition at line <a class="el" href="src_2dynamic__fusion_2utils_2_utils_8h_source.xhtml#l00059">59</a> of file <a class="el" href="src_2dynamic__fusion_2utils_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;{</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordflow">return</span> !<a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a66520faad3ee3d1e34cc87dc42499e2c">is_valid_tensor</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a>);</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="src_2dynamic__fusion_2utils_2_utils_8h_source.xhtml#l00052">is_valid_tensor()</a>, and <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00068">tensor_info</a>.</p>

</div>
</div>
<a id="a499dfe6aa8bf166e03f1a15eca55355e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a499dfe6aa8bf166e03f1a15eca55355e">&#9670;&nbsp;</a></span>is_noalloc_tensor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::experimental::dynamic_fusion::is_noalloc_tensor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>tensor_info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> should not have backing memory. </p>
<p><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01">MemoryType</a> </p>

<p class="definition">Definition at line <a class="el" href="src_2dynamic__fusion_2utils_2_utils_8h_source.xhtml#l00045">45</a> of file <a class="el" href="src_2dynamic__fusion_2utils_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a>-&gt;id() &lt; ITensorInfo::invalid_tensor_id;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_tensor_info_8h_source.xhtml#l00052">ITensorInfo::invalid_tensor_id</a>, and <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00068">tensor_info</a>.</p>

</div>
</div>
<a id="a66520faad3ee3d1e34cc87dc42499e2c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a66520faad3ee3d1e34cc87dc42499e2c">&#9670;&nbsp;</a></span>is_valid_tensor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::experimental::dynamic_fusion::is_valid_tensor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>tensor_info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> has valid id </p>

<p class="definition">Definition at line <a class="el" href="src_2dynamic__fusion_2utils_2_utils_8h_source.xhtml#l00052">52</a> of file <a class="el" href="src_2dynamic__fusion_2utils_2_utils_8h_source.xhtml">Utils.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;{</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a>-&gt;has_valid_id();</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00068">tensor_info</a>.</p>

<p class="reference">Referenced by <a class="el" href="src_2dynamic__fusion_2utils_2_utils_8h_source.xhtml#l00059">is_invalid_tensor()</a>.</p>

</div>
</div>
<a id="a7bf4bff4857d4c4853192a2ad42f3328"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7bf4bff4857d4c4853192a2ad42f3328">&#9670;&nbsp;</a></span>operator==() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::experimental::dynamic_fusion::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_kernel_properties.xhtml">KernelProperties</a> &amp;&#160;</td>
          <td class="paramname"><em>config0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_kernel_properties.xhtml">KernelProperties</a> &amp;&#160;</td>
          <td class="paramname"><em>config1</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_i_gpu_kernel_component_8h_source.xhtml#l00056">56</a> of file <a class="el" href="_i_gpu_kernel_component_8h_source.xhtml">IGpuKernelComponent.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;{</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keywordflow">return</span> config0.stage() == config1.stage();</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_gpu_kernel_component_8h_source.xhtml#l00042">KernelProperties::stage()</a>.</p>

</div>
</div>
<a id="a4d8c915c15145d6e31f8123d349cd895"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4d8c915c15145d6e31f8123d349cd895">&#9670;&nbsp;</a></span>operator==() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::experimental::dynamic_fusion::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage.xhtml">UnitWorkloadStage</a> &amp;&#160;</td>
          <td class="paramname"><em>stage0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage.xhtml">UnitWorkloadStage</a> &amp;&#160;</td>
          <td class="paramname"><em>stage1</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_gpu_workload_source_code_8h_source.xhtml#l00159">159</a> of file <a class="el" href="_gpu_workload_source_code_8h_source.xhtml">GpuWorkloadSourceCode.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;{</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="keywordflow">return</span> stage0.stage == stage1.stage;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_gpu_workload_source_code_8h_source.xhtml#l00156">UnitWorkloadStage::stage</a>.</p>

</div>
</div>
<a id="a92aabaaa807578643b3ce4acfc96e02b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a92aabaaa807578643b3ce4acfc96e02b">&#9670;&nbsp;</a></span>to_ckw() <span class="overload">[1/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ckw::BinaryOp to_ckw </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_elementwise_binary_common_attributes.xhtml">ElementwiseBinaryCommonAttributes</a> &amp;&#160;</td>
          <td class="paramname"><em>attributes</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_elementwise_binary_8cpp_source.xhtml#l00034">34</a> of file <a class="el" href="_elementwise_binary_8cpp_source.xhtml">ElementwiseBinary.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keywordflow">switch</span> (attributes.operation())</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    {</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        <span class="keywordflow">case</span> ElementwiseBinaryCommonAttributes::ElementwiseOp::Add:</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;            <span class="keywordflow">return</span> ckw::BinaryOp::Add;</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        <span class="keywordflow">case</span> ElementwiseBinaryCommonAttributes::ElementwiseOp::Sub:</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;            <span class="keywordflow">return</span> ckw::BinaryOp::Sub;</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        <span class="keywordflow">case</span> ElementwiseBinaryCommonAttributes::ElementwiseOp::Div:</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;            <span class="keywordflow">return</span> ckw::BinaryOp::Div;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <span class="keywordflow">case</span> ElementwiseBinaryCommonAttributes::ElementwiseOp::Mul:</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;            <span class="keywordflow">return</span> ckw::BinaryOp::Mul;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        <span class="keywordflow">case</span> ElementwiseBinaryCommonAttributes::ElementwiseOp::Min:</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <span class="keywordflow">case</span> ElementwiseBinaryCommonAttributes::ElementwiseOp::Max:</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <span class="keywordflow">case</span> ElementwiseBinaryCommonAttributes::ElementwiseOp::Power:</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="keywordflow">case</span> ElementwiseBinaryCommonAttributes::ElementwiseOp::Prelu:</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="keywordflow">case</span> ElementwiseBinaryCommonAttributes::ElementwiseOp::SquaredDiff:</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Cannot convert ElementwiseBinaryCommonAttributes to corresponding ckw::BinaryOp&quot;</span>);</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    }</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_elementwise_binary_common_attributes.xhtml#a62f68d1b8c7ffe90f85b3a7a7a677dd1aec211f7c20af43e742bf2570c3cb84f9">ElementwiseBinaryCommonAttributes::Add</a>, <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_elementwise_binary_common_attributes.xhtml#a62f68d1b8c7ffe90f85b3a7a7a677dd1a43d11850893d2fe84a1e618121c1cc0a">ElementwiseBinaryCommonAttributes::Div</a>, <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_elementwise_binary_common_attributes.xhtml#a62f68d1b8c7ffe90f85b3a7a7a677dd1a6a061313d22e51e0f25b7cd4dc065233">ElementwiseBinaryCommonAttributes::Max</a>, <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_elementwise_binary_common_attributes.xhtml#a62f68d1b8c7ffe90f85b3a7a7a677dd1a78d811e98514cd165dda532286610fd2">ElementwiseBinaryCommonAttributes::Min</a>, <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_elementwise_binary_common_attributes.xhtml#a62f68d1b8c7ffe90f85b3a7a7a677dd1a62b6d55816cf737bfc6f42e60df1a3f2">ElementwiseBinaryCommonAttributes::Mul</a>, <a class="el" href="_gpu_elementwise_binary_common_8cpp_source.xhtml#l00096">ElementwiseBinaryCommonAttributes::operation()</a>, <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_elementwise_binary_common_attributes.xhtml#a62f68d1b8c7ffe90f85b3a7a7a677dd1add4fe0cc913f704600b97d1f5dd285de">ElementwiseBinaryCommonAttributes::Power</a>, <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_elementwise_binary_common_attributes.xhtml#a62f68d1b8c7ffe90f85b3a7a7a677dd1a0c5967f09e0669c840ebb1ed0da85e32">ElementwiseBinaryCommonAttributes::Prelu</a>, <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_elementwise_binary_common_attributes.xhtml#a62f68d1b8c7ffe90f85b3a7a7a677dd1a3610f846604ac9c4ea75264311d10cd0">ElementwiseBinaryCommonAttributes::SquaredDiff</a>, and <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_elementwise_binary_common_attributes.xhtml#a62f68d1b8c7ffe90f85b3a7a7a677dd1ae80155eceb940c89e2de63ad05868db2">ElementwiseBinaryCommonAttributes::Sub</a>.</p>

</div>
</div>
<a id="a8765006aa2ace878b93759853ebfba8b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8765006aa2ace878b93759853ebfba8b">&#9670;&nbsp;</a></span>to_ckw() <span class="overload">[2/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ckw::TensorInfo to_ckw </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor_info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert the Compute Library tensor info to Compute <a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> Writer tensor info. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_info</td><td>The Compute Library tensor info</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the Compute <a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> Writer tensor info (ckw::TensorInfo) </dd></dl>

<p class="definition">Definition at line <a class="el" href="_common_8cpp_source.xhtml#l00082">82</a> of file <a class="el" href="_common_8cpp_source.xhtml">Common.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;{</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keywordflow">return</span> ckw::TensorInfo{<a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a0d9efc610b9abef3116b2e3fde52d242">to_ckw</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a>.data_type()), <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a0d9efc610b9abef3116b2e3fde52d242">to_ckw</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a>.tensor_shape()),</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                           <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a0d9efc610b9abef3116b2e3fde52d242">to_ckw</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a>.data_layout()), <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a>.id()};</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00068">tensor_info</a>, and <a class="el" href="_common_8cpp_source.xhtml#l00032">to_ckw()</a>.</p>

</div>
</div>
<a id="a42efa77c8c1898a9ecf74b6ac3af3b40"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a42efa77c8c1898a9ecf74b6ac3af3b40">&#9670;&nbsp;</a></span>to_ckw() <span class="overload">[3/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ckw::TensorShape to_ckw </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>shape</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert the Compute Library tensor shape to Compute <a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> Writer tensor shape. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">shape</td><td>The Compute Library tensor shape</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the Compute <a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> Writer tensor shape (ckw::TensorShape) </dd></dl>
<p>NOTE: Overflow danger. Use size_t?</p>

<p class="definition">Definition at line <a class="el" href="_common_8cpp_source.xhtml#l00059">59</a> of file <a class="el" href="_common_8cpp_source.xhtml">Common.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;{</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.num_max_dimensions &lt; std::tuple_size&lt;ckw::TensorShape&gt;{});</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(std::tuple_size&lt;ckw::TensorShape&gt;{} != 5);<span class="comment"></span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment">    /// NOTE: Overflow danger. Use size_t?</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment"></span>    <span class="keywordflow">return</span> ckw::TensorShape{<span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>[0]), <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>[1]),</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                            <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>[2]), <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>[3]),</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                            <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>[4])};</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">arm_compute::test::validation::shape</a>.</p>

</div>
</div>
<a id="a0d9efc610b9abef3116b2e3fde52d242"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0d9efc610b9abef3116b2e3fde52d242">&#9670;&nbsp;</a></span>to_ckw() <span class="overload">[4/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ckw::TensorStorageType to_ckw </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a75c170cf528423bcef54834f6abad95d">TensorStorageType</a> &amp;&#160;</td>
          <td class="paramname"><em>storage</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert the Compute Library tensor storage to Compute <a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> Writer tensor storage. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">storage</td><td>The Compute Library tensor storage</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the Compute <a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> Writer tensor storate (ckw::TensorStorageType) </dd></dl>

<p class="definition">Definition at line <a class="el" href="_common_8cpp_source.xhtml#l00088">88</a> of file <a class="el" href="_common_8cpp_source.xhtml">Common.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;{</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keywordflow">switch</span> (storage)</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    {</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="keywordflow">case</span> TensorStorageType::ClBufferUint8Ptr:</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            <span class="keywordflow">return</span> ckw::TensorStorageType::BufferUint8Ptr;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <span class="keywordflow">case</span> TensorStorageType::ClImage2dReadOnly:</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            <span class="keywordflow">return</span> ckw::TensorStorageType::Texture2dReadOnly;</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <span class="keywordflow">case</span> TensorStorageType::ClImage2dWriteOnly:</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            <span class="keywordflow">return</span> ckw::TensorStorageType::Texture2dWriteOnly;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        <span class="keywordflow">case</span> TensorStorageType::Unknown:</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            <span class="keywordflow">return</span> ckw::TensorStorageType::Unknown;</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unknown tensor storage type&quot;</span>);</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    }</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a75c170cf528423bcef54834f6abad95daf368a9df1a9e1958e6b9784f42e8ab3c">ClBufferUint8Ptr</a>, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a75c170cf528423bcef54834f6abad95da5e5df97fcf18f69b21caabba47034419">ClImage2dReadOnly</a>, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a75c170cf528423bcef54834f6abad95dafea9b17c253f9e05d20b10b878f4ce93">ClImage2dWriteOnly</a>, and <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a75c170cf528423bcef54834f6abad95da88183b946cc5f0e8c96b2e66e1c74a7e">Unknown</a>.</p>

</div>
</div>
<a id="a5786103fc3433a4251736a4aa5a10983"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5786103fc3433a4251736a4aa5a10983">&#9670;&nbsp;</a></span>to_ckw() <span class="overload">[5/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ckw::TensorDataLayout to_ckw </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>&#160;</td>
          <td class="paramname"><em>dl</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert the Compute Library data layout to Compute <a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> Writer data layout. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dl</td><td>The Compute Library data layout</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the Compute <a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> Writer data layout (ckw::TensorDataLayout) </dd></dl>

<p class="definition">Definition at line <a class="el" href="_common_8cpp_source.xhtml#l00069">69</a> of file <a class="el" href="_common_8cpp_source.xhtml">Common.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;{</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keywordflow">switch</span> (<a class="code" href="_n_e_fuse_batch_normalization_kernel_8cpp.xhtml#a6f725602583bcad27d0d2cad1e871128">dl</a>)</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    {</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="keywordflow">case</span> DataLayout::NHWC:</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            <span class="keywordflow">return</span> ckw::TensorDataLayout::Nhwc;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="keywordflow">case</span> DataLayout::NDHWC:</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            <span class="keywordflow">return</span> ckw::TensorDataLayout::Ndhwc;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            <span class="keywordflow">return</span> ckw::TensorDataLayout::Unknown;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    }</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_fuse_batch_normalization_kernel_8cpp_source.xhtml#l00050">dl</a>, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a4dd0194b114cbf51da5b3a72569863ef">arm_compute::NDHWC</a>, and <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">arm_compute::NHWC</a>.</p>

</div>
</div>
<a id="af3686c3e3c5e56e66d4425ca22380a91"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af3686c3e3c5e56e66d4425ca22380a91">&#9670;&nbsp;</a></span>to_ckw() <span class="overload">[6/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ckw::DataType to_ckw </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>dt</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert the Compute Library data type to Compute <a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> Writer data type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dt</td><td>The Compute Library data type</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the Compute <a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> Writer data type (ckw::DataType) </dd></dl>

<p class="definition">Definition at line <a class="el" href="_common_8cpp_source.xhtml#l00032">32</a> of file <a class="el" href="_common_8cpp_source.xhtml">Common.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;{</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="keywordflow">switch</span> (<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>)</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    {</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        <span class="keywordflow">case</span> DataType::F32:</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;            <span class="keywordflow">return</span> ckw::DataType::Fp32;</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        <span class="keywordflow">case</span> DataType::F16:</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;            <span class="keywordflow">return</span> ckw::DataType::Fp16;</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        <span class="keywordflow">case</span> DataType::S32:</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;            <span class="keywordflow">return</span> ckw::DataType::Int32;</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        <span class="keywordflow">case</span> DataType::S16:</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;            <span class="keywordflow">return</span> ckw::DataType::Int16;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <span class="keywordflow">case</span> DataType::S8:</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM8_SIGNED:</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;            <span class="keywordflow">return</span> ckw::DataType::Int8;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <span class="keywordflow">case</span> DataType::U32:</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;            <span class="keywordflow">return</span> ckw::DataType::Uint32;</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="keywordflow">case</span> DataType::U16:</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;            <span class="keywordflow">return</span> ckw::DataType::Uint16;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <span class="keywordflow">case</span> DataType::U8:</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM8:</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;            <span class="keywordflow">return</span> ckw::DataType::Uint8;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            <span class="keywordflow">return</span> ckw::DataType::Unknown;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    }</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00050">dt</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94">arm_compute::F16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::F32</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">arm_compute::QASYMM8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">arm_compute::QASYMM8_SIGNED</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6e0b0886efb94aec797f6b830329b72c">arm_compute::S16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::S32</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">arm_compute::S8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aef9ef3ebca4d2b64b6ec83808bafa5f2">arm_compute::U16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6ac8bd5bedff8ef192d39a962afc0e19ee">arm_compute::U32</a>, and <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a6669348b484e3008dca2bfa8e85e40b5">arm_compute::U8</a>.</p>

<p class="reference">Referenced by <a class="el" href="_gpu_ckw_variable_table_8cpp_source.xhtml#l00039">GpuCkwVariableTable::declare_variable()</a>, <a class="el" href="_common_8cpp_source.xhtml#l00082">to_ckw()</a>, <a class="el" href="_gpu_ckw_cast_8cpp_source.xhtml#l00059">GpuCkwCast::write_component_code()</a>, <a class="el" href="_gpu_ckw_activation_8cpp_source.xhtml#l00059">GpuCkwActivation::write_component_code()</a>, <a class="el" href="_gpu_ckw_elementwise_binary_8cpp_source.xhtml#l00065">GpuCkwElementwiseBinary::write_component_code()</a>, <a class="el" href="_gpu_ckw_pool2d_8cpp_source.xhtml#l00059">GpuCkwPool2d::write_component_code()</a>, <a class="el" href="_gpu_ckw_depthwise_conv2d_8cpp_source.xhtml#l00064">GpuCkwDepthwiseConv2d::write_component_code()</a>, <a class="el" href="_gpu_ckw_direct_conv2d_8cpp_source.xhtml#l00064">GpuCkwDirectConv2d::write_component_code()</a>, and <a class="el" href="_gpu_ckw_mat_mul_8cpp_source.xhtml#l00060">GpuCkwMatMul::write_component_code()</a>.</p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="anamespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a462bfa9dfea81692463ecb192183dd01a81cbcdf2b235a9fac1b797ce93322276"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01a81cbcdf2b235a9fac1b797ce93322276">arm_compute::experimental::dynamic_fusion::MemoryType::Auxiliary</a></div><div class="ttdeci">@ Auxiliary</div><div class="ttdoc">Additional memory required by the workload tensor, e.g.</div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_ab14b36d0ef48001465fe49c3689e27dfa0d43d985fc3a7e81bd0a2392bfa375f2"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfa0d43d985fc3a7e81bd0a2392bfa375f2">arm_compute::experimental::dynamic_fusion::TensorComponentType::OffsetFirstElement</a></div><div class="ttdeci">@ OffsetFirstElement</div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_ab26c0327042b802ca8cff46a9bc67670a10b4eb76294b70d7fd6df997ff06edb1"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670a10b4eb76294b70d7fd6df997ff06edb1">arm_compute::experimental::dynamic_fusion::GpuComponentType::Complex</a></div><div class="ttdeci">@ Complex</div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a462bfa9dfea81692463ecb192183dd01a615e6f9baca5553d44683a098d342b70"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01a615e6f9baca5553d44683a098d342b70">arm_compute::experimental::dynamic_fusion::MemoryType::Virtual</a></div><div class="ttdeci">@ Virtual</div><div class="ttdoc">Virtual type is of No-Alloc type.</div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_ab14b36d0ef48001465fe49c3689e27dfae72f3c6fb1c5222747434dc4471d108a"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfae72f3c6fb1c5222747434dc4471d108a">arm_compute::experimental::dynamic_fusion::TensorComponentType::Dim1xDim2xDim3</a></div><div class="ttdeci">@ Dim1xDim2xDim3</div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_ab14b36d0ef48001465fe49c3689e27dfaf3d2f2608a883924237d73e639fe91f9"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfaf3d2f2608a883924237d73e639fe91f9">arm_compute::experimental::dynamic_fusion::TensorComponentType::Dim1xDim2</a></div><div class="ttdeci">@ Dim1xDim2</div></div>
<div class="ttc" id="anamespacecaffe__mnist__image__extractor_xhtml_acbb621ff2dd6abf95c0bec74f70acffd"><div class="ttname"><a href="namespacecaffe__mnist__image__extractor.xhtml#acbb621ff2dd6abf95c0bec74f70acffd">caffe_mnist_image_extractor.image</a></div><div class="ttdeci">float image</div><div class="ttdef"><b>Definition:</b> <a href="caffe__mnist__image__extractor_8py_source.xhtml#l00043">caffe_mnist_image_extractor.py:43</a></div></div>
<div class="ttc" id="a_n_e_fuse_batch_normalization_kernel_8cpp_xhtml_a6f725602583bcad27d0d2cad1e871128"><div class="ttname"><a href="_n_e_fuse_batch_normalization_kernel_8cpp.xhtml#a6f725602583bcad27d0d2cad1e871128">dl</a></div><div class="ttdeci">DataLayout dl</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_fuse_batch_normalization_kernel_8cpp_source.xhtml#l00050">NEFuseBatchNormalizationKernel.cpp:50</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_ab14b36d0ef48001465fe49c3689e27dfaf714267608d53bc244cb23f12d46573f"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfaf714267608d53bc244cb23f12d46573f">arm_compute::experimental::dynamic_fusion::TensorComponentType::Dim1</a></div><div class="ttdeci">@ Dim1</div></div>
<div class="ttc" id="a_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00354">Error.h:354</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a443d09c5e20d13e6f4063d0f60616fb5"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">arm_compute::cpu::data_layout</a></div><div class="ttdeci">constexpr auto data_layout</div><div class="ttdef"><b>Definition:</b> <a href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00036">impl.h:36</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_ab14b36d0ef48001465fe49c3689e27dfae663b146594eb6dd6c5ed3ca9687d111"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfae663b146594eb6dd6c5ed3ca9687d111">arm_compute::experimental::dynamic_fusion::TensorComponentType::Dim4</a></div><div class="ttdeci">@ Dim4</div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_ab14b36d0ef48001465fe49c3689e27dfa11bc5c4991b2c0d1e633683c73816395"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfa11bc5c4991b2c0d1e633683c73816395">arm_compute::experimental::dynamic_fusion::TensorComponentType::Dim2xDim3</a></div><div class="ttdeci">@ Dim2xDim3</div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a66520faad3ee3d1e34cc87dc42499e2c"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a66520faad3ee3d1e34cc87dc42499e2c">arm_compute::experimental::dynamic_fusion::is_valid_tensor</a></div><div class="ttdeci">bool is_valid_tensor(const ITensorInfo *tensor_info)</div><div class="ttdoc">ITensorInfo has valid id</div><div class="ttdef"><b>Definition:</b> <a href="src_2dynamic__fusion_2utils_2_utils_8h_source.xhtml#l00052">Utils.h:52</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_ab14b36d0ef48001465fe49c3689e27dfad3455d1cff9716d43c455aa959720525"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfad3455d1cff9716d43c455aa959720525">arm_compute::experimental::dynamic_fusion::TensorComponentType::Dim0</a></div><div class="ttdeci">@ Dim0</div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a45cde9abb508c62d67c3bb2b9bf566a5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">arm_compute::test::validation::shape</a></div><div class="ttdeci">shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">DFT.cpp:115</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_ab14b36d0ef48001465fe49c3689e27dfa96cdc37a3a7c2c8d3495d713d1d293e1"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfa96cdc37a3a7c2c8d3495d713d1d293e1">arm_compute::experimental::dynamic_fusion::TensorComponentType::Stride2</a></div><div class="ttdeci">@ Stride2</div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a75c170cf528423bcef54834f6abad95daf368a9df1a9e1958e6b9784f42e8ab3c"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a75c170cf528423bcef54834f6abad95daf368a9df1a9e1958e6b9784f42e8ab3c">arm_compute::experimental::dynamic_fusion::TensorStorageType::ClBufferUint8Ptr</a></div><div class="ttdeci">@ ClBufferUint8Ptr</div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_ab26c0327042b802ca8cff46a9bc67670a1fbb1e3943c2c6c560247ac8f9289780"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670a1fbb1e3943c2c6c560247ac8f9289780">arm_compute::experimental::dynamic_fusion::GpuComponentType::Simple</a></div><div class="ttdeci">@ Simple</div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a0d9efc610b9abef3116b2e3fde52d242"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a0d9efc610b9abef3116b2e3fde52d242">arm_compute::experimental::dynamic_fusion::to_ckw</a></div><div class="ttdeci">ckw::TensorStorageType to_ckw(const TensorStorageType &amp;storage)</div><div class="ttdoc">Convert the Compute Library tensor storage to Compute Kernel Writer tensor storage.</div><div class="ttdef"><b>Definition:</b> <a href="_common_8cpp_source.xhtml#l00088">Common.cpp:88</a></div></div>
<div class="ttc" id="a_n_e_batch_normalization_layer_kernel_8cpp_xhtml_aa36901a4911e511f25f42e191df3526d"><div class="ttname"><a href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a></div><div class="ttdeci">DataType dt</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00050">NEBatchNormalizationLayerKernel.cpp:50</a></div></div>
<div class="ttc" id="a_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00067">ClWorkloadRuntime.cpp:67</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_ab14b36d0ef48001465fe49c3689e27dfa08d73a8dedbfeee532f8aea75a0f7e3f"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfa08d73a8dedbfeee532f8aea75a0f7e3f">arm_compute::experimental::dynamic_fusion::TensorComponentType::Stride4</a></div><div class="ttdeci">@ Stride4</div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_ab26c0327042b802ca8cff46a9bc67670ae157cdc2ee225c7a081c7bae83f17b0c"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab26c0327042b802ca8cff46a9bc67670ae157cdc2ee225c7a081c7bae83f17b0c">arm_compute::experimental::dynamic_fusion::GpuComponentType::Unfusable</a></div><div class="ttdeci">@ Unfusable</div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a462bfa9dfea81692463ecb192183dd01a8f9bfe9d1345237cb3b2b205864da075"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a462bfa9dfea81692463ecb192183dd01a8f9bfe9d1345237cb3b2b205864da075">arm_compute::experimental::dynamic_fusion::MemoryType::User</a></div><div class="ttdeci">@ User</div><div class="ttdoc">Both User and Auxiliary types are of Alloc type.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe"><div class="ttname"><a href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">arm_compute::DimensionRoundingType::FLOOR</a></div><div class="ttdeci">@ FLOOR</div><div class="ttdoc">Floor rounding.</div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_ab14b36d0ef48001465fe49c3689e27dfa951a4eb66fe4736f2dc28c444d194197"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfa951a4eb66fe4736f2dc28c444d194197">arm_compute::experimental::dynamic_fusion::TensorComponentType::Stride0</a></div><div class="ttdeci">@ Stride0</div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a75c170cf528423bcef54834f6abad95da5e5df97fcf18f69b21caabba47034419"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a75c170cf528423bcef54834f6abad95da5e5df97fcf18f69b21caabba47034419">arm_compute::experimental::dynamic_fusion::TensorStorageType::ClImage2dReadOnly</a></div><div class="ttdeci">@ ClImage2dReadOnly</div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_ab14b36d0ef48001465fe49c3689e27dfa6910fb9de80a184c63575625d5ac6063"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfa6910fb9de80a184c63575625d5ac6063">arm_compute::experimental::dynamic_fusion::TensorComponentType::Dim2</a></div><div class="ttdeci">@ Dim2</div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16a29c2c02a361c9d7028472e5d92cd4a54"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a29c2c02a361c9d7028472e5d92cd4a54">arm_compute::graph::NodeType::Output</a></div><div class="ttdeci">@ Output</div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_ab14b36d0ef48001465fe49c3689e27dfab51cb01d37be2f9684fe7f52f62034cf"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfab51cb01d37be2f9684fe7f52f62034cf">arm_compute::experimental::dynamic_fusion::TensorComponentType::Dim3</a></div><div class="ttdeci">@ Dim3</div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_ac57b92957968088a392021cac1d2076b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a></div><div class="ttdeci">ScaleKernelInfo info(interpolation_policy, default_border_mode, PixelValue(), sampling_policy, false)</div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a05c10bc9018179245c50d45b330a1c6a"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">arm_compute::cpu::step</a></div><div class="ttdeci">constexpr int step</div><div class="ttdef"><b>Definition:</b> <a href="cpu_2kernels_2floor_2neon_2fp32_8cpp_source.xhtml#l00035">fp32.cpp:35</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a75c170cf528423bcef54834f6abad95dafea9b17c253f9e05d20b10b878f4ce93"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a75c170cf528423bcef54834f6abad95dafea9b17c253f9e05d20b10b878f4ce93">arm_compute::experimental::dynamic_fusion::TensorStorageType::ClImage2dWriteOnly</a></div><div class="ttdeci">@ ClImage2dWriteOnly</div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_aa334134c2d2596d8de13df6f9cb67d1da7982b09a852b37f2afb1227eaf552e47"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#aa334134c2d2596d8de13df6f9cb67d1da7982b09a852b37f2afb1227eaf552e47">arm_compute::experimental::dynamic_fusion::GpuLanguage::OpenCL</a></div><div class="ttdeci">@ OpenCL</div></div>
<div class="ttc" id="anamespaceacl_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a88183b946cc5f0e8c96b2e66e1c74a7e"><div class="ttname"><a href="namespaceacl.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a88183b946cc5f0e8c96b2e66e1c74a7e">acl::DataType::Unknown</a></div><div class="ttdeci">@ Unknown</div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_ab14b36d0ef48001465fe49c3689e27dfa830e11331f9da0cc171d1554bf91afdf"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfa830e11331f9da0cc171d1554bf91afdf">arm_compute::experimental::dynamic_fusion::TensorComponentType::Stride3</a></div><div class="ttdeci">@ Stride3</div></div>
<div class="ttc" id="a_cl_workload_runtime_8cpp_xhtml_a84d9f260af89712132849ff260487ea0"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a></div><div class="ttdeci">TensorInfo tensor_info</div><div class="ttdoc">Associated tensor info.</div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00068">ClWorkloadRuntime.cpp:68</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_ab14b36d0ef48001465fe49c3689e27dfa56458b2cf5b9cf6680f7a1a2df201088"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab14b36d0ef48001465fe49c3689e27dfa56458b2cf5b9cf6680f7a1a2df201088">arm_compute::experimental::dynamic_fusion::TensorComponentType::Stride1</a></div><div class="ttdeci">@ Stride1</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1experimental.xhtml">experimental</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml">dynamic_fusion</a></li>
    <li class="footer">Generated on Fri Jul 26 2024 12:08:33 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
