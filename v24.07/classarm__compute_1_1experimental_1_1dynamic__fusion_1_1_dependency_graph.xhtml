<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: DependencyGraph Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.07</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#friends">Friends</a>  </div>
  <div class="headertitle">
<div class="title">DependencyGraph Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>A multi-input (tensors), multi-output (tensors) acyclic directed graph Represented as a doubly-linked adjacency list with the differentiation between source and destination.  
 <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_dependency_graph_8h_source.xhtml">DependencyGraph.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_1_1_op_pack.xhtml">OpPack</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A pack of operator including its input and output tensors, used by traversing through the graph in topological order.  <a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_1_1_op_pack.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a1fafaeb6e3ab8c0bc772532cc3fcff1a"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a1fafaeb6e3ab8c0bc772532cc3fcff1a">Id</a> = int32_t</td></tr>
<tr class="separator:a1fafaeb6e3ab8c0bc772532cc3fcff1a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa1775ccb35b0d53526b272a7f23df7a0"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa1775ccb35b0d53526b272a7f23df7a0">TensorId</a> = <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a1fafaeb6e3ab8c0bc772532cc3fcff1a">Id</a></td></tr>
<tr class="separator:aa1775ccb35b0d53526b272a7f23df7a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae2526157a355e3de67c19aae6e5e133"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aae2526157a355e3de67c19aae6e5e133">OperatorId</a> = <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a1fafaeb6e3ab8c0bc772532cc3fcff1a">Id</a></td></tr>
<tr class="separator:aae2526157a355e3de67c19aae6e5e133"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3037da158468d821b4cd5d1d831c79af"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a3037da158468d821b4cd5d1d831c79af">AdjList</a> = std::map&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a1fafaeb6e3ab8c0bc772532cc3fcff1a">Id</a>, std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a1fafaeb6e3ab8c0bc772532cc3fcff1a">Id</a> &gt; &gt;</td></tr>
<tr class="memdesc:a3037da158468d821b4cd5d1d831c79af"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adjacency list.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a3037da158468d821b4cd5d1d831c79af">More...</a><br /></td></tr>
<tr class="separator:a3037da158468d821b4cd5d1d831c79af"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a62293bb5739ed8756db079365187f720"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a62293bb5739ed8756db079365187f720">DependencyGraph</a> ()=default</td></tr>
<tr class="separator:a62293bb5739ed8756db079365187f720"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af4040a979c2f3bf8d4006b5c990f21db"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#af4040a979c2f3bf8d4006b5c990f21db">try_add_operator_as_linear</a> (<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aae2526157a355e3de67c19aae6e5e133">OperatorId</a> op, const std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa1775ccb35b0d53526b272a7f23df7a0">TensorId</a> &gt; &amp;inputs, const std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa1775ccb35b0d53526b272a7f23df7a0">TensorId</a> &gt; &amp;outputs, bool is_output=false) const</td></tr>
<tr class="memdesc:af4040a979c2f3bf8d4006b5c990f21db"><td class="mdescLeft">&#160;</td><td class="mdescRight">Try adding an operator (without actually adding it), while keeping the graph as a "linear sequence" / list.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#af4040a979c2f3bf8d4006b5c990f21db">More...</a><br /></td></tr>
<tr class="separator:af4040a979c2f3bf8d4006b5c990f21db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aad93356944397e10e5c315723914019a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aad93356944397e10e5c315723914019a">add_operator_as_linear</a> (<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aae2526157a355e3de67c19aae6e5e133">OperatorId</a> op, const std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa1775ccb35b0d53526b272a7f23df7a0">TensorId</a> &gt; &amp;inputs, const std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa1775ccb35b0d53526b272a7f23df7a0">TensorId</a> &gt; &amp;outputs, bool is_output=false)</td></tr>
<tr class="memdesc:aad93356944397e10e5c315723914019a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add an operator, while keeping the graph as a "linear sequence".  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aad93356944397e10e5c315723914019a">More...</a><br /></td></tr>
<tr class="separator:aad93356944397e10e5c315723914019a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4fa2090ba4e0caf4aa74327e9962511b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a4fa2090ba4e0caf4aa74327e9962511b">add_operator</a> (<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aae2526157a355e3de67c19aae6e5e133">OperatorId</a> op, const std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa1775ccb35b0d53526b272a7f23df7a0">TensorId</a> &gt; &amp;inputs, const std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa1775ccb35b0d53526b272a7f23df7a0">TensorId</a> &gt; &amp;outputs, bool is_output=false)</td></tr>
<tr class="memdesc:a4fa2090ba4e0caf4aa74327e9962511b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add a new operator Return invalid if it violates the DAG invariant Invalid operation will not change the graph.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a4fa2090ba4e0caf4aa74327e9962511b">More...</a><br /></td></tr>
<tr class="separator:a4fa2090ba4e0caf4aa74327e9962511b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a78baf70e426827a83bce389f3d9c7dca"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_1_1_op_pack.xhtml">OpPack</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a78baf70e426827a83bce389f3d9c7dca">build_operators_sequence</a> () const</td></tr>
<tr class="memdesc:a78baf70e426827a83bce389f3d9c7dca"><td class="mdescLeft">&#160;</td><td class="mdescRight">Build a sequence of operators from the acyclic graph of operators.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a78baf70e426827a83bce389f3d9c7dca">More...</a><br /></td></tr>
<tr class="separator:a78baf70e426827a83bce389f3d9c7dca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa16ba811cfa71fadd1966a8969710584"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aae2526157a355e3de67c19aae6e5e133">OperatorId</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa16ba811cfa71fadd1966a8969710584">src_ops_from_tensor</a> (<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa1775ccb35b0d53526b272a7f23df7a0">TensorId</a> <a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>) const</td></tr>
<tr class="separator:aa16ba811cfa71fadd1966a8969710584"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa6cf5d3ba596288789eb3f85b87f97ba"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aae2526157a355e3de67c19aae6e5e133">OperatorId</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa6cf5d3ba596288789eb3f85b87f97ba">dst_ops_from_tensor</a> (<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa1775ccb35b0d53526b272a7f23df7a0">TensorId</a> <a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>) const</td></tr>
<tr class="separator:aa6cf5d3ba596288789eb3f85b87f97ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb059af9caf54facdaf1698bf6f80ab3"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa1775ccb35b0d53526b272a7f23df7a0">TensorId</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#afb059af9caf54facdaf1698bf6f80ab3">all_tensors</a> () const</td></tr>
<tr class="memdesc:afb059af9caf54facdaf1698bf6f80ab3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get all tensors.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#afb059af9caf54facdaf1698bf6f80ab3">More...</a><br /></td></tr>
<tr class="separator:afb059af9caf54facdaf1698bf6f80ab3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a02b701633ac4981fdb5f19394c94caf9"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa1775ccb35b0d53526b272a7f23df7a0">TensorId</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a02b701633ac4981fdb5f19394c94caf9">global_src_tensors</a> () const</td></tr>
<tr class="memdesc:a02b701633ac4981fdb5f19394c94caf9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get source tensors of the whole graph.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a02b701633ac4981fdb5f19394c94caf9">More...</a><br /></td></tr>
<tr class="separator:a02b701633ac4981fdb5f19394c94caf9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6275638b3e225efcce14fa96f8952345"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa1775ccb35b0d53526b272a7f23df7a0">TensorId</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a6275638b3e225efcce14fa96f8952345">global_dst_tensors</a> () const</td></tr>
<tr class="memdesc:a6275638b3e225efcce14fa96f8952345"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get destination tensors of the whole graph.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a6275638b3e225efcce14fa96f8952345">More...</a><br /></td></tr>
<tr class="separator:a6275638b3e225efcce14fa96f8952345"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a486b438340dcc49ea829c3a8724797ca"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa1775ccb35b0d53526b272a7f23df7a0">TensorId</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a486b438340dcc49ea829c3a8724797ca">intermediate_tensors</a> () const</td></tr>
<tr class="memdesc:a486b438340dcc49ea829c3a8724797ca"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get intermediate tensors of the whole graph.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a486b438340dcc49ea829c3a8724797ca">More...</a><br /></td></tr>
<tr class="separator:a486b438340dcc49ea829c3a8724797ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a63be0889f78146e9a728676958cab98e"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aae2526157a355e3de67c19aae6e5e133">OperatorId</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a63be0889f78146e9a728676958cab98e">get_root_ops</a> () const</td></tr>
<tr class="memdesc:a63be0889f78146e9a728676958cab98e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get all root ops.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a63be0889f78146e9a728676958cab98e">More...</a><br /></td></tr>
<tr class="separator:a63be0889f78146e9a728676958cab98e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:adaefd03137f6501b238946b911b6ff9d"><td class="memItemLeft" align="right" valign="top">std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#adaefd03137f6501b238946b911b6ff9d">operator&lt;&lt;</a> (std::ostream &amp;os, const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml">DependencyGraph</a> &amp;)</td></tr>
<tr class="separator:adaefd03137f6501b238946b911b6ff9d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e4a07e7e6126471b70b8f4793fb7af7"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a4e4a07e7e6126471b70b8f4793fb7af7">operator==</a> (const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml">DependencyGraph</a> &amp;g0, const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml">DependencyGraph</a> &amp;g1)</td></tr>
<tr class="memdesc:a4e4a07e7e6126471b70b8f4793fb7af7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Strict equality comparison (all internal ids and order of insertion matter).  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a4e4a07e7e6126471b70b8f4793fb7af7">More...</a><br /></td></tr>
<tr class="separator:a4e4a07e7e6126471b70b8f4793fb7af7"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>A multi-input (tensors), multi-output (tensors) acyclic directed graph Represented as a doubly-linked adjacency list with the differentiation between source and destination. </p>

<p class="definition">Definition at line <a class="el" href="_dependency_graph_8h_source.xhtml#l00053">53</a> of file <a class="el" href="_dependency_graph_8h_source.xhtml">DependencyGraph.h</a>.</p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a id="a3037da158468d821b4cd5d1d831c79af"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3037da158468d821b4cd5d1d831c79af">&#9670;&nbsp;</a></span>AdjList</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a3037da158468d821b4cd5d1d831c79af">AdjList</a> =  std::map&lt;<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a1fafaeb6e3ab8c0bc772532cc3fcff1a">Id</a>, std::vector&lt;<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a1fafaeb6e3ab8c0bc772532cc3fcff1a">Id</a>&gt; &gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adjacency list. </p>

<p class="definition">Definition at line <a class="el" href="_dependency_graph_8h_source.xhtml#l00062">62</a> of file <a class="el" href="_dependency_graph_8h_source.xhtml">DependencyGraph.h</a>.</p>

</div>
</div>
<a id="a1fafaeb6e3ab8c0bc772532cc3fcff1a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1fafaeb6e3ab8c0bc772532cc3fcff1a">&#9670;&nbsp;</a></span>Id</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a1fafaeb6e3ab8c0bc772532cc3fcff1a">Id</a> =  int32_t</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dependency_graph_8h_source.xhtml#l00056">56</a> of file <a class="el" href="_dependency_graph_8h_source.xhtml">DependencyGraph.h</a>.</p>

</div>
</div>
<a id="aae2526157a355e3de67c19aae6e5e133"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aae2526157a355e3de67c19aae6e5e133">&#9670;&nbsp;</a></span>OperatorId</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aae2526157a355e3de67c19aae6e5e133">OperatorId</a> =  <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a1fafaeb6e3ab8c0bc772532cc3fcff1a">Id</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dependency_graph_8h_source.xhtml#l00058">58</a> of file <a class="el" href="_dependency_graph_8h_source.xhtml">DependencyGraph.h</a>.</p>

</div>
</div>
<a id="aa1775ccb35b0d53526b272a7f23df7a0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa1775ccb35b0d53526b272a7f23df7a0">&#9670;&nbsp;</a></span>TensorId</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa1775ccb35b0d53526b272a7f23df7a0">TensorId</a> =  <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a1fafaeb6e3ab8c0bc772532cc3fcff1a">Id</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dependency_graph_8h_source.xhtml#l00057">57</a> of file <a class="el" href="_dependency_graph_8h_source.xhtml">DependencyGraph.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a62293bb5739ed8756db079365187f720"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a62293bb5739ed8756db079365187f720">&#9670;&nbsp;</a></span>DependencyGraph()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml">DependencyGraph</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a4fa2090ba4e0caf4aa74327e9962511b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4fa2090ba4e0caf4aa74327e9962511b">&#9670;&nbsp;</a></span>add_operator()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool add_operator </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aae2526157a355e3de67c19aae6e5e133">OperatorId</a>&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa1775ccb35b0d53526b272a7f23df7a0">TensorId</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>inputs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa1775ccb35b0d53526b272a7f23df7a0">TensorId</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>outputs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>is_output</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Add a new operator Return invalid if it violates the DAG invariant Invalid operation will not change the graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">op</td><td><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="An operator for the sole purpose of validating fusion.">Operator</a> to add </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">inputs</td><td>Input tensors to the operator </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">outputs</td><td>Output tensors to the operator </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">is_output</td><td>Whether this is an output operator </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_dependency_graph_8h_source.xhtml#l00191">191</a> of file <a class="el" href="_dependency_graph_8h_source.xhtml">DependencyGraph.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    {</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        <span class="keywordflow">if</span> (operator_exists(op))</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        {</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        }</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        _adj_src_tensors[op] = {};</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        _adj_dst_tensors[op] = {};</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> in_tensor : inputs)</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        {</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            <span class="comment">// Linking input tensor to operator node will never create a cycle / loop because we guarantee</span></div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            <span class="comment">// each op is newly created, so every &lt;input, op&gt; pair / edge is new</span></div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;            link_input(op, in_tensor);</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        }</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> out_tensor : outputs)</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        {</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            <span class="comment">// If there exists a back path from op&#39;s output tensor to op already, then linking the two will create a loop / cycle</span></div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            <span class="keywordflow">if</span> (path_exists_from_tensor_to_op(out_tensor, op))</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            {</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                remove_operator(op);</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;            }</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            {</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                link_output(op, out_tensor);</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            }</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        }</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160; </div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        <span class="keywordflow">if</span> (!is_output)</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        {</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;            _last_op_available = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;            _last_op           = op;</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        }</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160; </div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_gpu_kernel_component_graph_8h_source.xhtml#l00073">GpuKernelComponentGraph::add_new_component()</a>, and <a class="el" href="_dependency_graph_8h_source.xhtml#l00173">DependencyGraph::add_operator_as_linear()</a>.</p>

</div>
</div>
<a id="aad93356944397e10e5c315723914019a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aad93356944397e10e5c315723914019a">&#9670;&nbsp;</a></span>add_operator_as_linear()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void add_operator_as_linear </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aae2526157a355e3de67c19aae6e5e133">OperatorId</a>&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa1775ccb35b0d53526b272a7f23df7a0">TensorId</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>inputs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa1775ccb35b0d53526b272a7f23df7a0">TensorId</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>outputs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>is_output</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Add an operator, while keeping the graph as a "linear sequence". </p>
<p>PRECONDITION: The current graph is already linear INVARIANT: The list can only grow from head to tail INVARIANT: POSTCONDITION: The graph is linear </p>

<p class="definition">Definition at line <a class="el" href="_dependency_graph_8h_source.xhtml#l00173">173</a> of file <a class="el" href="_dependency_graph_8h_source.xhtml">DependencyGraph.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    {</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> success = <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a4fa2090ba4e0caf4aa74327e9962511b">add_operator</a>(op, inputs, outputs, is_output);</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(success);</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!success);</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_dependency_graph_8h_source.xhtml#l00191">DependencyGraph::add_operator()</a>, <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, and <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>.</p>

<p class="reference">Referenced by <a class="el" href="_gpu_operator_group_8cpp_source.xhtml#l00141">GpuOperatorGroup::add_operator()</a>.</p>

</div>
</div>
<a id="afb059af9caf54facdaf1698bf6f80ab3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afb059af9caf54facdaf1698bf6f80ab3">&#9670;&nbsp;</a></span>all_tensors()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa1775ccb35b0d53526b272a7f23df7a0">TensorId</a>&gt; all_tensors </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get all tensors. </p>
<dl class="section return"><dt>Returns</dt><dd>std::vector&lt;TensorId&gt; </dd></dl>

<p class="definition">Definition at line <a class="el" href="_dependency_graph_8h_source.xhtml#l00286">286</a> of file <a class="el" href="_dependency_graph_8h_source.xhtml">DependencyGraph.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    {</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        std::vector&lt;TensorId&gt; tensors{};</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;        std::transform(std::begin(_adj_src_ops), <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">std::end</a>(_adj_src_ops), std::back_inserter(tensors),</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                       [](<span class="keyword">const</span> <span class="keyword">auto</span> &amp;it) { <span class="keywordflow">return</span> it.first; });</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;        <span class="keywordflow">return</span> tensors;</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_m_l_g_o_parser_8cpp_source.xhtml#l00283">arm_compute::mlgo::parser::end()</a>.</p>

</div>
</div>
<a id="a78baf70e426827a83bce389f3d9c7dca"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a78baf70e426827a83bce389f3d9c7dca">&#9670;&nbsp;</a></span>build_operators_sequence()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_1_1_op_pack.xhtml">OpPack</a>&gt; build_operators_sequence </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Build a sequence of operators from the acyclic graph of operators. </p>
<p>The graph will be visited in depth-first strategy. The operator can only be added to the sequence when all operators that supply the input tensors have been added. Otherwise, the operator will be ignored and later visited again. In other words, the dependency between operators will be preserved in the sequence. </p>

<p class="definition">Definition at line <a class="el" href="_dependency_graph_8h_source.xhtml#l00238">238</a> of file <a class="el" href="_dependency_graph_8h_source.xhtml">DependencyGraph.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    {</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        std::vector&lt;OpPack&gt; ops_seq;</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        std::set&lt;Id&gt;        done_ops;</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        std::set&lt;Id&gt;        done_tensors;</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160; </div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> input_tensors = <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a02b701633ac4981fdb5f19394c94caf9">global_src_tensors</a>();</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160; </div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> : input_tensors)</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        {</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;            done_tensors.insert(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160; </div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;            <span class="keywordflow">for</span> (<span class="keyword">auto</span> op : _adj_dst_ops.at(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>))</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;            {</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                build_operators_sequence_from_op(op, ops_seq, done_ops, done_tensors);</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;            }</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        }</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160; </div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        <span class="keywordflow">return</span> ops_seq;</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_dependency_graph_8h_source.xhtml#l00297">DependencyGraph::global_src_tensors()</a>, and <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00067">tensor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_gpu_kernel_component_graph_8cpp_source.xhtml#l00048">GpuKernelComponentGraph::fuse()</a>.</p>

</div>
</div>
<a id="aa6cf5d3ba596288789eb3f85b87f97ba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa6cf5d3ba596288789eb3f85b87f97ba">&#9670;&nbsp;</a></span>dst_ops_from_tensor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aae2526157a355e3de67c19aae6e5e133">OperatorId</a>&gt; dst_ops_from_tensor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa1775ccb35b0d53526b272a7f23df7a0">TensorId</a>&#160;</td>
          <td class="paramname"><em>tensor</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dependency_graph_8h_source.xhtml#l00278">278</a> of file <a class="el" href="_dependency_graph_8h_source.xhtml">DependencyGraph.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    {</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        <span class="keywordflow">return</span> _adj_dst_ops.at(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00067">tensor</a>.</p>

</div>
</div>
<a id="a63be0889f78146e9a728676958cab98e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a63be0889f78146e9a728676958cab98e">&#9670;&nbsp;</a></span>get_root_ops()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aae2526157a355e3de67c19aae6e5e133">OperatorId</a>&gt; get_root_ops </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get all root ops. </p>
<p>Root ops can also be referred to as "src ops" of the whole graph</p>
<dl class="section return"><dt>Returns</dt><dd>std::vector&lt;OperatorId&gt; </dd></dl>

<p class="definition">Definition at line <a class="el" href="_dependency_graph_8h_source.xhtml#l00356">356</a> of file <a class="el" href="_dependency_graph_8h_source.xhtml">DependencyGraph.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    {</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;        std::vector&lt;OperatorId&gt; ops{};</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>              op_list = all_ops();</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160; </div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> op : op_list)</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        {</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;            <span class="keywordflow">if</span> (src_ops(op).empty())</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;            {</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                ops.emplace_back(op);</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;            }</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;        }</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;        <span class="keywordflow">return</span> ops;</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_gpu_operator_group_8cpp_source.xhtml#l00155">GpuOperatorGroup::get_root_operator()</a>.</p>

</div>
</div>
<a id="a6275638b3e225efcce14fa96f8952345"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6275638b3e225efcce14fa96f8952345">&#9670;&nbsp;</a></span>global_dst_tensors()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa1775ccb35b0d53526b272a7f23df7a0">TensorId</a>&gt; global_dst_tensors </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get destination tensors of the whole graph. </p>
<dl class="section return"><dt>Returns</dt><dd>std::vector&lt;TensorId&gt; </dd></dl>

<p class="definition">Definition at line <a class="el" href="_dependency_graph_8h_source.xhtml#l00313">313</a> of file <a class="el" href="_dependency_graph_8h_source.xhtml">DependencyGraph.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    {</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        std::vector&lt;TensorId&gt; tensors;</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> tensor_dst_ops : _adj_dst_ops)</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        {</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;            <span class="keywordflow">if</span> (tensor_dst_ops.second.empty())</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;            {</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                tensors.push_back(tensor_dst_ops.first);</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;            }</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        }</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        <span class="keywordflow">return</span> tensors;</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    }</div>
</div><!-- fragment -->
</div>
</div>
<a id="a02b701633ac4981fdb5f19394c94caf9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a02b701633ac4981fdb5f19394c94caf9">&#9670;&nbsp;</a></span>global_src_tensors()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa1775ccb35b0d53526b272a7f23df7a0">TensorId</a>&gt; global_src_tensors </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get source tensors of the whole graph. </p>
<dl class="section return"><dt>Returns</dt><dd>std::vector&lt;TensorId&gt; </dd></dl>

<p class="definition">Definition at line <a class="el" href="_dependency_graph_8h_source.xhtml#l00297">297</a> of file <a class="el" href="_dependency_graph_8h_source.xhtml">DependencyGraph.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    {</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        std::vector&lt;TensorId&gt; tensors;</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> tensor_src_ops : _adj_src_ops)</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        {</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;            <span class="keywordflow">if</span> (tensor_src_ops.second.empty())</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;            {</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                tensors.push_back(tensor_src_ops.first);</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;            }</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        }</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        <span class="keywordflow">return</span> tensors;</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_dependency_graph_8h_source.xhtml#l00238">DependencyGraph::build_operators_sequence()</a>.</p>

</div>
</div>
<a id="a486b438340dcc49ea829c3a8724797ca"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a486b438340dcc49ea829c3a8724797ca">&#9670;&nbsp;</a></span>intermediate_tensors()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa1775ccb35b0d53526b272a7f23df7a0">TensorId</a>&gt; intermediate_tensors </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get intermediate tensors of the whole graph. </p>
<dl class="section return"><dt>Returns</dt><dd>std::vector&lt;TensorId&gt; </dd></dl>

<p class="definition">Definition at line <a class="el" href="_dependency_graph_8h_source.xhtml#l00329">329</a> of file <a class="el" href="_dependency_graph_8h_source.xhtml">DependencyGraph.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    {</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        std::vector&lt;TensorId&gt; tensors;</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160; </div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        <span class="comment">// If a tensor is used to connect the input of an operator and the output of another operator,</span></div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;        <span class="comment">// it is not allocated in the memory. The tensor exists as a temporary variable only.</span></div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> src_tensor : _adj_src_ops)</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;        {</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;            <span class="keywordflow">if</span> (!src_tensor.second.empty())</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;            {</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> dst_tensor = _adj_dst_ops.find(src_tensor.first);</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                <span class="keywordflow">if</span> (dst_tensor != _adj_dst_ops.end())</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                {</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                    <span class="keywordflow">if</span> (!dst_tensor-&gt;second.empty())</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                    {</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                        tensors.push_back(src_tensor.first);</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                    }</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                }</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;            }</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        }</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160; </div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        <span class="keywordflow">return</span> tensors;</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    }</div>
</div><!-- fragment -->
</div>
</div>
<a id="aa16ba811cfa71fadd1966a8969710584"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa16ba811cfa71fadd1966a8969710584">&#9670;&nbsp;</a></span>src_ops_from_tensor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aae2526157a355e3de67c19aae6e5e133">OperatorId</a>&gt; src_ops_from_tensor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa1775ccb35b0d53526b272a7f23df7a0">TensorId</a>&#160;</td>
          <td class="paramname"><em>tensor</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dependency_graph_8h_source.xhtml#l00274">274</a> of file <a class="el" href="_dependency_graph_8h_source.xhtml">DependencyGraph.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    {</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        <span class="keywordflow">return</span> _adj_src_ops.at(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00067">tensor</a>.</p>

</div>
</div>
<a id="af4040a979c2f3bf8d4006b5c990f21db"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af4040a979c2f3bf8d4006b5c990f21db">&#9670;&nbsp;</a></span>try_add_operator_as_linear()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool try_add_operator_as_linear </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aae2526157a355e3de67c19aae6e5e133">OperatorId</a>&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa1775ccb35b0d53526b272a7f23df7a0">TensorId</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>inputs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa1775ccb35b0d53526b272a7f23df7a0">TensorId</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>outputs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>is_output</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Try adding an operator (without actually adding it), while keeping the graph as a "linear sequence" / list. </p>
<p>Rule: If the new operator is not the first operator, at least one input tensor must be the output tensor of the last non-output operator. All other input tensors must be the global input of the graph (i.e. not the output of any operator).</p>
<p>Rule: The output tensor of the new operator must not be the input tensor of any previously added operator.</p>
<p>PRECONDITION: The current graph is already linear</p>
<dl class="section return"><dt>Returns</dt><dd>true If the operator can be added while keeping the graph as a linear sequence </dd>
<dd>
false Otherwise </dd></dl>

<p class="definition">Definition at line <a class="el" href="_dependency_graph_8h_source.xhtml#l00097">97</a> of file <a class="el" href="_dependency_graph_8h_source.xhtml">DependencyGraph.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    {</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(op, is_output);</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="keywordflow">if</span> (all_ops().empty())</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        {</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        }</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160; </div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <span class="comment">// If the new operator is not the first operator, at least one input tensor must be</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="comment">// the output tensor of the last non-output operator. All other input tensors must be</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <span class="comment">// the global input of the graph (i.e. not the output of any operator).</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <span class="keywordflow">if</span> (_last_op_available)</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        {</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            <span class="keyword">auto</span> use_input_from_last_op = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160; </div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            <span class="keywordflow">for</span> (<span class="keyword">auto</span> src_tensor : inputs)</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            {</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> src_ops = _adj_src_ops.find(src_tensor);</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160; </div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                <span class="keywordflow">if</span> (src_ops != _adj_src_ops.end())</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                {</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(src_ops-&gt;second.size() &gt; 1);</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160; </div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                    <span class="keywordflow">if</span> (!src_ops-&gt;second.empty())</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                    {</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> src_op = src_ops-&gt;second[0];</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160; </div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                        <span class="keywordflow">if</span> (src_op == _last_op)</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                        {</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                            <span class="keywordflow">if</span> (use_input_from_last_op)</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                            {</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                                <span class="comment">// To be safe, we also forbid using the output tensor</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                                <span class="comment">// of the last operator twice.</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                            }</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160; </div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                            use_input_from_last_op = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                        }</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                        {</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                            <span class="comment">// The input tensor of this operator must not be the output tensor</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                            <span class="comment">// of any other operator except the last non-output operator.</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                        }</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                    }</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                }</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            }</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160; </div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            <span class="keywordflow">if</span> (!use_input_from_last_op)</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            {</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                <span class="comment">// At least one input tensor must be the output tensor of the last non-output operator.</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            }</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        }</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160; </div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <span class="comment">// The output tensor of the new operator must not be the input tensor of any previously</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        <span class="comment">// added operator.</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> dst_tensor : outputs)</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        {</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            <span class="keywordflow">if</span> (_adj_dst_ops.find(dst_tensor) != _adj_dst_ops.end())</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            {</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;            }</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        }</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160; </div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, and <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>.</p>

<p class="reference">Referenced by <a class="el" href="_gpu_operator_group_8cpp_source.xhtml#l00066">GpuOperatorGroup::try_add_operator()</a>.</p>

</div>
</div>
<h2 class="groupheader">Friends And Related Function Documentation</h2>
<a id="adaefd03137f6501b238946b911b6ff9d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adaefd03137f6501b238946b911b6ff9d">&#9670;&nbsp;</a></span>operator&lt;&lt;</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::ostream&amp; operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml">DependencyGraph</a> &amp;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a4e4a07e7e6126471b70b8f4793fb7af7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4e4a07e7e6126471b70b8f4793fb7af7">&#9670;&nbsp;</a></span>operator==</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml">DependencyGraph</a> &amp;&#160;</td>
          <td class="paramname"><em>g0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml">DependencyGraph</a> &amp;&#160;</td>
          <td class="paramname"><em>g1</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Strict equality comparison (all internal ids and order of insertion matter). </p>
<p>In the future this may be replaced with a topological comparison, allowing equivalent graphs with different internal ids to be equal</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g0</td><td></td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">g1</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true If the same </dd>
<dd>
false Otherwise </dd></dl>

<p class="definition">Definition at line <a class="el" href="_dependency_graph_8h_source.xhtml#l00268">268</a> of file <a class="el" href="_dependency_graph_8h_source.xhtml">DependencyGraph.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    {</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        <span class="comment">// Do not compare id allocators</span></div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        <span class="keywordflow">return</span> std::make_tuple(g0._adj_src_tensors, g0._adj_dst_tensors, g0._adj_src_ops, g0._adj_dst_ops) ==</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;               std::make_tuple(g1._adj_src_tensors, g1._adj_dst_tensors, g1._adj_src_ops, g1._adj_dst_ops);</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    }</div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>src/dynamic_fusion/sketch/utils/<a class="el" href="_dependency_graph_8h_source.xhtml">DependencyGraph.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="a_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_a4fa2090ba4e0caf4aa74327e9962511b"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a4fa2090ba4e0caf4aa74327e9962511b">arm_compute::experimental::dynamic_fusion::DependencyGraph::add_operator</a></div><div class="ttdeci">bool add_operator(OperatorId op, const std::vector&lt; TensorId &gt; &amp;inputs, const std::vector&lt; TensorId &gt; &amp;outputs, bool is_output=false)</div><div class="ttdoc">Add a new operator Return invalid if it violates the DAG invariant Invalid operation will not change ...</div><div class="ttdef"><b>Definition:</b> <a href="_dependency_graph_8h_source.xhtml#l00191">DependencyGraph.h:191</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_a02b701633ac4981fdb5f19394c94caf9"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a02b701633ac4981fdb5f19394c94caf9">arm_compute::experimental::dynamic_fusion::DependencyGraph::global_src_tensors</a></div><div class="ttdeci">std::vector&lt; TensorId &gt; global_src_tensors() const</div><div class="ttdoc">Get source tensors of the whole graph.</div><div class="ttdef"><b>Definition:</b> <a href="_dependency_graph_8h_source.xhtml#l00297">DependencyGraph.h:297</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00151">Error.h:151</a></div></div>
<div class="ttc" id="a_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00067">ClWorkloadRuntime.cpp:67</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1mlgo_1_1parser_xhtml_a9fe67a1da3e2628bade473115ecbb5be"><div class="ttname"><a href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">arm_compute::mlgo::parser::end</a></div><div class="ttdeci">void end(TokenStream &amp;in, bool &amp;valid)</div><div class="ttdef"><b>Definition:</b> <a href="_m_l_g_o_parser_8cpp_source.xhtml#l00283">MLGOParser.cpp:283</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1experimental.xhtml">experimental</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml">dynamic_fusion</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml">DependencyGraph</a></li>
    <li class="footer">Generated on Fri Jul 26 2024 12:08:33 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
