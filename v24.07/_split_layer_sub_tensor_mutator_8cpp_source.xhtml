<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/graph/mutators/SplitLayerSubTensorMutator.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.07</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_split_layer_sub_tensor_mutator_8cpp_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">SplitLayerSubTensorMutator.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_split_layer_sub_tensor_mutator_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2018-2020 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_split_layer_sub_tensor_mutator_8h.xhtml">arm_compute/graph/mutators/SplitLayerSubTensorMutator.h</a>&quot;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160; </div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_topological_sort_8h.xhtml">arm_compute/graph/algorithms/TopologicalSort.h</a>&quot;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_backend_registry_8h.xhtml">arm_compute/graph/backends/BackendRegistry.h</a>&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="graph_2_graph_8h.xhtml">arm_compute/graph/Graph.h</a>&quot;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="graph_2_logger_8h.xhtml">arm_compute/graph/Logger.h</a>&quot;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_split_layer_node_8h.xhtml">arm_compute/graph/nodes/SplitLayerNode.h</a>&quot;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2graph_2_utils_8h.xhtml">arm_compute/graph/Utils.h</a>&quot;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160; </div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_cast_8h.xhtml">support/Cast.h</a>&quot;</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_iterable_8h.xhtml">support/Iterable.h</a>&quot;</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160; </div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">namespace </span>graph</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div>
<div class="line"><a name="l00040"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1_split_layer_sub_tensor_mutator.xhtml#a0ee2c922a45715b33e30f83f8c005b68">   40</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="classarm__compute_1_1graph_1_1_split_layer_sub_tensor_mutator.xhtml#a0ee2c922a45715b33e30f83f8c005b68">SplitLayerSubTensorMutator::name</a>()</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keywordflow">return</span> <span class="stringliteral">&quot;SplitLayerSubTensorMutator&quot;</span>;</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;}</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160; </div>
<div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1_split_layer_sub_tensor_mutator.xhtml#ae8dc84fc3eb9c937069826830b13b06d">   45</a></span>&#160;<a class="code" href="classarm__compute_1_1graph_1_1_i_graph_mutator.xhtml#a15c294efeadfdffb6b0735dd93aedfd9">IGraphMutator::MutationType</a> <a class="code" href="classarm__compute_1_1graph_1_1_split_layer_sub_tensor_mutator.xhtml#ae8dc84fc3eb9c937069826830b13b06d">SplitLayerSubTensorMutator::type</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_graph_mutator.xhtml#a15c294efeadfdffb6b0735dd93aedfd9a2e427c268ac1768b9add94b65e2d6c14">IGraphMutator::MutationType::Backend</a>;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;}</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160; </div>
<div class="line"><a name="l00050"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1_split_layer_sub_tensor_mutator.xhtml#af6705a49326de235df4e9b6028bdcdce">   50</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1graph_1_1_split_layer_sub_tensor_mutator.xhtml#af6705a49326de235df4e9b6028bdcdce">SplitLayerSubTensorMutator::mutate</a>(<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g)</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;{</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="comment">// Early exit if no Split layers exist in graph</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordflow">if</span> (g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a8a979250f01a5edba059a02748b10ea3">nodes</a>(<a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16af2ee14b628c0a45e1682de8f33983dc1">NodeType::SplitLayer</a>).empty())</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    {</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    }</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160; </div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="comment">// Perform topological sort</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    std::vector&lt;NodeID&gt; topological_sorted_node_ids = <a class="code" href="namespacearm__compute_1_1graph.xhtml#a14abdeb0f575e919aa6d586a95f23920">dfs</a>(g);</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160; </div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="comment">// Should be in reverse order of execution</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;node_id : <a class="code" href="namespacearm__compute_1_1utils_1_1iterable.xhtml#ad093dbcab3409be5ca29a73556df5290">arm_compute::utils::iterable::reverse_iterate</a>(topological_sorted_node_ids))</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    {</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> *node = g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#af8baf1f3da6d42a94d0569395ece882a">node</a>(node_id);</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="keywordflow">if</span> (node != <span class="keyword">nullptr</span> &amp;&amp; node-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a6b2d83e561886647467f86c20ce39bec">type</a>() == <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16af2ee14b628c0a45e1682de8f33983dc1">NodeType::SplitLayer</a> &amp;&amp; node-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0) != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        {</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            <span class="comment">// Get output tensor</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            <a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml">Tensor</a> *input_tensor = node-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">input</a>(0);</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160; </div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            <span class="comment">// Check that all tensor have the same target and are valid</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            <span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7b1d0df736739f38994ed29f54cffdf3">is_valid</a> = std::all_of(node-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a74e6b1e9d4924f2fb12baed6a432d3a5">outputs</a>().cbegin(), node-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a74e6b1e9d4924f2fb12baed6a432d3a5">outputs</a>().cend(),</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                                        [&amp;](<span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a615af95e19b5d9f74d2760183566a9a3">TensorID</a> &amp;tid) {</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                                            return (g.tensor(tid) != nullptr) &amp;&amp;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                                                   (g.tensor(tid)-&gt;desc().target == input_tensor-&gt;desc().target);</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                                        });</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160; </div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            <span class="comment">// Create subtensors</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7b1d0df736739f38994ed29f54cffdf3">is_valid</a> &amp;&amp; <a class="code" href="namespacearm__compute_1_1graph.xhtml#a6fd498c55b126dc3f078d38e8528effb">is_target_supported</a>(input_tensor-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml#add5d19cbee93d3d134f88d02e1259248">desc</a>().<a class="code" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml#a2a7ca82c5e74421cb45f17e936abf964">target</a>))</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            {</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                <a class="code" href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a>(<span class="stringliteral">&quot;Using sub-tensors for the node with ID : &quot;</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                                              &lt;&lt; node-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5ea90a25ef8059df2d2e51b82991ebf3">id</a>() &lt;&lt; <span class="stringliteral">&quot; and name : &quot;</span> &lt;&lt; node-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>() &lt;&lt; std::endl);</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160; </div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                <span class="keyword">auto</span> *split_node = arm_compute::utils::cast::polymorphic_downcast&lt;SplitLayerNode *&gt;(node);</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160; </div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span>          axis          = split_node-&gt;axis();</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_splits    = split_node-&gt;num_splits();</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">bool</span>         extend_parent = (axis &lt; 2);</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160; </div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                <span class="comment">// Create sub-tensor handles</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; node-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a74e6b1e9d4924f2fb12baed6a432d3a5">outputs</a>().size(); ++i)</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                {</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                    <a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml">Tensor</a>           *output_tensor = node-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">output</a>(i);</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>  = output_tensor-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml#add5d19cbee93d3d134f88d02e1259248">desc</a>().<a class="code" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">shape</a>;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                    <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>       coords;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                    std::tie(std::ignore, coords) =</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                        split_node-&gt;compute_output_descriptor(input_tensor-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml#add5d19cbee93d3d134f88d02e1259248">desc</a>(), num_splits, axis, i);</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160; </div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                    <a class="code" href="classarm__compute_1_1graph_1_1backends_1_1_i_device_backend.xhtml">backends::IDeviceBackend</a> &amp;backend =</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                        <a class="code" href="classarm__compute_1_1graph_1_1backends_1_1_backend_registry.xhtml#a1f3feffc5bf8a42636b0e5d4f5160041">backends::BackendRegistry::get</a>().<a class="code" href="classarm__compute_1_1graph_1_1backends_1_1_backend_registry.xhtml#a0e2e9eb7cf2545949ea4130d768bea93">get_backend</a>(output_tensor-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml#add5d19cbee93d3d134f88d02e1259248">desc</a>().<a class="code" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml#a2a7ca82c5e74421cb45f17e936abf964">target</a>);</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                    std::unique_ptr&lt;ITensorHandle&gt; handle =</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                        backend.<a class="code" href="classarm__compute_1_1graph_1_1backends_1_1_i_device_backend.xhtml#af8e71170f6e62ea5e6fefab95380a01b">create_subtensor</a>(input_tensor-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml#a45c1ef0023ce430d009ec79c97761544">handle</a>(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>, coords, extend_parent);</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                    output_tensor-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml#a8c1a8dc99f338372d7dc6dd33672ec03">set_handle</a>(std::move(handle));</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                }</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            }</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        }</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    }</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;}</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;} <span class="comment">// namespace graph</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;} <span class="comment">// namespace arm_compute</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="a_cast_8h_xhtml"><div class="ttname"><a href="_cast_8h.xhtml">Cast.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_split_layer_sub_tensor_mutator_xhtml_af6705a49326de235df4e9b6028bdcdce"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_split_layer_sub_tensor_mutator.xhtml#af6705a49326de235df4e9b6028bdcdce">arm_compute::graph::SplitLayerSubTensorMutator::mutate</a></div><div class="ttdeci">virtual void mutate(Graph &amp;g) override</div><div class="ttdoc">Walk the graph and perform a specific mutation.</div><div class="ttdef"><b>Definition:</b> <a href="_split_layer_sub_tensor_mutator_8cpp_source.xhtml#l00050">SplitLayerSubTensorMutator.cpp:50</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_tensor_xhtml_a8c1a8dc99f338372d7dc6dd33672ec03"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_tensor.xhtml#a8c1a8dc99f338372d7dc6dd33672ec03">arm_compute::graph::Tensor::set_handle</a></div><div class="ttdeci">void set_handle(std::unique_ptr&lt; ITensorHandle &gt; backend_tensor)</div><div class="ttdoc">Sets the backend tensor.</div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_tensor_8cpp_source.xhtml#l00050">Tensor.cpp:50</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_i_graph_mutator_xhtml_a15c294efeadfdffb6b0735dd93aedfd9"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_graph_mutator.xhtml#a15c294efeadfdffb6b0735dd93aedfd9">arm_compute::graph::IGraphMutator::MutationType</a></div><div class="ttdeci">MutationType</div><div class="ttdoc">Mutation type.</div><div class="ttdef"><b>Definition:</b> <a href="_i_graph_mutator_8h_source.xhtml#l00039">IGraphMutator.h:39</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_split_layer_sub_tensor_mutator_xhtml_a0ee2c922a45715b33e30f83f8c005b68"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_split_layer_sub_tensor_mutator.xhtml#a0ee2c922a45715b33e30f83f8c005b68">arm_compute::graph::SplitLayerSubTensorMutator::name</a></div><div class="ttdeci">const char * name() override</div><div class="ttdoc">Returns mutator name.</div><div class="ttdef"><b>Definition:</b> <a href="_split_layer_sub_tensor_mutator_8cpp_source.xhtml#l00040">SplitLayerSubTensorMutator.cpp:40</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1utils_1_1iterable_xhtml_ad093dbcab3409be5ca29a73556df5290"><div class="ttname"><a href="namespacearm__compute_1_1utils_1_1iterable.xhtml#ad093dbcab3409be5ca29a73556df5290">arm_compute::utils::iterable::reverse_iterate</a></div><div class="ttdeci">reverse_iterable&lt; T &gt; reverse_iterate(T &amp;val)</div><div class="ttdoc">Creates a reverse iterable for a given type.</div><div class="ttdef"><b>Definition:</b> <a href="_iterable_8h_source.xhtml#l00100">Iterable.h:100</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_aaae4098f0f54b97f23d99be335c459ad"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">arm_compute::test::validation::output_shape</a></div><div class="ttdeci">TensorShape output_shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00469">LSTMLayerQuantized.cpp:469</a></div></div>
<div class="ttc" id="a_topological_sort_8h_xhtml"><div class="ttname"><a href="_topological_sort_8h.xhtml">TopologicalSort.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml">arm_compute::TensorShape</a></div><div class="ttdoc">Shape of a tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00039">TensorShape.h:39</a></div></div>
<div class="ttc" id="a_split_layer_node_8h_xhtml"><div class="ttname"><a href="_split_layer_node_8h.xhtml">SplitLayerNode.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1backends_1_1_i_device_backend_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1backends_1_1_i_device_backend.xhtml">arm_compute::graph::backends::IDeviceBackend</a></div><div class="ttdoc">Device backend interface.</div><div class="ttdef"><b>Definition:</b> <a href="_i_device_backend_8h_source.xhtml#l00048">IDeviceBackend.h:48</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_tensor_xhtml_add5d19cbee93d3d134f88d02e1259248"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_tensor.xhtml#add5d19cbee93d3d134f88d02e1259248">arm_compute::graph::Tensor::desc</a></div><div class="ttdeci">TensorDescriptor &amp; desc()</div><div class="ttdoc">TensorInfo metadata accessor.</div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_tensor_8cpp_source.xhtml#l00040">Tensor.cpp:40</a></div></div>
<div class="ttc" id="a_split_layer_sub_tensor_mutator_8h_xhtml"><div class="ttname"><a href="_split_layer_sub_tensor_mutator_8h.xhtml">SplitLayerSubTensorMutator.h</a></div></div>
<div class="ttc" id="a_iterable_8h_xhtml"><div class="ttname"><a href="_iterable_8h.xhtml">Iterable.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_i_node_xhtml_a27369471d9b2ba47746e1e923f585b9f"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a27369471d9b2ba47746e1e923f585b9f">arm_compute::graph::INode::output</a></div><div class="ttdeci">Tensor * output(size_t idx) const</div><div class="ttdoc">Returns the tensor of a given output of the node.</div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00158">INode.cpp:158</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_i_node_xhtml_a74e6b1e9d4924f2fb12baed6a432d3a5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a74e6b1e9d4924f2fb12baed6a432d3a5">arm_compute::graph::INode::outputs</a></div><div class="ttdeci">const std::vector&lt; TensorID &gt; &amp; outputs() const</div><div class="ttdoc">Returns outputs of the node.</div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00122">INode.cpp:122</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_tensor.xhtml">arm_compute::graph::Tensor</a></div><div class="ttdoc">Tensor object.</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_tensor_8h_source.xhtml#l00040">Tensor.h:40</a></div></div>
<div class="ttc" id="agraph_2_logger_8h_xhtml_a300d153929a99c7b571d4cda3f7987a5"><div class="ttname"><a href="graph_2_logger_8h.xhtml#a300d153929a99c7b571d4cda3f7987a5">ARM_COMPUTE_LOG_GRAPH_VERBOSE</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_GRAPH_VERBOSE(x)</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_logger_8h_source.xhtml#l00050">Logger.h:50</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a7b1d0df736739f38994ed29f54cffdf3"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a7b1d0df736739f38994ed29f54cffdf3">arm_compute::test::validation::is_valid</a></div><div class="ttdeci">bool is_valid</div><div class="ttdef"><b>Definition:</b> <a href="_direct_conv2d_8cpp_source.xhtml#l00173">DirectConv2d.cpp:173</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_i_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml">arm_compute::graph::INode</a></div><div class="ttdoc">Node interface.</div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8h_source.xhtml#l00046">INode.h:46</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_tensor_xhtml_a45c1ef0023ce430d009ec79c97761544"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_tensor.xhtml#a45c1ef0023ce430d009ec79c97761544">arm_compute::graph::Tensor::handle</a></div><div class="ttdeci">ITensorHandle * handle()</div><div class="ttdoc">Backend tensor handle accessor.</div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_tensor_8cpp_source.xhtml#l00055">Tensor.cpp:55</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_i_node_xhtml_a1d89c28bd42ba9a52da008bb69367171"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1d89c28bd42ba9a52da008bb69367171">arm_compute::graph::INode::name</a></div><div class="ttdeci">std::string name() const</div><div class="ttdoc">Returns node's name.</div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00107">INode.cpp:107</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_a14abdeb0f575e919aa6d586a95f23920"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a14abdeb0f575e919aa6d586a95f23920">arm_compute::graph::dfs</a></div><div class="ttdeci">std::vector&lt; NodeID &gt; dfs(Graph &amp;g)</div><div class="ttdoc">Depth first search traversal.</div><div class="ttdef"><b>Definition:</b> <a href="_topological_sort_8cpp_source.xhtml#l00127">TopologicalSort.cpp:127</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_a6fd498c55b126dc3f078d38e8528effb"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a6fd498c55b126dc3f078d38e8528effb">arm_compute::graph::is_target_supported</a></div><div class="ttdeci">bool is_target_supported(Target target)</div><div class="ttdoc">Checks if a specific target is supported.</div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_utils_8cpp_source.xhtml#l00034">Utils.cpp:34</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_i_graph_mutator_xhtml_a15c294efeadfdffb6b0735dd93aedfd9a2e427c268ac1768b9add94b65e2d6c14"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_graph_mutator.xhtml#a15c294efeadfdffb6b0735dd93aedfd9a2e427c268ac1768b9add94b65e2d6c14">arm_compute::graph::IGraphMutator::MutationType::Backend</a></div><div class="ttdeci">@ Backend</div><div class="ttdoc">IR specific mutation.</div></div>
<div class="ttc" id="astructarm__compute_1_1graph_1_1_tensor_descriptor_xhtml_a1fcd64682b37ed3c2098d0094ce788d8"><div class="ttname"><a href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">arm_compute::graph::TensorDescriptor::shape</a></div><div class="ttdeci">TensorShape shape</div><div class="ttdoc">Tensor shape.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_descriptor_8h_source.xhtml#l00113">TensorDescriptor.h:113</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16af2ee14b628c0a45e1682de8f33983dc1"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16af2ee14b628c0a45e1682de8f33983dc1">arm_compute::graph::NodeType::SplitLayer</a></div><div class="ttdeci">@ SplitLayer</div></div>
<div class="ttc" id="aclassarm__compute_1_1_coordinates_xhtml"><div class="ttname"><a href="classarm__compute_1_1_coordinates.xhtml">arm_compute::Coordinates</a></div><div class="ttdoc">Coordinates of an item.</div><div class="ttdef"><b>Definition:</b> <a href="_coordinates_8h_source.xhtml#l00037">Coordinates.h:37</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_split_layer_sub_tensor_mutator_xhtml_ae8dc84fc3eb9c937069826830b13b06d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_split_layer_sub_tensor_mutator.xhtml#ae8dc84fc3eb9c937069826830b13b06d">arm_compute::graph::SplitLayerSubTensorMutator::type</a></div><div class="ttdeci">MutationType type() const override</div><div class="ttdoc">Returns mutation type.</div><div class="ttdef"><b>Definition:</b> <a href="_split_layer_sub_tensor_mutator_8cpp_source.xhtml#l00045">SplitLayerSubTensorMutator.cpp:45</a></div></div>
<div class="ttc" id="a_backend_registry_8h_xhtml"><div class="ttname"><a href="_backend_registry_8h.xhtml">BackendRegistry.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_i_node_xhtml_a6b2d83e561886647467f86c20ce39bec"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a6b2d83e561886647467f86c20ce39bec">arm_compute::graph::INode::type</a></div><div class="ttdeci">virtual NodeType type() const =0</div><div class="ttdoc">Returns node's type.</div></div>
<div class="ttc" id="agraph_2_logger_8h_xhtml"><div class="ttname"><a href="graph_2_logger_8h.xhtml">Logger.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_graph_xhtml_af8baf1f3da6d42a94d0569395ece882a"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml#af8baf1f3da6d42a94d0569395ece882a">arm_compute::graph::Graph::node</a></div><div class="ttdeci">const INode * node(NodeID id) const</div><div class="ttdoc">Get node object given its id.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_8cpp_source.xhtml#l00208">Graph.cpp:208</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1backends_1_1_i_device_backend_xhtml_af8e71170f6e62ea5e6fefab95380a01b"><div class="ttname"><a href="classarm__compute_1_1graph_1_1backends_1_1_i_device_backend.xhtml#af8e71170f6e62ea5e6fefab95380a01b">arm_compute::graph::backends::IDeviceBackend::create_subtensor</a></div><div class="ttdeci">virtual std::unique_ptr&lt; ITensorHandle &gt; create_subtensor(ITensorHandle *parent, TensorShape shape, Coordinates coords, bool extend_parent)=0</div><div class="ttdoc">Create a backend Sub-Tensor.</div></div>
<div class="ttc" id="astructarm__compute_1_1graph_1_1_tensor_descriptor_xhtml_a2a7ca82c5e74421cb45f17e936abf964"><div class="ttname"><a href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml#a2a7ca82c5e74421cb45f17e936abf964">arm_compute::graph::TensorDescriptor::target</a></div><div class="ttdeci">Target target</div><div class="ttdoc">Target.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_descriptor_8h_source.xhtml#l00117">TensorDescriptor.h:117</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2024 Arm Limited.</div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_i_node_xhtml_ad7c09b0faaf3c808b0489012204852a9"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#ad7c09b0faaf3c808b0489012204852a9">arm_compute::graph::INode::input</a></div><div class="ttdeci">Tensor * input(size_t idx) const</div><div class="ttdoc">Returns the tensor of a given input of the node.</div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00150">INode.cpp:150</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_graph_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml">arm_compute::graph::Graph</a></div><div class="ttdoc">Graph class.</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_graph_8h_source.xhtml#l00052">Graph.h:52</a></div></div>
<div class="ttc" id="aarm__compute_2graph_2_utils_8h_xhtml"><div class="ttname"><a href="arm__compute_2graph_2_utils_8h.xhtml">Utils.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1backends_1_1_backend_registry_xhtml_a0e2e9eb7cf2545949ea4130d768bea93"><div class="ttname"><a href="classarm__compute_1_1graph_1_1backends_1_1_backend_registry.xhtml#a0e2e9eb7cf2545949ea4130d768bea93">arm_compute::graph::backends::BackendRegistry::get_backend</a></div><div class="ttdeci">IDeviceBackend &amp; get_backend(Target target)</div><div class="ttdoc">Get a backend from the registry.</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00050">BackendRegistry.cpp:50</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_i_node_xhtml_a5ea90a25ef8059df2d2e51b82991ebf3"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5ea90a25ef8059df2d2e51b82991ebf3">arm_compute::graph::INode::id</a></div><div class="ttdeci">NodeID id() const</div><div class="ttdoc">Returns node's ID.</div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00102">INode.cpp:102</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_graph_xhtml_a8a979250f01a5edba059a02748b10ea3"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml#a8a979250f01a5edba059a02748b10ea3">arm_compute::graph::Graph::nodes</a></div><div class="ttdeci">const std::vector&lt; NodeID &gt; &amp; nodes(NodeType type)</div><div class="ttdoc">Returns graph input nodes.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_8cpp_source.xhtml#l00178">Graph.cpp:178</a></div></div>
<div class="ttc" id="agraph_2_graph_8h_xhtml"><div class="ttname"><a href="graph_2_graph_8h.xhtml">Graph.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_a615af95e19b5d9f74d2760183566a9a3"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a615af95e19b5d9f74d2760183566a9a3">arm_compute::graph::TensorID</a></div><div class="ttdeci">unsigned int TensorID</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00071">Types.h:71</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1backends_1_1_backend_registry_xhtml_a1f3feffc5bf8a42636b0e5d4f5160041"><div class="ttname"><a href="classarm__compute_1_1graph_1_1backends_1_1_backend_registry.xhtml#a1f3feffc5bf8a42636b0e5d4f5160041">arm_compute::graph::backends::BackendRegistry::get</a></div><div class="ttdeci">static BackendRegistry &amp; get()</div><div class="ttdoc">Gets backend registry instance.</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00038">BackendRegistry.cpp:38</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_d182250f0c231765fc862e69db210731.xhtml">graph</a></li><li class="navelem"><a class="el" href="dir_1b9e532a4c8623825d945e964c6e4c7f.xhtml">mutators</a></li><li class="navelem"><a class="el" href="_split_layer_sub_tensor_mutator_8cpp.xhtml">SplitLayerSubTensorMutator.cpp</a></li>
    <li class="footer">Generated on Fri Jul 26 2024 12:08:23 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
