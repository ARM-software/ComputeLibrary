<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: tests/validation/reference/GEMMLowp.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('reference_2_g_e_m_m_lowp_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">GEMMLowp.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="reference_2_g_e_m_m_lowp_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017-2020 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_g_e_m_m_lowp_8h.xhtml">GEMMLowp.h</a>&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_types_8h.xhtml">arm_compute/core/Types.h</a>&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_utils_quantized_asymm_8h.xhtml">tests/validation/reference/UtilsQuantizedAsymm.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_toolchain_support_8h.xhtml">support/ToolchainSupport.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;limits&gt;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">namespace </span>test</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">namespace </span>validation</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="keyword">namespace </span>reference</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keyword">namespace</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keyword">struct </span>DataTypeExtractor</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;{</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keyword">static</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>()</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    {</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a> = <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a696b031073e74bf2cb98e5ef201d4aa3">DataType::UNKNOWN</a>;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="keywordflow">if</span>(std::is_same&lt;T, int8_t&gt;::value)</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        {</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;            data_type = <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">DataType::QASYMM8_SIGNED</a>;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        }</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(std::is_same&lt;T, uint8_t&gt;::value)</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        {</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            data_type = <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        }</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(std::is_same&lt;T, int16_t&gt;::value)</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        {</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            data_type = <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">DataType::QSYMM16</a>;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        }</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    }</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;};</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> TIn, <span class="keyword">typename</span> TOut&gt;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="keywordtype">void</span> quantize_down_scale(<span class="keyword">const</span> SimpleTensor&lt;TIn&gt; *in, <span class="keyword">const</span> SimpleTensor&lt;TIn&gt; *<a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, SimpleTensor&lt;TOut&gt; *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, int32_t result_offset, std::vector&lt;int32_t&gt; result_mult_int,</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                         std::vector&lt;int32_t&gt; result_shift, int32_t min, int32_t max)</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;{</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  cols_in        = in-&gt;shape().x();</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_per_channel = result_mult_int.size() &gt; 1;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="preprocessor">#if defined(_OPENMP)</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="preprocessor">    #pragma omp parallel for</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* _OPENMP */</span><span class="preprocessor"></span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in-&gt;num_elements(); ++i)</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    {</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        int32_t result = ((*in)[i] + result_offset);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <span class="keywordflow">if</span>(bias != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        {</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            result += (*bias)[i % cols_in];</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        }</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        result *= (is_per_channel) ? result_mult_int[i % cols_in] : result_mult_int[0];</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        result &gt;&gt;= (is_per_channel) ? result_shift[i % cols_in] : result_shift[0];</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <span class="comment">// Bounded ReLu</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <span class="keywordflow">if</span>(min != max)</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        {</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            result = std::max(min, std::min(max, result));</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        }</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        (*dst)[i] = <span class="keyword">static_cast&lt;</span>TOut<span class="keyword">&gt;</span>(std::max&lt;TIn&gt;(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;TOut&gt;::lowest</a>(),</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                                                    std::min&lt;TIn&gt;(std::numeric_limits&lt;TOut&gt;::max(), result)));</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    }</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;}</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> TIn, <span class="keyword">typename</span> TOut&gt;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aeba431de7aa296356e936e9c39a569c8">quantize_down_scale_by_fixedpoint</a>(<span class="keyword">const</span> SimpleTensor&lt;TIn&gt; *in, <span class="keyword">const</span> SimpleTensor&lt;TIn&gt; *bias, SimpleTensor&lt;TOut&gt; *dst, std::vector&lt;int32_t&gt; result_fixedpoint_multiplier,</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                                       std::vector&lt;int32_t&gt; result_shift, int32_t result_offset_after_shift, int32_t min, int32_t max)</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;{</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  cols_in        = in-&gt;shape().x();</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_per_channel = result_fixedpoint_multiplier.size() &gt; 1;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="preprocessor">#if defined(_OPENMP)</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="preprocessor">    #pragma omp parallel for</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* _OPENMP */</span><span class="preprocessor"></span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in-&gt;num_elements(); ++i)</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    {</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        TIn result = (*in)[i];</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="keywordflow">if</span>(bias != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        {</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            result += (*bias)[i % cols_in];</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        }</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        <span class="comment">// Fixed point multiplication</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <span class="keyword">const</span> int32_t multiplier = (is_per_channel) ? result_fixedpoint_multiplier[i % cols_in] : result_fixedpoint_multiplier[0];</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <span class="keyword">const</span> int32_t shift      = (is_per_channel) ? result_shift[i % cols_in] : result_shift[0];</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        <span class="keywordflow">if</span>(shift &lt; 0)</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        {</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            result = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aea27abcd3d58d627282320dfdd213596">asymm_int_mult</a>(result * (1 &lt;&lt; (-shift)), multiplier);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        }</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        {</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            result = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5bab95cbeb5c6bf05049df7afd32d823">asymm_rounding_divide_by_pow2</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aea27abcd3d58d627282320dfdd213596">asymm_int_mult</a>(result, multiplier), shift);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        }</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        result += result_offset_after_shift;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <span class="comment">// Bounded ReLu</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <span class="keywordflow">if</span>(min != max)</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        {</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            result = std::max(min, std::min(max, result));</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        }</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        (*dst)[i] = <span class="keyword">static_cast&lt;</span>TOut<span class="keyword">&gt;</span>(std::max&lt;TIn&gt;(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;TOut&gt;::lowest</a>(),</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                                                    std::min&lt;TIn&gt;(std::numeric_limits&lt;TOut&gt;::max(), result)));</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    }</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;}</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> TIn, <span class="keyword">typename</span> TOut&gt;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="keywordtype">void</span> quantize_down_scale_by_float(<span class="keyword">const</span> SimpleTensor&lt;TIn&gt; *in, <span class="keyword">const</span> SimpleTensor&lt;TIn&gt; *bias, SimpleTensor&lt;TOut&gt; *dst, std::vector&lt;float_t&gt; result_real_multiplier,</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                                  int32_t result_offset, int32_t min, int32_t max)</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;{</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  cols_in        = in-&gt;shape().x();</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_per_channel = result_real_multiplier.size() &gt; 1;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="preprocessor">#if defined(_OPENMP)</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="preprocessor">    #pragma omp parallel for</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* _OPENMP */</span><span class="preprocessor"></span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; in-&gt;num_elements(); ++i)</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    {</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        TIn result = (*in)[i];</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <span class="keywordflow">if</span>(bias != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        {</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            result += (*bias)[i % cols_in];</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        }</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <span class="comment">// Float multiplication</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <span class="keyword">const</span> float_t multiplier = (is_per_channel) ? result_real_multiplier[i % cols_in] : result_real_multiplier[0];</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        float_t result_f = <span class="keyword">static_cast&lt;</span>float_t<span class="keyword">&gt;</span>(result) * multiplier + static_cast&lt;float_t&gt;(result_offset);</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        result           = <span class="keyword">static_cast&lt;</span>TIn<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ab71c35ca207b916a9f8b0336ab88484e">support::cpp11::round</a>(result_f));</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        <span class="comment">// Bounded ReLu</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="keywordflow">if</span>(min != max)</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        {</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            result = std::max(min, std::min(max, result));</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        }</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        (*dst)[i] = <span class="keyword">static_cast&lt;</span>TOut<span class="keyword">&gt;</span>(std::max&lt;TIn&gt;(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;TOut&gt;::lowest</a>(),</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                                                    std::min&lt;TIn&gt;(std::numeric_limits&lt;TOut&gt;::max(), result)));</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    }</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;}</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;} <span class="comment">// namespace</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T_out, <span class="keyword">typename</span> T_in, <span class="keyword">typename</span> T_in_1&gt;</div><div class="line"><a name="l00181"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a855559383c5926d018e2f780a63050a8">  181</a></span>&#160;<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T_out&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a855559383c5926d018e2f780a63050a8">gemmlowp_matrix_multiply_core</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T_in&gt;</a> &amp;a, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T_in_1&gt;</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> shape_c, int32_t a_offset, int32_t b_offset)</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;{</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    static_assert(std::is_same&lt;<span class="keyword">typename</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">std::decay&lt;T_out&gt;::type</a>, int32_t&gt;::value, <span class="stringliteral">&quot;Only int32_t is allowed for the output&quot;</span>);</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>            <a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a> = std::is_same&lt;T_out, int32_t&gt;::value ? <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a> : <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">DataType::U32</a>;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T_out&gt;</a> c(shape_c, dt);</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a42247993f81d6a8f73d2e0cb805c663b">K</a> = a.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().x();</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a68dc0bf731afd0463b8e8cc4ed81c0f8">M</a> = a.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().y();</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ae8b170dcb376fe60270f4675f84e4477">N</a> = b.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().x();</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> D = a.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().z(); <span class="comment">// Number of matrices in a batch</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> a_stride_z = K * <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a68dc0bf731afd0463b8e8cc4ed81c0f8">M</a>;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="comment">// Do not slide the matrix B along the 3rd dimension in case matrix B has less than 3 dimensions</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> b_stride_z = b.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().num_dimensions() &gt; 2 ? N * <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a42247993f81d6a8f73d2e0cb805c663b">K</a> : 0;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> c_stride_z = N * <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a68dc0bf731afd0463b8e8cc4ed81c0f8">M</a>;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    std::vector&lt;T_out&gt; acc;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    acc.resize(N);</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> depth = 0; depth &lt; D; ++depth)</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    {</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> base_addr_a = depth * a_stride_z;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> base_addr_b = depth * b_stride_z;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> base_addr_c = depth * c_stride_z;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a68dc0bf731afd0463b8e8cc4ed81c0f8">M</a>; ++i)</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        {</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j = 0; j &lt; <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ae8b170dcb376fe60270f4675f84e4477">N</a>; ++j)</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            {</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                acc[j] = 0;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            }</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a> = 0; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a> &lt; <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a42247993f81d6a8f73d2e0cb805c663b">K</a>; ++<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a>)</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            {</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                <span class="keyword">const</span> T_out tmp_a = a_offset + <span class="keyword">static_cast&lt;</span>T_out<span class="keyword">&gt;</span>(a[base_addr_a + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a> + i * <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a42247993f81d6a8f73d2e0cb805c663b">K</a>]);</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j = 0; j &lt; <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ae8b170dcb376fe60270f4675f84e4477">N</a>; ++j)</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                {</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                    <span class="keyword">const</span> T_out tmp_b       = b_offset + <span class="keyword">static_cast&lt;</span>T_out<span class="keyword">&gt;</span>(b[base_addr_b + j + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">k</a> * <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ae8b170dcb376fe60270f4675f84e4477">N</a>]);</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                    <span class="keyword">const</span> T_out mult_as_int = tmp_a * tmp_b;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                    acc[j] += mult_as_int;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                }</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;            }</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j = 0; j &lt; <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ae8b170dcb376fe60270f4675f84e4477">N</a>; ++j)</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;            {</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                c[base_addr_c + j + i * <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ae8b170dcb376fe60270f4675f84e4477">N</a>] = acc[j];</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            }</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        }</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    }</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="keywordflow">return</span> c;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;}</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="comment">// used to validate assembly kernels which don&#39;t know anything about offsets</span></div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2, <span class="keyword">typename</span> T3&gt;</div><div class="line"><a name="l00235"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6f53995c189821e40cefceb87513ffa4">  235</a></span>&#160;<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T1&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6f53995c189821e40cefceb87513ffa4">gemmlowp</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T2&gt;</a> &amp;a, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T3&gt;</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> shape_c)</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;{</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="keywordflow">return</span> gemmlowp_matrix_multiply_core&lt;T1, T2, T3&gt;(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, shape_c, 0, 0);</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;}</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> TIn, <span class="keyword">typename</span> TOut&gt;</div><div class="line"><a name="l00241"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a46d87b59de10d14019d82682936fcb72">  241</a></span>&#160;<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;TOut&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a46d87b59de10d14019d82682936fcb72">gemmlowp_quantize_down_scale</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;TIn&gt;</a> &amp;in, int32_t result_offset, std::vector&lt;int32_t&gt; result_mult_int, std::vector&lt;int32_t&gt; result_shift,</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                                                int32_t min, int32_t max)</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;{</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;TOut&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>(in.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">DataTypeExtractor&lt;TOut&gt;::data_type</a>());</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    quantize_down_scale&lt;TIn, TOut&gt;(&amp;in, <span class="keyword">nullptr</span>, &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, result_offset, result_mult_int, result_shift, min, max);</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;}</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> TIn, <span class="keyword">typename</span> TOut&gt;</div><div class="line"><a name="l00252"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aa3cb182ade2ddd106f688d1892876a0b">  252</a></span>&#160;<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;TOut&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a46d87b59de10d14019d82682936fcb72">gemmlowp_quantize_down_scale</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;TIn&gt;</a> &amp;in, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;TIn&gt;</a> &amp;bias, int32_t result_offset, std::vector&lt;int32_t&gt; result_mult_int,</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                                                std::vector&lt;int32_t&gt; result_shift, int32_t min, int32_t max)</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;{</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;TOut&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>(in.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">DataTypeExtractor&lt;TOut&gt;::data_type</a>());</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    quantize_down_scale&lt;TIn, TOut&gt;(&amp;in, &amp;<a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, result_offset, result_mult_int, result_shift, min, max);</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;}</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> TIn, <span class="keyword">typename</span> TOut&gt;</div><div class="line"><a name="l00263"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#afc20df3bafb985ea3722b47b48dbb135">  263</a></span>&#160;<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;TOut&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#afc20df3bafb985ea3722b47b48dbb135">gemmlowp_quantize_down_scale_by_fixedpoint</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;TIn&gt;</a> &amp;in, std::vector&lt;int32_t&gt; result_fixedpoint_multiplier, std::vector&lt;int32_t&gt; result_shift,</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                                                              int32_t result_offset_after_shift, int32_t min, int32_t max)</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;{</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;TOut&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>(in.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">DataTypeExtractor&lt;TOut&gt;::data_type</a>());</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    quantize_down_scale_by_fixedpoint&lt;TIn, TOut&gt;(&amp;in, <span class="keyword">nullptr</span>, &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, result_fixedpoint_multiplier, result_shift, result_offset_after_shift, min, max);</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;}</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> TIn, <span class="keyword">typename</span> TOut&gt;</div><div class="line"><a name="l00274"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a66413f62c4b74b6e10833778ace09001">  274</a></span>&#160;<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;TOut&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#afc20df3bafb985ea3722b47b48dbb135">gemmlowp_quantize_down_scale_by_fixedpoint</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;TIn&gt;</a> &amp;in, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;TIn&gt;</a> &amp;bias, std::vector&lt;int32_t&gt; result_fixedpoint_multiplier,</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                                                              std::vector&lt;int32_t&gt; result_shift, int32_t result_offset_after_shift, int32_t min, int32_t max)</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;{</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;TOut&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>(in.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">DataTypeExtractor&lt;TOut&gt;::data_type</a>());</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    quantize_down_scale_by_fixedpoint&lt;TIn, TOut&gt;(&amp;in, &amp;<a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, result_fixedpoint_multiplier, result_shift, result_offset_after_shift, min, max);</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;}</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> TIn, <span class="keyword">typename</span> TOut&gt;</div><div class="line"><a name="l00285"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#ad101a129b7d578b3abe6f79d1151526e">  285</a></span>&#160;<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;TOut&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#ad101a129b7d578b3abe6f79d1151526e">gemmlowp_quantize_down_scale_by_float</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;TIn&gt;</a> &amp;in, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;TIn&gt;</a> &amp;bias,</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                                                         std::vector&lt;float_t&gt; result_real_multiplier, int32_t result_offset, int32_t min, int32_t max)</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;{</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;TOut&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>(in.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">DataTypeExtractor&lt;TOut&gt;::data_type</a>());</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    quantize_down_scale_by_float&lt;TIn, TOut&gt;(&amp;in, &amp;<a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, result_real_multiplier, result_offset, min, max);</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;}</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> TIn, <span class="keyword">typename</span> TOut&gt;</div><div class="line"><a name="l00296"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a4b20cb8ea2fd8d04e21d0221ff24e677">  296</a></span>&#160;<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;TOut&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#ad101a129b7d578b3abe6f79d1151526e">gemmlowp_quantize_down_scale_by_float</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;TIn&gt;</a> &amp;in,</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                                                         std::vector&lt;float_t&gt; result_real_multiplier, int32_t result_offset, int32_t min, int32_t max)</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;{</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;TOut&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>(in.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">DataTypeExtractor&lt;TOut&gt;::data_type</a>());</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    quantize_down_scale_by_float&lt;TIn, TOut&gt;(&amp;in, <span class="keyword">nullptr</span>, &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, result_real_multiplier, result_offset, min, max);</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>;</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;}</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<span class="keyword">template</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;uint8_t&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#ad101a129b7d578b3abe6f79d1151526e">gemmlowp_quantize_down_scale_by_float</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int32_t&gt;</a> &amp;a, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int32_t&gt;</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>,</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                                                                     std::vector&lt;float_t&gt; result_real_multiplier, int32_t result_offset, int32_t min, int32_t max);</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="keyword">template</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;uint8_t&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#ad101a129b7d578b3abe6f79d1151526e">gemmlowp_quantize_down_scale_by_float</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int32_t&gt;</a> &amp;a,</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                                                                     std::vector&lt;float_t&gt; result_real_multiplier, int32_t result_offset, int32_t min, int32_t max);</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="keyword">template</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int8_t&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#ad101a129b7d578b3abe6f79d1151526e">gemmlowp_quantize_down_scale_by_float</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int32_t&gt;</a> &amp;a, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int32_t&gt;</a> &amp;b,</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                                                                    std::vector&lt;float_t&gt; result_real_multiplier, int32_t result_offset, int32_t min, int32_t max);</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="keyword">template</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int8_t&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#ad101a129b7d578b3abe6f79d1151526e">gemmlowp_quantize_down_scale_by_float</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int32_t&gt;</a> &amp;a,</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                                                                    std::vector&lt;float_t&gt; result_real_multiplier, int32_t result_offset, int32_t min, int32_t max);</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="keyword">template</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;uint8_t&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#afc20df3bafb985ea3722b47b48dbb135">gemmlowp_quantize_down_scale_by_fixedpoint</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int32_t&gt;</a> &amp;a, std::vector&lt;int32_t&gt; result_fixedpoint_multiplier,</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                                                                          std::vector&lt;int32_t&gt; result_shift, int32_t result_offset_after_shift, int32_t min, int32_t max);</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="keyword">template</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;uint8_t&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#afc20df3bafb985ea3722b47b48dbb135">gemmlowp_quantize_down_scale_by_fixedpoint</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int32_t&gt;</a> &amp;a, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int32_t&gt;</a> &amp;b,</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                                                                          std::vector&lt;int32_t&gt; result_fixedpoint_multiplier,</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                                                                          std::vector&lt;int32_t&gt; result_shift, int32_t result_offset_after_shift, int32_t min, int32_t max);</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="keyword">template</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int8_t&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#afc20df3bafb985ea3722b47b48dbb135">gemmlowp_quantize_down_scale_by_fixedpoint</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int32_t&gt;</a> &amp;a, std::vector&lt;int32_t&gt; result_fixedpoint_multiplier,</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                                                                         std::vector&lt;int32_t&gt; result_shift, int32_t result_offset_after_shift, int32_t min, int32_t max);</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="keyword">template</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int8_t&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#afc20df3bafb985ea3722b47b48dbb135">gemmlowp_quantize_down_scale_by_fixedpoint</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int32_t&gt;</a> &amp;a, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int32_t&gt;</a> &amp;b,</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;                                                                         std::vector&lt;int32_t&gt; result_fixedpoint_multiplier,</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;                                                                         std::vector&lt;int32_t&gt; result_shift, int32_t result_offset_after_shift, int32_t min, int32_t max);</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;<span class="keyword">template</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int16_t&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#afc20df3bafb985ea3722b47b48dbb135">gemmlowp_quantize_down_scale_by_fixedpoint</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int32_t&gt;</a> &amp;a, std::vector&lt;int32_t&gt; result_fixedpoint_multiplier,</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                                                                          std::vector&lt;int32_t&gt; result_shift, int32_t result_offset_after_shift, int32_t min, int32_t max);</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;<span class="keyword">template</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int16_t&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#afc20df3bafb985ea3722b47b48dbb135">gemmlowp_quantize_down_scale_by_fixedpoint</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int32_t&gt;</a> &amp;a, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int32_t&gt;</a> &amp;b,</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                                                                          std::vector&lt;int32_t&gt; result_fixedpoint_multiplier,</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;                                                                          std::vector&lt;int32_t&gt; result_shift, int32_t result_offset_after_shift, int32_t min, int32_t max);</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="keyword">template</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;uint8_t&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a46d87b59de10d14019d82682936fcb72">gemmlowp_quantize_down_scale</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int32_t&gt;</a> &amp;a, int32_t result_offset, std::vector&lt;int32_t&gt; result_mult_int,</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                                                            std::vector&lt;int32_t&gt; result_shift, int32_t min, int32_t max);</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="keyword">template</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;uint8_t&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a46d87b59de10d14019d82682936fcb72">gemmlowp_quantize_down_scale</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int32_t&gt;</a> &amp;a, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int32_t&gt;</a> &amp;b, int32_t result_offset, std::vector&lt;int32_t&gt; result_mult_int,</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                                                            std::vector&lt;int32_t&gt; result_shift, int32_t min, int32_t max);</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;<span class="keyword">template</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int8_t&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a46d87b59de10d14019d82682936fcb72">gemmlowp_quantize_down_scale</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int32_t&gt;</a> &amp;a, int32_t result_offset, std::vector&lt;int32_t&gt; result_mult_int,</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                                                           std::vector&lt;int32_t&gt; result_shift, int32_t min, int32_t max);</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;<span class="keyword">template</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int8_t&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a46d87b59de10d14019d82682936fcb72">gemmlowp_quantize_down_scale</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int32_t&gt;</a> &amp;a, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int32_t&gt;</a> &amp;b, int32_t result_offset, std::vector&lt;int32_t&gt; result_mult_int,</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                                                           std::vector&lt;int32_t&gt; result_shift, int32_t min, int32_t max);</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;<span class="keyword">template</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int32_t&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a855559383c5926d018e2f780a63050a8">gemmlowp_matrix_multiply_core</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int8_t&gt;</a> &amp;a, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int8_t&gt;</a> &amp;b, <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> shape_c, int32_t a_offset, int32_t b_offset);</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;<span class="keyword">template</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int32_t&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a855559383c5926d018e2f780a63050a8">gemmlowp_matrix_multiply_core</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;uint8_t&gt;</a> &amp;a, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;uint8_t&gt;</a> &amp;b, <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> shape_c, int32_t a_offset, int32_t b_offset);</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;<span class="keyword">template</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int32_t&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a487791e3341381ea63f13b6fa49cab31">gemmlowp&lt;int32_t, int8_t, int8_t&gt;</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int8_t&gt;</a> &amp;a, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int8_t&gt;</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> shape_c);</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;<span class="keyword">template</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int32_t&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#abdab47b801c5215fae4062f415c69095">gemmlowp&lt;int32_t, uint8_t, uint8_t&gt;</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;uint8_t&gt;</a> &amp;a, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;uint8_t&gt;</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> shape_c);</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;<span class="keyword">template</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int32_t&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a1314a167983a67f7d439771b183434ee">gemmlowp&lt;int32_t, uint8_t, int8_t&gt;</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;uint8_t&gt;</a> &amp;a, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int8_t&gt;</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> shape_c);</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;} <span class="comment">// namespace reference</span></div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;} <span class="comment">// namespace validation</span></div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;} <span class="comment">// namespace test</span></div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a5bab95cbeb5c6bf05049df7afd32d823"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a5bab95cbeb5c6bf05049df7afd32d823">arm_compute::test::validation::asymm_rounding_divide_by_pow2</a></div><div class="ttdeci">int32_t asymm_rounding_divide_by_pow2(int32_t x, int exponent)</div><div class="ttdoc">Rounded to nearest division by a power-of-two. </div><div class="ttdef"><b>Definition:</b> <a href="_utils_quantized_asymm_8h_source.xhtml#l00052">UtilsQuantizedAsymm.h:52</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_a6f53995c189821e40cefceb87513ffa4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6f53995c189821e40cefceb87513ffa4">arm_compute::test::validation::reference::gemmlowp</a></div><div class="ttdeci">SimpleTensor&lt; T1 &gt; gemmlowp(const SimpleTensor&lt; T2 &gt; &amp;a, const SimpleTensor&lt; T3 &gt; &amp;b, TensorShape shape_c)</div><div class="ttdef"><b>Definition:</b> <a href="reference_2_g_e_m_m_lowp_8cpp_source.xhtml#l00235">GEMMLowp.cpp:235</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml">arm_compute::TensorShape</a></div><div class="ttdoc">Shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00039">TensorShape.h:39</a></div></div>
<div class="ttc" id="_toolchain_support_8h_xhtml"><div class="ttname"><a href="_toolchain_support_8h.xhtml">ToolchainSupport.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">arm_compute::DataType::QSYMM16</a></div><div class="ttdoc">quantized, symmetric fixed-point 16-bit number </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_a487791e3341381ea63f13b6fa49cab31"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a487791e3341381ea63f13b6fa49cab31">arm_compute::test::validation::reference::gemmlowp&lt; int32_t, int8_t, int8_t &gt;</a></div><div class="ttdeci">template SimpleTensor&lt; int32_t &gt; gemmlowp&lt; int32_t, int8_t, int8_t &gt;(const SimpleTensor&lt; int8_t &gt; &amp;a, const SimpleTensor&lt; int8_t &gt; &amp;b, TensorShape shape_c)</div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_a1314a167983a67f7d439771b183434ee"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a1314a167983a67f7d439771b183434ee">arm_compute::test::validation::reference::gemmlowp&lt; int32_t, uint8_t, int8_t &gt;</a></div><div class="ttdeci">template SimpleTensor&lt; int32_t &gt; gemmlowp&lt; int32_t, uint8_t, int8_t &gt;(const SimpleTensor&lt; uint8_t &gt; &amp;a, const SimpleTensor&lt; int8_t &gt; &amp;b, TensorShape shape_c)</div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="_cpu_gemm_assembly_dispatch_8cpp_xhtml_a68dc0bf731afd0463b8e8cc4ed81c0f8"><div class="ttname"><a href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a68dc0bf731afd0463b8e8cc4ed81c0f8">M</a></div><div class="ttdeci">unsigned int M</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00055">CpuGemmAssemblyDispatch.cpp:55</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_aba5871b3e4a65d057ec1c28fce8b00ba"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">arm_compute::test::SimpleTensor::shape</a></div><div class="ttdeci">TensorShape shape() const override</div><div class="ttdoc">Shape of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00320">SimpleTensor.h:320</a></div></div>
<div class="ttc" id="gemm__interleaved_8hpp_xhtml_a6fbca3dca9ecb372332fc525529cc086"><div class="ttname"><a href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></div><div class="ttdeci">decltype(strategy::transforms) typedef type</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00259">gemm_interleaved.hpp:259</a></div></div>
<div class="ttc" id="_n_e_batch_normalization_layer_kernel_8cpp_xhtml_aa36901a4911e511f25f42e191df3526d"><div class="ttname"><a href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a></div><div class="ttdeci">DataType dt</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00051">NEBatchNormalizationLayerKernel.cpp:51</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_a73e352c61baaf9c1178da2d30105b04e"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">arm_compute::support::cpp11::lowest</a></div><div class="ttdeci">T lowest()</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00277">ToolchainSupport.h:277</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2022 Arm Limited. </div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::Format::S32</a></div><div class="ttdoc">1 channel, 1 S32 per channel </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aea27abcd3d58d627282320dfdd213596"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aea27abcd3d58d627282320dfdd213596">arm_compute::test::validation::asymm_int_mult</a></div><div class="ttdeci">int32_t asymm_int_mult(int32_t a, int32_t b)</div><div class="ttdoc">Multiplication of two integers. </div><div class="ttdef"><b>Definition:</b> <a href="_utils_quantized_asymm_8h_source.xhtml#l00060">UtilsQuantizedAsymm.h:60</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">arm_compute::Format::U32</a></div><div class="ttdoc">1 channel, 1 U32 per channel </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">arm_compute::DataType::QASYMM8</a></div><div class="ttdoc">quantized, asymmetric fixed-point 8-bit number unsigned </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_abdab47b801c5215fae4062f415c69095"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#abdab47b801c5215fae4062f415c69095">arm_compute::test::validation::reference::gemmlowp&lt; int32_t, uint8_t, uint8_t &gt;</a></div><div class="ttdeci">template SimpleTensor&lt; int32_t &gt; gemmlowp&lt; int32_t, uint8_t, uint8_t &gt;(const SimpleTensor&lt; uint8_t &gt; &amp;a, const SimpleTensor&lt; uint8_t &gt; &amp;b, TensorShape shape_c)</div></div>
<div class="ttc" id="_cpu_gemm_assembly_dispatch_8cpp_xhtml_ae8b170dcb376fe60270f4675f84e4477"><div class="ttname"><a href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ae8b170dcb376fe60270f4675f84e4477">N</a></div><div class="ttdeci">unsigned int N</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00056">CpuGemmAssemblyDispatch.cpp:56</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="_utils_quantized_asymm_8h_xhtml"><div class="ttname"><a href="_utils_quantized_asymm_8h.xhtml">UtilsQuantizedAsymm.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aeba431de7aa296356e936e9c39a569c8"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aeba431de7aa296356e936e9c39a569c8">arm_compute::test::validation::quantize_down_scale_by_fixedpoint</a></div><div class="ttdeci">int32_t quantize_down_scale_by_fixedpoint(int32_t val, int32_t result_mult_int, int32_t result_shift, int32_t result_offset_after_shift, int32_t min, int32_t max)</div><div class="ttdoc">Quantize down the input value in range [min, max]. </div><div class="ttdef"><b>Definition:</b> <a href="_utils_quantized_asymm_8h_source.xhtml#l00072">UtilsQuantizedAsymm.h:72</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a73aa59d7b088082ec257a1c65edbf1d0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a73aa59d7b088082ec257a1c65edbf1d0">arm_compute::test::validation::k</a></div><div class="ttdeci">const unsigned int k</div><div class="ttdef"><b>Definition:</b> <a href="_g_e_m_m_matrix_multiply_native_8cpp_source.xhtml#l00361">GEMMMatrixMultiplyNative.cpp:361</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">arm_compute::test::SimpleTensor</a></div><div class="ttdoc">Simple tensor object that stores elements in a consecutive chunk of memory. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00058">SimpleTensor.h:58</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3a696b031073e74bf2cb98e5ef201d4aa3"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a696b031073e74bf2cb98e5ef201d4aa3">arm_compute::GPUTarget::UNKNOWN</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_ab71c35ca207b916a9f8b0336ab88484e"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ab71c35ca207b916a9f8b0336ab88484e">arm_compute::support::cpp11::round</a></div><div class="ttdeci">T round(T value)</div><div class="ttdoc">Round floating-point value with half value rounding away from zero. </div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00184">ToolchainSupport.h:184</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_afc20df3bafb985ea3722b47b48dbb135"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#afc20df3bafb985ea3722b47b48dbb135">arm_compute::test::validation::reference::gemmlowp_quantize_down_scale_by_fixedpoint</a></div><div class="ttdeci">SimpleTensor&lt; TOut &gt; gemmlowp_quantize_down_scale_by_fixedpoint(const SimpleTensor&lt; TIn &gt; &amp;in, std::vector&lt; int32_t &gt; result_fixedpoint_multiplier, std::vector&lt; int32_t &gt; result_shift, int32_t result_offset_after_shift, int32_t min, int32_t max)</div><div class="ttdef"><b>Definition:</b> <a href="reference_2_g_e_m_m_lowp_8cpp_source.xhtml#l00263">GEMMLowp.cpp:263</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">arm_compute::DataType::QASYMM8_SIGNED</a></div><div class="ttdoc">quantized, asymmetric fixed-point 8-bit number signed </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a5f5b6c4337eac9e2e0046ca2304d80dc"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">arm_compute::test::validation::data_type</a></div><div class="ttdeci">data_type</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_cast_8cpp_source.xhtml#l00203">Cast.cpp:203</a></div></div>
<div class="ttc" id="arm__compute_2core_2_types_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">arm_compute::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdoc">Available data types. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00079">Types.h:79</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_ad101a129b7d578b3abe6f79d1151526e"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#ad101a129b7d578b3abe6f79d1151526e">arm_compute::test::validation::reference::gemmlowp_quantize_down_scale_by_float</a></div><div class="ttdeci">SimpleTensor&lt; TOut &gt; gemmlowp_quantize_down_scale_by_float(const SimpleTensor&lt; TIn &gt; &amp;in, const SimpleTensor&lt; TIn &gt; &amp;bias, std::vector&lt; float_t &gt; result_real_multiplier, int32_t result_offset, int32_t min, int32_t max)</div><div class="ttdef"><b>Definition:</b> <a href="reference_2_g_e_m_m_lowp_8cpp_source.xhtml#l00285">GEMMLowp.cpp:285</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_a855559383c5926d018e2f780a63050a8"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a855559383c5926d018e2f780a63050a8">arm_compute::test::validation::reference::gemmlowp_matrix_multiply_core</a></div><div class="ttdeci">SimpleTensor&lt; T_out &gt; gemmlowp_matrix_multiply_core(const SimpleTensor&lt; T_in &gt; &amp;a, const SimpleTensor&lt; T_in_1 &gt; &amp;b, TensorShape shape_c, int32_t a_offset, int32_t b_offset)</div><div class="ttdef"><b>Definition:</b> <a href="reference_2_g_e_m_m_lowp_8cpp_source.xhtml#l00181">GEMMLowp.cpp:181</a></div></div>
<div class="ttc" id="_g_e_m_m_lowp_8h_xhtml"><div class="ttname"><a href="_g_e_m_m_lowp_8h.xhtml">GEMMLowp.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_a46d87b59de10d14019d82682936fcb72"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a46d87b59de10d14019d82682936fcb72">arm_compute::test::validation::reference::gemmlowp_quantize_down_scale</a></div><div class="ttdeci">SimpleTensor&lt; TOut &gt; gemmlowp_quantize_down_scale(const SimpleTensor&lt; TIn &gt; &amp;in, int32_t result_offset, std::vector&lt; int32_t &gt; result_mult_int, std::vector&lt; int32_t &gt; result_shift, int32_t min, int32_t max)</div><div class="ttdef"><b>Definition:</b> <a href="reference_2_g_e_m_m_lowp_8cpp_source.xhtml#l00241">GEMMLowp.cpp:241</a></div></div>
<div class="ttc" id="working__space_8hpp_xhtml_a1fb7b822a92dd3ab6e7ab15c67b0ff9e"><div class="ttname"><a href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a></div><div class="ttdeci">const int32_t * bias</div><div class="ttdef"><b>Definition:</b> <a href="working__space_8hpp_source.xhtml#l00292">working_space.hpp:292</a></div></div>
<div class="ttc" id="_cpu_gemm_assembly_dispatch_8cpp_xhtml_a42247993f81d6a8f73d2e0cb805c663b"><div class="ttname"><a href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a42247993f81d6a8f73d2e0cb805c663b">K</a></div><div class="ttdeci">unsigned int K</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00057">CpuGemmAssemblyDispatch.cpp:57</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="dir_e7c7b16542faa38cb4655ff1750d3604.xhtml">validation</a></li><li class="navelem"><a class="el" href="dir_46fdb196cebdbffe77dac340cde62f29.xhtml">reference</a></li><li class="navelem"><a class="el" href="reference_2_g_e_m_m_lowp_8cpp.xhtml">GEMMLowp.cpp</a></li>
    <li class="footer">Generated on Thu Aug 18 2022 12:57:41 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
