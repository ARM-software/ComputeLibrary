<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/experimental/dynamic_fusion/ClKernelBuildingImpl/Common.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Common.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2022 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifdef ENABLE_EXPERIMENTAL_DYNAMIC_FUSION</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_EXPERIMENTAL_DYNAMICFUSION_IMPL_COMMON_H</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#define ARM_COMPUTE_EXPERIMENTAL_DYNAMICFUSION_IMPL_COMMON_H</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_c_l_2_c_l_compile_context_8h.xhtml">arm_compute/core/CL/CLCompileContext.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_c_l_2_c_l_kernel_library_8h.xhtml">arm_compute/core/CL/CLKernelLibrary.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_error_8h.xhtml">arm_compute/core/Error.h</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_g_p_u_target_8h.xhtml">arm_compute/core/GPUTarget.h</a>&quot;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="src_2core_2common_2_macros_8h.xhtml">src/core/common/Macros.h</a>&quot;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_requires_8h.xhtml">support/Requires.h</a>&quot;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_string_support_8h.xhtml">support/StringSupport.h</a>&quot;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_cl_kernel_building_a_p_i_8h.xhtml">src/core/experimental/dynamic_fusion/ClKernelBuildingAPI.h</a>&quot;</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#include &lt;queue&gt;</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor">#include &lt;stack&gt;</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor">#include &lt;unordered_set&gt;</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="keyword">namespace </span>experimental</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;{</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="keyword">namespace </span>dynamic_fusion</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;{<span class="comment"></span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment">/** We introduce the concept of *Shared Variables* in the context of kernel building.</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment"> *  They are variables that can be accessed / shared among all the kernel components within a single kernel.</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment"> *  For now we consider 2 groups of shared variables:</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment"> *      Argument: The argument variables (parameters) of a kernel</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment"> *      Automatic: The automatic variables declared inside a kernel</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment"> *  All Shared Variables have the same kernel scope, and are thus visible to all kernel components</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">*/</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a72fd310d933d46bd03b9d33fbb283ee9">   59</a></span>&#160;<span class="keyword">enum class</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a72fd310d933d46bd03b9d33fbb283ee9">SharedVarIO</a></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;{</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a72fd310d933d46bd03b9d33fbb283ee9a324118a6721dd6b8a9b9f4e327df2bf5">Input</a>,</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a72fd310d933d46bd03b9d33fbb283ee9a29c2c02a361c9d7028472e5d92cd4a54">Output</a></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;};</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ae4b4b738b88d9f339fa9154f4305f6d4">   65</a></span>&#160;<span class="keyword">enum class</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ae4b4b738b88d9f339fa9154f4305f6d4">SharedVarGroup</a></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;{</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ae4b4b738b88d9f339fa9154f4305f6d4a1853680a6d666b9fea2d789dd00bc7eb">Argument</a>, <span class="comment">// Parameters to a kernel function  == dst or src tensors of the whole blueprint graph</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ae4b4b738b88d9f339fa9154f4305f6d4a086247a9b57fde6eefee2a0c4752242d">Automatic</a> <span class="comment">// Automatic variables declared within the kernel body == intermediate tensors of the whole blueprint graph</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;};</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment">/** Specifies a shared variable link for a component.</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment"> * It describes all the information that&#39;s available when a component is constructed / added:</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment"> *  e.g. its linkage (via ArgumentID and io) and its group</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment"> * This is not shared variable on its own, but is used for instantiating a SharedVar when building the code</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00076"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_link.xhtml">   76</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_link.xhtml">SharedVarLink</a></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;{</div><div class="line"><a name="l00078"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_link.xhtml#a647b7b591b8726421b7b5f45fbe6933a">   78</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a>  arg_id{ g_arg_placeholder };</div><div class="line"><a name="l00079"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_link.xhtml#af0b32f6b1f620559a821272441ffdfbd">   79</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a72fd310d933d46bd03b9d33fbb283ee9">SharedVarIO</a> io{ <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a72fd310d933d46bd03b9d33fbb283ee9a324118a6721dd6b8a9b9f4e327df2bf5">SharedVarIO::Input</a> };</div><div class="line"><a name="l00080"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_link.xhtml#a5a2b7a58dc85678d08752945ff655362">   80</a></span>&#160;    <span class="keywordtype">bool</span>        <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_link.xhtml#a5a2b7a58dc85678d08752945ff655362">is_empty</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <span class="keywordflow">return</span> arg_id == g_arg_placeholder;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    }</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;};</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment">/** A table of all the variables used in the kernel / blueprint</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment"> * Because we limit the DependencyGraph in the blueprint to a Linear Sequence for now, we only allow ** a single global variable (the accumulator) **</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment"> * NOTE: the order they appear in the table is the order of their &quot;declaration&quot; in the component code, and is also their ID</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment"> * NOTE: the variables all have the scope of the full kernel function</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00092"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table.xhtml">   92</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table.xhtml">SharedVarTable</a></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;{</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment">    /** A fully realized SharedVarLink</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00097"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_shared_var.xhtml">   97</a></span>&#160;    <span class="keyword">struct </span><a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_shared_var.xhtml">SharedVar</a></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    {</div><div class="line"><a name="l00099"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_shared_var.xhtml#a647b7b591b8726421b7b5f45fbe6933a">   99</a></span>&#160;        <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a>            arg_id{ g_arg_placeholder };</div><div class="line"><a name="l00100"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_shared_var.xhtml#af0b32f6b1f620559a821272441ffdfbd">  100</a></span>&#160;        <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a72fd310d933d46bd03b9d33fbb283ee9">SharedVarIO</a>           io{ <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a72fd310d933d46bd03b9d33fbb283ee9a324118a6721dd6b8a9b9f4e327df2bf5">SharedVarIO::Input</a> };</div><div class="line"><a name="l00101"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_shared_var.xhtml#a4d98b4bf7a8358656e7de1b33f3999dd">  101</a></span>&#160;        <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ae4b4b738b88d9f339fa9154f4305f6d4">SharedVarGroup</a>        group{ <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ae4b4b738b88d9f339fa9154f4305f6d4a1853680a6d666b9fea2d789dd00bc7eb">SharedVarGroup::Argument</a> };</div><div class="line"><a name="l00102"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_shared_var.xhtml#ac047593b5705ef4a93109e4c7cf879f4">  102</a></span>&#160;        std::string           uniq_name{}; <span class="comment">// Unique name, also the final variable name used in the built code</span></div><div class="line"><a name="l00103"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_shared_var.xhtml#ad45cdfea4355c25b90549fc54f9a57c3">  103</a></span>&#160;        <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_arg_descriptor.xhtml">ClKernelArgDescriptor</a> desc{};      <span class="comment">// Automatic variables can and should still be described using this struct</span></div><div class="line"><a name="l00104"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_shared_var.xhtml#a5a2b7a58dc85678d08752945ff655362">  104</a></span>&#160;        <span class="keywordtype">bool</span>                  <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_shared_var.xhtml#a5a2b7a58dc85678d08752945ff655362">is_empty</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="keyword">        </span>{</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            <span class="keywordflow">return</span> arg_id == g_arg_placeholder;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        }</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    };</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_arguments.xhtml">  110</a></span>&#160;    <span class="keyword">class </span><a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_arguments.xhtml">Arguments</a></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    {</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keyword">public</span>:</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_arguments.xhtml">Arguments</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00114"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_arguments.xhtml#a78746fcc6d51fd49e96ed4a1db357a5a">  114</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_arguments.xhtml#a78746fcc6d51fd49e96ed4a1db357a5a">add_var</a>(<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_shared_var.xhtml">SharedVar</a> &amp;var)</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        {</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(var.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_shared_var.xhtml#a4d98b4bf7a8358656e7de1b33f3999dd">group</a> != <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ae4b4b738b88d9f339fa9154f4305f6d4a1853680a6d666b9fea2d789dd00bc7eb">SharedVarGroup::Argument</a>);</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            _vars.push_back(var);</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        }</div><div class="line"><a name="l00119"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_arguments.xhtml#a0ddc1695f6a02dbed6ed93e787bea98c">  119</a></span>&#160;        std::vector&lt;SharedVar&gt; <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_arguments.xhtml#a0ddc1695f6a02dbed6ed93e787bea98c">get_all_vars</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="keyword">        </span>{</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            <span class="keywordflow">return</span> _vars;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        }</div><div class="line"><a name="l00123"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_arguments.xhtml#abaad0f8194c662ce167ee15d5edcb92d">  123</a></span>&#160;        std::vector&lt;SharedVar&gt; <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_arguments.xhtml#abaad0f8194c662ce167ee15d5edcb92d">get_src_vars</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="keyword">        </span>{</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            std::vector&lt;SharedVar&gt; src_vars;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            std::copy_if(_vars.begin(), _vars.end(), std::back_inserter(src_vars), [](<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_shared_var.xhtml">SharedVar</a> &amp; var)</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            {</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                <span class="keywordflow">return</span> var.io == <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a72fd310d933d46bd03b9d33fbb283ee9a324118a6721dd6b8a9b9f4e327df2bf5">SharedVarIO::Input</a>;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            });</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            <span class="keywordflow">return</span> src_vars;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        }</div><div class="line"><a name="l00132"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_arguments.xhtml#a29732b4e9d77f1a55c98148a8d5fcca0">  132</a></span>&#160;        <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_shared_var.xhtml">SharedVar</a> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_arguments.xhtml#a29732b4e9d77f1a55c98148a8d5fcca0">get_dst_var</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="keyword">        </span>{</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            std::vector&lt;SharedVar&gt; dst_vars;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            std::copy_if(_vars.begin(), _vars.end(), std::back_inserter(dst_vars), [](<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_shared_var.xhtml">SharedVar</a> &amp; var)</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            {</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                <span class="keywordflow">return</span> var.io == <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a72fd310d933d46bd03b9d33fbb283ee9a29c2c02a361c9d7028472e5d92cd4a54">SharedVarIO::Output</a>;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            });</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(dst_vars.size() != 1);</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            <span class="keywordflow">return</span> dst_vars.at(0);</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        }</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keyword">private</span>:</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        std::vector&lt;SharedVar&gt; _vars{};</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    };</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment">    /** Create a SharedVar for a corresponding SharedVarLink (contains ArgumentID). If one has already been created for the SharedVarLink, simply return it instead of creating a new one</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment">     * @note: The order of insertion is important. There is one precondition:</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment">     *        PRECOND: The components have been sorted topologically / is being traversed in topological order</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment">     *                 This ensures that all the consumer var links (Output, Automatic Links) can consume (return) the producer var links when they&#39;re referred</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00153"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table.xhtml#aaa0377e50e51d555dac6c6adda393c51">  153</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table.xhtml#aaa0377e50e51d555dac6c6adda393c51">add</a>(<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_link.xhtml">SharedVarLink</a> var_link, <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ae4b4b738b88d9f339fa9154f4305f6d4">SharedVarGroup</a> group, <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_arg_descriptor.xhtml">ClKernelArgDescriptor</a> runtime_desc, <span class="keyword">const</span> std::string &amp;<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a> = <span class="stringliteral">&quot;unnamed&quot;</span>)</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    {</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(var_link.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_link.xhtml#a5a2b7a58dc85678d08752945ff655362">is_empty</a>(), <span class="stringliteral">&quot;Non-empty SharedVarLink expected&quot;</span>);</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        <span class="keywordflow">if</span>(!<span class="keyword">get</span>(var_link).is_empty())</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        {</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            <span class="keywordflow">return</span>;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        }</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        <span class="keyword">auto</span>              var_id = _num_var;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        std::stringstream <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a>;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        ss &lt;&lt; <a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a> &lt;&lt; <span class="stringliteral">&quot;_&quot;</span> &lt;&lt; var_id;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> uniq_name = ss.str();</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_shared_var.xhtml">SharedVar</a>  var{ var_link.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_link.xhtml#a647b7b591b8726421b7b5f45fbe6933a">arg_id</a>, var_link.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_link.xhtml#af0b32f6b1f620559a821272441ffdfbd">io</a>, group, uniq_name, runtime_desc };</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <span class="keywordflow">if</span>(group == <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ae4b4b738b88d9f339fa9154f4305f6d4a1853680a6d666b9fea2d789dd00bc7eb">SharedVarGroup::Argument</a>)</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        {</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            _arguments.emplace(var_id, var);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            _arg_id_map.emplace(var_link.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_link.xhtml#a647b7b591b8726421b7b5f45fbe6933a">arg_id</a>, var_id);</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            _num_var++;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        }</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(group == <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ae4b4b738b88d9f339fa9154f4305f6d4a086247a9b57fde6eefee2a0c4752242d">SharedVarGroup::Automatic</a>)</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        {</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            <span class="keywordflow">if</span>(_global_vars.empty())</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            {</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                <span class="keywordflow">if</span>(var_link.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_link.xhtml#af0b32f6b1f620559a821272441ffdfbd">io</a> == <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a72fd310d933d46bd03b9d33fbb283ee9a29c2c02a361c9d7028472e5d92cd4a54">SharedVarIO::Output</a>)</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                {</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                    _global_vars.emplace(var_id, var);</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                    _arg_id_map.emplace(var_link.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_link.xhtml#a647b7b591b8726421b7b5f45fbe6933a">arg_id</a>, var_id);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                    _num_var++;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                }</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                <span class="keywordflow">else</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                {</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                    <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Component likely not traversed in topological order&quot;</span>);</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                }</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            }</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            {</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                <span class="comment">// Associate additional SharedVarLinks with the single global shared variable</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> global_var_id     = _global_vars.begin()-&gt;first;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                _arg_id_map[var_link.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_link.xhtml#a647b7b591b8726421b7b5f45fbe6933a">arg_id</a>] = global_var_id;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            }</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        }</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        {</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unrecognised SharedVarGroup&quot;</span>);</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        }</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    }</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="comment">    /** Get the SharedVar associated with @p var_link</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="comment">     * @param var_link</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="comment">     * @return SharedVar</span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00206"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table.xhtml#a8ea07c1841c26cf6f395ba4b3887bda0">  206</a></span>&#160;    <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_shared_var.xhtml">SharedVar</a> <span class="keyword">get</span>(<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_link.xhtml">SharedVarLink</a> &amp;var_link) <span class="keyword">const</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    {</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_shared_var.xhtml">SharedVar</a> empty_var{};</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        <span class="keywordflow">if</span>(_arg_id_map.find(var_link.arg_id) != _arg_id_map.end())</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        {</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> var_id  = _arg_id_map.at(var_link.arg_id);</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> arg_var = _arguments.find(var_id);</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;            <span class="keywordflow">if</span>(arg_var != _arguments.end())</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            {</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                <span class="keywordflow">return</span> arg_var-&gt;second;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;            }</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;            {</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                <span class="keywordflow">return</span> _global_vars.at(var_id);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            }</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        }</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        <span class="keywordflow">return</span> empty_var;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    }</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="comment">    /** @note The arguments are returned in the order they are added</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00227"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table.xhtml#a5dbf3531a263761c5a5bfae1fd8c4532">  227</a></span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_arguments.xhtml">Arguments</a> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table.xhtml#a5dbf3531a263761c5a5bfae1fd8c4532">get_kernel_arguments</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_arguments.xhtml">Arguments</a> <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>{};</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;a : _arguments)</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        {</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;            <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>.add_var(a.second);</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        }</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    }</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="keyword">using</span> VarID = int32_t;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    std::map&lt;VarID, SharedVar&gt;  _global_vars{}; <span class="comment">// Shared, global variable</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    std::map&lt;VarID, SharedVar&gt;  _arguments{};</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    std::map&lt;ArgumentID, VarID&gt; _arg_id_map{}; <span class="comment">// Track ArgumentIDs that have already been added</span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    VarID _num_var{ 0 };</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;};</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div><div class="line"><a name="l00247"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a81f78fc173dedefe5a049c0aa3eed2c0">  247</a></span>&#160;<span class="keyword">enum class</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a81f78fc173dedefe5a049c0aa3eed2c0">ComponentType</a></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;{</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a81f78fc173dedefe5a049c0aa3eed2c0a1fbb1e3943c2c6c560247ac8f9289780">Simple</a>,</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a81f78fc173dedefe5a049c0aa3eed2c0a10b4eb76294b70d7fd6df997ff06edb1">Complex</a>,</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a81f78fc173dedefe5a049c0aa3eed2c0afdb0c388de01d545017cdf9ccf00eb72">Store</a></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;};</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;</div><div class="line"><a name="l00254"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4e1b7c599411e580eaed97443d281691">  254</a></span>&#160;<span class="keyword">using</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4e1b7c599411e580eaed97443d281691">ComponentID</a>   = <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">DependencyGraph::Id</a>;</div><div class="line"><a name="l00255"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ae13e792ef802118ab6d86fb46fa47e5c">  255</a></span>&#160;<span class="keyword">using</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ae13e792ef802118ab6d86fb46fa47e5c">ComponentList</a> = std::vector&lt;ComponentID&gt;;</div><div class="line"><a name="l00256"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml">  256</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml">IClKernelComponent</a></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;{</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00259"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml#a931be7719b75f96e2fd85c3680581da4">  259</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_link.xhtml">Link</a> = <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_link.xhtml">SharedVarLink</a>;</div><div class="line"><a name="l00260"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml#af037c70dc8c0318e30d3a5138776337e">  260</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml#af037c70dc8c0318e30d3a5138776337e">Tag</a>  = std::string;</div><div class="line"><a name="l00261"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component_1_1_tag_val.xhtml">  261</a></span>&#160;    <span class="keyword">struct </span><a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component_1_1_tag_val.xhtml">TagVal</a></div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    {</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component_1_1_tag_val.xhtml">TagVal</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00264"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component_1_1_tag_val.xhtml#a5a016fbf6b074408f6a7111a0fb93231">  264</a></span>&#160;        <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component_1_1_tag_val.xhtml#a5a016fbf6b074408f6a7111a0fb93231">TagVal</a>(<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_shared_var.xhtml">SharedVarTable::SharedVar</a> &amp;var)</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;            : value{ var.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_shared_var.xhtml#ac047593b5705ef4a93109e4c7cf879f4">uniq_name</a> }</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        {</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        }</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        template &lt;typename T, ARM_COMPUTE_REQUIRES_TA(std::is_integral&lt;T&gt;::value)&gt;</div><div class="line"><a name="l00270"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component_1_1_tag_val.xhtml#addc09ba64e0e45b912867a3cba9a60a8">  270</a></span>&#160;        <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component_1_1_tag_val.xhtml#addc09ba64e0e45b912867a3cba9a60a8">TagVal</a>(T val)</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;            : value{ <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">support::cpp11::to_string</a>(val) }</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        {</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        }</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;</div><div class="line"><a name="l00275"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component_1_1_tag_val.xhtml#a682a983e90ae73571a8293f463ae23a2">  275</a></span>&#160;        <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component_1_1_tag_val.xhtml#a682a983e90ae73571a8293f463ae23a2">TagVal</a>(<span class="keyword">const</span> std::string &amp;val)</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;            : value{ val }</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        {</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        }</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;</div><div class="line"><a name="l00280"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component_1_1_tag_val.xhtml#a533bf9b1130ca50996a6a4f4f5dd1a2d">  280</a></span>&#160;        <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component_1_1_tag_val.xhtml#a533bf9b1130ca50996a6a4f4f5dd1a2d">TagVal</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *val)</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;            : value{ std::string(val) }</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        {</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        }</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;</div><div class="line"><a name="l00285"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component_1_1_tag_val.xhtml#ae7367e75920b6363621b9246bd4d7f13">  285</a></span>&#160;        <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component_1_1_tag_val.xhtml#ae7367e75920b6363621b9246bd4d7f13">TagVal</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>)</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;            : value{ <a class="code" href="namespacearm__compute.xhtml#a545eeda2eaa3f5a54345ce8169e21184">get_cl_type_from_data_type</a>(data_type) }</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        {</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        }</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;</div><div class="line"><a name="l00290"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component_1_1_tag_val.xhtml#a5c33da5929c9f2f9ef8d006d2350e6ec">  290</a></span>&#160;        std::string value{};</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    };</div><div class="line"><a name="l00292"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml#afacfec8193ed701f3646c22bc2d35455">  292</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml#afacfec8193ed701f3646c22bc2d35455">TagLUT</a> = std::unordered_map&lt;Tag, TagVal&gt;; <span class="comment">// Used to instantiating a code template / replacing tags</span></div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00294"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml#a107bc55d669c46d434a9abf6e30515a2">  294</a></span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml#a107bc55d669c46d434a9abf6e30515a2">IClKernelComponent</a>(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint.xhtml">ClKernelBlueprint</a> *blueprint)</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        : _blueprint(blueprint)</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    {</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    }</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <a class="code" href="src_2core_2common_2_macros_8h.xhtml#a0b06d656b020e3d3ac6a001254df0373">ARM_COMPUTE_DISALLOW_COPY_ALLOW_MOVE</a>(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml">IClKernelComponent</a>);</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    <span class="keyword">virtual</span> ~<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml">IClKernelComponent</a>()                        = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a81f78fc173dedefe5a049c0aa3eed2c0">ComponentType</a>     get_component_type() <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    <span class="keyword">virtual</span> std::vector&lt;Link&gt; get_links() <span class="keyword">const</span>          = 0;</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <span class="keyword">virtual</span> std::string       <a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a>() <span class="keyword">const</span>               = 0;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <span class="comment">// @note: some tags can be unused since they could be used only for the macros, or only for the component code</span></div><div class="line"><a name="l00307"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml#a8d7e5e18e2ef94f4e007c2efd7b3b3b0">  307</a></span>&#160;    <span class="keyword">static</span> std::string <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml#a8d7e5e18e2ef94f4e007c2efd7b3b3b0">replace_tags</a>(<span class="keyword">const</span> std::string &amp;code_template, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml#afacfec8193ed701f3646c22bc2d35455">TagLUT</a> &amp;tags)</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    {</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        std::string replaced_code    = <span class="stringliteral">&quot;&quot;</span>;</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        <span class="keywordtype">bool</span>        scanning_pattern = <span class="keyword">false</span>;</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;        std::string pattern_found    = <span class="stringliteral">&quot;&quot;</span>;</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i = 0; i &lt; code_template.size() - 1; ++i)</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;        {</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;            <span class="keywordflow">if</span>(!scanning_pattern)</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;            {</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                <span class="keywordflow">if</span>(code_template[i] == <span class="charliteral">&#39;{&#39;</span> &amp;&amp; code_template[i + 1] == <span class="charliteral">&#39;{&#39;</span>)</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                {</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                    i += 1;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                    scanning_pattern = <span class="keyword">true</span>;</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                    pattern_found    = <span class="stringliteral">&quot;&quot;</span>;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;                }</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;                <span class="keywordflow">else</span></div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;                {</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;                    replaced_code += code_template[i];</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                }</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;            }</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;            {</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;                <span class="keywordflow">if</span>(code_template[i] == <span class="charliteral">&#39;}&#39;</span> &amp;&amp; code_template[i + 1] == <span class="charliteral">&#39;}&#39;</span>)</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                {</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                    i += 1;</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                    scanning_pattern = <span class="keyword">false</span>;</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                    std::string err  = <span class="stringliteral">&quot;Pattern &quot;</span> + pattern_found + <span class="stringliteral">&quot; not found in tags&quot;</span>;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(tags.find(pattern_found) == tags.end(), err.c_str());</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;                    replaced_code += tags.find(pattern_found)-&gt;second.value;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                }</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                <span class="keywordflow">else</span></div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                {</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                    pattern_found += code_template[i];</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                }</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;            }</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;        }</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        <span class="keywordflow">return</span> replaced_code;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    }</div><div class="line"><a name="l00346"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml#a483b1d20313a5ba08f297c610563bdf0">  346</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4e1b7c599411e580eaed97443d281691">ComponentID</a> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml#a483b1d20313a5ba08f297c610563bdf0">id</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        <span class="keywordflow">return</span> _id;</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    }</div><div class="line"><a name="l00350"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml#ac5366eca9a2810f78855d4f1adeeadea">  350</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml#ac5366eca9a2810f78855d4f1adeeadea">set_id</a>(<a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4e1b7c599411e580eaed97443d281691">ComponentID</a> <span class="keywordtype">id</span>)</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    {</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;        _id = id;</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    }</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;</div><div class="line"><a name="l00355"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml#ad7a3eb170866dfc737d0a8842fe47fd1">  355</a></span>&#160;    <span class="keyword">virtual</span> std::set&lt;std::string&gt; <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml#ad7a3eb170866dfc737d0a8842fe47fd1">get_headers_list</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;        <span class="keywordflow">return</span> std::set&lt;std::string&gt; {};</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    }</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;</div><div class="line"><a name="l00360"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml#a65020719815c0344b43b296cc50b10ff">  360</a></span>&#160;    <span class="keyword">virtual</span> std::string <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml#a65020719815c0344b43b296cc50b10ff">get_additional_macros</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        <span class="keywordflow">return</span> <span class="stringliteral">&quot;&quot;</span>;</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    }</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;</div><div class="line"><a name="l00365"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml#aa543fb6fd6b465a9a2b802c858ae4c73">  365</a></span>&#160;    <span class="keyword">virtual</span> std::string <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml#aa543fb6fd6b465a9a2b802c858ae4c73">get_component_code</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;        <span class="keywordflow">return</span> <span class="stringliteral">&quot;&quot;</span>;</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    }</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;</div><div class="line"><a name="l00370"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml#a66df3fbb8781a4dfa011885356e1495f">  370</a></span>&#160;    <span class="keyword">virtual</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml#a66df3fbb8781a4dfa011885356e1495f">get_window</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a>{};</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    }</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;<span class="comment">    /** Get the tag look-up table used to instantiate the component code.</span></div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;<span class="comment">     * @param vtable</span></div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;<span class="comment">     * @return TagLUT</span></div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml#afacfec8193ed701f3646c22bc2d35455">TagLUT</a> get_tag_lut(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table.xhtml">SharedVarTable</a> &amp;vtable) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;<span class="comment">    /** Allocate all shared variables used by the component in the @p vtable</span></div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;<span class="comment">     * @param vtable</span></div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> allocate_shared_vars(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table.xhtml">SharedVarTable</a> &amp;vtable) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;</div><div class="line"><a name="l00388"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml#a917e30e7bb891a89ae186b70d2710981">  388</a></span>&#160;    <span class="keyword">virtual</span> std::string <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml#a917e30e7bb891a89ae186b70d2710981">get_dst_addr_calculation</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;        <span class="keywordflow">return</span> <span class="stringliteral">&quot;&quot;</span>;</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    }</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;<span class="comment">    /** Generate config id of the component</span></div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;<span class="comment">     * @return std::string</span></div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00397"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml#acba60c351708a2b5de270a7c71654c70">  397</a></span>&#160;    <span class="keyword">virtual</span> std::string <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml#acba60c351708a2b5de270a7c71654c70">generate_config_id</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;        <span class="keywordflow">return</span> <span class="stringliteral">&quot;&quot;</span>;</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    }</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;</div><div class="line"><a name="l00402"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml#aa430b05011ebf30749be0c67d32b327f">  402</a></span>&#160;    <span class="keyword">virtual</span> <a class="code" href="classarm__compute_1_1_c_l_build_options.xhtml">CLBuildOptions</a> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml#aa430b05011ebf30749be0c67d32b327f">generate_build_options</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_c_l_build_options.xhtml">CLBuildOptions</a>{};</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    }</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;<span class="keyword">protected</span>:</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint.xhtml">ClKernelBlueprint</a> *_blueprint;</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4e1b7c599411e580eaed97443d281691">ComponentID</a> _id{};</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;};</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;</div><div class="line"><a name="l00414"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a2bd7da02c0f6b7c585eeacec9f377cc8">  414</a></span>&#160;<span class="keyword">using</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a2bd7da02c0f6b7c585eeacec9f377cc8">ComponentUniquePtr</a> = std::unique_ptr&lt;IClKernelComponent&gt;;</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;<span class="comment">/** Intermediate representation of the final, complete kernel source.</span></div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00418"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml">  418</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml">ClKernelBlueprint::Implementation</a></div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;{</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml">Implementation</a>()  = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    ~<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml">Implementation</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00425"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#a2188f04638913931e8ddaa28cbcaff8a">  425</a></span>&#160;    <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#a2188f04638913931e8ddaa28cbcaff8a">update_merge_point</a>(<a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a> t_id, <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a> merge_point)</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    {</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;        <span class="keywordflow">return</span> _graph.update_merge_point(t_id, merge_point);</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    }</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;</div><div class="line"><a name="l00430"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#a9325c903bb3383ac873d701e2d8fca13">  430</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#a9325c903bb3383ac873d701e2d8fca13">add_kernel_tensor</a>(<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *tensor_info, <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a> merge_point = <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aec15c89db50c5cb48154f3e1e56303f1">DependencyGraph::empty_id</a>())</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    {</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> <span class="keywordtype">id</span> = _graph.add_tensor(merge_point);</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;        <span class="keywordflow">if</span>(_kernel_tensors.find(<span class="keywordtype">id</span>) == _kernel_tensors.end())</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;        {</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;            _kernel_tensors.insert(std::make_pair(<span class="keywordtype">id</span>, tensor_info));</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;        }</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;        <span class="keywordflow">return</span> id;</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    }</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;</div><div class="line"><a name="l00440"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#a8827eb95bc1dda1177b1b3c5b21810d6">  440</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#a8827eb95bc1dda1177b1b3c5b21810d6">set_tile_info</a>(<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_tile_descriptor.xhtml">TileDescriptor</a> &amp;tile_info)</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    {</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;        _tile_info = tile_info;</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    }</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;</div><div class="line"><a name="l00445"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#aeb1704732ec18ab12d5d5bc1bf61dd34">  445</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ae4b4b738b88d9f339fa9154f4305f6d4">SharedVarGroup</a> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#aeb1704732ec18ab12d5d5bc1bf61dd34">group</a>(<a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a> arg_id)<span class="keyword"> const</span></div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;        <span class="keywordflow">if</span>(arg_id == g_arg_placeholder)</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;        {</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;            <span class="comment">// In case of placeholder, don&#39;t care what we return;</span></div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ae4b4b738b88d9f339fa9154f4305f6d4a1853680a6d666b9fea2d789dd00bc7eb">SharedVarGroup::Argument</a>;</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;        }</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;        <span class="keywordflow">return</span> _shared_var_group_lut.at(arg_id);</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    }</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;</div><div class="line"><a name="l00455"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#ad62ac5a971e9f5189db0880c31639d6b">  455</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#ad62ac5a971e9f5189db0880c31639d6b">validate_arg_ids</a>(std::initializer_list&lt;ArgumentID&gt; <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)<span class="keyword"> const</span></div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> arg_id : args)</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;        {</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;            <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(arg_id);</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;            <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(_kernel_tensors.find(arg_id) == _kernel_tensors.end() &amp;&amp; arg_id != g_arg_placeholder,</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;                                     <span class="stringliteral">&quot;Trying to use an argument that hasn&#39;t been added to the blueprint&quot;</span>);</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;        }</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    }</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;</div><div class="line"><a name="l00465"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#a651595ab12926c7cccd04fc5323a3b72">  465</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#a651595ab12926c7cccd04fc5323a3b72">add_component</a>(<a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a2bd7da02c0f6b7c585eeacec9f377cc8">ComponentUniquePtr</a> component)</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    {</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;        <span class="keywordflow">if</span>(component-&gt;get_component_type() == <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a81f78fc173dedefe5a049c0aa3eed2c0a10b4eb76294b70d7fd6df997ff06edb1">ComponentType::Complex</a>)</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;        {</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;            ++_num_complex_components;</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;            <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(_num_complex_components &gt; 1, <span class="stringliteral">&quot;Only one complex component per blueprint is supported.&quot;</span>);</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;        }</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;        <span class="comment">// Get an unique ID for the component that&#39;s being added</span></div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;        std::vector&lt;ArgumentID&gt; src_tensors;</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;        std::vector&lt;ArgumentID&gt; dst_tensors;</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;link : component-&gt;get_links())</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;        {</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;            <span class="keywordflow">if</span>(link.is_empty())</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;            {</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;                <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;            }</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;            <span class="keywordflow">if</span>(link.io == <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a72fd310d933d46bd03b9d33fbb283ee9a324118a6721dd6b8a9b9f4e327df2bf5">SharedVarIO::Input</a>)</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;            {</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;                src_tensors.push_back(link.arg_id);</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;            }</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;            {</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;                dst_tensors.push_back(link.arg_id);</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;            }</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;        }</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4e1b7c599411e580eaed97443d281691">ComponentID</a> component_id = _graph.add_operator(src_tensors, dst_tensors).second;</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;        component-&gt;set_id(component_id);</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;        <span class="comment">// Add this component to the component graph. Don&#39;t connect it to anything yet</span></div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;        _component_graph.emplace(component_id, <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ae13e792ef802118ab6d86fb46fa47e5c">ComponentList</a>{});</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;        <span class="comment">// For every { arg_id, arg_io } passed along with this component...</span></div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;link : component-&gt;get_links())</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;        {</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;            <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a> &amp;arg_id = link.arg_id;</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;            <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a72fd310d933d46bd03b9d33fbb283ee9">SharedVarIO</a> &amp;arg_io = link.io;</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;            <span class="comment">// Add the arg_id to the map describing the input/output relationship between an argument and the components that use it, if it doesn&#39;t yet exist there</span></div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;            <span class="keywordflow">if</span>(_outgoing_components.find(arg_id) == _outgoing_components.end())</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;            {</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;                _outgoing_components.emplace(arg_id, <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ae13e792ef802118ab6d86fb46fa47e5c">ComponentList</a>{});</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;                _incoming_components.emplace(arg_id, <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ae13e792ef802118ab6d86fb46fa47e5c">ComponentList</a>{});</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;            }</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;            <span class="comment">// If it&#39;s an input argument, connect any other component that has it as output with this component</span></div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;            <span class="comment">// Additionally, set this component as one that treats this argument as &quot;Input&quot; (append to index 0)</span></div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;            <span class="comment">// This is used so that we keep track of whether two components use the same argument, one as input and one as output</span></div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;            <span class="keywordflow">if</span>(arg_io == <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a72fd310d933d46bd03b9d33fbb283ee9a324118a6721dd6b8a9b9f4e327df2bf5">SharedVarIO::Input</a>)</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;            {</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;                <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;prev_component : _incoming_components[arg_id])</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;                {</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;                    _component_graph[prev_component].push_back(component_id);</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;                }</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;                _outgoing_components[arg_id].push_back(component_id);</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;            }</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;            <span class="comment">// If it&#39;s an output argument, connect this component with any other component that has it as input</span></div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;            <span class="comment">// Additionally, set this component as one that treats this argument as &quot;Output&quot; (append to index 1)</span></div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;            {</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;                <span class="keywordflow">if</span>(component-&gt;get_component_type() == <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a81f78fc173dedefe5a049c0aa3eed2c0afdb0c388de01d545017cdf9ccf00eb72">ComponentType::Store</a>)</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;                {</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;                    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(_dst_id &gt;= 0, <span class="stringliteral">&quot;Trying to add more than one dst argument to the graph&quot;</span>);</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;                    _dst_id = arg_id;</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;                }</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;                <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;subseq_component : _outgoing_components[arg_id])</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;                {</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;                    _component_graph[component_id].push_back(subseq_component);</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;                }</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;                _incoming_components[arg_id].push_back(component_id);</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;            }</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;        }</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;        <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(_graph.get_root_ops().size() != 1, <span class="stringliteral">&quot;Trying to add more than one root to the graph&quot;</span>);</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;        <span class="comment">// Finally, add this component to the dictionary of components</span></div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;        _components.insert(std::make_pair(component_id, std::move(component)));</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;    }</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;</div><div class="line"><a name="l00547"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#add7c7c41451ff9873f64fd90a9636251">  547</a></span>&#160;    std::string <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#add7c7c41451ff9873f64fd90a9636251">build_kernel_name</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;        std::string <a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a> = <span class="stringliteral">&quot;&quot;</span>;</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;        <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a0e5a222683b4e850a681a8b7f593f9c3">traverse</a>([&amp;](std::stack&lt;ComponentID&gt; stack)</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;        {</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;            name += _components.find(stack.top())-&gt;second-&gt;name() + (stack.size() &gt; 2 ? <span class="stringliteral">&quot;___&quot;</span> : <span class="stringliteral">&quot;&quot;</span>);</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;        });</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a>;</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;    }</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;</div><div class="line"><a name="l00559"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#ae9f742e296d136e7b4f5d1efb2eecb46">  559</a></span>&#160;    std::string <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#ae9f742e296d136e7b4f5d1efb2eecb46">build_code</a>()</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;    {</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;        <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(_graph_root == -1, <span class="stringliteral">&quot;No root found in the component graph&quot;</span>);</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;        <span class="comment">// These data structures will hold the data from all the components in the blueprint</span></div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;        std::set&lt;std::string&gt;    headers_list{};</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;        std::set&lt;std::string&gt;    additional_macros{};</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;        std::vector&lt;std::string&gt; component_codes{}; <span class="comment">// vector because order matters</span></div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;        <span class="comment">// Step 1: Allocate all kernel argument shared variables before generating the component code</span></div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;        <span class="keyword">auto</span> stack = topological_sort();</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;        <span class="keywordflow">while</span>(!stack.empty())</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;        {</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;            <span class="keyword">auto</span>  curr_component_id = stack.top();</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;            <span class="keyword">auto</span> &amp;curr_component    = _components.find(curr_component_id)-&gt;second;</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;            curr_component-&gt;allocate_shared_vars(_vtable);</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;            stack.pop();</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;        }</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;        <span class="comment">// Step 2: Generate component codes</span></div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;        stack = topological_sort();</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;        <span class="keywordflow">while</span>(!stack.empty())</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;        {</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;            <span class="keyword">auto</span>  curr_component_id = stack.top();</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;            <span class="keyword">auto</span> &amp;curr_component    = _components.find(curr_component_id)-&gt;second;</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;            <span class="keyword">auto</span>       curr_headers_list      = curr_component-&gt;get_headers_list();</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;            <span class="keyword">auto</span>       curr_additional_macros = curr_component-&gt;get_additional_macros();</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;            <span class="keyword">auto</span>       curr_component_code    = curr_component-&gt;get_component_code();</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> var_lut                = curr_component-&gt;get_tag_lut(_vtable); <span class="comment">// Ideally can be merged with get_component_code once we have finer-grained code generation technique</span></div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;            component_codes.push_back(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml#a8d7e5e18e2ef94f4e007c2efd7b3b3b0">IClKernelComponent::replace_tags</a>(curr_component_code, var_lut));</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;            headers_list.insert(curr_headers_list.begin(), curr_headers_list.end());</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;            <span class="keywordflow">if</span>(!curr_additional_macros.empty()) <span class="comment">// Some components might not have any</span></div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;            {</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;                additional_macros.insert(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml#a8d7e5e18e2ef94f4e007c2efd7b3b3b0">IClKernelComponent::replace_tags</a>(curr_additional_macros, var_lut));</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;            }</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;            stack.pop();</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;        }</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;        <span class="comment">// Step 3: Assemble the data gathered by traversing the graph into the string &quot;code&quot;</span></div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;        std::string code = <span class="stringliteral">&quot;&quot;</span>;</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a723a2d3874520624df4c3214ef0ec420">header</a> : headers_list)</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;        {</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;<span class="preprocessor">#if defined(EMBEDDED_KERNELS)</span></div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;            code += <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">CLKernelLibrary::get</a>().<a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a545c28170311fa375be5684ba6f271bc">get_program</a>(<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a723a2d3874520624df4c3214ef0ec420">header</a>).first;</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;<span class="preprocessor">#else  // defined(EMBEDDED_KERNELS)</span></div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;            code += <span class="stringliteral">&quot;#include \&quot;&quot;</span> + <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a723a2d3874520624df4c3214ef0ec420">header</a> + <span class="stringliteral">&quot;\&quot;\n&quot;</span>;</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;<span class="preprocessor">#endif // defined(EMBEDDED_KERNELS)</span></div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;        }</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;macros : additional_macros)</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;        {</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;            code += macros;</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;        }</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;        code += generate_kernel_signature(_vtable.get_kernel_arguments());</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;        code += <span class="stringliteral">&quot;\n{\n\n&quot;</span>;</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;        code += <span class="stringliteral">&quot;    //------------------ START KERNEL_BUILDER_COORDINATE ---------------------\n\n&quot;</span>;</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;        code += generate_global_section();</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;        code += <span class="stringliteral">&quot;    //------------------ END KERNEL_BUILDER_COORDINATE ---------------------\n&quot;</span>;</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;component_code : component_codes)</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;        {</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;            code += component_code;</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;        }</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;        code += <span class="stringliteral">&quot;}\n&quot;</span>;</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;        <span class="keywordflow">return</span> code;</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    }</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;<span class="comment">    /** Generate config id of the entire kernel</span></div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;<span class="comment">     * Format: kernel_name--comp0_config_id--comp1_config_id--...</span></div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;<span class="comment">     * @return std::string</span></div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00642"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#afa94bb76b13d616fea16c02f0e26ee76">  642</a></span>&#160;    std::string <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#afa94bb76b13d616fea16c02f0e26ee76">build_config_id</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;        std::string config_id = build_kernel_name();</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;        <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a0e5a222683b4e850a681a8b7f593f9c3">traverse</a>([&amp;](std::stack&lt;ComponentID&gt; stack)</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;        {</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;            config_id += <span class="stringliteral">&quot;--&quot;</span> + _components.find(stack.top())-&gt;second-&gt;generate_config_id() + <span class="stringliteral">&quot;--&quot;</span>;</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;        });</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;        <span class="keywordflow">return</span> config_id;</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;    }</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;</div><div class="line"><a name="l00653"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#af00f1ece7a308d6febc1c5a806486e3f">  653</a></span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_build_options.xhtml">CLBuildOptions</a> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#af00f1ece7a308d6febc1c5a806486e3f">build_options</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_build_options.xhtml">CLBuildOptions</a> build_opts{};</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;        <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a0e5a222683b4e850a681a8b7f593f9c3">traverse</a>([&amp;](std::stack&lt;ComponentID&gt; stack)</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;        {</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;            build_opts.add_options(_components.find(stack.top())-&gt;second-&gt;generate_build_options().options());</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;        });</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;        <span class="keywordflow">return</span> build_opts;</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;    }</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;</div><div class="line"><a name="l00665"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#a9128af5d4e167b32ceaf17b22b467062">  665</a></span>&#160;    <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_tile_descriptor.xhtml">TileDescriptor</a> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#a9128af5d4e167b32ceaf17b22b467062">get_tile_info</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;        <span class="keywordflow">return</span> _tile_info;</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;    }</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;    <span class="comment">// Get the global execution window, i.e. that of the root component</span></div><div class="line"><a name="l00671"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#a096db24578aa8c6cf617f8bd1a1f4904">  671</a></span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#a096db24578aa8c6cf617f8bd1a1f4904">get_execution_window</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;        <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(_graph_root == -1, <span class="stringliteral">&quot;No root found in the component graph&quot;</span>);</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;        <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(_dst_id == -1, <span class="stringliteral">&quot;Destination Tensor Id should be ready before calling get_execution_window()&quot;</span>);</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;        <span class="keywordflow">return</span> _components.find(_graph_root)-&gt;second-&gt;get_window();</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;    }</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;</div><div class="line"><a name="l00679"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#af0ee0d43fa2c0c6b0fe1e8a8412fd593">  679</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#af0ee0d43fa2c0c6b0fe1e8a8412fd593">get_dst_id</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;        <span class="keywordflow">return</span> _dst_id;</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;    }</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;</div><div class="line"><a name="l00684"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#aec98b88be8453fdec44492697a66e5f3">  684</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#aa9587b64a9fbf98bfe730f42dea9c09e">ClKernelArgList</a> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#aec98b88be8453fdec44492697a66e5f3">get_arguments</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;        <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#aa9587b64a9fbf98bfe730f42dea9c09e">ClKernelArgList</a> arg_list{};</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;arg_var : _vtable.get_kernel_arguments().get_all_vars())</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;        {</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;            arg_list[arg_var.desc.arg_id] = arg_var.desc;</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;        }</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;        <span class="keywordflow">return</span> arg_list;</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;    }</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;<span class="comment">    /** Get the arguments as shared vars from the vtable</span></div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;<span class="comment">     * @return SharedVarTable::Arguments</span></div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00698"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#a1d338323a8a96383dc12b82a0fd7671f">  698</a></span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_arguments.xhtml">SharedVarTable::Arguments</a> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#a1d338323a8a96383dc12b82a0fd7671f">get_argument_shared_vars</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;        <span class="keywordflow">return</span> _vtable.get_kernel_arguments();</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;    }</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;</div><div class="line"><a name="l00703"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#a3ff8d50a482ee798058c32c5053eb072">  703</a></span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#a3ff8d50a482ee798058c32c5053eb072">get_kernel_argument_info</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a> <span class="keywordtype">id</span>)<span class="keyword"> const</span></div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;        <span class="keyword">auto</span> it = _kernel_tensors.find(<span class="keywordtype">id</span>);</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;        <span class="keywordflow">if</span>(it != _kernel_tensors.end())</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;        {</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;            <span class="keywordflow">return</span> it-&gt;second;</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;        }</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;    }</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;</div><div class="line"><a name="l00713"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#a07ea6cf757265269f1222270bddcc2c2">  713</a></span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#a07ea6cf757265269f1222270bddcc2c2">get_kernel_argument_info</a>(<span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a> <span class="keywordtype">id</span>)</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;    {</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;        <span class="keyword">auto</span> it = _kernel_tensors.find(<span class="keywordtype">id</span>);</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;        <span class="keywordflow">if</span>(it != _kernel_tensors.end())</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;        {</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;            <span class="keywordflow">return</span> it-&gt;second;</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;        }</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;<span class="comment">    /** Finalize graph construction. Graph is expected to not mutate after being finalized</span></div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00724"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#a32d626626eee0bc4ade146973f6abb1c">  724</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#a32d626626eee0bc4ade146973f6abb1c">finalize</a>()</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;    {</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;        cache_root_component();</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;        assign_shared_var_group();</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;    }</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;</div><div class="line"><a name="l00730"></a><span class="lineno"><a class="line" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#aae529eea2206b577453cdc63c855aef2">  730</a></span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml">DependencyGraph</a> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#aae529eea2206b577453cdc63c855aef2">get_graph</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;        <span class="keywordflow">return</span> _graph;</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;    }</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;    <span class="keywordtype">void</span> cache_root_component()</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;    {</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> roots = _graph.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#af2b3ac83564fdf708156b9fff27b975f">get_root_ops</a>();</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;        <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(roots.size() != 1, <span class="stringliteral">&quot;Trying to add more than one root to the graph&quot;</span>);</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;        _graph_root = roots.at(0);</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;<span class="comment">    /** Assign the group for each shared var. Can only be performed at the end of the graph construction, before building</span></div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;    <span class="keywordtype">void</span> assign_shared_var_group()</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;    {</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;tensor : _kernel_tensors)</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;        {</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> tensor_id = tensor.first;</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;            <span class="keywordflow">if</span>(_graph.is_src_tensor(tensor_id) || _graph.is_dst_tensor(tensor_id))</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;            {</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;                _shared_var_group_lut[tensor_id] = <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ae4b4b738b88d9f339fa9154f4305f6d4a1853680a6d666b9fea2d789dd00bc7eb">SharedVarGroup::Argument</a>;</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;            }</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;            {</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;                _shared_var_group_lut[tensor_id] = <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ae4b4b738b88d9f339fa9154f4305f6d4a086247a9b57fde6eefee2a0c4752242d">SharedVarGroup::Automatic</a>;</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;            }</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;        }</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;    }</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;    <span class="keywordtype">void</span> topological_sort_utility(<a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4e1b7c599411e580eaed97443d281691">ComponentID</a> component_id, std::unordered_set&lt;ComponentID&gt; &amp;visited, std::stack&lt;ComponentID&gt; &amp;stack)<span class="keyword"> const</span></div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;        visited.insert(component_id);</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">auto</span> connected_component : _component_graph.find(component_id)-&gt;second)</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;        {</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;            <span class="keywordflow">if</span>(visited.find(connected_component) == visited.end())</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;            {</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;                topological_sort_utility(connected_component, visited, stack);</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;            }</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;        }</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;        stack.push(component_id);</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;    }</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;    std::stack&lt;ComponentID&gt; topological_sort()<span class="keyword"> const</span></div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;        std::stack&lt;ComponentID&gt;         stack{};</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;        std::unordered_set&lt;ComponentID&gt; visited{};</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;        topological_sort_utility(_graph_root, visited, stack);</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;        <span class="keywordflow">return</span> stack;</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;    }</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a0e5a222683b4e850a681a8b7f593f9c3">traverse</a>(<span class="keyword">const</span> std::function&lt;<span class="keywordtype">void</span>(std::stack&lt;ComponentID&gt;)&gt; &amp;func)<span class="keyword"> const</span></div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;        std::stack&lt;ComponentID&gt; stack = topological_sort();</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;        <span class="keywordflow">while</span>(!stack.empty())</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;        {</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;            func(stack);</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;            stack.pop();</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;        }</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;    }</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;    std::string generate_argument_declaration(<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_shared_var.xhtml">SharedVarTable::SharedVar</a> &amp;var)<span class="keyword"> const</span></div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;        <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(var.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_shared_var.xhtml#a4d98b4bf7a8358656e7de1b33f3999dd">group</a> != <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ae4b4b738b88d9f339fa9154f4305f6d4a1853680a6d666b9fea2d789dd00bc7eb">SharedVarGroup::Argument</a>, <span class="stringliteral">&quot;An argument declaration can only be generated from a kernel argument&quot;</span>);</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;        std::string code;</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;        <span class="keywordflow">switch</span>(var.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_shared_var.xhtml#ad45cdfea4355c25b90549fc54f9a57c3">desc</a>.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_arg_descriptor.xhtml#a989f4d1d24ff43f92bf7f63fd5161ee5">tensor_arg_type</a>)</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;        {</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6072e09c65444602fbe6cc6027d369c7a57dea6f5039281b7fee517fc43bf3110">ClKernelTensorArgType::Vector</a>:</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;            {</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;                code += <span class="stringliteral">&quot;\n    VECTOR_DECLARATION(&quot;</span> + var.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_shared_var.xhtml#ac047593b5705ef4a93109e4c7cf879f4">uniq_name</a> + <span class="stringliteral">&quot;)&quot;</span>;</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;            }</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6072e09c65444602fbe6cc6027d369c7abe53a0541a6d36f6ecb879fa2c584b08">ClKernelTensorArgType::Image</a>:</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;            {</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;                code += <span class="stringliteral">&quot;\n    IMAGE_DECLARATION(&quot;</span> + var.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_shared_var.xhtml#ac047593b5705ef4a93109e4c7cf879f4">uniq_name</a> + <span class="stringliteral">&quot;)&quot;</span>;</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;            }</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6072e09c65444602fbe6cc6027d369c7a963c0c0999b3c937f36565fae3b0ef54">ClKernelTensorArgType::Image_3D</a>:</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;            {</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;                code += <span class="stringliteral">&quot;\n    IMAGE_DECLARATION(&quot;</span> + var.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_shared_var.xhtml#ac047593b5705ef4a93109e4c7cf879f4">uniq_name</a> + <span class="stringliteral">&quot;),&quot;</span>;</div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;                code += <span class="stringliteral">&quot;\n    uint &quot;</span> + var.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_shared_var.xhtml#ac047593b5705ef4a93109e4c7cf879f4">uniq_name</a> + <span class="stringliteral">&quot;_stride_z&quot;</span>;</div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;            }</div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6072e09c65444602fbe6cc6027d369c7a853491c5ec1b4957adf256ed3fbc18e0">ClKernelTensorArgType::Image_3D_Export_To_ClImage2D</a>:</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;            {</div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;                code += <span class="stringliteral">&quot;\n    __read_only image2d_t &quot;</span> + var.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_shared_var.xhtml#ac047593b5705ef4a93109e4c7cf879f4">uniq_name</a> + <span class="stringliteral">&quot;_img,&quot;</span>;</div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;                code += <span class="stringliteral">&quot;\n    uint &quot;</span> + var.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_shared_var.xhtml#ac047593b5705ef4a93109e4c7cf879f4">uniq_name</a> + <span class="stringliteral">&quot;_stride_z&quot;</span>;</div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;            }</div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6072e09c65444602fbe6cc6027d369c7aa735f986cc40b7d5c4fd2d5a7ba883fd">ClKernelTensorArgType::Tensor_4D_t_Buffer</a>:</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;            {</div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;                code += <span class="stringliteral">&quot;\n    TENSOR4D_T(&quot;</span> + var.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_shared_var.xhtml#ac047593b5705ef4a93109e4c7cf879f4">uniq_name</a> + <span class="stringliteral">&quot;, BUFFER)&quot;</span>;</div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;            }</div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6072e09c65444602fbe6cc6027d369c7a89e1a66e65ce2fc93995b94f32d9d928">ClKernelTensorArgType::Tensor_4D_t_Image</a>:</div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;            {</div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;                code += <span class="stringliteral">&quot;\n    TENSOR4D_T(&quot;</span> + var.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_shared_var.xhtml#ac047593b5705ef4a93109e4c7cf879f4">uniq_name</a> + <span class="stringliteral">&quot;, IMAGE)&quot;</span>;</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;            }</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;            <span class="keywordflow">default</span>:</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;            {</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;                <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported declaration generation for ClKernelTensorArgType&quot;</span>);</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;            }</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;        }</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;        <span class="keywordflow">return</span> code;</div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;    }</div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;</div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;    std::string generate_kernel_signature(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_arguments.xhtml">SharedVarTable::Arguments</a> &amp;argument_list)<span class="keyword"> const</span></div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;        std::string code = <span class="stringliteral">&quot;\n__kernel void &quot;</span> + build_kernel_name() + <span class="stringliteral">&quot;(&quot;</span>;</div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;</div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;arg : argument_list.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_arguments.xhtml#a0ddc1695f6a02dbed6ed93e787bea98c">get_all_vars</a>())</div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;        {</div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;            code += generate_argument_declaration(arg) + <span class="stringliteral">&quot;,&quot;</span>;</div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;        }</div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;</div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;        code[code.length() - 1] = <span class="charliteral">&#39;)&#39;</span>;</div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;</div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;        <span class="keywordflow">return</span> code;</div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;    }</div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;</div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;    std::string generate_global_section()<span class="keyword"> const</span></div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;        <span class="keyword">auto</span>       dst_info   = get_kernel_argument_info(_dst_id);</div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;        <span class="keyword">auto</span>       dst_w      = dst_info-&gt;dimension(0);</div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> tile_w     = std::max(1, get_execution_window().x().<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>());</div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> tile_h     = std::max(1, get_execution_window().y().<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>());</div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;        <span class="keyword">auto</span>       leftover_w = dst_w % tile_w;</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;        std::string code = <span class="stringliteral">&quot;&quot;</span>;</div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;        code += std::string(<span class="stringliteral">&quot;    int cout = GET_SPATIAL_IDX(0, &quot;</span>) + <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4de2494f0551776a532a883d3b190b33">std::to_string</a>(tile_w) + <span class="stringliteral">&quot;, &quot;</span> + <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4de2494f0551776a532a883d3b190b33">std::to_string</a>(leftover_w) + <span class="stringliteral">&quot;);\n&quot;</span>;</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;        code += std::string(<span class="stringliteral">&quot;    int mout = GET_SPATIAL_IDX(1, &quot;</span>) + <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4de2494f0551776a532a883d3b190b33">std::to_string</a>(tile_h) + <span class="stringliteral">&quot;, &quot;</span> + <span class="stringliteral">&quot;0);\n&quot;</span>;</div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;        code += std::string(<span class="stringliteral">&quot;    int bout = GET_SPATIAL_IDX(2, 1, 0);\n\n&quot;</span>);</div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;</div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;        <span class="keywordflow">switch</span>(_tile_info.clipping)</div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;        {</div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#afe5ece05d566f71af093d15bd4531459a747385047b85ae751f83adb36435a3c1">ClippingStrategy::TOP_LEFT</a>:</div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;                code += <span class="stringliteral">&quot;    const bool g_cond_x = (cout == 0);\n&quot;</span>;</div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;                code += <span class="stringliteral">&quot;    const bool g_cond_y = (mout == 0);\n&quot;</span>;</div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#afe5ece05d566f71af093d15bd4531459a901d87dedda8db733f5e6d34c4eb5fe0">ClippingStrategy::TOP_RIGHT</a>:</div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;                code += <span class="stringliteral">&quot;    const bool g_cond_x = ((cout + 1) * &quot;</span> + <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4de2494f0551776a532a883d3b190b33">std::to_string</a>(tile_w) + <span class="stringliteral">&quot; &gt;= &quot;</span> + <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4de2494f0551776a532a883d3b190b33">std::to_string</a>(_tile_info.boundaries.x()) + <span class="stringliteral">&quot;);\n&quot;</span>;</div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;                code += <span class="stringliteral">&quot;    const bool g_cond_y = (mout == 0);\n&quot;</span>;</div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#afe5ece05d566f71af093d15bd4531459a8d81ac82421d1b03da58fccb9174892e">ClippingStrategy::BOTTOM_LEFT</a>:</div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;                code += <span class="stringliteral">&quot;    const bool g_cond_x = (cout == 0);\n&quot;</span>;</div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;                code += <span class="stringliteral">&quot;    const bool g_cond_y = ((mout + 1) * &quot;</span> + <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4de2494f0551776a532a883d3b190b33">std::to_string</a>(tile_h) + <span class="stringliteral">&quot; &gt;= &quot;</span> + <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4de2494f0551776a532a883d3b190b33">std::to_string</a>(_tile_info.boundaries.y()) + <span class="stringliteral">&quot;);\n&quot;</span>;</div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#afe5ece05d566f71af093d15bd4531459a341b72aaab1308a3e6667af1e52f5def">ClippingStrategy::BOTTOM_RIGHT</a>:</div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;                code += <span class="stringliteral">&quot;    const bool g_cond_x = ((cout + 1) * &quot;</span> + <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4de2494f0551776a532a883d3b190b33">std::to_string</a>(tile_w) + <span class="stringliteral">&quot; &gt;= &quot;</span> + <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4de2494f0551776a532a883d3b190b33">std::to_string</a>(_tile_info.boundaries.x()) + <span class="stringliteral">&quot;);\n&quot;</span>;</div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;                code += <span class="stringliteral">&quot;    const bool g_cond_y = ((mout + 1) * &quot;</span> + <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4de2494f0551776a532a883d3b190b33">std::to_string</a>(tile_h) + <span class="stringliteral">&quot; &gt;= &quot;</span> + <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4de2494f0551776a532a883d3b190b33">std::to_string</a>(_tile_info.boundaries.y()) + <span class="stringliteral">&quot;);\n&quot;</span>;</div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;            <span class="keywordflow">default</span>:</div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;                <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported clipping strategy&quot;</span>);</div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;        }</div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;</div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;        <span class="keywordflow">return</span> code;</div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;    }</div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;</div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;    <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_tile_descriptor.xhtml">TileDescriptor</a> _tile_info{};</div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;</div><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;    int32_t _num_complex_components{};</div><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;</div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a> _dst_id{ -1 }; <span class="comment">// Initially set to -1, which means the graph has no dst yet, since node IDs are positive numbers</span></div><div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;</div><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml">DependencyGraph</a> _graph{};</div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;</div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;    <span class="comment">// Tensors, components and IDs with corresponding ptrs (except intermediate)</span></div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;    std::unordered_map&lt;ComponentID, ComponentUniquePtr&gt; _components{};</div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;    std::unordered_map&lt;ArgumentID, ITensorInfo *&gt;       _kernel_tensors{};</div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;    <span class="comment">// Argument group lookup. Can be replaced by extending the ArgumentID type to include group info</span></div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;    std::unordered_map&lt;ArgumentID, SharedVarGroup&gt; _shared_var_group_lut{};</div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;</div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;    <span class="comment">// Tracks all variables (e.g.: kernel arguments, kernel &quot;global variables&quot;)</span></div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table.xhtml">SharedVarTable</a> _vtable{};</div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;</div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;    <span class="comment">// Component directed graph (represented by an adjecency list of Component IDs)</span></div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;    <span class="comment">// This is used to understand the ordering and bindings between components when generating the kernel</span></div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;    <span class="comment">// It&#39;s initially set to -1 which means the graph has no root yet, since node IDs are positive numbers</span></div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4e1b7c599411e580eaed97443d281691">ComponentID</a> _graph_root{ -1 };</div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;    std::unordered_map&lt;ComponentID, ComponentList&gt; _component_graph{};</div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;</div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;    <span class="comment">// Additional data structures used to define the relationships between components and arguments</span></div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;    <span class="comment">// For each argument, it contains the list of components that consider it as an incoming or an outgoing argument</span></div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;    <span class="comment">// E.g. tensor0  -&gt; component0 -&gt; tensor1</span></div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;    <span class="comment">// _outgoing_components[tensor0] == {component0} (component0 is the outgoing component of tensor0. Component0 treats tensor0 as an input tensor)</span></div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;    <span class="comment">// _incoming_components[tensor1] == {component0} (component0 is the incoming component of tensor1. Component1 treats tensor1 as an output tensor)</span></div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;    std::unordered_map&lt;ArgumentID, ComponentList&gt; _outgoing_components{};</div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;    std::unordered_map&lt;ArgumentID, ComponentList&gt; _incoming_components{};</div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;};</div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;</div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;} <span class="comment">// namespace dynamic_fusion</span></div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;} <span class="comment">// namespace experimental</span></div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;<span class="preprocessor">#endif //ARM_COMPUTE_EXPERIMENTAL_DYNAMICFUSION_IMPL_COMMON_H</span></div><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ENABLE_EXPERIMENTAL_DYNAMIC_FUSION */</span><span class="preprocessor"></span></div><div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_ae13e792ef802118ab6d86fb46fa47e5c"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ae13e792ef802118ab6d86fb46fa47e5c">arm_compute::experimental::dynamic_fusion::ComponentList</a></div><div class="ttdeci">std::vector&lt; ComponentID &gt; ComponentList</div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00255">Common.h:255</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a6072e09c65444602fbe6cc6027d369c7a963c0c0999b3c937f36565fae3b0ef54"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6072e09c65444602fbe6cc6027d369c7a963c0c0999b3c937f36565fae3b0ef54">arm_compute::experimental::dynamic_fusion::ClKernelTensorArgType::Image_3D</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component_1_1_tag_val_xhtml_a5a016fbf6b074408f6a7111a0fb93231"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component_1_1_tag_val.xhtml#a5a016fbf6b074408f6a7111a0fb93231">arm_compute::experimental::dynamic_fusion::IClKernelComponent::TagVal::TagVal</a></div><div class="ttdeci">TagVal(const SharedVarTable::SharedVar &amp;var)</div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00264">Common.h:264</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_link_xhtml_a5a2b7a58dc85678d08752945ff655362"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_link.xhtml#a5a2b7a58dc85678d08752945ff655362">arm_compute::experimental::dynamic_fusion::SharedVarLink::is_empty</a></div><div class="ttdeci">bool is_empty() const</div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00080">Common.h:80</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component_1_1_tag_val_xhtml_ae7367e75920b6363621b9246bd4d7f13"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component_1_1_tag_val.xhtml#ae7367e75920b6363621b9246bd4d7f13">arm_compute::experimental::dynamic_fusion::IClKernelComponent::TagVal::TagVal</a></div><div class="ttdeci">TagVal(const DataType &amp;data_type)</div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00285">Common.h:285</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a81f78fc173dedefe5a049c0aa3eed2c0afdb0c388de01d545017cdf9ccf00eb72"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a81f78fc173dedefe5a049c0aa3eed2c0afdb0c388de01d545017cdf9ccf00eb72">arm_compute::experimental::dynamic_fusion::ComponentType::Store</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_arguments_xhtml_abaad0f8194c662ce167ee15d5edcb92d"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_arguments.xhtml#abaad0f8194c662ce167ee15d5edcb92d">arm_compute::experimental::dynamic_fusion::SharedVarTable::Arguments::get_src_vars</a></div><div class="ttdeci">std::vector&lt; SharedVar &gt; get_src_vars() const</div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00123">Common.h:123</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_arguments_xhtml"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_arguments.xhtml">arm_compute::experimental::dynamic_fusion::SharedVarTable::Arguments</a></div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00110">Common.h:110</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml">arm_compute::experimental::dynamic_fusion::DependencyGraph</a></div><div class="ttdoc">The dependency graph of a workload, where the nodes are of 2 types: Tensor or Operator Represented as...</div><div class="ttdef"><b>Definition:</b> <a href="_dependency_graph_8h_source.xhtml#l00051">DependencyGraph.h:51</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation_xhtml_aae529eea2206b577453cdc63c855aef2"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#aae529eea2206b577453cdc63c855aef2">arm_compute::experimental::dynamic_fusion::ClKernelBlueprint::Implementation::get_graph</a></div><div class="ttdeci">DependencyGraph get_graph() const</div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00730">Common.h:730</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component_xhtml_aa543fb6fd6b465a9a2b802c858ae4c73"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml#aa543fb6fd6b465a9a2b802c858ae4c73">arm_compute::experimental::dynamic_fusion::IClKernelComponent::get_component_code</a></div><div class="ttdeci">virtual std::string get_component_code() const</div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00365">Common.h:365</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a81f78fc173dedefe5a049c0aa3eed2c0a1fbb1e3943c2c6c560247ac8f9289780"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a81f78fc173dedefe5a049c0aa3eed2c0a1fbb1e3943c2c6c560247ac8f9289780">arm_compute::experimental::dynamic_fusion::ComponentType::Simple</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component_xhtml_aa430b05011ebf30749be0c67d32b327f"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml#aa430b05011ebf30749be0c67d32b327f">arm_compute::experimental::dynamic_fusion::IClKernelComponent::generate_build_options</a></div><div class="ttdeci">virtual CLBuildOptions generate_build_options() const</div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00402">Common.h:402</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a6072e09c65444602fbe6cc6027d369c7a853491c5ec1b4957adf256ed3fbc18e0"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6072e09c65444602fbe6cc6027d369c7a853491c5ec1b4957adf256ed3fbc18e0">arm_compute::experimental::dynamic_fusion::ClKernelTensorArgType::Image_3D_Export_To_ClImage2D</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_af2b3ac83564fdf708156b9fff27b975f"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#af2b3ac83564fdf708156b9fff27b975f">arm_compute::experimental::dynamic_fusion::DependencyGraph::get_root_ops</a></div><div class="ttdeci">std::vector&lt; Id &gt; get_root_ops() const</div><div class="ttdoc">Get all root ops. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00145">DependencyGraph.cpp:145</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation_xhtml_a8827eb95bc1dda1177b1b3c5b21810d6"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#a8827eb95bc1dda1177b1b3c5b21810d6">arm_compute::experimental::dynamic_fusion::ClKernelBlueprint::Implementation::set_tile_info</a></div><div class="ttdeci">void set_tile_info(const TileDescriptor &amp;tile_info)</div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00440">Common.h:440</a></div></div>
<div class="ttc" id="namespace_gemm_tuner_xhtml_a8187411843a6284ffb964ef3fb9fcab3"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">GemmTuner.args</a></div><div class="ttdeci">args</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner.py:679</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a6072e09c65444602fbe6cc6027d369c7a89e1a66e65ce2fc93995b94f32d9d928"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6072e09c65444602fbe6cc6027d369c7a89e1a66e65ce2fc93995b94f32d9d928">arm_compute::experimental::dynamic_fusion::ClKernelTensorArgType::Tensor_4D_t_Image</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation_xhtml_afa94bb76b13d616fea16c02f0e26ee76"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#afa94bb76b13d616fea16c02f0e26ee76">arm_compute::experimental::dynamic_fusion::ClKernelBlueprint::Implementation::build_config_id</a></div><div class="ttdeci">std::string build_config_id() const</div><div class="ttdoc">Generate config id of the entire kernel. </div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00642">Common.h:642</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_acc5dddee1cbe93a4eaf0a9f74ee96bb7"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">arm_compute::support::cpp11::to_string</a></div><div class="ttdeci">std::string to_string(T &amp;&amp;value)</div><div class="ttdoc">Convert integer and float values to string. </div><div class="ttdef"><b>Definition:</b> <a href="_string_support_8h_source.xhtml#l00168">StringSupport.h:168</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a4de2494f0551776a532a883d3b190b33"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4de2494f0551776a532a883d3b190b33">arm_compute::experimental::dynamic_fusion::to_string</a></div><div class="ttdeci">std::string to_string(const CLBuildOptions &amp;cl_build_opts)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_utils_8h_source.xhtml#l00051">Utils.h:51</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a72fd310d933d46bd03b9d33fbb283ee9a29c2c02a361c9d7028472e5d92cd4a54"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a72fd310d933d46bd03b9d33fbb283ee9a29c2c02a361c9d7028472e5d92cd4a54">arm_compute::experimental::dynamic_fusion::SharedVarIO::Output</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_afe5ece05d566f71af093d15bd4531459a901d87dedda8db733f5e6d34c4eb5fe0"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#afe5ece05d566f71af093d15bd4531459a901d87dedda8db733f5e6d34c4eb5fe0">arm_compute::experimental::dynamic_fusion::ClippingStrategy::TOP_RIGHT</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation_xhtml_a1d338323a8a96383dc12b82a0fd7671f"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#a1d338323a8a96383dc12b82a0fd7671f">arm_compute::experimental::dynamic_fusion::ClKernelBlueprint::Implementation::get_argument_shared_vars</a></div><div class="ttdeci">SharedVarTable::Arguments get_argument_shared_vars() const</div><div class="ttdoc">Get the arguments as shared vars from the vtable. </div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00698">Common.h:698</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a02110ece50ffc08b8ae07c7a63eb10df"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">arm_compute::test::validation::ss</a></div><div class="ttdeci">std::stringstream ss(mlgo_str)</div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_a545c28170311fa375be5684ba6f271bc"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#a545c28170311fa375be5684ba6f271bc">arm_compute::CLKernelLibrary::get_program</a></div><div class="ttdeci">std::pair&lt; std::string, bool &gt; get_program(const std::string &amp;program_name) const</div><div class="ttdoc">Gets the source of the selected program. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00109">CLKernelLibrary.cpp:109</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_acba005f5ce2c62cbf3f94d074d9007aa"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">arm_compute::CLKernelLibrary::get</a></div><div class="ttdeci">static CLKernelLibrary &amp; get()</div><div class="ttdoc">Access the KernelLibrary singleton. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00039">CLKernelLibrary.cpp:39</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor&amp;#39;s metadata. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00040">ITensorInfo.h:40</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_link_xhtml"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_link.xhtml">arm_compute::experimental::dynamic_fusion::SharedVarLink</a></div><div class="ttdoc">Specifies a shared variable link for a component. </div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00076">Common.h:76</a></div></div>
<div class="ttc" id="src_2core_2common_2_macros_8h_xhtml_a0b06d656b020e3d3ac6a001254df0373"><div class="ttname"><a href="src_2core_2common_2_macros_8h.xhtml#a0b06d656b020e3d3ac6a001254df0373">ARM_COMPUTE_DISALLOW_COPY_ALLOW_MOVE</a></div><div class="ttdeci">#define ARM_COMPUTE_DISALLOW_COPY_ALLOW_MOVE(TypeName)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2common_2_macros_8h_source.xhtml#l00027">Macros.h:27</a></div></div>
<div class="ttc" id="arm__compute_2core_2_c_l_2_c_l_kernel_library_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_c_l_2_c_l_kernel_library_8h.xhtml">CLKernelLibrary.h</a></div><div class="ttdoc">Manages all the OpenCL kernels compilation and caching, provides accessors for the OpenCL Context...</div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation_xhtml_a9128af5d4e167b32ceaf17b22b467062"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#a9128af5d4e167b32ceaf17b22b467062">arm_compute::experimental::dynamic_fusion::ClKernelBlueprint::Implementation::get_tile_info</a></div><div class="ttdeci">TileDescriptor get_tile_info() const</div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00665">Common.h:665</a></div></div>
<div class="ttc" id="classarm__compute_1_1_status_xhtml"><div class="ttname"><a href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a></div><div class="ttdoc">Status class. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00052">Error.h:52</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a0e5a222683b4e850a681a8b7f593f9c3"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a0e5a222683b4e850a681a8b7f593f9c3">arm_compute::experimental::dynamic_fusion::traverse</a></div><div class="ttdeci">std::vector&lt; const ClKernel * &gt; traverse(const ClKernelFusionGroup &amp;group)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_fused_kernel_graph_8cpp_source.xhtml#l00050">ClFusedKernelGraph.cpp:50</a></div></div>
<div class="ttc" id="arm__compute_2core_2_c_l_2_c_l_compile_context_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_c_l_2_c_l_compile_context_8h.xhtml">CLCompileContext.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2022 Arm Limited. </div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_afe5ece05d566f71af093d15bd4531459a341b72aaab1308a3e6667af1e52f5def"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#afe5ece05d566f71af093d15bd4531459a341b72aaab1308a3e6667af1e52f5def">arm_compute::experimental::dynamic_fusion::ClippingStrategy::BOTTOM_RIGHT</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component_xhtml_ac5366eca9a2810f78855d4f1adeeadea"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml#ac5366eca9a2810f78855d4f1adeeadea">arm_compute::experimental::dynamic_fusion::IClKernelComponent::set_id</a></div><div class="ttdeci">void set_id(ComponentID id)</div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00350">Common.h:350</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_aa9587b64a9fbf98bfe730f42dea9c09e"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#aa9587b64a9fbf98bfe730f42dea9c09e">arm_compute::experimental::dynamic_fusion::ClKernelArgList</a></div><div class="ttdeci">std::map&lt; int, ClKernelArgDescriptor &gt; ClKernelArgList</div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_8h_source.xhtml#l00087">ClWorkload.h:87</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_arg_descriptor_xhtml"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_arg_descriptor.xhtml">arm_compute::experimental::dynamic_fusion::ClKernelArgDescriptor</a></div><div class="ttdoc">Describes all the info required to add a kernel argument at run time. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_8h_source.xhtml#l00070">ClWorkload.h:70</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_xhtml"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint.xhtml">arm_compute::experimental::dynamic_fusion::ClKernelBlueprint</a></div><div class="ttdoc">Intermediate representation of the final, complete kernel source. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_kernel_building_a_p_i_8h_source.xhtml#l00046">ClKernelBuildingAPI.h:46</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_ae4b4b738b88d9f339fa9154f4305f6d4a086247a9b57fde6eefee2a0c4752242d"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ae4b4b738b88d9f339fa9154f4305f6d4a086247a9b57fde6eefee2a0c4752242d">arm_compute::experimental::dynamic_fusion::SharedVarGroup::Automatic</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component_xhtml_a107bc55d669c46d434a9abf6e30515a2"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml#a107bc55d669c46d434a9abf6e30515a2">arm_compute::experimental::dynamic_fusion::IClKernelComponent::IClKernelComponent</a></div><div class="ttdeci">IClKernelComponent(ClKernelBlueprint *blueprint)</div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00294">Common.h:294</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_ae4b4b738b88d9f339fa9154f4305f6d4a1853680a6d666b9fea2d789dd00bc7eb"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ae4b4b738b88d9f339fa9154f4305f6d4a1853680a6d666b9fea2d789dd00bc7eb">arm_compute::experimental::dynamic_fusion::SharedVarGroup::Argument</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_shared_var_xhtml_a5a2b7a58dc85678d08752945ff655362"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_shared_var.xhtml#a5a2b7a58dc85678d08752945ff655362">arm_compute::experimental::dynamic_fusion::SharedVarTable::SharedVar::is_empty</a></div><div class="ttdeci">bool is_empty() const</div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00104">Common.h:104</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component_1_1_tag_val_xhtml"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component_1_1_tag_val.xhtml">arm_compute::experimental::dynamic_fusion::IClKernelComponent::TagVal</a></div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00261">Common.h:261</a></div></div>
<div class="ttc" id="_string_support_8h_xhtml"><div class="ttname"><a href="_string_support_8h.xhtml">StringSupport.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component_xhtml_ad7a3eb170866dfc737d0a8842fe47fd1"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml#ad7a3eb170866dfc737d0a8842fe47fd1">arm_compute::experimental::dynamic_fusion::IClKernelComponent::get_headers_list</a></div><div class="ttdeci">virtual std::set&lt; std::string &gt; get_headers_list() const</div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00355">Common.h:355</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_ae4b4b738b88d9f339fa9154f4305f6d4"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ae4b4b738b88d9f339fa9154f4305f6d4">arm_compute::experimental::dynamic_fusion::SharedVarGroup</a></div><div class="ttdeci">SharedVarGroup</div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00065">Common.h:65</a></div></div>
<div class="ttc" id="_requires_8h_xhtml"><div class="ttname"><a href="_requires_8h.xhtml">Requires.h</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_arg_descriptor_xhtml_a989f4d1d24ff43f92bf7f63fd5161ee5"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_arg_descriptor.xhtml#a989f4d1d24ff43f92bf7f63fd5161ee5">arm_compute::experimental::dynamic_fusion::ClKernelArgDescriptor::tensor_arg_type</a></div><div class="ttdeci">ClKernelTensorArgType tensor_arg_type</div><div class="ttdoc">tensor argument type </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_8h_source.xhtml#l00083">ClWorkload.h:83</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation_xhtml_add7c7c41451ff9873f64fd90a9636251"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#add7c7c41451ff9873f64fd90a9636251">arm_compute::experimental::dynamic_fusion::ClKernelBlueprint::Implementation::build_kernel_name</a></div><div class="ttdeci">std::string build_kernel_name() const</div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00547">Common.h:547</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_xhtml"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table.xhtml">arm_compute::experimental::dynamic_fusion::SharedVarTable</a></div><div class="ttdoc">A table of all the variables used in the kernel / blueprint Because we limit the DependencyGraph in t...</div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00092">Common.h:92</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component_xhtml_a8d7e5e18e2ef94f4e007c2efd7b3b3b0"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml#a8d7e5e18e2ef94f4e007c2efd7b3b3b0">arm_compute::experimental::dynamic_fusion::IClKernelComponent::replace_tags</a></div><div class="ttdeci">static std::string replace_tags(const std::string &amp;code_template, const TagLUT &amp;tags)</div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00307">Common.h:307</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a0b0eb3235749a2909dc5a101afe59a1b"><div class="ttname"><a href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond, msg)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00456">Error.h:456</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation_xhtml_a3ff8d50a482ee798058c32c5053eb072"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#a3ff8d50a482ee798058c32c5053eb072">arm_compute::experimental::dynamic_fusion::ClKernelBlueprint::Implementation::get_kernel_argument_info</a></div><div class="ttdeci">const ITensorInfo * get_kernel_argument_info(const ArgumentID id) const</div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00703">Common.h:703</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_arguments_xhtml_a0ddc1695f6a02dbed6ed93e787bea98c"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_arguments.xhtml#a0ddc1695f6a02dbed6ed93e787bea98c">arm_compute::experimental::dynamic_fusion::SharedVarTable::Arguments::get_all_vars</a></div><div class="ttdeci">std::vector&lt; SharedVar &gt; get_all_vars() const</div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00119">Common.h:119</a></div></div>
<div class="ttc" id="src_2core_2common_2_macros_8h_xhtml"><div class="ttname"><a href="src_2core_2common_2_macros_8h.xhtml">Macros.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a545eeda2eaa3f5a54345ce8169e21184"><div class="ttname"><a href="namespacearm__compute.xhtml#a545eeda2eaa3f5a54345ce8169e21184">arm_compute::get_cl_type_from_data_type</a></div><div class="ttdeci">std::string get_cl_type_from_data_type(const DataType &amp;dt)</div><div class="ttdoc">Translates a tensor data type to the appropriate OpenCL type. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00039">CLHelpers.cpp:39</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_arguments_xhtml_a78746fcc6d51fd49e96ed4a1db357a5a"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_arguments.xhtml#a78746fcc6d51fd49e96ed4a1db357a5a">arm_compute::experimental::dynamic_fusion::SharedVarTable::Arguments::add_var</a></div><div class="ttdeci">void add_var(const SharedVar &amp;var)</div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00114">Common.h:114</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a81f78fc173dedefe5a049c0aa3eed2c0a10b4eb76294b70d7fd6df997ff06edb1"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a81f78fc173dedefe5a049c0aa3eed2c0a10b4eb76294b70d7fd6df997ff06edb1">arm_compute::experimental::dynamic_fusion::ComponentType::Complex</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component_xhtml_acba60c351708a2b5de270a7c71654c70"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml#acba60c351708a2b5de270a7c71654c70">arm_compute::experimental::dynamic_fusion::IClKernelComponent::generate_config_id</a></div><div class="ttdeci">virtual std::string generate_config_id() const</div><div class="ttdoc">Generate config id of the component. </div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00397">Common.h:397</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a2bd7da02c0f6b7c585eeacec9f377cc8"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a2bd7da02c0f6b7c585eeacec9f377cc8">arm_compute::experimental::dynamic_fusion::ComponentUniquePtr</a></div><div class="ttdeci">std::unique_ptr&lt; IClKernelComponent &gt; ComponentUniquePtr</div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00414">Common.h:414</a></div></div>
<div class="ttc" id="_n_e_batch_normalization_layer_kernel_8cpp_xhtml_a8f8f80d37794cde9472343e4487ba3eb"><div class="ttname"><a href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a></div><div class="ttdeci">const char * name</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00060">NEBatchNormalizationLayerKernel.cpp:60</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a72fd310d933d46bd03b9d33fbb283ee9"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a72fd310d933d46bd03b9d33fbb283ee9">arm_compute::experimental::dynamic_fusion::SharedVarIO</a></div><div class="ttdeci">SharedVarIO</div><div class="ttdoc">We introduce the concept of Shared Variables in the context of kernel building. </div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00059">Common.h:59</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation_xhtml_a651595ab12926c7cccd04fc5323a3b72"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#a651595ab12926c7cccd04fc5323a3b72">arm_compute::experimental::dynamic_fusion::ClKernelBlueprint::Implementation::add_component</a></div><div class="ttdeci">void add_component(ComponentUniquePtr component)</div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00465">Common.h:465</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_afe5ece05d566f71af093d15bd4531459a747385047b85ae751f83adb36435a3c1"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#afe5ece05d566f71af093d15bd4531459a747385047b85ae751f83adb36435a3c1">arm_compute::experimental::dynamic_fusion::ClippingStrategy::TOP_LEFT</a></div></div>
<div class="ttc" id="_error_8h_xhtml"><div class="ttname"><a href="_error_8h.xhtml">Error.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_build_options_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_build_options.xhtml">arm_compute::CLBuildOptions</a></div><div class="ttdoc">Build options. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_c_l_2_c_l_compile_context_8h_source.xhtml#l00038">CLCompileContext.h:38</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation_xhtml_ae9f742e296d136e7b4f5d1efb2eecb46"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#ae9f742e296d136e7b4f5d1efb2eecb46">arm_compute::experimental::dynamic_fusion::ClKernelBlueprint::Implementation::build_code</a></div><div class="ttdeci">std::string build_code()</div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00559">Common.h:559</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_tile_descriptor_xhtml"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_tile_descriptor.xhtml">arm_compute::experimental::dynamic_fusion::TileDescriptor</a></div><div class="ttdoc">Component: Store. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_kernel_descriptors_8h_source.xhtml#l00079">ClKernelDescriptors.h:79</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component_1_1_tag_val_xhtml_a682a983e90ae73571a8293f463ae23a2"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component_1_1_tag_val.xhtml#a682a983e90ae73571a8293f463ae23a2">arm_compute::experimental::dynamic_fusion::IClKernelComponent::TagVal::TagVal</a></div><div class="ttdeci">TagVal(const std::string &amp;val)</div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00275">Common.h:275</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component_xhtml_a65020719815c0344b43b296cc50b10ff"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml#a65020719815c0344b43b296cc50b10ff">arm_compute::experimental::dynamic_fusion::IClKernelComponent::get_additional_macros</a></div><div class="ttdeci">virtual std::string get_additional_macros() const</div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00360">Common.h:360</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation_xhtml_aec98b88be8453fdec44492697a66e5f3"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#aec98b88be8453fdec44492697a66e5f3">arm_compute::experimental::dynamic_fusion::ClKernelBlueprint::Implementation::get_arguments</a></div><div class="ttdeci">ClKernelArgList get_arguments() const</div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00684">Common.h:684</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_shared_var_xhtml_ad45cdfea4355c25b90549fc54f9a57c3"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_shared_var.xhtml#ad45cdfea4355c25b90549fc54f9a57c3">arm_compute::experimental::dynamic_fusion::SharedVarTable::SharedVar::desc</a></div><div class="ttdeci">ClKernelArgDescriptor desc</div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00103">Common.h:103</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a6072e09c65444602fbe6cc6027d369c7a57dea6f5039281b7fee517fc43bf3110"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6072e09c65444602fbe6cc6027d369c7a57dea6f5039281b7fee517fc43bf3110">arm_compute::experimental::dynamic_fusion::ClKernelTensorArgType::Vector</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a4e1b7c599411e580eaed97443d281691"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4e1b7c599411e580eaed97443d281691">arm_compute::experimental::dynamic_fusion::ComponentID</a></div><div class="ttdeci">DependencyGraph::Id ComponentID</div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00254">Common.h:254</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation_xhtml_aeb1704732ec18ab12d5d5bc1bf61dd34"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#aeb1704732ec18ab12d5d5bc1bf61dd34">arm_compute::experimental::dynamic_fusion::ClKernelBlueprint::Implementation::group</a></div><div class="ttdeci">SharedVarGroup group(ArgumentID arg_id) const</div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00445">Common.h:445</a></div></div>
<div class="ttc" id="_g_p_u_target_8h_xhtml"><div class="ttname"><a href="_g_p_u_target_8h.xhtml">GPUTarget.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_aec15c89db50c5cb48154f3e1e56303f1"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aec15c89db50c5cb48154f3e1e56303f1">arm_compute::experimental::dynamic_fusion::DependencyGraph::empty_id</a></div><div class="ttdeci">static constexpr Id empty_id()</div><div class="ttdef"><b>Definition:</b> <a href="_dependency_graph_8h_source.xhtml#l00097">DependencyGraph.h:97</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_shared_var_xhtml_a4d98b4bf7a8358656e7de1b33f3999dd"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_shared_var.xhtml#a4d98b4bf7a8358656e7de1b33f3999dd">arm_compute::experimental::dynamic_fusion::SharedVarTable::SharedVar::group</a></div><div class="ttdeci">SharedVarGroup group</div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00101">Common.h:101</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a05c10bc9018179245c50d45b330a1c6a"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">arm_compute::cpu::step</a></div><div class="ttdeci">constexpr int step</div><div class="ttdef"><b>Definition:</b> <a href="cpu_2kernels_2floor_2neon_2fp32_8cpp_source.xhtml#l00035">fp32.cpp:35</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation_xhtml_a07ea6cf757265269f1222270bddcc2c2"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#a07ea6cf757265269f1222270bddcc2c2">arm_compute::experimental::dynamic_fusion::ClKernelBlueprint::Implementation::get_kernel_argument_info</a></div><div class="ttdeci">ITensorInfo * get_kernel_argument_info(const ArgumentID id)</div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00713">Common.h:713</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a17988896270878f90fb442bb42b0297c"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">arm_compute::experimental::dynamic_fusion::ArgumentID</a></div><div class="ttdeci">DependencyGraph::Id ArgumentID</div><div class="ttdef"><b>Definition:</b> <a href="_cl_kernel_building_a_p_i_8h_source.xhtml#l00041">ClKernelBuildingAPI.h:41</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a6072e09c65444602fbe6cc6027d369c7abe53a0541a6d36f6ecb879fa2c584b08"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6072e09c65444602fbe6cc6027d369c7abe53a0541a6d36f6ecb879fa2c584b08">arm_compute::experimental::dynamic_fusion::ClKernelTensorArgType::Image</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation_xhtml"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml">arm_compute::experimental::dynamic_fusion::ClKernelBlueprint::Implementation</a></div><div class="ttdoc">Intermediate representation of the final, complete kernel source. </div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00418">Common.h:418</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_link_xhtml_a647b7b591b8726421b7b5f45fbe6933a"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_link.xhtml#a647b7b591b8726421b7b5f45fbe6933a">arm_compute::experimental::dynamic_fusion::SharedVarLink::arg_id</a></div><div class="ttdeci">ArgumentID arg_id</div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00078">Common.h:78</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component_1_1_tag_val_xhtml_a533bf9b1130ca50996a6a4f4f5dd1a2d"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component_1_1_tag_val.xhtml#a533bf9b1130ca50996a6a4f4f5dd1a2d">arm_compute::experimental::dynamic_fusion::IClKernelComponent::TagVal::TagVal</a></div><div class="ttdeci">TagVal(const char *val)</div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00280">Common.h:280</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component_1_1_tag_val_xhtml_addc09ba64e0e45b912867a3cba9a60a8"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component_1_1_tag_val.xhtml#addc09ba64e0e45b912867a3cba9a60a8">arm_compute::experimental::dynamic_fusion::IClKernelComponent::TagVal::TagVal</a></div><div class="ttdeci">TagVal(T val)</div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00270">Common.h:270</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_shared_var_xhtml_ac047593b5705ef4a93109e4c7cf879f4"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_shared_var.xhtml#ac047593b5705ef4a93109e4c7cf879f4">arm_compute::experimental::dynamic_fusion::SharedVarTable::SharedVar::uniq_name</a></div><div class="ttdeci">std::string uniq_name</div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00102">Common.h:102</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_xhtml_aaa0377e50e51d555dac6c6adda393c51"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table.xhtml#aaa0377e50e51d555dac6c6adda393c51">arm_compute::experimental::dynamic_fusion::SharedVarTable::add</a></div><div class="ttdeci">void add(SharedVarLink var_link, SharedVarGroup group, ClKernelArgDescriptor runtime_desc, const std::string &amp;name=&quot;unnamed&quot;)</div><div class="ttdoc">Create a SharedVar for a corresponding SharedVarLink (contains ArgumentID). </div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00153">Common.h:153</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component_xhtml_af037c70dc8c0318e30d3a5138776337e"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml#af037c70dc8c0318e30d3a5138776337e">arm_compute::experimental::dynamic_fusion::IClKernelComponent::Tag</a></div><div class="ttdeci">std::string Tag</div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00260">Common.h:260</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation_xhtml_a2188f04638913931e8ddaa28cbcaff8a"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#a2188f04638913931e8ddaa28cbcaff8a">arm_compute::experimental::dynamic_fusion::ClKernelBlueprint::Implementation::update_merge_point</a></div><div class="ttdeci">Status update_merge_point(ArgumentID t_id, ArgumentID merge_point)</div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00425">Common.h:425</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a72fd310d933d46bd03b9d33fbb283ee9a324118a6721dd6b8a9b9f4e327df2bf5"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a72fd310d933d46bd03b9d33fbb283ee9a324118a6721dd6b8a9b9f4e327df2bf5">arm_compute::experimental::dynamic_fusion::SharedVarIO::Input</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation_xhtml_af00f1ece7a308d6febc1c5a806486e3f"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#af00f1ece7a308d6febc1c5a806486e3f">arm_compute::experimental::dynamic_fusion::ClKernelBlueprint::Implementation::build_options</a></div><div class="ttdeci">CLBuildOptions build_options() const</div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00653">Common.h:653</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component_xhtml_a917e30e7bb891a89ae186b70d2710981"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml#a917e30e7bb891a89ae186b70d2710981">arm_compute::experimental::dynamic_fusion::IClKernelComponent::get_dst_addr_calculation</a></div><div class="ttdeci">virtual std::string get_dst_addr_calculation() const</div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00388">Common.h:388</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_afe5ece05d566f71af093d15bd4531459a8d81ac82421d1b03da58fccb9174892e"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#afe5ece05d566f71af093d15bd4531459a8d81ac82421d1b03da58fccb9174892e">arm_compute::experimental::dynamic_fusion::ClippingStrategy::BOTTOM_LEFT</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_aac5e2a1f61e8ea5255aca62f83e9124f"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">arm_compute::experimental::dynamic_fusion::DependencyGraph::Id</a></div><div class="ttdeci">SerialIdAllocator::Id Id</div><div class="ttdef"><b>Definition:</b> <a href="_dependency_graph_8h_source.xhtml#l00073">DependencyGraph.h:73</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_link_xhtml_af0b32f6b1f620559a821272441ffdfbd"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_link.xhtml#af0b32f6b1f620559a821272441ffdfbd">arm_compute::experimental::dynamic_fusion::SharedVarLink::io</a></div><div class="ttdeci">SharedVarIO io</div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00079">Common.h:79</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a5f5b6c4337eac9e2e0046ca2304d80dc"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">arm_compute::test::validation::data_type</a></div><div class="ttdeci">data_type</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_cast_8cpp_source.xhtml#l00203">Cast.cpp:203</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a6072e09c65444602fbe6cc6027d369c7aa735f986cc40b7d5c4fd2d5a7ba883fd"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6072e09c65444602fbe6cc6027d369c7aa735f986cc40b7d5c4fd2d5a7ba883fd">arm_compute::experimental::dynamic_fusion::ClKernelTensorArgType::Tensor_4D_t_Buffer</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation_xhtml_af0ee0d43fa2c0c6b0fe1e8a8412fd593"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#af0ee0d43fa2c0c6b0fe1e8a8412fd593">arm_compute::experimental::dynamic_fusion::ClKernelBlueprint::Implementation::get_dst_id</a></div><div class="ttdeci">ArgumentID get_dst_id() const</div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00679">Common.h:679</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">arm_compute::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdoc">Available data types. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00079">Types.h:79</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component_xhtml_a66df3fbb8781a4dfa011885356e1495f"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml#a66df3fbb8781a4dfa011885356e1495f">arm_compute::experimental::dynamic_fusion::IClKernelComponent::get_window</a></div><div class="ttdeci">virtual Window get_window() const</div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00370">Common.h:370</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation_xhtml_a096db24578aa8c6cf617f8bd1a1f4904"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#a096db24578aa8c6cf617f8bd1a1f4904">arm_compute::experimental::dynamic_fusion::ClKernelBlueprint::Implementation::get_execution_window</a></div><div class="ttdeci">Window get_execution_window() const</div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00671">Common.h:671</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1mlgo_1_1parser_xhtml_a723a2d3874520624df4c3214ef0ec420"><div class="ttname"><a href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a723a2d3874520624df4c3214ef0ec420">arm_compute::mlgo::parser::header</a></div><div class="ttdeci">void header(TokenStream &amp;in, bool &amp;valid)</div><div class="ttdef"><b>Definition:</b> <a href="_m_l_g_o_parser_8cpp_source.xhtml#l00481">MLGOParser.cpp:481</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation_xhtml_a32d626626eee0bc4ade146973f6abb1c"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#a32d626626eee0bc4ade146973f6abb1c">arm_compute::experimental::dynamic_fusion::ClKernelBlueprint::Implementation::finalize</a></div><div class="ttdeci">void finalize()</div><div class="ttdoc">Finalize graph construction. </div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00724">Common.h:724</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml">arm_compute::Window</a></div><div class="ttdoc">Describe a multidimensional execution window. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00039">Window.h:39</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation_xhtml_a9325c903bb3383ac873d701e2d8fca13"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#a9325c903bb3383ac873d701e2d8fca13">arm_compute::experimental::dynamic_fusion::ClKernelBlueprint::Implementation::add_kernel_tensor</a></div><div class="ttdeci">ArgumentID add_kernel_tensor(ITensorInfo *tensor_info, ArgumentID merge_point=DependencyGraph::empty_id())</div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00430">Common.h:430</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_shared_var_xhtml"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_shared_var.xhtml">arm_compute::experimental::dynamic_fusion::SharedVarTable::SharedVar</a></div><div class="ttdoc">A fully realized SharedVarLink. </div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00097">Common.h:97</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component_xhtml_afacfec8193ed701f3646c22bc2d35455"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml#afacfec8193ed701f3646c22bc2d35455">arm_compute::experimental::dynamic_fusion::IClKernelComponent::TagLUT</a></div><div class="ttdeci">std::unordered_map&lt; Tag, TagVal &gt; TagLUT</div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00292">Common.h:292</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a81f78fc173dedefe5a049c0aa3eed2c0"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a81f78fc173dedefe5a049c0aa3eed2c0">arm_compute::experimental::dynamic_fusion::ComponentType</a></div><div class="ttdeci">ComponentType</div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00247">Common.h:247</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component_xhtml_a483b1d20313a5ba08f297c610563bdf0"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml#a483b1d20313a5ba08f297c610563bdf0">arm_compute::experimental::dynamic_fusion::IClKernelComponent::id</a></div><div class="ttdeci">ComponentID id() const</div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00346">Common.h:346</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_arguments_xhtml_a29732b4e9d77f1a55c98148a8d5fcca0"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_1_1_arguments.xhtml#a29732b4e9d77f1a55c98148a8d5fcca0">arm_compute::experimental::dynamic_fusion::SharedVarTable::Arguments::get_dst_var</a></div><div class="ttdeci">SharedVar get_dst_var() const</div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00132">Common.h:132</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component_xhtml"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_cl_kernel_component.xhtml">arm_compute::experimental::dynamic_fusion::IClKernelComponent</a></div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00256">Common.h:256</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation_xhtml_ad62ac5a971e9f5189db0880c31639d6b"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_1_1_implementation.xhtml#ad62ac5a971e9f5189db0880c31639d6b">arm_compute::experimental::dynamic_fusion::ClKernelBlueprint::Implementation::validate_arg_ids</a></div><div class="ttdeci">void validate_arg_ids(std::initializer_list&lt; ArgumentID &gt; args) const</div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00455">Common.h:455</a></div></div>
<div class="ttc" id="_cl_kernel_building_a_p_i_8h_xhtml"><div class="ttname"><a href="_cl_kernel_building_a_p_i_8h.xhtml">ClKernelBuildingAPI.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table_xhtml_a5dbf3531a263761c5a5bfae1fd8c4532"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_shared_var_table.xhtml#a5dbf3531a263761c5a5bfae1fd8c4532">arm_compute::experimental::dynamic_fusion::SharedVarTable::get_kernel_arguments</a></div><div class="ttdeci">Arguments get_kernel_arguments() const</div><div class="ttdef"><b>Definition:</b> <a href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00227">Common.h:227</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_b7458c46e3e273561b07052265b89043.xhtml">experimental</a></li><li class="navelem"><a class="el" href="dir_4ba1de0cc05164046c8a7675a91253dd.xhtml">dynamic_fusion</a></li><li class="navelem"><a class="el" href="dir_145dd76969821cf771138378bb8274dc.xhtml">ClKernelBuildingImpl</a></li><li class="navelem"><a class="el" href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h.xhtml">Common.h</a></li>
    <li class="footer">Generated on Thu Aug 18 2022 12:57:35 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
