<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: ITensorInfo Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarm__compute_1_1_i_tensor_info.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">ITensorInfo Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p>Store the tensor's metadata.  
 <a href="classarm__compute_1_1_i_tensor_info.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_i_tensor_info_8h_source.xhtml">ITensorInfo.h</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for ITensorInfo:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classarm__compute_1_1_i_tensor_info__coll__graph.svg" width="212" height="203"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:ae0e15b554cc3958445da66fc718423d4"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ae0e15b554cc3958445da66fc718423d4">TensorDimsState</a> = std::vector&lt; int &gt;</td></tr>
<tr class="separator:ae0e15b554cc3958445da66fc718423d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ad998b50febf68540277e121a9c670bfa"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ad998b50febf68540277e121a9c670bfa">~ITensorInfo</a> ()=default</td></tr>
<tr class="memdesc:ad998b50febf68540277e121a9c670bfa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default virtual destructor.  <a href="#ad998b50febf68540277e121a9c670bfa">More...</a><br /></td></tr>
<tr class="separator:ad998b50febf68540277e121a9c670bfa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ebcdce876b4cd07736afa47d50154de"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a9ebcdce876b4cd07736afa47d50154de">set_data_type</a> (<a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>)=0</td></tr>
<tr class="memdesc:a9ebcdce876b4cd07736afa47d50154de"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the data type to the specified value.  <a href="#a9ebcdce876b4cd07736afa47d50154de">More...</a><br /></td></tr>
<tr class="separator:a9ebcdce876b4cd07736afa47d50154de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf74be25e2392705f29352ffaa4b1f9d"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#aaf74be25e2392705f29352ffaa4b1f9d">set_num_channels</a> (int <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ad7829ae79223ab87f9da4c0bd7d229ba">num_channels</a>)=0</td></tr>
<tr class="memdesc:aaf74be25e2392705f29352ffaa4b1f9d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the number of channels to the specified value.  <a href="#aaf74be25e2392705f29352ffaa4b1f9d">More...</a><br /></td></tr>
<tr class="separator:aaf74be25e2392705f29352ffaa4b1f9d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a17394f0f7aea22d9b2d4c6f33bfa69ca"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a17394f0f7aea22d9b2d4c6f33bfa69ca">set_format</a> (<a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a57360dd9ca408834c0ea1a8ef70a11f4">format</a>)=0</td></tr>
<tr class="memdesc:a17394f0f7aea22d9b2d4c6f33bfa69ca"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the format of an already initialized tensor.  <a href="#a17394f0f7aea22d9b2d4c6f33bfa69ca">More...</a><br /></td></tr>
<tr class="separator:a17394f0f7aea22d9b2d4c6f33bfa69ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12a4f1190952613e36b44846962e26bb"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a12a4f1190952613e36b44846962e26bb">set_tensor_shape</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;shape)=0</td></tr>
<tr class="memdesc:a12a4f1190952613e36b44846962e26bb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the shape of an already initialized tensor.  <a href="#a12a4f1190952613e36b44846962e26bb">More...</a><br /></td></tr>
<tr class="separator:a12a4f1190952613e36b44846962e26bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0bbfdc0b7847b27de9e336f7720809ce"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a0bbfdc0b7847b27de9e336f7720809ce">set_tensor_dims_state</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ae0e15b554cc3958445da66fc718423d4">TensorDimsState</a> &amp;state)=0</td></tr>
<tr class="memdesc:a0bbfdc0b7847b27de9e336f7720809ce"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the state for each dimension of the tensor.  <a href="#a0bbfdc0b7847b27de9e336f7720809ce">More...</a><br /></td></tr>
<tr class="separator:a0bbfdc0b7847b27de9e336f7720809ce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a575d37eaf8a905c8ca3c0250757c2b81"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a575d37eaf8a905c8ca3c0250757c2b81">set_quantization_info</a> (const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;<a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">quantization_info</a>)=0</td></tr>
<tr class="memdesc:a575d37eaf8a905c8ca3c0250757c2b81"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the quantization settings (scale and offset) of the tensor.  <a href="#a575d37eaf8a905c8ca3c0250757c2b81">More...</a><br /></td></tr>
<tr class="separator:a575d37eaf8a905c8ca3c0250757c2b81"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb9481fe056b9749f9b4c08db101cc15"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#abb9481fe056b9749f9b4c08db101cc15">set_data_layout</a> (const <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> &amp;<a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>)=0</td></tr>
<tr class="memdesc:abb9481fe056b9749f9b4c08db101cc15"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the data layout of the tensor.  <a href="#abb9481fe056b9749f9b4c08db101cc15">More...</a><br /></td></tr>
<tr class="separator:abb9481fe056b9749f9b4c08db101cc15"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afc135290818a7ae02d2195c013796fdd"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#afc135290818a7ae02d2195c013796fdd">reset_padding</a> ()=0</td></tr>
<tr class="memdesc:afc135290818a7ae02d2195c013796fdd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Resets the padding settings of the tensor.  <a href="#afc135290818a7ae02d2195c013796fdd">More...</a><br /></td></tr>
<tr class="separator:afc135290818a7ae02d2195c013796fdd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f2d0ac983637a0459daf43bcd65cc38"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a4f2d0ac983637a0459daf43bcd65cc38">auto_padding</a> ()=0</td></tr>
<tr class="memdesc:a4f2d0ac983637a0459daf43bcd65cc38"><td class="mdescLeft">&#160;</td><td class="mdescRight">Update the offset to the first element and the strides to automatically computed values.  <a href="#a4f2d0ac983637a0459daf43bcd65cc38">More...</a><br /></td></tr>
<tr class="separator:a4f2d0ac983637a0459daf43bcd65cc38"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0cd5aea514f03afb48ebe22581ea4c66"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a0cd5aea514f03afb48ebe22581ea4c66">extend_padding</a> (const <a class="el" href="namespacearm__compute.xhtml#a4467b302fc9ec312c40580336ab783da">PaddingSize</a> &amp;<a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a07b929c34ad1dc823d8315876aa403ce">padding</a>)=0</td></tr>
<tr class="memdesc:a0cd5aea514f03afb48ebe22581ea4c66"><td class="mdescLeft">&#160;</td><td class="mdescRight">Update the offset to the first element, the strides and the total size.  <a href="#a0cd5aea514f03afb48ebe22581ea4c66">More...</a><br /></td></tr>
<tr class="separator:a0cd5aea514f03afb48ebe22581ea4c66"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a178f0d3d87f959e00a743328d95359d2"><td class="memItemLeft" align="right" valign="top">virtual size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a> (size_t index) const =0</td></tr>
<tr class="memdesc:a178f0d3d87f959e00a743328d95359d2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the size of the requested dimension.  <a href="#a178f0d3d87f959e00a743328d95359d2">More...</a><br /></td></tr>
<tr class="separator:a178f0d3d87f959e00a743328d95359d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae3372a4569b4702a881b1606b0c144c4"><td class="memItemLeft" align="right" valign="top">virtual size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ae3372a4569b4702a881b1606b0c144c4">dimension</a> (<a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02">DataLayoutDimension</a> dimension) const =0</td></tr>
<tr class="memdesc:ae3372a4569b4702a881b1606b0c144c4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the size of the requested data layout dimension.  <a href="#ae3372a4569b4702a881b1606b0c144c4">More...</a><br /></td></tr>
<tr class="separator:ae3372a4569b4702a881b1606b0c144c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6b14f175bf5281f57b561e2d4e4b1f1f"><td class="memItemLeft" align="right" valign="top">virtual const <a class="el" href="classarm__compute_1_1_strides.xhtml">Strides</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">strides_in_bytes</a> () const =0</td></tr>
<tr class="memdesc:a6b14f175bf5281f57b561e2d4e4b1f1f"><td class="mdescLeft">&#160;</td><td class="mdescRight">The strides in bytes for accessing each dimension of the tensor.  <a href="#a6b14f175bf5281f57b561e2d4e4b1f1f">More...</a><br /></td></tr>
<tr class="separator:a6b14f175bf5281f57b561e2d4e4b1f1f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0bd5cc32e7e4c0699eccba91e5de397"><td class="memItemLeft" align="right" valign="top">virtual size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ad0bd5cc32e7e4c0699eccba91e5de397">offset_first_element_in_bytes</a> () const =0</td></tr>
<tr class="memdesc:ad0bd5cc32e7e4c0699eccba91e5de397"><td class="mdescLeft">&#160;</td><td class="mdescRight">The offset from the beginning of the memory allocation to the first element of the tensor.  <a href="#ad0bd5cc32e7e4c0699eccba91e5de397">More...</a><br /></td></tr>
<tr class="separator:ad0bd5cc32e7e4c0699eccba91e5de397"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac80aea0e8c7c5c812ea8c7221fbfd4b2"><td class="memItemLeft" align="right" valign="top">virtual int32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ac80aea0e8c7c5c812ea8c7221fbfd4b2">offset_element_in_bytes</a> (const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;pos) const =0</td></tr>
<tr class="memdesc:ac80aea0e8c7c5c812ea8c7221fbfd4b2"><td class="mdescLeft">&#160;</td><td class="mdescRight">The offset in bytes from the beginning of the memory allocation to access the element at position (x, y, z ...)  <a href="#ac80aea0e8c7c5c812ea8c7221fbfd4b2">More...</a><br /></td></tr>
<tr class="separator:ac80aea0e8c7c5c812ea8c7221fbfd4b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa459796b5489eca8a9160cb5dcf1a103"><td class="memItemLeft" align="right" valign="top">virtual size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#aa459796b5489eca8a9160cb5dcf1a103">element_size</a> () const =0</td></tr>
<tr class="memdesc:aa459796b5489eca8a9160cb5dcf1a103"><td class="mdescLeft">&#160;</td><td class="mdescRight">Element size in bytes calculated as data_size() * <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ad7829ae79223ab87f9da4c0bd7d229ba" title="The number of channels for each tensor element. ">num_channels()</a>  <a href="#aa459796b5489eca8a9160cb5dcf1a103">More...</a><br /></td></tr>
<tr class="separator:aa459796b5489eca8a9160cb5dcf1a103"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f4e725b8e1ea36b30e09dc08ae6961d"><td class="memItemLeft" align="right" valign="top">virtual size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a1f4e725b8e1ea36b30e09dc08ae6961d">num_dimensions</a> () const =0</td></tr>
<tr class="memdesc:a1f4e725b8e1ea36b30e09dc08ae6961d"><td class="mdescLeft">&#160;</td><td class="mdescRight">The number of dimensions of the tensor (rank)  <a href="#a1f4e725b8e1ea36b30e09dc08ae6961d">More...</a><br /></td></tr>
<tr class="separator:a1f4e725b8e1ea36b30e09dc08ae6961d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7829ae79223ab87f9da4c0bd7d229ba"><td class="memItemLeft" align="right" valign="top">virtual size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ad7829ae79223ab87f9da4c0bd7d229ba">num_channels</a> () const =0</td></tr>
<tr class="memdesc:ad7829ae79223ab87f9da4c0bd7d229ba"><td class="mdescLeft">&#160;</td><td class="mdescRight">The number of channels for each tensor element.  <a href="#ad7829ae79223ab87f9da4c0bd7d229ba">More...</a><br /></td></tr>
<tr class="separator:ad7829ae79223ab87f9da4c0bd7d229ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7c66505457d00ece3aa4b34cab80757d"><td class="memItemLeft" align="right" valign="top">virtual const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a> () const =0</td></tr>
<tr class="memdesc:a7c66505457d00ece3aa4b34cab80757d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Size for each dimension of the tensor.  <a href="#a7c66505457d00ece3aa4b34cab80757d">More...</a><br /></td></tr>
<tr class="separator:a7c66505457d00ece3aa4b34cab80757d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06197f59bed02e0977b3533b824a2e51"><td class="memItemLeft" align="right" valign="top">virtual const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ae0e15b554cc3958445da66fc718423d4">TensorDimsState</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a06197f59bed02e0977b3533b824a2e51">tensor_dims_state</a> () const =0</td></tr>
<tr class="memdesc:a06197f59bed02e0977b3533b824a2e51"><td class="mdescLeft">&#160;</td><td class="mdescRight">State of each dimension of the tensor shape.  <a href="#a06197f59bed02e0977b3533b824a2e51">More...</a><br /></td></tr>
<tr class="separator:a06197f59bed02e0977b3533b824a2e51"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7cfb31af63202568efef5214acfbf3ba"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a> () const =0</td></tr>
<tr class="memdesc:a7cfb31af63202568efef5214acfbf3ba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Data type used for each element of the tensor.  <a href="#a7cfb31af63202568efef5214acfbf3ba">More...</a><br /></td></tr>
<tr class="separator:a7cfb31af63202568efef5214acfbf3ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a57360dd9ca408834c0ea1a8ef70a11f4"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a57360dd9ca408834c0ea1a8ef70a11f4">format</a> () const =0</td></tr>
<tr class="memdesc:a57360dd9ca408834c0ea1a8ef70a11f4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Colour format of the image.  <a href="#a57360dd9ca408834c0ea1a8ef70a11f4">More...</a><br /></td></tr>
<tr class="separator:a57360dd9ca408834c0ea1a8ef70a11f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a18064e0011c3869d884653e9e7c47b66"><td class="memItemLeft" align="right" valign="top">virtual size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a18064e0011c3869d884653e9e7c47b66">total_size</a> () const =0</td></tr>
<tr class="memdesc:a18064e0011c3869d884653e9e7c47b66"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the total size of the tensor in bytes.  <a href="#a18064e0011c3869d884653e9e7c47b66">More...</a><br /></td></tr>
<tr class="separator:a18064e0011c3869d884653e9e7c47b66"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a07b929c34ad1dc823d8315876aa403ce"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespacearm__compute.xhtml#a4467b302fc9ec312c40580336ab783da">PaddingSize</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a07b929c34ad1dc823d8315876aa403ce">padding</a> () const =0</td></tr>
<tr class="memdesc:a07b929c34ad1dc823d8315876aa403ce"><td class="mdescLeft">&#160;</td><td class="mdescRight">Padding of tensor.  <a href="#a07b929c34ad1dc823d8315876aa403ce">More...</a><br /></td></tr>
<tr class="separator:a07b929c34ad1dc823d8315876aa403ce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac394d6570ab3325810a3532d39091a52"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ac394d6570ab3325810a3532d39091a52">has_padding</a> () const =0</td></tr>
<tr class="memdesc:ac394d6570ab3325810a3532d39091a52"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks if the tensor has been allocated with padding or not.  <a href="#ac394d6570ab3325810a3532d39091a52">More...</a><br /></td></tr>
<tr class="separator:ac394d6570ab3325810a3532d39091a52"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af555338f11d1d28f258f259ac3da743b"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#af555338f11d1d28f258f259ac3da743b">is_resizable</a> () const =0</td></tr>
<tr class="memdesc:af555338f11d1d28f258f259ac3da743b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Flag indicating whether the size of the tensor can be changed.  <a href="#af555338f11d1d28f258f259ac3da743b">More...</a><br /></td></tr>
<tr class="separator:af555338f11d1d28f258f259ac3da743b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5b65f0a62b9fad74cd3024ff983dd313"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a5b65f0a62b9fad74cd3024ff983dd313">is_dynamic</a> () const =0</td></tr>
<tr class="memdesc:a5b65f0a62b9fad74cd3024ff983dd313"><td class="mdescLeft">&#160;</td><td class="mdescRight">Flag indicating whether the shape of the tensor is dynamic, meaning that it can change on kernel/function execution.  <a href="#a5b65f0a62b9fad74cd3024ff983dd313">More...</a><br /></td></tr>
<tr class="separator:a5b65f0a62b9fad74cd3024ff983dd313"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a755401027819f45173d06db7a922eb10"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a755401027819f45173d06db7a922eb10">are_values_constant</a> () const =0</td></tr>
<tr class="memdesc:a755401027819f45173d06db7a922eb10"><td class="mdescLeft">&#160;</td><td class="mdescRight">Flag indicating whether the values of the tensor are constant, meaning that they can change on kernel/function execution.  <a href="#a755401027819f45173d06db7a922eb10">More...</a><br /></td></tr>
<tr class="separator:a755401027819f45173d06db7a922eb10"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9273842d8e5dc1a3c7fab727176fd7fe"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a9273842d8e5dc1a3c7fab727176fd7fe">set_is_resizable</a> (bool <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#af555338f11d1d28f258f259ac3da743b">is_resizable</a>)=0</td></tr>
<tr class="memdesc:a9273842d8e5dc1a3c7fab727176fd7fe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the flag whether the tensor size can be changed.  <a href="#a9273842d8e5dc1a3c7fab727176fd7fe">More...</a><br /></td></tr>
<tr class="separator:a9273842d8e5dc1a3c7fab727176fd7fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a75157b4ea9a60a8c316d3469f1dc3a17"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a75157b4ea9a60a8c316d3469f1dc3a17">set_are_values_constant</a> (bool <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a755401027819f45173d06db7a922eb10">are_values_constant</a>)=0</td></tr>
<tr class="memdesc:a75157b4ea9a60a8c316d3469f1dc3a17"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the flag whether the tensor values can change during kernel/function execution.  <a href="#a75157b4ea9a60a8c316d3469f1dc3a17">More...</a><br /></td></tr>
<tr class="separator:a75157b4ea9a60a8c316d3469f1dc3a17"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74dfd07380a290c34fe7c8e065029b95"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a74dfd07380a290c34fe7c8e065029b95">valid_region</a> () const =0</td></tr>
<tr class="memdesc:a74dfd07380a290c34fe7c8e065029b95"><td class="mdescLeft">&#160;</td><td class="mdescRight">Valid region of the tensor.  <a href="#a74dfd07380a290c34fe7c8e065029b95">More...</a><br /></td></tr>
<tr class="separator:a74dfd07380a290c34fe7c8e065029b95"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9586081a29fceb532ab270bd843abee6"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a9586081a29fceb532ab270bd843abee6">set_valid_region</a> (const <a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;<a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a74dfd07380a290c34fe7c8e065029b95">valid_region</a>)=0</td></tr>
<tr class="memdesc:a9586081a29fceb532ab270bd843abee6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the valid region of the tensor.  <a href="#a9586081a29fceb532ab270bd843abee6">More...</a><br /></td></tr>
<tr class="separator:a9586081a29fceb532ab270bd843abee6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f3e1a3200223e6a304a533b1016e749"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">quantization_info</a> () const =0</td></tr>
<tr class="memdesc:a3f3e1a3200223e6a304a533b1016e749"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the quantization settings (scale and offset) of the tensor.  <a href="#a3f3e1a3200223e6a304a533b1016e749">More...</a><br /></td></tr>
<tr class="separator:a3f3e1a3200223e6a304a533b1016e749"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a367b5090ab432bc7de2c32369e087ab1"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a> () const =0</td></tr>
<tr class="memdesc:a367b5090ab432bc7de2c32369e087ab1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the data layout of the tensor.  <a href="#a367b5090ab432bc7de2c32369e087ab1">More...</a><br /></td></tr>
<tr class="separator:a367b5090ab432bc7de2c32369e087ab1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarm__compute_1_1misc_1_1_i_cloneable"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarm__compute_1_1misc_1_1_i_cloneable')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarm__compute_1_1misc_1_1_i_cloneable.xhtml">ICloneable&lt; ITensorInfo &gt;</a></td></tr>
<tr class="memitem:a711fa7a27557369760fc1fd236deb51c inherit pub_methods_classarm__compute_1_1misc_1_1_i_cloneable"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1misc_1_1_i_cloneable.xhtml#a711fa7a27557369760fc1fd236deb51c">~ICloneable</a> ()=default</td></tr>
<tr class="memdesc:a711fa7a27557369760fc1fd236deb51c inherit pub_methods_classarm__compute_1_1misc_1_1_i_cloneable"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default virtual desctructor.  <a href="classarm__compute_1_1misc_1_1_i_cloneable.xhtml#a711fa7a27557369760fc1fd236deb51c">More...</a><br /></td></tr>
<tr class="separator:a711fa7a27557369760fc1fd236deb51c inherit pub_methods_classarm__compute_1_1misc_1_1_i_cloneable"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d10e5012a872e7f78f2b539b673049d inherit pub_methods_classarm__compute_1_1misc_1_1_i_cloneable"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1misc_1_1_i_cloneable.xhtml#a4d10e5012a872e7f78f2b539b673049d">clone</a> () const=0</td></tr>
<tr class="memdesc:a4d10e5012a872e7f78f2b539b673049d inherit pub_methods_classarm__compute_1_1misc_1_1_i_cloneable"><td class="mdescLeft">&#160;</td><td class="mdescRight">Provide a clone of the current object of class T.  <a href="classarm__compute_1_1misc_1_1_i_cloneable.xhtml#a4d10e5012a872e7f78f2b539b673049d">More...</a><br /></td></tr>
<tr class="separator:a4d10e5012a872e7f78f2b539b673049d inherit pub_methods_classarm__compute_1_1misc_1_1_i_cloneable"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:ac91bd7db0588f3a6ceda53658a78df5e"><td class="memItemLeft" align="right" valign="top">static constexpr int32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ac91bd7db0588f3a6ceda53658a78df5e">get_dynamic_state_value</a> ()</td></tr>
<tr class="memdesc:ac91bd7db0588f3a6ceda53658a78df5e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the value representing dynamic dimension state.  <a href="#ac91bd7db0588f3a6ceda53658a78df5e">More...</a><br /></td></tr>
<tr class="separator:ac91bd7db0588f3a6ceda53658a78df5e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a98b9497fa57c27f6beeeac88608167ca"><td class="memItemLeft" align="right" valign="top">static constexpr int32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a98b9497fa57c27f6beeeac88608167ca">get_static_state_value</a> ()</td></tr>
<tr class="memdesc:a98b9497fa57c27f6beeeac88608167ca"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the value representing static dimension state.  <a href="#a98b9497fa57c27f6beeeac88608167ca">More...</a><br /></td></tr>
<tr class="separator:a98b9497fa57c27f6beeeac88608167ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae056a42fb510e2fa170a74ab06ee31da"><td class="memTemplParams" colspan="2">template&lt;typename... Infos&gt; </td></tr>
<tr class="memitem:ae056a42fb510e2fa170a74ab06ee31da"><td class="memTemplItemLeft" align="right" valign="top">static std::pair&lt; <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>, <a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ae056a42fb510e2fa170a74ab06ee31da">broadcast_shape_and_valid_region</a> (const Infos &amp;... infos)</td></tr>
<tr class="memdesc:ae056a42fb510e2fa170a74ab06ee31da"><td class="mdescLeft">&#160;</td><td class="mdescRight">If infos are broadcast compatible tensor info's, return the broadcasted shape and the intersection of the broadcasted valid regions of the tensors.  <a href="#ae056a42fb510e2fa170a74ab06ee31da">More...</a><br /></td></tr>
<tr class="separator:ae056a42fb510e2fa170a74ab06ee31da"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Store the tensor's metadata. </p>

<p class="definition">Definition at line <a class="el" href="_i_tensor_info_8h_source.xhtml#l00040">40</a> of file <a class="el" href="_i_tensor_info_8h_source.xhtml">ITensorInfo.h</a>.</p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a id="ae0e15b554cc3958445da66fc718423d4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae0e15b554cc3958445da66fc718423d4">&#9670;&nbsp;</a></span>TensorDimsState</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ae0e15b554cc3958445da66fc718423d4">TensorDimsState</a> =  std::vector&lt;int&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_i_tensor_info_8h_source.xhtml#l00043">43</a> of file <a class="el" href="_i_tensor_info_8h_source.xhtml">ITensorInfo.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="ad998b50febf68540277e121a9c670bfa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad998b50febf68540277e121a9c670bfa">&#9670;&nbsp;</a></span>~ITensorInfo()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual ~<a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default virtual destructor. </p>

<p class="reference">Referenced by <a class="el" href="_i_tensor_info_8h_source.xhtml#l00058">ITensorInfo::get_static_state_value()</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a755401027819f45173d06db7a922eb10"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a755401027819f45173d06db7a922eb10">&#9670;&nbsp;</a></span>are_values_constant()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool are_values_constant </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Flag indicating whether the values of the tensor are constant, meaning that they can change on kernel/function execution. </p>
<dl class="section return"><dt>Returns</dt><dd>True if values are constant else false </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a131e55044642ad05641f9bcbf94d208a">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a131e55044642ad05641f9bcbf94d208a">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00199">SubTensorInfo::are_values_constant()</a>, <a class="el" href="_cpu_fully_connected_8cpp_source.xhtml#l00234">CpuFullyConnected::configure()</a>, <a class="el" href="gpu_2cl_2operators_2_cl_gemm_8cpp_source.xhtml#l00557">ClGemm::configure()</a>, <a class="el" href="_i_tensor_info_8h_source.xhtml#l00058">ITensorInfo::get_static_state_value()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00042">TensorInfo::TensorInfo()</a>, <a class="el" href="_cl_fully_connected_8cpp_source.xhtml#l00328">ClFullyConnected::validate()</a>, <a class="el" href="_cpu_fully_connected_8cpp_source.xhtml#l00354">CpuFullyConnected::validate()</a>, and <a class="el" href="gpu_2cl_2operators_2_cl_gemm_8cpp_source.xhtml#l00612">ClGemm::validate()</a>.</p>

</div>
</div>
<a id="a4f2d0ac983637a0459daf43bcd65cc38"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4f2d0ac983637a0459daf43bcd65cc38">&#9670;&nbsp;</a></span>auto_padding()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool auto_padding </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Update the offset to the first element and the strides to automatically computed values. </p>
<dl class="section note"><dt>Note</dt><dd>The padding used by this method is really conservative so that the tensor can be used for most functions.</dd></dl>
<dl class="section return"><dt>Returns</dt><dd>True if the strides or the offset to the first element have changed. </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a907f837b924945ad1981c8fe8eca61e4">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a907f837b924945ad1981c8fe8eca61e4">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00114">SubTensorInfo::auto_padding()</a>, <a class="el" href="_i_tensor_info_8h_source.xhtml#l00058">ITensorInfo::get_static_state_value()</a>, and <a class="el" href="_access_window_auto_padding_8cpp_source.xhtml#l00073">AccessWindowAutoPadding::update_padding_if_needed()</a>.</p>

</div>
</div>
<a id="ae056a42fb510e2fa170a74ab06ee31da"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae056a42fb510e2fa170a74ab06ee31da">&#9670;&nbsp;</a></span>broadcast_shape_and_valid_region()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static std::pair&lt;<a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>, <a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a>&gt; broadcast_shape_and_valid_region </td>
          <td>(</td>
          <td class="paramtype">const Infos &amp;...&#160;</td>
          <td class="paramname"><em>infos</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>If infos are broadcast compatible tensor info's, return the broadcasted shape and the intersection of the broadcasted valid regions of the tensors. </p>
<p>Two tensor info's are broadcast compatible if their shapes are broadcast compatible.</p>
<p>Two tensor shapes are broadcast compatible if for each dimension, they're equal or one of them is 1.</p>
<p>If two shapes are compatible, each dimension in the broadcasted shape is the max of the original dimensions.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">infos</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a> info's.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The broadcasted shape and valid region, or an empty shape and valid region if the info's are not broadcast compatible. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_i_tensor_info_8h_source.xhtml#l00299">299</a> of file <a class="el" href="_i_tensor_info_8h_source.xhtml">ITensorInfo.h</a>.</p>

<p class="reference">References <a class="el" href="_tensor_shape_8h_source.xhtml#l00211">TensorShape::broadcast_shape()</a>, <a class="el" href="_utility_8h_source.xhtml#l00110">arm_compute::utility::for_each()</a>, <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, and <a class="el" href="_tensor_shape_8h_source.xhtml#l00079">TensorShape::set()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_operator_graph_8cpp_source.xhtml#l00201">arm_compute::experimental::dynamic_fusion::add_op_elementwise_op()</a>, and <a class="el" href="_cl_elementwise_kernel_component_8cpp_source.xhtml#l00048">ClElementwiseKernelComponent::get_window()</a>.</p>
<div class="fragment"><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    {</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        TensorShape bc_shape = <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#a244a32cac2f5011bd0fc49700bf3d5de">TensorShape::broadcast_shape</a>(infos.tensor_shape()...);</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        ValidRegion bc_valid_region{ Coordinates(), bc_shape };</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        <span class="keyword">auto</span> broadcast_valid_region = [&amp;bc_valid_region](<span class="keyword">const</span> ITensorInfo &amp; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>)</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        {</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;            <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.num_dimensions() != 0)</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;            {</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> d = 0; d &lt; bc_valid_region.shape.num_dimensions(); ++d)</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                {</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_broadcast = (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.tensor_shape()[d] == 1);</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">int</span>    anchor_max = std::max(bc_valid_region.anchor[d], <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.valid_region().anchor[d]);</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">size_t</span> valid_min  = std::min(bc_valid_region.shape[d], <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.valid_region().shape[d]);</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                    <span class="keywordflow">if</span>(!is_broadcast || (valid_min == 0))</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                    {</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                        bc_valid_region.anchor.set(d, anchor_max);</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                        bc_valid_region.shape.set(d, valid_min);</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                    }</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                }</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;            }</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        };</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        <a class="code" href="namespacearm__compute_1_1utility.xhtml#a067ebd28103d827b6ec17032e2344064">utility::for_each</a>(broadcast_valid_region, infos...);</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        <span class="keywordflow">return</span> std::pair&lt;TensorShape, ValidRegion&gt;(bc_shape, bc_valid_region);</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    }</div><div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml_a244a32cac2f5011bd0fc49700bf3d5de"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml#a244a32cac2f5011bd0fc49700bf3d5de">arm_compute::TensorShape::broadcast_shape</a></div><div class="ttdeci">static TensorShape broadcast_shape(const Shapes &amp;... shapes)</div><div class="ttdoc">If shapes are broadcast compatible, return the broadcasted shape. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00211">TensorShape.h:211</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utility_xhtml_a067ebd28103d827b6ec17032e2344064"><div class="ttname"><a href="namespacearm__compute_1_1utility.xhtml#a067ebd28103d827b6ec17032e2344064">arm_compute::utility::for_each</a></div><div class="ttdeci">void for_each(F &amp;&amp;)</div><div class="ttdoc">Base case of for_each. </div><div class="ttdef"><b>Definition:</b> <a href="_utility_8h_source.xhtml#l00110">Utility.h:110</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ac57b92957968088a392021cac1d2076b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a></div><div class="ttdeci">ScaleKernelInfo info(interpolation_policy, default_border_mode, PixelValue(), sampling_policy, false)</div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a367b5090ab432bc7de2c32369e087ab1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a367b5090ab432bc7de2c32369e087ab1">&#9670;&nbsp;</a></span>data_layout()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> data_layout </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the data layout of the tensor. </p>
<dl class="section return"><dt>Returns</dt><dd>A DataLayout containing the layout data information. </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a5f63b63606dbbbe54474e6e970a6738c">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a5f63b63606dbbbe54474e6e970a6738c">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_utils_8cpp_source.xhtml#l00263">ImageAccessor::access_tensor()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00344">ValidationInputAccessor::access_tensor()</a>, <a class="el" href="_auto_configuration_8h_source.xhtml#l00066">arm_compute::auto_init_if_empty()</a>, <a class="el" href="src_2core_2_helpers_8cpp_source.xhtml#l00028">arm_compute::calculate_valid_region_scale()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01052">arm_compute::misc::shape_calculator::compute_batch_to_space_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00372">arm_compute::misc::shape_calculator::compute_col2im_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00493">arm_compute::misc::shape_calculator::compute_deconvolution_output_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00461">arm_compute::misc::shape_calculator::compute_deconvolution_upsampled_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00744">arm_compute::misc::shape_calculator::compute_deep_convolution_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00421">arm_compute::misc::shape_calculator::compute_depthwise_convolution_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00523">arm_compute::misc::shape_calculator::compute_im2col_conv_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00988">arm_compute::misc::shape_calculator::compute_output_stage_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00772">arm_compute::misc::shape_calculator::compute_pool_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01185">arm_compute::misc::shape_calculator::compute_prior_box_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00123">arm_compute::misc::shape_calculator::compute_reorg_output_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00838">arm_compute::misc::shape_calculator::compute_roi_align_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01136">arm_compute::misc::shape_calculator::compute_space_to_batch_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01162">arm_compute::misc::shape_calculator::compute_space_to_depth_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00806">arm_compute::misc::shape_calculator::compute_unpool_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01266">arm_compute::misc::shape_calculator::compute_upsample_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00150">arm_compute::misc::shape_calculator::compute_weights_reshaped_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00618">arm_compute::misc::shape_calculator::compute_winograd_filter_transform_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00641">arm_compute::misc::shape_calculator::compute_winograd_input_transform_shape()</a>, <a class="el" href="_cl_direct_conv_default_config_bifrost_8cpp_source.xhtml#l00045">ClDirectConvDefaultConfigBifrost::configure()</a>, <a class="el" href="_cl_direct_conv_default_config_valhall_8cpp_source.xhtml#l00045">ClDirectConvDefaultConfigValhall::configure()</a>, <a class="el" href="_cpu_scale_8cpp_source.xhtml#l00090">CpuScale::configure()</a>, <a class="el" href="_cl_dequantize_kernel_8cpp_source.xhtml#l00069">ClDequantizeKernel::configure()</a>, <a class="el" href="_cl_scale_kernel_8cpp_source.xhtml#l00092">ClScaleKernel::configure()</a>, <a class="el" href="_cl_pool2d_kernel_8cpp_source.xhtml#l00099">ClPool2dKernel::configure()</a>, <a class="el" href="_cl_pool3d_kernel_8cpp_source.xhtml#l00096">ClPool3dKernel::configure()</a>, <a class="el" href="_cpu_pool2d_kernel_8cpp_source.xhtml#l00280">CpuPool2dKernel::configure()</a>, <a class="el" href="_cpu_direct_conv2d_output_stage_kernel_8cpp_source.xhtml#l00387">CpuDirectConv2dOutputStageKernel::configure()</a>, <a class="el" href="_n_e_batch_to_space_layer_kernel_8cpp_source.xhtml#l00088">NEBatchToSpaceLayerKernel::configure()</a>, <a class="el" href="_n_e_space_to_depth_layer_kernel_8cpp_source.xhtml#l00077">NESpaceToDepthLayerKernel::configure()</a>, <a class="el" href="_cpu_direct_conv2d_kernel_8cpp_source.xhtml#l00107">CpuDirectConv2dKernel::configure()</a>, <a class="el" href="_n_e_depth_to_space_layer_kernel_8cpp_source.xhtml#l00074">NEDepthToSpaceLayerKernel::configure()</a>, <a class="el" href="_cpu_pool3d_kernel_8cpp_source.xhtml#l00121">CpuPool3dKernel::configure()</a>, <a class="el" href="_cpu_scale_kernel_8cpp_source.xhtml#l00164">CpuScaleKernel::configure()</a>, <a class="el" href="_cpu_pool2d_8cpp_source.xhtml#l00051">CpuPool2d::configure()</a>, <a class="el" href="_cl_direct_conv2d_8cpp_source.xhtml#l00068">ClDirectConv2d::configure()</a>, <a class="el" href="_cl_winograd_filter_transform_kernel_8cpp_source.xhtml#l00099">ClWinogradFilterTransformKernel::configure()</a>, <a class="el" href="_cl_winograd_input_transform_kernel_8cpp_source.xhtml#l00113">ClWinogradInputTransformKernel::configure()</a>, <a class="el" href="_n_e_space_to_batch_layer_kernel_8cpp_source.xhtml#l00093">NESpaceToBatchLayerKernel::configure()</a>, <a class="el" href="_c_l_channel_shuffle_layer_kernel_8cpp_source.xhtml#l00108">CLChannelShuffleLayerKernel::configure()</a>, <a class="el" href="_n_e_normalization_layer_kernel_8cpp_source.xhtml#l00072">NENormalizationLayerKernel::configure()</a>, <a class="el" href="_c_l_depth_to_space_layer_kernel_8cpp_source.xhtml#l00076">CLDepthToSpaceLayerKernel::configure()</a>, <a class="el" href="_c_l_space_to_depth_layer_kernel_8cpp_source.xhtml#l00077">CLSpaceToDepthLayerKernel::configure()</a>, <a class="el" href="_c_l_batch_to_space_layer_kernel_8cpp_source.xhtml#l00094">CLBatchToSpaceLayerKernel::configure()</a>, <a class="el" href="_c_l_deconvolution_layer_upsample_kernel_8cpp_source.xhtml#l00076">CLDeconvolutionLayerUpsampleKernel::configure()</a>, <a class="el" href="_c_l_normalization_layer_kernel_8cpp_source.xhtml#l00140">CLNormalizationLayerKernel::configure()</a>, <a class="el" href="_c_l_space_to_batch_layer_kernel_8cpp_source.xhtml#l00095">CLSpaceToBatchLayerKernel::configure()</a>, <a class="el" href="_c_l_comparison_kernel_8cpp_source.xhtml#l00112">CLComparisonKernel::configure()</a>, <a class="el" href="_c_l_reorg_layer_kernel_8cpp_source.xhtml#l00079">CLReorgLayerKernel::configure()</a>, <a class="el" href="_n_e_fuse_batch_normalization_kernel_8cpp_source.xhtml#l00220">NEFuseBatchNormalizationKernel::configure()</a>, <a class="el" href="_c_l_normalize_planar_y_u_v_layer_kernel_8cpp_source.xhtml#l00094">CLNormalizePlanarYUVLayerKernel::configure()</a>, <a class="el" href="_cl_direct_conv2d_kernel_8cpp_source.xhtml#l00147">ClDirectConv2dKernel::configure()</a>, <a class="el" href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00314">NEBatchNormalizationLayerKernel::configure()</a>, <a class="el" href="_n_e_r_o_i_align_layer_kernel_8cpp_source.xhtml#l00146">NEROIAlignLayerKernel::configure()</a>, <a class="el" href="_c_l_prior_box_layer_kernel_8cpp_source.xhtml#l00110">CLPriorBoxLayerKernel::configure()</a>, <a class="el" href="_n_e_r_n_n_layer_8cpp_source.xhtml#l00072">NERNNLayer::configure()</a>, <a class="el" href="_n_e_scale_8cpp_source.xhtml#l00051">NEScale::configure()</a>, <a class="el" href="_cpu_winograd_conv2d_8cpp_source.xhtml#l00162">CpuWinogradConv2d::configure()</a>, <a class="el" href="_cpu_direct_conv2d_8cpp_source.xhtml#l00044">CpuDirectConv2d::configure()</a>, <a class="el" href="_cpu_direct_conv3d_8cpp_source.xhtml#l00043">CpuDirectConv3d::configure()</a>, <a class="el" href="_n_e_instance_normalization_layer_8cpp_source.xhtml#l00041">NEInstanceNormalizationLayer::configure()</a>, <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml#l00334">CpuIm2ColKernel::configure()</a>, <a class="el" href="_c_l_r_o_i_align_layer_kernel_8cpp_source.xhtml#l00090">CLROIAlignLayerKernel::configure()</a>, <a class="el" href="_cl_im2_col_kernel_8cpp_source.xhtml#l00304">ClIm2ColKernel::configure()</a>, <a class="el" href="_c_l_deconvolution_reshape_output_kernel_8cpp_source.xhtml#l00125">CLDeconvolutionReshapeOutputKernel::configure()</a>, <a class="el" href="_c_l_batch_normalization_layer_kernel_8cpp_source.xhtml#l00121">CLBatchNormalizationLayerKernel::configure()</a>, <a class="el" href="_c_l_r_n_n_layer_8cpp_source.xhtml#l00082">CLRNNLayer::configure()</a>, <a class="el" href="_cl_fully_connected_8cpp_source.xhtml#l00227">ClFullyConnected::configure()</a>, <a class="el" href="_cpu_fully_connected_8cpp_source.xhtml#l00234">CpuFullyConnected::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_8cpp_source.xhtml#l00163">CLDepthwiseConvolutionLayer::configure()</a>, <a class="el" href="_cl_winograd_conv2d_8cpp_source.xhtml#l00174">ClWinogradConv2d::configure()</a>, <a class="el" href="_n_e_f_f_t_convolution_layer_8cpp_source.xhtml#l00105">NEFFTConvolutionLayer::configure()</a>, <a class="el" href="_n_e_generate_proposals_layer_8cpp_source.xhtml#l00071">NEGenerateProposalsLayer::configure()</a>, <a class="el" href="_cl_gemm_conv2d_8cpp_source.xhtml#l00162">ClGemmConv2d::configure()</a>, <a class="el" href="_cpu_gemm_conv2d_8cpp_source.xhtml#l00256">CpuGemmConv2d::configure()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00078">CLComputeMeanVariance::configure()</a>, <a class="el" href="_n_e_deconvolution_layer_8cpp_source.xhtml#l00156">NEDeconvolutionLayer::configure()</a>, <a class="el" href="_c_l_f_f_t_convolution_layer_8cpp_source.xhtml#l00113">CLFFTConvolutionLayer::configure()</a>, <a class="el" href="_c_l_generate_proposals_layer_8cpp_source.xhtml#l00080">CLGenerateProposalsLayer::configure()</a>, <a class="el" href="_c_l_g_e_m_m_deconvolution_layer_8cpp_source.xhtml#l00224">CLGEMMDeconvolutionLayer::configure()</a>, <a class="el" href="_c_l_direct_deconvolution_layer_8cpp_source.xhtml#l00121">CLDirectDeconvolutionLayer::configure()</a>, <a class="el" href="_n_e_q_l_s_t_m_layer_8cpp_source.xhtml#l00214">NEQLSTMLayer::configure()</a>, <a class="el" href="_accessor_8h_source.xhtml#l00104">Accessor::data_layout()</a>, <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00235">SubTensorInfo::data_layout()</a>, <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00124">SubTensorInfo::dimension()</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00705">arm_compute::error_on_data_layout_not_in()</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00453">arm_compute::error_on_mismatching_data_layouts()</a>, <a class="el" href="_cpu_conv2d_8cpp_source.xhtml#l00123">CpuConv2d::get_convolution_method()</a>, <a class="el" href="_cl_conv2d_8cpp_source.xhtml#l00164">ClConv2d::get_convolution_method()</a>, <a class="el" href="_c_l_deconvolution_layer_8cpp_source.xhtml#l00107">CLDeconvolutionLayer::get_deconvolution_method()</a>, <a class="el" href="_i_tensor_info_8h_source.xhtml#l00058">ITensorInfo::get_static_state_value()</a>, <a class="el" href="_cpu_gemm_conv2d_8cpp_source.xhtml#l00391">CpuGemmConv2d::has_opt_impl()</a>, <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01264">arm_compute::operator&lt;&lt;()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00110">CaffePreproccessor::preprocess()</a>, <a class="el" href="roialign_2generic_2neon_2impl_8cpp_source.xhtml#l00213">arm_compute::cpu::roi_align()</a>, <a class="el" href="roialign_2generic_2neon_2impl_8cpp_source.xhtml#l00032">arm_compute::cpu::roi_align_1x1()</a>, <a class="el" href="roialign_2generic_2neon_2impl_8cpp_source.xhtml#l00102">arm_compute::cpu::roi_align_1x1_qasymm8()</a>, <a class="el" href="_c_p_p_upsample_kernel_8cpp_source.xhtml#l00063">CPPUpsampleKernel::run()</a>, <a class="el" href="_n_e_channel_shuffle_layer_kernel_8cpp_source.xhtml#l00167">NEChannelShuffleLayerKernel::run()</a>, <a class="el" href="_n_e_reorg_layer_kernel_8cpp_source.xhtml#l00102">NEReorgLayerKernel::run()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00205">CLInstanceNormalizationLayerKernel::run()</a>, <a class="el" href="_n_e_r_o_i_align_layer_kernel_8cpp_source.xhtml#l00176">NEROIAlignLayerKernel::run()</a>, <a class="el" href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00377">NEBatchNormalizationLayerKernel::run()</a>, <a class="el" href="_c_l_r_o_i_align_layer_kernel_8cpp_source.xhtml#l00153">CLROIAlignLayerKernel::run()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00128">CLComputeMeanVariance::run()</a>, <a class="el" href="_operator_graph_impl_8cpp_source.xhtml#l00144">Conv2dContent::select_conv_method()</a>, <a class="el" href="_auto_configuration_8h_source.xhtml#l00145">arm_compute::set_data_layout_if_unknown()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00042">TensorInfo::TensorInfo()</a>, <a class="el" href="_cpu_scale_8cpp_source.xhtml#l00149">CpuScale::validate()</a>, <a class="el" href="_cpu_pool2d_kernel_8cpp_source.xhtml#l00326">CpuPool2dKernel::validate()</a>, <a class="el" href="_c_l_deconvolution_layer_upsample_kernel_8cpp_source.xhtml#l00042">CLDeconvolutionLayerUpsampleKernel::validate()</a>, <a class="el" href="_cpu_depthwise_conv2d_assembly_wrapper_kernel_8cpp_source.xhtml#l00258">CpuDepthwiseConv2dAssemblyWrapperKernel::validate()</a>, <a class="el" href="_cpu_pool2d_assembly_wrapper_kernel_8cpp_source.xhtml#l00094">CpuPool2dAssemblyWrapperKernel::validate()</a>, <a class="el" href="_cpu_gemm_direct_conv2d_8cpp_source.xhtml#l00156">CpuGemmDirectConv2d::validate()</a>, <a class="el" href="_c_l_normalize_planar_y_u_v_layer_kernel_8cpp_source.xhtml#l00166">CLNormalizePlanarYUVLayerKernel::validate()</a>, <a class="el" href="_n_e_r_n_n_layer_8cpp_source.xhtml#l00045">NERNNLayer::validate()</a>, <a class="el" href="_cl_fully_connected_8cpp_source.xhtml#l00328">ClFullyConnected::validate()</a>, <a class="el" href="_cpu_fully_connected_8cpp_source.xhtml#l00354">CpuFullyConnected::validate()</a>, <a class="el" href="_c_l_r_n_n_layer_8cpp_source.xhtml#l00047">CLRNNLayer::validate()</a>, <a class="el" href="_c_l_batch_normalization_layer_kernel_8cpp_source.xhtml#l00205">CLBatchNormalizationLayerKernel::validate()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_8cpp_source.xhtml#l00251">CLDepthwiseConvolutionLayer::validate()</a>, <a class="el" href="_cl_gemm_conv2d_8cpp_source.xhtml#l00349">ClGemmConv2d::validate()</a>, <a class="el" href="_n_e_generate_proposals_layer_8cpp_source.xhtml#l00212">NEGenerateProposalsLayer::validate()</a>, <a class="el" href="_cpu_gemm_conv2d_8cpp_source.xhtml#l00423">CpuGemmConv2d::validate()</a>, <a class="el" href="_n_e_f_f_t_convolution_layer_8cpp_source.xhtml#l00263">NEFFTConvolutionLayer::validate()</a>, <a class="el" href="_cl_conv2d_8cpp_source.xhtml#l00124">ClConv2d::validate()</a>, <a class="el" href="_n_e_deconvolution_layer_8cpp_source.xhtml#l00084">NEDeconvolutionLayer::validate()</a>, <a class="el" href="_cl_kernel_graph_8cpp_source.xhtml#l00061">ClDirectConv2dKernel::validate()</a>, <a class="el" href="_c_l_f_f_t_convolution_layer_8cpp_source.xhtml#l00272">CLFFTConvolutionLayer::validate()</a>, <a class="el" href="_c_l_generate_proposals_layer_8cpp_source.xhtml#l00210">CLGenerateProposalsLayer::validate()</a>, <a class="el" href="_c_l_g_e_m_m_deconvolution_layer_8cpp_source.xhtml#l00124">CLGEMMDeconvolutionLayer::validate()</a>, <a class="el" href="_c_l_direct_deconvolution_layer_8cpp_source.xhtml#l00058">CLDirectDeconvolutionLayer::validate()</a>, <a class="el" href="_cl_elementwise_kernel_8cpp_source.xhtml#l00421">ClSaturatedArithmeticKernel::validate()</a>, <a class="el" href="_c_l_convolution_layer_8cpp_source.xhtml#l00128">CLConvolutionLayer::validate()</a>, <a class="el" href="_cpu_direct_conv2d_kernel_8cpp_source.xhtml#l00092">arm_compute::cpu::kernels::validate_and_configure_window()</a>, and <a class="el" href="_cpu_direct_conv2d_kernel_8cpp_source.xhtml#l00060">arm_compute::cpu::kernels::validate_arguments()</a>.</p>

</div>
</div>
<a id="a7cfb31af63202568efef5214acfbf3ba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7cfb31af63202568efef5214acfbf3ba">&#9670;&nbsp;</a></span>data_type()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> data_type </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Data type used for each element of the tensor. </p>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a> data type </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a9a3e72153aeb3ed212e9c3698774e881">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a9a3e72153aeb3ed212e9c3698774e881">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_utils_8cpp_source.xhtml#l00211">NumPyAccessor::access_tensor()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00432">ValidationOutputAccessor::access_tensor()</a>, <a class="el" href="graph__validate__utils_8h_source.xhtml#l00362">VerifyAccessor&lt; D &gt;::access_tensor()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00573">DetectionOutputAccessor::access_tensor()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00646">TopNPredictionsAccessor::access_tensor()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00698">RandomAccessor::access_tensor()</a>, <a class="el" href="_auto_configuration_8h_source.xhtml#l00066">arm_compute::auto_init_if_empty()</a>, <a class="el" href="_cpu_add_kernel_8cpp_source.xhtml#l00042">arm_compute::cpu::kernels::can_interpret_inputs_as_1d_array()</a>, <a class="el" href="_cl_elementwise_kernel_8cpp_source.xhtml#l00259">ClElementwiseKernel::ClElementwiseKernel()</a>, <a class="el" href="_cl_direct_conv_default_config_bifrost_8cpp_source.xhtml#l00045">ClDirectConvDefaultConfigBifrost::configure()</a>, <a class="el" href="_cl_direct_conv_default_config_valhall_8cpp_source.xhtml#l00045">ClDirectConvDefaultConfigValhall::configure()</a>, <a class="el" href="_cl_composite_kernel_8cpp_source.xhtml#l00042">ClCompositeKernel::configure()</a>, <a class="el" href="_cl_dequantize_kernel_8cpp_source.xhtml#l00069">ClDequantizeKernel::configure()</a>, <a class="el" href="_cl_floor_kernel_8cpp_source.xhtml#l00069">ClFloorKernel::configure()</a>, <a class="el" href="_cpu_softmax_kernel_8cpp_source.xhtml#l00113">CpuLogits1DMaxKernel::configure()</a>, <a class="el" href="_cl_copy_kernel_8cpp_source.xhtml#l00076">ClCopyKernel::configure()</a>, <a class="el" href="_cl_elementwise_unary_kernel_8cpp_source.xhtml#l00074">ClElementWiseUnaryKernel::configure()</a>, <a class="el" href="_cl_fill_kernel_8cpp_source.xhtml#l00050">ClFillKernel::configure()</a>, <a class="el" href="_cpu_concatenate_batch_kernel_8cpp_source.xhtml#l00149">CpuConcatenateBatchKernel::configure()</a>, <a class="el" href="_cpu_floor_kernel_8cpp_source.xhtml#l00077">CpuFloorKernel::configure()</a>, <a class="el" href="_n_e_logical_kernel_8cpp_source.xhtml#l00273">NELogicalKernel::configure()</a>, <a class="el" href="_cpu_quantize_kernel_8cpp_source.xhtml#l00111">CpuQuantizeKernel::configure()</a>, <a class="el" href="_cl_scale_kernel_8cpp_source.xhtml#l00092">ClScaleKernel::configure()</a>, <a class="el" href="_cl_width_concatenate2_tensors_kernel_8cpp_source.xhtml#l00076">ClWidthConcatenate2TensorsKernel::configure()</a>, <a class="el" href="_cl_activation_kernel_8cpp_source.xhtml#l00094">ClActivationKernel::configure()</a>, <a class="el" href="_cl_pool2d_kernel_8cpp_source.xhtml#l00099">ClPool2dKernel::configure()</a>, <a class="el" href="_cl_pool3d_kernel_8cpp_source.xhtml#l00096">ClPool3dKernel::configure()</a>, <a class="el" href="_cl_height_concatenate_kernel_8cpp_source.xhtml#l00076">ClHeightConcatenateKernel::configure()</a>, <a class="el" href="_cl_width_concatenate_kernel_8cpp_source.xhtml#l00075">ClWidthConcatenateKernel::configure()</a>, <a class="el" href="_cl_quantize_kernel_8cpp_source.xhtml#l00069">ClQuantizeKernel::configure()</a>, <a class="el" href="_cpu_activation_kernel_8cpp_source.xhtml#l00181">CpuActivationKernel::configure()</a>, <a class="el" href="_cl_permute_kernel_8cpp_source.xhtml#l00085">ClPermuteKernel::configure()</a>, <a class="el" href="_cl_width_concatenate4_tensors_kernel_8cpp_source.xhtml#l00078">ClWidthConcatenate4TensorsKernel::configure()</a>, <a class="el" href="_cl_softmax_8cpp_source.xhtml#l00055">ClSoftmax::configure()</a>, <a class="el" href="_cpu_pool2d_kernel_8cpp_source.xhtml#l00280">CpuPool2dKernel::configure()</a>, <a class="el" href="_cl_batch_concatenate_kernel_8cpp_source.xhtml#l00067">ClBatchConcatenateKernel::configure()</a>, <a class="el" href="_cl_crop_kernel_8cpp_source.xhtml#l00049">ClCropKernel::configure()</a>, <a class="el" href="_cl_depth_concatenate_kernel_8cpp_source.xhtml#l00067">ClDepthConcatenateKernel::configure()</a>, <a class="el" href="_c_l_strided_slice_kernel_8cpp_source.xhtml#l00078">CLStridedSliceKernel::configure()</a>, <a class="el" href="_cpu_elementwise_unary_kernel_8cpp_source.xhtml#l00099">CpuElementwiseUnaryKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_native_kernel_8cpp_source.xhtml#l00166">ClGemmLowpMatrixMultiplyNativeKernel::configure()</a>, <a class="el" href="_cpu_concatenate_depth_kernel_8cpp_source.xhtml#l00149">CpuConcatenateDepthKernel::configure()</a>, <a class="el" href="_cpu_direct_conv2d_output_stage_kernel_8cpp_source.xhtml#l00387">CpuDirectConv2dOutputStageKernel::configure()</a>, <a class="el" href="_n_e_tile_kernel_8cpp_source.xhtml#l00067">NETileKernel::configure()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_reduction_kernel_8cpp_source.xhtml#l00071">CpuGemmLowpMatrixAReductionKernel::configure()</a>, <a class="el" href="_cpu_max_unpooling_layer_kernel_8cpp_source.xhtml#l00100">CpuMaxUnpoolingLayerKernel::configure()</a>, <a class="el" href="_n_e_space_to_depth_layer_kernel_8cpp_source.xhtml#l00077">NESpaceToDepthLayerKernel::configure()</a>, <a class="el" href="_cl_gemm_reshape_lhs_matrix_kernel_8cpp_source.xhtml#l00109">ClGemmReshapeLhsMatrixKernel::configure()</a>, <a class="el" href="_cpu_direct_conv2d_kernel_8cpp_source.xhtml#l00107">CpuDirectConv2dKernel::configure()</a>, <a class="el" href="_n_e_generate_proposals_layer_kernel_8cpp_source.xhtml#l00129">NEComputeAllAnchorsKernel::configure()</a>, <a class="el" href="_cpu_pool3d_kernel_8cpp_source.xhtml#l00121">CpuPool3dKernel::configure()</a>, <a class="el" href="_cpu_scale_kernel_8cpp_source.xhtml#l00164">CpuScaleKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_native_kernel_8cpp_source.xhtml#l00225">ClGemmMatrixMultiplyNativeKernel::configure()</a>, <a class="el" href="_cl_direct_conv2d_8cpp_source.xhtml#l00068">ClDirectConv2d::configure()</a>, <a class="el" href="_c_l_max_unpooling_layer_kernel_8cpp_source.xhtml#l00080">CLMaxUnpoolingLayerKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_only_rhs_m_m_u_l_kernel_8cpp_source.xhtml#l00206">ClGemmMatrixMultiplyReshapedOnlyRhsMMULKernel::configure()</a>, <a class="el" href="_cl_winograd_input_transform_kernel_8cpp_source.xhtml#l00113">ClWinogradInputTransformKernel::configure()</a>, <a class="el" href="_cl_winograd_filter_transform_kernel_8cpp_source.xhtml#l00099">ClWinogradFilterTransformKernel::configure()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00159">CLInstanceNormalizationLayerKernel::configure()</a>, <a class="el" href="_cpu_sub_kernel_8cpp_source.xhtml#l00115">CpuSubKernel::configure()</a>, <a class="el" href="_c_l_reverse_kernel_8cpp_source.xhtml#l00072">CLReverseKernel::configure()</a>, <a class="el" href="_c_l_select_kernel_8cpp_source.xhtml#l00071">CLSelectKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_by_fixed_point_kernel_8cpp_source.xhtml#l00085">ClGemmLowpQuantizeDownInt32ScaleByFixedPointKernel::configure()</a>, <a class="el" href="_c_l_channel_shuffle_layer_kernel_8cpp_source.xhtml#l00108">CLChannelShuffleLayerKernel::configure()</a>, <a class="el" href="_c_l_depth_to_space_layer_kernel_8cpp_source.xhtml#l00076">CLDepthToSpaceLayerKernel::configure()</a>, <a class="el" href="_cl_softmax_kernel_8cpp_source.xhtml#l00162">ClLogits1DMaxShiftExpSumKernel::configure()</a>, <a class="el" href="_c_l_space_to_depth_layer_kernel_8cpp_source.xhtml#l00077">CLSpaceToDepthLayerKernel::configure()</a>, <a class="el" href="_cl_winograd_output_transform_kernel_8cpp_source.xhtml#l00130">ClWinogradOutputTransformKernel::configure()</a>, <a class="el" href="_c_l_batch_to_space_layer_kernel_8cpp_source.xhtml#l00094">CLBatchToSpaceLayerKernel::configure()</a>, <a class="el" href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00135">CPPBoxWithNonMaximaSuppressionLimit::configure()</a>, <a class="el" href="_n_e_range_kernel_8cpp_source.xhtml#l00146">NERangeKernel::configure()</a>, <a class="el" href="_cl_cast_kernel_8cpp_source.xhtml#l00080">ClCastKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_by_float_kernel_8cpp_source.xhtml#l00088">ClGemmLowpQuantizeDownInt32ScaleByFloatKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_kernel_8cpp_source.xhtml#l00085">ClGemmLowpQuantizeDownInt32ScaleKernel::configure()</a>, <a class="el" href="_c_l_generate_proposals_layer_kernel_8cpp_source.xhtml#l00079">CLComputeAllAnchorsKernel::configure()</a>, <a class="el" href="_c_l_normalization_layer_kernel_8cpp_source.xhtml#l00140">CLNormalizationLayerKernel::configure()</a>, <a class="el" href="_n_e_bounding_box_transform_kernel_8cpp_source.xhtml#l00145">NEBoundingBoxTransformKernel::configure()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_normalization_kernel_8cpp_source.xhtml#l00088">CLQLSTMLayerNormalizationKernel::configure()</a>, <a class="el" href="_n_e_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00121">NEROIPoolingLayerKernel::configure()</a>, <a class="el" href="_c_l_space_to_batch_layer_kernel_8cpp_source.xhtml#l00095">CLSpaceToBatchLayerKernel::configure()</a>, <a class="el" href="_c_l_f_f_t_scale_kernel_8cpp_source.xhtml#l00066">CLFFTScaleKernel::configure()</a>, <a class="el" href="_c_l_gather_kernel_8cpp_source.xhtml#l00086">CLGatherKernel::configure()</a>, <a class="el" href="_cpu_depthwise_conv2d_native_kernel_8cpp_source.xhtml#l00146">CpuDepthwiseConv2dNativeKernel::configure()</a>, <a class="el" href="_cpu_direct_conv3d_kernel_8cpp_source.xhtml#l00128">CpuDirectConv3dKernel::configure()</a>, <a class="el" href="_cpu_gemm_matrix_addition_kernel_8cpp_source.xhtml#l00065">CpuGemmMatrixAdditionKernel::configure()</a>, <a class="el" href="_c_l_comparison_kernel_8cpp_source.xhtml#l00112">CLComparisonKernel::configure()</a>, <a class="el" href="_cpu_depthwise_conv2d_assembly_wrapper_kernel_8cpp_source.xhtml#l00210">CpuDepthwiseConv2dAssemblyWrapperKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00143">ClGemmLowpMatrixMultiplyReshapedKernel::configure()</a>, <a class="el" href="_c_l_tile_kernel_8cpp_source.xhtml#l00068">CLTileKernel::configure()</a>, <a class="el" href="_c_p_p_detection_post_process_layer_8cpp_source.xhtml#l00218">CPPDetectionPostProcessLayer::configure()</a>, <a class="el" href="_c_l_f_f_t_digit_reverse_kernel_8cpp_source.xhtml#l00081">CLFFTDigitReverseKernel::configure()</a>, <a class="el" href="_n_e_reduction_operation_kernel_8cpp_source.xhtml#l01680">NEReductionOperationKernel::configure()</a>, <a class="el" href="_c_l_reorg_layer_kernel_8cpp_source.xhtml#l00079">CLReorgLayerKernel::configure()</a>, <a class="el" href="_n_e_select_kernel_8cpp_source.xhtml#l00169">NESelectKernel::configure()</a>, <a class="el" href="_c_l_mean_std_dev_normalization_kernel_8cpp_source.xhtml#l00070">CLMeanStdDevNormalizationKernel::configure()</a>, <a class="el" href="_cpu_pool2d_assembly_wrapper_kernel_8cpp_source.xhtml#l00044">CpuPool2dAssemblyWrapperKernel::configure()</a>, <a class="el" href="_n_e_fuse_batch_normalization_kernel_8cpp_source.xhtml#l00220">NEFuseBatchNormalizationKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_output_stage_kernel_8cpp_source.xhtml#l00132">ClGemmLowpOffsetContributionOutputStageKernel::configure()</a>, <a class="el" href="_c_l_normalize_planar_y_u_v_layer_kernel_8cpp_source.xhtml#l00094">CLNormalizePlanarYUVLayerKernel::configure()</a>, <a class="el" href="_n_e_gather_kernel_8cpp_source.xhtml#l00170">NEGatherKernel::configure()</a>, <a class="el" href="_c_l_range_kernel_8cpp_source.xhtml#l00079">CLRangeKernel::configure()</a>, <a class="el" href="_cpu_softmax_8cpp_source.xhtml#l00059">CpuSoftmaxGeneric&lt; IS_LOG &gt;::configure()</a>, <a class="el" href="_n_e_r_o_i_align_layer_kernel_8cpp_source.xhtml#l00146">NEROIAlignLayerKernel::configure()</a>, <a class="el" href="_cl_direct_conv2d_kernel_8cpp_source.xhtml#l00147">ClDirectConv2dKernel::configure()</a>, <a class="el" href="_c_l_reduction_operation_kernel_8cpp_source.xhtml#l00086">CLReductionOperationKernel::configure()</a>, <a class="el" href="_cpu_add_kernel_8cpp_source.xhtml#l00256">CpuAddKernel::configure()</a>, <a class="el" href="_cpu_gemm_matrix_multiply_kernel_8cpp_source.xhtml#l00128">CpuGemmMatrixMultiplyKernel::configure()</a>, <a class="el" href="_cpu_mul_kernel_8cpp_source.xhtml#l01478">CpuMulKernel::configure()</a>, <a class="el" href="_c_l_pad_layer_kernel_8cpp_source.xhtml#l00078">CLPadLayerKernel::configure()</a>, <a class="el" href="_cl_col2_im_kernel_8cpp_source.xhtml#l00093">ClCol2ImKernel::configure()</a>, <a class="el" href="_c_l_prior_box_layer_kernel_8cpp_source.xhtml#l00110">CLPriorBoxLayerKernel::configure()</a>, <a class="el" href="_cpu_gemm_direct_conv2d_8cpp_source.xhtml#l00110">CpuGemmDirectConv2d::configure()</a>, <a class="el" href="_n_e_space_to_batch_layer_kernel_8cpp_source.xhtml#l00109">NESpaceToBatchLayerKernel::configure()</a>, <a class="el" href="_c_l_f_f_t_radix_stage_kernel_8cpp_source.xhtml#l00089">CLFFTRadixStageKernel::configure()</a>, <a class="el" href="_cl_direct_conv3d_kernel_8cpp_source.xhtml#l00092">ClDirectConv3dKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00288">ClGemmLowpMatrixMultiplyReshapedOnlyRhsKernel::configure()</a>, <a class="el" href="_c_l_l2_normalize_layer_kernel_8cpp_source.xhtml#l00085">CLL2NormalizeLayerKernel::configure()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00113">ClMulKernel::configure()</a>, <a class="el" href="_c_l_bounding_box_transform_kernel_8cpp_source.xhtml#l00096">CLBoundingBoxTransformKernel::configure()</a>, <a class="el" href="_n_e_reduce_mean_8cpp_source.xhtml#l00114">NEReduceMean::configure()</a>, <a class="el" href="_n_e_r_n_n_layer_8cpp_source.xhtml#l00072">NERNNLayer::configure()</a>, <a class="el" href="_n_e_space_to_batch_layer_8cpp_source.xhtml#l00045">NESpaceToBatchLayer::configure()</a>, <a class="el" href="_cpu_winograd_conv2d_8cpp_source.xhtml#l00162">CpuWinogradConv2d::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_native_kernel_8cpp_source.xhtml#l00174">CLDepthwiseConvolutionLayerNativeKernel::configure()</a>, <a class="el" href="_c_l_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00079">CLROIPoolingLayerKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_reduction_kernel_8cpp_source.xhtml#l00076">ClGemmLowpMatrixAReductionKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00187">ClGemmMatrixMultiplyReshapedOnlyRhsKernel::configure()</a>, <a class="el" href="_c_l_fill_border_kernel_8cpp_source.xhtml#l00069">CLFillBorderKernel::configure()</a>, <a class="el" href="_c_l_stack_layer_kernel_8cpp_source.xhtml#l00087">CLStackLayerKernel::configure()</a>, <a class="el" href="_c_l_reduce_mean_8cpp_source.xhtml#l00114">CLReduceMean::configure()</a>, <a class="el" href="_n_e_fill_border_kernel_8cpp_source.xhtml#l00103">NEFillBorderKernel::configure()</a>, <a class="el" href="_cl_weights_reshape_kernel_8cpp_source.xhtml#l00078">ClWeightsReshapeKernel::configure()</a>, <a class="el" href="_n_e_reduction_operation_8cpp_source.xhtml#l00105">NEReductionOperation::configure()</a>, <a class="el" href="_c_l_arg_min_max_layer_kernel_8cpp_source.xhtml#l00080">CLArgMinMaxLayerKernel::configure()</a>, <a class="el" href="_c_l_r_o_i_align_layer_kernel_8cpp_source.xhtml#l00090">CLROIAlignLayerKernel::configure()</a>, <a class="el" href="_cl_im2_col_kernel_8cpp_source.xhtml#l00304">ClIm2ColKernel::configure()</a>, <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml#l00334">CpuIm2ColKernel::configure()</a>, <a class="el" href="_n_e_detection_post_process_layer_8cpp_source.xhtml#l00042">NEDetectionPostProcessLayer::configure()</a>, <a class="el" href="_n_e_normalization_layer_8cpp_source.xhtml#l00044">NENormalizationLayer::configure()</a>, <a class="el" href="_c_l_deconvolution_reshape_output_kernel_8cpp_source.xhtml#l00125">CLDeconvolutionReshapeOutputKernel::configure()</a>, <a class="el" href="_c_l_batch_normalization_layer_kernel_8cpp_source.xhtml#l00121">CLBatchNormalizationLayerKernel::configure()</a>, <a class="el" href="_c_l_fuse_batch_normalization_kernel_8cpp_source.xhtml#l00117">CLFuseBatchNormalizationKernel::configure()</a>, <a class="el" href="_c_l_r_n_n_layer_8cpp_source.xhtml#l00082">CLRNNLayer::configure()</a>, <a class="el" href="_cl_fully_connected_8cpp_source.xhtml#l00227">ClFullyConnected::configure()</a>, <a class="el" href="_c_l_deconvolution_layer_upsample_8cpp_source.xhtml#l00055">CLDeconvolutionLayerUpsample::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00188">ClGemmMatrixMultiplyReshapedKernel::configure()</a>, <a class="el" href="_c_l_space_to_batch_layer_8cpp_source.xhtml#l00052">CLSpaceToBatchLayer::configure()</a>, <a class="el" href="_cpu_fully_connected_8cpp_source.xhtml#l00234">CpuFullyConnected::configure()</a>, <a class="el" href="gpu_2cl_2operators_2_cl_gemm_8cpp_source.xhtml#l00557">ClGemm::configure()</a>, <a class="el" href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00811">CpuGemmAssemblyDispatch::configure()</a>, <a class="el" href="_c_l_softmax_layer_8cpp_source.xhtml#l00068">CLSoftmaxLayerGeneric&lt; IS_LOG &gt;::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_8cpp_source.xhtml#l00163">CLDepthwiseConvolutionLayer::configure()</a>, <a class="el" href="_c_l_reduction_operation_8cpp_source.xhtml#l00111">CLReductionOperation::configure()</a>, <a class="el" href="_c_l_arg_min_max_layer_8cpp_source.xhtml#l00121">CLArgMinMaxLayer::configure()</a>, <a class="el" href="gpu_2cl_2operators_2_cl_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00256">ClGemmLowpMatrixMultiplyCore::configure()</a>, <a class="el" href="_cl_winograd_conv2d_8cpp_source.xhtml#l00174">ClWinogradConv2d::configure()</a>, <a class="el" href="_n_e_generate_proposals_layer_8cpp_source.xhtml#l00071">NEGenerateProposalsLayer::configure()</a>, <a class="el" href="_cpu_softmax_kernel_8cpp_source.xhtml#l00252">CpuLogits1DSoftmaxKernel&lt; IS_LOG &gt;::configure()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00355">ClComplexMulKernel::configure()</a>, <a class="el" href="_cl_gemm_conv2d_8cpp_source.xhtml#l00162">ClGemmConv2d::configure()</a>, <a class="el" href="_n_e_l_s_t_m_layer_8cpp_source.xhtml#l00057">NELSTMLayer::configure()</a>, <a class="el" href="_cpu_gemm_conv2d_8cpp_source.xhtml#l00256">CpuGemmConv2d::configure()</a>, <a class="el" href="_cl_gemm_lowp_reduction_kernel_8cpp_source.xhtml#l00152">ClGemmLowpMatrixBReductionKernel::configure()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00078">CLComputeMeanVariance::configure()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00108">CpuGemmLowpMatrixMultiplyCore::configure()</a>, <a class="el" href="_n_e_deconvolution_layer_8cpp_source.xhtml#l00156">NEDeconvolutionLayer::configure()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_reduction_kernel_8cpp_source.xhtml#l00192">CpuGemmLowpMatrixBReductionKernel::configure()</a>, <a class="el" href="_c_l_generate_proposals_layer_8cpp_source.xhtml#l00080">CLGenerateProposalsLayer::configure()</a>, <a class="el" href="_c_l_g_e_m_m_deconvolution_layer_8cpp_source.xhtml#l00224">CLGEMMDeconvolutionLayer::configure()</a>, <a class="el" href="_c_l_direct_deconvolution_layer_8cpp_source.xhtml#l00121">CLDirectDeconvolutionLayer::configure()</a>, <a class="el" href="_cpu_mul_kernel_8cpp_source.xhtml#l01685">CpuComplexMulKernel::configure()</a>, <a class="el" href="_n_e_q_l_s_t_m_layer_8cpp_source.xhtml#l00214">NEQLSTMLayer::configure()</a>, <a class="el" href="_c_l_l_s_t_m_layer_8cpp_source.xhtml#l00073">CLLSTMLayer::configure()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml#l00172">CLQLSTMLayer::configure()</a>, <a class="el" href="_i_tensor_8cpp_source.xhtml#l00035">ITensor::copy_from()</a>, <a class="el" href="_accessor_8h_source.xhtml#l00109">Accessor::data_type()</a>, <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00164">SubTensorInfo::data_type()</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00653">arm_compute::error_on_data_type_not_in()</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00504">arm_compute::error_on_mismatching_data_types()</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00558">arm_compute::error_on_mismatching_quantization_info()</a>, <a class="el" href="src_2core_2_c_p_p_2_validate_8h_source.xhtml#l00064">arm_compute::error_on_unsupported_cpu_bf16()</a>, <a class="el" href="src_2core_2_c_p_p_2_validate_8h_source.xhtml#l00041">arm_compute::error_on_unsupported_cpu_fp16()</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00801">arm_compute::error_on_unsupported_fp16()</a>, <a class="el" href="_cl_direct_convolution_kernel_component_8cpp_source.xhtml#l00251">arm_compute::experimental::dynamic_fusion::export_to_cl_image_support()</a>, <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00444">arm_compute::export_weights_to_cl_image()</a>, <a class="el" href="_cpu_elementwise_kernel_8cpp_source.xhtml#l00277">CpuComparisonKernel::get_available_kernels()</a>, <a class="el" href="_cpu_conv2d_8cpp_source.xhtml#l00123">CpuConv2d::get_convolution_method()</a>, <a class="el" href="_cl_conv2d_8cpp_source.xhtml#l00164">ClConv2d::get_convolution_method()</a>, <a class="el" href="_c_l_deconvolution_layer_8cpp_source.xhtml#l00107">CLDeconvolutionLayer::get_deconvolution_method()</a>, <a class="el" href="_i_tensor_info_8h_source.xhtml#l00058">ITensorInfo::get_static_state_value()</a>, <a class="el" href="_cl_floor_kernel_component_8cpp_source.xhtml#l00046">ClFloorKernelComponent::get_window()</a>, <a class="el" href="_cl_elementwise_kernel_component_8cpp_source.xhtml#l00048">ClElementwiseKernelComponent::get_window()</a>, <a class="el" href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00694">CpuGemmAssemblyDispatch::has_opt_impl()</a>, <a class="el" href="l2normlayer_2generic_2neon_2impl_8cpp_source.xhtml#l00038">arm_compute::cpu::l2_normalize_x()</a>, <a class="el" href="l2normlayer_2generic_2neon_2impl_8cpp_source.xhtml#l00079">arm_compute::cpu::l2_normalize_yz()</a>, <a class="el" href="gemm__matrix__mul_2generic_2neon_2impl_8cpp_source.xhtml#l00462">arm_compute::cpu::matrix_matrix_multiply_f32()</a>, <a class="el" href="_cpu_softmax_kernel_8cpp_source.xhtml#l00154">CpuLogits1DMaxKernel::name()</a>, <a class="el" href="activation_2generic_2neon_2qasymm8_8cpp_source.xhtml#l00420">arm_compute::cpu::neon_qasymm8_activation_lut()</a>, <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01264">arm_compute::operator&lt;&lt;()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00110">CaffePreproccessor::preprocess()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00069">TFPreproccessor::preprocess()</a>, <a class="el" href="roialign_2generic_2neon_2impl_8cpp_source.xhtml#l00213">arm_compute::cpu::roi_align()</a>, <a class="el" href="roialign_2generic_2neon_2impl_8cpp_source.xhtml#l00102">arm_compute::cpu::roi_align_1x1_qasymm8()</a>, <a class="el" href="_c_p_p_upsample_kernel_8cpp_source.xhtml#l00063">CPPUpsampleKernel::run()</a>, <a class="el" href="_n_e_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00150">NEROIPoolingLayerKernel::run()</a>, <a class="el" href="_c_p_p_box_with_non_maxima_suppression_limit_kernel_8cpp_source.xhtml#l00398">CPPBoxWithNonMaximaSuppressionLimitKernel::run()</a>, <a class="el" href="_n_e_generate_proposals_layer_kernel_8cpp_source.xhtml#l00160">NEComputeAllAnchorsKernel::run()</a>, <a class="el" href="_n_e_instance_normalization_layer_kernel_8cpp_source.xhtml#l00162">NEInstanceNormalizationLayerKernel::run()</a>, <a class="el" href="_c_p_p_top_k_v_kernel_8cpp_source.xhtml#l00129">CPPTopKVKernel::run()</a>, <a class="el" href="_n_e_range_kernel_8cpp_source.xhtml#l00175">NERangeKernel::run()</a>, <a class="el" href="_n_e_mean_std_dev_normalization_kernel_8cpp_source.xhtml#l00154">NEMeanStdDevNormalizationKernel::run()</a>, <a class="el" href="_n_e_fill_border_kernel_8cpp_source.xhtml#l00122">NEFillBorderKernel::run()</a>, <a class="el" href="_n_e_select_kernel_8cpp_source.xhtml#l00209">NESelectKernel::run()</a>, <a class="el" href="_n_e_bounding_box_transform_kernel_8cpp_source.xhtml#l00173">NEBoundingBoxTransformKernel::run()</a>, <a class="el" href="_c_l_reduction_operation_kernel_8cpp_source.xhtml#l00198">CLReductionOperationKernel::run()</a>, <a class="el" href="_c_p_p_detection_post_process_layer_8cpp_source.xhtml#l00288">CPPDetectionPostProcessLayer::run()</a>, <a class="el" href="_n_e_r_o_i_align_layer_kernel_8cpp_source.xhtml#l00176">NEROIAlignLayerKernel::run()</a>, <a class="el" href="_n_e_crop_kernel_8cpp_source.xhtml#l00292">NECropKernel::run()</a>, <a class="el" href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00377">NEBatchNormalizationLayerKernel::run()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_native_kernel_8cpp_source.xhtml#l00342">CLDepthwiseConvolutionLayerNativeKernel::run()</a>, <a class="el" href="_n_e_l_s_t_m_layer_8cpp_source.xhtml#l00605">NELSTMLayer::run()</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8cpp_source.xhtml#l00771">arm_compute::cpu::run_depthwise_quanitized8bit()</a>, <a class="el" href="_cpu_pool2d_kernel_8cpp_source.xhtml#l00351">CpuPool2dKernel::run_op()</a>, <a class="el" href="_cpu_cast_kernel_8cpp_source.xhtml#l00178">CpuCastKernel::run_op()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00269">ClMulKernel::run_op()</a>, <a class="el" href="_operator_graph_impl_8cpp_source.xhtml#l00144">Conv2dContent::select_conv_method()</a>, <a class="el" href="_auto_configuration_8h_source.xhtml#l00126">arm_compute::set_data_type_if_unknown()</a>, <a class="el" href="_auto_configuration_8h_source.xhtml#l00107">arm_compute::set_format_if_unknown()</a>, <a class="el" href="_auto_configuration_8h_source.xhtml#l00164">arm_compute::set_quantization_info_if_empty()</a>, <a class="el" href="src_2core_2_sub_tensor_info_8cpp_source.xhtml#l00089">SubTensorInfo::set_tensor_shape()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00042">TensorInfo::TensorInfo()</a>, <a class="el" href="_cpu_transpose_kernel_8cpp_source.xhtml#l00455">CpuTransposeKernel::validate()</a>, <a class="el" href="_cl_transpose_kernel_8cpp_source.xhtml#l00083">ClTransposeKernel::validate()</a>, <a class="el" href="_cpu_quantize_kernel_8cpp_source.xhtml#l00156">CpuQuantizeKernel::validate()</a>, <a class="el" href="_cl_softmax_8cpp_source.xhtml#l00100">ClSoftmax::validate()</a>, <a class="el" href="_cpu_convert_fully_connected_weights_kernel_8cpp_source.xhtml#l00065">CpuConvertFullyConnectedWeightsKernel::validate()</a>, <a class="el" href="_cl_crop_kernel_8cpp_source.xhtml#l00090">ClCropKernel::validate()</a>, <a class="el" href="_cpu_elementwise_unary_kernel_8cpp_source.xhtml#l00120">CpuElementwiseUnaryKernel::validate()</a>, <a class="el" href="_cl_convert_fully_connected_weights_kernel_8cpp_source.xhtml#l00088">ClConvertFullyConnectedWeightsKernel::validate()</a>, <a class="el" href="_cpu_gemm_interleave4x4_kernel_8cpp_source.xhtml#l00057">CpuGemmInterleave4x4Kernel::validate()</a>, <a class="el" href="_c_l_deconvolution_layer_upsample_kernel_8cpp_source.xhtml#l00042">CLDeconvolutionLayerUpsampleKernel::validate()</a>, <a class="el" href="_cpu_depthwise_conv2d_assembly_wrapper_kernel_8cpp_source.xhtml#l00258">CpuDepthwiseConv2dAssemblyWrapperKernel::validate()</a>, <a class="el" href="_cpu_softmax_8cpp_source.xhtml#l00120">CpuSoftmaxGeneric&lt; IS_LOG &gt;::validate()</a>, <a class="el" href="_cpu_pool2d_assembly_wrapper_kernel_8cpp_source.xhtml#l00094">CpuPool2dAssemblyWrapperKernel::validate()</a>, <a class="el" href="_cpu_gemm_direct_conv2d_8cpp_source.xhtml#l00156">CpuGemmDirectConv2d::validate()</a>, <a class="el" href="_cpu_gemm_lowp_output_stage_8cpp_source.xhtml#l00105">CpuGemmLowpOutputStage::validate()</a>, <a class="el" href="_n_e_select_kernel_8cpp_source.xhtml#l00187">NESelectKernel::validate()</a>, <a class="el" href="_cpu_direct_conv2d_8cpp_source.xhtml#l00086">CpuDirectConv2d::validate()</a>, <a class="el" href="_n_e_crop_kernel_8cpp_source.xhtml#l00210">NECropKernel::validate()</a>, <a class="el" href="_n_e_r_n_n_layer_8cpp_source.xhtml#l00045">NERNNLayer::validate()</a>, <a class="el" href="_n_e_f_f_t1_d_8cpp_source.xhtml#l00111">NEFFT1D::validate()</a>, <a class="el" href="_cpu_gemm_transpose1x_w_kernel_8cpp_source.xhtml#l00060">CpuGemmTranspose1xWKernel::validate()</a>, <a class="el" href="_n_e_l2_normalize_layer_8cpp_source.xhtml#l00062">NEL2NormalizeLayer::validate()</a>, <a class="el" href="_n_e_reduction_operation_8cpp_source.xhtml#l00066">NEReductionOperation::validate()</a>, <a class="el" href="_cl_fully_connected_8cpp_source.xhtml#l00328">ClFullyConnected::validate()</a>, <a class="el" href="_cpu_fully_connected_8cpp_source.xhtml#l00354">CpuFullyConnected::validate()</a>, <a class="el" href="_n_e_detection_post_process_layer_8cpp_source.xhtml#l00074">NEDetectionPostProcessLayer::validate()</a>, <a class="el" href="gpu_2cl_2operators_2_cl_gemm_8cpp_source.xhtml#l00612">ClGemm::validate()</a>, <a class="el" href="_c_l_r_n_n_layer_8cpp_source.xhtml#l00047">CLRNNLayer::validate()</a>, <a class="el" href="_c_l_softmax_layer_8cpp_source.xhtml#l00082">CLSoftmaxLayerGeneric&lt; IS_LOG &gt;::validate()</a>, <a class="el" href="_cpu_gemm_8cpp_source.xhtml#l00153">CpuGemm::validate()</a>, <a class="el" href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00764">CpuGemmAssemblyDispatch::validate()</a>, <a class="el" href="gpu_2cl_2operators_2_cl_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00472">ClGemmLowpMatrixMultiplyCore::validate()</a>, <a class="el" href="_c_l_l2_normalize_layer_8cpp_source.xhtml#l00079">CLL2NormalizeLayer::validate()</a>, <a class="el" href="_c_l_arg_min_max_layer_8cpp_source.xhtml#l00048">CLArgMinMaxLayer::validate()</a>, <a class="el" href="_c_l_reduction_operation_8cpp_source.xhtml#l00048">CLReductionOperation::validate()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_8cpp_source.xhtml#l00251">CLDepthwiseConvolutionLayer::validate()</a>, <a class="el" href="_cl_gemm_conv2d_8cpp_source.xhtml#l00349">ClGemmConv2d::validate()</a>, <a class="el" href="_n_e_generate_proposals_layer_8cpp_source.xhtml#l00212">NEGenerateProposalsLayer::validate()</a>, <a class="el" href="_cpu_gemm_conv2d_8cpp_source.xhtml#l00423">CpuGemmConv2d::validate()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00308">CpuGemmLowpMatrixMultiplyCore::validate()</a>, <a class="el" href="_c_l_space_to_batch_layer_8cpp_source.xhtml#l00084">CLSpaceToBatchLayer::validate()</a>, <a class="el" href="_n_e_deconvolution_layer_8cpp_source.xhtml#l00084">NEDeconvolutionLayer::validate()</a>, <a class="el" href="_c_l_f_f_t_convolution_layer_8cpp_source.xhtml#l00272">CLFFTConvolutionLayer::validate()</a>, <a class="el" href="_c_l_generate_proposals_layer_8cpp_source.xhtml#l00210">CLGenerateProposalsLayer::validate()</a>, <a class="el" href="_c_l_g_e_m_m_deconvolution_layer_8cpp_source.xhtml#l00124">CLGEMMDeconvolutionLayer::validate()</a>, <a class="el" href="_c_l_direct_deconvolution_layer_8cpp_source.xhtml#l00058">CLDirectDeconvolutionLayer::validate()</a>, <a class="el" href="_cl_elementwise_kernel_8cpp_source.xhtml#l00421">ClSaturatedArithmeticKernel::validate()</a>, <a class="el" href="_n_e_l_s_t_m_layer_8cpp_source.xhtml#l00375">NELSTMLayer::validate()</a>, <a class="el" href="_n_e_q_l_s_t_m_layer_8cpp_source.xhtml#l00675">NEQLSTMLayer::validate()</a>, <a class="el" href="_cl_elementwise_kernel_8cpp_source.xhtml#l00473">ClArithmeticKernel::validate()</a>, <a class="el" href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00214">arm_compute::validate()</a>, <a class="el" href="_c_l_l_s_t_m_layer_8cpp_source.xhtml#l00400">CLLSTMLayer::validate()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml#l00603">CLQLSTMLayer::validate()</a>, <a class="el" href="_cpu_direct_conv2d_kernel_8cpp_source.xhtml#l00060">arm_compute::cpu::kernels::validate_arguments()</a>, and <a class="el" href="gemm__matrix__mul_2generic_2neon_2impl_8cpp_source.xhtml#l00230">arm_compute::cpu::vector_matrix_multiply_f32()</a>.</p>

</div>
</div>
<a id="a178f0d3d87f959e00a743328d95359d2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a178f0d3d87f959e00a743328d95359d2">&#9670;&nbsp;</a></span>dimension() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual size_t dimension </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return the size of the requested dimension. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">index</td><td>Index of the dimension</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Dimension of the requested dimension </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a8813441b655b97c00139c6a5a6390e97">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a8813441b655b97c00139c6a5a6390e97">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_utils_8cpp_source.xhtml#l00211">NumPyAccessor::access_tensor()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00432">ValidationOutputAccessor::access_tensor()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00646">TopNPredictionsAccessor::access_tensor()</a>, <a class="el" href="_i_c_l_kernel_8cpp_source.xhtml#l00119">ICLKernel::add_3d_tensor_nhw_argument()</a>, <a class="el" href="_i_c_l_kernel_8cpp_source.xhtml#l00144">ICLKernel::add_4d_tensor_nhwc_argument()</a>, <a class="el" href="_c_l_utils_8cpp_source.xhtml#l00086">PostOpCLKernelUtils::are_post_op_shapes_compliant()</a>, <a class="el" href="pool3d_2neon_2quantized_8h_source.xhtml#l00038">arm_compute::cpu::avg_poolingMxNxD_q8_neon_ndhwc()</a>, <a class="el" href="cpu_2kernels_2scale_2neon_2list_8h_source.xhtml#l00143">arm_compute::cpu::bilinear_neon_scale()</a>, <a class="el" href="_c_l_comparison_kernel_8cpp_source.xhtml#l00218">CLComparisonKernel::border_size()</a>, <a class="el" href="genproposals_2generic_2neon_2impl_8cpp_source.xhtml#l00032">arm_compute::cpu::compute_all_anchors()</a>, <a class="el" href="genproposals_2generic_2neon_2impl_8cpp_source.xhtml#l00065">arm_compute::cpu::compute_all_anchors_qasymm16()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00461">arm_compute::misc::shape_calculator::compute_deconvolution_upsampled_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00261">arm_compute::misc::shape_calculator::compute_interleaved_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00181">arm_compute::misc::shape_calculator::compute_lhs_reshaped_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00876">arm_compute::misc::shape_calculator::compute_mm_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01185">arm_compute::misc::shape_calculator::compute_prior_box_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00351">arm_compute::misc::shape_calculator::compute_reductionB_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00225">arm_compute::misc::shape_calculator::compute_rhs_reshaped_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00838">arm_compute::misc::shape_calculator::compute_roi_align_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00297">arm_compute::misc::shape_calculator::compute_transpose1xW_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00314">arm_compute::misc::shape_calculator::compute_transpose1xW_with_element_size_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00403">arm_compute::misc::shape_calculator::compute_transposed_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01266">arm_compute::misc::shape_calculator::compute_upsample_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00150">arm_compute::misc::shape_calculator::compute_weights_reshaped_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00618">arm_compute::misc::shape_calculator::compute_winograd_filter_transform_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00677">arm_compute::misc::shape_calculator::compute_winograd_output_transform_shape()</a>, <a class="el" href="_cl_composite_kernel_8cpp_source.xhtml#l00042">ClCompositeKernel::configure()</a>, <a class="el" href="_cpu_scale_8cpp_source.xhtml#l00090">CpuScale::configure()</a>, <a class="el" href="_cl_floor_kernel_8cpp_source.xhtml#l00069">ClFloorKernel::configure()</a>, <a class="el" href="_cl_transpose_kernel_8cpp_source.xhtml#l00051">ClTransposeKernel::configure()</a>, <a class="el" href="_cl_copy_kernel_8cpp_source.xhtml#l00076">ClCopyKernel::configure()</a>, <a class="el" href="_cl_scale_kernel_8cpp_source.xhtml#l00092">ClScaleKernel::configure()</a>, <a class="el" href="_cl_width_concatenate2_tensors_kernel_8cpp_source.xhtml#l00076">ClWidthConcatenate2TensorsKernel::configure()</a>, <a class="el" href="_cpu_depthwise_conv2d_assembly_dispatch_8cpp_source.xhtml#l00055">CpuDepthwiseConv2dAssemblyDispatch::configure()</a>, <a class="el" href="_cl_activation_kernel_8cpp_source.xhtml#l00094">ClActivationKernel::configure()</a>, <a class="el" href="_cl_height_concatenate_kernel_8cpp_source.xhtml#l00076">ClHeightConcatenateKernel::configure()</a>, <a class="el" href="_cl_pool2d_kernel_8cpp_source.xhtml#l00099">ClPool2dKernel::configure()</a>, <a class="el" href="_cl_pool3d_kernel_8cpp_source.xhtml#l00096">ClPool3dKernel::configure()</a>, <a class="el" href="_cl_width_concatenate_kernel_8cpp_source.xhtml#l00075">ClWidthConcatenateKernel::configure()</a>, <a class="el" href="_cl_permute_kernel_8cpp_source.xhtml#l00085">ClPermuteKernel::configure()</a>, <a class="el" href="_cl_width_concatenate4_tensors_kernel_8cpp_source.xhtml#l00078">ClWidthConcatenate4TensorsKernel::configure()</a>, <a class="el" href="_c_p_p_detection_output_layer_8cpp_source.xhtml#l00393">CPPDetectionOutputLayer::configure()</a>, <a class="el" href="_cpu_pool2d_kernel_8cpp_source.xhtml#l00280">CpuPool2dKernel::configure()</a>, <a class="el" href="_c_l_strided_slice_kernel_8cpp_source.xhtml#l00078">CLStridedSliceKernel::configure()</a>, <a class="el" href="_cl_batch_concatenate_kernel_8cpp_source.xhtml#l00067">ClBatchConcatenateKernel::configure()</a>, <a class="el" href="_cl_depth_concatenate_kernel_8cpp_source.xhtml#l00067">ClDepthConcatenateKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_native_kernel_8cpp_source.xhtml#l00166">ClGemmLowpMatrixMultiplyNativeKernel::configure()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_reduction_kernel_8cpp_source.xhtml#l00071">CpuGemmLowpMatrixAReductionKernel::configure()</a>, <a class="el" href="_cl_gemm_reshape_lhs_matrix_kernel_8cpp_source.xhtml#l00109">ClGemmReshapeLhsMatrixKernel::configure()</a>, <a class="el" href="_cpu_direct_conv2d_kernel_8cpp_source.xhtml#l00107">CpuDirectConv2dKernel::configure()</a>, <a class="el" href="_cpu_pool3d_kernel_8cpp_source.xhtml#l00121">CpuPool3dKernel::configure()</a>, <a class="el" href="_cpu_scale_kernel_8cpp_source.xhtml#l00164">CpuScaleKernel::configure()</a>, <a class="el" href="_cpu_pool2d_8cpp_source.xhtml#l00051">CpuPool2d::configure()</a>, <a class="el" href="_c_p_p_top_k_v_kernel_8cpp_source.xhtml#l00099">CPPTopKVKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_native_kernel_8cpp_source.xhtml#l00225">ClGemmMatrixMultiplyNativeKernel::configure()</a>, <a class="el" href="_n_e_generate_proposals_layer_kernel_8cpp_source.xhtml#l00129">NEComputeAllAnchorsKernel::configure()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_multiply_kernel_8cpp_source.xhtml#l00896">CpuGemmLowpMatrixMultiplyKernel::configure()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00159">CLInstanceNormalizationLayerKernel::configure()</a>, <a class="el" href="_c_l_max_unpooling_layer_kernel_8cpp_source.xhtml#l00080">CLMaxUnpoolingLayerKernel::configure()</a>, <a class="el" href="_cl_winograd_filter_transform_kernel_8cpp_source.xhtml#l00099">ClWinogradFilterTransformKernel::configure()</a>, <a class="el" href="_c_l_bitwise_kernel_8cpp_source.xhtml#l00043">CLBitwiseKernel::configure()</a>, <a class="el" href="_cl_winograd_input_transform_kernel_8cpp_source.xhtml#l00113">ClWinogradInputTransformKernel::configure()</a>, <a class="el" href="_c_l_select_kernel_8cpp_source.xhtml#l00071">CLSelectKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_by_fixed_point_kernel_8cpp_source.xhtml#l00085">ClGemmLowpQuantizeDownInt32ScaleByFixedPointKernel::configure()</a>, <a class="el" href="_n_e_normalization_layer_kernel_8cpp_source.xhtml#l00072">NENormalizationLayerKernel::configure()</a>, <a class="el" href="_c_l_channel_shuffle_layer_kernel_8cpp_source.xhtml#l00108">CLChannelShuffleLayerKernel::configure()</a>, <a class="el" href="_c_l_reverse_kernel_8cpp_source.xhtml#l00072">CLReverseKernel::configure()</a>, <a class="el" href="_c_l_space_to_depth_layer_kernel_8cpp_source.xhtml#l00077">CLSpaceToDepthLayerKernel::configure()</a>, <a class="el" href="_cl_softmax_kernel_8cpp_source.xhtml#l00162">ClLogits1DMaxShiftExpSumKernel::configure()</a>, <a class="el" href="_c_l_batch_to_space_layer_kernel_8cpp_source.xhtml#l00094">CLBatchToSpaceLayerKernel::configure()</a>, <a class="el" href="_cl_winograd_output_transform_kernel_8cpp_source.xhtml#l00130">ClWinogradOutputTransformKernel::configure()</a>, <a class="el" href="_c_l_depth_to_space_layer_kernel_8cpp_source.xhtml#l00076">CLDepthToSpaceLayerKernel::configure()</a>, <a class="el" href="_cl_cast_kernel_8cpp_source.xhtml#l00080">ClCastKernel::configure()</a>, <a class="el" href="_c_l_generate_proposals_layer_kernel_8cpp_source.xhtml#l00079">CLComputeAllAnchorsKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_by_float_kernel_8cpp_source.xhtml#l00088">ClGemmLowpQuantizeDownInt32ScaleByFloatKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_kernel_8cpp_source.xhtml#l00085">ClGemmLowpQuantizeDownInt32ScaleKernel::configure()</a>, <a class="el" href="_c_l_space_to_batch_layer_kernel_8cpp_source.xhtml#l00095">CLSpaceToBatchLayerKernel::configure()</a>, <a class="el" href="_c_l_f_f_t_scale_kernel_8cpp_source.xhtml#l00066">CLFFTScaleKernel::configure()</a>, <a class="el" href="_c_p_p_box_with_non_maxima_suppression_limit_kernel_8cpp_source.xhtml#l00349">CPPBoxWithNonMaximaSuppressionLimitKernel::configure()</a>, <a class="el" href="_c_l_gather_kernel_8cpp_source.xhtml#l00086">CLGatherKernel::configure()</a>, <a class="el" href="_n_e_bounding_box_transform_kernel_8cpp_source.xhtml#l00145">NEBoundingBoxTransformKernel::configure()</a>, <a class="el" href="_n_e_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00121">NEROIPoolingLayerKernel::configure()</a>, <a class="el" href="_c_l_normalization_layer_kernel_8cpp_source.xhtml#l00140">CLNormalizationLayerKernel::configure()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_normalization_kernel_8cpp_source.xhtml#l00088">CLQLSTMLayerNormalizationKernel::configure()</a>, <a class="el" href="_c_l_tile_kernel_8cpp_source.xhtml#l00068">CLTileKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00143">ClGemmLowpMatrixMultiplyReshapedKernel::configure()</a>, <a class="el" href="_c_l_comparison_kernel_8cpp_source.xhtml#l00112">CLComparisonKernel::configure()</a>, <a class="el" href="_c_l_f_f_t_digit_reverse_kernel_8cpp_source.xhtml#l00081">CLFFTDigitReverseKernel::configure()</a>, <a class="el" href="_c_p_p_non_maximum_suppression_kernel_8cpp_source.xhtml#l00062">CPPNonMaximumSuppressionKernel::configure()</a>, <a class="el" href="_c_p_p_detection_post_process_layer_8cpp_source.xhtml#l00218">CPPDetectionPostProcessLayer::configure()</a>, <a class="el" href="_c_l_reorg_layer_kernel_8cpp_source.xhtml#l00079">CLReorgLayerKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_kernel_8cpp_source.xhtml#l00108">ClGemmLowpOffsetContributionKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_output_stage_kernel_8cpp_source.xhtml#l00132">ClGemmLowpOffsetContributionOutputStageKernel::configure()</a>, <a class="el" href="_c_l_mean_std_dev_normalization_kernel_8cpp_source.xhtml#l00070">CLMeanStdDevNormalizationKernel::configure()</a>, <a class="el" href="_c_l_comparison_8cpp_source.xhtml#l00040">CLComparison::configure()</a>, <a class="el" href="_cl_direct_conv2d_kernel_8cpp_source.xhtml#l00147">ClDirectConv2dKernel::configure()</a>, <a class="el" href="_n_e_r_o_i_align_layer_kernel_8cpp_source.xhtml#l00146">NEROIAlignLayerKernel::configure()</a>, <a class="el" href="_c_l_normalize_planar_y_u_v_layer_kernel_8cpp_source.xhtml#l00094">CLNormalizePlanarYUVLayerKernel::configure()</a>, <a class="el" href="_c_l_range_kernel_8cpp_source.xhtml#l00079">CLRangeKernel::configure()</a>, <a class="el" href="_c_l_reduction_operation_kernel_8cpp_source.xhtml#l00086">CLReductionOperationKernel::configure()</a>, <a class="el" href="_cpu_gemm_matrix_multiply_kernel_8cpp_source.xhtml#l00128">CpuGemmMatrixMultiplyKernel::configure()</a>, <a class="el" href="_cl_col2_im_kernel_8cpp_source.xhtml#l00093">ClCol2ImKernel::configure()</a>, <a class="el" href="_c_l_pad_layer_kernel_8cpp_source.xhtml#l00078">CLPadLayerKernel::configure()</a>, <a class="el" href="_c_l_f_f_t_radix_stage_kernel_8cpp_source.xhtml#l00089">CLFFTRadixStageKernel::configure()</a>, <a class="el" href="_c_l_prior_box_layer_kernel_8cpp_source.xhtml#l00110">CLPriorBoxLayerKernel::configure()</a>, <a class="el" href="_cl_direct_conv3d_kernel_8cpp_source.xhtml#l00092">ClDirectConv3dKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00288">ClGemmLowpMatrixMultiplyReshapedOnlyRhsKernel::configure()</a>, <a class="el" href="_c_l_l2_normalize_layer_kernel_8cpp_source.xhtml#l00085">CLL2NormalizeLayerKernel::configure()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00113">ClMulKernel::configure()</a>, <a class="el" href="_n_e_unstack_8cpp_source.xhtml#l00063">NEUnstack::configure()</a>, <a class="el" href="_cpu_weights_reshape_kernel_8cpp_source.xhtml#l00079">CpuWeightsReshapeKernel::configure()</a>, <a class="el" href="_n_e_scale_8cpp_source.xhtml#l00051">NEScale::configure()</a>, <a class="el" href="_c_l_unstack_8cpp_source.xhtml#l00069">CLUnstack::configure()</a>, <a class="el" href="_n_e_r_n_n_layer_8cpp_source.xhtml#l00072">NERNNLayer::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_native_kernel_8cpp_source.xhtml#l00174">CLDepthwiseConvolutionLayerNativeKernel::configure()</a>, <a class="el" href="_cpu_winograd_conv2d_8cpp_source.xhtml#l00162">CpuWinogradConv2d::configure()</a>, <a class="el" href="_c_l_stack_layer_kernel_8cpp_source.xhtml#l00087">CLStackLayerKernel::configure()</a>, <a class="el" href="_c_l_fill_border_kernel_8cpp_source.xhtml#l00069">CLFillBorderKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_reduction_kernel_8cpp_source.xhtml#l00076">ClGemmLowpMatrixAReductionKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00187">ClGemmMatrixMultiplyReshapedOnlyRhsKernel::configure()</a>, <a class="el" href="_c_l_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00079">CLROIPoolingLayerKernel::configure()</a>, <a class="el" href="_c_l_arg_min_max_layer_kernel_8cpp_source.xhtml#l00080">CLArgMinMaxLayerKernel::configure()</a>, <a class="el" href="_cl_im2_col_kernel_8cpp_source.xhtml#l00304">ClIm2ColKernel::configure()</a>, <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml#l00334">CpuIm2ColKernel::configure()</a>, <a class="el" href="_c_l_deconvolution_reshape_output_kernel_8cpp_source.xhtml#l00125">CLDeconvolutionReshapeOutputKernel::configure()</a>, <a class="el" href="_c_l_fuse_batch_normalization_kernel_8cpp_source.xhtml#l00117">CLFuseBatchNormalizationKernel::configure()</a>, <a class="el" href="_c_l_batch_normalization_layer_kernel_8cpp_source.xhtml#l00121">CLBatchNormalizationLayerKernel::configure()</a>, <a class="el" href="_c_l_r_n_n_layer_8cpp_source.xhtml#l00082">CLRNNLayer::configure()</a>, <a class="el" href="_cl_fully_connected_8cpp_source.xhtml#l00227">ClFullyConnected::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00188">ClGemmMatrixMultiplyReshapedKernel::configure()</a>, <a class="el" href="_cpu_fully_connected_8cpp_source.xhtml#l00234">CpuFullyConnected::configure()</a>, <a class="el" href="gpu_2cl_2operators_2_cl_gemm_8cpp_source.xhtml#l00557">ClGemm::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_8cpp_source.xhtml#l00163">CLDepthwiseConvolutionLayer::configure()</a>, <a class="el" href="_c_l_arg_min_max_layer_8cpp_source.xhtml#l00121">CLArgMinMaxLayer::configure()</a>, <a class="el" href="gpu_2cl_2operators_2_cl_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00256">ClGemmLowpMatrixMultiplyCore::configure()</a>, <a class="el" href="_n_e_generate_proposals_layer_8cpp_source.xhtml#l00071">NEGenerateProposalsLayer::configure()</a>, <a class="el" href="_cl_softmax_kernel_8cpp_source.xhtml#l00268">ClLogits1DNormKernel::configure()</a>, <a class="el" href="_cl_gemm_conv2d_8cpp_source.xhtml#l00162">ClGemmConv2d::configure()</a>, <a class="el" href="_n_e_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00060">NELSTMLayerQuantized::configure()</a>, <a class="el" href="_cpu_gemm_conv2d_8cpp_source.xhtml#l00256">CpuGemmConv2d::configure()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00078">CLComputeMeanVariance::configure()</a>, <a class="el" href="_cl_gemm_lowp_reduction_kernel_8cpp_source.xhtml#l00152">ClGemmLowpMatrixBReductionKernel::configure()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00108">CpuGemmLowpMatrixMultiplyCore::configure()</a>, <a class="el" href="_c_l_comparison_8cpp_source.xhtml#l00070">CLComparisonStatic&lt; COP &gt;::configure()</a>, <a class="el" href="_n_e_deconvolution_layer_8cpp_source.xhtml#l00156">NEDeconvolutionLayer::configure()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_reduction_kernel_8cpp_source.xhtml#l00192">CpuGemmLowpMatrixBReductionKernel::configure()</a>, <a class="el" href="_c_l_generate_proposals_layer_8cpp_source.xhtml#l00080">CLGenerateProposalsLayer::configure()</a>, <a class="el" href="_c_l_g_e_m_m_deconvolution_layer_8cpp_source.xhtml#l00224">CLGEMMDeconvolutionLayer::configure()</a>, <a class="el" href="_c_l_direct_deconvolution_layer_8cpp_source.xhtml#l00121">CLDirectDeconvolutionLayer::configure()</a>, <a class="el" href="_c_l_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00072">CLLSTMLayerQuantized::configure()</a>, <a class="el" href="_n_e_q_l_s_t_m_layer_8cpp_source.xhtml#l00214">NEQLSTMLayer::configure()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml#l00172">CLQLSTMLayer::configure()</a>, <a class="el" href="_n_e_crop_kernel_8cpp_source.xhtml#l00234">NECropKernel::configure_output_shape()</a>, <a class="el" href="directconv2d_2nchw_2all_8cpp_source.xhtml#l00062">arm_compute::cpu::kernels::convolve_nchw()</a>, <a class="el" href="directconv2d_2nhwc_2neon_2impl_8cpp_source.xhtml#l00057">arm_compute::cpu::kernels::convolve_nhwc()</a>, <a class="el" href="_i_tensor_8cpp_source.xhtml#l00035">ITensor::copy_from()</a>, <a class="el" href="cpu_2kernels_2conv3d_2neon_2list_8h_source.xhtml#l00039">arm_compute::cpu::directconv3d_float_neon_ndhwc()</a>, <a class="el" href="conv3d_2neon_2quantized_8h_source.xhtml#l00040">arm_compute::cpu::directconv3d_quantized_neon_ndhwc()</a>, <a class="el" href="_cpu_conv2d_8cpp_source.xhtml#l00123">CpuConv2d::get_convolution_method()</a>, <a class="el" href="_cl_conv2d_8cpp_source.xhtml#l00164">ClConv2d::get_convolution_method()</a>, <a class="el" href="_c_l_deconvolution_layer_8cpp_source.xhtml#l00107">CLDeconvolutionLayer::get_deconvolution_method()</a>, <a class="el" href="_i_tensor_info_8h_source.xhtml#l00058">ITensorInfo::get_static_state_value()</a>, <a class="el" href="_cl_floor_kernel_component_8cpp_source.xhtml#l00046">ClFloorKernelComponent::get_window()</a>, <a class="el" href="_cl_elementwise_kernel_component_8cpp_source.xhtml#l00048">ClElementwiseKernelComponent::get_window()</a>, <a class="el" href="_cpu_gemm_conv2d_8cpp_source.xhtml#l00391">CpuGemmConv2d::has_opt_impl()</a>, <a class="el" href="crop_2generic_2neon_2impl_8cpp_source.xhtml#l00036">arm_compute::cpu::in_bounds_crop_window()</a>, <a class="el" href="instancenorm_2generic_2neon_2impl_8cpp_source.xhtml#l00070">arm_compute::cpu::instance_normalization_nchw()</a>, <a class="el" href="_cpu_pool2d_assembly_wrapper_kernel_8cpp_source.xhtml#l00183">CpuPool2dAssemblyWrapperKernel::is_configured()</a>, <a class="el" href="gemm__matrix__mul_2generic_2neon_2impl_8cpp_source.xhtml#l00462">arm_compute::cpu::matrix_matrix_multiply_f32()</a>, <a class="el" href="pool3d_2neon_2quantized_8h_source.xhtml#l00228">arm_compute::cpu::max_poolingMxNxD_q8_neon_ndhwc()</a>, <a class="el" href="meanstddevnorm_2generic_2neon_2impl_8cpp_source.xhtml#l00033">arm_compute::cpu::mean_stddev_normalization()</a>, <a class="el" href="cpu_2kernels_2scale_2neon_2list_8h_source.xhtml#l00053">arm_compute::cpu::nearest_neon_scale()</a>, <a class="el" href="_n_e_gather_kernel_8cpp_source.xhtml#l00089">NEGatherKernel::NEGatherKernel()</a>, <a class="el" href="_n_e_pad_layer_8cpp_source.xhtml#l00054">NEPadLayer::NEPadLayer()</a>, <a class="el" href="cpu_2kernels_2pool2d_2neon_2fp32_8cpp_source.xhtml#l00146">arm_compute::cpu::poolingMxN_fp32_neon_nhwc()</a>, <a class="el" href="pool2d_2neon_2quantized_8h_source.xhtml#l00041">arm_compute::cpu::poolingMxN_q8_neon_nhwc()</a>, <a class="el" href="roialign_2generic_2neon_2impl_8cpp_source.xhtml#l00213">arm_compute::cpu::roi_align()</a>, <a class="el" href="_c_p_p_upsample_kernel_8cpp_source.xhtml#l00063">CPPUpsampleKernel::run()</a>, <a class="el" href="_n_e_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00150">NEROIPoolingLayerKernel::run()</a>, <a class="el" href="_n_e_tile_kernel_8cpp_source.xhtml#l00092">NETileKernel::run()</a>, <a class="el" href="_n_e_space_to_depth_layer_kernel_8cpp_source.xhtml#l00102">NESpaceToDepthLayerKernel::run()</a>, <a class="el" href="_n_e_depth_to_space_layer_kernel_8cpp_source.xhtml#l00101">NEDepthToSpaceLayerKernel::run()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00205">CLInstanceNormalizationLayerKernel::run()</a>, <a class="el" href="_c_l_deconvolution_layer_upsample_kernel_8cpp_source.xhtml#l00105">CLDeconvolutionLayerUpsampleKernel::run()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_normalization_kernel_8cpp_source.xhtml#l00148">CLQLSTMLayerNormalizationKernel::run()</a>, <a class="el" href="_c_l_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00136">CLROIPoolingLayerKernel::run()</a>, <a class="el" href="_c_l_mean_std_dev_normalization_kernel_8cpp_source.xhtml#l00118">CLMeanStdDevNormalizationKernel::run()</a>, <a class="el" href="_n_e_f_f_t_radix_stage_kernel_8cpp_source.xhtml#l01037">NEFFTRadixStageKernel::run()</a>, <a class="el" href="_c_l_reduction_operation_kernel_8cpp_source.xhtml#l00198">CLReductionOperationKernel::run()</a>, <a class="el" href="_c_l_prior_box_layer_kernel_8cpp_source.xhtml#l00208">CLPriorBoxLayerKernel::run()</a>, <a class="el" href="_n_e_batch_to_space_layer_kernel_8cpp_source.xhtml#l00138">NEBatchToSpaceLayerKernel::run()</a>, <a class="el" href="_n_e_crop_kernel_8cpp_source.xhtml#l00292">NECropKernel::run()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_native_kernel_8cpp_source.xhtml#l00342">CLDepthwiseConvolutionLayerNativeKernel::run()</a>, <a class="el" href="_c_l_arg_min_max_layer_kernel_8cpp_source.xhtml#l00155">CLArgMinMaxLayerKernel::run()</a>, <a class="el" href="_n_e_space_to_batch_layer_kernel_8cpp_source.xhtml#l00143">NESpaceToBatchLayerKernel::run()</a>, <a class="el" href="_c_l_r_o_i_align_layer_kernel_8cpp_source.xhtml#l00153">CLROIAlignLayerKernel::run()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00128">CLComputeMeanVariance::run()</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8cpp_source.xhtml#l00771">arm_compute::cpu::run_depthwise_quanitized8bit()</a>, <a class="el" href="_c_p_p_box_with_non_maxima_suppression_limit_kernel_8cpp_source.xhtml#l00198">CPPBoxWithNonMaximaSuppressionLimitKernel::run_nmslimit()</a>, <a class="el" href="_cpu_pool2d_kernel_8cpp_source.xhtml#l00351">CpuPool2dKernel::run_op()</a>, <a class="el" href="_cpu_gemm_matrix_multiply_kernel_8cpp_source.xhtml#l00178">CpuGemmMatrixMultiplyKernel::run_op()</a>, <a class="el" href="_cpu_weights_reshape_kernel_8cpp_source.xhtml#l00105">CpuWeightsReshapeKernel::run_op()</a>, <a class="el" href="_cpu_gemm_transpose1x_w_kernel_8cpp_source.xhtml#l00076">CpuGemmTranspose1xWKernel::run_op()</a>, <a class="el" href="_n_e_reverse_kernel_8cpp_source.xhtml#l00088">arm_compute::run_reverse()</a>, <a class="el" href="_operator_graph_impl_8cpp_source.xhtml#l00144">Conv2dContent::select_conv_method()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00589">TopNPredictionsAccessor::TopNPredictionsAccessor()</a>, <a class="el" href="_cpu_scale_8cpp_source.xhtml#l00149">CpuScale::validate()</a>, <a class="el" href="_cpu_pool2d_kernel_8cpp_source.xhtml#l00326">CpuPool2dKernel::validate()</a>, <a class="el" href="_cpu_convert_fully_connected_weights_kernel_8cpp_source.xhtml#l00065">CpuConvertFullyConnectedWeightsKernel::validate()</a>, <a class="el" href="_cl_crop_kernel_8cpp_source.xhtml#l00090">ClCropKernel::validate()</a>, <a class="el" href="_cl_convert_fully_connected_weights_kernel_8cpp_source.xhtml#l00088">ClConvertFullyConnectedWeightsKernel::validate()</a>, <a class="el" href="_n_e_f_f_t_digit_reverse_kernel_8cpp_source.xhtml#l00136">NEFFTDigitReverseKernel::validate()</a>, <a class="el" href="_c_l_deconvolution_layer_upsample_kernel_8cpp_source.xhtml#l00042">CLDeconvolutionLayerUpsampleKernel::validate()</a>, <a class="el" href="_cpu_depthwise_conv2d_assembly_wrapper_kernel_8cpp_source.xhtml#l00258">CpuDepthwiseConv2dAssemblyWrapperKernel::validate()</a>, <a class="el" href="_cpu_gemm_direct_conv2d_8cpp_source.xhtml#l00156">CpuGemmDirectConv2d::validate()</a>, <a class="el" href="_c_p_p_detection_post_process_layer_8cpp_source.xhtml#l00272">CPPDetectionPostProcessLayer::validate()</a>, <a class="el" href="_n_e_unstack_8cpp_source.xhtml#l00092">NEUnstack::validate()</a>, <a class="el" href="_c_l_unstack_8cpp_source.xhtml#l00098">CLUnstack::validate()</a>, <a class="el" href="_cpu_direct_conv2d_8cpp_source.xhtml#l00086">CpuDirectConv2d::validate()</a>, <a class="el" href="_n_e_r_n_n_layer_8cpp_source.xhtml#l00045">NERNNLayer::validate()</a>, <a class="el" href="_cl_fully_connected_8cpp_source.xhtml#l00328">ClFullyConnected::validate()</a>, <a class="el" href="_c_l_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00050">CLROIPoolingLayerKernel::validate()</a>, <a class="el" href="_cpu_fully_connected_8cpp_source.xhtml#l00354">CpuFullyConnected::validate()</a>, <a class="el" href="gpu_2cl_2operators_2_cl_gemm_8cpp_source.xhtml#l00612">ClGemm::validate()</a>, <a class="el" href="_n_e_pad_layer_8cpp_source.xhtml#l00213">NEPadLayer::validate()</a>, <a class="el" href="_c_l_r_n_n_layer_8cpp_source.xhtml#l00047">CLRNNLayer::validate()</a>, <a class="el" href="_cpu_gemm_8cpp_source.xhtml#l00153">CpuGemm::validate()</a>, <a class="el" href="gpu_2cl_2operators_2_cl_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00472">ClGemmLowpMatrixMultiplyCore::validate()</a>, <a class="el" href="_c_l_arg_min_max_layer_8cpp_source.xhtml#l00048">CLArgMinMaxLayer::validate()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_8cpp_source.xhtml#l00251">CLDepthwiseConvolutionLayer::validate()</a>, <a class="el" href="_cl_gemm_conv2d_8cpp_source.xhtml#l00349">ClGemmConv2d::validate()</a>, <a class="el" href="_n_e_generate_proposals_layer_8cpp_source.xhtml#l00212">NEGenerateProposalsLayer::validate()</a>, <a class="el" href="_cpu_gemm_conv2d_8cpp_source.xhtml#l00423">CpuGemmConv2d::validate()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00308">CpuGemmLowpMatrixMultiplyCore::validate()</a>, <a class="el" href="_n_e_deconvolution_layer_8cpp_source.xhtml#l00084">NEDeconvolutionLayer::validate()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_reduction_kernel_8cpp_source.xhtml#l00226">CpuGemmLowpMatrixBReductionKernel::validate()</a>, <a class="el" href="_c_l_crop_resize_8cpp_source.xhtml#l00067">CLCropResize::validate()</a>, <a class="el" href="_n_e_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00248">NELSTMLayerQuantized::validate()</a>, <a class="el" href="_cl_kernel_graph_8cpp_source.xhtml#l00061">ClDirectConv2dKernel::validate()</a>, <a class="el" href="_c_l_generate_proposals_layer_8cpp_source.xhtml#l00210">CLGenerateProposalsLayer::validate()</a>, <a class="el" href="_c_l_g_e_m_m_deconvolution_layer_8cpp_source.xhtml#l00124">CLGEMMDeconvolutionLayer::validate()</a>, <a class="el" href="_c_l_direct_deconvolution_layer_8cpp_source.xhtml#l00058">CLDirectDeconvolutionLayer::validate()</a>, <a class="el" href="_n_e_l_s_t_m_layer_8cpp_source.xhtml#l00375">NELSTMLayer::validate()</a>, <a class="el" href="_c_l_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00280">CLLSTMLayerQuantized::validate()</a>, <a class="el" href="_n_e_q_l_s_t_m_layer_8cpp_source.xhtml#l00675">NEQLSTMLayer::validate()</a>, <a class="el" href="_c_l_l_s_t_m_layer_8cpp_source.xhtml#l00400">CLLSTMLayer::validate()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml#l00603">CLQLSTMLayer::validate()</a>, <a class="el" href="_cpu_direct_conv2d_kernel_8cpp_source.xhtml#l00060">arm_compute::cpu::kernels::validate_arguments()</a>, and <a class="el" href="gemm__matrix__mul_2generic_2neon_2impl_8cpp_source.xhtml#l00230">arm_compute::cpu::vector_matrix_multiply_f32()</a>.</p>

</div>
</div>
<a id="ae3372a4569b4702a881b1606b0c144c4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae3372a4569b4702a881b1606b0c144c4">&#9670;&nbsp;</a></span>dimension() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual size_t dimension </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02">DataLayoutDimension</a>&#160;</td>
          <td class="paramname"><em>dimension</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return the size of the requested data layout dimension. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dimension</td><td>DataLayoutDimension of the dimension</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Dimension of the requested dimension </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a650247f9a828d1ef60135b01f8f77765">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a650247f9a828d1ef60135b01f8f77765">SubTensorInfo</a>.</p>

</div>
</div>
<a id="aa459796b5489eca8a9160cb5dcf1a103"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa459796b5489eca8a9160cb5dcf1a103">&#9670;&nbsp;</a></span>element_size()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual size_t element_size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Element size in bytes calculated as data_size() * <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ad7829ae79223ab87f9da4c0bd7d229ba" title="The number of channels for each tensor element. ">num_channels()</a> </p>
<dl class="section return"><dt>Returns</dt><dd>The size of one element in bytes </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a62b67b578f684c4d516843c9dea86a23">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a62b67b578f684c4d516843c9dea86a23">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="src_2core_2helpers_2_utils_8h_source.xhtml#l00063">arm_compute::compute_strides()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00314">arm_compute::misc::shape_calculator::compute_transpose1xW_with_element_size_shape()</a>, <a class="el" href="_cpu_transpose_kernel_8cpp_source.xhtml#l00427">CpuTransposeKernel::configure()</a>, <a class="el" href="_cl_dequantize_kernel_8cpp_source.xhtml#l00069">ClDequantizeKernel::configure()</a>, <a class="el" href="_cl_floor_kernel_8cpp_source.xhtml#l00069">ClFloorKernel::configure()</a>, <a class="el" href="_cl_reshape_kernel_8cpp_source.xhtml#l00070">ClReshapeKernel::configure()</a>, <a class="el" href="_cl_transpose_kernel_8cpp_source.xhtml#l00051">ClTransposeKernel::configure()</a>, <a class="el" href="_cl_copy_kernel_8cpp_source.xhtml#l00076">ClCopyKernel::configure()</a>, <a class="el" href="_cl_fill_kernel_8cpp_source.xhtml#l00050">ClFillKernel::configure()</a>, <a class="el" href="_cl_elementwise_unary_kernel_8cpp_source.xhtml#l00074">ClElementWiseUnaryKernel::configure()</a>, <a class="el" href="_cl_width_concatenate2_tensors_kernel_8cpp_source.xhtml#l00076">ClWidthConcatenate2TensorsKernel::configure()</a>, <a class="el" href="_cl_height_concatenate_kernel_8cpp_source.xhtml#l00076">ClHeightConcatenateKernel::configure()</a>, <a class="el" href="_cl_activation_kernel_8cpp_source.xhtml#l00094">ClActivationKernel::configure()</a>, <a class="el" href="_cl_quantize_kernel_8cpp_source.xhtml#l00069">ClQuantizeKernel::configure()</a>, <a class="el" href="_cl_width_concatenate4_tensors_kernel_8cpp_source.xhtml#l00078">ClWidthConcatenate4TensorsKernel::configure()</a>, <a class="el" href="_cl_depth_concatenate_kernel_8cpp_source.xhtml#l00067">ClDepthConcatenateKernel::configure()</a>, <a class="el" href="_c_l_strided_slice_kernel_8cpp_source.xhtml#l00078">CLStridedSliceKernel::configure()</a>, <a class="el" href="_cl_batch_concatenate_kernel_8cpp_source.xhtml#l00067">ClBatchConcatenateKernel::configure()</a>, <a class="el" href="_cl_convert_fully_connected_weights_kernel_8cpp_source.xhtml#l00048">ClConvertFullyConnectedWeightsKernel::configure()</a>, <a class="el" href="_cl_gemm_reshape_lhs_matrix_kernel_8cpp_source.xhtml#l00109">ClGemmReshapeLhsMatrixKernel::configure()</a>, <a class="el" href="_c_l_bitwise_kernel_8cpp_source.xhtml#l00043">CLBitwiseKernel::configure()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00159">CLInstanceNormalizationLayerKernel::configure()</a>, <a class="el" href="_c_l_max_unpooling_layer_kernel_8cpp_source.xhtml#l00080">CLMaxUnpoolingLayerKernel::configure()</a>, <a class="el" href="_c_l_channel_shuffle_layer_kernel_8cpp_source.xhtml#l00108">CLChannelShuffleLayerKernel::configure()</a>, <a class="el" href="_c_l_reverse_kernel_8cpp_source.xhtml#l00072">CLReverseKernel::configure()</a>, <a class="el" href="_c_l_select_kernel_8cpp_source.xhtml#l00071">CLSelectKernel::configure()</a>, <a class="el" href="_c_p_p_permute_kernel_8cpp_source.xhtml#l00102">CPPPermuteKernel::configure()</a>, <a class="el" href="_n_e_pad_layer_kernel_8cpp_source.xhtml#l00186">NEPadLayerKernel::configure()</a>, <a class="el" href="_c_l_depth_to_space_layer_kernel_8cpp_source.xhtml#l00076">CLDepthToSpaceLayerKernel::configure()</a>, <a class="el" href="_c_l_deconvolution_layer_upsample_kernel_8cpp_source.xhtml#l00076">CLDeconvolutionLayerUpsampleKernel::configure()</a>, <a class="el" href="_cl_cast_kernel_8cpp_source.xhtml#l00080">ClCastKernel::configure()</a>, <a class="el" href="_c_l_normalization_layer_kernel_8cpp_source.xhtml#l00140">CLNormalizationLayerKernel::configure()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_normalization_kernel_8cpp_source.xhtml#l00088">CLQLSTMLayerNormalizationKernel::configure()</a>, <a class="el" href="_c_l_tile_kernel_8cpp_source.xhtml#l00068">CLTileKernel::configure()</a>, <a class="el" href="_c_l_mean_std_dev_normalization_kernel_8cpp_source.xhtml#l00070">CLMeanStdDevNormalizationKernel::configure()</a>, <a class="el" href="_cl_gemm_reshape_rhs_matrix_kernel_8cpp_source.xhtml#l00115">ClGemmReshapeRhsMatrixKernel::configure()</a>, <a class="el" href="_c_l_normalize_planar_y_u_v_layer_kernel_8cpp_source.xhtml#l00094">CLNormalizePlanarYUVLayerKernel::configure()</a>, <a class="el" href="_c_l_range_kernel_8cpp_source.xhtml#l00079">CLRangeKernel::configure()</a>, <a class="el" href="_cl_col2_im_kernel_8cpp_source.xhtml#l00093">ClCol2ImKernel::configure()</a>, <a class="el" href="_c_l_l2_normalize_layer_kernel_8cpp_source.xhtml#l00085">CLL2NormalizeLayerKernel::configure()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00113">ClMulKernel::configure()</a>, <a class="el" href="_cpu_winograd_conv2d_8cpp_source.xhtml#l00162">CpuWinogradConv2d::configure()</a>, <a class="el" href="_cpu_gemm_transpose1x_w_kernel_8cpp_source.xhtml#l00043">CpuGemmTranspose1xWKernel::configure()</a>, <a class="el" href="_c_l_batch_normalization_layer_kernel_8cpp_source.xhtml#l00121">CLBatchNormalizationLayerKernel::configure()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00078">CLComputeMeanVariance::configure()</a>, <a class="el" href="directconv2d_2nchw_2all_8cpp_source.xhtml#l00062">arm_compute::cpu::kernels::convolve_nchw()</a>, <a class="el" href="directconv2d_2nhwc_2neon_2impl_8cpp_source.xhtml#l00057">arm_compute::cpu::kernels::convolve_nhwc()</a>, <a class="el" href="_i_tensor_8cpp_source.xhtml#l00035">ITensor::copy_from()</a>, <a class="el" href="cpu_2kernels_2conv3d_2neon_2list_8h_source.xhtml#l00039">arm_compute::cpu::directconv3d_float_neon_ndhwc()</a>, <a class="el" href="conv3d_2neon_2quantized_8h_source.xhtml#l00040">arm_compute::cpu::directconv3d_quantized_neon_ndhwc()</a>, <a class="el" href="_accessor_8h_source.xhtml#l00089">Accessor::element_size()</a>, <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00140">SubTensorInfo::element_size()</a>, <a class="el" href="fuse__batch__normalization_2generic_2impl_8cpp_source.xhtml#l00031">arm_compute::cpu::fused_batch_normalization_conv()</a>, <a class="el" href="fuse__batch__normalization_2nchw_2all_8cpp_source.xhtml#l00032">arm_compute::cpu::fused_batch_normalization_dwc_nchw()</a>, <a class="el" href="fuse__batch__normalization_2nhwc_2neon_2impl_8cpp_source.xhtml#l00031">arm_compute::cpu::fused_batch_normalization_dwc_nhwc()</a>, <a class="el" href="_i_tensor_info_8h_source.xhtml#l00058">ITensorInfo::get_static_state_value()</a>, <a class="el" href="_cl_floor_kernel_component_8cpp_source.xhtml#l00046">ClFloorKernelComponent::get_window()</a>, <a class="el" href="_cl_elementwise_kernel_component_8cpp_source.xhtml#l00048">ClElementwiseKernelComponent::get_window()</a>, <a class="el" href="crop_2generic_2neon_2impl_8cpp_source.xhtml#l00036">arm_compute::cpu::in_bounds_crop_window()</a>, <a class="el" href="_n_e_gather_kernel_8cpp_source.xhtml#l00089">NEGatherKernel::NEGatherKernel()</a>, <a class="el" href="_n_e_q_l_s_t_m_layer_8cpp_source.xhtml#l01210">NEQLSTMLayer::prepare()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00666">RandomAccessor::RandomAccessor()</a>, <a class="el" href="_c_p_p_upsample_kernel_8cpp_source.xhtml#l00063">CPPUpsampleKernel::run()</a>, <a class="el" href="_n_e_tile_kernel_8cpp_source.xhtml#l00092">NETileKernel::run()</a>, <a class="el" href="_n_e_reverse_kernel_8cpp_source.xhtml#l00145">NEReverseKernel::run()</a>, <a class="el" href="_n_e_space_to_depth_layer_kernel_8cpp_source.xhtml#l00102">NESpaceToDepthLayerKernel::run()</a>, <a class="el" href="_n_e_depth_to_space_layer_kernel_8cpp_source.xhtml#l00101">NEDepthToSpaceLayerKernel::run()</a>, <a class="el" href="_n_e_reorg_layer_kernel_8cpp_source.xhtml#l00102">NEReorgLayerKernel::run()</a>, <a class="el" href="_n_e_stack_layer_kernel_8cpp_source.xhtml#l00116">NEStackLayerKernel::run()</a>, <a class="el" href="_n_e_batch_to_space_layer_kernel_8cpp_source.xhtml#l00138">NEBatchToSpaceLayerKernel::run()</a>, <a class="el" href="_c_l_arg_min_max_layer_kernel_8cpp_source.xhtml#l00155">CLArgMinMaxLayerKernel::run()</a>, <a class="el" href="_n_e_space_to_batch_layer_kernel_8cpp_source.xhtml#l00143">NESpaceToBatchLayerKernel::run()</a>, <a class="el" href="_n_e_l_s_t_m_layer_8cpp_source.xhtml#l00605">NELSTMLayer::run()</a>, <a class="el" href="_cpu_winograd_conv2d_kernel_8cpp_source.xhtml#l00036">CpuWinogradConv2dTransformInputKernel::run_op()</a>, <a class="el" href="_cpu_col2_im_kernel_8cpp_source.xhtml#l00086">CpuCol2ImKernel::run_op()</a>, <a class="el" href="_n_e_fill_border_kernel_8cpp_source.xhtml#l00161">NEFillBorderKernel::run_op()</a>, <a class="el" href="_cpu_winograd_conv2d_kernel_8cpp_source.xhtml#l00074">CpuWinogradConv2dTransformOutputKernel::run_op()</a>, <a class="el" href="_cpu_gemm_transpose1x_w_kernel_8cpp_source.xhtml#l00076">CpuGemmTranspose1xWKernel::run_op()</a>, <a class="el" href="_n_e_reverse_kernel_8cpp_source.xhtml#l00088">arm_compute::run_reverse()</a>, <a class="el" href="select_2generic_2neon_2impl_8cpp_source.xhtml#l00118">arm_compute::cpu::select_op_not_same_rank()</a>, <a class="el" href="_gemm_tuner_helpers_8h_source.xhtml#l00034">examples::gemm_tuner_helpers::update_padding_for_cl_image()</a>, <a class="el" href="_cl_gemm_helpers_8cpp_source.xhtml#l00072">arm_compute::opencl::kernels::gemm::update_padding_for_cl_image()</a>, <a class="el" href="_cpu_transpose_kernel_8cpp_source.xhtml#l00455">CpuTransposeKernel::validate()</a>, and <a class="el" href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00764">CpuGemmAssemblyDispatch::validate()</a>.</p>

</div>
</div>
<a id="a0cd5aea514f03afb48ebe22581ea4c66"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0cd5aea514f03afb48ebe22581ea4c66">&#9670;&nbsp;</a></span>extend_padding()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool extend_padding </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a4467b302fc9ec312c40580336ab783da">PaddingSize</a> &amp;&#160;</td>
          <td class="paramname"><em>padding</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Update the offset to the first element, the strides and the total size. </p>
<dl class="section note"><dt>Note</dt><dd>This function can only increase the offset, strides and total size.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">padding</td><td>Padding around the XY plane in number of elements.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the strides, offset and total size have changed. </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#af53d8203ecc37896ca4579d1ee3fdffc">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#af53d8203ecc37896ca4579d1ee3fdffc">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="src_2core_2_sub_tensor_info_8cpp_source.xhtml#l00117">SubTensorInfo::extend_padding()</a>, <a class="el" href="_i_tensor_info_8h_source.xhtml#l00058">ITensorInfo::get_static_state_value()</a>, <a class="el" href="tests_2validation_2_n_e_o_n_2_u_n_i_t_2_tensor_allocator_8cpp_source.xhtml#l00143">arm_compute::test::validation::TEST_CASE()</a>, <a class="el" href="_gemm_tuner_helpers_8h_source.xhtml#l00034">examples::gemm_tuner_helpers::update_padding_for_cl_image()</a>, <a class="el" href="_cl_gemm_helpers_8cpp_source.xhtml#l00072">arm_compute::opencl::kernels::gemm::update_padding_for_cl_image()</a>, <a class="el" href="_access_window_static_8cpp_source.xhtml#l00160">AccessWindowStatic::update_padding_if_needed()</a>, and <a class="el" href="_i_access_window_8cpp_source.xhtml#l00212">AccessWindowRectangle::update_padding_if_needed()</a>.</p>

</div>
</div>
<a id="a57360dd9ca408834c0ea1a8ef70a11f4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a57360dd9ca408834c0ea1a8ef70a11f4">&#9670;&nbsp;</a></span>format()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Colour format of the image. </p>
<dl class="section return"><dt>Returns</dt><dd>Colour format of the image </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#ac4b36cc1e56b0b7e579bb4b7196490db">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_accessor_8h_source.xhtml#l00099">Accessor::format()</a>, <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00169">SubTensorInfo::format()</a>, <a class="el" href="_i_tensor_info_8h_source.xhtml#l00058">ITensorInfo::get_static_state_value()</a>, <a class="el" href="src_2core_2_sub_tensor_info_8cpp_source.xhtml#l00089">SubTensorInfo::set_tensor_shape()</a>, and <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00042">TensorInfo::TensorInfo()</a>.</p>

</div>
</div>
<a id="ac91bd7db0588f3a6ceda53658a78df5e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac91bd7db0588f3a6ceda53658a78df5e">&#9670;&nbsp;</a></span>get_dynamic_state_value()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static constexpr int32_t get_dynamic_state_value </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the value representing dynamic dimension state. </p>
<dl class="section return"><dt>Returns</dt><dd>Value representing dynamic dimension state </dd></dl>

<p class="definition">Definition at line <a class="el" href="_i_tensor_info_8h_source.xhtml#l00049">49</a> of file <a class="el" href="_i_tensor_info_8h_source.xhtml">ITensorInfo.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="tests_2_utils_8h_source.xhtml#l00596">arm_compute::test::construct_dynamic_dims_state()</a>, and <a class="el" href="_tensor_info_8h_source.xhtml#l00266">TensorInfo::is_dynamic()</a>.</p>
<div class="fragment"><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    {</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <span class="keywordflow">return</span> _dynamic_dimension;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a98b9497fa57c27f6beeeac88608167ca"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a98b9497fa57c27f6beeeac88608167ca">&#9670;&nbsp;</a></span>get_static_state_value()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static constexpr int32_t get_static_state_value </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the value representing static dimension state. </p>
<dl class="section return"><dt>Returns</dt><dd>Value representing static dimension state </dd></dl>

<p class="definition">Definition at line <a class="el" href="_i_tensor_info_8h_source.xhtml#l00058">58</a> of file <a class="el" href="_i_tensor_info_8h_source.xhtml">ITensorInfo.h</a>.</p>

<p class="reference">References <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a755401027819f45173d06db7a922eb10">ITensorInfo::are_values_constant()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a4f2d0ac983637a0459daf43bcd65cc38">ITensorInfo::auto_padding()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">ITensorInfo::data_layout()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">ITensorInfo::data_type()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo::dimension()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#aa459796b5489eca8a9160cb5dcf1a103">ITensorInfo::element_size()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a0cd5aea514f03afb48ebe22581ea4c66">ITensorInfo::extend_padding()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a57360dd9ca408834c0ea1a8ef70a11f4">ITensorInfo::format()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ac394d6570ab3325810a3532d39091a52">ITensorInfo::has_padding()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a5b65f0a62b9fad74cd3024ff983dd313">ITensorInfo::is_dynamic()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#af555338f11d1d28f258f259ac3da743b">ITensorInfo::is_resizable()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ad7829ae79223ab87f9da4c0bd7d229ba">ITensorInfo::num_channels()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a1f4e725b8e1ea36b30e09dc08ae6961d">ITensorInfo::num_dimensions()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ac80aea0e8c7c5c812ea8c7221fbfd4b2">ITensorInfo::offset_element_in_bytes()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ad0bd5cc32e7e4c0699eccba91e5de397">ITensorInfo::offset_first_element_in_bytes()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a07b929c34ad1dc823d8315876aa403ce">ITensorInfo::padding()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo::quantization_info()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#afc135290818a7ae02d2195c013796fdd">ITensorInfo::reset_padding()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a75157b4ea9a60a8c316d3469f1dc3a17">ITensorInfo::set_are_values_constant()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#abb9481fe056b9749f9b4c08db101cc15">ITensorInfo::set_data_layout()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a9ebcdce876b4cd07736afa47d50154de">ITensorInfo::set_data_type()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a17394f0f7aea22d9b2d4c6f33bfa69ca">ITensorInfo::set_format()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a9273842d8e5dc1a3c7fab727176fd7fe">ITensorInfo::set_is_resizable()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#aaf74be25e2392705f29352ffaa4b1f9d">ITensorInfo::set_num_channels()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a575d37eaf8a905c8ca3c0250757c2b81">ITensorInfo::set_quantization_info()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a0bbfdc0b7847b27de9e336f7720809ce">ITensorInfo::set_tensor_dims_state()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a12a4f1190952613e36b44846962e26bb">ITensorInfo::set_tensor_shape()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a9586081a29fceb532ab270bd843abee6">ITensorInfo::set_valid_region()</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">arm_compute::test::validation::shape</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">ITensorInfo::strides_in_bytes()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a06197f59bed02e0977b3533b824a2e51">ITensorInfo::tensor_dims_state()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a18064e0011c3869d884653e9e7c47b66">ITensorInfo::total_size()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a74dfd07380a290c34fe7c8e065029b95">ITensorInfo::valid_region()</a>, and <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ad998b50febf68540277e121a9c670bfa">ITensorInfo::~ITensorInfo()</a>.</p>

<p class="reference">Referenced by <a class="el" href="tests_2_utils_8h_source.xhtml#l00605">arm_compute::test::construct_static_dims_state()</a>.</p>
<div class="fragment"><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    {</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <span class="keywordflow">return</span> _static_dimension;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="ac394d6570ab3325810a3532d39091a52"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac394d6570ab3325810a3532d39091a52">&#9670;&nbsp;</a></span>has_padding()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool has_padding </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Checks if the tensor has been allocated with padding or not. </p>
<dl class="section return"><dt>Returns</dt><dd>True if padding is allocated in the tensor, otherwise false. </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#aa2ca251f99c56767719e991a26371603">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#aa2ca251f99c56767719e991a26371603">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_add_kernel_8cpp_source.xhtml#l00042">arm_compute::cpu::kernels::can_interpret_inputs_as_1d_array()</a>, <a class="el" href="_n_e_pad_layer_kernel_8cpp_source.xhtml#l00186">NEPadLayerKernel::configure()</a>, <a class="el" href="_i_tensor_info_8h_source.xhtml#l00058">ITensorInfo::get_static_state_value()</a>, <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00184">SubTensorInfo::has_padding()</a>, <a class="el" href="_n_e_crop_kernel_8cpp_source.xhtml#l00292">NECropKernel::run()</a>, and <a class="el" href="_n_e_crop_kernel_8cpp_source.xhtml#l00210">NECropKernel::validate()</a>.</p>

</div>
</div>
<a id="a5b65f0a62b9fad74cd3024ff983dd313"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5b65f0a62b9fad74cd3024ff983dd313">&#9670;&nbsp;</a></span>is_dynamic()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool is_dynamic </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Flag indicating whether the shape of the tensor is dynamic, meaning that it can change on kernel/function execution. </p>
<dl class="section return"><dt>Returns</dt><dd>True if its dynamic else false </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a7e890c9c5d4143d64a83b4ac19f4d3e4">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a7e890c9c5d4143d64a83b4ac19f4d3e4">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_elementwise_unary_kernel_8cpp_source.xhtml#l00099">CpuElementwiseUnaryKernel::configure()</a>, <a class="el" href="_cpu_elementwise_kernel_8cpp_source.xhtml#l00277">CpuComparisonKernel::get_available_kernels()</a>, <a class="el" href="_i_tensor_info_8h_source.xhtml#l00058">ITensorInfo::get_static_state_value()</a>, and <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00194">SubTensorInfo::is_dynamic()</a>.</p>

</div>
</div>
<a id="af555338f11d1d28f258f259ac3da743b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af555338f11d1d28f258f259ac3da743b">&#9670;&nbsp;</a></span>is_resizable()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool is_resizable </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Flag indicating whether the size of the tensor can be changed. </p>
<dl class="section return"><dt>Returns</dt><dd>True if the tensor size can be changed. </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#aaee6555ace43b03173844b1a228a3fc3">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#aaee6555ace43b03173844b1a228a3fc3">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00282">arm_compute::test::validation::DATA_TEST_CASE()</a>, <a class="el" href="src_2core_2_sub_tensor_info_8cpp_source.xhtml#l00117">SubTensorInfo::extend_padding()</a>, <a class="el" href="_i_tensor_info_8h_source.xhtml#l00058">ITensorInfo::get_static_state_value()</a>, <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00189">SubTensorInfo::is_resizable()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00042">TensorInfo::TensorInfo()</a>, <a class="el" href="tests_2validation_2_n_e_o_n_2_u_n_i_t_2_runtime_context_8cpp_source.xhtml#l00053">arm_compute::test::validation::TEST_CASE()</a>, <a class="el" href="_access_window_auto_padding_8cpp_source.xhtml#l00073">AccessWindowAutoPadding::update_padding_if_needed()</a>, <a class="el" href="_access_window_static_8cpp_source.xhtml#l00160">AccessWindowStatic::update_padding_if_needed()</a>, <a class="el" href="_i_access_window_8cpp_source.xhtml#l00212">AccessWindowRectangle::update_padding_if_needed()</a>, <a class="el" href="_access_window_static_8cpp_source.xhtml#l00084">AccessWindowStatic::update_window_if_needed()</a>, and <a class="el" href="_i_access_window_8cpp_source.xhtml#l00097">AccessWindowRectangle::update_window_if_needed()</a>.</p>

</div>
</div>
<a id="ad7829ae79223ab87f9da4c0bd7d229ba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad7829ae79223ab87f9da4c0bd7d229ba">&#9670;&nbsp;</a></span>num_channels()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual size_t num_channels </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The number of channels for each tensor element. </p>
<dl class="section return"><dt>Returns</dt><dd>The number of channels for each tensor element </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a6f13b974eeb528acde66de8d9b3fd95c">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a6f13b974eeb528acde66de8d9b3fd95c">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_auto_configuration_8h_source.xhtml#l00066">arm_compute::auto_init_if_empty()</a>, <a class="el" href="_n_e_f_f_t_digit_reverse_kernel_8cpp_source.xhtml#l00076">NEFFTDigitReverseKernel::configure()</a>, <a class="el" href="_c_l_f_f_t_scale_kernel_8cpp_source.xhtml#l00066">CLFFTScaleKernel::configure()</a>, <a class="el" href="_c_l_f_f_t_digit_reverse_kernel_8cpp_source.xhtml#l00081">CLFFTDigitReverseKernel::configure()</a>, <a class="el" href="_c_l_reduction_operation_kernel_8cpp_source.xhtml#l00086">CLReductionOperationKernel::configure()</a>, <a class="el" href="_n_e_reduce_mean_8cpp_source.xhtml#l00114">NEReduceMean::configure()</a>, <a class="el" href="_c_l_reduce_mean_8cpp_source.xhtml#l00114">CLReduceMean::configure()</a>, <a class="el" href="_c_l_fill_border_kernel_8cpp_source.xhtml#l00069">CLFillBorderKernel::configure()</a>, <a class="el" href="_n_e_f_f_t1_d_8cpp_source.xhtml#l00044">NEFFT1D::configure()</a>, <a class="el" href="_n_e_reduction_operation_8cpp_source.xhtml#l00105">NEReductionOperation::configure()</a>, <a class="el" href="_c_l_f_f_t1_d_8cpp_source.xhtml#l00057">CLFFT1D::configure()</a>, <a class="el" href="_cpu_mul_kernel_8cpp_source.xhtml#l01685">CpuComplexMulKernel::configure()</a>, <a class="el" href="_i_tensor_8cpp_source.xhtml#l00035">ITensor::copy_from()</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00758">arm_compute::error_on_data_type_channel_not_in()</a>, <a class="el" href="_i_tensor_info_8h_source.xhtml#l00058">ITensorInfo::get_static_state_value()</a>, <a class="el" href="_accessor_8h_source.xhtml#l00114">Accessor::num_channels()</a>, <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00149">SubTensorInfo::num_channels()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00042">TensorInfo::TensorInfo()</a>, <a class="el" href="_n_e_f_f_t1_d_8cpp_source.xhtml#l00111">NEFFT1D::validate()</a>, <a class="el" href="_n_e_reduction_operation_8cpp_source.xhtml#l00066">NEReductionOperation::validate()</a>, <a class="el" href="_c_l_f_f_t1_d_8cpp_source.xhtml#l00121">CLFFT1D::validate()</a>, <a class="el" href="_c_l_arg_min_max_layer_8cpp_source.xhtml#l00048">CLArgMinMaxLayer::validate()</a>, and <a class="el" href="_c_l_reduction_operation_8cpp_source.xhtml#l00048">CLReductionOperation::validate()</a>.</p>

</div>
</div>
<a id="a1f4e725b8e1ea36b30e09dc08ae6961d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1f4e725b8e1ea36b30e09dc08ae6961d">&#9670;&nbsp;</a></span>num_dimensions()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual size_t num_dimensions </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The number of dimensions of the tensor (rank) </p>
<dl class="section return"><dt>Returns</dt><dd>The number of dimensions of the tensor (rank) </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a13622133d9b41900a6a3e8f89e59a78b">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a13622133d9b41900a6a3e8f89e59a78b">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_c_l_kernel_8cpp_source.xhtml#l00088">ICLKernel::add_tensor_argument()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00051">arm_compute::misc::shape_calculator::calculate_reduce_mean_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00876">arm_compute::misc::shape_calculator::compute_mm_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01376">arm_compute::misc::shape_calculator::compute_stack_shape()</a>, <a class="el" href="src_2core_2helpers_2_utils_8h_source.xhtml#l00041">arm_compute::compute_strides()</a>, <a class="el" href="_access_window_static_8cpp_source.xhtml#l00045">AccessWindowStatic::compute_valid_region()</a>, <a class="el" href="_i_access_window_8cpp_source.xhtml#l00037">AccessWindowRectangle::compute_valid_region()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00150">arm_compute::misc::shape_calculator::compute_weights_reshaped_shape()</a>, <a class="el" href="_cpu_transpose_kernel_8cpp_source.xhtml#l00427">CpuTransposeKernel::configure()</a>, <a class="el" href="_cl_scale_kernel_8cpp_source.xhtml#l00092">ClScaleKernel::configure()</a>, <a class="el" href="_c_p_p_detection_output_layer_8cpp_source.xhtml#l00393">CPPDetectionOutputLayer::configure()</a>, <a class="el" href="_cl_softmax_8cpp_source.xhtml#l00055">ClSoftmax::configure()</a>, <a class="el" href="_c_l_strided_slice_kernel_8cpp_source.xhtml#l00078">CLStridedSliceKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_native_kernel_8cpp_source.xhtml#l00166">ClGemmLowpMatrixMultiplyNativeKernel::configure()</a>, <a class="el" href="_cpu_scale_kernel_8cpp_source.xhtml#l00164">CpuScaleKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_native_kernel_8cpp_source.xhtml#l00225">ClGemmMatrixMultiplyNativeKernel::configure()</a>, <a class="el" href="_c_p_p_upsample_kernel_8cpp_source.xhtml#l00044">CPPUpsampleKernel::configure()</a>, <a class="el" href="_c_p_p_permute_kernel_8cpp_source.xhtml#l00102">CPPPermuteKernel::configure()</a>, <a class="el" href="_n_e_pad_layer_kernel_8cpp_source.xhtml#l00186">NEPadLayerKernel::configure()</a>, <a class="el" href="_c_l_gather_kernel_8cpp_source.xhtml#l00086">CLGatherKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00143">ClGemmLowpMatrixMultiplyReshapedKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_kernel_8cpp_source.xhtml#l00108">ClGemmLowpOffsetContributionKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_output_stage_kernel_8cpp_source.xhtml#l00132">ClGemmLowpOffsetContributionOutputStageKernel::configure()</a>, <a class="el" href="_cpu_softmax_8cpp_source.xhtml#l00059">CpuSoftmaxGeneric&lt; IS_LOG &gt;::configure()</a>, <a class="el" href="_n_e_gather_kernel_8cpp_source.xhtml#l00170">NEGatherKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00288">ClGemmLowpMatrixMultiplyReshapedOnlyRhsKernel::configure()</a>, <a class="el" href="_n_e_reduce_mean_8cpp_source.xhtml#l00114">NEReduceMean::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_native_kernel_8cpp_source.xhtml#l00174">CLDepthwiseConvolutionLayerNativeKernel::configure()</a>, <a class="el" href="_c_l_reduce_mean_8cpp_source.xhtml#l00114">CLReduceMean::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00187">ClGemmMatrixMultiplyReshapedOnlyRhsKernel::configure()</a>, <a class="el" href="_cl_fully_connected_8cpp_source.xhtml#l00227">ClFullyConnected::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00188">ClGemmMatrixMultiplyReshapedKernel::configure()</a>, <a class="el" href="_cpu_fully_connected_8cpp_source.xhtml#l00234">CpuFullyConnected::configure()</a>, <a class="el" href="_i_tensor_8cpp_source.xhtml#l00035">ITensor::copy_from()</a>, <a class="el" href="_validate_8cpp_source.xhtml#l00092">arm_compute::error_on_tensor_not_2d()</a>, <a class="el" href="_i_tensor_info_8h_source.xhtml#l00058">ITensorInfo::get_static_state_value()</a>, <a class="el" href="gemm__matrix__mul_2generic_2neon_2impl_8cpp_source.xhtml#l00462">arm_compute::cpu::matrix_matrix_multiply_f32()</a>, <a class="el" href="_n_e_gather_kernel_8cpp_source.xhtml#l00089">NEGatherKernel::NEGatherKernel()</a>, <a class="el" href="_n_e_stack_layer_kernel_8cpp_source.xhtml#l00116">NEStackLayerKernel::run()</a>, <a class="el" href="_cpu_gemm_lowp_offset_contribution_kernel_8cpp_source.xhtml#l00393">CpuGemmLowpOffsetContributionKernel::run_op()</a>, <a class="el" href="_access_window_static_8cpp_source.xhtml#l00084">AccessWindowStatic::update_window_if_needed()</a>, <a class="el" href="_i_access_window_8cpp_source.xhtml#l00097">AccessWindowRectangle::update_window_if_needed()</a>, <a class="el" href="_cl_transpose_kernel_8cpp_source.xhtml#l00083">ClTransposeKernel::validate()</a>, <a class="el" href="_c_p_p_split_8h_source.xhtml#l00058">CPPSplit&lt; CLSlice, ICLTensor &gt;::validate()</a>, <a class="el" href="_cl_softmax_8cpp_source.xhtml#l00100">ClSoftmax::validate()</a>, <a class="el" href="_cpu_convert_fully_connected_weights_kernel_8cpp_source.xhtml#l00065">CpuConvertFullyConnectedWeightsKernel::validate()</a>, <a class="el" href="_cl_crop_kernel_8cpp_source.xhtml#l00090">ClCropKernel::validate()</a>, <a class="el" href="_cl_convert_fully_connected_weights_kernel_8cpp_source.xhtml#l00088">ClConvertFullyConnectedWeightsKernel::validate()</a>, <a class="el" href="_n_e_q_l_s_t_m_layer_normalization_kernel_8cpp_source.xhtml#l00137">NEQLSTMLayerNormalizationKernel::validate()</a>, <a class="el" href="_cpu_depthwise_conv2d_assembly_wrapper_kernel_8cpp_source.xhtml#l00258">CpuDepthwiseConv2dAssemblyWrapperKernel::validate()</a>, <a class="el" href="_cpu_softmax_8cpp_source.xhtml#l00120">CpuSoftmaxGeneric&lt; IS_LOG &gt;::validate()</a>, <a class="el" href="_cpu_gemm_direct_conv2d_8cpp_source.xhtml#l00156">CpuGemmDirectConv2d::validate()</a>, <a class="el" href="_cpu_direct_conv2d_8cpp_source.xhtml#l00086">CpuDirectConv2d::validate()</a>, <a class="el" href="_n_e_crop_kernel_8cpp_source.xhtml#l00210">NECropKernel::validate()</a>, <a class="el" href="_n_e_r_n_n_layer_8cpp_source.xhtml#l00045">NERNNLayer::validate()</a>, <a class="el" href="_cl_fully_connected_8cpp_source.xhtml#l00328">ClFullyConnected::validate()</a>, <a class="el" href="_c_l_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00050">CLROIPoolingLayerKernel::validate()</a>, <a class="el" href="_cpu_fully_connected_8cpp_source.xhtml#l00354">CpuFullyConnected::validate()</a>, <a class="el" href="_c_l_r_n_n_layer_8cpp_source.xhtml#l00047">CLRNNLayer::validate()</a>, <a class="el" href="_cl_gemm_conv2d_8cpp_source.xhtml#l00349">ClGemmConv2d::validate()</a>, <a class="el" href="_n_e_generate_proposals_layer_8cpp_source.xhtml#l00212">NEGenerateProposalsLayer::validate()</a>, <a class="el" href="_cpu_gemm_conv2d_8cpp_source.xhtml#l00423">CpuGemmConv2d::validate()</a>, <a class="el" href="_n_e_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00248">NELSTMLayerQuantized::validate()</a>, <a class="el" href="_cl_kernel_graph_8cpp_source.xhtml#l00061">ClDirectConv2dKernel::validate()</a>, <a class="el" href="_c_l_generate_proposals_layer_8cpp_source.xhtml#l00210">CLGenerateProposalsLayer::validate()</a>, <a class="el" href="_n_e_l_s_t_m_layer_8cpp_source.xhtml#l00375">NELSTMLayer::validate()</a>, <a class="el" href="_c_l_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00280">CLLSTMLayerQuantized::validate()</a>, <a class="el" href="_n_e_q_l_s_t_m_layer_8cpp_source.xhtml#l00675">NEQLSTMLayer::validate()</a>, <a class="el" href="_c_l_l_s_t_m_layer_8cpp_source.xhtml#l00400">CLLSTMLayer::validate()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml#l00603">CLQLSTMLayer::validate()</a>, <a class="el" href="_cpu_direct_conv2d_kernel_8cpp_source.xhtml#l00060">arm_compute::cpu::kernels::validate_arguments()</a>, and <a class="el" href="gemm__matrix__mul_2generic_2neon_2impl_8cpp_source.xhtml#l00230">arm_compute::cpu::vector_matrix_multiply_f32()</a>.</p>

</div>
</div>
<a id="ac80aea0e8c7c5c812ea8c7221fbfd4b2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac80aea0e8c7c5c812ea8c7221fbfd4b2">&#9670;&nbsp;</a></span>offset_element_in_bytes()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual int32_t offset_element_in_bytes </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;&#160;</td>
          <td class="paramname"><em>pos</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The offset in bytes from the beginning of the memory allocation to access the element at position (x, y, z ...) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pos</td><td><a class="el" href="struct_vector.xhtml" title="Structure to hold Vector information. ">Vector</a> with the coordinates of the element to access. The size of this vector must be equal to the number of dimensions of the tensor</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Offset in bytes from the beginning of the memory allocation to access the element (x, y, z, ...) </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a7888888b7f18215ae83fd3660d38eccb">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a7888888b7f18215ae83fd3660d38eccb">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_tensor_8cpp_source.xhtml#l00035">ITensor::copy_from()</a>, <a class="el" href="utils_2_utils_8cpp_source.xhtml#l00130">arm_compute::utils::draw_detection_rectangle()</a>, <a class="el" href="_i_tensor_info_8h_source.xhtml#l00058">ITensorInfo::get_static_state_value()</a>, <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00134">SubTensorInfo::offset_first_element_in_bytes()</a>, <a class="el" href="_i_tensor_8h_source.xhtml#l00063">ITensor::ptr_to_element()</a>, and <a class="el" href="_n_e_reorg_layer_kernel_8cpp_source.xhtml#l00102">NEReorgLayerKernel::run()</a>.</p>

</div>
</div>
<a id="ad0bd5cc32e7e4c0699eccba91e5de397"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad0bd5cc32e7e4c0699eccba91e5de397">&#9670;&nbsp;</a></span>offset_first_element_in_bytes()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual size_t offset_first_element_in_bytes </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The offset from the beginning of the memory allocation to the first element of the tensor. </p>
<p>This can be used to access efficiently elements in a 2D tensor</p>
<dl class="section return"><dt>Returns</dt><dd>The offset in bytes to access the first element of the tensor. </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ab54246abe670b06f5624add7e7022904">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#ab54246abe670b06f5624add7e7022904">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_utils_8cpp_source.xhtml#l00432">ValidationOutputAccessor::access_tensor()</a>, <a class="el" href="_i_c_l_kernel_8cpp_source.xhtml#l00119">ICLKernel::add_3d_tensor_nhw_argument()</a>, <a class="el" href="_i_c_l_kernel_8cpp_source.xhtml#l00144">ICLKernel::add_4d_tensor_nhwc_argument()</a>, <a class="el" href="_i_c_l_kernel_8cpp_source.xhtml#l00088">ICLKernel::add_tensor_argument()</a>, <a class="el" href="pool3d_2neon_2quantized_8h_source.xhtml#l00038">arm_compute::cpu::avg_poolingMxNxD_q8_neon_ndhwc()</a>, <a class="el" href="boundingboxtransform_2generic_2neon_2impl_8cpp_source.xhtml#l00087">arm_compute::cpu::bounding_box_transform()</a>, <a class="el" href="boundingboxtransform_2generic_2neon_2impl_8cpp_source.xhtml#l00029">arm_compute::cpu::bounding_box_transform_qsymm16()</a>, <a class="el" href="directconv2d_2nchw_2all_8cpp_source.xhtml#l00062">arm_compute::cpu::kernels::convolve_nchw()</a>, <a class="el" href="directconv2d_2nhwc_2neon_2impl_8cpp_source.xhtml#l00057">arm_compute::cpu::kernels::convolve_nhwc()</a>, <a class="el" href="_i_tensor_8cpp_source.xhtml#l00035">ITensor::copy_from()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00518">DetectionOutputAccessor::DetectionOutputAccessor()</a>, <a class="el" href="cpu_2kernels_2conv3d_2neon_2list_8h_source.xhtml#l00039">arm_compute::cpu::directconv3d_float_neon_ndhwc()</a>, <a class="el" href="conv3d_2neon_2quantized_8h_source.xhtml#l00040">arm_compute::cpu::directconv3d_quantized_neon_ndhwc()</a>, <a class="el" href="_i_tensor_info_8h_source.xhtml#l00058">ITensorInfo::get_static_state_value()</a>, <a class="el" href="pool3d_2neon_2quantized_8h_source.xhtml#l00228">arm_compute::cpu::max_poolingMxNxD_q8_neon_ndhwc()</a>, <a class="el" href="_cpu_depthwise_conv2d_assembly_dispatch_8cpp_source.xhtml#l00108">CpuDepthwiseConv2dAssemblyDispatch::prepare()</a>, <a class="el" href="_cpu_winograd_conv2d_8cpp_source.xhtml#l00368">CpuWinogradConv2d::prepare()</a>, <a class="el" href="_cpu_winograd_conv2d_kernel_8cpp_source.xhtml#l00036">CpuWinogradConv2dTransformInputKernel::run_op()</a>, <a class="el" href="_cpu_depthwise_conv2d_assembly_wrapper_kernel_8cpp_source.xhtml#l00304">CpuDepthwiseConv2dAssemblyWrapperKernel::run_op()</a>, <a class="el" href="_cpu_pool2d_assembly_wrapper_kernel_8cpp_source.xhtml#l00144">CpuPool2dAssemblyWrapperKernel::run_op()</a>, <a class="el" href="_cpu_winograd_conv2d_kernel_8cpp_source.xhtml#l00074">CpuWinogradConv2dTransformOutputKernel::run_op()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00042">TensorInfo::TensorInfo()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00589">TopNPredictionsAccessor::TopNPredictionsAccessor()</a>, <a class="el" href="_access_window_static_8cpp_source.xhtml#l00084">AccessWindowStatic::update_window_if_needed()</a>, and <a class="el" href="_i_access_window_8cpp_source.xhtml#l00097">AccessWindowRectangle::update_window_if_needed()</a>.</p>

</div>
</div>
<a id="a07b929c34ad1dc823d8315876aa403ce"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a07b929c34ad1dc823d8315876aa403ce">&#9670;&nbsp;</a></span>padding()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespacearm__compute.xhtml#a4467b302fc9ec312c40580336ab783da">PaddingSize</a> padding </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Padding of tensor. </p>
<dl class="section return"><dt>Returns</dt><dd>Padding. </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a79e20eacb1e963e24a21ebd7369effd7">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a79e20eacb1e963e24a21ebd7369effd7">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_composite_kernel_8cpp_source.xhtml#l00042">ClCompositeKernel::configure()</a>, <a class="el" href="_cpu_scale_kernel_8cpp_source.xhtml#l00164">CpuScaleKernel::configure()</a>, <a class="el" href="_cl_winograd_input_transform_kernel_8cpp_source.xhtml#l00113">ClWinogradInputTransformKernel::configure()</a>, <a class="el" href="_c_l_fill_border_kernel_8cpp_source.xhtml#l00069">CLFillBorderKernel::configure()</a>, <a class="el" href="_n_e_fill_border_kernel_8cpp_source.xhtml#l00103">NEFillBorderKernel::configure()</a>, <a class="el" href="_i_tensor_8cpp_source.xhtml#l00035">ITensor::copy_from()</a>, <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00282">arm_compute::test::validation::DATA_TEST_CASE()</a>, <a class="el" href="_i_tensor_info_8h_source.xhtml#l00058">ITensorInfo::get_static_state_value()</a>, <a class="el" href="cpu_2kernels_2pool2d_2neon_2list_8h_source.xhtml#l00062">arm_compute::cpu::offset_no_padding()</a>, <a class="el" href="_accessor_8h_source.xhtml#l00124">Accessor::padding()</a>, <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00179">SubTensorInfo::padding()</a>, <a class="el" href="_cpu_depthwise_conv2d_assembly_dispatch_8cpp_source.xhtml#l00108">CpuDepthwiseConv2dAssemblyDispatch::prepare()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00666">RandomAccessor::RandomAccessor()</a>, <a class="el" href="_n_e_f_f_t_radix_stage_kernel_8cpp_source.xhtml#l01037">NEFFTRadixStageKernel::run()</a>, <a class="el" href="gpu_2cl_2operators_2_cl_gemm_8cpp_source.xhtml#l00663">ClGemm::run()</a>, <a class="el" href="_cpu_gemm_conv2d_8cpp_source.xhtml#l00544">CpuGemmConv2d::run()</a>, <a class="el" href="_cpu_depthwise_conv2d_assembly_wrapper_kernel_8cpp_source.xhtml#l00304">CpuDepthwiseConv2dAssemblyWrapperKernel::run_op()</a>, <a class="el" href="_cpu_pool2d_assembly_wrapper_kernel_8cpp_source.xhtml#l00144">CpuPool2dAssemblyWrapperKernel::run_op()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00042">TensorInfo::TensorInfo()</a>, <a class="el" href="tests_2validation_2_n_e_o_n_2_u_n_i_t_2_tensor_allocator_8cpp_source.xhtml#l00143">arm_compute::test::validation::TEST_CASE()</a>, <a class="el" href="_cl_gemm_helpers_8cpp_source.xhtml#l00072">arm_compute::opencl::kernels::gemm::update_padding_for_cl_image()</a>, and <a class="el" href="_i_access_window_8cpp_source.xhtml#l00097">AccessWindowRectangle::update_window_if_needed()</a>.</p>

</div>
</div>
<a id="a3f3e1a3200223e6a304a533b1016e749"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3f3e1a3200223e6a304a533b1016e749">&#9670;&nbsp;</a></span>quantization_info()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> quantization_info </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the quantization settings (scale and offset) of the tensor. </p>
<dl class="section return"><dt>Returns</dt><dd>A <a class="el" href="classarm__compute_1_1_quantization_info.xhtml" title="Quantization information. ">QuantizationInfo</a> containing the scale and offset. </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ac74736e3863207232a23b7181c1d0f44">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#ac74736e3863207232a23b7181c1d0f44">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="add_2generic_2neon_2qasymm8_8cpp_source.xhtml#l00035">arm_compute::cpu::add_qasymm8_neon()</a>, <a class="el" href="add_2generic_2neon_2qasymm8__signed_8cpp_source.xhtml#l00035">arm_compute::cpu::add_qasymm8_signed_neon()</a>, <a class="el" href="add_2generic_2sve2_2qasymm8__signed_8cpp_source.xhtml#l00037">arm_compute::cpu::add_qasymm8_signed_sve2()</a>, <a class="el" href="add_2generic_2sve2_2qasymm8_8cpp_source.xhtml#l00037">arm_compute::cpu::add_qasymm8_sve2()</a>, <a class="el" href="add_2generic_2neon_2qsymm16_8cpp_source.xhtml#l00035">arm_compute::cpu::add_qsymm16_neon()</a>, <a class="el" href="add_2generic_2sve2_2qsymm16_8cpp_source.xhtml#l00037">arm_compute::cpu::add_qsymm16_sve2()</a>, <a class="el" href="_auto_configuration_8h_source.xhtml#l00066">arm_compute::auto_init_if_empty()</a>, <a class="el" href="pool3d_2neon_2quantized_8h_source.xhtml#l00038">arm_compute::cpu::avg_poolingMxNxD_q8_neon_ndhwc()</a>, <a class="el" href="boundingboxtransform_2generic_2neon_2impl_8cpp_source.xhtml#l00029">arm_compute::cpu::bounding_box_transform_qsymm16()</a>, <a class="el" href="genproposals_2generic_2neon_2impl_8cpp_source.xhtml#l00065">arm_compute::cpu::compute_all_anchors_qasymm16()</a>, <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00179">arm_compute::quantization::compute_quantized_multipliers_and_shifts()</a>, <a class="el" href="_cl_dequantize_kernel_8cpp_source.xhtml#l00069">ClDequantizeKernel::configure()</a>, <a class="el" href="_cpu_softmax_kernel_8cpp_source.xhtml#l00113">CpuLogits1DMaxKernel::configure()</a>, <a class="el" href="_cl_scale_kernel_8cpp_source.xhtml#l00092">ClScaleKernel::configure()</a>, <a class="el" href="_cl_width_concatenate2_tensors_kernel_8cpp_source.xhtml#l00076">ClWidthConcatenate2TensorsKernel::configure()</a>, <a class="el" href="_cl_activation_kernel_8cpp_source.xhtml#l00094">ClActivationKernel::configure()</a>, <a class="el" href="_cl_height_concatenate_kernel_8cpp_source.xhtml#l00076">ClHeightConcatenateKernel::configure()</a>, <a class="el" href="_cl_pool2d_kernel_8cpp_source.xhtml#l00099">ClPool2dKernel::configure()</a>, <a class="el" href="_cl_pool3d_kernel_8cpp_source.xhtml#l00096">ClPool3dKernel::configure()</a>, <a class="el" href="_cl_width_concatenate_kernel_8cpp_source.xhtml#l00075">ClWidthConcatenateKernel::configure()</a>, <a class="el" href="_cl_quantize_kernel_8cpp_source.xhtml#l00069">ClQuantizeKernel::configure()</a>, <a class="el" href="_cpu_activation_kernel_8cpp_source.xhtml#l00181">CpuActivationKernel::configure()</a>, <a class="el" href="_cl_width_concatenate4_tensors_kernel_8cpp_source.xhtml#l00078">ClWidthConcatenate4TensorsKernel::configure()</a>, <a class="el" href="_cl_depth_concatenate_kernel_8cpp_source.xhtml#l00067">ClDepthConcatenateKernel::configure()</a>, <a class="el" href="_cl_batch_concatenate_kernel_8cpp_source.xhtml#l00067">ClBatchConcatenateKernel::configure()</a>, <a class="el" href="_n_e_generate_proposals_layer_kernel_8cpp_source.xhtml#l00129">NEComputeAllAnchorsKernel::configure()</a>, <a class="el" href="_cl_direct_conv2d_8cpp_source.xhtml#l00068">ClDirectConv2d::configure()</a>, <a class="el" href="_cpu_scale_kernel_8cpp_source.xhtml#l00164">CpuScaleKernel::configure()</a>, <a class="el" href="_cl_softmax_kernel_8cpp_source.xhtml#l00162">ClLogits1DMaxShiftExpSumKernel::configure()</a>, <a class="el" href="_c_l_generate_proposals_layer_kernel_8cpp_source.xhtml#l00079">CLComputeAllAnchorsKernel::configure()</a>, <a class="el" href="_n_e_range_kernel_8cpp_source.xhtml#l00146">NERangeKernel::configure()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_normalization_kernel_8cpp_source.xhtml#l00088">CLQLSTMLayerNormalizationKernel::configure()</a>, <a class="el" href="_n_e_bounding_box_transform_kernel_8cpp_source.xhtml#l00145">NEBoundingBoxTransformKernel::configure()</a>, <a class="el" href="_n_e_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00121">NEROIPoolingLayerKernel::configure()</a>, <a class="el" href="_cpu_depthwise_conv2d_native_kernel_8cpp_source.xhtml#l00146">CpuDepthwiseConv2dNativeKernel::configure()</a>, <a class="el" href="_c_l_comparison_kernel_8cpp_source.xhtml#l00112">CLComparisonKernel::configure()</a>, <a class="el" href="_cpu_pool2d_assembly_wrapper_kernel_8cpp_source.xhtml#l00044">CpuPool2dAssemblyWrapperKernel::configure()</a>, <a class="el" href="_c_l_normalize_planar_y_u_v_layer_kernel_8cpp_source.xhtml#l00094">CLNormalizePlanarYUVLayerKernel::configure()</a>, <a class="el" href="_cl_direct_conv2d_kernel_8cpp_source.xhtml#l00147">ClDirectConv2dKernel::configure()</a>, <a class="el" href="_n_e_r_o_i_align_layer_kernel_8cpp_source.xhtml#l00146">NEROIAlignLayerKernel::configure()</a>, <a class="el" href="_c_l_range_kernel_8cpp_source.xhtml#l00079">CLRangeKernel::configure()</a>, <a class="el" href="_c_l_reduction_operation_kernel_8cpp_source.xhtml#l00086">CLReductionOperationKernel::configure()</a>, <a class="el" href="_n_e_space_to_batch_layer_kernel_8cpp_source.xhtml#l00109">NESpaceToBatchLayerKernel::configure()</a>, <a class="el" href="_cl_direct_conv3d_kernel_8cpp_source.xhtml#l00092">ClDirectConv3dKernel::configure()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00113">ClMulKernel::configure()</a>, <a class="el" href="_c_l_bounding_box_transform_kernel_8cpp_source.xhtml#l00096">CLBoundingBoxTransformKernel::configure()</a>, <a class="el" href="_n_e_reduce_mean_8cpp_source.xhtml#l00114">NEReduceMean::configure()</a>, <a class="el" href="_n_e_space_to_batch_layer_8cpp_source.xhtml#l00045">NESpaceToBatchLayer::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_native_kernel_8cpp_source.xhtml#l00174">CLDepthwiseConvolutionLayerNativeKernel::configure()</a>, <a class="el" href="_c_l_reduce_mean_8cpp_source.xhtml#l00114">CLReduceMean::configure()</a>, <a class="el" href="_c_l_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00079">CLROIPoolingLayerKernel::configure()</a>, <a class="el" href="_n_e_reduction_operation_8cpp_source.xhtml#l00105">NEReductionOperation::configure()</a>, <a class="el" href="_c_l_r_o_i_align_layer_kernel_8cpp_source.xhtml#l00090">CLROIAlignLayerKernel::configure()</a>, <a class="el" href="_c_l_deconvolution_layer_upsample_8cpp_source.xhtml#l00055">CLDeconvolutionLayerUpsample::configure()</a>, <a class="el" href="_c_l_space_to_batch_layer_8cpp_source.xhtml#l00052">CLSpaceToBatchLayer::configure()</a>, <a class="el" href="_c_l_space_to_batch_layer_kernel_8cpp_source.xhtml#l00134">CLSpaceToBatchLayerKernel::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_8cpp_source.xhtml#l00163">CLDepthwiseConvolutionLayer::configure()</a>, <a class="el" href="gpu_2cl_2operators_2_cl_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00256">ClGemmLowpMatrixMultiplyCore::configure()</a>, <a class="el" href="_cpu_softmax_kernel_8cpp_source.xhtml#l00252">CpuLogits1DSoftmaxKernel&lt; IS_LOG &gt;::configure()</a>, <a class="el" href="_n_e_generate_proposals_layer_8cpp_source.xhtml#l00071">NEGenerateProposalsLayer::configure()</a>, <a class="el" href="_cl_softmax_kernel_8cpp_source.xhtml#l00268">ClLogits1DNormKernel::configure()</a>, <a class="el" href="_cl_gemm_conv2d_8cpp_source.xhtml#l00162">ClGemmConv2d::configure()</a>, <a class="el" href="_n_e_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00060">NELSTMLayerQuantized::configure()</a>, <a class="el" href="_cpu_gemm_conv2d_8cpp_source.xhtml#l00256">CpuGemmConv2d::configure()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00108">CpuGemmLowpMatrixMultiplyCore::configure()</a>, <a class="el" href="_n_e_deconvolution_layer_8cpp_source.xhtml#l00156">NEDeconvolutionLayer::configure()</a>, <a class="el" href="_c_l_generate_proposals_layer_8cpp_source.xhtml#l00080">CLGenerateProposalsLayer::configure()</a>, <a class="el" href="_c_l_g_e_m_m_deconvolution_layer_8cpp_source.xhtml#l00224">CLGEMMDeconvolutionLayer::configure()</a>, <a class="el" href="_c_l_direct_deconvolution_layer_8cpp_source.xhtml#l00121">CLDirectDeconvolutionLayer::configure()</a>, <a class="el" href="_c_l_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00072">CLLSTMLayerQuantized::configure()</a>, <a class="el" href="_n_e_q_l_s_t_m_layer_8cpp_source.xhtml#l00214">NEQLSTMLayer::configure()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml#l00172">CLQLSTMLayer::configure()</a>, <a class="el" href="conv3d_2neon_2quantized_8h_source.xhtml#l00040">arm_compute::cpu::directconv3d_quantized_neon_ndhwc()</a>, <a class="el" href="elementwise__binary_2generic_2sve2_2impl_8h_source.xhtml#l00104">arm_compute::cpu::elementwise_arithmetic_quantized_op()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00856">arm_compute::cpu::elementwise_comp_quantized_signed()</a>, <a class="el" href="elementwise__binary_2generic_2sve2_2impl_8h_source.xhtml#l00235">arm_compute::cpu::elementwise_comparison_quantized_op()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00748">arm_compute::cpu::elementwise_op_quantized()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00963">arm_compute::cpu::elementwise_op_quantized_signed()</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00558">arm_compute::error_on_mismatching_quantization_info()</a>, <a class="el" href="_i_tensor_info_8h_source.xhtml#l00058">ITensorInfo::get_static_state_value()</a>, <a class="el" href="_cpu_pool2d_assembly_wrapper_kernel_8cpp_source.xhtml#l00183">CpuPool2dAssemblyWrapperKernel::is_configured()</a>, <a class="el" href="pool3d_2neon_2quantized_8h_source.xhtml#l00228">arm_compute::cpu::max_poolingMxNxD_q8_neon_ndhwc()</a>, <a class="el" href="_cpu_softmax_kernel_8cpp_source.xhtml#l00154">CpuLogits1DMaxKernel::name()</a>, <a class="el" href="activation_2generic_2neon_2qasymm8_8cpp_source.xhtml#l00445">arm_compute::cpu::neon_qasymm8_activation()</a>, <a class="el" href="activation_2generic_2neon_2qasymm8__signed_8cpp_source.xhtml#l00038">arm_compute::cpu::neon_qasymm8_signed_activation()</a>, <a class="el" href="activation_2generic_2neon_2qsymm16_8cpp_source.xhtml#l00040">arm_compute::cpu::neon_qsymm16_activation()</a>, <a class="el" href="softmax_2generic_2neon_2impl_8cpp_source.xhtml#l00091">arm_compute::cpu::neon_softmax_logits_1d_quantized()</a>, <a class="el" href="_n_e_pad_layer_8cpp_source.xhtml#l00054">NEPadLayer::NEPadLayer()</a>, <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01264">arm_compute::operator&lt;&lt;()</a>, <a class="el" href="pool2d_2neon_2quantized_8h_source.xhtml#l00041">arm_compute::cpu::poolingMxN_q8_neon_nhwc()</a>, <a class="el" href="_accessor_8h_source.xhtml#l00129">Accessor::quantization_info()</a>, <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00230">SubTensorInfo::quantization_info()</a>, <a class="el" href="roialign_2generic_2neon_2impl_8cpp_source.xhtml#l00213">arm_compute::cpu::roi_align()</a>, <a class="el" href="roialign_2generic_2neon_2impl_8cpp_source.xhtml#l00102">arm_compute::cpu::roi_align_1x1_qasymm8()</a>, <a class="el" href="_c_p_p_upsample_kernel_8cpp_source.xhtml#l00063">CPPUpsampleKernel::run()</a>, <a class="el" href="_c_p_p_detection_post_process_layer_8cpp_source.xhtml#l00288">CPPDetectionPostProcessLayer::run()</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8cpp_source.xhtml#l00771">arm_compute::cpu::run_depthwise_quanitized8bit()</a>, <a class="el" href="_auto_configuration_8h_source.xhtml#l00164">arm_compute::set_quantization_info_if_empty()</a>, <a class="el" href="sub_2neon_2qasymm8_8cpp_source.xhtml#l00035">arm_compute::cpu::sub_qasymm8_neon()</a>, <a class="el" href="sub_2neon_2qasymm8__signed_8cpp_source.xhtml#l00035">arm_compute::cpu::sub_qasymm8_signed_neon()</a>, <a class="el" href="sub_2neon_2qsymm16_8cpp_source.xhtml#l00035">arm_compute::cpu::sub_qsymm16_neon()</a>, <a class="el" href="activation_2generic_2sve2_2qasymm8_8cpp_source.xhtml#l00039">arm_compute::cpu::sve2_qasymm8_activation()</a>, <a class="el" href="activation_2generic_2sve2_2qasymm8__signed_8cpp_source.xhtml#l00039">arm_compute::cpu::sve2_qasymm8_signed_activation()</a>, <a class="el" href="activation_2generic_2sve2_2qsymm16_8cpp_source.xhtml#l00040">arm_compute::cpu::sve2_qsymm16_activation()</a>, <a class="el" href="softmax_2generic_2sve2_2impl_8cpp_source.xhtml#l00034">arm_compute::cpu::sve2_softmax_logits_1d_quantized()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00042">TensorInfo::TensorInfo()</a>, <a class="el" href="tensor__info_8h_source.xhtml#l00044">arm_compute::helpers::tensor_info::tensors_have_different_quantization_info()</a>, <a class="el" href="_cpu_quantize_kernel_8cpp_source.xhtml#l00156">CpuQuantizeKernel::validate()</a>, <a class="el" href="_cpu_depthwise_conv2d_assembly_wrapper_kernel_8cpp_source.xhtml#l00258">CpuDepthwiseConv2dAssemblyWrapperKernel::validate()</a>, <a class="el" href="_cpu_pool2d_assembly_wrapper_kernel_8cpp_source.xhtml#l00094">CpuPool2dAssemblyWrapperKernel::validate()</a>, <a class="el" href="_cpu_softmax_8cpp_source.xhtml#l00120">CpuSoftmaxGeneric&lt; IS_LOG &gt;::validate()</a>, <a class="el" href="_n_e_reduction_operation_8cpp_source.xhtml#l00066">NEReductionOperation::validate()</a>, <a class="el" href="gpu_2cl_2operators_2_cl_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00472">ClGemmLowpMatrixMultiplyCore::validate()</a>, <a class="el" href="_c_l_arg_min_max_layer_8cpp_source.xhtml#l00048">CLArgMinMaxLayer::validate()</a>, <a class="el" href="_c_l_reduction_operation_8cpp_source.xhtml#l00048">CLReductionOperation::validate()</a>, <a class="el" href="_cl_gemm_conv2d_8cpp_source.xhtml#l00349">ClGemmConv2d::validate()</a>, <a class="el" href="_n_e_generate_proposals_layer_8cpp_source.xhtml#l00212">NEGenerateProposalsLayer::validate()</a>, <a class="el" href="_cpu_gemm_conv2d_8cpp_source.xhtml#l00423">CpuGemmConv2d::validate()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00308">CpuGemmLowpMatrixMultiplyCore::validate()</a>, <a class="el" href="_c_l_space_to_batch_layer_8cpp_source.xhtml#l00084">CLSpaceToBatchLayer::validate()</a>, <a class="el" href="_n_e_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00248">NELSTMLayerQuantized::validate()</a>, <a class="el" href="_c_l_generate_proposals_layer_8cpp_source.xhtml#l00210">CLGenerateProposalsLayer::validate()</a>, <a class="el" href="_c_l_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00280">CLLSTMLayerQuantized::validate()</a>, <a class="el" href="_n_e_q_l_s_t_m_layer_8cpp_source.xhtml#l00675">NEQLSTMLayer::validate()</a>, <a class="el" href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00214">arm_compute::validate()</a>, and <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml#l00603">CLQLSTMLayer::validate()</a>.</p>

</div>
</div>
<a id="afc135290818a7ae02d2195c013796fdd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afc135290818a7ae02d2195c013796fdd">&#9670;&nbsp;</a></span>reset_padding()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>&amp; reset_padding </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Resets the padding settings of the tensor. </p>
<dl class="section return"><dt>Returns</dt><dd>Reference to this <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata. ">ITensorInfo</a> object </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a5a80b3a6ae624417617d6a8d3209add5">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#ad29c039b6f3c4534928ed99aa9f53027">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_softmax_kernel_8cpp_source.xhtml#l00252">CpuLogits1DSoftmaxKernel&lt; IS_LOG &gt;::configure()</a>, <a class="el" href="_i_tensor_info_8h_source.xhtml#l00058">ITensorInfo::get_static_state_value()</a>, and <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00108">SubTensorInfo::reset_padding()</a>.</p>

</div>
</div>
<a id="a75157b4ea9a60a8c316d3469f1dc3a17"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a75157b4ea9a60a8c316d3469f1dc3a17">&#9670;&nbsp;</a></span>set_are_values_constant()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>&amp; set_are_values_constant </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>are_values_constant</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the flag whether the tensor values can change during kernel/function execution. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">are_values_constant</td><td>Flag that marks the tensor values if they can be changed or not.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to this <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata. ">ITensorInfo</a> object </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a77e0f184dff4fa2111259c16fba2ecfa">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a77e0f184dff4fa2111259c16fba2ecfa">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_tensor_info_8h_source.xhtml#l00058">ITensorInfo::get_static_state_value()</a>, and <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00210">SubTensorInfo::set_are_values_constant()</a>.</p>

</div>
</div>
<a id="abb9481fe056b9749f9b4c08db101cc15"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abb9481fe056b9749f9b4c08db101cc15">&#9670;&nbsp;</a></span>set_data_layout()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>&amp; set_data_layout </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> &amp;&#160;</td>
          <td class="paramname"><em>data_layout</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the data layout of the tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">data_layout</td><td>DataLayout containing the layout data information.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to this <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata. ">ITensorInfo</a> object </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a70b6e1495b94818cce4981dbac6bdd66">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a16d275e5270f2c36a04764c863d852b6">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_auto_configuration_8h_source.xhtml#l00066">arm_compute::auto_init_if_empty()</a>, <a class="el" href="_n_e_r_o_i_align_layer_kernel_8cpp_source.xhtml#l00146">NEROIAlignLayerKernel::configure()</a>, <a class="el" href="_c_l_r_o_i_align_layer_kernel_8cpp_source.xhtml#l00090">CLROIAlignLayerKernel::configure()</a>, <a class="el" href="_n_e_instance_normalization_layer_8cpp_source.xhtml#l00041">NEInstanceNormalizationLayer::configure()</a>, <a class="el" href="_n_e_f_f_t_convolution_layer_8cpp_source.xhtml#l00105">NEFFTConvolutionLayer::configure()</a>, <a class="el" href="_cpu_gemm_conv2d_8cpp_source.xhtml#l00256">CpuGemmConv2d::configure()</a>, <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00282">arm_compute::test::validation::DATA_TEST_CASE()</a>, <a class="el" href="_i_tensor_info_8h_source.xhtml#l00058">ITensorInfo::get_static_state_value()</a>, <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00082">SubTensorInfo::set_data_layout()</a>, and <a class="el" href="_auto_configuration_8h_source.xhtml#l00145">arm_compute::set_data_layout_if_unknown()</a>.</p>

</div>
</div>
<a id="a9ebcdce876b4cd07736afa47d50154de"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9ebcdce876b4cd07736afa47d50154de">&#9670;&nbsp;</a></span>set_data_type()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>&amp; set_data_type </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>data_type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the data type to the specified value. </p>
<dl class="section warning"><dt>Warning</dt><dd>This resets the format to UNKNOWN.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">data_type</td><td>The new data type.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to this <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata. ">ITensorInfo</a> object </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a0a9053e6c4729ac5201b58068050c319">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a613528bd0feb15ee8d6df06cbdb629f8">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_auto_configuration_8h_source.xhtml#l00042">arm_compute::auto_init_if_empty()</a>, <a class="el" href="_i_tensor_info_8h_source.xhtml#l00058">ITensorInfo::get_static_state_value()</a>, <a class="el" href="neon__gemm__qasymm8_8cpp_source.xhtml#l00095">main()</a>, <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00076">SubTensorInfo::set_data_type()</a>, <a class="el" href="_auto_configuration_8h_source.xhtml#l00126">arm_compute::set_data_type_if_unknown()</a>, <a class="el" href="_validate_helpers_8h_source.xhtml#l00137">arm_compute::graph::backends::detail::validate_convolution_layer()</a>, and <a class="el" href="_validate_helpers_8h_source.xhtml#l00195">arm_compute::graph::backends::detail::validate_fused_convolution_with_post_op()</a>.</p>

</div>
</div>
<a id="a17394f0f7aea22d9b2d4c6f33bfa69ca"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a17394f0f7aea22d9b2d4c6f33bfa69ca">&#9670;&nbsp;</a></span>set_format()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>&amp; set_format </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td>
          <td class="paramname"><em>format</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the format of an already initialized tensor. </p>
<dl class="section note"><dt>Note</dt><dd>If the data type has already been configured (i.e. not UNKNOWN) it must match the new format. If data type hasn't been configured it will be based on the format.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td>Single-plane format of the tensor.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to this <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata. ">ITensorInfo</a> object </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a523a68398c1a8161daa4238c15e065fa">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#af501bc12f51874e786b0f28016a99ff7">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_tensor_info_8h_source.xhtml#l00058">ITensorInfo::get_static_state_value()</a>, <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00094">SubTensorInfo::set_format()</a>, and <a class="el" href="_auto_configuration_8h_source.xhtml#l00107">arm_compute::set_format_if_unknown()</a>.</p>

</div>
</div>
<a id="a9273842d8e5dc1a3c7fab727176fd7fe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9273842d8e5dc1a3c7fab727176fd7fe">&#9670;&nbsp;</a></span>set_is_resizable()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>&amp; set_is_resizable </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>is_resizable</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the flag whether the tensor size can be changed. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">is_resizable</td><td>Flag that marks the tensor if it can be changed or not.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to this <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata. ">ITensorInfo</a> object </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a78bf77b2d9b959259f77a32b9a412184">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a78bf77b2d9b959259f77a32b9a412184">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_tensor_info_8h_source.xhtml#l00058">ITensorInfo::get_static_state_value()</a>, and <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00204">SubTensorInfo::set_is_resizable()</a>.</p>

</div>
</div>
<a id="aaf74be25e2392705f29352ffaa4b1f9d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaf74be25e2392705f29352ffaa4b1f9d">&#9670;&nbsp;</a></span>set_num_channels()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>&amp; set_num_channels </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>num_channels</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the number of channels to the specified value. </p>
<dl class="section warning"><dt>Warning</dt><dd>This resets the format to UNKNOWN.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">num_channels</td><td>New number of channels.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to this <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata. ">ITensorInfo</a> object </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ad03af3eeb6f3666d6282ca689c1b2ce8">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a5b0a9fd674f8748506b6944c030bc47e">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_auto_configuration_8h_source.xhtml#l00042">arm_compute::auto_init_if_empty()</a>, <a class="el" href="_i_tensor_info_8h_source.xhtml#l00058">ITensorInfo::get_static_state_value()</a>, <a class="el" href="neon__gemm__qasymm8_8cpp_source.xhtml#l00095">main()</a>, <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00088">SubTensorInfo::set_num_channels()</a>, <a class="el" href="tests_2validation_2_u_n_i_t_2_tensor_info_8cpp_source.xhtml#l00103">arm_compute::test::validation::TEST_CASE()</a>, <a class="el" href="_n_e_reduction_operation_8cpp_source.xhtml#l00066">NEReductionOperation::validate()</a>, <a class="el" href="_c_l_arg_min_max_layer_8cpp_source.xhtml#l00048">CLArgMinMaxLayer::validate()</a>, and <a class="el" href="_c_l_reduction_operation_8cpp_source.xhtml#l00048">CLReductionOperation::validate()</a>.</p>

</div>
</div>
<a id="a575d37eaf8a905c8ca3c0250757c2b81"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a575d37eaf8a905c8ca3c0250757c2b81">&#9670;&nbsp;</a></span>set_quantization_info()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>&amp; set_quantization_info </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>quantization_info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the quantization settings (scale and offset) of the tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">quantization_info</td><td><a class="el" href="classarm__compute_1_1_quantization_info.xhtml" title="Quantization information. ">QuantizationInfo</a> containing the scale and offset</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to this <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata. ">ITensorInfo</a> object </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a78839e7861ba8ffed52ca55da2745761">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#acda9036ad24c455f67f2fea388a0ae13">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_auto_configuration_8h_source.xhtml#l00042">arm_compute::auto_init_if_empty()</a>, <a class="el" href="_n_e_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00060">NELSTMLayerQuantized::configure()</a>, <a class="el" href="_n_e_q_l_s_t_m_layer_8cpp_source.xhtml#l00214">NEQLSTMLayer::configure()</a>, <a class="el" href="_n_e_o_n_2_g_e_m_m_lowp_8cpp_source.xhtml#l00055">arm_compute::test::validation::DATA_TEST_CASE()</a>, <a class="el" href="_i_tensor_info_8h_source.xhtml#l00058">ITensorInfo::get_static_state_value()</a>, <a class="el" href="_n_e_pad_layer_8cpp_source.xhtml#l00054">NEPadLayer::NEPadLayer()</a>, <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00102">SubTensorInfo::set_quantization_info()</a>, <a class="el" href="_auto_configuration_8h_source.xhtml#l00164">arm_compute::set_quantization_info_if_empty()</a>, <a class="el" href="tests_2validation_2_u_n_i_t_2_tensor_info_8cpp_source.xhtml#l00103">arm_compute::test::validation::TEST_CASE()</a>, <a class="el" href="_n_e_reduction_operation_8cpp_source.xhtml#l00066">NEReductionOperation::validate()</a>, <a class="el" href="_c_l_arg_min_max_layer_8cpp_source.xhtml#l00048">CLArgMinMaxLayer::validate()</a>, <a class="el" href="_c_l_reduction_operation_8cpp_source.xhtml#l00048">CLReductionOperation::validate()</a>, <a class="el" href="_n_e_generate_proposals_layer_8cpp_source.xhtml#l00212">NEGenerateProposalsLayer::validate()</a>, <a class="el" href="_n_e_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00248">NELSTMLayerQuantized::validate()</a>, <a class="el" href="_c_l_generate_proposals_layer_8cpp_source.xhtml#l00210">CLGenerateProposalsLayer::validate()</a>, and <a class="el" href="_c_l_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00280">CLLSTMLayerQuantized::validate()</a>.</p>

</div>
</div>
<a id="a0bbfdc0b7847b27de9e336f7720809ce"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0bbfdc0b7847b27de9e336f7720809ce">&#9670;&nbsp;</a></span>set_tensor_dims_state()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>&amp; set_tensor_dims_state </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ae0e15b554cc3958445da66fc718423d4">TensorDimsState</a> &amp;&#160;</td>
          <td class="paramname"><em>state</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the state for each dimension of the tensor. </p>
<p>This sets the state of each dimension of the shape in terms of dynamic behavior using -1 where appropriate. The index in the state is a 1 to 1 mapping with the shape dimension index. For example if you want to express [?, 3, 3] as a dynamic input then [-1, 3, 3] has to be set as a state</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">state</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a> dimensions state</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to this <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata. ">ITensorInfo</a> object </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a41993c2ff0ae139b5729d63eab5fd6ef">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a41993c2ff0ae139b5729d63eab5fd6ef">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_tensor_info_8h_source.xhtml#l00058">ITensorInfo::get_static_state_value()</a>.</p>

</div>
</div>
<a id="a12a4f1190952613e36b44846962e26bb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a12a4f1190952613e36b44846962e26bb">&#9670;&nbsp;</a></span>set_tensor_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a>&amp; set_tensor_shape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>shape</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the shape of an already initialized tensor. </p>
<dl class="section warning"><dt>Warning</dt><dd>Changing the shape requires to recompute the strides and is therefore only possible if the tensor hasn't been allocated yet.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">shape</td><td>New tensor shape.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to this <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata. ">ITensorInfo</a> object </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a2d7e8b8e05c3318b2d90c40d781745d2">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a2d7e8b8e05c3318b2d90c40d781745d2">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_auto_configuration_8h_source.xhtml#l00042">arm_compute::auto_init_if_empty()</a>, <a class="el" href="_n_e_q_l_s_t_m_layer_8cpp_source.xhtml#l00214">NEQLSTMLayer::configure()</a>, <a class="el" href="_n_e_crop_kernel_8cpp_source.xhtml#l00234">NECropKernel::configure_output_shape()</a>, <a class="el" href="_i_tensor_info_8h_source.xhtml#l00058">ITensorInfo::get_static_state_value()</a>, <a class="el" href="_auto_configuration_8h_source.xhtml#l00088">arm_compute::set_shape_if_empty()</a>, <a class="el" href="src_2core_2_sub_tensor_info_8cpp_source.xhtml#l00089">SubTensorInfo::set_tensor_shape()</a>, <a class="el" href="_n_e_l2_normalize_layer_8cpp_source.xhtml#l00062">NEL2NormalizeLayer::validate()</a>, <a class="el" href="_n_e_reduction_operation_8cpp_source.xhtml#l00066">NEReductionOperation::validate()</a>, <a class="el" href="_c_l_l2_normalize_layer_8cpp_source.xhtml#l00079">CLL2NormalizeLayer::validate()</a>, <a class="el" href="_c_l_arg_min_max_layer_8cpp_source.xhtml#l00048">CLArgMinMaxLayer::validate()</a>, and <a class="el" href="_c_l_reduction_operation_8cpp_source.xhtml#l00048">CLReductionOperation::validate()</a>.</p>

</div>
</div>
<a id="a9586081a29fceb532ab270bd843abee6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9586081a29fceb532ab270bd843abee6">&#9670;&nbsp;</a></span>set_valid_region()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void set_valid_region </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;&#160;</td>
          <td class="paramname"><em>valid_region</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the valid region of the tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">valid_region</td><td>Valid region to set. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a43e45363267b6bce4bb6770febe9ce11">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a43e45363267b6bce4bb6770febe9ce11">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_transpose_kernel_8cpp_source.xhtml#l00427">CpuTransposeKernel::configure()</a>, <a class="el" href="_c_p_p_detection_output_layer_8cpp_source.xhtml#l00393">CPPDetectionOutputLayer::configure()</a>, <a class="el" href="_c_p_p_upsample_kernel_8cpp_source.xhtml#l00044">CPPUpsampleKernel::configure()</a>, <a class="el" href="_c_p_p_permute_kernel_8cpp_source.xhtml#l00102">CPPPermuteKernel::configure()</a>, <a class="el" href="_i_tensor_8cpp_source.xhtml#l00035">ITensor::copy_from()</a>, <a class="el" href="_i_tensor_info_8h_source.xhtml#l00058">ITensorInfo::get_static_state_value()</a>, <a class="el" href="_c_p_p_detection_output_layer_8cpp_source.xhtml#l00449">CPPDetectionOutputLayer::run()</a>, <a class="el" href="src_2core_2_sub_tensor_info_8cpp_source.xhtml#l00089">SubTensorInfo::set_tensor_shape()</a>, <a class="el" href="_access_window_auto_padding_8cpp_source.xhtml#l00056">AccessWindowAutoPadding::set_valid_region()</a>, <a class="el" href="_access_window_static_8cpp_source.xhtml#l00076">AccessWindowStatic::set_valid_region()</a>, and <a class="el" href="_i_access_window_8cpp_source.xhtml#l00089">AccessWindowRectangle::set_valid_region()</a>.</p>

</div>
</div>
<a id="a6b14f175bf5281f57b561e2d4e4b1f1f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6b14f175bf5281f57b561e2d4e4b1f1f">&#9670;&nbsp;</a></span>strides_in_bytes()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual const <a class="el" href="classarm__compute_1_1_strides.xhtml">Strides</a>&amp; strides_in_bytes </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The strides in bytes for accessing each dimension of the tensor. </p>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_strides.xhtml" title="Strides of an item in bytes. ">Strides</a> in bytes for each tensor dimension </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a5f1ca9d674346287cae57a6c5b5c24ec">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a5f1ca9d674346287cae57a6c5b5c24ec">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_c_l_kernel_8cpp_source.xhtml#l00119">ICLKernel::add_3d_tensor_nhw_argument()</a>, <a class="el" href="_i_c_l_kernel_8cpp_source.xhtml#l00144">ICLKernel::add_4d_tensor_nhwc_argument()</a>, <a class="el" href="_i_c_l_kernel_8cpp_source.xhtml#l00088">ICLKernel::add_tensor_argument()</a>, <a class="el" href="pool3d_2neon_2quantized_8h_source.xhtml#l00038">arm_compute::cpu::avg_poolingMxNxD_q8_neon_ndhwc()</a>, <a class="el" href="cpu_2kernels_2scale_2neon_2list_8h_source.xhtml#l00143">arm_compute::cpu::bilinear_neon_scale()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00517">arm_compute::colorconvert_iyuv_to_rgb()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00455">arm_compute::colorconvert_nv12_to_rgb()</a>, <a class="el" href="_cl_composite_kernel_8cpp_source.xhtml#l00042">ClCompositeKernel::configure()</a>, <a class="el" href="_cpu_scale_kernel_8cpp_source.xhtml#l00164">CpuScaleKernel::configure()</a>, <a class="el" href="_n_e_normalization_layer_kernel_8cpp_source.xhtml#l00072">NENormalizationLayerKernel::configure()</a>, <a class="el" href="directconv2d_2nchw_2all_8cpp_source.xhtml#l00062">arm_compute::cpu::kernels::convolve_nchw()</a>, <a class="el" href="directconv2d_2nhwc_2neon_2impl_8cpp_source.xhtml#l00057">arm_compute::cpu::kernels::convolve_nhwc()</a>, <a class="el" href="_i_tensor_8cpp_source.xhtml#l00035">ITensor::copy_from()</a>, <a class="el" href="cpu_2kernels_2conv3d_2neon_2list_8h_source.xhtml#l00039">arm_compute::cpu::directconv3d_float_neon_ndhwc()</a>, <a class="el" href="conv3d_2neon_2quantized_8h_source.xhtml#l00040">arm_compute::cpu::directconv3d_quantized_neon_ndhwc()</a>, <a class="el" href="utils_2_utils_8cpp_source.xhtml#l00130">arm_compute::utils::draw_detection_rectangle()</a>, <a class="el" href="_i_tensor_info_8h_source.xhtml#l00058">ITensorInfo::get_static_state_value()</a>, <a class="el" href="gemm__matrix__mul_2generic_2neon_2impl_8cpp_source.xhtml#l00462">arm_compute::cpu::matrix_matrix_multiply_f32()</a>, <a class="el" href="pool3d_2neon_2quantized_8h_source.xhtml#l00228">arm_compute::cpu::max_poolingMxNxD_q8_neon_ndhwc()</a>, <a class="el" href="maxunpool_2generic_2neon_2impl_8cpp_source.xhtml#l00032">arm_compute::cpu::max_unpooling()</a>, <a class="el" href="cpu_2kernels_2scale_2neon_2list_8h_source.xhtml#l00053">arm_compute::cpu::nearest_neon_scale()</a>, <a class="el" href="cpu_2kernels_2pool2d_2neon_2list_8h_source.xhtml#l00062">arm_compute::cpu::offset_no_padding()</a>, <a class="el" href="cpu_2kernels_2pool2d_2neon_2fp32_8cpp_source.xhtml#l00146">arm_compute::cpu::poolingMxN_fp32_neon_nhwc()</a>, <a class="el" href="pool2d_2neon_2quantized_8h_source.xhtml#l00041">arm_compute::cpu::poolingMxN_q8_neon_nhwc()</a>, <a class="el" href="_c_l_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00136">CLROIPoolingLayerKernel::run()</a>, <a class="el" href="_n_e_stack_layer_kernel_8cpp_source.xhtml#l00116">NEStackLayerKernel::run()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_native_kernel_8cpp_source.xhtml#l00342">CLDepthwiseConvolutionLayerNativeKernel::run()</a>, <a class="el" href="_c_l_r_o_i_align_layer_kernel_8cpp_source.xhtml#l00153">CLROIAlignLayerKernel::run()</a>, <a class="el" href="_cl_composite_kernel_8cpp_source.xhtml#l00155">ClCompositeKernel::run_composite_op()</a>, <a class="el" href="_cpu_winograd_conv2d_kernel_8cpp_source.xhtml#l00036">CpuWinogradConv2dTransformInputKernel::run_op()</a>, <a class="el" href="_n_e_fill_border_kernel_8cpp_source.xhtml#l00161">NEFillBorderKernel::run_op()</a>, <a class="el" href="_cpu_winograd_conv2d_kernel_8cpp_source.xhtml#l00074">CpuWinogradConv2dTransformOutputKernel::run_op()</a>, <a class="el" href="_cpu_gemm_transpose1x_w_kernel_8cpp_source.xhtml#l00076">CpuGemmTranspose1xWKernel::run_op()</a>, <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00129">SubTensorInfo::strides_in_bytes()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00042">TensorInfo::TensorInfo()</a>, <a class="el" href="_gemm_tuner_helpers_8h_source.xhtml#l00034">examples::gemm_tuner_helpers::update_padding_for_cl_image()</a>, <a class="el" href="_cl_gemm_helpers_8cpp_source.xhtml#l00072">arm_compute::opencl::kernels::gemm::update_padding_for_cl_image()</a>, <a class="el" href="_access_window_static_8cpp_source.xhtml#l00084">AccessWindowStatic::update_window_if_needed()</a>, <a class="el" href="_i_access_window_8cpp_source.xhtml#l00097">AccessWindowRectangle::update_window_if_needed()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_reduction_kernel_8cpp_source.xhtml#l00101">CpuGemmLowpMatrixAReductionKernel::validate()</a>, <a class="el" href="_n_e_f_f_t_digit_reverse_kernel_8cpp_source.xhtml#l00136">NEFFTDigitReverseKernel::validate()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_reduction_kernel_8cpp_source.xhtml#l00226">CpuGemmLowpMatrixBReductionKernel::validate()</a>, and <a class="el" href="gemm__matrix__mul_2generic_2neon_2impl_8cpp_source.xhtml#l00230">arm_compute::cpu::vector_matrix_multiply_f32()</a>.</p>

</div>
</div>
<a id="a06197f59bed02e0977b3533b824a2e51"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a06197f59bed02e0977b3533b824a2e51">&#9670;&nbsp;</a></span>tensor_dims_state()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ae0e15b554cc3958445da66fc718423d4">TensorDimsState</a>&amp; tensor_dims_state </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>State of each dimension of the tensor shape. </p>
<dl class="section return"><dt>Returns</dt><dd>A vector with the state for each dimension of the tensor, where -1 specifies dynamic dimension </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ac0536d1b12af6338cd00919f78d10c0f">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#ac0536d1b12af6338cd00919f78d10c0f">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_tensor_info_8h_source.xhtml#l00058">ITensorInfo::get_static_state_value()</a>, and <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00042">TensorInfo::TensorInfo()</a>.</p>

</div>
</div>
<a id="a7c66505457d00ece3aa4b34cab80757d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7c66505457d00ece3aa4b34cab80757d">&#9670;&nbsp;</a></span>tensor_shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&amp; tensor_shape </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Size for each dimension of the tensor. </p>
<dl class="section return"><dt>Returns</dt><dd>A vector with the size for each dimension of the tensor </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a269b19ce3f357ac65f41f9951906e38e">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_utils_8cpp_source.xhtml#l00263">ImageAccessor::access_tensor()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00344">ValidationInputAccessor::access_tensor()</a>, <a class="el" href="graph__validate__utils_8h_source.xhtml#l00362">VerifyAccessor&lt; D &gt;::access_tensor()</a>, <a class="el" href="add_2generic_2neon_2qasymm8_8cpp_source.xhtml#l00035">arm_compute::cpu::add_qasymm8_neon()</a>, <a class="el" href="add_2generic_2neon_2qasymm8__signed_8cpp_source.xhtml#l00035">arm_compute::cpu::add_qasymm8_signed_neon()</a>, <a class="el" href="add_2generic_2sve2_2qasymm8__signed_8cpp_source.xhtml#l00037">arm_compute::cpu::add_qasymm8_signed_sve2()</a>, <a class="el" href="add_2generic_2sve2_2qasymm8_8cpp_source.xhtml#l00037">arm_compute::cpu::add_qasymm8_sve2()</a>, <a class="el" href="add_2generic_2neon_2qsymm16_8cpp_source.xhtml#l00035">arm_compute::cpu::add_qsymm16_neon()</a>, <a class="el" href="add_2generic_2sve2_2qsymm16_8cpp_source.xhtml#l00037">arm_compute::cpu::add_qsymm16_sve2()</a>, <a class="el" href="add_2generic_2neon_2impl_8cpp_source.xhtml#l00034">arm_compute::cpu::add_same_neon()</a>, <a class="el" href="add_2generic_2sve_2impl_8cpp_source.xhtml#l00036">arm_compute::cpu::add_same_sve()</a>, <a class="el" href="_c_l_utils_8cpp_source.xhtml#l00086">PostOpCLKernelUtils::are_post_op_shapes_compliant()</a>, <a class="el" href="_auto_configuration_8h_source.xhtml#l00042">arm_compute::auto_init_if_empty()</a>, <a class="el" href="pool3d_2neon_2quantized_8h_source.xhtml#l00038">arm_compute::cpu::avg_poolingMxNxD_q8_neon_ndhwc()</a>, <a class="el" href="boundingboxtransform_2generic_2neon_2impl_8cpp_source.xhtml#l00087">arm_compute::cpu::bounding_box_transform()</a>, <a class="el" href="boundingboxtransform_2generic_2neon_2impl_8cpp_source.xhtml#l00029">arm_compute::cpu::bounding_box_transform_qsymm16()</a>, <a class="el" href="_window_8h_source.xhtml#l00419">Window::broadcast_if_dimension_le_one()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00051">arm_compute::misc::shape_calculator::calculate_reduce_mean_shape()</a>, <a class="el" href="src_2core_2_helpers_8cpp_source.xhtml#l00028">arm_compute::calculate_valid_region_scale()</a>, <a class="el" href="_cpu_add_kernel_8cpp_source.xhtml#l00042">arm_compute::cpu::kernels::can_interpret_inputs_as_1d_array()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00783">arm_compute::utils::compare_tensor()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01052">arm_compute::misc::shape_calculator::compute_batch_to_space_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00372">arm_compute::misc::shape_calculator::compute_col2im_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00493">arm_compute::misc::shape_calculator::compute_deconvolution_output_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00461">arm_compute::misc::shape_calculator::compute_deconvolution_upsampled_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00744">arm_compute::misc::shape_calculator::compute_deep_convolution_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00421">arm_compute::misc::shape_calculator::compute_depthwise_convolution_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00561">arm_compute::misc::shape_calculator::compute_flatten_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00523">arm_compute::misc::shape_calculator::compute_im2col_conv_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00261">arm_compute::misc::shape_calculator::compute_interleaved_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00181">arm_compute::misc::shape_calculator::compute_lhs_reshaped_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00755">arm_compute::misc::shape_calculator::compute_min_max_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00876">arm_compute::misc::shape_calculator::compute_mm_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00988">arm_compute::misc::shape_calculator::compute_output_stage_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00109">arm_compute::misc::shape_calculator::compute_permutation_output_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00772">arm_compute::misc::shape_calculator::compute_pool_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00334">arm_compute::misc::shape_calculator::compute_reductionA_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00351">arm_compute::misc::shape_calculator::compute_reductionB_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00123">arm_compute::misc::shape_calculator::compute_reorg_output_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00225">arm_compute::misc::shape_calculator::compute_rhs_reshaped_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00859">arm_compute::misc::shape_calculator::compute_rnn_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00838">arm_compute::misc::shape_calculator::compute_roi_align_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00579">arm_compute::misc::shape_calculator::compute_softmax_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01136">arm_compute::misc::shape_calculator::compute_space_to_batch_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01162">arm_compute::misc::shape_calculator::compute_space_to_depth_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01101">arm_compute::misc::shape_calculator::compute_split_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01376">arm_compute::misc::shape_calculator::compute_stack_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01019">arm_compute::misc::shape_calculator::compute_strided_slice_shape()</a>, <a class="el" href="src_2core_2helpers_2_utils_8h_source.xhtml#l00041">arm_compute::compute_strides()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00297">arm_compute::misc::shape_calculator::compute_transpose1xW_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00314">arm_compute::misc::shape_calculator::compute_transpose1xW_with_element_size_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00403">arm_compute::misc::shape_calculator::compute_transposed_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00806">arm_compute::misc::shape_calculator::compute_unpool_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01266">arm_compute::misc::shape_calculator::compute_upsample_shape()</a>, <a class="el" href="_access_window_auto_padding_8cpp_source.xhtml#l00046">AccessWindowAutoPadding::compute_valid_region()</a>, <a class="el" href="_access_window_static_8cpp_source.xhtml#l00045">AccessWindowStatic::compute_valid_region()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00150">arm_compute::misc::shape_calculator::compute_weights_reshaped_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00618">arm_compute::misc::shape_calculator::compute_winograd_filter_transform_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00641">arm_compute::misc::shape_calculator::compute_winograd_input_transform_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00677">arm_compute::misc::shape_calculator::compute_winograd_output_transform_shape()</a>, <a class="el" href="_cl_direct_conv_default_config_valhall_8cpp_source.xhtml#l00045">ClDirectConvDefaultConfigValhall::configure()</a>, <a class="el" href="_cl_composite_kernel_8cpp_source.xhtml#l00042">ClCompositeKernel::configure()</a>, <a class="el" href="_cpu_dequantize_kernel_8cpp_source.xhtml#l00352">CpuDequantizeKernel::configure()</a>, <a class="el" href="_cpu_transpose_kernel_8cpp_source.xhtml#l00427">CpuTransposeKernel::configure()</a>, <a class="el" href="_cl_dequantize_kernel_8cpp_source.xhtml#l00069">ClDequantizeKernel::configure()</a>, <a class="el" href="_cl_floor_kernel_8cpp_source.xhtml#l00069">ClFloorKernel::configure()</a>, <a class="el" href="_cl_reshape_kernel_8cpp_source.xhtml#l00070">ClReshapeKernel::configure()</a>, <a class="el" href="_cpu_floor_kernel_8cpp_source.xhtml#l00077">CpuFloorKernel::configure()</a>, <a class="el" href="_cpu_softmax_kernel_8cpp_source.xhtml#l00113">CpuLogits1DMaxKernel::configure()</a>, <a class="el" href="_cl_copy_kernel_8cpp_source.xhtml#l00076">ClCopyKernel::configure()</a>, <a class="el" href="_cl_elementwise_unary_kernel_8cpp_source.xhtml#l00074">ClElementWiseUnaryKernel::configure()</a>, <a class="el" href="_n_e_logical_kernel_8cpp_source.xhtml#l00273">NELogicalKernel::configure()</a>, <a class="el" href="_cl_pool2d_kernel_8cpp_source.xhtml#l00099">ClPool2dKernel::configure()</a>, <a class="el" href="_cl_pool3d_kernel_8cpp_source.xhtml#l00096">ClPool3dKernel::configure()</a>, <a class="el" href="_cl_quantize_kernel_8cpp_source.xhtml#l00069">ClQuantizeKernel::configure()</a>, <a class="el" href="_cl_softmax_8cpp_source.xhtml#l00055">ClSoftmax::configure()</a>, <a class="el" href="_c_p_p_detection_output_layer_8cpp_source.xhtml#l00393">CPPDetectionOutputLayer::configure()</a>, <a class="el" href="_c_l_strided_slice_kernel_8cpp_source.xhtml#l00078">CLStridedSliceKernel::configure()</a>, <a class="el" href="_cl_batch_concatenate_kernel_8cpp_source.xhtml#l00067">ClBatchConcatenateKernel::configure()</a>, <a class="el" href="_cl_depth_concatenate_kernel_8cpp_source.xhtml#l00067">ClDepthConcatenateKernel::configure()</a>, <a class="el" href="_cpu_elementwise_unary_kernel_8cpp_source.xhtml#l00099">CpuElementwiseUnaryKernel::configure()</a>, <a class="el" href="_n_e_tile_kernel_8cpp_source.xhtml#l00067">NETileKernel::configure()</a>, <a class="el" href="_n_e_depth_to_space_layer_kernel_8cpp_source.xhtml#l00074">NEDepthToSpaceLayerKernel::configure()</a>, <a class="el" href="_c_p_p_top_k_v_kernel_8cpp_source.xhtml#l00099">CPPTopKVKernel::configure()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_multiply_kernel_8cpp_source.xhtml#l00896">CpuGemmLowpMatrixMultiplyKernel::configure()</a>, <a class="el" href="_cpu_pool3d_kernel_8cpp_source.xhtml#l00121">CpuPool3dKernel::configure()</a>, <a class="el" href="_c_p_p_upsample_kernel_8cpp_source.xhtml#l00044">CPPUpsampleKernel::configure()</a>, <a class="el" href="_n_e_bitwise_not_kernel_8cpp_source.xhtml#l00058">NEBitwiseNotKernel::configure()</a>, <a class="el" href="_cl_winograd_input_transform_kernel_8cpp_source.xhtml#l00113">ClWinogradInputTransformKernel::configure()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00159">CLInstanceNormalizationLayerKernel::configure()</a>, <a class="el" href="_c_p_p_permute_kernel_8cpp_source.xhtml#l00102">CPPPermuteKernel::configure()</a>, <a class="el" href="_cpu_sub_kernel_8cpp_source.xhtml#l00115">CpuSubKernel::configure()</a>, <a class="el" href="_n_e_bitwise_and_kernel_8cpp_source.xhtml#l00063">NEBitwiseAndKernel::configure()</a>, <a class="el" href="_n_e_bitwise_or_kernel_8cpp_source.xhtml#l00059">NEBitwiseOrKernel::configure()</a>, <a class="el" href="_n_e_bitwise_xor_kernel_8cpp_source.xhtml#l00059">NEBitwiseXorKernel::configure()</a>, <a class="el" href="_c_l_select_kernel_8cpp_source.xhtml#l00071">CLSelectKernel::configure()</a>, <a class="el" href="_cl_softmax_kernel_8cpp_source.xhtml#l00162">ClLogits1DMaxShiftExpSumKernel::configure()</a>, <a class="el" href="_cl_winograd_output_transform_kernel_8cpp_source.xhtml#l00130">ClWinogradOutputTransformKernel::configure()</a>, <a class="el" href="_n_e_pad_layer_kernel_8cpp_source.xhtml#l00186">NEPadLayerKernel::configure()</a>, <a class="el" href="_c_l_depth_to_space_layer_kernel_8cpp_source.xhtml#l00076">CLDepthToSpaceLayerKernel::configure()</a>, <a class="el" href="_cl_cast_kernel_8cpp_source.xhtml#l00080">ClCastKernel::configure()</a>, <a class="el" href="_cpu_cast_kernel_8cpp_source.xhtml#l00155">CpuCastKernel::configure()</a>, <a class="el" href="_cpu_direct_conv3d_kernel_8cpp_source.xhtml#l00128">CpuDirectConv3dKernel::configure()</a>, <a class="el" href="_cpu_gemm_lowp_offset_contribution_kernel_8cpp_source.xhtml#l00361">CpuGemmLowpOffsetContributionKernel::configure()</a>, <a class="el" href="_c_l_tile_kernel_8cpp_source.xhtml#l00068">CLTileKernel::configure()</a>, <a class="el" href="_n_e_reduction_operation_kernel_8cpp_source.xhtml#l01680">NEReductionOperationKernel::configure()</a>, <a class="el" href="_n_e_select_kernel_8cpp_source.xhtml#l00169">NESelectKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_kernel_8cpp_source.xhtml#l00108">ClGemmLowpOffsetContributionKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_output_stage_kernel_8cpp_source.xhtml#l00132">ClGemmLowpOffsetContributionOutputStageKernel::configure()</a>, <a class="el" href="_cpu_gemm_matrix_multiply_kernel_8cpp_source.xhtml#l00128">CpuGemmMatrixMultiplyKernel::configure()</a>, <a class="el" href="_cpu_mul_kernel_8cpp_source.xhtml#l01478">CpuMulKernel::configure()</a>, <a class="el" href="_cpu_softmax_8cpp_source.xhtml#l00059">CpuSoftmaxGeneric&lt; IS_LOG &gt;::configure()</a>, <a class="el" href="_n_e_gather_kernel_8cpp_source.xhtml#l00170">NEGatherKernel::configure()</a>, <a class="el" href="_c_l_reduction_operation_kernel_8cpp_source.xhtml#l00086">CLReductionOperationKernel::configure()</a>, <a class="el" href="_n_e_strided_slice_kernel_8cpp_source.xhtml#l00133">NEStridedSliceKernel::configure()</a>, <a class="el" href="_c_l_pad_layer_kernel_8cpp_source.xhtml#l00078">CLPadLayerKernel::configure()</a>, <a class="el" href="_cl_direct_conv3d_kernel_8cpp_source.xhtml#l00092">ClDirectConv3dKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00288">ClGemmLowpMatrixMultiplyReshapedOnlyRhsKernel::configure()</a>, <a class="el" href="_c_l_l2_normalize_layer_kernel_8cpp_source.xhtml#l00085">CLL2NormalizeLayerKernel::configure()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00113">ClMulKernel::configure()</a>, <a class="el" href="_n_e_unstack_8cpp_source.xhtml#l00063">NEUnstack::configure()</a>, <a class="el" href="_c_l_unstack_8cpp_source.xhtml#l00069">CLUnstack::configure()</a>, <a class="el" href="_n_e_reduce_mean_8cpp_source.xhtml#l00114">NEReduceMean::configure()</a>, <a class="el" href="_n_e_space_to_batch_layer_8cpp_source.xhtml#l00045">NESpaceToBatchLayer::configure()</a>, <a class="el" href="_c_l_reduce_mean_8cpp_source.xhtml#l00114">CLReduceMean::configure()</a>, <a class="el" href="_c_l_fill_border_kernel_8cpp_source.xhtml#l00069">CLFillBorderKernel::configure()</a>, <a class="el" href="_n_e_fill_border_kernel_8cpp_source.xhtml#l00103">NEFillBorderKernel::configure()</a>, <a class="el" href="_n_e_crop_resize_8cpp_source.xhtml#l00059">NECropResize::configure()</a>, <a class="el" href="_c_l_arg_min_max_layer_kernel_8cpp_source.xhtml#l00080">CLArgMinMaxLayerKernel::configure()</a>, <a class="el" href="_n_e_f_f_t1_d_8cpp_source.xhtml#l00044">NEFFT1D::configure()</a>, <a class="el" href="_n_e_reduction_operation_8cpp_source.xhtml#l00105">NEReductionOperation::configure()</a>, <a class="el" href="_n_e_normalization_layer_8cpp_source.xhtml#l00044">NENormalizationLayer::configure()</a>, <a class="el" href="_c_l_f_f_t1_d_8cpp_source.xhtml#l00057">CLFFT1D::configure()</a>, <a class="el" href="_cl_fully_connected_8cpp_source.xhtml#l00227">ClFullyConnected::configure()</a>, <a class="el" href="_n_e_pad_layer_8cpp_source.xhtml#l00173">NEPadLayer::configure()</a>, <a class="el" href="_cpu_gemm_lowp_offset_contribution_output_stage_kernel_8cpp_source.xhtml#l00842">CpuGemmLowpOffsetContributionOutputStageKernel::configure()</a>, <a class="el" href="_c_l_space_to_batch_layer_8cpp_source.xhtml#l00052">CLSpaceToBatchLayer::configure()</a>, <a class="el" href="_cpu_fully_connected_8cpp_source.xhtml#l00234">CpuFullyConnected::configure()</a>, <a class="el" href="_c_l_reduction_operation_8cpp_source.xhtml#l00111">CLReductionOperation::configure()</a>, <a class="el" href="_c_l_arg_min_max_layer_8cpp_source.xhtml#l00121">CLArgMinMaxLayer::configure()</a>, <a class="el" href="_cl_winograd_conv2d_8cpp_source.xhtml#l00174">ClWinogradConv2d::configure()</a>, <a class="el" href="_n_e_f_f_t_convolution_layer_8cpp_source.xhtml#l00105">NEFFTConvolutionLayer::configure()</a>, <a class="el" href="_n_e_generate_proposals_layer_8cpp_source.xhtml#l00071">NEGenerateProposalsLayer::configure()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00355">ClComplexMulKernel::configure()</a>, <a class="el" href="_c_l_crop_resize_8cpp_source.xhtml#l00092">CLCropResize::configure()</a>, <a class="el" href="_n_e_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00060">NELSTMLayerQuantized::configure()</a>, <a class="el" href="_n_e_l_s_t_m_layer_8cpp_source.xhtml#l00057">NELSTMLayer::configure()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00108">CpuGemmLowpMatrixMultiplyCore::configure()</a>, <a class="el" href="_c_l_f_f_t_convolution_layer_8cpp_source.xhtml#l00113">CLFFTConvolutionLayer::configure()</a>, <a class="el" href="_c_l_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00072">CLLSTMLayerQuantized::configure()</a>, <a class="el" href="_cpu_mul_kernel_8cpp_source.xhtml#l01685">CpuComplexMulKernel::configure()</a>, <a class="el" href="_n_e_q_l_s_t_m_layer_8cpp_source.xhtml#l00214">NEQLSTMLayer::configure()</a>, <a class="el" href="_c_l_l_s_t_m_layer_8cpp_source.xhtml#l00073">CLLSTMLayer::configure()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml#l00172">CLQLSTMLayer::configure()</a>, <a class="el" href="_n_e_crop_kernel_8cpp_source.xhtml#l00234">NECropKernel::configure_output_shape()</a>, <a class="el" href="_i_tensor_8cpp_source.xhtml#l00035">ITensor::copy_from()</a>, <a class="el" href="elementwise__binary_2generic_2sve_2impl_8cpp_source.xhtml#l00036">arm_compute::cpu::elementwise_arithmetic_op()</a>, <a class="el" href="elementwise__binary_2generic_2sve2_2impl_8h_source.xhtml#l00104">arm_compute::cpu::elementwise_arithmetic_quantized_op()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00856">arm_compute::cpu::elementwise_comp_quantized_signed()</a>, <a class="el" href="elementwise__binary_2generic_2sve_2impl_8cpp_source.xhtml#l00141">arm_compute::cpu::elementwise_comparison_op()</a>, <a class="el" href="elementwise__binary_2generic_2sve2_2impl_8h_source.xhtml#l00235">arm_compute::cpu::elementwise_comparison_quantized_op()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00084">arm_compute::cpu::elementwise_op()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00748">arm_compute::cpu::elementwise_op_quantized()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00963">arm_compute::cpu::elementwise_op_quantized_signed()</a>, <a class="el" href="_cl_direct_convolution_kernel_component_8cpp_source.xhtml#l00251">arm_compute::experimental::dynamic_fusion::export_to_cl_image_support()</a>, <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00444">arm_compute::export_weights_to_cl_image()</a>, <a class="el" href="src_2core_2_sub_tensor_info_8cpp_source.xhtml#l00117">SubTensorInfo::extend_padding()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01293">arm_compute::misc::shape_calculator::extract_shape()</a>, <a class="el" href="_cpu_elementwise_kernel_8cpp_source.xhtml#l00277">CpuComparisonKernel::get_available_kernels()</a>, <a class="el" href="_i_tensor_info_8h_source.xhtml#l00058">ITensorInfo::get_static_state_value()</a>, <a class="el" href="_cl_floor_kernel_component_8cpp_source.xhtml#l00046">ClFloorKernelComponent::get_window()</a>, <a class="el" href="_cl_elementwise_kernel_component_8cpp_source.xhtml#l00048">ClElementwiseKernelComponent::get_window()</a>, <a class="el" href="_cpu_floor_kernel_8cpp_source.xhtml#l00096">CpuFloorKernel::infer_window()</a>, <a class="el" href="_window_helpers_8h_source.xhtml#l00074">arm_compute::intersect_valid_regions()</a>, <a class="el" href="pool3d_2neon_2quantized_8h_source.xhtml#l00228">arm_compute::cpu::max_poolingMxNxD_q8_neon_ndhwc()</a>, <a class="el" href="_cpu_softmax_kernel_8cpp_source.xhtml#l00154">CpuLogits1DMaxKernel::name()</a>, <a class="el" href="_cpu_mul_kernel_8cpp_source.xhtml#l01659">CpuMulKernel::name()</a>, <a class="el" href="_n_e_gather_kernel_8cpp_source.xhtml#l00089">NEGatherKernel::NEGatherKernel()</a>, <a class="el" href="activation_2generic_2neon_2qasymm8_8cpp_source.xhtml#l00420">arm_compute::cpu::neon_qasymm8_activation_lut()</a>, <a class="el" href="_accessor_8h_source.xhtml#l00119">Accessor::num_elements()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00185">NumPyAccessor::NumPyAccessor()</a>, <a class="el" href="cpu_2kernels_2pool2d_2neon_2list_8h_source.xhtml#l00062">arm_compute::cpu::offset_no_padding()</a>, <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01264">arm_compute::operator&lt;&lt;()</a>, <a class="el" href="graph__validate__utils_8h_source.xhtml#l00419">VerifyAccessor&lt; D &gt;::output_shape()</a>, <a class="el" href="cpu_2kernels_2pool2d_2neon_2fp32_8cpp_source.xhtml#l00146">arm_compute::cpu::poolingMxN_fp32_neon_nhwc()</a>, <a class="el" href="pool2d_2neon_2quantized_8h_source.xhtml#l00041">arm_compute::cpu::poolingMxN_q8_neon_nhwc()</a>, <a class="el" href="_cpu_depthwise_conv2d_assembly_dispatch_8cpp_source.xhtml#l00108">CpuDepthwiseConv2dAssemblyDispatch::prepare()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00110">CaffePreproccessor::preprocess()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00069">TFPreproccessor::preprocess()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00666">RandomAccessor::RandomAccessor()</a>, <a class="el" href="_n_e_tile_kernel_8cpp_source.xhtml#l00092">NETileKernel::run()</a>, <a class="el" href="_n_e_reorg_layer_kernel_8cpp_source.xhtml#l00102">NEReorgLayerKernel::run()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_normalization_kernel_8cpp_source.xhtml#l00148">CLQLSTMLayerNormalizationKernel::run()</a>, <a class="el" href="_c_l_comparison_kernel_8cpp_source.xhtml#l00172">CLComparisonKernel::run()</a>, <a class="el" href="_n_e_stack_layer_kernel_8cpp_source.xhtml#l00116">NEStackLayerKernel::run()</a>, <a class="el" href="_c_l_stack_layer_kernel_8cpp_source.xhtml#l00122">CLStackLayerKernel::run()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_native_kernel_8cpp_source.xhtml#l00342">CLDepthwiseConvolutionLayerNativeKernel::run()</a>, <a class="el" href="_cpu_depthwise_conv2d_assembly_wrapper_kernel_8cpp_source.xhtml#l00304">CpuDepthwiseConv2dAssemblyWrapperKernel::run_op()</a>, <a class="el" href="_cpu_pool2d_assembly_wrapper_kernel_8cpp_source.xhtml#l00144">CpuPool2dAssemblyWrapperKernel::run_op()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00269">ClMulKernel::run_op()</a>, <a class="el" href="_auto_configuration_8h_source.xhtml#l00088">arm_compute::set_shape_if_empty()</a>, <a class="el" href="src_2core_2_sub_tensor_info_8cpp_source.xhtml#l00089">SubTensorInfo::set_tensor_shape()</a>, <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00220">SubTensorInfo::set_valid_region()</a>, <a class="el" href="_accessor_8h_source.xhtml#l00084">Accessor::shape()</a>, <a class="el" href="sub_2neon_2qasymm8_8cpp_source.xhtml#l00035">arm_compute::cpu::sub_qasymm8_neon()</a>, <a class="el" href="sub_2neon_2qasymm8__signed_8cpp_source.xhtml#l00035">arm_compute::cpu::sub_qasymm8_signed_neon()</a>, <a class="el" href="sub_2neon_2qsymm16_8cpp_source.xhtml#l00035">arm_compute::cpu::sub_qsymm16_neon()</a>, <a class="el" href="cpu_2kernels_2sub_2neon_2list_8h_source.xhtml#l00045">arm_compute::cpu::sub_same_neon()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00042">TensorInfo::TensorInfo()</a>, <a class="el" href="tests_2validation_2_n_e_o_n_2_u_n_i_t_2_tensor_allocator_8cpp_source.xhtml#l00052">arm_compute::test::validation::TEST_CASE()</a>, <a class="el" href="_access_window_static_8cpp_source.xhtml#l00160">AccessWindowStatic::update_padding_if_needed()</a>, <a class="el" href="_i_access_window_8cpp_source.xhtml#l00212">AccessWindowRectangle::update_padding_if_needed()</a>, <a class="el" href="_access_window_static_8cpp_source.xhtml#l00084">AccessWindowStatic::update_window_if_needed()</a>, <a class="el" href="_i_access_window_8cpp_source.xhtml#l00097">AccessWindowRectangle::update_window_if_needed()</a>, <a class="el" href="_cpu_transpose_kernel_8cpp_source.xhtml#l00455">CpuTransposeKernel::validate()</a>, <a class="el" href="_c_p_p_split_8h_source.xhtml#l00058">CPPSplit&lt; CLSlice, ICLTensor &gt;::validate()</a>, <a class="el" href="_n_e_logical_kernel_8cpp_source.xhtml#l00295">NELogicalKernel::validate()</a>, <a class="el" href="_cl_softmax_8cpp_source.xhtml#l00100">ClSoftmax::validate()</a>, <a class="el" href="_cl_crop_kernel_8cpp_source.xhtml#l00090">ClCropKernel::validate()</a>, <a class="el" href="_cpu_concatenate_8cpp_source.xhtml#l00101">CpuConcatenate::validate()</a>, <a class="el" href="_cl_concatenate_8cpp_source.xhtml#l00142">ClConcatenate::validate()</a>, <a class="el" href="_cpu_gemm_interleave4x4_kernel_8cpp_source.xhtml#l00057">CpuGemmInterleave4x4Kernel::validate()</a>, <a class="el" href="_n_e_q_l_s_t_m_layer_normalization_kernel_8cpp_source.xhtml#l00137">NEQLSTMLayerNormalizationKernel::validate()</a>, <a class="el" href="_cpu_depthwise_conv2d_assembly_wrapper_kernel_8cpp_source.xhtml#l00258">CpuDepthwiseConv2dAssemblyWrapperKernel::validate()</a>, <a class="el" href="_cpu_softmax_8cpp_source.xhtml#l00120">CpuSoftmaxGeneric&lt; IS_LOG &gt;::validate()</a>, <a class="el" href="_n_e_select_kernel_8cpp_source.xhtml#l00187">NESelectKernel::validate()</a>, <a class="el" href="_cpu_gemm_direct_conv2d_8cpp_source.xhtml#l00156">CpuGemmDirectConv2d::validate()</a>, <a class="el" href="_n_e_unstack_8cpp_source.xhtml#l00092">NEUnstack::validate()</a>, <a class="el" href="_c_l_unstack_8cpp_source.xhtml#l00098">CLUnstack::validate()</a>, <a class="el" href="_n_e_crop_kernel_8cpp_source.xhtml#l00210">NECropKernel::validate()</a>, <a class="el" href="_n_e_r_n_n_layer_8cpp_source.xhtml#l00045">NERNNLayer::validate()</a>, <a class="el" href="_cpu_gemm_transpose1x_w_kernel_8cpp_source.xhtml#l00060">CpuGemmTranspose1xWKernel::validate()</a>, <a class="el" href="_n_e_f_f_t1_d_8cpp_source.xhtml#l00111">NEFFT1D::validate()</a>, <a class="el" href="_n_e_l2_normalize_layer_8cpp_source.xhtml#l00062">NEL2NormalizeLayer::validate()</a>, <a class="el" href="_n_e_reduction_operation_8cpp_source.xhtml#l00066">NEReductionOperation::validate()</a>, <a class="el" href="_cl_fully_connected_8cpp_source.xhtml#l00328">ClFullyConnected::validate()</a>, <a class="el" href="_c_l_f_f_t1_d_8cpp_source.xhtml#l00121">CLFFT1D::validate()</a>, <a class="el" href="_cpu_fully_connected_8cpp_source.xhtml#l00354">CpuFullyConnected::validate()</a>, <a class="el" href="_n_e_pad_layer_8cpp_source.xhtml#l00213">NEPadLayer::validate()</a>, <a class="el" href="_c_l_r_n_n_layer_8cpp_source.xhtml#l00047">CLRNNLayer::validate()</a>, <a class="el" href="_n_e_crop_resize_8cpp_source.xhtml#l00042">NECropResize::validate()</a>, <a class="el" href="_c_l_l2_normalize_layer_8cpp_source.xhtml#l00079">CLL2NormalizeLayer::validate()</a>, <a class="el" href="_c_l_arg_min_max_layer_8cpp_source.xhtml#l00048">CLArgMinMaxLayer::validate()</a>, <a class="el" href="_c_l_reduction_operation_8cpp_source.xhtml#l00048">CLReductionOperation::validate()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_8cpp_source.xhtml#l00251">CLDepthwiseConvolutionLayer::validate()</a>, <a class="el" href="_cl_gemm_conv2d_8cpp_source.xhtml#l00349">ClGemmConv2d::validate()</a>, <a class="el" href="_cpu_gemm_conv2d_8cpp_source.xhtml#l00423">CpuGemmConv2d::validate()</a>, <a class="el" href="_n_e_f_f_t_convolution_layer_8cpp_source.xhtml#l00263">NEFFTConvolutionLayer::validate()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00308">CpuGemmLowpMatrixMultiplyCore::validate()</a>, <a class="el" href="_n_e_deconvolution_layer_8cpp_source.xhtml#l00084">NEDeconvolutionLayer::validate()</a>, <a class="el" href="_c_l_crop_resize_8cpp_source.xhtml#l00067">CLCropResize::validate()</a>, <a class="el" href="_n_e_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00248">NELSTMLayerQuantized::validate()</a>, <a class="el" href="_cl_kernel_graph_8cpp_source.xhtml#l00061">ClDirectConv2dKernel::validate()</a>, <a class="el" href="_c_l_f_f_t_convolution_layer_8cpp_source.xhtml#l00272">CLFFTConvolutionLayer::validate()</a>, <a class="el" href="_c_l_g_e_m_m_deconvolution_layer_8cpp_source.xhtml#l00124">CLGEMMDeconvolutionLayer::validate()</a>, <a class="el" href="_cl_kernel_graph_8cpp_source.xhtml#l00144">ClElementwiseKernel::validate()</a>, <a class="el" href="_c_l_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00280">CLLSTMLayerQuantized::validate()</a>, <a class="el" href="_cl_kernel_graph_8cpp_source.xhtml#l00209">ClFloorKernel::validate()</a>, <a class="el" href="_cpu_direct_conv2d_kernel_8cpp_source.xhtml#l00060">arm_compute::cpu::kernels::validate_arguments()</a>, and <a class="el" href="_cl_gemm_helpers_8cpp_source.xhtml#l00092">arm_compute::opencl::kernels::gemm::validate_image2d_support_on_rhs()</a>.</p>

</div>
</div>
<a id="a18064e0011c3869d884653e9e7c47b66"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a18064e0011c3869d884653e9e7c47b66">&#9670;&nbsp;</a></span>total_size()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual size_t total_size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the total size of the tensor in bytes. </p>
<dl class="section return"><dt>Returns</dt><dd>Total size of the tensor in bytes. </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#af398466b602a02b42d8df19fb66a6c60">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#af398466b602a02b42d8df19fb66a6c60">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="_operator_graph_8cpp_source.xhtml#l00134">arm_compute::experimental::dynamic_fusion::add_op_conv2d()</a>, <a class="el" href="_operator_graph_8cpp_source.xhtml#l00201">arm_compute::experimental::dynamic_fusion::add_op_elementwise_op()</a>, <a class="el" href="_operator_graph_8cpp_source.xhtml#l00233">arm_compute::experimental::dynamic_fusion::add_op_floor()</a>, <a class="el" href="_cpu_add_kernel_8cpp_source.xhtml#l00042">arm_compute::cpu::kernels::can_interpret_inputs_as_1d_array()</a>, <a class="el" href="_cl_aux_tensor_handler_8h_source.xhtml#l00042">CLAuxTensorHandler::CLAuxTensorHandler()</a>, <a class="el" href="_cpu_gemm_direct_conv2d_8cpp_source.xhtml#l00110">CpuGemmDirectConv2d::configure()</a>, <a class="el" href="_cpu_winograd_conv2d_8cpp_source.xhtml#l00162">CpuWinogradConv2d::configure()</a>, <a class="el" href="_cpu_elementwise_kernel_8cpp_source.xhtml#l00378">CpuArithmeticKernel::configure()</a>, <a class="el" href="_cl_gemm_conv2d_8cpp_source.xhtml#l00162">ClGemmConv2d::configure()</a>, <a class="el" href="_cpu_elementwise_kernel_8cpp_source.xhtml#l00448">CpuComparisonKernel::configure()</a>, <a class="el" href="_cpu_aux_tensor_handler_8h_source.xhtml#l00042">CpuAuxTensorHandler::CpuAuxTensorHandler()</a>, <a class="el" href="src_2core_2_sub_tensor_info_8cpp_source.xhtml#l00117">SubTensorInfo::extend_padding()</a>, <a class="el" href="_cpu_elementwise_kernel_8cpp_source.xhtml#l00277">CpuComparisonKernel::get_available_kernels()</a>, <a class="el" href="_cpu_conv2d_8cpp_source.xhtml#l00123">CpuConv2d::get_convolution_method()</a>, <a class="el" href="_i_tensor_v2_8cpp_source.xhtml#l00030">ITensorV2::get_size()</a>, <a class="el" href="_i_tensor_info_8h_source.xhtml#l00058">ITensorInfo::get_static_state_value()</a>, <a class="el" href="_cpu_softmax_kernel_8cpp_source.xhtml#l00154">CpuLogits1DMaxKernel::name()</a>, <a class="el" href="_cpu_mul_kernel_8cpp_source.xhtml#l01659">CpuMulKernel::name()</a>, <a class="el" href="gpu_2cl_2operators_2_cl_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00792">ClGemmLowpMatrixMultiplyCore::prepare()</a>, <a class="el" href="_n_e_q_l_s_t_m_layer_8cpp_source.xhtml#l01210">NEQLSTMLayer::prepare()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00666">RandomAccessor::RandomAccessor()</a>, <a class="el" href="_c_p_p_upsample_kernel_8cpp_source.xhtml#l00063">CPPUpsampleKernel::run()</a>, <a class="el" href="_n_e_l_s_t_m_layer_8cpp_source.xhtml#l00605">NELSTMLayer::run()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00269">ClMulKernel::run_op()</a>, <a class="el" href="select_2generic_2neon_2impl_8cpp_source.xhtml#l00118">arm_compute::cpu::select_op_not_same_rank()</a>, <a class="el" href="_accessor_8h_source.xhtml#l00094">Accessor::size()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00042">TensorInfo::TensorInfo()</a>, <a class="el" href="tests_2validation_2_n_e_o_n_2_u_n_i_t_2_tensor_allocator_8cpp_source.xhtml#l00052">arm_compute::test::validation::TEST_CASE()</a>, <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00174">SubTensorInfo::total_size()</a>, <a class="el" href="_access_window_static_8cpp_source.xhtml#l00084">AccessWindowStatic::update_window_if_needed()</a>, <a class="el" href="_i_access_window_8cpp_source.xhtml#l00097">AccessWindowRectangle::update_window_if_needed()</a>, <a class="el" href="_cpu_transpose_kernel_8cpp_source.xhtml#l00455">CpuTransposeKernel::validate()</a>, <a class="el" href="_cl_transpose_kernel_8cpp_source.xhtml#l00083">ClTransposeKernel::validate()</a>, <a class="el" href="_n_e_logical_kernel_8cpp_source.xhtml#l00295">NELogicalKernel::validate()</a>, <a class="el" href="_cpu_convert_fully_connected_weights_kernel_8cpp_source.xhtml#l00065">CpuConvertFullyConnectedWeightsKernel::validate()</a>, <a class="el" href="_cpu_concatenate_8cpp_source.xhtml#l00101">CpuConcatenate::validate()</a>, <a class="el" href="_cl_crop_kernel_8cpp_source.xhtml#l00090">ClCropKernel::validate()</a>, <a class="el" href="_cpu_elementwise_unary_kernel_8cpp_source.xhtml#l00120">CpuElementwiseUnaryKernel::validate()</a>, <a class="el" href="_cl_convert_fully_connected_weights_kernel_8cpp_source.xhtml#l00088">ClConvertFullyConnectedWeightsKernel::validate()</a>, <a class="el" href="_cl_concatenate_8cpp_source.xhtml#l00142">ClConcatenate::validate()</a>, <a class="el" href="_cpu_gemm_interleave4x4_kernel_8cpp_source.xhtml#l00057">CpuGemmInterleave4x4Kernel::validate()</a>, <a class="el" href="_n_e_q_l_s_t_m_layer_normalization_kernel_8cpp_source.xhtml#l00137">NEQLSTMLayerNormalizationKernel::validate()</a>, <a class="el" href="_cpu_gemm_matrix_addition_kernel_8cpp_source.xhtml#l00082">CpuGemmMatrixAdditionKernel::validate()</a>, <a class="el" href="_cpu_depthwise_conv2d_assembly_wrapper_kernel_8cpp_source.xhtml#l00258">CpuDepthwiseConv2dAssemblyWrapperKernel::validate()</a>, <a class="el" href="_n_e_flatten_layer_8cpp_source.xhtml#l00060">NEFlattenLayer::validate()</a>, <a class="el" href="_cpu_pool2d_assembly_wrapper_kernel_8cpp_source.xhtml#l00094">CpuPool2dAssemblyWrapperKernel::validate()</a>, <a class="el" href="_n_e_select_kernel_8cpp_source.xhtml#l00187">NESelectKernel::validate()</a>, <a class="el" href="_n_e_f_f_t2_d_8cpp_source.xhtml#l00061">NEFFT2D::validate()</a>, <a class="el" href="_n_e_crop_kernel_8cpp_source.xhtml#l00210">NECropKernel::validate()</a>, <a class="el" href="_c_l_flatten_layer_8cpp_source.xhtml#l00068">CLFlattenLayer::validate()</a>, <a class="el" href="_cpu_gemm_transpose1x_w_kernel_8cpp_source.xhtml#l00060">CpuGemmTranspose1xWKernel::validate()</a>, <a class="el" href="_n_e_f_f_t1_d_8cpp_source.xhtml#l00111">NEFFT1D::validate()</a>, <a class="el" href="_c_l_f_f_t2_d_8cpp_source.xhtml#l00070">CLFFT2D::validate()</a>, <a class="el" href="_c_l_f_f_t1_d_8cpp_source.xhtml#l00121">CLFFT1D::validate()</a>, <a class="el" href="_c_l_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00050">CLROIPoolingLayerKernel::validate()</a>, <a class="el" href="_n_e_pad_layer_8cpp_source.xhtml#l00213">NEPadLayer::validate()</a>, <a class="el" href="_n_e_crop_resize_8cpp_source.xhtml#l00042">NECropResize::validate()</a>, <a class="el" href="_cpu_gemm_8cpp_source.xhtml#l00153">CpuGemm::validate()</a>, <a class="el" href="gpu_2cl_2operators_2_cl_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00472">ClGemmLowpMatrixMultiplyCore::validate()</a>, <a class="el" href="_c_l_arg_min_max_layer_8cpp_source.xhtml#l00048">CLArgMinMaxLayer::validate()</a>, <a class="el" href="_c_l_reduction_operation_8cpp_source.xhtml#l00048">CLReductionOperation::validate()</a>, <a class="el" href="_cl_gemm_conv2d_8cpp_source.xhtml#l00349">ClGemmConv2d::validate()</a>, <a class="el" href="_n_e_generate_proposals_layer_8cpp_source.xhtml#l00212">NEGenerateProposalsLayer::validate()</a>, <a class="el" href="_n_e_f_f_t_convolution_layer_8cpp_source.xhtml#l00263">NEFFTConvolutionLayer::validate()</a>, <a class="el" href="_c_l_crop_resize_8cpp_source.xhtml#l00067">CLCropResize::validate()</a>, <a class="el" href="_n_e_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00248">NELSTMLayerQuantized::validate()</a>, <a class="el" href="_c_l_f_f_t_convolution_layer_8cpp_source.xhtml#l00272">CLFFTConvolutionLayer::validate()</a>, <a class="el" href="_c_l_generate_proposals_layer_8cpp_source.xhtml#l00210">CLGenerateProposalsLayer::validate()</a>, <a class="el" href="_c_l_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00280">CLLSTMLayerQuantized::validate()</a>, <a class="el" href="_n_e_q_l_s_t_m_layer_8cpp_source.xhtml#l00675">NEQLSTMLayer::validate()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml#l00603">CLQLSTMLayer::validate()</a>, and <a class="el" href="_cpu_direct_conv2d_kernel_8cpp_source.xhtml#l00060">arm_compute::cpu::kernels::validate_arguments()</a>.</p>

</div>
</div>
<a id="a74dfd07380a290c34fe7c8e065029b95"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a74dfd07380a290c34fe7c8e065029b95">&#9670;&nbsp;</a></span>valid_region()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> valid_region </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Valid region of the tensor. </p>
<p>All elements in the valid region have defined values, i.e. are not undefined.</p>
<dl class="section return"><dt>Returns</dt><dd>The valid region. </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a3c20d908342087484d883574d55dd482">TensorInfo</a>, and <a class="el" href="classarm__compute_1_1_sub_tensor_info.xhtml#a3c20d908342087484d883574d55dd482">SubTensorInfo</a>.</p>

<p class="reference">Referenced by <a class="el" href="src_2core_2_helpers_8cpp_source.xhtml#l00028">arm_compute::calculate_valid_region_scale()</a>, <a class="el" href="_i_c_l_simple_kernel_8cpp_source.xhtml#l00038">ICLSimpleKernel::configure()</a>, <a class="el" href="_c_l_fill_border_kernel_8cpp_source.xhtml#l00069">CLFillBorderKernel::configure()</a>, <a class="el" href="_i_tensor_8cpp_source.xhtml#l00035">ITensor::copy_from()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00518">DetectionOutputAccessor::DetectionOutputAccessor()</a>, <a class="el" href="_i_tensor_info_8h_source.xhtml#l00058">ITensorInfo::get_static_state_value()</a>, <a class="el" href="_window_helpers_8h_source.xhtml#l00074">arm_compute::intersect_valid_regions()</a>, <a class="el" href="softmax_2generic_2neon_2impl_8cpp_source.xhtml#l00268">arm_compute::cpu::neon_softmax_logits_1d_float()</a>, <a class="el" href="softmax_2generic_2neon_2impl_8cpp_source.xhtml#l00091">arm_compute::cpu::neon_softmax_logits_1d_quantized()</a>, <a class="el" href="_n_e_fill_border_kernel_8cpp_source.xhtml#l00161">NEFillBorderKernel::run_op()</a>, <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00220">SubTensorInfo::set_valid_region()</a>, <a class="el" href="softmax_2generic_2sve2_2impl_8cpp_source.xhtml#l00034">arm_compute::cpu::sve2_softmax_logits_1d_quantized()</a>, <a class="el" href="softmax_2generic_2sve_2impl_8cpp_source.xhtml#l00073">arm_compute::cpu::sve_softmax_logits_1d_float()</a>, and <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00042">TensorInfo::TensorInfo()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>arm_compute/core/<a class="el" href="_i_tensor_info_8h_source.xhtml">ITensorInfo.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a></li>
    <li class="footer">Generated on Thu Aug 18 2022 12:57:47 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
