<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/experimental/dynamic_fusion/WorkloadImpl/ClFusedKernelGraph.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_cl_fused_kernel_graph_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">ClFusedKernelGraph.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_cl_fused_kernel_graph_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2022 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#ifdef ENABLE_EXPERIMENTAL_DYNAMIC_FUSION</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_cl_fused_kernel_graph_8h.xhtml">src/core/experimental/dynamic_fusion/WorkloadImpl/ClFusedKernelGraph.h</a>&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;{</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keyword">namespace </span>experimental</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;{</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">namespace </span>dynamic_fusion</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;{</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">namespace</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;std::vector&lt;std::pair&lt;ClKernelFusionGroup *, ClKernelFusionGroup *&gt;&gt; get_combinations(<span class="keyword">const</span> std::vector&lt;ClKernelFusionGroup *&gt; &amp;sorted_fgs)</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(sorted_fgs.size() &lt;= 1);</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    std::vector&lt;std::pair&lt;ClKernelFusionGroup *, ClKernelFusionGroup *&gt;&gt; combo;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i = 0; i &lt; sorted_fgs.size() - 1; ++i)</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    {</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> j = i + 1; j &lt; sorted_fgs.size(); ++j)</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        {</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;            combo.push_back(std::make_pair(sorted_fgs.at(i), sorted_fgs.at(j)));</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        }</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    }</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keywordflow">return</span> combo;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;}</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;} <span class="comment">// namespace</span></div><div class="line"><a name="l00050"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a0e5a222683b4e850a681a8b7f593f9c3">   50</a></span>&#160;std::vector&lt;const ClKernel *&gt; <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a0e5a222683b4e850a681a8b7f593f9c3">traverse</a>(<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_fusion_group.xhtml">ClKernelFusionGroup</a> &amp;group)</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;{</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    std::vector&lt;const ClKernel *&gt; kernels;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                    sorted = group.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_fusion_group.xhtml#adda92e981d244d14d1266f9746bccc6d">graph</a>.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a34a0357f1b58c5c5f4a45b7014efdc58">topological_sort</a>();</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a> : sorted.second)</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    {</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        kernels.push_back(group.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_fusion_group.xhtml#abcbe2ecf3e9ae25433a9a67e5d895333">fused_kernels</a>.at(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>.op));</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    }</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keywordflow">return</span> kernels;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;}</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a803c9c75014f6a9ae0d7aa9c532bf42b">   61</a></span>&#160;std::vector&lt;const ClKernelFusionGroup *&gt; <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a0e5a222683b4e850a681a8b7f593f9c3">traverse</a>(<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_fused_kernel_graph.xhtml">ClFusedKernelGraph</a> &amp;graph)</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;{</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    std::vector&lt;const ClKernelFusionGroup *&gt; kernels;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                               sorted = graph.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_fused_kernel_graph.xhtml#a089f9f50806d05f259dc08a4c3ed6219">fg_dependency</a>.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a34a0357f1b58c5c5f4a45b7014efdc58">topological_sort</a>();</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a> : sorted.second)</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    {</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        kernels.push_back(graph.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_fused_kernel_graph.xhtml#a068917c263ae8c7babff14f929ffe6e0">fusion_groups</a>.at(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>.op).get());</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    }</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordflow">return</span> kernels;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;}</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a5523818c3f589d14e258c437dfdfdf9c">   72</a></span>&#160;std::vector&lt;ClKernelFusionGroup *&gt; <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a0e5a222683b4e850a681a8b7f593f9c3">traverse</a>(<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_fused_kernel_graph.xhtml">ClFusedKernelGraph</a> &amp;graph)</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;{</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    std::vector&lt;ClKernelFusionGroup *&gt; kernels;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                         sorted = graph.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_fused_kernel_graph.xhtml#a089f9f50806d05f259dc08a4c3ed6219">fg_dependency</a>.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a34a0357f1b58c5c5f4a45b7014efdc58">topological_sort</a>();</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a> : sorted.second)</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    {</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        kernels.push_back(graph.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_fused_kernel_graph.xhtml#a068917c263ae8c7babff14f929ffe6e0">fusion_groups</a>.at(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>.op).get());</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    }</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keywordflow">return</span> kernels;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;}</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a124185cc0f16b8bc162cf4845c91d1d2">   83</a></span>&#160;std::pair&lt;Status, ClFusedKernelGraph&gt; <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a124185cc0f16b8bc162cf4845c91d1d2">init_fusion_graph</a>(<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_graph.xhtml">ClKernelGraph</a> &amp;kernel_graph)</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;{</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_fused_kernel_graph.xhtml">ClFusedKernelGraph</a> fused_kernel_graph{};</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    fused_kernel_graph.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_fused_kernel_graph.xhtml#a1c4b6c76accd8db4b0d6492bfccd75f7">original_graph</a> = &amp;kernel_graph; <span class="comment">// Create a copy of the original kernel graph</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    fused_kernel_graph.fg_dependency  = <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml">DependencyGraph</a>();</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="comment">// Initialize all fusion groups</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;kernel : <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a0e5a222683b4e850a681a8b7f593f9c3">traverse</a>(kernel_graph))</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    {</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        fused_kernel_graph.add_fusion_group({ kernel });</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    }</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keywordflow">return</span> { <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a>{}, fused_kernel_graph };</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;}</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div><div class="line"><a name="l00096"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#aa11c975459908699abf6078773ae19b3">   96</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#aa11c975459908699abf6078773ae19b3">fuse</a>(<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_fused_kernel_graph.xhtml">ClFusedKernelGraph</a> &amp;fused_kernel_graph)</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;{</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="comment">// A naive fusion algorithm that&#39;s guaranteed to find optimal pattern if there are no branches</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="comment">// If there are branches, the algorithm cannot guanrantee optimality as it doesn&#39;t perform any searches</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keywordtype">bool</span> fusion_found = <span class="keyword">false</span>;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keywordflow">do</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    {</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        fusion_found          = <span class="keyword">false</span>;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> sorted_fgs = <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a0e5a222683b4e850a681a8b7f593f9c3">traverse</a>(fused_kernel_graph);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <span class="keywordflow">if</span>(sorted_fgs.size() &lt;= 1)</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        {</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            <span class="comment">// Only one or zero fusion group, thus no need to perform fusion</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a>{};</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        }</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <span class="keyword">auto</span> fgs_combo = get_combinations(sorted_fgs);</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">auto</span> fgs : fgs_combo)</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        {</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            <span class="keyword">auto</span>       fg0 = fgs.first;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            <span class="keyword">auto</span>       fg1 = fgs.second;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> st  = fused_kernel_graph.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_fused_kernel_graph.xhtml#acce6bcb3e2ad9680f458d8eac4e2fb0e">can_fuse</a>(*fg0, *fg1);</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            <span class="keywordflow">if</span>(<span class="keywordtype">bool</span>(st))</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            {</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> st = fused_kernel_graph.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_fused_kernel_graph.xhtml#abae0d512be0c240e4d78cc99b376e616">fuse</a>(*fg0, *fg1);</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                <span class="keywordflow">if</span>(!<span class="keywordtype">bool</span>(st))</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                {</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                    <span class="keywordflow">return</span> st;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                }</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                fusion_found = <span class="keyword">true</span>;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            }</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        }</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    }</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keywordflow">while</span>(fusion_found);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a>{};</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;}</div><div class="line"><a name="l00132"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a8d6a9002a9d5c0fc67a8c4d547b37491">  132</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a8d6a9002a9d5c0fc67a8c4d547b37491">generate_store</a>(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint.xhtml">ClKernelBlueprint</a> &amp;bp, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_fused_kernel_graph.xhtml">ClFusedKernelGraph</a> &amp;fused_kernel_graph, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_fusion_group.xhtml">ClKernelFusionGroup</a> &amp;fg)</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;{</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> st{};</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;dst_t_id : fused_kernel_graph.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_fused_kernel_graph.xhtml#a089f9f50806d05f259dc08a4c3ed6219">fg_dependency</a>.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a09a3e533a331d82635595317d822247e">dst_tensors</a>(fg.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_fusion_group.xhtml#a150a709e86e7134d17cd063de6810b6c">id</a>))</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    {</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> dst_t = fused_kernel_graph.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_fused_kernel_graph.xhtml#a1c4b6c76accd8db4b0d6492bfccd75f7">original_graph</a>-&gt;<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_graph.xhtml#a26ce1702be726c11355b21545e75e207">get_tensor</a>(dst_t_id);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment">        /// NOTE: dst tensor must have already been added to the blueprint at this point</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment"></span>        <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a> dst_id;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        st = <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a8aad35ee7c2bfa06456fade719732d21">add_tensor</a>(bp, dst_t-&gt;desc, dst_id, dst_t-&gt;id);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        <span class="keywordflow">if</span>(!<span class="keywordtype">bool</span>(st))</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        {</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            <span class="keywordflow">return</span> st;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        }<span class="comment"></span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment">        /// NOTE: the extra dst tensor is needed as the store kcomp requires 2 tensors. But this is irrelevant to the fused kernel graph</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment">        /// since both tensors share the exact same info and kernel arg descriptor</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment"></span>        <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">ArgumentID</a> dst_dst_id;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        st = <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a8aad35ee7c2bfa06456fade719732d21">add_tensor</a>(bp, dst_t-&gt;desc, dst_dst_id);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="keywordflow">if</span>(!<span class="keywordtype">bool</span>(st))</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        {</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            <span class="keywordflow">return</span> st;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        }<span class="comment"></span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment">        /// NOTE: Update the merge point map to link dst_dst_id with dst_t-&gt;id instead.</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">        /// This is required because the get_arguments() returned by the blueprint returns the dst tensor added by the store component</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment"></span>        st = <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a13ef6b46310330560a9de9e9b4ff4b2b">update_merge_point</a>(bp, dst_dst_id, dst_t-&gt;id);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <span class="keywordflow">if</span>(!<span class="keywordtype">bool</span>(st))</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        {</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            <span class="keywordflow">return</span> st;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        }</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        st = <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6f46e60fa2d4e77d485d6a1f6c3631b9">add_kcomp_store</a>(bp, fg.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_fusion_group.xhtml#abe9573bdefe0575529bf33c535474a52">get_root_kernel</a>()-&gt;<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel.xhtml#a220ff6a1c45002ec7d5ef4334a1c1d67">config</a>().<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_config.xhtml#ad23797ef0c0583b23745b17440de726d">store_type</a>, dst_id, dst_dst_id);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <span class="keywordflow">if</span>(!<span class="keywordtype">bool</span>(st))</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        {</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            <span class="keywordflow">return</span> st;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        }</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    }</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="keywordflow">return</span> st;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;}</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a0ee8e10e12b8d521a028c681b8ba31ad">  170</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a0ee8e10e12b8d521a028c681b8ba31ad">generate</a>(<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload.xhtml">ClWorkload</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad001edc7e4d1ea972be09f232c6e7729">workload</a>, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_context.xhtml">ClWorkloadContext</a> &amp;ctx, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_fused_kernel_graph.xhtml">ClFusedKernelGraph</a> &amp;fused_kernel_graph)</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;{</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    workload.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload.xhtml#aa28ea900b6115f17781179e998959e23">context</a> = ctx;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;fg : <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a0e5a222683b4e850a681a8b7f593f9c3">traverse</a>(fused_kernel_graph))</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    {</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint.xhtml">ClKernelBlueprint</a> bp{};</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;kernel : <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a0e5a222683b4e850a681a8b7f593f9c3">traverse</a>(*fg))</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        {</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> st = kernel-&gt;generate(bp);</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;            <span class="keywordflow">if</span>(!<span class="keywordtype">bool</span>(st))</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            {</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                <span class="keywordflow">return</span> st;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;            }</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        }</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        <span class="keyword">auto</span> st = <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a8bf3f564acec14f99a8233408a295d34">set_tile_info</a>(bp, fg-&gt;get_root_kernel()-&gt;config().tile_desc);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        <span class="keywordflow">if</span>(!<span class="keywordtype">bool</span>(st))</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        {</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            <span class="keywordflow">return</span> st;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        }</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        st = <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a8d6a9002a9d5c0fc67a8c4d547b37491">generate_store</a>(bp, fused_kernel_graph, *fg);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        <span class="keywordflow">if</span>(!<span class="keywordtype">bool</span>(st))</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        {</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            <span class="keywordflow">return</span> st;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        }</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_code.xhtml">ClKernelCode</a> code{};</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        st = <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a0ba70c7ef99250a96e87378c163f2b0e">build</a>(code, <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_code_builder_context.xhtml">ClCodeBuilderContext</a>{ ctx.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_context.xhtml#a619811b3fc0952fbacfe1f102475b2dc">gpu_info</a> }, bp);</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        <span class="keywordflow">if</span>(!<span class="keywordtype">bool</span>(st))</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        {</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            <span class="keywordflow">return</span> st;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        }</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> bp_graph = <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a8d6179df3e79fcbbcef0e5aabfb1fce4">get_dependency_graph</a>(bp);</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        <span class="comment">// Get tensor info</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        std::vector&lt;Id&gt; workload_src_tensors{};</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;src_t_id : fused_kernel_graph.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_fused_kernel_graph.xhtml#a089f9f50806d05f259dc08a4c3ed6219">fg_dependency</a>.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a911f45bf464369c75141cb4b8e34643f">src_tensors</a>(fg-&gt;id))</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        {</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> src_t = fused_kernel_graph.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_fused_kernel_graph.xhtml#a1c4b6c76accd8db4b0d6492bfccd75f7">original_graph</a>-&gt;<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_graph.xhtml#a26ce1702be726c11355b21545e75e207">get_tensor</a>(src_t_id);</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;            <span class="comment">// Get corresponding kernel arg descriptor</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> arg_desc    = code.arguments.at(bp_graph.get_merge_points().at(src_t-&gt;id));</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> kernel_t_id = workload.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload.xhtml#a2201c809d539f18b47839af02840b662">add_workload_tensor</a>(src_t-&gt;desc, src_t-&gt;memory_type, src_t-&gt;memory_info, arg_desc, src_t-&gt;id);</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            workload_src_tensors.push_back(kernel_t_id);</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        }</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        std::vector&lt;Id&gt; workload_dst_tensors{};</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;dst_t_id : fused_kernel_graph.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_fused_kernel_graph.xhtml#a089f9f50806d05f259dc08a4c3ed6219">fg_dependency</a>.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a09a3e533a331d82635595317d822247e">dst_tensors</a>(fg-&gt;id))</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        {</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> dst_t = fused_kernel_graph.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_fused_kernel_graph.xhtml#a1c4b6c76accd8db4b0d6492bfccd75f7">original_graph</a>-&gt;<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_graph.xhtml#a26ce1702be726c11355b21545e75e207">get_tensor</a>(dst_t_id);</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            <span class="comment">// Get corresponding kernel arg descriptor</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> arg_desc    = code.arguments.at(bp_graph.get_merge_points().at(dst_t-&gt;id));</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> kernel_t_id = workload.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload.xhtml#a2201c809d539f18b47839af02840b662">add_workload_tensor</a>(dst_t-&gt;desc, dst_t-&gt;memory_type, dst_t-&gt;memory_info, arg_desc, dst_t-&gt;id);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            workload_dst_tensors.push_back(kernel_t_id);</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        }</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        workload.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload.xhtml#aa273e2e7935d4777a7f2e7491b693759">add_unit_workload</a>(fg-&gt;get_root_kernel()-&gt;config().stage, code, workload_src_tensors, workload_dst_tensors);</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    }</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a>{};</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;}</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;} <span class="comment">// namespace dynamic_fusion</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;} <span class="comment">// namespace experimental</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ENABLE_EXPERIMENTAL_DYNAMIC_FUSION */</span><span class="preprocessor"></span></div><div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_fused_kernel_graph_xhtml_a1c4b6c76accd8db4b0d6492bfccd75f7"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_fused_kernel_graph.xhtml#a1c4b6c76accd8db4b0d6492bfccd75f7">arm_compute::experimental::dynamic_fusion::ClFusedKernelGraph::original_graph</a></div><div class="ttdeci">const ClKernelGraph * original_graph</div><div class="ttdef"><b>Definition:</b> <a href="_cl_fused_kernel_graph_8h_source.xhtml#l00402">ClFusedKernelGraph.h:402</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_fusion_group_xhtml_a150a709e86e7134d17cd063de6810b6c"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_fusion_group.xhtml#a150a709e86e7134d17cd063de6810b6c">arm_compute::experimental::dynamic_fusion::ClKernelFusionGroup::id</a></div><div class="ttdeci">Id id</div><div class="ttdef"><b>Definition:</b> <a href="_cl_fused_kernel_graph_8h_source.xhtml#l00126">ClFusedKernelGraph.h:126</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_xhtml"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload.xhtml">arm_compute::experimental::dynamic_fusion::ClWorkload</a></div><div class="ttdoc">Workload for Cl backend. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_8h_source.xhtml#l00173">ClWorkload.h:173</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml">arm_compute::experimental::dynamic_fusion::DependencyGraph</a></div><div class="ttdoc">The dependency graph of a workload, where the nodes are of 2 types: Tensor or Operator Represented as...</div><div class="ttdef"><b>Definition:</b> <a href="_dependency_graph_8h_source.xhtml#l00051">DependencyGraph.h:51</a></div></div>
<div class="ttc" id="_cl_fused_kernel_graph_8h_xhtml"><div class="ttname"><a href="_cl_fused_kernel_graph_8h.xhtml">ClFusedKernelGraph.h</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_fused_kernel_graph_xhtml_abae0d512be0c240e4d78cc99b376e616"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_fused_kernel_graph.xhtml#abae0d512be0c240e4d78cc99b376e616">arm_compute::experimental::dynamic_fusion::ClFusedKernelGraph::fuse</a></div><div class="ttdeci">Status fuse(ClKernelFusionGroup &amp;fg0, ClKernelFusionGroup &amp;fg1)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_fused_kernel_graph_8h_source.xhtml#l00181">ClFusedKernelGraph.h:181</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_graph_xhtml"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_graph.xhtml">arm_compute::experimental::dynamic_fusion::ClKernelGraph</a></div><div class="ttdef"><b>Definition:</b> <a href="_cl_kernel_graph_8h_source.xhtml#l00182">ClKernelGraph.h:182</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_xhtml_a2201c809d539f18b47839af02840b662"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload.xhtml#a2201c809d539f18b47839af02840b662">arm_compute::experimental::dynamic_fusion::ClWorkload::add_workload_tensor</a></div><div class="ttdeci">Tid add_workload_tensor(ITensorInfo *info, MemoryType memory_type, const AuxMemoryInfo &amp;memory_info, const ClKernelArgDescriptor &amp;kernel_arg, Tid merge_point)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_8h_source.xhtml#l00175">ClWorkload.h:175</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_fusion_group_xhtml_abcbe2ecf3e9ae25433a9a67e5d895333"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_fusion_group.xhtml#abcbe2ecf3e9ae25433a9a67e5d895333">arm_compute::experimental::dynamic_fusion::ClKernelFusionGroup::fused_kernels</a></div><div class="ttdeci">std::map&lt; Id, const ClKernel * &gt; fused_kernels</div><div class="ttdef"><b>Definition:</b> <a href="_cl_fused_kernel_graph_8h_source.xhtml#l00128">ClFusedKernelGraph.h:128</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_code_builder_context_xhtml"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_code_builder_context.xhtml">arm_compute::experimental::dynamic_fusion::ClCodeBuilderContext</a></div><div class="ttdoc">All information required for building the ClKernelCode. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_kernel_building_a_p_i_8h_source.xhtml#l00100">ClKernelBuildingAPI.h:100</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_context_xhtml_a619811b3fc0952fbacfe1f102475b2dc"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_context.xhtml#a619811b3fc0952fbacfe1f102475b2dc">arm_compute::experimental::dynamic_fusion::ClWorkloadContext::gpu_info</a></div><div class="ttdeci">GpuInfo gpu_info</div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_8h_source.xhtml#l00168">ClWorkload.h:168</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_context_xhtml"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_context.xhtml">arm_compute::experimental::dynamic_fusion::ClWorkloadContext</a></div><div class="ttdoc">Context (device capabilities, platform details) associated with a ClWorkload. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_8h_source.xhtml#l00162">ClWorkload.h:162</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="classarm__compute_1_1_status_xhtml"><div class="ttname"><a href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a></div><div class="ttdoc">Status class. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00052">Error.h:52</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_a34a0357f1b58c5c5f4a45b7014efdc58"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a34a0357f1b58c5c5f4a45b7014efdc58">arm_compute::experimental::dynamic_fusion::DependencyGraph::topological_sort</a></div><div class="ttdeci">std::pair&lt; Status, std::vector&lt; OpPack &gt; &gt; topological_sort() const</div><div class="ttdoc">Sort the graph in a topological order. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00380">DependencyGraph.cpp:380</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a0e5a222683b4e850a681a8b7f593f9c3"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a0e5a222683b4e850a681a8b7f593f9c3">arm_compute::experimental::dynamic_fusion::traverse</a></div><div class="ttdeci">std::vector&lt; const ClKernel * &gt; traverse(const ClKernelFusionGroup &amp;group)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_fused_kernel_graph_8cpp_source.xhtml#l00050">ClFusedKernelGraph.cpp:50</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_xhtml_aa28ea900b6115f17781179e998959e23"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload.xhtml#aa28ea900b6115f17781179e998959e23">arm_compute::experimental::dynamic_fusion::ClWorkload::context</a></div><div class="ttdeci">ClWorkloadContext context</div><div class="ttdoc">Workload context. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_8h_source.xhtml#l00198">ClWorkload.h:198</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a8d6179df3e79fcbbcef0e5aabfb1fce4"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a8d6179df3e79fcbbcef0e5aabfb1fce4">arm_compute::experimental::dynamic_fusion::get_dependency_graph</a></div><div class="ttdeci">DependencyGraph get_dependency_graph(const ClKernelBlueprint &amp;blueprint)</div><div class="ttdoc">Get dependency graph. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_kernel_building_a_p_i_8cpp_source.xhtml#l00153">ClKernelBuildingAPI.cpp:153</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2022 Arm Limited. </div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a13ef6b46310330560a9de9e9b4ff4b2b"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a13ef6b46310330560a9de9e9b4ff4b2b">arm_compute::experimental::dynamic_fusion::update_merge_point</a></div><div class="ttdeci">Status update_merge_point(ClKernelBlueprint &amp;bp, ArgumentID t_id, ArgumentID merge_point)</div><div class="ttdoc">Update existing merge tensor merge_point to point to t_id. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_kernel_building_a_p_i_8cpp_source.xhtml#l00130">ClKernelBuildingAPI.cpp:130</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_fused_kernel_graph_xhtml_acce6bcb3e2ad9680f458d8eac4e2fb0e"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_fused_kernel_graph.xhtml#acce6bcb3e2ad9680f458d8eac4e2fb0e">arm_compute::experimental::dynamic_fusion::ClFusedKernelGraph::can_fuse</a></div><div class="ttdeci">Status can_fuse(const ClKernelFusionGroup &amp;fg0, const ClKernelFusionGroup &amp;fg1) const</div><div class="ttdef"><b>Definition:</b> <a href="_cl_fused_kernel_graph_8h_source.xhtml#l00319">ClFusedKernelGraph.h:319</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint_xhtml"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_blueprint.xhtml">arm_compute::experimental::dynamic_fusion::ClKernelBlueprint</a></div><div class="ttdoc">Intermediate representation of the final, complete kernel source. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_kernel_building_a_p_i_8h_source.xhtml#l00046">ClKernelBuildingAPI.h:46</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_code_xhtml"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_code.xhtml">arm_compute::experimental::dynamic_fusion::ClKernelCode</a></div><div class="ttdoc">Contains kernel code to be compiled and run in a ClUnitWorkload. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_8h_source.xhtml#l00100">ClWorkload.h:100</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a0ee8e10e12b8d521a028c681b8ba31ad"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a0ee8e10e12b8d521a028c681b8ba31ad">arm_compute::experimental::dynamic_fusion::generate</a></div><div class="ttdeci">Status generate(ClWorkload &amp;workload, const ClWorkloadContext &amp;ctx, const ClFusedKernelGraph &amp;fused_kernel_graph)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_fused_kernel_graph_8cpp_source.xhtml#l00170">ClFusedKernelGraph.cpp:170</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_a911f45bf464369c75141cb4b8e34643f"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a911f45bf464369c75141cb4b8e34643f">arm_compute::experimental::dynamic_fusion::DependencyGraph::src_tensors</a></div><div class="ttdeci">std::vector&lt; Id &gt; src_tensors(Id op) const</div><div class="ttdoc">Get source tensors to an operator. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00175">DependencyGraph.cpp:175</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_fusion_group_xhtml_adda92e981d244d14d1266f9746bccc6d"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_fusion_group.xhtml#adda92e981d244d14d1266f9746bccc6d">arm_compute::experimental::dynamic_fusion::ClKernelFusionGroup::graph</a></div><div class="ttdeci">DependencyGraph graph</div><div class="ttdef"><b>Definition:</b> <a href="_cl_fused_kernel_graph_8h_source.xhtml#l00127">ClFusedKernelGraph.h:127</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_config_xhtml_ad23797ef0c0583b23745b17440de726d"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_config.xhtml#ad23797ef0c0583b23745b17440de726d">arm_compute::experimental::dynamic_fusion::ClKernelConfig::store_type</a></div><div class="ttdeci">StoreType store_type</div><div class="ttdef"><b>Definition:</b> <a href="_cl_kernel_graph_8h_source.xhtml#l00058">ClKernelGraph.h:58</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_aa11c975459908699abf6078773ae19b3"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#aa11c975459908699abf6078773ae19b3">arm_compute::experimental::dynamic_fusion::fuse</a></div><div class="ttdeci">Status fuse(ClFusedKernelGraph &amp;fused_kernel_graph)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_fused_kernel_graph_8cpp_source.xhtml#l00096">ClFusedKernelGraph.cpp:96</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_fused_kernel_graph_xhtml_a068917c263ae8c7babff14f929ffe6e0"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_fused_kernel_graph.xhtml#a068917c263ae8c7babff14f929ffe6e0">arm_compute::experimental::dynamic_fusion::ClFusedKernelGraph::fusion_groups</a></div><div class="ttdeci">KernelFusionGroupMap fusion_groups</div><div class="ttdef"><b>Definition:</b> <a href="_cl_fused_kernel_graph_8h_source.xhtml#l00404">ClFusedKernelGraph.h:404</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_a09a3e533a331d82635595317d822247e"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a09a3e533a331d82635595317d822247e">arm_compute::experimental::dynamic_fusion::DependencyGraph::dst_tensors</a></div><div class="ttdeci">std::vector&lt; Id &gt; dst_tensors(Id op) const</div><div class="ttdoc">Get destination tensors to an operator. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00181">DependencyGraph.cpp:181</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a1e041dc03ff256dfc8b0bf5c5fe099e0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">arm_compute::test::validation::pack</a></div><div class="ttdeci">ITensorPack pack</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00188">Im2Col.cpp:188</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a0ba70c7ef99250a96e87378c163f2b0e"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a0ba70c7ef99250a96e87378c163f2b0e">arm_compute::experimental::dynamic_fusion::build</a></div><div class="ttdeci">Status build(ClWorkload &amp;workload, const OperatorGraph &amp;op_graph, const ClWorkloadContext &amp;ctx)</div><div class="ttdoc">Build a ClWorkload from an OperatorGraph. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_8cpp_source.xhtml#l00036">ClWorkload.cpp:36</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ad001edc7e4d1ea972be09f232c6e7729"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ad001edc7e4d1ea972be09f232c6e7729">arm_compute::test::validation::workload</a></div><div class="ttdeci">ClWorkload workload</div><div class="ttdef"><b>Definition:</b> <a href="_integration___operator_fuse_movenet_sub_graph1_8cpp_source.xhtml#l00266">Integration_OperatorFuseMovenetSubGraph1.cpp:266</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a8aad35ee7c2bfa06456fade719732d21"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a8aad35ee7c2bfa06456fade719732d21">arm_compute::experimental::dynamic_fusion::add_tensor</a></div><div class="ttdeci">OpTensor add_tensor(OperatorGraph &amp;graph, ITensorInfo &amp;info)</div><div class="ttdoc">Associate a TensorInfo with a newly created OpTensor in the graph. </div><div class="ttdef"><b>Definition:</b> <a href="_operator_graph_8cpp_source.xhtml#l00126">OperatorGraph.cpp:126</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_xhtml_aa273e2e7935d4777a7f2e7491b693759"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload.xhtml#aa273e2e7935d4777a7f2e7491b693759">arm_compute::experimental::dynamic_fusion::ClWorkload::add_unit_workload</a></div><div class="ttdeci">UnitWorkId add_unit_workload(UnitWorkloadStage stage, const ClKernelCode &amp;code, const std::vector&lt; Tid &gt; &amp;inputs, const std::vector&lt; Tid &gt; &amp;outputs)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_8h_source.xhtml#l00184">ClWorkload.h:184</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a17988896270878f90fb442bb42b0297c"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a17988896270878f90fb442bb42b0297c">arm_compute::experimental::dynamic_fusion::ArgumentID</a></div><div class="ttdeci">DependencyGraph::Id ArgumentID</div><div class="ttdef"><b>Definition:</b> <a href="_cl_kernel_building_a_p_i_8h_source.xhtml#l00041">ClKernelBuildingAPI.h:41</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_fusion_group_xhtml"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_fusion_group.xhtml">arm_compute::experimental::dynamic_fusion::ClKernelFusionGroup</a></div><div class="ttdoc">A const view of a subgraph of the ClKernelGraph to be fused together. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_fused_kernel_graph_8h_source.xhtml#l00047">ClFusedKernelGraph.h:47</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a8bf3f564acec14f99a8233408a295d34"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a8bf3f564acec14f99a8233408a295d34">arm_compute::experimental::dynamic_fusion::set_tile_info</a></div><div class="ttdeci">Status set_tile_info(ClKernelBlueprint &amp;bp, const TileDescriptor &amp;tile_info)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_kernel_building_a_p_i_8cpp_source.xhtml#l00135">ClKernelBuildingAPI.cpp:135</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a6f46e60fa2d4e77d485d6a1f6c3631b9"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6f46e60fa2d4e77d485d6a1f6c3631b9">arm_compute::experimental::dynamic_fusion::add_kcomp_store</a></div><div class="ttdeci">Status add_kcomp_store(ClKernelBlueprint &amp;kernel_blueprint, const StoreType &amp;store_type, ArgumentID src_tile, ArgumentID dst_tile)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_kernel_building_a_p_i_8cpp_source.xhtml#l00105">ClKernelBuildingAPI.cpp:105</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_fusion_group_xhtml_abe9573bdefe0575529bf33c535474a52"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_fusion_group.xhtml#abe9573bdefe0575529bf33c535474a52">arm_compute::experimental::dynamic_fusion::ClKernelFusionGroup::get_root_kernel</a></div><div class="ttdeci">const ClKernel * get_root_kernel() const</div><div class="ttdef"><b>Definition:</b> <a href="_cl_fused_kernel_graph_8h_source.xhtml#l00094">ClFusedKernelGraph.h:94</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a124185cc0f16b8bc162cf4845c91d1d2"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a124185cc0f16b8bc162cf4845c91d1d2">arm_compute::experimental::dynamic_fusion::init_fusion_graph</a></div><div class="ttdeci">std::pair&lt; Status, ClFusedKernelGraph &gt; init_fusion_graph(const ClKernelGraph &amp;kernel_graph)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_fused_kernel_graph_8cpp_source.xhtml#l00083">ClFusedKernelGraph.cpp:83</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a8d6a9002a9d5c0fc67a8c4d547b37491"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a8d6a9002a9d5c0fc67a8c4d547b37491">arm_compute::experimental::dynamic_fusion::generate_store</a></div><div class="ttdeci">Status generate_store(ClKernelBlueprint &amp;bp, const ClFusedKernelGraph &amp;fused_kernel_graph, const ClKernelFusionGroup &amp;fg)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_fused_kernel_graph_8cpp_source.xhtml#l00132">ClFusedKernelGraph.cpp:132</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_graph_xhtml_a26ce1702be726c11355b21545e75e207"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_graph.xhtml#a26ce1702be726c11355b21545e75e207">arm_compute::experimental::dynamic_fusion::ClKernelGraph::get_tensor</a></div><div class="ttdeci">ClKernelTensor * get_tensor(Id id)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_kernel_graph_8h_source.xhtml#l00237">ClKernelGraph.h:237</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_fused_kernel_graph_xhtml"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_fused_kernel_graph.xhtml">arm_compute::experimental::dynamic_fusion::ClFusedKernelGraph</a></div><div class="ttdef"><b>Definition:</b> <a href="_cl_fused_kernel_graph_8h_source.xhtml#l00134">ClFusedKernelGraph.h:134</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel_xhtml_a220ff6a1c45002ec7d5ef4334a1c1d67"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_kernel.xhtml#a220ff6a1c45002ec7d5ef4334a1c1d67">arm_compute::experimental::dynamic_fusion::ClKernel::config</a></div><div class="ttdeci">ClKernelConfig config() const</div><div class="ttdef"><b>Definition:</b> <a href="_cl_kernel_graph_8h_source.xhtml#l00110">ClKernelGraph.h:110</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_fused_kernel_graph_xhtml_a089f9f50806d05f259dc08a4c3ed6219"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_fused_kernel_graph.xhtml#a089f9f50806d05f259dc08a4c3ed6219">arm_compute::experimental::dynamic_fusion::ClFusedKernelGraph::fg_dependency</a></div><div class="ttdeci">DependencyGraph fg_dependency</div><div class="ttdef"><b>Definition:</b> <a href="_cl_fused_kernel_graph_8h_source.xhtml#l00403">ClFusedKernelGraph.h:403</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_b7458c46e3e273561b07052265b89043.xhtml">experimental</a></li><li class="navelem"><a class="el" href="dir_4ba1de0cc05164046c8a7675a91253dd.xhtml">dynamic_fusion</a></li><li class="navelem"><a class="el" href="dir_4a5d79691feea64a5adaad9e433740c9.xhtml">WorkloadImpl</a></li><li class="navelem"><a class="el" href="_cl_fused_kernel_graph_8cpp.xhtml">ClFusedKernelGraph.cpp</a></li>
    <li class="footer">Generated on Thu Aug 18 2022 12:57:35 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
