<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/graph/Utils.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('src_2graph_2_utils_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Utils.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="src_2graph_2_utils_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2018-2021 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2graph_2_utils_8h.xhtml">arm_compute/graph/Utils.h</a>&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_graph_context_8h.xhtml">arm_compute/graph/GraphContext.h</a>&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_backend_registry_8h.xhtml">arm_compute/graph/backends/BackendRegistry.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_graph_mutators_8h.xhtml">arm_compute/graph/mutators/GraphMutators.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;{</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">namespace </span>graph</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;{</div><div class="line"><a name="l00034"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph.xhtml#a6fd498c55b126dc3f078d38e8528effb">   34</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a6fd498c55b126dc3f078d38e8528effb">is_target_supported</a>(<a class="code" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a> target)</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1graph_1_1backends_1_1_backend_registry.xhtml#a1f3feffc5bf8a42636b0e5d4f5160041">backends::BackendRegistry::get</a>().<a class="code" href="classarm__compute_1_1graph_1_1backends_1_1_backend_registry.xhtml#aaacd907a06b819a33edf3c2c927aad46">contains</a>(target) &amp;&amp; <a class="code" href="classarm__compute_1_1graph_1_1backends_1_1_backend_registry.xhtml#a1f3feffc5bf8a42636b0e5d4f5160041">backends::BackendRegistry::get</a>().<a class="code" href="classarm__compute_1_1graph_1_1backends_1_1_backend_registry.xhtml#a62aabe90a748206d11150f01899d4bce">find_backend</a>(target)-&gt;<a class="code" href="classarm__compute_1_1graph_1_1backends_1_1_i_device_backend.xhtml#aba671d383a01749f55e49d5750646c05">is_backend_supported</a>();</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;}</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph.xhtml#addc5c907a850a8b4d5458bd14f50c6f7">   39</a></span>&#160;<a class="code" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a> <a class="code" href="namespacearm__compute_1_1graph.xhtml#addc5c907a850a8b4d5458bd14f50c6f7">get_default_target</a>()</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1graph.xhtml#a6fd498c55b126dc3f078d38e8528effb">is_target_supported</a>(<a class="code" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35dacaf162e9233294cadf62d2a71a14ca09">Target::NEON</a>))</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    {</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35dacaf162e9233294cadf62d2a71a14ca09">Target::NEON</a>;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    }</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1graph.xhtml#a6fd498c55b126dc3f078d38e8528effb">is_target_supported</a>(<a class="code" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35da5bc574a47246f122016869b32a6aa6f0">Target::CL</a>))</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    {</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35da5bc574a47246f122016869b32a6aa6f0">Target::CL</a>;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    }</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;No backend exists!&quot;</span>);</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;}</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph.xhtml#ac5712330ef2d40408efb4eae5665dc6e">   52</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#ac5712330ef2d40408efb4eae5665dc6e">force_target_to_graph</a>(<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="code" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a> target)</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;{</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">auto</span> &amp;nodes = g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a8a979250f01a5edba059a02748b10ea3">nodes</a>();</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;node : nodes)</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    {</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <span class="keywordflow">if</span>(node)</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        {</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            node-&gt;set_assigned_target(target);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        }</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    }</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">auto</span> &amp;tensors = g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#aabacbdcb2b491b129b119273a813bb67">tensors</a>();</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;tensor : tensors)</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    {</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keywordflow">if</span>(tensor)</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        {</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            tensor-&gt;desc().target = target;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        }</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    }</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;}</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph.xhtml#a0a2d08174e24bcb1dfdf9d8893cd9363">   73</a></span>&#160;<a class="code" href="classarm__compute_1_1graph_1_1_pass_manager.xhtml">PassManager</a> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a0a2d08174e24bcb1dfdf9d8893cd9363">create_default_pass_manager</a>(<a class="code" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a> target, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1graph_1_1_graph_config.xhtml">GraphConfig</a> &amp;cfg)</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;{</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(target);</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1_pass_manager.xhtml">PassManager</a> pm;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="comment">// Passes that mutate graph IR</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordflow">if</span>(cfg.<a class="code" href="structarm__compute_1_1graph_1_1_graph_config.xhtml#a1c63a70031e72b9eaba259286f06ee2c">use_synthetic_type</a>)</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    {</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <span class="keywordflow">switch</span>(cfg.<a class="code" href="structarm__compute_1_1graph_1_1_graph_config.xhtml#a19f999dddb4ef5efd7fef82f8c01f228">synthetic_type</a>)</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        {</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>:</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">DataType::QASYMM8_SIGNED</a>:</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            {</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                pm.<a class="code" href="classarm__compute_1_1graph_1_1_pass_manager.xhtml#a4dd20feefb9157c2d617e2a45b91dacf">append</a>(std::make_unique&lt;SyntheticDataTypeMutator&gt;(cfg.<a class="code" href="structarm__compute_1_1graph_1_1_graph_config.xhtml#a19f999dddb4ef5efd7fef82f8c01f228">synthetic_type</a>));</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            }</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            <span class="keywordflow">default</span>:</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            {</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported DataType for SyntheticDataTypeMutator&quot;</span>);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            }</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        }</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    }</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    pm.<a class="code" href="classarm__compute_1_1graph_1_1_pass_manager.xhtml#a4dd20feefb9157c2d617e2a45b91dacf">append</a>(std::make_unique&lt;NodeFusionMutator&gt;());</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    pm.<a class="code" href="classarm__compute_1_1graph_1_1_pass_manager.xhtml#a4dd20feefb9157c2d617e2a45b91dacf">append</a>(std::make_unique&lt;GroupedConvolutionMutator&gt;());</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    pm.<a class="code" href="classarm__compute_1_1graph_1_1_pass_manager.xhtml#a4dd20feefb9157c2d617e2a45b91dacf">append</a>(std::make_unique&lt;InPlaceOperationMutator&gt;());</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="comment">// Passes that mutate backend information</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    pm.<a class="code" href="classarm__compute_1_1graph_1_1_pass_manager.xhtml#a4dd20feefb9157c2d617e2a45b91dacf">append</a>(std::make_unique&lt;DepthConcatSubTensorMutator&gt;());</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    pm.<a class="code" href="classarm__compute_1_1graph_1_1_pass_manager.xhtml#a4dd20feefb9157c2d617e2a45b91dacf">append</a>(std::make_unique&lt;SplitLayerSubTensorMutator&gt;());</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    pm.<a class="code" href="classarm__compute_1_1graph_1_1_pass_manager.xhtml#a4dd20feefb9157c2d617e2a45b91dacf">append</a>(std::make_unique&lt;NodeExecutionMethodMutator&gt;());</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keywordflow">return</span> pm;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;}</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph.xhtml#a9562c1c1399af2f10714a7d901e19311">  108</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a9562c1c1399af2f10714a7d901e19311">release_default_graph_context</a>(<a class="code" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;ctx)</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;{</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;backend : <a class="code" href="classarm__compute_1_1graph_1_1backends_1_1_backend_registry.xhtml#a1f3feffc5bf8a42636b0e5d4f5160041">backends::BackendRegistry::get</a>().backends())</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    {</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <span class="keywordflow">if</span>(backend.second-&gt;is_backend_supported())</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        {</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            backend.second-&gt;release_backend_context(ctx);</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        }</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    }</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;}</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph.xhtml#ae8f18192b411ffc62fdd293f908b4c78">  119</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#ae8f18192b411ffc62fdd293f908b4c78">sync_backends</a>()</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;{</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;backend : <a class="code" href="classarm__compute_1_1graph_1_1backends_1_1_backend_registry.xhtml#a1f3feffc5bf8a42636b0e5d4f5160041">backends::BackendRegistry::get</a>().backends())</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    {</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        <span class="keywordflow">if</span>(backend.second-&gt;backend_allocator())</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        {</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            backend.second-&gt;sync();</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        }</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    }</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;}</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph.xhtml#aaef0102f19fc08d670766506b1a0b66e">  130</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#aaef0102f19fc08d670766506b1a0b66e">setup_requested_backend_context</a>(<a class="code" href="classarm__compute_1_1graph_1_1_graph_context.xhtml">GraphContext</a> &amp;ctx, <a class="code" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a> target)</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;{</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="classarm__compute_1_1graph_1_1backends_1_1_backend_registry.xhtml#a1f3feffc5bf8a42636b0e5d4f5160041">backends::BackendRegistry::get</a>().contains(target))</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    {</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> &amp;backend = <a class="code" href="classarm__compute_1_1graph_1_1backends_1_1_backend_registry.xhtml#a1f3feffc5bf8a42636b0e5d4f5160041">backends::BackendRegistry::get</a>().<a class="code" href="classarm__compute_1_1graph_1_1backends_1_1_backend_registry.xhtml#a62aabe90a748206d11150f01899d4bce">find_backend</a>(target);</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <span class="keywordflow">if</span>(backend-&gt;is_backend_supported())</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        {</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            backend-&gt;<a class="code" href="classarm__compute_1_1graph_1_1backends_1_1_i_device_backend.xhtml#ad172b9815229e40cd25ad1c401d2a0e4">setup_backend_context</a>(ctx);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        }</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    }</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;}</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00142"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph.xhtml#a75f8e464c6b01b0a4771de38669ee9a1">  142</a></span>&#160;<span class="keywordtype">size_t</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a75f8e464c6b01b0a4771de38669ee9a1">get_dimension_size</a>(<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml">TensorDescriptor</a> &amp;descriptor, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02">DataLayoutDimension</a> data_layout_dimension)</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;{</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(descriptor.<a class="code" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml#a4b52bb397c7296e8efe864967b44f97e">layout</a> == <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a696b031073e74bf2cb98e5ef201d4aa3">DataLayout::UNKNOWN</a>, <span class="stringliteral">&quot;Cannot retrieve the dimension index for an unknown layout!&quot;</span>);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keywordflow">return</span> descriptor.<a class="code" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">shape</a>[<a class="code" href="namespacearm__compute_1_1graph.xhtml#a1df15aed3ed531f442ecea2a131d65a4">get_dimension_idx</a>(descriptor.<a class="code" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml#a4b52bb397c7296e8efe864967b44f97e">layout</a>, data_layout_dimension)];</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;}</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph.xhtml#a1df15aed3ed531f442ecea2a131d65a4">  148</a></span>&#160;<span class="keywordtype">size_t</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a1df15aed3ed531f442ecea2a131d65a4">get_dimension_idx</a>(<a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a>, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02">DataLayoutDimension</a> data_layout_dimension)</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;{</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(data_layout == <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a696b031073e74bf2cb98e5ef201d4aa3">DataLayout::UNKNOWN</a>, <span class="stringliteral">&quot;Cannot retrieve the dimension index for an unknown layout!&quot;</span>);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="comment">/* Return the index based on the data layout</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment">     * [N C H W]</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment">     * [3 2 1 0]</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">     * [N H W C]</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keywordflow">switch</span>(data_layout_dimension)</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    {</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">DataLayoutDimension::CHANNEL</a>:</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            <span class="keywordflow">return</span> (data_layout == <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>) ? 2 : 0;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">DataLayoutDimension::HEIGHT</a>:</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            <span class="keywordflow">return</span> (data_layout == <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>) ? 1 : 2;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">DataLayoutDimension::WIDTH</a>:</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            <span class="keywordflow">return</span> (data_layout == <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>) ? 0 : 1;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a628bcf7e10fc1c2a984f379a1ec3393a">DataLayoutDimension::BATCHES</a>:</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            <span class="keywordflow">return</span> 3;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    }</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Data layout index not supported!&quot;</span>);</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;}</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph.xhtml#a634230f98a5918f214e47d913c452d3b">  177</a></span>&#160;std::vector&lt;NodeIdxPair&gt; <a class="code" href="namespacearm__compute_1_1graph.xhtml#a634230f98a5918f214e47d913c452d3b">get_driving_nodes</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &amp;node)</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;{</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    std::vector&lt;NodeIdxPair&gt; driving_nodes;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> *g = node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a88421a0f6fd8896906a4a4b86f41ca4f">graph</a>();</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(g == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;output_edge_id : node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#abbf8678d888561b348dd1c34d9e34af9">output_edges</a>())</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    {</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        <span class="keyword">auto</span> output_edge = g-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a0ea47db036b1c140af002ee1494dcb6f">edge</a>(output_edge_id);</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        <span class="keywordflow">if</span>(output_edge != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        {</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(output_edge-&gt;consumer() == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            driving_nodes.push_back({ output_edge-&gt;consumer_id(), output_edge-&gt;consumer_idx() });</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        }</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    }</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="keywordflow">return</span> driving_nodes;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;}</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph.xhtml#ad17fa352dabb4482cb996a9f8f7f3ba3">  197</a></span>&#160;std::vector&lt;NodeIdxPair&gt; <a class="code" href="namespacearm__compute_1_1graph.xhtml#ad17fa352dabb4482cb996a9f8f7f3ba3">get_driver_nodes</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &amp;node)</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;{</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    std::vector&lt;NodeIdxPair&gt; driver_nodes;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> *g = node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a88421a0f6fd8896906a4a4b86f41ca4f">graph</a>();</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(g == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;input_edge_id : node.<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a3fd5d1d4dea9bb355f9baa9b4d44402f">input_edges</a>())</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    {</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        <span class="keyword">auto</span> input_edge = g-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a0ea47db036b1c140af002ee1494dcb6f">edge</a>(input_edge_id);</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        <span class="keywordflow">if</span>(input_edge != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        {</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input_edge-&gt;producer() == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            driver_nodes.push_back({ input_edge-&gt;producer_id(), input_edge-&gt;producer_idx() });</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        }</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    }</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="keywordflow">return</span> driver_nodes;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;}</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div><div class="line"><a name="l00217"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph.xhtml#a36fd3cfa2e1d33e59e1d3e95664d8b9c">  217</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a36fd3cfa2e1d33e59e1d3e95664d8b9c">configure_tensor</a>(<a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml">Tensor</a> *tensor)</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;{</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keywordflow">if</span>(tensor != <span class="keyword">nullptr</span> &amp;&amp; tensor-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml#a45c1ef0023ce430d009ec79c97761544">handle</a>() == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    {</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        <a class="code" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a>                         target  = tensor-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml#a0d3608f94078b90ab1ff9e9465d4ed3b">desc</a>().<a class="code" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml#a2a7ca82c5e74421cb45f17e936abf964">target</a>;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        <a class="code" href="classarm__compute_1_1graph_1_1backends_1_1_i_device_backend.xhtml">backends::IDeviceBackend</a>      &amp;backend = <a class="code" href="classarm__compute_1_1graph_1_1backends_1_1_backend_registry.xhtml#a1f3feffc5bf8a42636b0e5d4f5160041">backends::BackendRegistry::get</a>().<a class="code" href="classarm__compute_1_1graph_1_1backends_1_1_backend_registry.xhtml#a0e2e9eb7cf2545949ea4130d768bea93">get_backend</a>(target);</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        std::unique_ptr&lt;ITensorHandle&gt; handle  = backend.<a class="code" href="classarm__compute_1_1graph_1_1backends_1_1_i_device_backend.xhtml#a0f46e4fef818b4114b3d09c799944046">create_tensor</a>(*tensor);</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(!handle, <span class="stringliteral">&quot;Couldn&#39;t create backend handle!&quot;</span>);</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        tensor-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml#a8c1a8dc99f338372d7dc6dd33672ec03">set_handle</a>(std::move(handle));</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    }</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;}</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;} <span class="comment">// namespace graph</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="ttc" id="namespacearm__compute_1_1graph_xhtml_ac5712330ef2d40408efb4eae5665dc6e"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#ac5712330ef2d40408efb4eae5665dc6e">arm_compute::graph::force_target_to_graph</a></div><div class="ttdeci">void force_target_to_graph(Graph &amp;g, Target target)</div><div class="ttdoc">Forces a single target to all graph constructs. </div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_utils_8cpp_source.xhtml#l00052">Utils.cpp:52</a></div></div>
<div class="ttc" id="structarm__compute_1_1graph_1_1_tensor_descriptor_xhtml_a1fcd64682b37ed3c2098d0094ce788d8"><div class="ttname"><a href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">arm_compute::graph::TensorDescriptor::shape</a></div><div class="ttdeci">TensorShape shape</div><div class="ttdoc">Tensor shape. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_descriptor_8h_source.xhtml#l00109">TensorDescriptor.h:109</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a31488d29805a596498c0234ae392d35dacaf162e9233294cadf62d2a71a14ca09"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35dacaf162e9233294cadf62d2a71a14ca09">arm_compute::graph::Target::NEON</a></div><div class="ttdoc">Arm® Neon™ capable target device. </div></div>
<div class="ttc" id="structarm__compute_1_1graph_1_1_graph_config_xhtml"><div class="ttname"><a href="structarm__compute_1_1graph_1_1_graph_config.xhtml">arm_compute::graph::GraphConfig</a></div><div class="ttdoc">Graph configuration structure Device target types. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00084">Types.h:84</a></div></div>
<div class="ttc" id="_graph_mutators_8h_xhtml"><div class="ttname"><a href="_graph_mutators_8h.xhtml">GraphMutators.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_acf5f12bbab64dd614bd8220c97fe484f"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">arm_compute::test::validation::data_layout</a></div><div class="ttdeci">const auto data_layout</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00403">ConvolutionLayer.cpp:403</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a36fd3cfa2e1d33e59e1d3e95664d8b9c"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a36fd3cfa2e1d33e59e1d3e95664d8b9c">arm_compute::graph::configure_tensor</a></div><div class="ttdeci">void configure_tensor(Tensor *tensor)</div><div class="ttdoc">Configures tensor. </div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_utils_8cpp_source.xhtml#l00217">Utils.cpp:217</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_abbf8678d888561b348dd1c34d9e34af9"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#abbf8678d888561b348dd1c34d9e34af9">arm_compute::graph::INode::output_edges</a></div><div class="ttdeci">const std::set&lt; EdgeID &gt; &amp; output_edges() const</div><div class="ttdoc">Returns output edge set. </div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00133">INode.cpp:133</a></div></div>
<div class="ttc" id="structarm__compute_1_1graph_1_1_tensor_descriptor_xhtml"><div class="ttname"><a href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml">arm_compute::graph::TensorDescriptor</a></div><div class="ttdoc">Tensor metadata class. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_descriptor_8h_source.xhtml#l00038">TensorDescriptor.h:38</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a634230f98a5918f214e47d913c452d3b"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a634230f98a5918f214e47d913c452d3b">arm_compute::graph::get_driving_nodes</a></div><div class="ttdeci">std::vector&lt; NodeIdxPair &gt; get_driving_nodes(const INode &amp;node)</div><div class="ttdoc">Get the list of driving nodes of a given node. </div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_utils_8cpp_source.xhtml#l00177">Utils.cpp:177</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_tensor_xhtml_a8c1a8dc99f338372d7dc6dd33672ec03"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_tensor.xhtml#a8c1a8dc99f338372d7dc6dd33672ec03">arm_compute::graph::Tensor::set_handle</a></div><div class="ttdeci">void set_handle(std::unique_ptr&lt; ITensorHandle &gt; backend_tensor)</div><div class="ttdoc">Sets the backend tensor. </div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_tensor_8cpp_source.xhtml#l00050">Tensor.cpp:50</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a75f8e464c6b01b0a4771de38669ee9a1"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a75f8e464c6b01b0a4771de38669ee9a1">arm_compute::graph::get_dimension_size</a></div><div class="ttdeci">size_t get_dimension_size(const TensorDescriptor &amp;descriptor, const DataLayoutDimension data_layout_dimension)</div><div class="ttdoc">Get size of a tensor&amp;#39;s given dimension depending on its layout. </div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_utils_8cpp_source.xhtml#l00142">Utils.cpp:142</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_pass_manager_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_pass_manager.xhtml">arm_compute::graph::PassManager</a></div><div class="ttdoc">Pass manager. </div><div class="ttdef"><b>Definition:</b> <a href="_pass_manager_8h_source.xhtml#l00043">PassManager.h:43</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_tensor_xhtml_a45c1ef0023ce430d009ec79c97761544"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_tensor.xhtml#a45c1ef0023ce430d009ec79c97761544">arm_compute::graph::Tensor::handle</a></div><div class="ttdeci">ITensorHandle * handle()</div><div class="ttdoc">Backend tensor handle accessor. </div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_tensor_8cpp_source.xhtml#l00055">Tensor.cpp:55</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02">arm_compute::DataLayoutDimension</a></div><div class="ttdeci">DataLayoutDimension</div><div class="ttdoc">[DataLayout enum definition] </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00124">Types.h:124</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1backends_1_1_i_device_backend_xhtml_aba671d383a01749f55e49d5750646c05"><div class="ttname"><a href="classarm__compute_1_1graph_1_1backends_1_1_i_device_backend.xhtml#aba671d383a01749f55e49d5750646c05">arm_compute::graph::backends::IDeviceBackend::is_backend_supported</a></div><div class="ttdeci">virtual bool is_backend_supported()=0</div><div class="ttdoc">Checks if an instantiated backend is actually supported. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a88421a0f6fd8896906a4a4b86f41ca4f"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a88421a0f6fd8896906a4a4b86f41ca4f">arm_compute::graph::INode::graph</a></div><div class="ttdeci">const Graph * graph() const</div><div class="ttdoc">Returns node&amp;#39;s Graph. </div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00113">INode.cpp:113</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1backends_1_1_backend_registry_xhtml_a0e2e9eb7cf2545949ea4130d768bea93"><div class="ttname"><a href="classarm__compute_1_1graph_1_1backends_1_1_backend_registry.xhtml#a0e2e9eb7cf2545949ea4130d768bea93">arm_compute::graph::backends::BackendRegistry::get_backend</a></div><div class="ttdeci">IDeviceBackend &amp; get_backend(Target target)</div><div class="ttdoc">Get a backend from the registry. </div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00051">BackendRegistry.cpp:51</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">arm_compute::DataLayoutDimension::HEIGHT</a></div><div class="ttdoc">height </div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_ad17fa352dabb4482cb996a9f8f7f3ba3"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#ad17fa352dabb4482cb996a9f8f7f3ba3">arm_compute::graph::get_driver_nodes</a></div><div class="ttdeci">std::vector&lt; NodeIdxPair &gt; get_driver_nodes(const INode &amp;node)</div><div class="ttdoc">Get the list of driver nodes of a given node. </div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_utils_8cpp_source.xhtml#l00197">Utils.cpp:197</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1backends_1_1_i_device_backend_xhtml_ad172b9815229e40cd25ad1c401d2a0e4"><div class="ttname"><a href="classarm__compute_1_1graph_1_1backends_1_1_i_device_backend.xhtml#ad172b9815229e40cd25ad1c401d2a0e4">arm_compute::graph::backends::IDeviceBackend::setup_backend_context</a></div><div class="ttdeci">virtual void setup_backend_context(GraphContext &amp;ctx)=0</div><div class="ttdoc">Setups the given graph context. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_context_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_context.xhtml">arm_compute::graph::GraphContext</a></div><div class="ttdoc">Graph context. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_context_8h_source.xhtml#l00057">GraphContext.h:57</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2022 Arm Limited. </div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1backends_1_1_i_device_backend_xhtml_a0f46e4fef818b4114b3d09c799944046"><div class="ttname"><a href="classarm__compute_1_1graph_1_1backends_1_1_i_device_backend.xhtml#a0f46e4fef818b4114b3d09c799944046">arm_compute::graph::backends::IDeviceBackend::create_tensor</a></div><div class="ttdeci">virtual std::unique_ptr&lt; ITensorHandle &gt; create_tensor(const Tensor &amp;tensor)=0</div><div class="ttdoc">Create a backend Tensor. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_tensor_xhtml_a0d3608f94078b90ab1ff9e9465d4ed3b"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_tensor.xhtml#a0d3608f94078b90ab1ff9e9465d4ed3b">arm_compute::graph::Tensor::desc</a></div><div class="ttdeci">TensorDescriptor &amp; desc()</div><div class="ttdoc">TensorInfo metadata accessor. </div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_tensor_8cpp_source.xhtml#l00040">Tensor.cpp:40</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_addc5c907a850a8b4d5458bd14f50c6f7"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#addc5c907a850a8b4d5458bd14f50c6f7">arm_compute::graph::get_default_target</a></div><div class="ttdeci">Target get_default_target()</div><div class="ttdoc">Returns default target for execution. </div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_utils_8cpp_source.xhtml#l00039">Utils.cpp:39</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_xhtml_aabacbdcb2b491b129b119273a813bb67"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml#aabacbdcb2b491b129b119273a813bb67">arm_compute::graph::Graph::tensors</a></div><div class="ttdeci">std::vector&lt; std::unique_ptr&lt; Tensor &gt; &gt; &amp; tensors()</div><div class="ttdoc">Returns tensors of graph. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_8cpp_source.xhtml#l00194">Graph.cpp:194</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml">arm_compute::graph::INode</a></div><div class="ttdoc">Node interface. </div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8h_source.xhtml#l00046">INode.h:46</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a3fd5d1d4dea9bb355f9baa9b4d44402f"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a3fd5d1d4dea9bb355f9baa9b4d44402f">arm_compute::graph::INode::input_edges</a></div><div class="ttdeci">const std::vector&lt; EdgeID &gt; &amp; input_edges() const</div><div class="ttdoc">Returns input edge set. </div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8cpp_source.xhtml#l00128">INode.cpp:128</a></div></div>
<div class="ttc" id="arm__compute_2graph_2_utils_8h_xhtml"><div class="ttname"><a href="arm__compute_2graph_2_utils_8h.xhtml">Utils.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">arm_compute::DataType::QASYMM8</a></div><div class="ttdoc">quantized, asymmetric fixed-point 8-bit number unsigned </div></div>
<div class="ttc" id="_error_8h_xhtml_a0b0eb3235749a2909dc5a101afe59a1b"><div class="ttname"><a href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond, msg)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00456">Error.h:456</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_aaef0102f19fc08d670766506b1a0b66e"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aaef0102f19fc08d670766506b1a0b66e">arm_compute::graph::setup_requested_backend_context</a></div><div class="ttdeci">void setup_requested_backend_context(GraphContext &amp;ctx, Target target)</div><div class="ttdoc">Setups requested backend context if it exists, is supported and hasn&amp;#39;t been initialized already...</div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_utils_8cpp_source.xhtml#l00130">Utils.cpp:130</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a6fd498c55b126dc3f078d38e8528effb"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a6fd498c55b126dc3f078d38e8528effb">arm_compute::graph::is_target_supported</a></div><div class="ttdeci">bool is_target_supported(Target target)</div><div class="ttdoc">Checks if a specific target is supported. </div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_utils_8cpp_source.xhtml#l00034">Utils.cpp:34</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1backends_1_1_backend_registry_xhtml_aaacd907a06b819a33edf3c2c927aad46"><div class="ttname"><a href="classarm__compute_1_1graph_1_1backends_1_1_backend_registry.xhtml#aaacd907a06b819a33edf3c2c927aad46">arm_compute::graph::backends::BackendRegistry::contains</a></div><div class="ttdeci">bool contains(Target target) const</div><div class="ttdoc">Checks if a backend for a given target exists. </div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00059">BackendRegistry.cpp:59</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">arm_compute::DataLayoutDimension::CHANNEL</a></div><div class="ttdoc">channel </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1backends_1_1_backend_registry_xhtml_a1f3feffc5bf8a42636b0e5d4f5160041"><div class="ttname"><a href="classarm__compute_1_1graph_1_1backends_1_1_backend_registry.xhtml#a1f3feffc5bf8a42636b0e5d4f5160041">arm_compute::graph::backends::BackendRegistry::get</a></div><div class="ttdeci">static BackendRegistry &amp; get()</div><div class="ttdoc">Gets backend registry instance. </div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00039">BackendRegistry.cpp:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a31488d29805a596498c0234ae392d35d"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">arm_compute::graph::Target</a></div><div class="ttdeci">Target</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00100">Types.h:100</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02a628bcf7e10fc1c2a984f379a1ec3393a"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a628bcf7e10fc1c2a984f379a1ec3393a">arm_compute::DataLayoutDimension::BATCHES</a></div><div class="ttdoc">batches </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">arm_compute::DataLayout::NCHW</a></div><div class="ttdoc">Num samples, channels, height, width. </div></div>
<div class="ttc" id="structarm__compute_1_1graph_1_1_tensor_descriptor_xhtml_a2a7ca82c5e74421cb45f17e936abf964"><div class="ttname"><a href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml#a2a7ca82c5e74421cb45f17e936abf964">arm_compute::graph::TensorDescriptor::target</a></div><div class="ttdeci">Target target</div><div class="ttdoc">Target. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_descriptor_8h_source.xhtml#l00113">TensorDescriptor.h:113</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml">arm_compute::graph::Graph</a></div><div class="ttdoc">Graph class. </div><div class="ttdef"><b>Definition:</b> <a href="graph_2_graph_8h_source.xhtml#l00053">Graph.h:53</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3a696b031073e74bf2cb98e5ef201d4aa3"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a696b031073e74bf2cb98e5ef201d4aa3">arm_compute::GPUTarget::UNKNOWN</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_pass_manager_xhtml_a4dd20feefb9157c2d617e2a45b91dacf"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_pass_manager.xhtml#a4dd20feefb9157c2d617e2a45b91dacf">arm_compute::graph::PassManager::append</a></div><div class="ttdeci">void append(std::unique_ptr&lt; IGraphMutator &gt; pass, bool conditional=true)</div><div class="ttdoc">Appends a mutation pass. </div><div class="ttdef"><b>Definition:</b> <a href="_pass_manager_8cpp_source.xhtml#l00047">PassManager.cpp:47</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_xhtml_a8a979250f01a5edba059a02748b10ea3"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml#a8a979250f01a5edba059a02748b10ea3">arm_compute::graph::Graph::nodes</a></div><div class="ttdeci">const std::vector&lt; NodeID &gt; &amp; nodes(NodeType type)</div><div class="ttdoc">Returns graph input nodes. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_8cpp_source.xhtml#l00174">Graph.cpp:174</a></div></div>
<div class="ttc" id="structarm__compute_1_1graph_1_1_graph_config_xhtml_a1c63a70031e72b9eaba259286f06ee2c"><div class="ttname"><a href="structarm__compute_1_1graph_1_1_graph_config.xhtml#a1c63a70031e72b9eaba259286f06ee2c">arm_compute::graph::GraphConfig::use_synthetic_type</a></div><div class="ttdeci">bool use_synthetic_type</div><div class="ttdoc">Convert graph to a synthetic graph for a data type. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00090">Types.h:90</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_ae8f18192b411ffc62fdd293f908b4c78"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#ae8f18192b411ffc62fdd293f908b4c78">arm_compute::graph::sync_backends</a></div><div class="ttdeci">void sync_backends()</div><div class="ttdoc">Synchronize kernels execution on the backends. </div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_utils_8cpp_source.xhtml#l00119">Utils.cpp:119</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a0a2d08174e24bcb1dfdf9d8893cd9363"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a0a2d08174e24bcb1dfdf9d8893cd9363">arm_compute::graph::create_default_pass_manager</a></div><div class="ttdeci">PassManager create_default_pass_manager(Target target, const GraphConfig &amp;cfg)</div><div class="ttdoc">Creates a default PassManager. </div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_utils_8cpp_source.xhtml#l00073">Utils.cpp:73</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_xhtml_a0ea47db036b1c140af002ee1494dcb6f"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml#a0ea47db036b1c140af002ee1494dcb6f">arm_compute::graph::Graph::edge</a></div><div class="ttdeci">const Edge * edge(EdgeID id) const</div><div class="ttdoc">Get edge object given its id. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_8cpp_source.xhtml#l00214">Graph.cpp:214</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1backends_1_1_i_device_backend_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1backends_1_1_i_device_backend.xhtml">arm_compute::graph::backends::IDeviceBackend</a></div><div class="ttdoc">Device backend interface. </div><div class="ttdef"><b>Definition:</b> <a href="_i_device_backend_8h_source.xhtml#l00048">IDeviceBackend.h:48</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1backends_1_1_backend_registry_xhtml_a62aabe90a748206d11150f01899d4bce"><div class="ttname"><a href="classarm__compute_1_1graph_1_1backends_1_1_backend_registry.xhtml#a62aabe90a748206d11150f01899d4bce">arm_compute::graph::backends::BackendRegistry::find_backend</a></div><div class="ttdeci">IDeviceBackend * find_backend(Target target)</div><div class="ttdoc">Finds a backend in the registry. </div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00045">BackendRegistry.cpp:45</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">arm_compute::DataLayoutDimension::WIDTH</a></div><div class="ttdoc">width </div></div>
<div class="ttc" id="_graph_context_8h_xhtml"><div class="ttname"><a href="_graph_context_8h.xhtml">GraphContext.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">arm_compute::DataType::QASYMM8_SIGNED</a></div><div class="ttdoc">quantized, asymmetric fixed-point 8-bit number signed </div></div>
<div class="ttc" id="_backend_registry_8h_xhtml"><div class="ttname"><a href="_backend_registry_8h.xhtml">BackendRegistry.h</a></div></div>
<div class="ttc" id="structarm__compute_1_1graph_1_1_tensor_descriptor_xhtml_a4b52bb397c7296e8efe864967b44f97e"><div class="ttname"><a href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml#a4b52bb397c7296e8efe864967b44f97e">arm_compute::graph::TensorDescriptor::layout</a></div><div class="ttdeci">DataLayout layout</div><div class="ttdoc">Data layout. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_descriptor_8h_source.xhtml#l00111">TensorDescriptor.h:111</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a31488d29805a596498c0234ae392d35da5bc574a47246f122016869b32a6aa6f0"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35da5bc574a47246f122016869b32a6aa6f0">arm_compute::graph::Target::CL</a></div><div class="ttdoc">OpenCL capable target device. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">arm_compute::DataLayout</a></div><div class="ttdeci">DataLayout</div><div class="ttdoc">[DataLayout enum definition] </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00113">Types.h:113</a></div></div>
<div class="ttc" id="structarm__compute_1_1graph_1_1_graph_config_xhtml_a19f999dddb4ef5efd7fef82f8c01f228"><div class="ttname"><a href="structarm__compute_1_1graph_1_1_graph_config.xhtml#a19f999dddb4ef5efd7fef82f8c01f228">arm_compute::graph::GraphConfig::synthetic_type</a></div><div class="ttdeci">DataType synthetic_type</div><div class="ttdoc">The data type of the synthetic graph. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00091">Types.h:91</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a9562c1c1399af2f10714a7d901e19311"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a9562c1c1399af2f10714a7d901e19311">arm_compute::graph::release_default_graph_context</a></div><div class="ttdeci">void release_default_graph_context(GraphContext &amp;ctx)</div><div class="ttdoc">Default releases the graph context if not done manually. </div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_utils_8cpp_source.xhtml#l00108">Utils.cpp:108</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a1df15aed3ed531f442ecea2a131d65a4"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a1df15aed3ed531f442ecea2a131d65a4">arm_compute::graph::get_dimension_idx</a></div><div class="ttdeci">size_t get_dimension_idx(DataLayout data_layout, const DataLayoutDimension data_layout_dimension)</div><div class="ttdoc">Get index of a tensor&amp;#39;s given dimension depending on its layout. </div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_utils_8cpp_source.xhtml#l00148">Utils.cpp:148</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_tensor.xhtml">arm_compute::graph::Tensor</a></div><div class="ttdoc">Tensor object. </div><div class="ttdef"><b>Definition:</b> <a href="graph_2_tensor_8h_source.xhtml#l00041">Tensor.h:41</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_d182250f0c231765fc862e69db210731.xhtml">graph</a></li><li class="navelem"><a class="el" href="src_2graph_2_utils_8cpp.xhtml">Utils.cpp</a></li>
    <li class="footer">Generated on Thu Aug 18 2022 12:57:37 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
