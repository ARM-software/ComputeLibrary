<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: NEDetectionPostProcessLayer Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarm__compute_1_1_n_e_detection_post_process_layer.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">NEDetectionPostProcessLayer Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>NE Function to generate the detection output based on center size encoded boxes, class prediction and anchors by doing non maximum suppression.  
 <a href="classarm__compute_1_1_n_e_detection_post_process_layer.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_n_e_detection_post_process_layer_8h_source.xhtml">NEDetectionPostProcessLayer.h</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for NEDetectionPostProcessLayer:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classarm__compute_1_1_n_e_detection_post_process_layer__coll__graph.svg" width="228" height="112"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a87d98ddc562f7a1278d1f44dc8a2d653"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_detection_post_process_layer.xhtml#a87d98ddc562f7a1278d1f44dc8a2d653">NEDetectionPostProcessLayer</a> (std::shared_ptr&lt; <a class="el" href="classarm__compute_1_1_i_memory_manager.xhtml">IMemoryManager</a> &gt; memory_manager=nullptr)</td></tr>
<tr class="memdesc:a87d98ddc562f7a1278d1f44dc8a2d653"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor.  <a href="#a87d98ddc562f7a1278d1f44dc8a2d653">More...</a><br /></td></tr>
<tr class="separator:a87d98ddc562f7a1278d1f44dc8a2d653"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a758de73ffe19ac7b2b8352c90ee94fba"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_detection_post_process_layer.xhtml#a758de73ffe19ac7b2b8352c90ee94fba">NEDetectionPostProcessLayer</a> (const <a class="el" href="classarm__compute_1_1_n_e_detection_post_process_layer.xhtml">NEDetectionPostProcessLayer</a> &amp;)=delete</td></tr>
<tr class="memdesc:a758de73ffe19ac7b2b8352c90ee94fba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prevent instances of this class from being copied (As this class contains pointers)  <a href="#a758de73ffe19ac7b2b8352c90ee94fba">More...</a><br /></td></tr>
<tr class="separator:a758de73ffe19ac7b2b8352c90ee94fba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5bff7b85f40dd3ec3a76bcea0e17ba4c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_n_e_detection_post_process_layer.xhtml">NEDetectionPostProcessLayer</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_detection_post_process_layer.xhtml#a5bff7b85f40dd3ec3a76bcea0e17ba4c">operator=</a> (const <a class="el" href="classarm__compute_1_1_n_e_detection_post_process_layer.xhtml">NEDetectionPostProcessLayer</a> &amp;)=delete</td></tr>
<tr class="memdesc:a5bff7b85f40dd3ec3a76bcea0e17ba4c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prevent instances of this class from being copied (As this class contains pointers)  <a href="#a5bff7b85f40dd3ec3a76bcea0e17ba4c">More...</a><br /></td></tr>
<tr class="separator:a5bff7b85f40dd3ec3a76bcea0e17ba4c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6a7401ecdcafd0f3afbff2bb0e6ad6f6"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_detection_post_process_layer.xhtml#a6a7401ecdcafd0f3afbff2bb0e6ad6f6">~NEDetectionPostProcessLayer</a> ()=default</td></tr>
<tr class="memdesc:a6a7401ecdcafd0f3afbff2bb0e6ad6f6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default destructor.  <a href="#a6a7401ecdcafd0f3afbff2bb0e6ad6f6">More...</a><br /></td></tr>
<tr class="separator:a6a7401ecdcafd0f3afbff2bb0e6ad6f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8136561c7a7d555b3a2c3bf0614986c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_detection_post_process_layer.xhtml#ab8136561c7a7d555b3a2c3bf0614986c">configure</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input_box_encoding, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input_score, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input_anchors, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output_boxes, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output_classes, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output_scores, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *num_detection, <a class="el" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml">DetectionPostProcessLayerInfo</a> info=<a class="el" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml">DetectionPostProcessLayerInfo</a>())</td></tr>
<tr class="memdesc:ab8136561c7a7d555b3a2c3bf0614986c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configure the detection output layer NE function.  <a href="#ab8136561c7a7d555b3a2c3bf0614986c">More...</a><br /></td></tr>
<tr class="separator:ab8136561c7a7d555b3a2c3bf0614986c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad1717410afd0be936c6213a63c8005fb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_detection_post_process_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a> () override</td></tr>
<tr class="memdesc:ad1717410afd0be936c6213a63c8005fb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Run the kernels contained in the function.  <a href="#ad1717410afd0be936c6213a63c8005fb">More...</a><br /></td></tr>
<tr class="separator:ad1717410afd0be936c6213a63c8005fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarm__compute_1_1_i_function"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarm__compute_1_1_i_function')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a></td></tr>
<tr class="memitem:ab921ecc3f3f6ae2b4bd61f3e1998d8c4 inherit pub_methods_classarm__compute_1_1_i_function"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_function.xhtml#ab921ecc3f3f6ae2b4bd61f3e1998d8c4">~IFunction</a> ()=default</td></tr>
<tr class="memdesc:ab921ecc3f3f6ae2b4bd61f3e1998d8c4 inherit pub_methods_classarm__compute_1_1_i_function"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="classarm__compute_1_1_i_function.xhtml#ab921ecc3f3f6ae2b4bd61f3e1998d8c4">More...</a><br /></td></tr>
<tr class="separator:ab921ecc3f3f6ae2b4bd61f3e1998d8c4 inherit pub_methods_classarm__compute_1_1_i_function"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a820f7291c24155a2980512fae45aac26 inherit pub_methods_classarm__compute_1_1_i_function"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_function.xhtml#a820f7291c24155a2980512fae45aac26">prepare</a> ()</td></tr>
<tr class="memdesc:a820f7291c24155a2980512fae45aac26 inherit pub_methods_classarm__compute_1_1_i_function"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prepare the function for executing.  <a href="classarm__compute_1_1_i_function.xhtml#a820f7291c24155a2980512fae45aac26">More...</a><br /></td></tr>
<tr class="separator:a820f7291c24155a2980512fae45aac26 inherit pub_methods_classarm__compute_1_1_i_function"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a08744faa3f68379fa82bcbd96bbec691"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_n_e_detection_post_process_layer.xhtml#a08744faa3f68379fa82bcbd96bbec691">validate</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input_box_encoding, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input_class_score, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input_anchors, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output_boxes, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output_classes, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output_scores, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *num_detection, <a class="el" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml">DetectionPostProcessLayerInfo</a> info=<a class="el" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml">DetectionPostProcessLayerInfo</a>())</td></tr>
<tr class="memdesc:a08744faa3f68379fa82bcbd96bbec691"><td class="mdescLeft">&#160;</td><td class="mdescRight">Static function to check if given info will lead to a valid configuration of <a class="el" href="classarm__compute_1_1_n_e_detection_post_process_layer.xhtml">NEDetectionPostProcessLayer</a>.  <a href="#a08744faa3f68379fa82bcbd96bbec691">More...</a><br /></td></tr>
<tr class="separator:a08744faa3f68379fa82bcbd96bbec691"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>NE Function to generate the detection output based on center size encoded boxes, class prediction and anchors by doing non maximum suppression. </p>
<dl class="section note"><dt>Note</dt><dd>Intended for use with MultiBox detection method. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_n_e_detection_post_process_layer_8h_source.xhtml#l00047">47</a> of file <a class="el" href="_n_e_detection_post_process_layer_8h_source.xhtml">NEDetectionPostProcessLayer.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a87d98ddc562f7a1278d1f44dc8a2d653"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a87d98ddc562f7a1278d1f44dc8a2d653">&#9670;&nbsp;</a></span>NEDetectionPostProcessLayer() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_n_e_detection_post_process_layer.xhtml">NEDetectionPostProcessLayer</a> </td>
          <td>(</td>
          <td class="paramtype">std::shared_ptr&lt; <a class="el" href="classarm__compute_1_1_i_memory_manager.xhtml">IMemoryManager</a> &gt;&#160;</td>
          <td class="paramname"><em>memory_manager</em> = <code>nullptr</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Constructor. </p>

<p class="definition">Definition at line <a class="el" href="_n_e_detection_post_process_layer_8cpp_source.xhtml#l00037">37</a> of file <a class="el" href="_n_e_detection_post_process_layer_8cpp_source.xhtml">NEDetectionPostProcessLayer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    : _memory_group(std::move(memory_manager)), _dequantize(), _detection_post_process(), _decoded_scores(), _run_dequantize(<span class="keyword">false</span>)</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a758de73ffe19ac7b2b8352c90ee94fba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a758de73ffe19ac7b2b8352c90ee94fba">&#9670;&nbsp;</a></span>NEDetectionPostProcessLayer() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_n_e_detection_post_process_layer.xhtml">NEDetectionPostProcessLayer</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_n_e_detection_post_process_layer.xhtml">NEDetectionPostProcessLayer</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prevent instances of this class from being copied (As this class contains pointers) </p>

</div>
</div>
<a id="a6a7401ecdcafd0f3afbff2bb0e6ad6f6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6a7401ecdcafd0f3afbff2bb0e6ad6f6">&#9670;&nbsp;</a></span>~NEDetectionPostProcessLayer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarm__compute_1_1_n_e_detection_post_process_layer.xhtml">NEDetectionPostProcessLayer</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default destructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="ab8136561c7a7d555b3a2c3bf0614986c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab8136561c7a7d555b3a2c3bf0614986c">&#9670;&nbsp;</a></span>configure()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void configure </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input_box_encoding</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input_score</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input_anchors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output_boxes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output_classes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output_scores</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>num_detection</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml">DetectionPostProcessLayerInfo</a>&#160;</td>
          <td class="paramname"><em>info</em> = <code><a class="el" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml">DetectionPostProcessLayerInfo</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Configure the detection output layer NE function. </p>
<p>Valid data layouts:</p><ul>
<li>All</li>
</ul>
<p>Valid data type configurations: </p><table class="doxtable">
<tr>
<th align="left">src0 - src2 </th><th align="left">dst0 - dst3  </th></tr>
<tr>
<td align="left">QASYMM8 </td><td align="left">F32 </td></tr>
<tr>
<td align="left">QASYMM8_SIGNED </td><td align="left">F32 </td></tr>
<tr>
<td align="left">F32 </td><td align="left">F32 </td></tr>
</table>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input_box_encoding</td><td>The bounding box input tensor. Data types supported: QASYMM8/QASYMM8_SIGNED/F32. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_score</td><td>The class prediction input tensor. Data types supported: same as <code>input_box_encoding</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_anchors</td><td>The anchors input tensor. Data types supported: same as <code>input_box_encoding</code>. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output_boxes</td><td>The boxes output tensor. Data types supported: F32. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output_classes</td><td>The classes output tensor. Data types supported: Same as <code>output_boxes</code>. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output_scores</td><td>The scores output tensor. Data types supported: Same as <code>output_boxes</code>. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">num_detection</td><td>The number of output detection. Data types supported: Same as <code>output_boxes</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td>(Optional) <a class="el" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml" title="Detection Output layer info. ">DetectionPostProcessLayerInfo</a> information.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>Output contains all the detections. Of those, only the ones selected by the valid region are valid. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_n_e_detection_post_process_layer_8cpp_source.xhtml#l00042">42</a> of file <a class="el" href="_n_e_detection_post_process_layer_8cpp_source.xhtml">NEDetectionPostProcessLayer.cpp</a>.</p>

<p class="reference">References <a class="el" href="src_2runtime_2_tensor_allocator_8cpp_source.xhtml#l00132">TensorAllocator::allocate()</a>, <a class="el" href="src_2runtime_2_tensor_8cpp_source.xhtml#l00048">Tensor::allocator()</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00157">ARM_COMPUTE_ERROR_ON_NULLPTR</a>, <a class="el" href="_error_8h_source.xhtml#l00455">ARM_COMPUTE_ERROR_THROW_ON</a>, <a class="el" href="src_2common_2utils_2_log_8h.xhtml#a3ae35e22a098d589ff54ed85647ed87e">ARM_COMPUTE_LOG_PARAMS</a>, <a class="el" href="_c_p_p_detection_post_process_layer_8cpp_source.xhtml#l00218">CPPDetectionPostProcessLayer::configure()</a>, <a class="el" href="_n_e_dequantization_layer_8cpp_source.xhtml#l00046">NEDequantizationLayer::configure()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">ITensorInfo::data_type()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01119">DetectionPostProcessLayerInfo::detection_per_class()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01129">DetectionPostProcessLayerInfo::iou_threshold()</a>, <a class="el" href="arm__compute_2core_2_utils_8h_source.xhtml#l01030">arm_compute::is_data_type_quantized()</a>, <a class="el" href="_memory_group_8h_source.xhtml#l00079">MemoryGroup::manage()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01114">DetectionPostProcessLayerInfo::max_classes_per_detection()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01109">DetectionPostProcessLayerInfo::max_detections()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01124">DetectionPostProcessLayerInfo::nms_score_threshold()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01134">DetectionPostProcessLayerInfo::num_classes()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01156">DetectionPostProcessLayerInfo::scale_value_h()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01162">DetectionPostProcessLayerInfo::scale_value_w()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01150">DetectionPostProcessLayerInfo::scale_value_x()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01144">DetectionPostProcessLayerInfo::scale_value_y()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01139">DetectionPostProcessLayerInfo::use_regular_nms()</a>, and <a class="el" href="_n_e_detection_post_process_layer_8cpp_source.xhtml#l00074">NEDetectionPostProcessLayer::validate()</a>.</p>
<div class="fragment"><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;{</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a>(input_box_encoding, input_scores, input_anchors, output_boxes, output_classes, output_scores);</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <a class="code" href="_error_8h.xhtml#a938dcd406ce611ef5345ad2531cdb948">ARM_COMPUTE_ERROR_THROW_ON</a>(<a class="code" href="classarm__compute_1_1_n_e_detection_post_process_layer.xhtml#a08744faa3f68379fa82bcbd96bbec691">NEDetectionPostProcessLayer::validate</a>(input_box_encoding-&gt;info(), input_scores-&gt;info(), input_anchors-&gt;info(), output_boxes-&gt;info(), output_classes-&gt;info(),</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;                                                                     output_scores-&gt;info(),</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;                                                                     num_detection-&gt;info(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>));</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <a class="code" href="src_2common_2utils_2_log_8h.xhtml#a3ae35e22a098d589ff54ed85647ed87e">ARM_COMPUTE_LOG_PARAMS</a>(input_box_encoding, input_scores, input_anchors, output_boxes, output_classes, output_scores, num_detection, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keyword">const</span> ITensor                *input_scores_to_use = input_scores;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    DetectionPostProcessLayerInfo info_to_use         = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    _run_dequantize                                   = <a class="code" href="namespacearm__compute.xhtml#a0bee325b210f81bb89fe1f9e15badf9c">is_data_type_quantized</a>(input_box_encoding-&gt;info()-&gt;data_type());</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keywordflow">if</span>(_run_dequantize)</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    {</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_decoded_scores);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        _dequantize.<a class="code" href="classarm__compute_1_1_n_e_dequantization_layer.xhtml#a83a344e60eb7db895953a942abf16628">configure</a>(input_scores, &amp;_decoded_scores);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        input_scores_to_use = &amp;_decoded_scores;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="comment">// Create a new info struct to avoid dequantizing in the CPP layer</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        std::array&lt;float, 4&gt; scales_values{ <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.scale_value_y(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.scale_value_x(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.scale_value_h(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.scale_value_w() };</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        DetectionPostProcessLayerInfo info_quantized(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.max_detections(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.max_classes_per_detection(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.nms_score_threshold(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.iou_threshold(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.num_classes(),</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                                                     scales_values, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.use_regular_nms(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.detection_per_class(), <span class="keyword">false</span>);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        info_to_use = info_quantized;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    }</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    _detection_post_process.<a class="code" href="classarm__compute_1_1_c_p_p_detection_post_process_layer.xhtml#ab8136561c7a7d555b3a2c3bf0614986c">configure</a>(input_box_encoding, input_scores_to_use, input_anchors, output_boxes, output_classes, output_scores, num_detection, info_to_use);</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    _decoded_scores.<a class="code" href="classarm__compute_1_1_tensor.xhtml#adbd0cf83a8e1b335a9bf405a8e5019fa">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_a0bee325b210f81bb89fe1f9e15badf9c"><div class="ttname"><a href="namespacearm__compute.xhtml#a0bee325b210f81bb89fe1f9e15badf9c">arm_compute::is_data_type_quantized</a></div><div class="ttdeci">bool is_data_type_quantized(DataType dt)</div><div class="ttdoc">Check if a given data type is of quantized type. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l01030">Utils.h:1030</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_dequantization_layer_xhtml_a83a344e60eb7db895953a942abf16628"><div class="ttname"><a href="classarm__compute_1_1_n_e_dequantization_layer.xhtml#a83a344e60eb7db895953a942abf16628">arm_compute::NEDequantizationLayer::configure</a></div><div class="ttdeci">void configure(const ITensor *input, ITensor *output)</div><div class="ttdoc">Configure the kernel. </div><div class="ttdef"><b>Definition:</b> <a href="_n_e_dequantization_layer_8cpp_source.xhtml#l00046">NEDequantizationLayer.cpp:46</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a938dcd406ce611ef5345ad2531cdb948"><div class="ttname"><a href="_error_8h.xhtml#a938dcd406ce611ef5345ad2531cdb948">ARM_COMPUTE_ERROR_THROW_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_THROW_ON(status)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00455">Error.h:455</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_xhtml_adbd0cf83a8e1b335a9bf405a8e5019fa"><div class="ttname"><a href="classarm__compute_1_1_tensor.xhtml#adbd0cf83a8e1b335a9bf405a8e5019fa">arm_compute::Tensor::allocator</a></div><div class="ttdeci">TensorAllocator * allocator()</div><div class="ttdoc">Return a pointer to the tensor&amp;#39;s allocator. </div><div class="ttdef"><b>Definition:</b> <a href="src_2runtime_2_tensor_8cpp_source.xhtml#l00048">Tensor.cpp:48</a></div></div>
<div class="ttc" id="classarm__compute_1_1_memory_group_xhtml_a6fc0a49304c152c20a0f6df0634fb3cd"><div class="ttname"><a href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">arm_compute::MemoryGroup::manage</a></div><div class="ttdeci">void manage(IMemoryManageable *obj) override</div><div class="ttdoc">Sets a object to be managed by the given memory group. </div><div class="ttdef"><b>Definition:</b> <a href="_memory_group_8h_source.xhtml#l00079">MemoryGroup.h:79</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_allocator_xhtml_a6e509c2a177b0b29e9e2369535094dee"><div class="ttname"><a href="classarm__compute_1_1_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">arm_compute::TensorAllocator::allocate</a></div><div class="ttdeci">void allocate() override</div><div class="ttdoc">Allocate size specified by TensorInfo of CPU memory. </div><div class="ttdef"><b>Definition:</b> <a href="src_2runtime_2_tensor_allocator_8cpp_source.xhtml#l00132">TensorAllocator.cpp:132</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ac57b92957968088a392021cac1d2076b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a></div><div class="ttdeci">ScaleKernelInfo info(interpolation_policy, default_border_mode, PixelValue(), sampling_policy, false)</div></div>
<div class="ttc" id="classarm__compute_1_1_c_p_p_detection_post_process_layer_xhtml_ab8136561c7a7d555b3a2c3bf0614986c"><div class="ttname"><a href="classarm__compute_1_1_c_p_p_detection_post_process_layer.xhtml#ab8136561c7a7d555b3a2c3bf0614986c">arm_compute::CPPDetectionPostProcessLayer::configure</a></div><div class="ttdeci">void configure(const ITensor *input_box_encoding, const ITensor *input_score, const ITensor *input_anchors, ITensor *output_boxes, ITensor *output_classes, ITensor *output_scores, ITensor *num_detection, DetectionPostProcessLayerInfo info=DetectionPostProcessLayerInfo())</div><div class="ttdoc">Configure the detection output layer CPP function. </div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_detection_post_process_layer_8cpp_source.xhtml#l00218">CPPDetectionPostProcessLayer.cpp:218</a></div></div>
<div class="ttc" id="src_2common_2utils_2_log_8h_xhtml_a3ae35e22a098d589ff54ed85647ed87e"><div class="ttname"><a href="src_2common_2utils_2_log_8h.xhtml#a3ae35e22a098d589ff54ed85647ed87e">ARM_COMPUTE_LOG_PARAMS</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_PARAMS(...)</div></div>
<div class="ttc" id="arm__compute_2core_2_validate_8h_xhtml_a921b705e9e3e0fe928928447869e62a5"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_NULLPTR(...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00157">Validate.h:157</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_detection_post_process_layer_xhtml_a08744faa3f68379fa82bcbd96bbec691"><div class="ttname"><a href="classarm__compute_1_1_n_e_detection_post_process_layer.xhtml#a08744faa3f68379fa82bcbd96bbec691">arm_compute::NEDetectionPostProcessLayer::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input_box_encoding, const ITensorInfo *input_class_score, const ITensorInfo *input_anchors, ITensorInfo *output_boxes, ITensorInfo *output_classes, ITensorInfo *output_scores, ITensorInfo *num_detection, DetectionPostProcessLayerInfo info=DetectionPostProcessLayerInfo())</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of NEDetectionPostProcessLa...</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_detection_post_process_layer_8cpp_source.xhtml#l00074">NEDetectionPostProcessLayer.cpp:74</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a5bff7b85f40dd3ec3a76bcea0e17ba4c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5bff7b85f40dd3ec3a76bcea0e17ba4c">&#9670;&nbsp;</a></span>operator=()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_n_e_detection_post_process_layer.xhtml">NEDetectionPostProcessLayer</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_n_e_detection_post_process_layer.xhtml">NEDetectionPostProcessLayer</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prevent instances of this class from being copied (As this class contains pointers) </p>

</div>
</div>
<a id="ad1717410afd0be936c6213a63c8005fb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad1717410afd0be936c6213a63c8005fb">&#9670;&nbsp;</a></span>run()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void run </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Run the kernels contained in the function. </p>
<p>For CPU kernels:</p><ul>
<li>Multi-threading is used for the kernels which are parallelisable.</li>
<li>By default std::thread::hardware_concurrency() threads are used.</li>
</ul>
<dl class="section note"><dt>Note</dt><dd><a class="el" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#ae64eebaa07f4d2da6cc2ba538c3cb095">CPPScheduler::set_num_threads()</a> can be used to manually set the number of threads</dd></dl>
<p>For OpenCL kernels:</p><ul>
<li>All the kernels are enqueued on the queue associated with <a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml" title="Provides global access to a CL context and command queue. ">CLScheduler</a>.</li>
<li>The queue is then flushed.</li>
</ul>
<dl class="section note"><dt>Note</dt><dd>The function will not block until the kernels are executed. It is the user's responsibility to wait. </dd>
<dd>
Will call <a class="el" href="classarm__compute_1_1_i_function.xhtml#a820f7291c24155a2980512fae45aac26" title="Prepare the function for executing. ">prepare()</a> on first run if hasn't been done </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_function.xhtml#a18954417d3124a8095783ea13dc6d00b">IFunction</a>.</p>

<p class="definition">Definition at line <a class="el" href="_n_e_detection_post_process_layer_8cpp_source.xhtml#l00088">88</a> of file <a class="el" href="_n_e_detection_post_process_layer_8cpp_source.xhtml">NEDetectionPostProcessLayer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_n_e_dequantization_layer_8cpp_source.xhtml#l00059">NEDequantizationLayer::run()</a>, and <a class="el" href="_c_p_p_detection_post_process_layer_8cpp_source.xhtml#l00288">CPPDetectionPostProcessLayer::run()</a>.</p>
<div class="fragment"><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;{</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    MemoryGroupResourceScope scope_mg(_memory_group);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="comment">// Decode scores if necessary</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keywordflow">if</span>(_run_dequantize)</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    {</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        _dequantize.<a class="code" href="classarm__compute_1_1_n_e_dequantization_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    }</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    _detection_post_process.<a class="code" href="classarm__compute_1_1_c_p_p_detection_post_process_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_p_p_detection_post_process_layer_xhtml_ad1717410afd0be936c6213a63c8005fb"><div class="ttname"><a href="classarm__compute_1_1_c_p_p_detection_post_process_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">arm_compute::CPPDetectionPostProcessLayer::run</a></div><div class="ttdeci">void run() override</div><div class="ttdoc">Run the kernels contained in the function. </div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_detection_post_process_layer_8cpp_source.xhtml#l00288">CPPDetectionPostProcessLayer.cpp:288</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_dequantization_layer_xhtml_ad1717410afd0be936c6213a63c8005fb"><div class="ttname"><a href="classarm__compute_1_1_n_e_dequantization_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">arm_compute::NEDequantizationLayer::run</a></div><div class="ttdeci">void run() override</div><div class="ttdoc">Run the kernels contained in the function. </div><div class="ttdef"><b>Definition:</b> <a href="_n_e_dequantization_layer_8cpp_source.xhtml#l00059">NEDequantizationLayer.cpp:59</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a08744faa3f68379fa82bcbd96bbec691"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a08744faa3f68379fa82bcbd96bbec691">&#9670;&nbsp;</a></span>validate()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> validate </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>input_box_encoding</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>input_class_score</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>input_anchors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>output_boxes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>output_classes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>output_scores</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>num_detection</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml">DetectionPostProcessLayerInfo</a>&#160;</td>
          <td class="paramname"><em>info</em> = <code><a class="el" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml">DetectionPostProcessLayerInfo</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Static function to check if given info will lead to a valid configuration of <a class="el" href="classarm__compute_1_1_n_e_detection_post_process_layer.xhtml">NEDetectionPostProcessLayer</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input_box_encoding</td><td>The bounding box input tensor info. Data types supported: QASYMM8/QASYMM8_SIGNED/F32. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_class_score</td><td>The class prediction input tensor info. Data types supported: same as <code>input_box_encoding</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_anchors</td><td>The anchors input tensor info. Data types supported: same as <code>input_box_encoding</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output_boxes</td><td>The output tensor info. Data types supported: F32. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output_classes</td><td>The output tensor info. Data types supported: Same as <code>output_boxes</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output_scores</td><td>The output tensor info. Data types supported: Same as <code>output_boxes</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">num_detection</td><td>The number of output detection tensor info. Data types supported: Same as <code>output_boxes</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td>(Optional) <a class="el" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml" title="Detection Output layer info. ">DetectionPostProcessLayerInfo</a> information.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a status </dd></dl>

<p class="definition">Definition at line <a class="el" href="_n_e_detection_post_process_layer_8cpp_source.xhtml#l00074">74</a> of file <a class="el" href="_n_e_detection_post_process_layer_8cpp_source.xhtml">NEDetectionPostProcessLayer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00204">ARM_COMPUTE_RETURN_ON_ERROR</a>, <a class="el" href="classarm__compute_1_1misc_1_1_i_cloneable.xhtml#a4d10e5012a872e7f78f2b539b673049d">ICloneable&lt; T &gt;::clone()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">ITensorInfo::data_type()</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::F32</a>, <a class="el" href="arm__compute_2core_2_utils_8h_source.xhtml#l01030">arm_compute::is_data_type_quantized()</a>, <a class="el" href="_n_e_dequantization_layer_8cpp_source.xhtml#l00054">NEDequantizationLayer::validate()</a>, and <a class="el" href="_c_p_p_detection_post_process_layer_8cpp_source.xhtml#l00272">CPPDetectionPostProcessLayer::validate()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_n_e_detection_post_process_layer_8cpp_source.xhtml#l00042">NEDetectionPostProcessLayer::configure()</a>, and <a class="el" href="_n_e_o_n_2_detection_post_process_layer_8cpp_source.xhtml#l00186">arm_compute::test::validation::DATA_TEST_CASE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;{</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keywordtype">bool</span> run_dequantize = <a class="code" href="namespacearm__compute.xhtml#a0bee325b210f81bb89fe1f9e15badf9c">is_data_type_quantized</a>(input_box_encoding-&gt;data_type());</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordflow">if</span>(run_dequantize)</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    {</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        TensorInfo decoded_classes_info = input_scores-&gt;clone()-&gt;set_is_resizable(<span class="keyword">true</span>).set_data_type(<a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>);</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_n_e_dequantization_layer.xhtml#a968b23a6ef327fcfb5b99d58e3fbe883">NEDequantizationLayer::validate</a>(input_scores, &amp;decoded_classes_info));</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    }</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_p_p_detection_post_process_layer.xhtml#a08744faa3f68379fa82bcbd96bbec691">CPPDetectionPostProcessLayer::validate</a>(input_box_encoding, input_scores, input_anchors, output_boxes, output_classes, output_scores, num_detection, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>));</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keywordflow">return</span> Status{};</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_a0bee325b210f81bb89fe1f9e15badf9c"><div class="ttname"><a href="namespacearm__compute.xhtml#a0bee325b210f81bb89fe1f9e15badf9c">arm_compute::is_data_type_quantized</a></div><div class="ttdeci">bool is_data_type_quantized(DataType dt)</div><div class="ttdoc">Check if a given data type is of quantized type. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l01030">Utils.h:1030</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a8a1e1c105f0bdaf37db408c7cfcb77a4"><div class="ttname"><a href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ON_ERROR(status)</div><div class="ttdoc">Checks if a status contains an error and returns it. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00204">Error.h:204</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_p_p_detection_post_process_layer_xhtml_a08744faa3f68379fa82bcbd96bbec691"><div class="ttname"><a href="classarm__compute_1_1_c_p_p_detection_post_process_layer.xhtml#a08744faa3f68379fa82bcbd96bbec691">arm_compute::CPPDetectionPostProcessLayer::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input_box_encoding, const ITensorInfo *input_class_score, const ITensorInfo *input_anchors, ITensorInfo *output_boxes, ITensorInfo *output_classes, ITensorInfo *output_scores, ITensorInfo *num_detection, DetectionPostProcessLayerInfo info=DetectionPostProcessLayerInfo())</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CPPDetectionPostProcessL...</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_detection_post_process_layer_8cpp_source.xhtml#l00272">CPPDetectionPostProcessLayer.cpp:272</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::Format::F32</a></div><div class="ttdoc">1 channel, 1 F32 per channel </div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_dequantization_layer_xhtml_a968b23a6ef327fcfb5b99d58e3fbe883"><div class="ttname"><a href="classarm__compute_1_1_n_e_dequantization_layer.xhtml#a968b23a6ef327fcfb5b99d58e3fbe883">arm_compute::NEDequantizationLayer::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input, const ITensorInfo *output)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of NEDequantizationLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_n_e_dequantization_layer_8cpp_source.xhtml#l00054">NEDequantizationLayer.cpp:54</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ac57b92957968088a392021cac1d2076b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a></div><div class="ttdeci">ScaleKernelInfo info(interpolation_policy, default_border_mode, PixelValue(), sampling_policy, false)</div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>arm_compute/runtime/NEON/functions/<a class="el" href="_n_e_detection_post_process_layer_8h_source.xhtml">NEDetectionPostProcessLayer.h</a></li>
<li>src/runtime/NEON/functions/<a class="el" href="_n_e_detection_post_process_layer_8cpp_source.xhtml">NEDetectionPostProcessLayer.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1_n_e_detection_post_process_layer.xhtml">NEDetectionPostProcessLayer</a></li>
    <li class="footer">Generated on Thu Aug 18 2022 12:57:47 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
