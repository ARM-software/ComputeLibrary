<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/NEON/kernels/NECropKernel.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_n_e_crop_kernel_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">NECropKernel.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_n_e_crop_kernel_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2019-2022 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_n_e_crop_kernel_8h.xhtml">src/core/NEON/kernels/NECropKernel.h</a>&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_tensor_8h.xhtml">arm_compute/core/ITensor.h</a>&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_tensor_info_8h.xhtml">arm_compute/core/TensorInfo.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_types_8h.xhtml">arm_compute/core/Types.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_window_8h.xhtml">arm_compute/core/Window.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="tensor__transform_8h.xhtml">arm_compute/core/utils/helpers/tensor_transform.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_shape_calculator_8h.xhtml">arm_compute/core/utils/misc/ShapeCalculator.h</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="src_2core_2_c_p_p_2_validate_8h.xhtml">src/core/CPP/Validate.h</a>&quot;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="wrapper_8h.xhtml">src/core/NEON/wrapper/wrapper.h</a>&quot;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="src_2core_2common_2_registrars_8h.xhtml">src/core/common/Registrars.h</a>&quot;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_auto_configuration_8h.xhtml">src/core/helpers/AutoConfiguration.h</a>&quot;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_window_helpers_8h.xhtml">src/core/helpers/WindowHelpers.h</a>&quot;</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="bit__ops_8h.xhtml">src/core/utils/helpers/bit_ops.h</a>&quot;</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="cpu_2kernels_2crop_2list_8h.xhtml">src/cpu/kernels/crop/list.h</a>&quot;</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="keyword">namespace</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;{</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keyword">struct </span>CropSelectorData</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;{</div><div class="line"><a name="l00046"></a><span class="lineno"><a class="line" href="_n_e_crop_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">   46</a></span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="code" href="_n_e_crop_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a>;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;};</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="keyword">using</span> CropSelectorPtr = <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">std::add_pointer&lt;bool(const CropSelectorData &amp;data)&gt;::type</a>;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="keyword">using</span> CropUKernelPtr  = <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">std::add_pointer&lt;void(const ITensor *, const ITensor *, float *, Coordinates, int32_t, int32_t, int32_t, bool, bool)&gt;::type</a>;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="keyword">struct </span>CropUKernel</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;{</div><div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="_n_e_crop_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">   54</a></span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span>           *<a class="code" href="_n_e_crop_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a>;</div><div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="_n_e_crop_kernel_8cpp.xhtml#a835f305f2239f56f62ecec399b063df3">   55</a></span>&#160;    <span class="keyword">const</span> CropSelectorPtr <a class="code" href="_n_e_crop_kernel_8cpp.xhtml#a835f305f2239f56f62ecec399b063df3">is_selected</a>;</div><div class="line"><a name="l00056"></a><span class="lineno"><a class="line" href="_n_e_crop_kernel_8cpp.xhtml#a5add015cf7d654467e698c7b3511dc32">   56</a></span>&#160;    CropUKernelPtr        <a class="code" href="_n_e_crop_kernel_8cpp.xhtml#a5add015cf7d654467e698c7b3511dc32">ukernel</a>;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;};</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="keyword">static</span> <span class="keyword">const</span> CropUKernel available_kernels[] =</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;{</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    {</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="stringliteral">&quot;fp16_neon_crop&quot;</span>,</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        [](<span class="keyword">const</span> CropSelectorData &amp; data) { <span class="keywordflow">return</span> data.dt == <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">DataType::F16</a>; },</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <a class="code" href="src_2core_2common_2_registrars_8h.xhtml#a26fa1b6549066348f60eabe7c9bb53df">REGISTER_FP16_NEON</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a3f729f1847218335d50fca5b1f2bcf0d">arm_compute::cpu::fp16_in_bounds_crop_window</a>)</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    },</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    {</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="stringliteral">&quot;f32_neon_crop&quot;</span>,</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        [](<span class="keyword">const</span> CropSelectorData &amp; data) { <span class="keywordflow">return</span> data.dt == <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>; },</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <a class="code" href="src_2core_2common_2_registrars_8h.xhtml#a682bd642e8e78633d42922f0158858c1">REGISTER_FP32_NEON</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a3aa8003f658c620589d1fb3a446ac582">arm_compute::cpu::fp32_in_bounds_crop_window</a>)</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    },</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    {</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <span class="stringliteral">&quot;u8_neon_crop&quot;</span>,</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        [](<span class="keyword">const</span> CropSelectorData &amp; data) { <span class="keywordflow">return</span> data.dt == <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>; },</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <a class="code" href="src_2core_2common_2_registrars_8h.xhtml#a1041dbd279355812f5c04a21ea0b0a31">REGISTER_INTEGER_NEON</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a86c41bd6f17806079552ebacf486f743">arm_compute::cpu::u8_in_bounds_crop_window</a>)</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    },</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    {</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="stringliteral">&quot;u16_neon_crop&quot;</span>,</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        [](<span class="keyword">const</span> CropSelectorData &amp; data) { <span class="keywordflow">return</span> data.dt == <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">DataType::U16</a>; },</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <a class="code" href="src_2core_2common_2_registrars_8h.xhtml#a1041dbd279355812f5c04a21ea0b0a31">REGISTER_INTEGER_NEON</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#ae4bce17f1ab84502a7264aa6ee9fe8b7">arm_compute::cpu::u16_in_bounds_crop_window</a>)</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    },</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    {</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <span class="stringliteral">&quot;u32_neon_crop&quot;</span>,</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        [](<span class="keyword">const</span> CropSelectorData &amp; data) { <span class="keywordflow">return</span> data.dt == <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">DataType::U32</a>; },</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        <a class="code" href="src_2core_2common_2_registrars_8h.xhtml#a1041dbd279355812f5c04a21ea0b0a31">REGISTER_INTEGER_NEON</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a8ac2234643490e0d1d52af361a81ccfe">arm_compute::cpu::u32_in_bounds_crop_window</a>)</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    },</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    {</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <span class="stringliteral">&quot;s8_neon_crop&quot;</span>,</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        [](<span class="keyword">const</span> CropSelectorData &amp; data) { <span class="keywordflow">return</span> data.dt == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">DataType::S8</a>; },</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <a class="code" href="src_2core_2common_2_registrars_8h.xhtml#a1041dbd279355812f5c04a21ea0b0a31">REGISTER_INTEGER_NEON</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#afce91e14811fc7ab82c764efb12c0443">arm_compute::cpu::s8_in_bounds_crop_window</a>)</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    },</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    {</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="stringliteral">&quot;s16_neon_crop&quot;</span>,</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        [](<span class="keyword">const</span> CropSelectorData &amp; data) { <span class="keywordflow">return</span> data.dt == <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>; },</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <a class="code" href="src_2core_2common_2_registrars_8h.xhtml#a1041dbd279355812f5c04a21ea0b0a31">REGISTER_INTEGER_NEON</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#aeda05854c52c61e264016d08bb812703">arm_compute::cpu::s16_in_bounds_crop_window</a>)</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    },</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    {</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="stringliteral">&quot;s32_neon_crop&quot;</span>,</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        [](<span class="keyword">const</span> CropSelectorData &amp; data) { <span class="keywordflow">return</span> data.dt == <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>; },</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        <a class="code" href="src_2core_2common_2_registrars_8h.xhtml#a1041dbd279355812f5c04a21ea0b0a31">REGISTER_INTEGER_NEON</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a7f4b44c08f32f60bee79357a8db1ab34">arm_compute::cpu::s32_in_bounds_crop_window</a>)</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    },</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;};</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment">/** Micro-kernel selector</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment"> * @param[in] data Selection data passed to help pick the appropriate micro-kernel</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment"> * @return A matching micro-kernel else nullptr</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="keyword">const</span> CropUKernel *get_implementation(<span class="keyword">const</span> CropSelectorData &amp;data)</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;{</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;uk : available_kernels)</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    {</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="keywordflow">if</span>(uk.is_selected(data))</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        {</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            <span class="keywordflow">return</span> &amp;uk;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        }</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    }</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;}</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> out_of_bounds_crop_window(<span class="keyword">const</span> ITensor *output, <span class="keywordtype">float</span> *output_ptr, <span class="keywordtype">float</span> extrapolation_value,</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                                      int32_t window_step_x, int32_t output_width_start, int32_t output_width_limit)</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;{</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keyword">auto</span>    in               = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(extrapolation_value, wrapper::traits::vector_128_tag());</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    int32_t x                = 0;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    int32_t limit            = (output_width_limit - output_width_start) * static_cast&lt;int32_t&gt;(output-&gt;info()-&gt;dimension(0));</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keywordtype">float</span> *output_start_ptr = output_ptr + output_width_start * output-&gt;info()-&gt;dimension(0);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keywordflow">for</span>(; x &lt;= limit - window_step_x; x += window_step_x)</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    {</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_start_ptr + x, in);</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    }</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keywordflow">for</span>(; x &lt; limit; ++x)</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    {</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        *(output_start_ptr + x) = extrapolation_value;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    }</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;}</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> execute_window(<span class="keyword">const</span> ITensor *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> ITensor *output, Coordinates input_offset, <span class="keywordtype">float</span> extrapolation_value,</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                           <span class="keyword">const</span> std::array&lt;uint32_t, 2&gt; &amp;rows_out_of_bounds, <span class="keyword">const</span> std::array&lt;uint32_t, 2&gt; &amp;cols_out_of_bounds, <a class="code" href="classarm__compute_1_1_n_e_crop_kernel.xhtml#a47ccc8bc4a6b94f0d56dcfc9c00c7d55">NECropKernel::InBoundsCropFunction</a> *in_bounds_crop_function,</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                           <span class="keywordtype">bool</span> is_height_flipped, <span class="keywordtype">bool</span> has_cols_in_bounds, <span class="keywordtype">bool</span> has_cols_out_of_bounds_before, <span class="keywordtype">bool</span> has_cols_out_of_bounds_after, <span class="keywordtype">bool</span> input_has_single_channel, <span class="keywordtype">bool</span> is_width_flipped)</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;{</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="comment">// Output is always float.</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> window_step_x = 16 / <span class="keyword">sizeof</span>(float);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keyword">auto</span>     *output_ptr    = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(output-&gt;buffer());</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="comment">//  Output window:</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="comment">//  --------------------------------</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="comment">//  |          Out of bounds       |</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="comment">//  |          rows before         |</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="comment">//  |------------------------------|</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="comment">//  | Out of | In         | Out of |</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="comment">//  | bounds | bounds     | bounds |</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="comment">//  | cols   | elements   | cols   |</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="comment">//  | before | copied     | after  |</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="comment">//  |        | from input |        |</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="comment">//  --------------------------------</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="comment">//  |        Out of bounds         |</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="comment">//  |        rows after            |</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="comment">//  |------------------------------|</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="comment">// Fill all output rows that have no elements that are within the input bounds with the extrapolation value.</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="comment">// First for the rows before the in bounds rows.</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    out_of_bounds_crop_window(output, output_ptr, extrapolation_value, window_step_x, 0, rows_out_of_bounds[0] * output-&gt;info()-&gt;dimension(1));</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    output_ptr += rows_out_of_bounds[0] * output-&gt;info()-&gt;dimension(1) * output-&gt;info()-&gt;dimension(0);</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="comment">// Iterate through each row that has any elements within the input bounds.</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keywordflow">for</span>(uint32_t row = rows_out_of_bounds[0]; <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(row) &lt; static_cast&lt;int32_t&gt;(output-&gt;info()-&gt;dimension(2) - rows_out_of_bounds[1]);</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        ++row, is_height_flipped ? --input_offset[2] : ++input_offset[2])</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    {</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        <span class="comment">// Fill all elements in the row that are out of bounds with the extrapolation value.</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="comment">// First for the elements before the in bounds elements.</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <span class="keywordflow">if</span>(has_cols_out_of_bounds_before)</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        {</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            out_of_bounds_crop_window(output, output_ptr, extrapolation_value, window_step_x, 0, cols_out_of_bounds[0]);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        }</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        <span class="comment">// Copy all elements within the input bounds from the input tensor.</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        <span class="keywordflow">if</span>(has_cols_in_bounds)</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        {</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            (*in_bounds_crop_function)(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, output_ptr, input_offset, window_step_x, cols_out_of_bounds[0],</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                                       output-&gt;info()-&gt;dimension(1) - cols_out_of_bounds[1], input_has_single_channel, is_width_flipped);</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        }</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        <span class="comment">// Fill all elements after the in bounds elements with the extrapolation value.</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        <span class="keywordflow">if</span>(has_cols_out_of_bounds_after)</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        {</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;            out_of_bounds_crop_window(output, output_ptr, extrapolation_value, window_step_x, output-&gt;info()-&gt;dimension(1) - cols_out_of_bounds[1], output-&gt;info()-&gt;dimension(1));</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        }</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        output_ptr += output-&gt;info()-&gt;dimension(1) * output-&gt;info()-&gt;dimension(0);</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    }</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="comment">// Fill all rows after the in bounds elements with the extrapolation value.</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    out_of_bounds_crop_window(output, output_ptr, extrapolation_value, window_step_x, 0, rows_out_of_bounds[1] * output-&gt;info()-&gt;dimension(1));</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;}</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;} <span class="comment">// namespace</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_crop_kernel.xhtml#ad8887523c29f0065e3557ca800c4b042">  192</a></span>&#160;<a class="code" href="classarm__compute_1_1_n_e_crop_kernel.xhtml#ad8887523c29f0065e3557ca800c4b042">NECropKernel::NECropKernel</a>()</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    : _input(nullptr), _crop_boxes(nullptr), _box_ind(nullptr), _output(nullptr), _start(), _end(), _crop_box_ind(0), _extrapolation_value(0), _rows_out_of_bounds(), _cols_out_of_bounds()</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;{</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;}</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_crop_kernel.xhtml#af4bfea161972c091109e4bd1c8245f2c">  197</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_n_e_crop_kernel.xhtml#af4bfea161972c091109e4bd1c8245f2c">NECropKernel::configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *crop_boxes, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *box_ind, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, uint32_t crop_box_ind, <span class="keywordtype">float</span> extrapolation_value)</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;{</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a>(input, output);</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <a class="code" href="_error_8h.xhtml#a938dcd406ce611ef5345ad2531cdb948">ARM_COMPUTE_ERROR_THROW_ON</a>(<a class="code" href="classarm__compute_1_1_n_e_crop_kernel.xhtml#a0b1369db011f9d5603d2f6ab4bab8548">validate</a>(input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), crop_boxes-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), box_ind-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), crop_box_ind, extrapolation_value));</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    _input               = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    _crop_boxes          = crop_boxes;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    _box_ind             = box_ind;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    _output              = output;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    _crop_box_ind        = crop_box_ind;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    _extrapolation_value = extrapolation_value;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;}</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div><div class="line"><a name="l00210"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_crop_kernel.xhtml#a0b1369db011f9d5603d2f6ab4bab8548">  210</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="classarm__compute_1_1_n_e_crop_kernel.xhtml#a0b1369db011f9d5603d2f6ab4bab8548">NECropKernel::validate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *crop_boxes, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *box_ind, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output, uint32_t crop_box_ind, <span class="keywordtype">float</span> extrapolation_value)</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;{</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(extrapolation_value);</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> *uk = get_implementation(CropSelectorData{ input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>() });</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(uk == <span class="keyword">nullptr</span> || uk-&gt;ukernel == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <a class="code" href="src_2core_2_c_p_p_2_validate_8h.xhtml#ad2633f3560322e1f8d926949dec1b730">ARM_COMPUTE_RETURN_ERROR_ON_CPU_F16_UNSUPPORTED</a>(input);</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(input, 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">DataType::U16</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">DataType::F16</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">DataType::U32</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>);</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a7e906bfc9e333e3f967d8ee9353ce001">ARM_COMPUTE_RETURN_ERROR_ON_DATA_LAYOUT_NOT_IN</a>(input, <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>);</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">num_dimensions</a>() &gt; 4);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(crop_boxes-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>()[0] != 4);</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(crop_boxes-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>()[1] != box_ind-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>()[0]);</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(crop_boxes-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>()[1] &lt;= crop_box_ind);</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(box_ind-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>()[0] &lt;= crop_box_ind);</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="keywordflow">if</span>(output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a18064e0011c3869d884653e9e7c47b66">total_size</a>() &gt; 0)</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    {</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#aef783de4ec01874dbec6054a5868aea2">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_NOT_IN</a>(output, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>);</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#abdb9168800c70e5e2c4c020a3b905738">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_LAYOUT</a>(input, output);</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a1f4e725b8e1ea36b30e09dc08ae6961d">num_dimensions</a>() != 3);</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#ac394d6570ab3325810a3532d39091a52">has_padding</a>());</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    }</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a>{};</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;}</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_crop_kernel.xhtml#a0da66c75715e5f334da280799a55c923">  234</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_n_e_crop_kernel.xhtml#a0da66c75715e5f334da280799a55c923">NECropKernel::configure_output_shape</a>()</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;{</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <span class="comment">// _crop_box_ind is used to index _crop_boxes and retrieve the appropriate crop box.</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="comment">// The crop box is specified by normalized coordinates [y0, x0, y1, x1].</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> x0 = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(_crop_boxes-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#adbd73147d41e8a640bc299d12613c31e">ptr_to_element</a>(<a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>(1, _crop_box_ind)));</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> y0 = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(_crop_boxes-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#adbd73147d41e8a640bc299d12613c31e">ptr_to_element</a>(<a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>(0, _crop_box_ind)));</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> x1 = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(_crop_boxes-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#adbd73147d41e8a640bc299d12613c31e">ptr_to_element</a>(<a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>(3, _crop_box_ind)));</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> y1 = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(_crop_boxes-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#adbd73147d41e8a640bc299d12613c31e">ptr_to_element</a>(<a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>(2, _crop_box_ind)));</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="comment">// The normalized coordiantes are scaled to retrieve the floating point image coordinates which are rounded to integers.</span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    _start = <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>(std::floor(x0 * (_input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>()[1] - 1) + 0.5f),</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                         std::floor(y0 * (_input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>()[2] - 1) + 0.5f));</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    _end = <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>(std::floor(x1 * (_input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>()[1] - 1) + 0.5f),</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                       std::floor(y1 * (_input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>()[2] - 1) + 0.5f));</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> out_shape(_input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>()[0], abs(_end[0] - _start[0]) + 1, abs(_end[1] - _start[1]) + 1);</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    _output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a12a4f1190952613e36b44846962e26bb">set_tensor_shape</a>(out_shape);</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keywordtype">bool</span> is_width_flipped  = _end[0] &lt; _start[0];</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keywordtype">bool</span> is_height_flipped = _end[1] &lt; _start[1];</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="keywordflow">if</span>(is_height_flipped)</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    {</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        _rows_out_of_bounds[0] = _start[1] &gt;= <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(_input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(2)) ? std::min(static_cast&lt;uint32_t&gt;(_start[1] - _input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(2) + 1),</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                                                                                                            static_cast&lt;uint32_t&gt;(_output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(2))) :</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                                 0;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        _rows_out_of_bounds[1] = _end[1] &lt; 0 ? std::min(static_cast&lt;uint32_t&gt;(-_end[1]),</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                                                        static_cast&lt;uint32_t&gt;(_output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(2))) :</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                                 0;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    }</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    {</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        _rows_out_of_bounds[0] = _start[1] &lt; 0 ? std::min(static_cast&lt;uint32_t&gt;(-_start[1]),</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                                                          static_cast&lt;uint32_t&gt;(_output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(2))) :</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                                 0;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        _rows_out_of_bounds[1] = _end[1] &gt;= <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(_input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(2)) ? std::min(static_cast&lt;uint32_t&gt;(_end[1] - _input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(2) + 1),</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                                                                                                          static_cast&lt;uint32_t&gt;(_output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(2))) :</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                                 0;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    }</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <span class="keywordflow">if</span>(is_width_flipped)</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    {</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        _cols_out_of_bounds[0] = _start[0] &gt;= <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(_input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(1)) ? std::min(static_cast&lt;uint32_t&gt;(_start[0] - _input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(1) + 1),</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                                                                                                            static_cast&lt;uint32_t&gt;(_output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(1))) :</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                                 0;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        _cols_out_of_bounds[1] = _end[0] &lt; 0 ? std::min(static_cast&lt;uint32_t&gt;(-_end[0]),</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                                                        static_cast&lt;uint32_t&gt;(_output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(1))) :</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                                 0;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    }</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    {</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        _cols_out_of_bounds[0] = _start[0] &lt; 0 ? std::min(static_cast&lt;uint32_t&gt;(-_start[0]),</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                                                          static_cast&lt;uint32_t&gt;(_output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(1))) :</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                                 0;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        _cols_out_of_bounds[1] = _end[0] &gt;= <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(_input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(1)) ? std::min(static_cast&lt;uint32_t&gt;(_end[0] - _input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(1) + 1),</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                                                                                                          static_cast&lt;uint32_t&gt;(_output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(1))) :</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                                 0;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    }</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    INEKernel::configure(<a class="code" href="namespacearm__compute.xhtml#aa84c2eae36ca4b68fa36c226df6f94e7">calculate_max_window</a>(*_output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()));</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;}</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;</div><div class="line"><a name="l00292"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_n_e_crop_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">  292</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_n_e_crop_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">NECropKernel::run</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>)</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;{</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(window, info);</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a1b35b0d258183cf9ef36adf684d0b88c">ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL</a>(<span class="keyword">this</span>);</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a6eb9ce82815fe429250189da7592ba75">ARM_COMPUTE_ERROR_ON_INVALID_SUBWINDOW</a>(<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">INEKernel::window</a>(), window);</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#ac394d6570ab3325810a3532d39091a52">has_padding</a>());</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#ac394d6570ab3325810a3532d39091a52">has_padding</a>());</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> *uk = get_implementation(CropSelectorData{ _input-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>() });</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    uint32_t    batch_index = *(<span class="keyword">reinterpret_cast&lt;</span>int32_t *<span class="keyword">&gt;</span>(_box_ind-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#adbd73147d41e8a640bc299d12613c31e">ptr_to_element</a>(<a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>(_crop_box_ind))));</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> input_offset(0, _end[0] &lt; _start[0] ? _start[0] - _cols_out_of_bounds[0] : _start[0] + _cols_out_of_bounds[0],</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                             _end[1] &lt; _start[1] ? _start[1] - _rows_out_of_bounds[0] : _start[1] + _rows_out_of_bounds[0], batch_index);</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    execute_window(_input, _output, input_offset, _extrapolation_value, _rows_out_of_bounds, _cols_out_of_bounds, uk-&gt;ukernel, _end[1] &lt; _start[1],</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                   _cols_out_of_bounds[0] + _cols_out_of_bounds[1] &lt; _output-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(1), _cols_out_of_bounds[0] &gt; 0, _cols_out_of_bounds[1] &gt; 0,</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                   _start[0] &lt;= _end[0], _end[0] &lt; _start[0]);</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;}</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a1f4e725b8e1ea36b30e09dc08ae6961d"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a1f4e725b8e1ea36b30e09dc08ae6961d">arm_compute::ITensorInfo::num_dimensions</a></div><div class="ttdeci">virtual size_t num_dimensions() const =0</div><div class="ttdoc">The number of dimensions of the tensor (rank) </div></div>
<div class="ttc" id="_n_e_crop_kernel_8cpp_xhtml_aa36901a4911e511f25f42e191df3526d"><div class="ttname"><a href="_n_e_crop_kernel_8cpp.xhtml#aa36901a4911e511f25f42e191df3526d">dt</a></div><div class="ttdeci">DataType dt</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_crop_kernel_8cpp_source.xhtml#l00046">NECropKernel.cpp:46</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_aa84c2eae36ca4b68fa36c226df6f94e7"><div class="ttname"><a href="namespacearm__compute.xhtml#aa84c2eae36ca4b68fa36c226df6f94e7">arm_compute::calculate_max_window</a></div><div class="ttdeci">Window calculate_max_window(const ValidRegion &amp;valid_region, const Steps &amp;steps, bool skip_border, BorderSize border_size)</div><div class="ttdef"><b>Definition:</b> <a href="_window_helpers_8cpp_source.xhtml#l00028">WindowHelpers.cpp:28</a></div></div>
<div class="ttc" id="_window_helpers_8h_xhtml"><div class="ttname"><a href="_window_helpers_8h.xhtml">WindowHelpers.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_kernel_xhtml_ad34a46f53686c12a5c5e717cc9617fb6"><div class="ttname"><a href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">arm_compute::IKernel::window</a></div><div class="ttdeci">const Window &amp; window() const</div><div class="ttdoc">The maximum window the kernel can be executed on. </div><div class="ttdef"><b>Definition:</b> <a href="_i_kernel_8cpp_source.xhtml#l00028">IKernel.cpp:28</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml_adbd73147d41e8a640bc299d12613c31e"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml#adbd73147d41e8a640bc299d12613c31e">arm_compute::ITensor::ptr_to_element</a></div><div class="ttdeci">uint8_t * ptr_to_element(const Coordinates &amp;id) const</div><div class="ttdoc">Return a pointer to the element at the passed coordinates. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_8h_source.xhtml#l00063">ITensor.h:63</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml">arm_compute::TensorShape</a></div><div class="ttdoc">Shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00039">TensorShape.h:39</a></div></div>
<div class="ttc" id="cpu_2kernels_2crop_2list_8h_xhtml"><div class="ttname"><a href="cpu_2kernels_2crop_2list_8h.xhtml">list.h</a></div></div>
<div class="ttc" id="arm__compute_2core_2_validate_8h_xhtml_a7e906bfc9e333e3f967d8ee9353ce001"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a7e906bfc9e333e3f967d8ee9353ce001">ARM_COMPUTE_RETURN_ERROR_ON_DATA_LAYOUT_NOT_IN</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_DATA_LAYOUT_NOT_IN(t,...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00742">Validate.h:742</a></div></div>
<div class="ttc" id="_i_tensor_8h_xhtml"><div class="ttname"><a href="_i_tensor_8h.xhtml">ITensor.h</a></div></div>
<div class="ttc" id="arm__compute_2core_2_validate_8h_xhtml_abdb9168800c70e5e2c4c020a3b905738"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#abdb9168800c70e5e2c4c020a3b905738">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_LAYOUT</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_LAYOUT(...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00490">Validate.h:490</a></div></div>
<div class="ttc" id="src_2core_2_c_p_p_2_validate_8h_xhtml_ad2633f3560322e1f8d926949dec1b730"><div class="ttname"><a href="src_2core_2_c_p_p_2_validate_8h.xhtml#ad2633f3560322e1f8d926949dec1b730">ARM_COMPUTE_RETURN_ERROR_ON_CPU_F16_UNSUPPORTED</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_CPU_F16_UNSUPPORTED(tensor)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_p_p_2_validate_8h_source.xhtml#l00115">Validate.h:115</a></div></div>
<div class="ttc" id="src_2core_2common_2_registrars_8h_xhtml_a26fa1b6549066348f60eabe7c9bb53df"><div class="ttname"><a href="src_2core_2common_2_registrars_8h.xhtml#a26fa1b6549066348f60eabe7c9bb53df">REGISTER_FP16_NEON</a></div><div class="ttdeci">#define REGISTER_FP16_NEON(func_name)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2common_2_registrars_8h_source.xhtml#l00048">Registrars.h:48</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a178f0d3d87f959e00a743328d95359d2"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">arm_compute::ITensorInfo::dimension</a></div><div class="ttdeci">virtual size_t dimension(size_t index) const =0</div><div class="ttdoc">Return the size of the requested dimension. </div></div>
<div class="ttc" id="_n_e_crop_kernel_8cpp_xhtml_a8f8f80d37794cde9472343e4487ba3eb"><div class="ttname"><a href="_n_e_crop_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a></div><div class="ttdeci">const char * name</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_crop_kernel_8cpp_source.xhtml#l00054">NECropKernel.cpp:54</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_crop_kernel_xhtml_a47ccc8bc4a6b94f0d56dcfc9c00c7d55"><div class="ttname"><a href="classarm__compute_1_1_n_e_crop_kernel.xhtml#a47ccc8bc4a6b94f0d56dcfc9c00c7d55">arm_compute::NECropKernel::InBoundsCropFunction</a></div><div class="ttdeci">void(const ITensor *, const ITensor *, float *, Coordinates, int32_t, int32_t, int32_t, bool, bool) InBoundsCropFunction</div><div class="ttdoc">Function to use for in bounds crop for the particular tensor types passed to configure() ...</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_crop_kernel_8h_source.xhtml#l00094">NECropKernel.h:94</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a12a4f1190952613e36b44846962e26bb"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a12a4f1190952613e36b44846962e26bb">arm_compute::ITensorInfo::set_tensor_shape</a></div><div class="ttdeci">virtual ITensorInfo &amp; set_tensor_shape(const TensorShape &amp;shape)=0</div><div class="ttdoc">Set the shape of an already initialized tensor. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::Format::U8</a></div><div class="ttdoc">1 channel, 1 U8 per channel </div></div>
<div class="ttc" id="src_2core_2common_2_registrars_8h_xhtml_a682bd642e8e78633d42922f0158858c1"><div class="ttname"><a href="src_2core_2common_2_registrars_8h.xhtml#a682bd642e8e78633d42922f0158858c1">REGISTER_FP32_NEON</a></div><div class="ttdeci">#define REGISTER_FP32_NEON(func_name)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2common_2_registrars_8h_source.xhtml#l00074">Registrars.h:74</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a7cfb31af63202568efef5214acfbf3ba"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">arm_compute::ITensorInfo::data_type</a></div><div class="ttdeci">virtual DataType data_type() const =0</div><div class="ttdoc">Data type used for each element of the tensor. </div></div>
<div class="ttc" id="_window_8h_xhtml"><div class="ttname"><a href="_window_8h.xhtml">Window.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::Format::F32</a></div><div class="ttdoc">1 channel, 1 F32 per channel </div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor&amp;#39;s metadata. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00040">ITensorInfo.h:40</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a938dcd406ce611ef5345ad2531cdb948"><div class="ttname"><a href="_error_8h.xhtml#a938dcd406ce611ef5345ad2531cdb948">ARM_COMPUTE_ERROR_THROW_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_THROW_ON(status)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00455">Error.h:455</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">arm_compute::Format::U16</a></div><div class="ttdoc">1 channel, 1 U16 per channel </div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a3f729f1847218335d50fca5b1f2bcf0d"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a3f729f1847218335d50fca5b1f2bcf0d">arm_compute::cpu::fp16_in_bounds_crop_window</a></div><div class="ttdeci">void fp16_in_bounds_crop_window(const ITensor *input, const ITensor *output, float *output_ptr, Coordinates input_offset, int32_t window_step_x, int32_t output_width_start, int32_t output_width_limit, bool input_has_single_channel, bool is_width_flipped)</div></div>
<div class="ttc" id="classarm__compute_1_1_status_xhtml"><div class="ttname"><a href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a></div><div class="ttdoc">Status class. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00052">Error.h:52</a></div></div>
<div class="ttc" id="_tensor_info_8h_xhtml"><div class="ttname"><a href="_tensor_info_8h.xhtml">TensorInfo.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_crop_kernel_xhtml_af4bfea161972c091109e4bd1c8245f2c"><div class="ttname"><a href="classarm__compute_1_1_n_e_crop_kernel.xhtml#af4bfea161972c091109e4bd1c8245f2c">arm_compute::NECropKernel::configure</a></div><div class="ttdeci">void configure(const ITensor *input, const ITensor *crop_boxes, const ITensor *box_ind, ITensor *output, uint32_t crop_box_ind=0, float extrapolation_value=0)</div><div class="ttdoc">Configure kernel. </div><div class="ttdef"><b>Definition:</b> <a href="_n_e_crop_kernel_8cpp_source.xhtml#l00197">NECropKernel.cpp:197</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a206d6e247e0957ac3dee45d27756fc25"><div class="ttname"><a href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true, an error is returned. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00296">Error.h:296</a></div></div>
<div class="ttc" id="gemm__interleaved_8hpp_xhtml_a6fbca3dca9ecb372332fc525529cc086"><div class="ttname"><a href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></div><div class="ttdeci">decltype(strategy::transforms) typedef type</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00259">gemm_interleaved.hpp:259</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml">arm_compute::ITensor</a></div><div class="ttdoc">Interface for CPU tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_8h_source.xhtml#l00036">ITensor.h:36</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2022 Arm Limited. </div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">arm_compute::Format::F16</a></div><div class="ttdoc">1 channel, 1 F16 per channel </div></div>
<div class="ttc" id="src_2core_2common_2_registrars_8h_xhtml_a1041dbd279355812f5c04a21ea0b0a31"><div class="ttname"><a href="src_2core_2common_2_registrars_8h.xhtml#a1041dbd279355812f5c04a21ea0b0a31">REGISTER_INTEGER_NEON</a></div><div class="ttdeci">#define REGISTER_INTEGER_NEON(func_name)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2common_2_registrars_8h_source.xhtml#l00165">Registrars.h:165</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">LSTMLayerQuantized.cpp:486</a></div></div>
<div class="ttc" id="_n_e_crop_kernel_8cpp_xhtml_a835f305f2239f56f62ecec399b063df3"><div class="ttname"><a href="_n_e_crop_kernel_8cpp.xhtml#a835f305f2239f56f62ecec399b063df3">is_selected</a></div><div class="ttdeci">const CropSelectorPtr is_selected</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_crop_kernel_8cpp_source.xhtml#l00055">NECropKernel.cpp:55</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::Format::S32</a></div><div class="ttdoc">1 channel, 1 S32 per channel </div></div>
<div class="ttc" id="_n_e_crop_kernel_8h_xhtml"><div class="ttname"><a href="_n_e_crop_kernel_8h.xhtml">NECropKernel.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_afce91e14811fc7ab82c764efb12c0443"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#afce91e14811fc7ab82c764efb12c0443">arm_compute::cpu::s8_in_bounds_crop_window</a></div><div class="ttdeci">void s8_in_bounds_crop_window(const ITensor *input, const ITensor *output, float *output_ptr, Coordinates input_offset, int32_t window_step_x, int32_t output_width_start, int32_t output_width_limit, bool input_has_single_channel, bool is_width_flipped)</div><div class="ttdef"><b>Definition:</b> <a href="crop_2generic_2neon_2integer_8cpp_source.xhtml#l00053">integer.cpp:53</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">arm_compute::Format::U32</a></div><div class="ttdoc">1 channel, 1 U32 per channel </div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a7c66505457d00ece3aa4b34cab80757d"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">arm_compute::ITensorInfo::tensor_shape</a></div><div class="ttdeci">virtual const TensorShape &amp; tensor_shape() const =0</div><div class="ttdoc">Size for each dimension of the tensor. </div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_aeda05854c52c61e264016d08bb812703"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#aeda05854c52c61e264016d08bb812703">arm_compute::cpu::s16_in_bounds_crop_window</a></div><div class="ttdeci">void s16_in_bounds_crop_window(const ITensor *input, const ITensor *output, float *output_ptr, Coordinates input_offset, int32_t window_step_x, int32_t output_width_start, int32_t output_width_limit, bool input_has_single_channel, bool is_width_flipped)</div><div class="ttdef"><b>Definition:</b> <a href="crop_2generic_2neon_2integer_8cpp_source.xhtml#l00060">integer.cpp:60</a></div></div>
<div class="ttc" id="classarm__compute_1_1_coordinates_xhtml"><div class="ttname"><a href="classarm__compute_1_1_coordinates.xhtml">arm_compute::Coordinates</a></div><div class="ttdoc">Coordinates of an item. </div><div class="ttdef"><b>Definition:</b> <a href="_coordinates_8h_source.xhtml#l00037">Coordinates.h:37</a></div></div>
<div class="ttc" id="src_2core_2common_2_registrars_8h_xhtml"><div class="ttname"><a href="src_2core_2common_2_registrars_8h.xhtml">Registrars.h</a></div></div>
<div class="ttc" id="_shape_calculator_8h_xhtml"><div class="ttname"><a href="_shape_calculator_8h.xhtml">ShapeCalculator.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml_a0e95dc1e53c361348314873b168ae237"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">arm_compute::ITensor::info</a></div><div class="ttdeci">virtual ITensorInfo * info() const =0</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor&amp;#39;s metadata. </div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_ae4bce17f1ab84502a7264aa6ee9fe8b7"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#ae4bce17f1ab84502a7264aa6ee9fe8b7">arm_compute::cpu::u16_in_bounds_crop_window</a></div><div class="ttdeci">void u16_in_bounds_crop_window(const ITensor *input, const ITensor *output, float *output_ptr, Coordinates input_offset, int32_t window_step_x, int32_t output_width_start, int32_t output_width_limit, bool input_has_single_channel, bool is_width_flipped)</div><div class="ttdef"><b>Definition:</b> <a href="crop_2generic_2neon_2integer_8cpp_source.xhtml#l00039">integer.cpp:39</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_crop_kernel_xhtml_a0da66c75715e5f334da280799a55c923"><div class="ttname"><a href="classarm__compute_1_1_n_e_crop_kernel.xhtml#a0da66c75715e5f334da280799a55c923">arm_compute::NECropKernel::configure_output_shape</a></div><div class="ttdeci">void configure_output_shape()</div><div class="ttdoc">Configure output tensor&amp;#39;s shape as this can only be determined at runtime. </div><div class="ttdef"><b>Definition:</b> <a href="_n_e_crop_kernel_8cpp_source.xhtml#l00234">NECropKernel.cpp:234</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_crop_kernel_xhtml_a112b35dd205c62ea6ed1447ef226da82"><div class="ttname"><a href="classarm__compute_1_1_n_e_crop_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">arm_compute::NECropKernel::run</a></div><div class="ttdeci">void run(const Window &amp;window, const ThreadInfo &amp;info) override</div><div class="ttdoc">Execute the kernel on the passed window. </div><div class="ttdef"><b>Definition:</b> <a href="_n_e_crop_kernel_8cpp_source.xhtml#l00292">NECropKernel.cpp:292</a></div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_crop_kernel_xhtml_a0b1369db011f9d5603d2f6ab4bab8548"><div class="ttname"><a href="classarm__compute_1_1_n_e_crop_kernel.xhtml#a0b1369db011f9d5603d2f6ab4bab8548">arm_compute::NECropKernel::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *input, const ITensorInfo *crop_boxes, const ITensorInfo *box_ind, const ITensorInfo *output, uint32_t crop_box_ind=0, float extrapolation_value=0)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration of CLStridedSliceKernel. </div><div class="ttdef"><b>Definition:</b> <a href="_n_e_crop_kernel_8cpp_source.xhtml#l00210">NECropKernel.cpp:210</a></div></div>
<div class="ttc" id="_n_e_crop_kernel_8cpp_xhtml_a5add015cf7d654467e698c7b3511dc32"><div class="ttname"><a href="_n_e_crop_kernel_8cpp.xhtml#a5add015cf7d654467e698c7b3511dc32">ukernel</a></div><div class="ttdeci">CropUKernelPtr ukernel</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_crop_kernel_8cpp_source.xhtml#l00056">NECropKernel.cpp:56</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a86c41bd6f17806079552ebacf486f743"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a86c41bd6f17806079552ebacf486f743">arm_compute::cpu::u8_in_bounds_crop_window</a></div><div class="ttdeci">void u8_in_bounds_crop_window(const ITensor *input, const ITensor *output, float *output_ptr, Coordinates input_offset, int32_t window_step_x, int32_t output_width_start, int32_t output_width_limit, bool input_has_single_channel, bool is_width_flipped)</div><div class="ttdef"><b>Definition:</b> <a href="crop_2generic_2neon_2integer_8cpp_source.xhtml#l00032">integer.cpp:32</a></div></div>
<div class="ttc" id="arm__compute_2core_2_validate_8h_xhtml_a1b35b0d258183cf9ef36adf684d0b88c"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a1b35b0d258183cf9ef36adf684d0b88c">ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL(k)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00915">Validate.h:915</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">arm_compute::Format::S16</a></div><div class="ttdoc">1 channel, 1 S16 per channel </div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a7f4b44c08f32f60bee79357a8db1ab34"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a7f4b44c08f32f60bee79357a8db1ab34">arm_compute::cpu::s32_in_bounds_crop_window</a></div><div class="ttdeci">void s32_in_bounds_crop_window(const ITensor *input, const ITensor *output, float *output_ptr, Coordinates input_offset, int32_t window_step_x, int32_t output_width_start, int32_t output_width_limit, bool input_has_single_channel, bool is_width_flipped)</div><div class="ttdef"><b>Definition:</b> <a href="crop_2generic_2neon_2integer_8cpp_source.xhtml#l00067">integer.cpp:67</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ac57b92957968088a392021cac1d2076b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a></div><div class="ttdeci">ScaleKernelInfo info(interpolation_policy, default_border_mode, PixelValue(), sampling_policy, false)</div></div>
<div class="ttc" id="_auto_configuration_8h_xhtml"><div class="ttname"><a href="_auto_configuration_8h.xhtml">AutoConfiguration.h</a></div></div>
<div class="ttc" id="structarm__compute_1_1_thread_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_thread_info.xhtml">arm_compute::ThreadInfo</a></div><div class="ttdoc">Information about executing thread and CPU. </div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_types_8h_source.xhtml#l00179">CPPTypes.h:179</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a18064e0011c3869d884653e9e7c47b66"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a18064e0011c3869d884653e9e7c47b66">arm_compute::ITensorInfo::total_size</a></div><div class="ttdeci">virtual size_t total_size() const =0</div><div class="ttdoc">Returns the total size of the tensor in bytes. </div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a80a5f2d6e3a697c9aad893a3b4242615"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">arm_compute::Dimensions::num_dimensions</a></div><div class="ttdeci">unsigned int num_dimensions() const</div><div class="ttdoc">Returns the effective dimensionality of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00143">Dimensions.h:143</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">arm_compute::DataLayout::NHWC</a></div><div class="ttdoc">Num samples, height, width, channels. </div></div>
<div class="ttc" id="arm__compute_2core_2_validate_8h_xhtml_ae7eed178dac535c6e727061b1f5bc6eb"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN(t, c,...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00788">Validate.h:788</a></div></div>
<div class="ttc" id="src_2core_2_c_p_p_2_validate_8h_xhtml"><div class="ttname"><a href="src_2core_2_c_p_p_2_validate_8h.xhtml">Validate.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_ae7943ea9c1f74dc72c62d4cc3966a459"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">arm_compute::wrapper::vstore</a></div><div class="ttdeci">void vstore(uint8_t *ptr, uint8x8_t val)</div><div class="ttdef"><b>Definition:</b> <a href="store_8h_source.xhtml#l00039">store.h:39</a></div></div>
<div class="ttc" id="arm__compute_2core_2_validate_8h_xhtml_a921b705e9e3e0fe928928447869e62a5"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_NULLPTR(...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00157">Validate.h:157</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a39e87435be178fba49b76f49426ef873"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">arm_compute::wrapper::vdup_n</a></div><div class="ttdeci">uint8x8_t vdup_n(uint8_t value, traits::vector_64_tag)</div><div class="ttdef"><b>Definition:</b> <a href="dup__n_8h_source.xhtml#l00041">dup_n.h:41</a></div></div>
<div class="ttc" id="bit__ops_8h_xhtml"><div class="ttname"><a href="bit__ops_8h.xhtml">bit_ops.h</a></div></div>
<div class="ttc" id="tensor__transform_8h_xhtml"><div class="ttname"><a href="tensor__transform_8h.xhtml">tensor_transform.h</a></div></div>
<div class="ttc" id="wrapper_8h_xhtml"><div class="ttname"><a href="wrapper_8h.xhtml">wrapper.h</a></div><div class="ttdoc">Includes all wrapper headers at once. </div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a8ac2234643490e0d1d52af361a81ccfe"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a8ac2234643490e0d1d52af361a81ccfe">arm_compute::cpu::u32_in_bounds_crop_window</a></div><div class="ttdeci">void u32_in_bounds_crop_window(const ITensor *input, const ITensor *output, float *output_ptr, Coordinates input_offset, int32_t window_step_x, int32_t output_width_start, int32_t output_width_limit, bool input_has_single_channel, bool is_width_flipped)</div><div class="ttdef"><b>Definition:</b> <a href="crop_2generic_2neon_2integer_8cpp_source.xhtml#l00046">integer.cpp:46</a></div></div>
<div class="ttc" id="arm__compute_2core_2_validate_8h_xhtml_aef783de4ec01874dbec6054a5868aea2"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#aef783de4ec01874dbec6054a5868aea2">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_NOT_IN</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_NOT_IN(t,...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00690">Validate.h:690</a></div></div>
<div class="ttc" id="arm__compute_2core_2_types_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">arm_compute::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdoc">Available data types. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00079">Types.h:79</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a3aa8003f658c620589d1fb3a446ac582"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a3aa8003f658c620589d1fb3a446ac582">arm_compute::cpu::fp32_in_bounds_crop_window</a></div><div class="ttdeci">void fp32_in_bounds_crop_window(const ITensor *input, const ITensor *output, float *output_ptr, Coordinates input_offset, int32_t window_step_x, int32_t output_width_start, int32_t output_width_limit, bool input_has_single_channel, bool is_width_flipped)</div><div class="ttdef"><b>Definition:</b> <a href="cpu_2kernels_2crop_2generic_2neon_2fp32_8cpp_source.xhtml#l00031">fp32.cpp:31</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">arm_compute::DataType::S8</a></div><div class="ttdoc">signed 8-bit number </div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml">arm_compute::Window</a></div><div class="ttdoc">Describe a multidimensional execution window. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00039">Window.h:39</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_ac394d6570ab3325810a3532d39091a52"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#ac394d6570ab3325810a3532d39091a52">arm_compute::ITensorInfo::has_padding</a></div><div class="ttdeci">virtual bool has_padding() const =0</div><div class="ttdoc">Checks if the tensor has been allocated with padding or not. </div></div>
<div class="ttc" id="classarm__compute_1_1_n_e_crop_kernel_xhtml_ad8887523c29f0065e3557ca800c4b042"><div class="ttname"><a href="classarm__compute_1_1_n_e_crop_kernel.xhtml#ad8887523c29f0065e3557ca800c4b042">arm_compute::NECropKernel::NECropKernel</a></div><div class="ttdeci">NECropKernel()</div><div class="ttdoc">Default constructor. </div><div class="ttdef"><b>Definition:</b> <a href="_n_e_crop_kernel_8cpp_source.xhtml#l00192">NECropKernel.cpp:192</a></div></div>
<div class="ttc" id="arm__compute_2core_2_validate_8h_xhtml_a6eb9ce82815fe429250189da7592ba75"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a6eb9ce82815fe429250189da7592ba75">ARM_COMPUTE_ERROR_ON_INVALID_SUBWINDOW</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_INVALID_SUBWINDOW(f, s)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00201">Validate.h:201</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_d91e1966cc57df4f49d1e07be7697713.xhtml">NEON</a></li><li class="navelem"><a class="el" href="dir_1ce938f580a6f304b99685e2c1dd19db.xhtml">kernels</a></li><li class="navelem"><a class="el" href="_n_e_crop_kernel_8cpp.xhtml">NECropKernel.cpp</a></li>
    <li class="footer">Generated on Thu Aug 18 2022 12:57:37 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
