<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/cpu/kernels/elementwise_binary/generic/neon/impl.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('elementwise__binary_2generic_2neon_2impl_8h_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">impl.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="elementwise__binary_2generic_2neon_2impl_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2021-2022 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef SRC_CORE_NEON_KERNELS_ELEMENTWISE_IMPL_H</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define SRC_CORE_NEON_KERNELS_ELEMENTWISE_IMPL_H</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_n_e_asymm_8h.xhtml">src/core/NEON/NEAsymm.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;{</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">namespace </span>cpu</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;{</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">template</span> &lt;ArithmeticOperation op, <span class="keyword">typename</span> VectorType&gt;</div><div class="line"><a name="l00034"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#abbfe5d27e11d8842fdb4cef411832f8e">   34</a></span>&#160;<span class="keyword">typename</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">VectorType::type</a> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#abbfe5d27e11d8842fdb4cef411832f8e">elementwise_arithm_op</a>(<span class="keyword">const</span> <span class="keyword">typename</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">VectorType::type</a> &amp;a, <span class="keyword">const</span> <span class="keyword">typename</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">VectorType::type</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>)</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keyword">using</span> vec_type    = <span class="keyword">typename</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">VectorType::type</a>;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keyword">using</span> scalar_type = <span class="keyword">typename</span> VectorType::scalar_type;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keyword">using</span> tag_type    = <span class="keyword">typename</span> VectorType::tag_type;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    vec_type res = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(static_cast&lt;scalar_type&gt;(0), tag_type{});</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keywordflow">switch</span>(op)</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    {</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea26a4b44a837bf97b972628509912b4a5">ArithmeticOperation::MAX</a>:</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;            res = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">wrapper::vmax</a>(a, b);</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45bace31e2a082d17e038fcc6e3006166653">ArithmeticOperation::MIN</a>:</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;            res = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ab026a1aeec48074092f548c130c323f4">wrapper::vmin</a>(a, b);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea46ea186b87dc545033d86ba8d6e63916">ArithmeticOperation::SQUARED_DIFF</a>:</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        {</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;            <span class="keyword">const</span> vec_type tmp = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(a, b);</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;            res                = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(tmp, tmp);</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        }</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea25c5689f5cf73ac778d6aec298e02a7f">ArithmeticOperation::PRELU</a>:</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        {</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            <span class="keyword">const</span> vec_type zero = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(static_cast&lt;scalar_type&gt;(0), tag_type{});</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            <span class="keyword">const</span> vec_type tmp  = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(a, b);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>     gt   = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a7eedba29396b0db728bffdf5f202d85c">wrapper::vcgt</a>(a, zero);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            res = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8e5924674eee0f441d54eb75d656700f">wrapper::vbsl</a>(gt, a, tmp);</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        }</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    }</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keywordflow">return</span> res;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;}</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="keyword">template</span> &lt;ArithmeticOperation op, <span class="keyword">typename</span> ScalarType, <span class="keyword">typename</span> VectorType&gt;</div><div class="line"><a name="l00074"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a6e4a309149d475d17fdfd2d11c26b916">   74</a></span>&#160;<span class="keyword">typename</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">VectorType::type</a> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a6e4a309149d475d17fdfd2d11c26b916">elementwise_arithm_op_broadcast</a>(<span class="keyword">const</span> <span class="keyword">typename</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">VectorType::type</a> &amp;a, <span class="keyword">const</span> ScalarType &amp;broadcast_value, <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="namespacereorder.xhtml">reorder</a>)</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;{</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keyword">using</span> tag_type = <span class="keyword">typename</span> VectorType::tag_type;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keyword">using</span> vec_type = <span class="keyword">typename</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">VectorType::type</a>;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    vec_type broadcast_vector = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(broadcast_value, tag_type{});</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keywordflow">return</span> elementwise_arithm_op&lt;op, VectorType&gt;(reorder ? broadcast_vector : a, reorder ? a : broadcast_vector);</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;}</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> InputScalarType, <span class="keyword">typename</span> OutputScalarType, <span class="keyword">typename</span> InputVectorType&gt;</div><div class="line"><a name="l00084"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a82713bd9209865da67e8624a162ef9c1">   84</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a82713bd9209865da67e8624a162ef9c1">elementwise_op</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window,</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                    OutputScalarType (*scalar_func)(<span class="keyword">const</span> InputScalarType &amp;, <span class="keyword">const</span> InputScalarType &amp;),</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                    <span class="keywordtype">int</span> (*broadcast_func)(<span class="keywordtype">int</span>, <span class="keywordtype">int</span>, <span class="keywordtype">int</span>, <span class="keyword">const</span> InputScalarType *, <span class="keyword">const</span> InputScalarType &amp;, OutputScalarType *, <span class="keyword">const</span> <span class="keywordtype">bool</span>),</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                    <span class="keywordtype">int</span> (*neon_func)(<span class="keywordtype">int</span>, <span class="keywordtype">int</span>, <span class="keywordtype">int</span>, <span class="keyword">const</span> InputScalarType *, <span class="keyword">const</span> InputScalarType *, OutputScalarType *))</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;{</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="comment">// Create input windows</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> input1_win = window.<a class="code" href="classarm__compute_1_1_window.xhtml#ae20ec28555d4473419cae37cf120f35d">broadcast_if_dimension_le_one</a>(in1-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>());</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> input2_win = window.<a class="code" href="classarm__compute_1_1_window.xhtml#ae20ec28555d4473419cae37cf120f35d">broadcast_if_dimension_le_one</a>(in2-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>());</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> win = window;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    win.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 1, 1));</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  window_step_x         = std::min(16 / static_cast&lt;int&gt;(<span class="keyword">sizeof</span>(OutputScalarType)), 8);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x        = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>());</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x          = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">end</a>());</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_broadcast_across_x = in1-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">x</a>() != in2-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">x</a>();</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keywordflow">if</span>(is_broadcast_across_x)</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    {</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span>     is_broadcast_input_2 = input2_win.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">step</a>() == 0;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a>         broadcast_win        = is_broadcast_input_2 ? input2_win : input1_win;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a>         non_broadcast_win    = !is_broadcast_input_2 ? input2_win : input1_win;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *broadcast_tensor     = is_broadcast_input_2 ? in2 : in1;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *non_broadcast_tensor = !is_broadcast_input_2 ? in2 : in1;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        non_broadcast_win.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 1, 1));</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> broadcast_input(broadcast_tensor, broadcast_win);</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> non_broadcast_input(non_broadcast_tensor, non_broadcast_win);</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> output(out, win);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(win, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;)</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        {</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            <span class="keyword">auto</span>                  output_ptr              = <span class="keyword">reinterpret_cast&lt;</span>OutputScalarType *<span class="keyword">&gt;</span>(output.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>());</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>            non_broadcast_input_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>InputScalarType *<span class="keyword">&gt;</span>(non_broadcast_input.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>());</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            <span class="keyword">const</span> InputScalarType broadcast_value         = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>InputScalarType *<span class="keyword">&gt;</span>(broadcast_input.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>());</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            <span class="keywordtype">int</span> x = (*broadcast_func)(window_start_x, window_end_x, window_step_x, non_broadcast_input_ptr, broadcast_value, output_ptr, !is_broadcast_input_2);</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            <span class="keywordflow">for</span>(; x &lt; window_end_x; ++x)</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            {</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> a      = *(non_broadcast_input_ptr + x);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                *(output_ptr + x) = (*scalar_func)(!is_broadcast_input_2 ? broadcast_value : a, !is_broadcast_input_2 ? a : broadcast_value);</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            }</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        },</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        broadcast_input, non_broadcast_input, output);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    }</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    {</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        input1_win.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 1, 1));</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        input2_win.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 1, 1));</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> input1(in1, input1_win);</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> input2(in2, input2_win);</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> output(out, win);</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(win, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;)</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        {</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            <span class="keyword">auto</span>       output_ptr = <span class="keyword">reinterpret_cast&lt;</span>OutputScalarType *<span class="keyword">&gt;</span>(output.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>());</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input1_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>InputScalarType *<span class="keyword">&gt;</span>(input1.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>());</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input2_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>InputScalarType *<span class="keyword">&gt;</span>(input2.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>());</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            <span class="keywordtype">int</span> x = (*neon_func)(window_start_x, window_end_x, window_step_x, input1_ptr, input2_ptr, output_ptr);</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            <span class="keywordflow">for</span>(; x &lt; window_end_x; ++x)</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            {</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> a      = *(input1_ptr + x);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>      = *(input2_ptr + x);</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                *(output_ptr + x) = (*scalar_func)(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            }</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        },</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        input1, input2, output);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    }</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;}</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="keyword">template</span> &lt;ArithmeticOperation op, <span class="keyword">typename</span> ScalarType&gt;</div><div class="line"><a name="l00161"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a4c0ec3e8fab2ea0202cedcc94da53f25">  161</a></span>&#160;<span class="keyword">inline</span> ScalarType <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a4c0ec3e8fab2ea0202cedcc94da53f25">elementwise_arithm_op_scalar</a>(<span class="keyword">const</span> ScalarType &amp;a, <span class="keyword">const</span> ScalarType &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>)</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;{</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keyword">auto</span> res = ScalarType(0);</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keywordflow">switch</span>(op)</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    {</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea26a4b44a837bf97b972628509912b4a5">ArithmeticOperation::MAX</a>:</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            res = std::max(a, b);</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45bace31e2a082d17e038fcc6e3006166653">ArithmeticOperation::MIN</a>:</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            res = std::min(a, b);</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea46ea186b87dc545033d86ba8d6e63916">ArithmeticOperation::SQUARED_DIFF</a>:</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        {</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            res = (a - <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>) * (a - b);</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        }</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea25c5689f5cf73ac778d6aec298e02a7f">ArithmeticOperation::PRELU</a>:</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        {</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            res = (a &gt; 0 ? a : a * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        }</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea29bbf66f7f8529ec47e394fb5a36c646">ArithmeticOperation::DIV</a>:</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        {</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;            res = a / <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            <span class="keywordflow">if</span>(std::is_integral&lt;ScalarType&gt;::value)</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            {</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                res = (b == 0) ? 0 : res;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                <span class="keywordflow">if</span>(static_cast&lt;int32_t&gt;(a) % <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>) != 0 &amp;&amp; ((a &lt; 0) != (b &lt; 0)))</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                {</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                    --res;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                }</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            }</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        }</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aeac9c9c146c630ca5ef9197c73c032f4a6">ArithmeticOperation::POWER</a>:</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        {</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            res = std::pow(a, b);</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        }</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    }</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keywordflow">return</span> res;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;}</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00208"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a2dd8a3579e2536f06cbda2c602ff6261">  208</a></span>&#160;<span class="keyword">inline</span> int32x4_t elementwise_arithm_op&lt;ArithmeticOperation::DIV, typename wrapper::traits::neon_vector&lt;int32_t, 4&gt;&gt;(<span class="keyword">const</span> int32x4_t &amp;a, <span class="keyword">const</span> int32x4_t &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>)</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;{</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="keywordflow">return</span> vcvtq_s32_f32(<a class="code" href="namespacearm__compute.xhtml#af7a0f3e622aa4bc8c6077d2262a04e2e">vfloorq_f32</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a533635332a3a17c16d8f21c77e15e907">wrapper::vdiv</a>(vcvtq_f32_s32(a), vcvtq_f32_s32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>))));</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;}</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00214"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#ad3c3a3a2edcc9ae7274708f1babf305a">  214</a></span>&#160;<span class="keyword">inline</span> float32x4_t elementwise_arithm_op&lt;ArithmeticOperation::DIV, typename wrapper::traits::neon_vector&lt;float, 4&gt;&gt;(<span class="keyword">const</span> float32x4_t &amp;a, <span class="keyword">const</span> float32x4_t &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>)</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;{</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a533635332a3a17c16d8f21c77e15e907">wrapper::vdiv</a>(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;}</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00220"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#af7232f84a3d1ac94e631f1abf4f1fdca">  220</a></span>&#160;<span class="keyword">inline</span> float32x4_t elementwise_arithm_op&lt;ArithmeticOperation::POWER, typename wrapper::traits::neon_vector&lt;float, 4&gt;&gt;(<span class="keyword">const</span> float32x4_t &amp;a, <span class="keyword">const</span> float32x4_t &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>)</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;{</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a566497df1ac44164eb8643f5d469afae">wrapper::vpow</a>(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;}</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="preprocessor">#ifdef __ARM_FEATURE_FP16_VECTOR_ARITHMETIC</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="keyword">inline</span> float16x8_t elementwise_arithm_op&lt;ArithmeticOperation::DIV, typename wrapper::traits::neon_vector&lt;float16_t, 8&gt;&gt;(<span class="keyword">const</span> float16x8_t &amp;a, <span class="keyword">const</span> float16x8_t &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>)</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;{</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a533635332a3a17c16d8f21c77e15e907">wrapper::vdiv</a>(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;}</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="keyword">inline</span> float16x8_t elementwise_arithm_op&lt;ArithmeticOperation::POWER, typename wrapper::traits::neon_vector&lt;float16_t, 8&gt;&gt;(<span class="keyword">const</span> float16x8_t &amp;a, <span class="keyword">const</span> float16x8_t &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>)</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;{</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a566497df1ac44164eb8643f5d469afae">wrapper::vpow</a>(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;}</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="preprocessor">#endif // __ARM_FEATURE_FP16_VECTOR_ARITHMETIC</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="keyword">template</span> &lt;ArithmeticOperation op, <span class="keyword">typename</span> ScalarType, <span class="keyword">typename</span> VectorType&gt;</div><div class="line"><a name="l00240"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a7ecfb489f7d67ef4d8c1ba77e1060702">  240</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a7ecfb489f7d67ef4d8c1ba77e1060702">elementwise_arithm_op_loop</a>(<span class="keywordtype">int</span> window_start_x, <span class="keywordtype">int</span> window_end_x, <span class="keywordtype">int</span> window_step_x,</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                                      <span class="keyword">const</span> ScalarType *input1_ptr, <span class="keyword">const</span> ScalarType *input2_ptr, ScalarType *output_ptr)</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;{</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    {</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> a = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input1_ptr + x);</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input2_ptr + x);</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, elementwise_arithm_op&lt;op, VectorType&gt;(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>));</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    }</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keywordflow">return</span> x;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;}</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="keyword">template</span> &lt;ArithmeticOperation op, <span class="keyword">typename</span> ScalarType, <span class="keyword">typename</span> VectorType&gt;</div><div class="line"><a name="l00254"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a1d55687f004c1a3302485b2cb8da093b">  254</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a1d55687f004c1a3302485b2cb8da093b">elementwise_arithm_op_broadcast_loop</a>(<span class="keywordtype">int</span> window_start_x, <span class="keywordtype">int</span> window_end_x, <span class="keywordtype">int</span> window_step_x,</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                                                <span class="keyword">const</span> ScalarType *non_broadcast_input_ptr, <span class="keyword">const</span> ScalarType &amp;broadcast_value, ScalarType *output_ptr, <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="namespacereorder.xhtml">reorder</a>)</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;{</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    {</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> a = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>((non_broadcast_input_ptr + x));</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, elementwise_arithm_op_broadcast&lt;op, ScalarType, VectorType&gt;(a, broadcast_value, reorder));</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    }</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <span class="keywordflow">return</span> x;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;}</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="keyword">template</span> &lt;ArithmeticOperation op, <span class="keyword">typename</span> VectorType&gt;</div><div class="line"><a name="l00267"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a29b215a8ed4583d1d4ac5d1e226bf9ef">  267</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#abbfe5d27e11d8842fdb4cef411832f8e">elementwise_arithm_op</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;{</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <span class="keyword">using</span> scalar_type = <span class="keyword">typename</span> VectorType::scalar_type;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    elementwise_op&lt;scalar_type, scalar_type, VectorType&gt;(in1, in2, out, window,</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                                                         &amp;elementwise_arithm_op_scalar&lt;op, scalar_type&gt;,</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                                                         &amp;elementwise_arithm_op_broadcast_loop&lt;op, scalar_type, VectorType&gt;,</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                                                         &amp;elementwise_arithm_op_loop&lt;op, scalar_type, VectorType&gt;);</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;}</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="keyword">template</span> &lt;ComparisonOperation op, <span class="keyword">typename</span> InputScalarType&gt;</div><div class="line"><a name="l00278"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#abb34d4000c420ca4fed96903be0fdc64">  278</a></span>&#160;<span class="keyword">inline</span> uint8_t <a class="code" href="namespacearm__compute_1_1cpu.xhtml#abb34d4000c420ca4fed96903be0fdc64">elementwise_comp_op_scalar</a>(<span class="keyword">const</span> InputScalarType &amp;a, <span class="keyword">const</span> InputScalarType &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>)</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;{</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    <span class="keywordtype">bool</span> res = <span class="keyword">false</span>;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <span class="keywordflow">switch</span>(op)</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    {</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5">ComparisonOperation::Equal</a>:</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;            res = (a == <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca19bb0af2c3c530538cb41aff7f235b96">ComparisonOperation::NotEqual</a>:</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;            res = (a != <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">ComparisonOperation::Greater</a>:</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;            res = (a &gt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca758b05d899def79c9eb864ad4f96be1f">ComparisonOperation::GreaterEqual</a>:</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;            res = (a &gt;= <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca1cfdf0e8d0c87a228c1f40d9bee7888b">ComparisonOperation::Less</a>:</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;            res = (a &lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58cad3e6fdac55bb7b0edd7834c968ba1f38">ComparisonOperation::LessEqual</a>:</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;            res = (a &lt;= <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    }</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <span class="keywordflow">return</span> res ? ~static_cast&lt;uint8_t&gt;(0) : static_cast&lt;uint8_t&gt;(0);</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;}</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="keyword">template</span> &lt;ComparisonOperation op, <span class="keyword">typename</span> InputVectorType, <span class="keyword">typename</span> OutputVectorType&gt;</div><div class="line"><a name="l00309"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#ac758cf39f9e6885c73b6814ac80ff0ec">  309</a></span>&#160;<span class="keyword">inline</span> OutputVectorType <a class="code" href="namespacearm__compute_1_1cpu.xhtml#ac758cf39f9e6885c73b6814ac80ff0ec">elementwise_comp_op</a>(<span class="keyword">const</span> InputVectorType &amp;a, <span class="keyword">const</span> InputVectorType &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>)</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;{</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    OutputVectorType res = { 0, 0, 0, 0 };</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    <span class="keywordflow">switch</span>(op)</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    {</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5">ComparisonOperation::Equal</a>:</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;            res = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa7ccd655f600847f9d471604ed47e810">wrapper::vceq</a>(a, b);</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca19bb0af2c3c530538cb41aff7f235b96">ComparisonOperation::NotEqual</a>:</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;            res = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aed661d4bd9a14812355576773982eb7a">wrapper::vnot</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa7ccd655f600847f9d471604ed47e810">wrapper::vceq</a>(a, b));</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">ComparisonOperation::Greater</a>:</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;            res = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a7eedba29396b0db728bffdf5f202d85c">wrapper::vcgt</a>(a, b);</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca758b05d899def79c9eb864ad4f96be1f">ComparisonOperation::GreaterEqual</a>:</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;            res = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1f777df8db31568a3436995df958714c">wrapper::vcge</a>(a, b);</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca1cfdf0e8d0c87a228c1f40d9bee7888b">ComparisonOperation::Less</a>:</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;            res = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a7eedba29396b0db728bffdf5f202d85c">wrapper::vcgt</a>(b, a);</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58cad3e6fdac55bb7b0edd7834c968ba1f38">ComparisonOperation::LessEqual</a>:</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;            res = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1f777df8db31568a3436995df958714c">wrapper::vcge</a>(b, a);</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    }</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    <span class="keywordflow">return</span> res;</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;}</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;<span class="keyword">template</span> &lt;ComparisonOperation op, <span class="keyword">typename</span> InputScalarType, <span class="keyword">typename</span> InputVectorType, <span class="keyword">typename</span> OutputVectorType&gt;</div><div class="line"><a name="l00341"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#ae6f48be843bb47d4779d6613cd3ce68d">  341</a></span>&#160;<span class="keyword">inline</span> OutputVectorType <a class="code" href="namespacearm__compute_1_1cpu.xhtml#ae6f48be843bb47d4779d6613cd3ce68d">elementwise_comp_op_broadcast</a>(<span class="keyword">const</span> InputVectorType &amp;a, <span class="keyword">const</span> InputScalarType &amp;broadcast_value, <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="namespacereorder.xhtml">reorder</a>)</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;{</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    InputVectorType broadcast_vector = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(broadcast_value, <a class="code" href="structarm__compute_1_1wrapper_1_1traits_1_1vector__128__tag.xhtml">wrapper::traits::vector_128_tag</a>());</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    <span class="keywordflow">return</span> elementwise_comp_op&lt;op, InputVectorType, OutputVectorType&gt;(reorder ? broadcast_vector : a, reorder ? a : broadcast_vector);</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;}</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;<span class="keyword">template</span> &lt;ComparisonOperation op, <span class="keyword">typename</span> InputScalarType, <span class="keyword">typename</span> InputVectorType&gt;</div><div class="line"><a name="l00348"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#ad2a62b7914c8bff0e139b376ec38dbe7">  348</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#ad2a62b7914c8bff0e139b376ec38dbe7">elementwise_comp_op_broadcast_8_loop</a>(<span class="keywordtype">int</span> window_start_x, <span class="keywordtype">int</span> window_end_x, <span class="keywordtype">int</span> window_step_x,</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                                                <span class="keyword">const</span> InputScalarType *non_broadcast_input_ptr, <span class="keyword">const</span> InputScalarType &amp;broadcast_value, uint8_t *output_ptr, <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="namespacereorder.xhtml">reorder</a>)</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;{</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    {</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> a = elementwise_comp_op_broadcast&lt;op, InputScalarType, InputVectorType, uint8x16_t&gt;(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>((non_broadcast_input_ptr + x)), broadcast_value, reorder);</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, a);</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    }</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    <span class="keywordflow">return</span> x;</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;}</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;<span class="keyword">template</span> &lt;ComparisonOperation op, <span class="keyword">typename</span> InputScalarType, <span class="keyword">typename</span> InputVectorType&gt;</div><div class="line"><a name="l00361"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a324f99e84c7277809b5a774363197382">  361</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a324f99e84c7277809b5a774363197382">elementwise_comp_op_broadcast_16_loop</a>(<span class="keywordtype">int</span> window_start_x, <span class="keywordtype">int</span> window_end_x, <span class="keywordtype">int</span> window_step_x,</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;                                                 <span class="keyword">const</span> InputScalarType *non_broadcast_input_ptr, <span class="keyword">const</span> InputScalarType &amp;broadcast_value, uint8_t *output_ptr, <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="namespacereorder.xhtml">reorder</a>)</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;{</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    {</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> a = elementwise_comp_op_broadcast&lt;op, InputScalarType, InputVectorType, uint16x8_t&gt;(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>((non_broadcast_input_ptr + x)), broadcast_value, reorder);</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(a));</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    }</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    <span class="keywordflow">return</span> x;</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;}</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;<span class="keyword">template</span> &lt;ComparisonOperation op, <span class="keyword">typename</span> InputScalarType, <span class="keyword">typename</span> InputVectorType&gt;</div><div class="line"><a name="l00374"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a15e0926812301b45c7e24e7eea269ab2">  374</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a15e0926812301b45c7e24e7eea269ab2">elementwise_comp_op_broadcast_32_loop</a>(<span class="keywordtype">int</span> window_start_x, <span class="keywordtype">int</span> window_end_x, <span class="keywordtype">int</span> window_step_x,</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;                                                 <span class="keyword">const</span> InputScalarType *non_broadcast_input_ptr, <span class="keyword">const</span> InputScalarType &amp;broadcast_value, uint8_t *output_ptr, <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="namespacereorder.xhtml">reorder</a>)</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;{</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    {</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> a = elementwise_comp_op_broadcast&lt;op, InputScalarType, InputVectorType, uint32x4_t&gt;(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(non_broadcast_input_ptr + x), broadcast_value, reorder);</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> = elementwise_comp_op_broadcast&lt;op, InputScalarType, InputVectorType, uint32x4_t&gt;(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(non_broadcast_input_ptr + x + 4), broadcast_value, reorder);</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">wrapper::vcombine</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(a), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(b))));</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    }</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    <span class="keywordflow">if</span>(x &lt;= window_end_x - 4)</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    {</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> a = elementwise_comp_op_broadcast&lt;op, InputScalarType, InputVectorType, uint32x4_t&gt;(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>((non_broadcast_input_ptr + x)), broadcast_value, reorder);</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; 4; i++)</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;        {</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;            *(output_ptr + x + i) = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">wrapper::vgetlane</a>(a, i);</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;        }</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;        x = +4;</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    }</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    <span class="keywordflow">return</span> x;</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;}</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;<span class="keyword">template</span> &lt;ComparisonOperation op, <span class="keyword">typename</span> InputScalarType, <span class="keyword">typename</span> InputVectorType&gt;</div><div class="line"><a name="l00397"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a0df077147bf38575572e36582af9f573">  397</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a0df077147bf38575572e36582af9f573">elementwise_comp_op_8_loop</a>(<span class="keywordtype">int</span> window_start_x, <span class="keywordtype">int</span> window_end_x, <span class="keywordtype">int</span> window_step_x,</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                                      <span class="keyword">const</span> InputScalarType *input1_ptr, <span class="keyword">const</span> InputScalarType *input2_ptr, uint8_t *output_ptr)</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;{</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    {</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> a   = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input1_ptr + x);</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>   = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input2_ptr + x);</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> res = elementwise_comp_op&lt;op, InputVectorType, uint8x16_t&gt;(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, res);</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    }</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    <span class="keywordflow">return</span> x;</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;}</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;<span class="keyword">template</span> &lt;ComparisonOperation op, <span class="keyword">typename</span> InputScalarType, <span class="keyword">typename</span> InputVectorType&gt;</div><div class="line"><a name="l00412"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a550901088b6a737a17d7eeb052ba9ef6">  412</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a550901088b6a737a17d7eeb052ba9ef6">elementwise_comp_op_16_loop</a>(<span class="keywordtype">int</span> window_start_x, <span class="keywordtype">int</span> window_end_x, <span class="keywordtype">int</span> window_step_x,</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;                                       <span class="keyword">const</span> InputScalarType *input1_ptr, <span class="keyword">const</span> InputScalarType *input2_ptr, uint8_t *output_ptr)</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;{</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    {</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> a   = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input1_ptr + x);</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>   = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input2_ptr + x);</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> res = elementwise_comp_op&lt;op, InputVectorType, uint16x8_t&gt;(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(res));</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    }</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    <span class="keywordflow">return</span> x;</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;}</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;<span class="keyword">template</span> &lt;ComparisonOperation op, <span class="keyword">typename</span> InputScalarType, <span class="keyword">typename</span> InputVectorType&gt;</div><div class="line"><a name="l00427"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#ae64977c9bd4690e8e3607e6fea754199">  427</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#ae64977c9bd4690e8e3607e6fea754199">elementwise_comp_op_32_loop</a>(<span class="keywordtype">int</span> window_start_x, <span class="keywordtype">int</span> window_end_x, <span class="keywordtype">int</span> window_step_x,</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;                                       <span class="keyword">const</span> InputScalarType *input1_ptr, <span class="keyword">const</span> InputScalarType *input2_ptr, uint8_t *output_ptr)</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;{</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    {</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;        <span class="keyword">auto</span>       a    = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input1_ptr + x);</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;        <span class="keyword">auto</span>       <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>    = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input2_ptr + x);</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> res  = elementwise_comp_op&lt;op, InputVectorType, uint32x4_t&gt;(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;        a               = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input1_ptr + x + 4);</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>               = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input2_ptr + x + 4);</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> res2 = elementwise_comp_op&lt;op, InputVectorType, uint32x4_t&gt;(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">wrapper::vcombine</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(res), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(res2))));</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    }</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    <span class="keywordflow">if</span>(x &lt;= window_end_x - 4)</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    {</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> a   = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input1_ptr + x);</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>   = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input2_ptr + x);</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> res = elementwise_comp_op&lt;op, InputVectorType, uint32x4_t&gt;(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; 4; i++)</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;        {</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;            *(output_ptr + x + i) = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">wrapper::vgetlane</a>(res, i);</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;        }</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;        x = +4;</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    }</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    <span class="keywordflow">return</span> x;</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;}</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;<span class="keyword">template</span> &lt;ComparisonOperation op, <span class="keyword">typename</span> InputScalarType, <span class="keyword">typename</span> InputVectorType&gt;</div><div class="line"><a name="l00456"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#af8cc8f4068cf9120bf433df94926221f">  456</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#af8cc8f4068cf9120bf433df94926221f">elementwise_comp_op_8</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;{</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    elementwise_op&lt;InputScalarType, uint8_t, InputVectorType&gt;(in1, in2, out, window,</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;                                                              &amp;elementwise_comp_op_scalar&lt;op, InputScalarType&gt;,</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;                                                              &amp;elementwise_comp_op_broadcast_8_loop&lt;op, InputScalarType, InputVectorType&gt;,</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;                                                              &amp;elementwise_comp_op_8_loop&lt;op, InputScalarType, InputVectorType&gt;);</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;}</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;<span class="keyword">template</span> &lt;ComparisonOperation op, <span class="keyword">typename</span> InputScalarType, <span class="keyword">typename</span> InputVectorType&gt;</div><div class="line"><a name="l00465"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a38e6bb15e7ac2da0795f3cfef2f29d6d">  465</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a38e6bb15e7ac2da0795f3cfef2f29d6d">elementwise_comp_op_16</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;{</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    elementwise_op&lt;InputScalarType, uint8_t, InputVectorType&gt;(in1, in2, out, window,</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;                                                              &amp;elementwise_comp_op_scalar&lt;op, InputScalarType&gt;,</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;                                                              &amp;elementwise_comp_op_broadcast_16_loop&lt;op, InputScalarType, InputVectorType&gt;,</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;                                                              &amp;elementwise_comp_op_16_loop&lt;op, InputScalarType, InputVectorType&gt;);</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;}</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;<span class="keyword">template</span> &lt;ComparisonOperation op, <span class="keyword">typename</span> InputScalarType, <span class="keyword">typename</span> InputVectorType&gt;</div><div class="line"><a name="l00474"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a3b186f6a61b072a9952403a3ef8548b4">  474</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a3b186f6a61b072a9952403a3ef8548b4">elementwise_comp_op_32</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;{</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    elementwise_op&lt;InputScalarType, uint8_t, InputVectorType&gt;(in1, in2, out, window,</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;                                                              &amp;elementwise_comp_op_scalar&lt;op, InputScalarType&gt;,</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;                                                              &amp;elementwise_comp_op_broadcast_32_loop&lt;op, InputScalarType, InputVectorType&gt;,</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;                                                              &amp;elementwise_comp_op_32_loop&lt;op, InputScalarType, InputVectorType&gt;);</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;}</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;</div><div class="line"><a name="l00482"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#ae239dc51a686a455c70ff87fce9ea5aa">  482</a></span>&#160;<span class="keyword">inline</span> float32x4x4_t <a class="code" href="namespacearm__compute_1_1cpu.xhtml#ae239dc51a686a455c70ff87fce9ea5aa">load_quantized</a>(<span class="keyword">const</span> uint8_t *input1_ptr, <span class="keyword">const</span> int32x4_t &amp;<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, <span class="keyword">const</span> float32x4_t &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>)</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;{</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ac7e1832b8c58f07a98fc8d390b16ac27">qasymm8x16_t</a>        x = vld1q_u8(input1_ptr);</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    <span class="keyword">const</span> float32x4x4_t out =</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    {</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;        {</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;            vmulq_f32(vcvtq_f32_s32(vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_low_u16(vmovl_u8(vget_low_u8(x))))), offset)), scale),</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;            vmulq_f32(vcvtq_f32_s32(vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_high_u16(vmovl_u8(vget_low_u8(x))))), offset)), scale),</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;            vmulq_f32(vcvtq_f32_s32(vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_low_u16(vmovl_u8(vget_high_u8(x))))), offset)), scale),</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;            vmulq_f32(vcvtq_f32_s32(vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_high_u16(vmovl_u8(vget_high_u8(x))))), offset)), scale),</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;        }</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    };</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    <span class="keywordflow">return</span> out;</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;}</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;</div><div class="line"><a name="l00497"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a5bb53d2922eed568fcd9de9081faeeb7">  497</a></span>&#160;<span class="keyword">inline</span> float32x4x4_t <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a5bb53d2922eed568fcd9de9081faeeb7">load_quantized_signed</a>(<span class="keyword">const</span> int8_t *input1_ptr, <span class="keyword">const</span> int32x4_t &amp;<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, <span class="keyword">const</span> float32x4_t &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>)</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;{</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#adc8234d074c193f521029e81cda80bb2">qasymm8x16_signed_t</a> x = vld1q_s8(input1_ptr);</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    <span class="keyword">const</span> float32x4x4_t out =</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    {</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;        {</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;            vmulq_f32(vcvtq_f32_s32(vsubq_s32(vmovl_s16(vget_low_s16(vmovl_s8(vget_low_s8(x)))), offset)), scale),</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;            vmulq_f32(vcvtq_f32_s32(vsubq_s32(vmovl_s16(vget_high_s16(vmovl_s8(vget_low_s8(x)))), offset)), scale),</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;            vmulq_f32(vcvtq_f32_s32(vsubq_s32(vmovl_s16(vget_low_s16(vmovl_s8(vget_high_s8(x)))), offset)), scale),</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;            vmulq_f32(vcvtq_f32_s32(vsubq_s32(vmovl_s16(vget_high_s16(vmovl_s8(vget_high_s8(x)))), offset)), scale),</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;        }</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    };</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    <span class="keywordflow">return</span> out;</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;}</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;</div><div class="line"><a name="l00512"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a981cf35141a952f493df0398da0b3d99">  512</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a981cf35141a952f493df0398da0b3d99">store_quantized</a>(uint8_t *output_ptr, <span class="keyword">const</span> uint32x4x4_t &amp;out)</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;{</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    <span class="keyword">const</span> uint8x8_t pa = vqmovn_u16(vcombine_u16(vqmovn_u32(out.val[0]), vqmovn_u32(out.val[1])));</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    <span class="keyword">const</span> uint8x8_t pb = vqmovn_u16(vcombine_u16(vqmovn_u32(out.val[2]), vqmovn_u32(out.val[3])));</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;    vst1q_u8(output_ptr, vcombine_u8(pa, pb));</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;}</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;</div><div class="line"><a name="l00519"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a0460ff15e5977217b8fae5cf6abed0b1">  519</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a981cf35141a952f493df0398da0b3d99">store_quantized</a>(uint8_t *output_ptr, <span class="keyword">const</span> int32x4x4_t &amp;out)</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;{</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    <span class="keyword">const</span> uint8x8_t pa = vqmovun_s16(vcombine_s16(vqmovn_s32(out.val[0]), vqmovn_s32(out.val[1])));</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    <span class="keyword">const</span> uint8x8_t pb = vqmovun_s16(vcombine_s16(vqmovn_s32(out.val[2]), vqmovn_s32(out.val[3])));</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    vst1q_u8(output_ptr, vcombine_u8(pa, pb));</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;}</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;</div><div class="line"><a name="l00526"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a83e9db0e07a3f67c702e65cc54fa9119">  526</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a981cf35141a952f493df0398da0b3d99">store_quantized</a>(uint8_t *output_ptr, <span class="keyword">const</span> float32x4x4_t &amp;rf, <span class="keyword">const</span> float32x4_t &amp;<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, <span class="keyword">const</span> float32x4_t &amp;invscale)</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;{</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    int32x4x4_t out =</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    {</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;        {</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;            vcvtq_s32_f32(vmlaq_f32(offset, rf.val[0], invscale)),</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;            vcvtq_s32_f32(vmlaq_f32(offset, rf.val[1], invscale)),</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;            vcvtq_s32_f32(vmlaq_f32(offset, rf.val[2], invscale)),</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;            vcvtq_s32_f32(vmlaq_f32(offset, rf.val[3], invscale)),</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;        }</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    };</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;    <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a981cf35141a952f493df0398da0b3d99">store_quantized</a>(output_ptr, out);</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;}</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;</div><div class="line"><a name="l00540"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#aac9f2850a80f033f33e04660ac3bbd08">  540</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#aac9f2850a80f033f33e04660ac3bbd08">store_quantized_signed</a>(int8_t *output_ptr, <span class="keyword">const</span> int32x4x4_t &amp;out)</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;{</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;    <span class="keyword">const</span> int8x8_t pa = vqmovn_s16(vcombine_s16(vqmovn_s32(out.val[0]), vqmovn_s32(out.val[1])));</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;    <span class="keyword">const</span> int8x8_t pb = vqmovn_s16(vcombine_s16(vqmovn_s32(out.val[2]), vqmovn_s32(out.val[3])));</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    vst1q_s8(output_ptr, vcombine_s8(pa, pb));</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;}</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;</div><div class="line"><a name="l00547"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#af77016f5946f5a276e68576bb1b68877">  547</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#aac9f2850a80f033f33e04660ac3bbd08">store_quantized_signed</a>(int8_t *output_ptr, <span class="keyword">const</span> float32x4x4_t &amp;rf, <span class="keyword">const</span> float32x4_t &amp;<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, <span class="keyword">const</span> float32x4_t &amp;invscale)</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;{</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    int32x4x4_t out =</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    {</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;        {</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;            vcvtq_s32_f32(vmlaq_f32(offset, rf.val[0], invscale)),</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;            vcvtq_s32_f32(vmlaq_f32(offset, rf.val[1], invscale)),</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;            vcvtq_s32_f32(vmlaq_f32(offset, rf.val[2], invscale)),</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;            vcvtq_s32_f32(vmlaq_f32(offset, rf.val[3], invscale)),</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;        }</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;    };</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;    <a class="code" href="namespacearm__compute_1_1cpu.xhtml#aac9f2850a80f033f33e04660ac3bbd08">store_quantized_signed</a>(output_ptr, out);</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;}</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;<span class="keyword">template</span> &lt;ArithmeticOperation op&gt;</div><div class="line"><a name="l00562"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a06083700f047b600de212931e66daab7">  562</a></span>&#160;<span class="keyword">inline</span> uint8_t <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a06083700f047b600de212931e66daab7">elementwise_arithm_op_quantized_scalar</a>(<span class="keyword">const</span> <span class="keywordtype">float</span> &amp;a, <span class="keyword">const</span> <span class="keywordtype">float</span> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">qinfo</a>)</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;{</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#ab8cef8b31b552b532a14ab8815e06285">quantize_qasymm8</a>(elementwise_arithm_op_scalar&lt;op&gt;(a, b), qinfo);</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;}</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;<span class="keyword">template</span> &lt;ArithmeticOperation op&gt;</div><div class="line"><a name="l00568"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a1d0c8d90c3c46f6f1eb5f80e1a82254c">  568</a></span>&#160;<span class="keyword">inline</span> int8_t <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a1d0c8d90c3c46f6f1eb5f80e1a82254c">elementwise_arithm_op_quantized_signed_scalar</a>(<span class="keyword">const</span> <span class="keywordtype">float</span> &amp;a, <span class="keyword">const</span> <span class="keywordtype">float</span> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">qinfo</a>)</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;{</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">quantize_qasymm8_signed</a>(elementwise_arithm_op_scalar&lt;op&gt;(a, b), qinfo);</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;}</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;<span class="keyword">template</span> &lt;ArithmeticOperation op&gt;</div><div class="line"><a name="l00574"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a53285ac0836360e8a03088185fd669bc">  574</a></span>&#160;float32x4x4_t <a class="code" href="namespacearm__compute_1_1cpu.xhtml#abbfe5d27e11d8842fdb4cef411832f8e">elementwise_arithm_op</a>(<span class="keyword">const</span> float32x4x4_t &amp;a, <span class="keyword">const</span> float32x4x4_t &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>)</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;{</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;    <span class="keyword">using</span> neon_vector_float = <a class="code" href="structarm__compute_1_1wrapper_1_1traits_1_1neon__vector.xhtml">wrapper::traits::neon_vector&lt;float, 4&gt;</a>;</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;    float32x4x4_t out =</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;    {</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;        {</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;            elementwise_arithm_op&lt;op, neon_vector_float&gt;(a.val[0], b.val[0]),</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;            elementwise_arithm_op&lt;op, neon_vector_float&gt;(a.val[1], b.val[1]),</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;            elementwise_arithm_op&lt;op, neon_vector_float&gt;(a.val[2], b.val[2]),</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;            elementwise_arithm_op&lt;op, neon_vector_float&gt;(a.val[3], b.val[3]),</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;        }</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;    };</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;    <span class="keywordflow">return</span> out;</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;}</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;<span class="keyword">template</span> &lt;ComparisonOperation op&gt;</div><div class="line"><a name="l00590"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#ac216018d489f5f9ea7d1907f593a039e">  590</a></span>&#160;<span class="keyword">inline</span> uint8_t <a class="code" href="namespacearm__compute_1_1cpu.xhtml#ac216018d489f5f9ea7d1907f593a039e">elementwise_comp_op_quantized_scalar</a>(<span class="keyword">const</span> <span class="keywordtype">float</span> &amp;a, <span class="keyword">const</span> <span class="keywordtype">float</span> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">qinfo</a>)</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;{</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(qinfo);</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;    <span class="keywordflow">return</span> elementwise_comp_op_scalar&lt;op&gt;(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;}</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;<span class="keyword">template</span> &lt;ComparisonOperation op&gt;</div><div class="line"><a name="l00597"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#afaa460d8a451197db97d0af703bf8316">  597</a></span>&#160;<span class="keyword">inline</span> uint32x4x4_t <a class="code" href="namespacearm__compute_1_1cpu.xhtml#ac758cf39f9e6885c73b6814ac80ff0ec">elementwise_comp_op</a>(<span class="keyword">const</span> float32x4x4_t &amp;a, <span class="keyword">const</span> float32x4x4_t &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>)</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;{</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;    uint32x4x4_t out =</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;    {</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;        {</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;            elementwise_comp_op&lt;op, float32x4_t, uint32x4_t&gt;(a.val[0], b.val[0]),</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;            elementwise_comp_op&lt;op, float32x4_t, uint32x4_t&gt;(a.val[1], b.val[1]),</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;            elementwise_comp_op&lt;op, float32x4_t, uint32x4_t&gt;(a.val[2], b.val[2]),</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;            elementwise_comp_op&lt;op, float32x4_t, uint32x4_t&gt;(a.val[3], b.val[3])</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;        }</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;    };</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;    <span class="keywordflow">return</span> out;</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;}</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;<span class="keyword">template</span> &lt;ArithmeticOperation op&gt;</div><div class="line"><a name="l00612"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a918ccd824090fc763e31459310bdea53">  612</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a918ccd824090fc763e31459310bdea53">elementwise_arithm_op_quantized_loop</a>(<span class="keywordtype">int</span> window_start_x, <span class="keywordtype">int</span> window_end_x, <span class="keywordtype">int</span> window_step_x,</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;                                                <span class="keyword">const</span> uint8_t *input1_ptr, <span class="keyword">const</span> uint8_t *input2_ptr, uint8_t *output_ptr,</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;                                                int32x4_t voffset1, int32x4_t voffset2, float32x4_t vscale1, float32x4_t vscale2,</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;                                                float32x4_t voffseto, float32x4_t invvscaleo)</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;{</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;    <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;    {</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;        <span class="comment">// Get inputs and compute output</span></div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;        <span class="keyword">const</span> float32x4x4_t af = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#ae239dc51a686a455c70ff87fce9ea5aa">load_quantized</a>(input1_ptr + x, voffset1, vscale1);</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;        <span class="keyword">const</span> float32x4x4_t bf = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#ae239dc51a686a455c70ff87fce9ea5aa">load_quantized</a>(input2_ptr + x, voffset2, vscale2);</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;        <span class="keyword">const</span> float32x4x4_t rf = elementwise_arithm_op&lt;op&gt;(af, bf);</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;        <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a981cf35141a952f493df0398da0b3d99">store_quantized</a>(output_ptr + x, rf, voffseto, invvscaleo);</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;    }</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;    <span class="keywordflow">return</span> x;</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;}</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;<span class="keyword">template</span> &lt;ArithmeticOperation op&gt;</div><div class="line"><a name="l00630"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a136ae2cf27f2d1d2aac2da4c33d24c1c">  630</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a136ae2cf27f2d1d2aac2da4c33d24c1c">elementwise_arithm_op_quantized_singed_loop</a>(<span class="keywordtype">int</span> window_start_x, <span class="keywordtype">int</span> window_end_x, <span class="keywordtype">int</span> window_step_x,</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;                                                       <span class="keyword">const</span> int8_t *input1_ptr, <span class="keyword">const</span> int8_t *input2_ptr, int8_t *output_ptr,</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;                                                       int32x4_t voffset1, int32x4_t voffset2, float32x4_t vscale1, float32x4_t vscale2,</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;                                                       float32x4_t voffseto, float32x4_t invvscaleo)</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;{</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;    <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;    <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;    {</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;        <span class="comment">// Get inputs and compute output</span></div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;        <span class="keyword">const</span> float32x4x4_t af = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a5bb53d2922eed568fcd9de9081faeeb7">load_quantized_signed</a>(input1_ptr + x, voffset1, vscale1);</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;        <span class="keyword">const</span> float32x4x4_t bf = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a5bb53d2922eed568fcd9de9081faeeb7">load_quantized_signed</a>(input2_ptr + x, voffset2, vscale2);</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;        <span class="keyword">const</span> float32x4x4_t rf = elementwise_arithm_op&lt;op&gt;(af, bf);</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;        <a class="code" href="namespacearm__compute_1_1cpu.xhtml#aac9f2850a80f033f33e04660ac3bbd08">store_quantized_signed</a>(output_ptr + x, rf, voffseto, invvscaleo);</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;    }</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;    <span class="keywordflow">return</span> x;</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;}</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;<span class="keyword">template</span> &lt;ArithmeticOperation op&gt;</div><div class="line"><a name="l00648"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#ab1893a2a9fc472d75b5fe897e63c5a41">  648</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#ab1893a2a9fc472d75b5fe897e63c5a41">elementwise_arithm_op_quantized_broadcast_loop</a>(<span class="keywordtype">int</span> window_start_x, <span class="keywordtype">int</span> window_end_x, <span class="keywordtype">int</span> window_step_x,</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;                                                          <span class="keyword">const</span> uint8_t *non_broadcast_input_ptr, float32x4x4_t broadcast_vector, uint8_t *output_ptr,</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;                                                          int32x4_t voffset_non_broadcast, float32x4_t vscale_non_broadcast,</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;                                                          float32x4_t voffseto, float32x4_t invvscaleo, <span class="keywordtype">bool</span> <a class="code" href="namespacereorder.xhtml">reorder</a>)</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;{</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;    <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;    <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;    {</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;        <span class="keyword">const</span> float32x4x4_t af = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#ae239dc51a686a455c70ff87fce9ea5aa">load_quantized</a>(non_broadcast_input_ptr + x, voffset_non_broadcast, vscale_non_broadcast);</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;        <span class="keyword">const</span> float32x4x4_t rf = elementwise_arithm_op&lt;op&gt;(reorder ? broadcast_vector : af, reorder ? af : broadcast_vector);</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;        <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a981cf35141a952f493df0398da0b3d99">store_quantized</a>(output_ptr + x, rf, voffseto, invvscaleo);</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;    }</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;    <span class="keywordflow">return</span> x;</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;}</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;<span class="keyword">template</span> &lt;ArithmeticOperation op&gt;</div><div class="line"><a name="l00663"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a77a76d4cabb3dcbb44ecb12034a28e46">  663</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a77a76d4cabb3dcbb44ecb12034a28e46">elementwise_arithm_op_quantized_signed_broadcast_loop</a>(<span class="keywordtype">int</span> window_start_x, <span class="keywordtype">int</span> window_end_x, <span class="keywordtype">int</span> window_step_x,</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;                                                                 <span class="keyword">const</span> int8_t *non_broadcast_input_ptr, float32x4x4_t broadcast_vector, int8_t *output_ptr,</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;                                                                 int32x4_t voffset_non_broadcast, float32x4_t vscale_non_broadcast,</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;                                                                 float32x4_t voffseto, float32x4_t invvscaleo, <span class="keywordtype">bool</span> <a class="code" href="namespacereorder.xhtml">reorder</a>)</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;{</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;    <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;    <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;    {</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;        <span class="keyword">const</span> float32x4x4_t af = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a5bb53d2922eed568fcd9de9081faeeb7">load_quantized_signed</a>(non_broadcast_input_ptr + x, voffset_non_broadcast, vscale_non_broadcast);</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;        <span class="keyword">const</span> float32x4x4_t rf = elementwise_arithm_op&lt;op&gt;(reorder ? broadcast_vector : af, reorder ? af : broadcast_vector);</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;        <a class="code" href="namespacearm__compute_1_1cpu.xhtml#aac9f2850a80f033f33e04660ac3bbd08">store_quantized_signed</a>(output_ptr + x, rf, voffseto, invvscaleo);</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;    }</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;    <span class="keywordflow">return</span> x;</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;}</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;<span class="keyword">template</span> &lt;ComparisonOperation op&gt;</div><div class="line"><a name="l00679"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a4c8d923ab1f2263472ff1815a0655701">  679</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a4c8d923ab1f2263472ff1815a0655701">elementwise_comp_op_quantized_loop</a>(<span class="keywordtype">int</span> window_start_x, <span class="keywordtype">int</span> window_end_x, <span class="keywordtype">int</span> window_step_x,</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;                                              <span class="keyword">const</span> uint8_t *input1_ptr, <span class="keyword">const</span> uint8_t *input2_ptr, uint8_t *output_ptr,</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;                                              int32x4_t voffset1, int32x4_t voffset2, float32x4_t vscale1, float32x4_t vscale2,</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;                                              float32x4_t voffseto, float32x4_t invvscaleo)</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;{</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(voffseto, invvscaleo);</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;    <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;    <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;    {</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;        <span class="keyword">const</span> float32x4x4_t af = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#ae239dc51a686a455c70ff87fce9ea5aa">load_quantized</a>(input1_ptr + x, voffset1, vscale1);</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;        <span class="keyword">const</span> float32x4x4_t bf = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#ae239dc51a686a455c70ff87fce9ea5aa">load_quantized</a>(input2_ptr + x, voffset2, vscale2);</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;        <span class="keyword">const</span> uint32x4x4_t  rf = elementwise_comp_op&lt;op&gt;(af, bf);</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;        <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a981cf35141a952f493df0398da0b3d99">store_quantized</a>(output_ptr + x, rf);</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;    }</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;    <span class="keywordflow">return</span> x;</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;}</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;<span class="keyword">template</span> &lt;ComparisonOperation op&gt;</div><div class="line"><a name="l00697"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a4c7874a7ad657bd64f21bc52840ce4ee">  697</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a4c7874a7ad657bd64f21bc52840ce4ee">elementwise_comp_op_quantized_signed_loop</a>(<span class="keywordtype">int</span> window_start_x, <span class="keywordtype">int</span> window_end_x, <span class="keywordtype">int</span> window_step_x,</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;                                                     <span class="keyword">const</span> int8_t *input1_ptr, <span class="keyword">const</span> int8_t *input2_ptr, uint8_t *output_ptr,</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;                                                     int32x4_t voffset1, int32x4_t voffset2, float32x4_t vscale1, float32x4_t vscale2,</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;                                                     float32x4_t voffseto, float32x4_t invvscaleo)</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;{</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(voffseto, invvscaleo);</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;    <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;    <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;    {</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;        <span class="keyword">const</span> float32x4x4_t af = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a5bb53d2922eed568fcd9de9081faeeb7">load_quantized_signed</a>(input1_ptr + x, voffset1, vscale1);</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;        <span class="keyword">const</span> float32x4x4_t bf = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a5bb53d2922eed568fcd9de9081faeeb7">load_quantized_signed</a>(input2_ptr + x, voffset2, vscale2);</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;        <span class="keyword">const</span> uint32x4x4_t  rf = elementwise_comp_op&lt;op&gt;(af, bf);</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;        <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a981cf35141a952f493df0398da0b3d99">store_quantized</a>(output_ptr + x, rf);</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;    }</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;    <span class="keywordflow">return</span> x;</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;}</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;<span class="keyword">template</span> &lt;ComparisonOperation op&gt;</div><div class="line"><a name="l00715"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a26d9b05aae3ad0b55e92cde353d3bd15">  715</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a26d9b05aae3ad0b55e92cde353d3bd15">elementwise_comp_op_quantized_broadcast_loop</a>(<span class="keywordtype">int</span> window_start_x, <span class="keywordtype">int</span> window_end_x, <span class="keywordtype">int</span> window_step_x,</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;                                                        <span class="keyword">const</span> uint8_t *non_broadcast_input_ptr, float32x4x4_t broadcast_vector, uint8_t *output_ptr,</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;                                                        int32x4_t voffset_non_broadcast, float32x4_t vscale_non_broadcast,</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;                                                        float32x4_t voffseto, float32x4_t invvscaleo, <span class="keywordtype">bool</span> <a class="code" href="namespacereorder.xhtml">reorder</a>)</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;{</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(voffseto, invvscaleo);</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;    <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;    <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;    {</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;        <span class="keyword">const</span> float32x4x4_t af = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#ae239dc51a686a455c70ff87fce9ea5aa">load_quantized</a>(non_broadcast_input_ptr + x, voffset_non_broadcast, vscale_non_broadcast);</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;        <span class="keyword">const</span> uint32x4x4_t  rf = elementwise_comp_op&lt;op&gt;(reorder ? broadcast_vector : af, reorder ? af : broadcast_vector);</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;        <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a981cf35141a952f493df0398da0b3d99">store_quantized</a>(output_ptr + x, rf);</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;    }</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;    <span class="keywordflow">return</span> x;</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;}</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;<span class="keyword">template</span> &lt;ComparisonOperation op&gt;</div><div class="line"><a name="l00732"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a30b6a7350fda90e0f6d8dc86df9d586f">  732</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a30b6a7350fda90e0f6d8dc86df9d586f">elementwise_comp_op_quantized_signed_broadcast_loop</a>(<span class="keywordtype">int</span> window_start_x, <span class="keywordtype">int</span> window_end_x, <span class="keywordtype">int</span> window_step_x,</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;                                                               <span class="keyword">const</span> int8_t *non_broadcast_input_ptr, float32x4x4_t broadcast_vector, uint8_t *output_ptr,</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;                                                               int32x4_t voffset_non_broadcast, float32x4_t vscale_non_broadcast,</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;                                                               float32x4_t voffseto, float32x4_t invvscaleo, <span class="keywordtype">bool</span> <a class="code" href="namespacereorder.xhtml">reorder</a>)</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;{</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(voffseto, invvscaleo);</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;    <span class="keywordtype">int</span> x = window_start_x;</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;    <span class="keywordflow">for</span>(; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;    {</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;        <span class="keyword">const</span> float32x4x4_t af = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a5bb53d2922eed568fcd9de9081faeeb7">load_quantized_signed</a>(non_broadcast_input_ptr + x, voffset_non_broadcast, vscale_non_broadcast);</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;        <span class="keyword">const</span> uint32x4x4_t  rf = elementwise_comp_op&lt;op&gt;(reorder ? broadcast_vector : af, reorder ? af : broadcast_vector);</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;        <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a981cf35141a952f493df0398da0b3d99">store_quantized</a>(output_ptr + x, rf);</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;    }</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;    <span class="keywordflow">return</span> x;</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;}</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;</div><div class="line"><a name="l00748"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#aae3f4470575b8ef973d136101ea80b68">  748</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#aae3f4470575b8ef973d136101ea80b68">elementwise_op_quantized</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window,</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;                                     uint8_t (*scalar_func)(<span class="keyword">const</span> <span class="keywordtype">float</span> &amp;, <span class="keyword">const</span> <span class="keywordtype">float</span> &amp;, <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a>),</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;                                     <span class="keywordtype">int</span> (*broadcast_func)(<span class="keywordtype">int</span>, <span class="keywordtype">int</span>, <span class="keywordtype">int</span>, <span class="keyword">const</span> uint8_t *, float32x4x4_t, uint8_t *, int32x4_t, float32x4_t,</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;                                                           float32x4_t, float32x4_t, <span class="keyword">const</span> <span class="keywordtype">bool</span>),</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;                                     <span class="keywordtype">int</span> (*neon_func)(<span class="keywordtype">int</span>, <span class="keywordtype">int</span>, <span class="keywordtype">int</span>, <span class="keyword">const</span> uint8_t *, <span class="keyword">const</span> uint8_t *, uint8_t *,</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;                                                      int32x4_t, int32x4_t, float32x4_t, float32x4_t,</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;                                                      float32x4_t, float32x4_t))</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;{</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;    <span class="comment">// Create input windows</span></div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> input1_win = window.<a class="code" href="classarm__compute_1_1_window.xhtml#ae20ec28555d4473419cae37cf120f35d">broadcast_if_dimension_le_one</a>(in1-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>());</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> input2_win = window.<a class="code" href="classarm__compute_1_1_window.xhtml#ae20ec28555d4473419cae37cf120f35d">broadcast_if_dimension_le_one</a>(in2-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>());</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;    <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> win = window;</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;    win.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 1, 1));</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  window_step_x         = 16;</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x        = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>());</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x          = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">end</a>());</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_broadcast_across_x = in1-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">x</a>() != in2-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">x</a>();</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> output_qinfo = out-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">quantization_info</a>().<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>();</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;    <span class="comment">// Output quantization info (add 0.5 to round toward the nearest integer - 0.5 rounds away from zero)</span></div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;    <span class="keyword">const</span> float32x4_t voffseto   = vdupq_n_f32(output_qinfo.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">offset</a> + 0.5f);</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;    <span class="keyword">const</span> float32x4_t invvscaleo = vdupq_n_f32(1.f / output_qinfo.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a>);</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;    <span class="keywordflow">if</span>(is_broadcast_across_x)</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;    {</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;        <span class="comment">// Select the broadcast input on the X axis</span></div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span>     is_broadcast_input_2 = input2_win.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">step</a>() == 0;</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;        <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a>         broadcast_win        = is_broadcast_input_2 ? input2_win : input1_win;</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;        <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a>         non_broadcast_win    = !is_broadcast_input_2 ? input2_win : input1_win;</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *broadcast_tensor     = is_broadcast_input_2 ? in2 : in1;</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *non_broadcast_tensor = !is_broadcast_input_2 ? in2 : in1;</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;        <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> broadcast_qinfo     = broadcast_tensor-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">quantization_info</a>().<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>();</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;        <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> non_broadcast_qinfo = non_broadcast_tensor-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">quantization_info</a>().<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>();</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;        <span class="keyword">const</span> int32x4_t   voffset_non_broadcast = vdupq_n_s32(non_broadcast_qinfo.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">offset</a>);</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;        <span class="keyword">const</span> float32x4_t vscale_non_broadcast  = vdupq_n_f32(non_broadcast_qinfo.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a>);</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;        non_broadcast_win.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 1, 1));</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> broadcast_input(broadcast_tensor, broadcast_win);</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> non_broadcast_input(non_broadcast_tensor, non_broadcast_win);</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> output(out, win);</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(win, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;)</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;        {</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_input_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(non_broadcast_input.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>());</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr              = <span class="keyword">reinterpret_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(output.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>());</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;            <span class="keyword">const</span> uint8_t       broadcast_value  = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(broadcast_input.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>());</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;            <span class="keyword">const</span> float32x4x4_t broadcast_vector = <a class="code" href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">vdequantize</a>(vdupq_n_u8(broadcast_value), broadcast_qinfo);</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;            <span class="keywordtype">int</span> x = (*broadcast_func)(window_start_x, window_end_x, window_step_x, non_broadcast_input_ptr, broadcast_vector, output_ptr,</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;                                      voffset_non_broadcast, vscale_non_broadcast, voffseto, invvscaleo, !is_broadcast_input_2);</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;            <span class="keywordflow">for</span>(; x &lt; window_end_x; ++x)</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;            {</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> afs   = <a class="code" href="namespacearm__compute.xhtml#ac1d8253f8b422e143ab989ad2a4d29dd">dequantize_qasymm8</a>(*(non_broadcast_input_ptr + x), non_broadcast_qinfo);</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>   = <a class="code" href="namespacearm__compute.xhtml#ac1d8253f8b422e143ab989ad2a4d29dd">dequantize_qasymm8</a>(broadcast_value, broadcast_qinfo);</div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;                *(output_ptr + x) = (*scalar_func)(!is_broadcast_input_2 ? <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a> : afs, !is_broadcast_input_2 ? afs : <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>, output_qinfo);</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;            }</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;        },</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;        broadcast_input, non_broadcast_input, output);</div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;    }</div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;    {</div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;        <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> input1_qinfo = in1-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">quantization_info</a>().<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>();</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;        <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> input2_qinfo = in2-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">quantization_info</a>().<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>();</div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;</div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;        <span class="comment">// Input1 quantization info</span></div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;        <span class="keyword">const</span> int32x4_t   voffset1 = vdupq_n_s32(input1_qinfo.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">offset</a>);</div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;        <span class="keyword">const</span> float32x4_t vscale1  = vdupq_n_f32(input1_qinfo.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a>);</div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;        <span class="comment">// Input2 quantization info</span></div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;        <span class="keyword">const</span> int32x4_t   voffset2 = vdupq_n_s32(input2_qinfo.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">offset</a>);</div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;        <span class="keyword">const</span> float32x4_t vscale2  = vdupq_n_f32(input2_qinfo.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a>);</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;</div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;        input1_win.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 1, 1));</div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;        input2_win.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 1, 1));</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;</div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> input1(in1, input1_win);</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> input2(in2, input2_win);</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> output(out, win);</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(win, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;)</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;        {</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input1_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(input1.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>());</div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input2_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(input2.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>());</div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(output.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>());</div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;</div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;            <span class="keywordtype">int</span> x = (*neon_func)(window_start_x, window_end_x, window_step_x, input1_ptr, input2_ptr, output_ptr, voffset1, voffset2,</div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;                                 vscale1, vscale2, voffseto, invvscaleo);</div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;            <span class="keywordflow">for</span>(; x &lt; window_end_x; ++x)</div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;            {</div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> afs   = <a class="code" href="namespacearm__compute.xhtml#ac1d8253f8b422e143ab989ad2a4d29dd">dequantize_qasymm8</a>(*(input1_ptr + x), input1_qinfo);</div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>   = <a class="code" href="namespacearm__compute.xhtml#ac1d8253f8b422e143ab989ad2a4d29dd">dequantize_qasymm8</a>(*(input2_ptr + x), input2_qinfo);</div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;                *(output_ptr + x) = (*scalar_func)(afs, <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>, output_qinfo);</div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;            }</div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;        },</div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;        input1, input2, output);</div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;    }</div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;}</div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;</div><div class="line"><a name="l00856"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a8d498841f133c2ce4c31076a6f700a4f">  856</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a8d498841f133c2ce4c31076a6f700a4f">elementwise_comp_quantized_signed</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window,</div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;                                              uint8_t (*scalar_func)(<span class="keyword">const</span> <span class="keywordtype">float</span> &amp;, <span class="keyword">const</span> <span class="keywordtype">float</span> &amp;, <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a>),</div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;                                              <span class="keywordtype">int</span> (*broadcast_func)(<span class="keywordtype">int</span>, <span class="keywordtype">int</span>, <span class="keywordtype">int</span>, <span class="keyword">const</span> int8_t *, float32x4x4_t, uint8_t *, int32x4_t, float32x4_t,</div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;                                                                    float32x4_t, float32x4_t, <span class="keyword">const</span> <span class="keywordtype">bool</span>),</div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;                                              <span class="keywordtype">int</span> (*neon_func)(<span class="keywordtype">int</span>, <span class="keywordtype">int</span>, <span class="keywordtype">int</span>, <span class="keyword">const</span> int8_t *, <span class="keyword">const</span> int8_t *, uint8_t *,</div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;                                                               int32x4_t, int32x4_t, float32x4_t, float32x4_t,</div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;                                                               float32x4_t, float32x4_t))</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;{</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;    <span class="comment">// Create input windows</span></div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> input1_win = window.<a class="code" href="classarm__compute_1_1_window.xhtml#ae20ec28555d4473419cae37cf120f35d">broadcast_if_dimension_le_one</a>(in1-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>());</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> input2_win = window.<a class="code" href="classarm__compute_1_1_window.xhtml#ae20ec28555d4473419cae37cf120f35d">broadcast_if_dimension_le_one</a>(in2-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>());</div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;</div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;    <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> win = window;</div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;    win.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 1, 1));</div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;</div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  window_step_x         = 16;</div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x        = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>());</div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x          = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">end</a>());</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_broadcast_across_x = in1-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">x</a>() != in2-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">x</a>();</div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;</div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> output_qinfo = out-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">quantization_info</a>().<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>();</div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;</div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;    <span class="keyword">const</span> float32x4_t voffseto   = vdupq_n_f32(output_qinfo.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">offset</a>);</div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;    <span class="keyword">const</span> float32x4_t invvscaleo = vdupq_n_f32(1.f / output_qinfo.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a>);</div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;</div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;    <span class="keywordflow">if</span>(is_broadcast_across_x)</div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;    {</div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;        <span class="comment">// Select the broadcast input on the X axis</span></div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span>     is_broadcast_input_2 = input2_win.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">step</a>() == 0;</div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;        <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a>         broadcast_win        = is_broadcast_input_2 ? input2_win : input1_win;</div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;        <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a>         non_broadcast_win    = !is_broadcast_input_2 ? input2_win : input1_win;</div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *broadcast_tensor     = is_broadcast_input_2 ? in2 : in1;</div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *non_broadcast_tensor = !is_broadcast_input_2 ? in2 : in1;</div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;</div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;        <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> broadcast_qinfo     = broadcast_tensor-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">quantization_info</a>().<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>();</div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;        <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> non_broadcast_qinfo = non_broadcast_tensor-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">quantization_info</a>().<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>();</div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;</div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;        <span class="keyword">const</span> int32x4_t   voffset_non_broadcast = vdupq_n_s32(non_broadcast_qinfo.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">offset</a>);</div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;        <span class="keyword">const</span> float32x4_t vscale_non_broadcast  = vdupq_n_f32(non_broadcast_qinfo.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a>);</div><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;</div><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;        non_broadcast_win.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 1, 1));</div><div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;</div><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> broadcast_input(broadcast_tensor, broadcast_win);</div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> non_broadcast_input(non_broadcast_tensor, non_broadcast_win);</div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> output(out, win);</div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;</div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(win, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;)</div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;        {</div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_input_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(non_broadcast_input.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>());</div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr              = <span class="keyword">reinterpret_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(output.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>());</div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;</div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;            <span class="keyword">const</span> int8_t        broadcast_value  = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(broadcast_input.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>());</div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;            <span class="keyword">const</span> float32x4x4_t broadcast_vector = <a class="code" href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">vdequantize</a>(vdupq_n_s8(broadcast_value), broadcast_qinfo);</div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;</div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;            <span class="keywordtype">int</span> x = (*broadcast_func)(window_start_x, window_end_x, window_step_x, non_broadcast_input_ptr, broadcast_vector, output_ptr,</div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;                                      voffset_non_broadcast, vscale_non_broadcast, voffseto, invvscaleo, !is_broadcast_input_2);</div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;            <span class="keywordflow">for</span>(; x &lt; window_end_x; ++x)</div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;            {</div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> afs   = <a class="code" href="namespacearm__compute.xhtml#afe6fcf1a0c6f6c2d2cb10a8c14fa9131">dequantize_qasymm8_signed</a>(*(non_broadcast_input_ptr + x), non_broadcast_qinfo);</div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>   = <a class="code" href="namespacearm__compute.xhtml#afe6fcf1a0c6f6c2d2cb10a8c14fa9131">dequantize_qasymm8_signed</a>(broadcast_value, broadcast_qinfo);</div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;                *(output_ptr + x) = (*scalar_func)(!is_broadcast_input_2 ? <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a> : afs, !is_broadcast_input_2 ? afs : <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>, output_qinfo);</div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;            }</div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;        },</div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;        broadcast_input, non_broadcast_input, output);</div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;    }</div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;    {</div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;        <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> input1_qinfo = in1-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">quantization_info</a>().<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>();</div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;        <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> input2_qinfo = in2-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">quantization_info</a>().<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>();</div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;</div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;        <span class="comment">// Input1 quantization info</span></div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;        <span class="keyword">const</span> int32x4_t   voffset1 = vdupq_n_s32(input1_qinfo.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">offset</a>);</div><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;        <span class="keyword">const</span> float32x4_t vscale1  = vdupq_n_f32(input1_qinfo.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a>);</div><div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;</div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;        <span class="comment">// Input2 quantization info</span></div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;        <span class="keyword">const</span> int32x4_t   voffset2 = vdupq_n_s32(input2_qinfo.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">offset</a>);</div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;        <span class="keyword">const</span> float32x4_t vscale2  = vdupq_n_f32(input2_qinfo.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a>);</div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;</div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;        input1_win.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 1, 1));</div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;        input2_win.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 1, 1));</div><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;</div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> input1(in1, input1_win);</div><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> input2(in2, input2_win);</div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> output(out, win);</div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;</div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(win, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;)</div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;        {</div><div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input1_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(input1.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>());</div><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input2_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(input2.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>());</div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(output.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>());</div><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;</div><div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;            <span class="keywordtype">int</span> x = (*neon_func)(window_start_x, window_end_x, window_step_x, input1_ptr, input2_ptr, output_ptr, voffset1, voffset2,</div><div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;                                 vscale1, vscale2, voffseto, invvscaleo);</div><div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;            <span class="keywordflow">for</span>(; x &lt; window_end_x; ++x)</div><div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;            {</div><div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> afs   = <a class="code" href="namespacearm__compute.xhtml#afe6fcf1a0c6f6c2d2cb10a8c14fa9131">dequantize_qasymm8_signed</a>(*(input1_ptr + x), input1_qinfo);</div><div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>   = <a class="code" href="namespacearm__compute.xhtml#afe6fcf1a0c6f6c2d2cb10a8c14fa9131">dequantize_qasymm8_signed</a>(*(input2_ptr + x), input2_qinfo);</div><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;                *(output_ptr + x) = (*scalar_func)(afs, <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>, output_qinfo);</div><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;            }</div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;        },</div><div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;        input1, input2, output);</div><div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;    }</div><div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;}</div><div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;</div><div class="line"><a name="l00963"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a1806b9850ee209fa95836d94e33e176f">  963</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a1806b9850ee209fa95836d94e33e176f">elementwise_op_quantized_signed</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window,</div><div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;                                            int8_t (*scalar_func)(<span class="keyword">const</span> <span class="keywordtype">float</span> &amp;, <span class="keyword">const</span> <span class="keywordtype">float</span> &amp;, <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a>),</div><div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;                                            <span class="keywordtype">int</span> (*broadcast_func)(<span class="keywordtype">int</span>, <span class="keywordtype">int</span>, <span class="keywordtype">int</span>, <span class="keyword">const</span> int8_t *, float32x4x4_t, int8_t *, int32x4_t, float32x4_t,</div><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;                                                                  float32x4_t, float32x4_t, <span class="keyword">const</span> <span class="keywordtype">bool</span>),</div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;                                            <span class="keywordtype">int</span> (*neon_func)(<span class="keywordtype">int</span>, <span class="keywordtype">int</span>, <span class="keywordtype">int</span>, <span class="keyword">const</span> int8_t *, <span class="keyword">const</span> int8_t *, int8_t *,</div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;                                                             int32x4_t, int32x4_t, float32x4_t, float32x4_t,</div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;                                                             float32x4_t, float32x4_t))</div><div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;{</div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;    <span class="comment">// Create input windows</span></div><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> input1_win = window.<a class="code" href="classarm__compute_1_1_window.xhtml#ae20ec28555d4473419cae37cf120f35d">broadcast_if_dimension_le_one</a>(in1-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>());</div><div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> input2_win = window.<a class="code" href="classarm__compute_1_1_window.xhtml#ae20ec28555d4473419cae37cf120f35d">broadcast_if_dimension_le_one</a>(in2-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>());</div><div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;</div><div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;    <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div><div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> win = window;</div><div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;    win.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 1, 1));</div><div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;</div><div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  window_step_x         = 16;</div><div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x        = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>());</div><div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x          = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">end</a>());</div><div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_broadcast_across_x = in1-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">x</a>() != in2-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">x</a>();</div><div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;</div><div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> output_qinfo = out-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">quantization_info</a>().<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>();</div><div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;</div><div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;    <span class="keyword">const</span> float32x4_t voffseto   = vdupq_n_f32(output_qinfo.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">offset</a>);</div><div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;    <span class="keyword">const</span> float32x4_t invvscaleo = vdupq_n_f32(1.f / output_qinfo.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a>);</div><div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;</div><div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;    <span class="keywordflow">if</span>(is_broadcast_across_x)</div><div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;    {</div><div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;        <span class="comment">// Select the broadcast input on the X axis</span></div><div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span>     is_broadcast_input_2 = input2_win.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">step</a>() == 0;</div><div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;        <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a>         broadcast_win        = is_broadcast_input_2 ? input2_win : input1_win;</div><div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;        <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a>         non_broadcast_win    = !is_broadcast_input_2 ? input2_win : input1_win;</div><div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *broadcast_tensor     = is_broadcast_input_2 ? in2 : in1;</div><div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *non_broadcast_tensor = !is_broadcast_input_2 ? in2 : in1;</div><div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;</div><div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;        <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> broadcast_qinfo     = broadcast_tensor-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">quantization_info</a>().<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>();</div><div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;        <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> non_broadcast_qinfo = non_broadcast_tensor-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">quantization_info</a>().<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>();</div><div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;</div><div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;        <span class="keyword">const</span> int32x4_t   voffset_non_broadcast = vdupq_n_s32(non_broadcast_qinfo.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">offset</a>);</div><div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;        <span class="keyword">const</span> float32x4_t vscale_non_broadcast  = vdupq_n_f32(non_broadcast_qinfo.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a>);</div><div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;</div><div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div><div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;        non_broadcast_win.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 1, 1));</div><div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;</div><div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> broadcast_input(broadcast_tensor, broadcast_win);</div><div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> non_broadcast_input(non_broadcast_tensor, non_broadcast_win);</div><div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> output(out, win);</div><div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;</div><div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(win, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;)</div><div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;        {</div><div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_input_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(non_broadcast_input.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>());</div><div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr              = <span class="keyword">reinterpret_cast&lt;</span>int8_t *<span class="keyword">&gt;</span>(output.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>());</div><div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;</div><div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;            <span class="keyword">const</span> int8_t        broadcast_value  = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(broadcast_input.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>());</div><div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;            <span class="keyword">const</span> float32x4x4_t broadcast_vector = <a class="code" href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">vdequantize</a>(vdupq_n_s8(broadcast_value), broadcast_qinfo);</div><div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;</div><div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;            <span class="keywordtype">int</span> x = (*broadcast_func)(window_start_x, window_end_x, window_step_x, non_broadcast_input_ptr, broadcast_vector, output_ptr,</div><div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;                                      voffset_non_broadcast, vscale_non_broadcast, voffseto, invvscaleo, !is_broadcast_input_2);</div><div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;            <span class="keywordflow">for</span>(; x &lt; window_end_x; ++x)</div><div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;            {</div><div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> afs   = <a class="code" href="namespacearm__compute.xhtml#afe6fcf1a0c6f6c2d2cb10a8c14fa9131">dequantize_qasymm8_signed</a>(*(non_broadcast_input_ptr + x), non_broadcast_qinfo);</div><div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>   = <a class="code" href="namespacearm__compute.xhtml#afe6fcf1a0c6f6c2d2cb10a8c14fa9131">dequantize_qasymm8_signed</a>(broadcast_value, broadcast_qinfo);</div><div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;                *(output_ptr + x) = (*scalar_func)(!is_broadcast_input_2 ? <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a> : afs, !is_broadcast_input_2 ? afs : <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>, output_qinfo);</div><div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;            }</div><div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;        },</div><div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;        broadcast_input, non_broadcast_input, output);</div><div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;    }</div><div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;    {</div><div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;        <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> input1_qinfo = in1-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">quantization_info</a>().<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>();</div><div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;        <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> input2_qinfo = in2-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">quantization_info</a>().<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>();</div><div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;</div><div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;        <span class="comment">// Input1 quantization info</span></div><div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;        <span class="keyword">const</span> int32x4_t   voffset1 = vdupq_n_s32(input1_qinfo.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">offset</a>);</div><div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;        <span class="keyword">const</span> float32x4_t vscale1  = vdupq_n_f32(input1_qinfo.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a>);</div><div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;</div><div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;        <span class="comment">// Input2 quantization info</span></div><div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;        <span class="keyword">const</span> int32x4_t   voffset2 = vdupq_n_s32(input2_qinfo.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">offset</a>);</div><div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;        <span class="keyword">const</span> float32x4_t vscale2  = vdupq_n_f32(input2_qinfo.<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a>);</div><div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;</div><div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div><div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;        input1_win.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 1, 1));</div><div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;        input2_win.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 1, 1));</div><div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;</div><div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> input1(in1, input1_win);</div><div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> input2(in2, input2_win);</div><div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;        <a class="code" href="classarm__compute_1_1_iterator.xhtml">Iterator</a> output(out, win);</div><div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;</div><div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(win, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;)</div><div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;        {</div><div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input1_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(input1.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>());</div><div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input2_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(input2.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>());</div><div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span>int8_t *<span class="keyword">&gt;</span>(output.<a class="code" href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">ptr</a>());</div><div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;</div><div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;            <span class="keywordtype">int</span> x = (*neon_func)(window_start_x, window_end_x, window_step_x, input1_ptr, input2_ptr, output_ptr, voffset1, voffset2,</div><div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;                                 vscale1, vscale2, voffseto, invvscaleo);</div><div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;            <span class="keywordflow">for</span>(; x &lt; window_end_x; ++x)</div><div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;            {</div><div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> afs   = <a class="code" href="namespacearm__compute.xhtml#afe6fcf1a0c6f6c2d2cb10a8c14fa9131">dequantize_qasymm8_signed</a>(*(input1_ptr + x), input1_qinfo);</div><div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>   = <a class="code" href="namespacearm__compute.xhtml#afe6fcf1a0c6f6c2d2cb10a8c14fa9131">dequantize_qasymm8_signed</a>(*(input2_ptr + x), input2_qinfo);</div><div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;                *(output_ptr + x) = (*scalar_func)(afs, <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>, output_qinfo);</div><div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;            }</div><div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;        },</div><div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;        input1, input2, output);</div><div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;    }</div><div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;}</div><div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;</div><div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;<span class="keyword">template</span> &lt;ArithmeticOperation op&gt;</div><div class="line"><a name="l01071"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a9627c97b4adec6501e3b1f23ec750fbc"> 1071</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a9627c97b4adec6501e3b1f23ec750fbc">elementwise_arithm_op_quantized</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</div><div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;{</div><div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;    <a class="code" href="namespacearm__compute_1_1cpu.xhtml#aae3f4470575b8ef973d136101ea80b68">elementwise_op_quantized</a>(in1, in2, out, window, &amp;elementwise_arithm_op_quantized_scalar&lt;op&gt;,</div><div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;                             &amp;elementwise_arithm_op_quantized_broadcast_loop&lt;op&gt;,</div><div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;                             &amp;elementwise_arithm_op_quantized_loop&lt;op&gt;);</div><div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;}</div><div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;</div><div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;<span class="keyword">template</span> &lt;ArithmeticOperation op&gt;</div><div class="line"><a name="l01079"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a9953a8057dee990456f905a5099c9730"> 1079</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a9953a8057dee990456f905a5099c9730">elementwise_arithm_op_quantized_signed</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</div><div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;{</div><div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;    <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a1806b9850ee209fa95836d94e33e176f">elementwise_op_quantized_signed</a>(in1, in2, out, window, &amp;elementwise_arithm_op_quantized_signed_scalar&lt;op&gt;,</div><div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;                                    &amp;elementwise_arithm_op_quantized_signed_broadcast_loop&lt;op&gt;,</div><div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;                                    &amp;elementwise_arithm_op_quantized_singed_loop&lt;op&gt;);</div><div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;}</div><div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;</div><div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;<span class="keyword">template</span> &lt;ComparisonOperation op&gt;</div><div class="line"><a name="l01087"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a0cc9dbc4c9cc16127d546998da1bd4c7"> 1087</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a0cc9dbc4c9cc16127d546998da1bd4c7">elementwise_comp_op_quantized</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</div><div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;{</div><div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;    <a class="code" href="namespacearm__compute_1_1cpu.xhtml#aae3f4470575b8ef973d136101ea80b68">elementwise_op_quantized</a>(in1, in2, out, window, &amp;elementwise_comp_op_quantized_scalar&lt;op&gt;,</div><div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;                             &amp;elementwise_comp_op_quantized_broadcast_loop&lt;op&gt;,</div><div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;                             &amp;elementwise_comp_op_quantized_loop&lt;op&gt;);</div><div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;}</div><div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;</div><div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;<span class="keyword">template</span> &lt;ComparisonOperation op&gt;</div><div class="line"><a name="l01095"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#aada344073480d0eb85f751181cef6d8e"> 1095</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#aada344073480d0eb85f751181cef6d8e">elementwise_comp_op_quantized_signed</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</div><div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;{</div><div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;    <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a8d498841f133c2ce4c31076a6f700a4f">elementwise_comp_quantized_signed</a>(in1, in2, out, window, &amp;elementwise_comp_op_quantized_scalar&lt;op&gt;,</div><div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;                                      &amp;elementwise_comp_op_quantized_signed_broadcast_loop&lt;op&gt;,</div><div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;                                      &amp;elementwise_comp_op_quantized_signed_loop&lt;op&gt;);</div><div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;}</div><div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;} <span class="comment">// namespace cpu</span></div><div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;</div><div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* SRC_CORE_NEON_KERNELS_ELEMENTWISE_IMPL_H */</span><span class="preprocessor"></span></div><div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a009469e4d9b8fce3b6d5e97d2077827d"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a></div><div class="ttdeci">__global uchar * offset(const Image *img, int x, int y)</div><div class="ttdoc">Get the pointer position of a Image. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01084">helpers.h:1084</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a26d9b05aae3ad0b55e92cde353d3bd15"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a26d9b05aae3ad0b55e92cde353d3bd15">arm_compute::cpu::elementwise_comp_op_quantized_broadcast_loop</a></div><div class="ttdeci">int elementwise_comp_op_quantized_broadcast_loop(int window_start_x, int window_end_x, int window_step_x, const uint8_t *non_broadcast_input_ptr, float32x4x4_t broadcast_vector, uint8_t *output_ptr, int32x4_t voffset_non_broadcast, float32x4_t vscale_non_broadcast, float32x4_t voffseto, float32x4_t invvscaleo, bool reorder)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00715">impl.h:715</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a136ae2cf27f2d1d2aac2da4c33d24c1c"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a136ae2cf27f2d1d2aac2da4c33d24c1c">arm_compute::cpu::elementwise_arithm_op_quantized_singed_loop</a></div><div class="ttdeci">int elementwise_arithm_op_quantized_singed_loop(int window_start_x, int window_end_x, int window_step_x, const int8_t *input1_ptr, const int8_t *input2_ptr, int8_t *output_ptr, int32x4_t voffset1, int32x4_t voffset2, float32x4_t vscale1, float32x4_t vscale2, float32x4_t voffseto, float32x4_t invvscaleo)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00630">impl.h:630</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a533635332a3a17c16d8f21c77e15e907"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a533635332a3a17c16d8f21c77e15e907">arm_compute::wrapper::vdiv</a></div><div class="ttdeci">float32x2_t vdiv(const float32x2_t &amp;a, const float32x2_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="div_8h_source.xhtml#l00058">div.h:58</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23d9f0c01c9e120dfb828ee922b7a8aeac9c9c146c630ca5ef9197c73c032f4a6"><div class="ttname"><a href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aeac9c9c146c630ca5ef9197c73c032f4a6">arm_compute::ArithmeticOperation::POWER</a></div><div class="ttdoc">x ^ y </div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_ae239dc51a686a455c70ff87fce9ea5aa"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#ae239dc51a686a455c70ff87fce9ea5aa">arm_compute::cpu::load_quantized</a></div><div class="ttdeci">float32x4x4_t load_quantized(const uint8_t *input1_ptr, const int32x4_t &amp;offset, const float32x4_t &amp;scale)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00482">impl.h:482</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_ad2a62b7914c8bff0e139b376ec38dbe7"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#ad2a62b7914c8bff0e139b376ec38dbe7">arm_compute::cpu::elementwise_comp_op_broadcast_8_loop</a></div><div class="ttdeci">int elementwise_comp_op_broadcast_8_loop(int window_start_x, int window_end_x, int window_step_x, const InputScalarType *non_broadcast_input_ptr, const InputScalarType &amp;broadcast_value, uint8_t *output_ptr, const bool reorder)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00348">impl.h:348</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a0df077147bf38575572e36582af9f573"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a0df077147bf38575572e36582af9f573">arm_compute::cpu::elementwise_comp_op_8_loop</a></div><div class="ttdeci">int elementwise_comp_op_8_loop(int window_start_x, int window_end_x, int window_step_x, const InputScalarType *input1_ptr, const InputScalarType *input2_ptr, uint8_t *output_ptr)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00397">impl.h:397</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23d9f0c01c9e120dfb828ee922b7a8aea29bbf66f7f8529ec47e394fb5a36c646"><div class="ttname"><a href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea29bbf66f7f8529ec47e394fb5a36c646">arm_compute::ArithmeticOperation::DIV</a></div><div class="ttdoc">(x / y) </div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_aea0b656edc428c1f7702d86bbb97df6b"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">arm_compute::wrapper::vmovn</a></div><div class="ttdeci">uint32x2_t vmovn(const uint64x2_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="movn_8h_source.xhtml#l00039">movn.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ac1d8253f8b422e143ab989ad2a4d29dd"><div class="ttname"><a href="namespacearm__compute.xhtml#ac1d8253f8b422e143ab989ad2a4d29dd">arm_compute::dequantize_qasymm8</a></div><div class="ttdeci">float dequantize_qasymm8(uint8_t value, const INFO_TYPE &amp;qinfo)</div><div class="ttdoc">Dequantize a value given an unsigned 8-bit asymmetric quantization scheme. </div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00359">QuantizationInfo.h:359</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_ab1893a2a9fc472d75b5fe897e63c5a41"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#ab1893a2a9fc472d75b5fe897e63c5a41">arm_compute::cpu::elementwise_arithm_op_quantized_broadcast_loop</a></div><div class="ttdeci">int elementwise_arithm_op_quantized_broadcast_loop(int window_start_x, int window_end_x, int window_step_x, const uint8_t *non_broadcast_input_ptr, float32x4x4_t broadcast_vector, uint8_t *output_ptr, int32x4_t voffset_non_broadcast, float32x4_t vscale_non_broadcast, float32x4_t voffseto, float32x4_t invvscaleo, bool reorder)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00648">impl.h:648</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_ae6f48be843bb47d4779d6613cd3ce68d"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#ae6f48be843bb47d4779d6613cd3ce68d">arm_compute::cpu::elementwise_comp_op_broadcast</a></div><div class="ttdeci">OutputVectorType elementwise_comp_op_broadcast(const InputVectorType &amp;a, const InputScalarType &amp;broadcast_value, const bool reorder)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00341">impl.h:341</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab8cef8b31b552b532a14ab8815e06285"><div class="ttname"><a href="namespacearm__compute.xhtml#ab8cef8b31b552b532a14ab8815e06285">arm_compute::quantize_qasymm8</a></div><div class="ttdeci">uint8_t quantize_qasymm8(float value, const INFO_TYPE &amp;qinfo, RoundingPolicy rounding_policy=RoundingPolicy::TO_NEAREST_UP)</div><div class="ttdoc">Quantize a value given an unsigned 8-bit asymmetric quantization scheme. </div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00303">QuantizationInfo.h:303</a></div></div>
<div class="ttc" id="structarm__compute_1_1wrapper_1_1traits_1_1vector__128__tag_xhtml"><div class="ttname"><a href="structarm__compute_1_1wrapper_1_1traits_1_1vector__128__tag.xhtml">arm_compute::wrapper::traits::vector_128_tag</a></div><div class="ttdoc">128-bit vector tag </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_n_e_o_n_2wrapper_2_traits_8h_source.xhtml#l00045">traits.h:45</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_1_1_dimension_xhtml_a918580dc9188825d67dbb203a43d02fe"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">arm_compute::Window::Dimension::step</a></div><div class="ttdeci">constexpr int step() const</div><div class="ttdoc">Return the step of the dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00107">Window.h:107</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a485ae62f3ade6c8d33c5c2e85b29c3a7"><div class="ttname"><a href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">arm_compute::vdequantize</a></div><div class="ttdeci">float32x4x2_t vdequantize(const uint8x8_t &amp;qv, const UniformQuantizationInfo &amp;qi)</div><div class="ttdoc">Dequantize a neon vector holding 8 quantized values. </div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00415">NEAsymm.h:415</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a15e0926812301b45c7e24e7eea269ab2"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a15e0926812301b45c7e24e7eea269ab2">arm_compute::cpu::elementwise_comp_op_broadcast_32_loop</a></div><div class="ttdeci">int elementwise_comp_op_broadcast_32_loop(int window_start_x, int window_end_x, int window_step_x, const InputScalarType *non_broadcast_input_ptr, const InputScalarType &amp;broadcast_value, uint8_t *output_ptr, const bool reorder)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00374">impl.h:374</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a4f12b7902ae53e3898b2ab779f962340"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">arm_compute::test::validation::scale</a></div><div class="ttdeci">NEScale scale</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00275">Scale.cpp:275</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a77f54eded7fef436d3a4f21ad5a00da6"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">arm_compute::wrapper::vloadq</a></div><div class="ttdeci">uint8x16_t vloadq(const uint8_t *ptr)</div><div class="ttdef"><b>Definition:</b> <a href="load_8h_source.xhtml#l00058">load.h:58</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a4c8d923ab1f2263472ff1815a0655701"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a4c8d923ab1f2263472ff1815a0655701">arm_compute::cpu::elementwise_comp_op_quantized_loop</a></div><div class="ttdeci">int elementwise_comp_op_quantized_loop(int window_start_x, int window_end_x, int window_step_x, const uint8_t *input1_ptr, const uint8_t *input2_ptr, uint8_t *output_ptr, int32x4_t voffset1, int32x4_t voffset2, float32x4_t vscale1, float32x4_t vscale2, float32x4_t voffseto, float32x4_t invvscaleo)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00679">impl.h:679</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a38e6bb15e7ac2da0795f3cfef2f29d6d"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a38e6bb15e7ac2da0795f3cfef2f29d6d">arm_compute::cpu::elementwise_comp_op_16</a></div><div class="ttdeci">void elementwise_comp_op_16(const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00465">impl.h:465</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_ae64977c9bd4690e8e3607e6fea754199"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#ae64977c9bd4690e8e3607e6fea754199">arm_compute::cpu::elementwise_comp_op_32_loop</a></div><div class="ttdeci">int elementwise_comp_op_32_loop(int window_start_x, int window_end_x, int window_step_x, const InputScalarType *input1_ptr, const InputScalarType *input2_ptr, uint8_t *output_ptr)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00427">impl.h:427</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a6e4a309149d475d17fdfd2d11c26b916"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a6e4a309149d475d17fdfd2d11c26b916">arm_compute::cpu::elementwise_arithm_op_broadcast</a></div><div class="ttdeci">VectorType::type elementwise_arithm_op_broadcast(const typename VectorType::type &amp;a, const ScalarType &amp;broadcast_value, const bool reorder)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00074">impl.h:74</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_acae4ec59246f93845fa78120d83d7c1e"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">arm_compute::wrapper::vsub</a></div><div class="ttdeci">uint8x8_t vsub(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="intrinsics_2sub_8h_source.xhtml#l00039">sub.h:39</a></div></div>
<div class="ttc" id="structarm__compute_1_1_uniform_quantization_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_uniform_quantization_info.xhtml">arm_compute::UniformQuantizationInfo</a></div><div class="ttdoc">Quantization info when assuming per layer quantization. </div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00044">QuantizationInfo.h:44</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_1_1_dimension_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml">arm_compute::Window::Dimension</a></div><div class="ttdoc">Describe one of the image&amp;#39;s dimensions with a start, end and step. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00079">Window.h:79</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_abb34d4000c420ca4fed96903be0fdc64"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#abb34d4000c420ca4fed96903be0fdc64">arm_compute::cpu::elementwise_comp_op_scalar</a></div><div class="ttdeci">uint8_t elementwise_comp_op_scalar(const InputScalarType &amp;a, const InputScalarType &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00278">impl.h:278</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a324f99e84c7277809b5a774363197382"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a324f99e84c7277809b5a774363197382">arm_compute::cpu::elementwise_comp_op_broadcast_16_loop</a></div><div class="ttdeci">int elementwise_comp_op_broadcast_16_loop(int window_start_x, int window_end_x, int window_step_x, const InputScalarType *non_broadcast_input_ptr, const InputScalarType &amp;broadcast_value, uint8_t *output_ptr, const bool reorder)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00361">impl.h:361</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a2d299363c9fc33334c571fa29ca4f58ca1cfdf0e8d0c87a228c1f40d9bee7888b"><div class="ttname"><a href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca1cfdf0e8d0c87a228c1f40d9bee7888b">arm_compute::ComparisonOperation::Less</a></div><div class="ttdoc">Less comparison (  ) </div></div>
<div class="ttc" id="structarm__compute_1_1_uniform_quantization_info_xhtml_a1d28dec57cce925ad92342891bd71e7c"><div class="ttname"><a href="structarm__compute_1_1_uniform_quantization_info.xhtml#a1d28dec57cce925ad92342891bd71e7c">arm_compute::UniformQuantizationInfo::scale</a></div><div class="ttdeci">float scale</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00066">QuantizationInfo.h:66</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a566497df1ac44164eb8643f5d469afae"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a566497df1ac44164eb8643f5d469afae">arm_compute::wrapper::vpow</a></div><div class="ttdeci">float32x4_t vpow(const float32x4_t &amp;a, const float32x4_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="pow_8h_source.xhtml#l00040">pow.h:40</a></div></div>
<div class="ttc" id="_n_e_asymm_8h_xhtml"><div class="ttname"><a href="_n_e_asymm_8h.xhtml">NEAsymm.h</a></div></div>
<div class="ttc" id="gemm__interleaved_8hpp_xhtml_a6fbca3dca9ecb372332fc525529cc086"><div class="ttname"><a href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></div><div class="ttdeci">decltype(strategy::transforms) typedef type</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00259">gemm_interleaved.hpp:259</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml">arm_compute::ITensor</a></div><div class="ttdoc">Interface for CPU tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_8h_source.xhtml#l00036">ITensor.h:36</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2022 Arm Limited. </div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_af7a0f3e622aa4bc8c6077d2262a04e2e"><div class="ttname"><a href="namespacearm__compute.xhtml#af7a0f3e622aa4bc8c6077d2262a04e2e">arm_compute::vfloorq_f32</a></div><div class="ttdeci">float32x4_t vfloorq_f32(float32x4_t val)</div><div class="ttdoc">Calculate floor of a vector. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a2d299363c9fc33334c571fa29ca4f58ca758b05d899def79c9eb864ad4f96be1f"><div class="ttname"><a href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca758b05d899def79c9eb864ad4f96be1f">arm_compute::ComparisonOperation::GreaterEqual</a></div><div class="ttdoc">Greater equal comparison (  ) </div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a1d0c8d90c3c46f6f1eb5f80e1a82254c"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a1d0c8d90c3c46f6f1eb5f80e1a82254c">arm_compute::cpu::elementwise_arithm_op_quantized_signed_scalar</a></div><div class="ttdeci">int8_t elementwise_arithm_op_quantized_signed_scalar(const float &amp;a, const float &amp;b, UniformQuantizationInfo qinfo)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00568">impl.h:568</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_aa87f8fc26981b0f3228a78c83b95b802"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">arm_compute::Dimensions::x</a></div><div class="ttdeci">T x() const</div><div class="ttdoc">Alias to access the size of the first dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00087">Dimensions.h:87</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_abbfe5d27e11d8842fdb4cef411832f8e"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#abbfe5d27e11d8842fdb4cef411832f8e">arm_compute::cpu::elementwise_arithm_op</a></div><div class="ttdeci">VectorType::type elementwise_arithm_op(const typename VectorType::type &amp;a, const typename VectorType::type &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00034">impl.h:34</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_af8cc8f4068cf9120bf433df94926221f"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#af8cc8f4068cf9120bf433df94926221f">arm_compute::cpu::elementwise_comp_op_8</a></div><div class="ttdeci">void elementwise_comp_op_8(const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00456">impl.h:456</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a06083700f047b600de212931e66daab7"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a06083700f047b600de212931e66daab7">arm_compute::cpu::elementwise_arithm_op_quantized_scalar</a></div><div class="ttdeci">uint8_t elementwise_arithm_op_quantized_scalar(const float &amp;a, const float &amp;b, UniformQuantizationInfo qinfo)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00562">impl.h:562</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a9627c97b4adec6501e3b1f23ec750fbc"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a9627c97b4adec6501e3b1f23ec750fbc">arm_compute::cpu::elementwise_arithm_op_quantized</a></div><div class="ttdeci">void elementwise_arithm_op_quantized(const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l01071">impl.h:1071</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_aa16ace001ab8287faa46d6962f369219"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">arm_compute::wrapper::vgetlane</a></div><div class="ttdeci">uint8_t vgetlane(const uint8x8_t vector, const unsigned int lane)</div><div class="ttdef"><b>Definition:</b> <a href="getlane_8h_source.xhtml#l00091">getlane.h:91</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_aa96e81276ee4f87ab386cd05a5539a7d"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">arm_compute::Window::DimX</a></div><div class="ttdeci">static constexpr size_t DimX</div><div class="ttdoc">Alias for dimension 0 also known as X dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00043">Window.h:43</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_aed661d4bd9a14812355576773982eb7a"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#aed661d4bd9a14812355576773982eb7a">arm_compute::wrapper::vnot</a></div><div class="ttdeci">uint8x8_t vnot(const uint8x8_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="not_8h_source.xhtml#l00039">not.h:39</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a82713bd9209865da67e8624a162ef9c1"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a82713bd9209865da67e8624a162ef9c1">arm_compute::cpu::elementwise_op</a></div><div class="ttdeci">void elementwise_op(const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window, OutputScalarType(*scalar_func)(const InputScalarType &amp;, const InputScalarType &amp;), int(*broadcast_func)(int, int, int, const InputScalarType *, const InputScalarType &amp;, OutputScalarType *, const bool), int(*neon_func)(int, int, int, const InputScalarType *, const InputScalarType *, OutputScalarType *))</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00084">impl.h:84</a></div></div>
<div class="ttc" id="structarm__compute_1_1wrapper_1_1traits_1_1neon__vector_xhtml"><div class="ttname"><a href="structarm__compute_1_1wrapper_1_1traits_1_1neon__vector.xhtml">arm_compute::wrapper::traits::neon_vector</a></div><div class="ttdoc">Create the appropriate SIMD vector given its type and size in terms of elements. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_n_e_o_n_2wrapper_2_traits_8h_source.xhtml#l00048">traits.h:48</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a7c66505457d00ece3aa4b34cab80757d"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">arm_compute::ITensorInfo::tensor_shape</a></div><div class="ttdeci">virtual const TensorShape &amp; tensor_shape() const =0</div><div class="ttdoc">Size for each dimension of the tensor. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a464ea9027ae01e64014040d69302800f"><div class="ttname"><a href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">arm_compute::quantize_qasymm8_signed</a></div><div class="ttdeci">int8_t quantize_qasymm8_signed(float value, const INFO_TYPE &amp;qinfo, RoundingPolicy rounding_policy=RoundingPolicy::TO_NEAREST_UP)</div><div class="ttdoc">Quantize a value given a signed 8-bit asymmetric quantization scheme. </div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00317">QuantizationInfo.h:317</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_ab026a1aeec48074092f548c130c323f4"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ab026a1aeec48074092f548c130c323f4">arm_compute::wrapper::vmin</a></div><div class="ttdeci">uint8x8_t vmin(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="min_8h_source.xhtml#l00039">min.h:39</a></div></div>
<div class="ttc" id="classarm__compute_1_1_coordinates_xhtml"><div class="ttname"><a href="classarm__compute_1_1_coordinates.xhtml">arm_compute::Coordinates</a></div><div class="ttdoc">Coordinates of an item. </div><div class="ttdef"><b>Definition:</b> <a href="_coordinates_8h_source.xhtml#l00037">Coordinates.h:37</a></div></div>
<div class="ttc" id="classarm__compute_1_1_quantization_info_xhtml_a706fc156bcd4c45441bcaad05884b57d"><div class="ttname"><a href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">arm_compute::QuantizationInfo::uniform</a></div><div class="ttdeci">UniformQuantizationInfo uniform() const</div><div class="ttdoc">Return per layer quantization info. </div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00150">QuantizationInfo.h:150</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml_a0e95dc1e53c361348314873b168ae237"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">arm_compute::ITensor::info</a></div><div class="ttdeci">virtual ITensorInfo * info() const =0</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor&amp;#39;s metadata. </div></div>
<div class="ttc" id="classarm__compute_1_1_iterator_xhtml_ab260e292b1df3944bc1d55a9b2301e41"><div class="ttname"><a href="classarm__compute_1_1_iterator.xhtml#ab260e292b1df3944bc1d55a9b2301e41">arm_compute::Iterator::ptr</a></div><div class="ttdeci">constexpr uint8_t * ptr() const</div><div class="ttdoc">Return a pointer to the current pixel. </div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00139">Helpers.inl:139</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_acd3d2bba51cb84d34dd7656ad2375a6e"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">arm_compute::Window::set</a></div><div class="ttdeci">void set(size_t dimension, const Dimension &amp;dim)</div><div class="ttdoc">Set the values of a given dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00049">Window.inl:49</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a1598e7eb12a58fc53559332cd0c3ab6f"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">arm_compute::wrapper::vcombine</a></div><div class="ttdeci">uint8x16_t vcombine(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="combine_8h_source.xhtml#l00039">combine.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a77a76d4cabb3dcbb44ecb12034a28e46"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a77a76d4cabb3dcbb44ecb12034a28e46">arm_compute::cpu::elementwise_arithm_op_quantized_signed_broadcast_loop</a></div><div class="ttdeci">int elementwise_arithm_op_quantized_signed_broadcast_loop(int window_start_x, int window_end_x, int window_step_x, const int8_t *non_broadcast_input_ptr, float32x4x4_t broadcast_vector, int8_t *output_ptr, int32x4_t voffset_non_broadcast, float32x4_t vscale_non_broadcast, float32x4_t voffseto, float32x4_t invvscaleo, bool reorder)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00663">impl.h:663</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_ae20ec28555d4473419cae37cf120f35d"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#ae20ec28555d4473419cae37cf120f35d">arm_compute::Window::broadcast_if_dimension_le_one</a></div><div class="ttdeci">Window broadcast_if_dimension_le_one(const TensorShape &amp;shape) const</div><div class="ttdoc">Don&amp;#39;t advance in the dimension where shape is less equal to 1. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00120">Window.inl:120</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23d9f0c01c9e120dfb828ee922b7a8aea26a4b44a837bf97b972628509912b4a5"><div class="ttname"><a href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea26a4b44a837bf97b972628509912b4a5">arm_compute::ArithmeticOperation::MAX</a></div><div class="ttdoc">Max(x, y) </div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_ac758cf39f9e6885c73b6814ac80ff0ec"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#ac758cf39f9e6885c73b6814ac80ff0ec">arm_compute::cpu::elementwise_comp_op</a></div><div class="ttdeci">OutputVectorType elementwise_comp_op(const InputVectorType &amp;a, const InputVectorType &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00309">impl.h:309</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a3f3e1a3200223e6a304a533b1016e749"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">arm_compute::ITensorInfo::quantization_info</a></div><div class="ttdeci">virtual QuantizationInfo quantization_info() const =0</div><div class="ttdoc">Get the quantization settings (scale and offset) of the tensor. </div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a1806b9850ee209fa95836d94e33e176f"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a1806b9850ee209fa95836d94e33e176f">arm_compute::cpu::elementwise_op_quantized_signed</a></div><div class="ttdeci">void elementwise_op_quantized_signed(const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window, int8_t(*scalar_func)(const float &amp;, const float &amp;, UniformQuantizationInfo), int(*broadcast_func)(int, int, int, const int8_t *, float32x4x4_t, int8_t *, int32x4_t, float32x4_t, float32x4_t, float32x4_t, const bool), int(*neon_func)(int, int, int, const int8_t *, const int8_t *, int8_t *, int32x4_t, int32x4_t, float32x4_t, float32x4_t, float32x4_t, float32x4_t))</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00963">impl.h:963</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23d9f0c01c9e120dfb828ee922b7a8aea25c5689f5cf73ac778d6aec298e02a7f"><div class="ttname"><a href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea25c5689f5cf73ac778d6aec298e02a7f">arm_compute::ArithmeticOperation::PRELU</a></div><div class="ttdoc">y*x if x &lt; 0, x otherwise </div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_aae3f4470575b8ef973d136101ea80b68"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#aae3f4470575b8ef973d136101ea80b68">arm_compute::cpu::elementwise_op_quantized</a></div><div class="ttdeci">void elementwise_op_quantized(const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window, uint8_t(*scalar_func)(const float &amp;, const float &amp;, UniformQuantizationInfo), int(*broadcast_func)(int, int, int, const uint8_t *, float32x4x4_t, uint8_t *, int32x4_t, float32x4_t, float32x4_t, float32x4_t, const bool), int(*neon_func)(int, int, int, const uint8_t *, const uint8_t *, uint8_t *, int32x4_t, int32x4_t, float32x4_t, float32x4_t, float32x4_t, float32x4_t))</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00748">impl.h:748</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a4c7874a7ad657bd64f21bc52840ce4ee"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a4c7874a7ad657bd64f21bc52840ce4ee">arm_compute::cpu::elementwise_comp_op_quantized_signed_loop</a></div><div class="ttdeci">int elementwise_comp_op_quantized_signed_loop(int window_start_x, int window_end_x, int window_step_x, const int8_t *input1_ptr, const int8_t *input2_ptr, uint8_t *output_ptr, int32x4_t voffset1, int32x4_t voffset2, float32x4_t vscale1, float32x4_t vscale2, float32x4_t voffseto, float32x4_t invvscaleo)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00697">impl.h:697</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5"><div class="ttname"><a href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5">arm_compute::ComparisonOperation::Equal</a></div><div class="ttdoc">Equal comparison (  ) </div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a918ccd824090fc763e31459310bdea53"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a918ccd824090fc763e31459310bdea53">arm_compute::cpu::elementwise_arithm_op_quantized_loop</a></div><div class="ttdeci">int elementwise_arithm_op_quantized_loop(int window_start_x, int window_end_x, int window_step_x, const uint8_t *input1_ptr, const uint8_t *input2_ptr, uint8_t *output_ptr, int32x4_t voffset1, int32x4_t voffset2, float32x4_t vscale1, float32x4_t vscale2, float32x4_t voffseto, float32x4_t invvscaleo)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00612">impl.h:612</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a"><div class="ttname"><a href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">arm_compute::ComparisonOperation::Greater</a></div><div class="ttdoc">Greater comparison (  ) </div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a1d55687f004c1a3302485b2cb8da093b"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a1d55687f004c1a3302485b2cb8da093b">arm_compute::cpu::elementwise_arithm_op_broadcast_loop</a></div><div class="ttdeci">int elementwise_arithm_op_broadcast_loop(int window_start_x, int window_end_x, int window_step_x, const ScalarType *non_broadcast_input_ptr, const ScalarType &amp;broadcast_value, ScalarType *output_ptr, const bool reorder)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00254">impl.h:254</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a7eedba29396b0db728bffdf5f202d85c"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a7eedba29396b0db728bffdf5f202d85c">arm_compute::wrapper::vcgt</a></div><div class="ttdeci">uint8x8_t vcgt(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="cgt_8h_source.xhtml#l00039">cgt.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5827eb9cb394e74af87f74bd354fb45bace31e2a082d17e038fcc6e3006166653"><div class="ttname"><a href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45bace31e2a082d17e038fcc6e3006166653">arm_compute::ReductionOperation::MIN</a></div><div class="ttdoc">Min. </div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a66c8dd218a4863a14fec363e3dd13dc4"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">arm_compute::wrapper::vmul</a></div><div class="ttdeci">uint8x8_t vmul(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="mul_8h_source.xhtml#l00039">mul.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a8e5924674eee0f441d54eb75d656700f"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a8e5924674eee0f441d54eb75d656700f">arm_compute::wrapper::vbsl</a></div><div class="ttdeci">uint8x8_t vbsl(const uint8x8_t &amp;a, const uint8x8_t &amp;b, const uint8x8_t &amp;c)</div><div class="ttdef"><b>Definition:</b> <a href="bsl_8h_source.xhtml#l00039">bsl.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a4c0ec3e8fab2ea0202cedcc94da53f25"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a4c0ec3e8fab2ea0202cedcc94da53f25">arm_compute::cpu::elementwise_arithm_op_scalar</a></div><div class="ttdeci">ScalarType elementwise_arithm_op_scalar(const ScalarType &amp;a, const ScalarType &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00161">impl.h:161</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a0cc9dbc4c9cc16127d546998da1bd4c7"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a0cc9dbc4c9cc16127d546998da1bd4c7">arm_compute::cpu::elementwise_comp_op_quantized</a></div><div class="ttdeci">void elementwise_comp_op_quantized(const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l01087">impl.h:1087</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a550901088b6a737a17d7eeb052ba9ef6"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a550901088b6a737a17d7eeb052ba9ef6">arm_compute::cpu::elementwise_comp_op_16_loop</a></div><div class="ttdeci">int elementwise_comp_op_16_loop(int window_start_x, int window_end_x, int window_step_x, const InputScalarType *input1_ptr, const InputScalarType *input2_ptr, uint8_t *output_ptr)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00412">impl.h:412</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a5bb53d2922eed568fcd9de9081faeeb7"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a5bb53d2922eed568fcd9de9081faeeb7">arm_compute::cpu::load_quantized_signed</a></div><div class="ttdeci">float32x4x4_t load_quantized_signed(const int8_t *input1_ptr, const int32x4_t &amp;offset, const float32x4_t &amp;scale)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00497">impl.h:497</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ad85d7becf0c6e3cffbc255489808e219"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">arm_compute::test::validation::qinfo</a></div><div class="ttdeci">const QuantizationInfo qinfo</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00155">Im2Col.cpp:155</a></div></div>
<div class="ttc" id="structarm__compute_1_1_uniform_quantization_info_xhtml_a97bd6c077f3c7769f575b82988b9b668"><div class="ttname"><a href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">arm_compute::UniformQuantizationInfo::offset</a></div><div class="ttdeci">int32_t offset</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00067">QuantizationInfo.h:67</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a2d299363c9fc33334c571fa29ca4f58cad3e6fdac55bb7b0edd7834c968ba1f38"><div class="ttname"><a href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58cad3e6fdac55bb7b0edd7834c968ba1f38">arm_compute::ComparisonOperation::LessEqual</a></div><div class="ttdoc">Less equal comparison (  ) </div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_ae7943ea9c1f74dc72c62d4cc3966a459"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">arm_compute::wrapper::vstore</a></div><div class="ttdeci">void vstore(uint8_t *ptr, uint8x8_t val)</div><div class="ttdef"><b>Definition:</b> <a href="store_8h_source.xhtml#l00039">store.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_afe6fcf1a0c6f6c2d2cb10a8c14fa9131"><div class="ttname"><a href="namespacearm__compute.xhtml#afe6fcf1a0c6f6c2d2cb10a8c14fa9131">arm_compute::dequantize_qasymm8_signed</a></div><div class="ttdeci">float dequantize_qasymm8_signed(int8_t value, const INFO_TYPE &amp;qinfo)</div><div class="ttdoc">Dequantize a value given a signed 8-bit asymmetric quantization scheme. </div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00372">QuantizationInfo.h:372</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_aac9f2850a80f033f33e04660ac3bbd08"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#aac9f2850a80f033f33e04660ac3bbd08">arm_compute::cpu::store_quantized_signed</a></div><div class="ttdeci">void store_quantized_signed(int8_t *output_ptr, const int32x4x4_t &amp;out)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00540">impl.h:540</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a39e87435be178fba49b76f49426ef873"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">arm_compute::wrapper::vdup_n</a></div><div class="ttdeci">uint8x8_t vdup_n(uint8_t value, traits::vector_64_tag)</div><div class="ttdef"><b>Definition:</b> <a href="dup__n_8h_source.xhtml#l00041">dup_n.h:41</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5002bf7ec46d52971f9526e94172cfee"><div class="ttname"><a href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;... iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00077">Helpers.inl:77</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_aada344073480d0eb85f751181cef6d8e"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#aada344073480d0eb85f751181cef6d8e">arm_compute::cpu::elementwise_comp_op_quantized_signed</a></div><div class="ttdeci">void elementwise_comp_op_quantized_signed(const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l01095">impl.h:1095</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a7ecfb489f7d67ef4d8c1ba77e1060702"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a7ecfb489f7d67ef4d8c1ba77e1060702">arm_compute::cpu::elementwise_arithm_op_loop</a></div><div class="ttdeci">int elementwise_arithm_op_loop(int window_start_x, int window_end_x, int window_step_x, const ScalarType *input1_ptr, const ScalarType *input2_ptr, ScalarType *output_ptr)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00240">impl.h:240</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23d9f0c01c9e120dfb828ee922b7a8aea46ea186b87dc545033d86ba8d6e63916"><div class="ttname"><a href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea46ea186b87dc545033d86ba8d6e63916">arm_compute::ArithmeticOperation::SQUARED_DIFF</a></div><div class="ttdoc">(x - y)^2 </div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_aa1c6a4a70ded6258fff31b3de53dfb8f"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">arm_compute::graph::bfs</a></div><div class="ttdeci">std::vector&lt; NodeID &gt; bfs(Graph &amp;g)</div><div class="ttdoc">Breadth first search traversal. </div><div class="ttdef"><b>Definition:</b> <a href="_topological_sort_8cpp_source.xhtml#l00072">TopologicalSort.cpp:72</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a3b186f6a61b072a9952403a3ef8548b4"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a3b186f6a61b072a9952403a3ef8548b4">arm_compute::cpu::elementwise_comp_op_32</a></div><div class="ttdeci">void elementwise_comp_op_32(const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00474">impl.h:474</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_adc8234d074c193f521029e81cda80bb2"><div class="ttname"><a href="namespacearm__compute.xhtml#adc8234d074c193f521029e81cda80bb2">arm_compute::qasymm8x16_signed_t</a></div><div class="ttdeci">int8x16_t qasymm8x16_signed_t</div><div class="ttdoc">8 bit quantized signed asymmetric vector with 16 elements </div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00043">NEAsymm.h:43</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a8d498841f133c2ce4c31076a6f700a4f"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a8d498841f133c2ce4c31076a6f700a4f">arm_compute::cpu::elementwise_comp_quantized_signed</a></div><div class="ttdeci">void elementwise_comp_quantized_signed(const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window, uint8_t(*scalar_func)(const float &amp;, const float &amp;, UniformQuantizationInfo), int(*broadcast_func)(int, int, int, const int8_t *, float32x4x4_t, uint8_t *, int32x4_t, float32x4_t, float32x4_t, float32x4_t, const bool), int(*neon_func)(int, int, int, const int8_t *, const int8_t *, uint8_t *, int32x4_t, int32x4_t, float32x4_t, float32x4_t, float32x4_t, float32x4_t))</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00856">impl.h:856</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_ac216018d489f5f9ea7d1907f593a039e"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#ac216018d489f5f9ea7d1907f593a039e">arm_compute::cpu::elementwise_comp_op_quantized_scalar</a></div><div class="ttdeci">uint8_t elementwise_comp_op_quantized_scalar(const float &amp;a, const float &amp;b, UniformQuantizationInfo qinfo)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00590">impl.h:590</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_1_1_dimension_xhtml_a0f590bfcf19110f44efc502e7b5c1d9e"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">arm_compute::Window::Dimension::end</a></div><div class="ttdeci">constexpr int end() const</div><div class="ttdoc">Return the end of the dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00102">Window.h:102</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a2d299363c9fc33334c571fa29ca4f58ca19bb0af2c3c530538cb41aff7f235b96"><div class="ttname"><a href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca19bb0af2c3c530538cb41aff7f235b96">arm_compute::ComparisonOperation::NotEqual</a></div><div class="ttdoc">NotEqual comparison (  ) </div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a1f777df8db31568a3436995df958714c"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a1f777df8db31568a3436995df958714c">arm_compute::wrapper::vcge</a></div><div class="ttdeci">uint8x8_t vcge(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="cge_8h_source.xhtml#l00039">cge.h:39</a></div></div>
<div class="ttc" id="classarm__compute_1_1_iterator_xhtml"><div class="ttname"><a href="classarm__compute_1_1_iterator.xhtml">arm_compute::Iterator</a></div><div class="ttdoc">Iterator updated by execute_window_loop for each window element. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00046">Helpers.h:46</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_a8d1d14000c959f1146a8a64e1dafae5f"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">arm_compute::wrapper::vmax</a></div><div class="ttdeci">uint8x8_t vmax(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="max_8h_source.xhtml#l00039">max.h:39</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_1_1_dimension_xhtml_ab24e31d1a4830bf79564ee902ec6c060"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">arm_compute::Window::Dimension::start</a></div><div class="ttdeci">constexpr int start() const</div><div class="ttdoc">Return the start of the dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00097">Window.h:97</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml">arm_compute::Window</a></div><div class="ttdoc">Describe a multidimensional execution window. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00039">Window.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1wrapper_xhtml_aa7ccd655f600847f9d471604ed47e810"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#aa7ccd655f600847f9d471604ed47e810">arm_compute::wrapper::vceq</a></div><div class="ttdeci">uint8x8_t vceq(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="ceq_8h_source.xhtml#l00039">ceq.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a981cf35141a952f493df0398da0b3d99"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a981cf35141a952f493df0398da0b3d99">arm_compute::cpu::store_quantized</a></div><div class="ttdeci">void store_quantized(uint8_t *output_ptr, const uint32x4x4_t &amp;out)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00512">impl.h:512</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a9953a8057dee990456f905a5099c9730"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a9953a8057dee990456f905a5099c9730">arm_compute::cpu::elementwise_arithm_op_quantized_signed</a></div><div class="ttdeci">void elementwise_arithm_op_quantized_signed(const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l01079">impl.h:1079</a></div></div>
<div class="ttc" id="namespacereorder_xhtml"><div class="ttname"><a href="namespacereorder.xhtml">reorder</a></div><div class="ttdoc">Sets the macro arm_any if compiling for Aarch32 or Aarch64. </div><div class="ttdef"><b>Definition:</b> <a href="_cpu_permute_kernel_8cpp_source.xhtml#l00031">CpuPermuteKernel.cpp:31</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_a273fd2ecdd45169b2f702f01a7e5e382"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">arm_compute::Window::x</a></div><div class="ttdeci">constexpr const Dimension &amp; x() const</div><div class="ttdoc">Alias to access the first dimension of the window. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00159">Window.h:159</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ac7e1832b8c58f07a98fc8d390b16ac27"><div class="ttname"><a href="namespacearm__compute.xhtml#ac7e1832b8c58f07a98fc8d390b16ac27">arm_compute::qasymm8x16_t</a></div><div class="ttdeci">uint8x16_t qasymm8x16_t</div><div class="ttdoc">8 bit quantized asymmetric vector with 16 elements </div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00037">NEAsymm.h:37</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a30b6a7350fda90e0f6d8dc86df9d586f"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a30b6a7350fda90e0f6d8dc86df9d586f">arm_compute::cpu::elementwise_comp_op_quantized_signed_broadcast_loop</a></div><div class="ttdeci">int elementwise_comp_op_quantized_signed_broadcast_loop(int window_start_x, int window_end_x, int window_step_x, const int8_t *non_broadcast_input_ptr, float32x4x4_t broadcast_vector, uint8_t *output_ptr, int32x4_t voffset_non_broadcast, float32x4_t vscale_non_broadcast, float32x4_t voffseto, float32x4_t invvscaleo, bool reorder)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00732">impl.h:732</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_2c61f424fd391396db977702a2beee9a.xhtml">cpu</a></li><li class="navelem"><a class="el" href="dir_1de7bcbbdec2bf3559cb3c688662d4f5.xhtml">kernels</a></li><li class="navelem"><a class="el" href="dir_66520ab4814343cef4d99a57e61c0978.xhtml">elementwise_binary</a></li><li class="navelem"><a class="el" href="dir_8009c81bd03a5456d0f628033db7357f.xhtml">generic</a></li><li class="navelem"><a class="el" href="dir_6a94b41c7969531305f6d4628e056858.xhtml">neon</a></li><li class="navelem"><a class="el" href="elementwise__binary_2generic_2neon_2impl_8h.xhtml">impl.h</a></li>
    <li class="footer">Generated on Thu Aug 18 2022 12:57:37 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
