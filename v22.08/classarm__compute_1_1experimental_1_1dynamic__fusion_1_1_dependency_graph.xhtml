<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: DependencyGraph Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#friends">Friends</a>  </div>
  <div class="headertitle">
<div class="title">DependencyGraph Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>The dependency graph of a workload, where the nodes are of 2 types: <a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a> or <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="Operator Handle This can be used to further modify an existing operator. ">Operator</a> Represented as a doubly-linked adjacency list with the differentiation between source and destination.  
 <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_dependency_graph_8h_source.xhtml">DependencyGraph.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_1_1_op_pack.xhtml">OpPack</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A pack of operator including its input and output tensors, used by traversing through the graph in topological order.  <a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_1_1_op_pack.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_1_1_serial_id_allocator.xhtml">SerialIdAllocator</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A serial Id allocator.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_1_1_serial_id_allocator.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:aac5e2a1f61e8ea5255aca62f83e9124f"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> = <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_1_1_serial_id_allocator.xhtml#aebc5dc6e56fe725378002f1454d09978">SerialIdAllocator::Id</a></td></tr>
<tr class="separator:aac5e2a1f61e8ea5255aca62f83e9124f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3037da158468d821b4cd5d1d831c79af"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a3037da158468d821b4cd5d1d831c79af">AdjList</a> = std::map&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a>, std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> &gt; &gt;</td></tr>
<tr class="memdesc:a3037da158468d821b4cd5d1d831c79af"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adjacency list.  <a href="#a3037da158468d821b4cd5d1d831c79af">More...</a><br /></td></tr>
<tr class="separator:a3037da158468d821b4cd5d1d831c79af"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a62293bb5739ed8756db079365187f720"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a62293bb5739ed8756db079365187f720">DependencyGraph</a> ()=default</td></tr>
<tr class="separator:a62293bb5739ed8756db079365187f720"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a27e92839ccf8fcde3d505b69ff2fe68d"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a27e92839ccf8fcde3d505b69ff2fe68d">DependencyGraph</a> (const std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> &gt; &amp;imported_tensors)</td></tr>
<tr class="separator:a27e92839ccf8fcde3d505b69ff2fe68d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abc209c5ad250e66e117dbafc74e7240d"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#abc209c5ad250e66e117dbafc74e7240d">DependencyGraph</a> (const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a3037da158468d821b4cd5d1d831c79af">AdjList</a> &amp;adj_src_tensors, const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a3037da158468d821b4cd5d1d831c79af">AdjList</a> &amp;adj_dst_tensors, const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a3037da158468d821b4cd5d1d831c79af">AdjList</a> &amp;adj_src_ops, const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a3037da158468d821b4cd5d1d831c79af">AdjList</a> &amp;adj_dst_ops, std::map&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a>, <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> &gt; merge_points={})</td></tr>
<tr class="separator:abc209c5ad250e66e117dbafc74e7240d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a21d46af8bdb7e587be804b405b63ac3d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a21d46af8bdb7e587be804b405b63ac3d">add_tensor</a> (<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> merge_tensor=<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aec15c89db50c5cb48154f3e1e56303f1">empty_id</a>())</td></tr>
<tr class="memdesc:a21d46af8bdb7e587be804b405b63ac3d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add a new tensor.  <a href="#a21d46af8bdb7e587be804b405b63ac3d">More...</a><br /></td></tr>
<tr class="separator:a21d46af8bdb7e587be804b405b63ac3d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f7a4b2fa76736e9187fb2912eb719e7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a2f7a4b2fa76736e9187fb2912eb719e7">remove_tensor</a> (<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> tensor)</td></tr>
<tr class="separator:a2f7a4b2fa76736e9187fb2912eb719e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5922b6c22c15729162e749f06f7f518c"><td class="memItemLeft" align="right" valign="top">std::pair&lt; <a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>, <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">DependencyGraph::Id</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a5922b6c22c15729162e749f06f7f518c">add_operator</a> (const std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> &gt; &amp;inputs, const std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> &gt; &amp;outputs)</td></tr>
<tr class="memdesc:a5922b6c22c15729162e749f06f7f518c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add a new operator.  <a href="#a5922b6c22c15729162e749f06f7f518c">More...</a><br /></td></tr>
<tr class="separator:a5922b6c22c15729162e749f06f7f518c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af25e92675469847595ee71a8e446f49c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#af25e92675469847595ee71a8e446f49c">remove_operator</a> (<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> op)</td></tr>
<tr class="separator:af25e92675469847595ee71a8e446f49c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34a0357f1b58c5c5f4a45b7014efdc58"><td class="memItemLeft" align="right" valign="top">std::pair&lt; <a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>, std::vector&lt; <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_1_1_op_pack.xhtml">OpPack</a> &gt; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a34a0357f1b58c5c5f4a45b7014efdc58">topological_sort</a> () const</td></tr>
<tr class="memdesc:a34a0357f1b58c5c5f4a45b7014efdc58"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sort the graph in a topological order.  <a href="#a34a0357f1b58c5c5f4a45b7014efdc58">More...</a><br /></td></tr>
<tr class="separator:a34a0357f1b58c5c5f4a45b7014efdc58"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a28f6adbbe8fe171beb3069b999aa2949"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a28f6adbbe8fe171beb3069b999aa2949">src_ops</a> (<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> op) const</td></tr>
<tr class="separator:a28f6adbbe8fe171beb3069b999aa2949"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8a6f5f77bc64f863bbd2ff194ba9696"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#af8a6f5f77bc64f863bbd2ff194ba9696">dst_ops</a> (<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> op) const</td></tr>
<tr class="separator:af8a6f5f77bc64f863bbd2ff194ba9696"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab9882955c56de959ad93a5a9bd119bb4"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#ab9882955c56de959ad93a5a9bd119bb4">src_ops_from_tensor</a> (<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> tensor) const</td></tr>
<tr class="separator:ab9882955c56de959ad93a5a9bd119bb4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a02db2fef0720798c881f6a929b765369"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a02db2fef0720798c881f6a929b765369">dst_ops_from_tensor</a> (<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> tensor) const</td></tr>
<tr class="separator:a02db2fef0720798c881f6a929b765369"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae3766947577b0cc4b1ea4ad86630c90a"><td class="memItemLeft" align="right" valign="top">std::map&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a>, <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#ae3766947577b0cc4b1ea4ad86630c90a">get_merge_points</a> () const</td></tr>
<tr class="memdesc:ae3766947577b0cc4b1ea4ad86630c90a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the merge points object.  <a href="#ae3766947577b0cc4b1ea4ad86630c90a">More...</a><br /></td></tr>
<tr class="separator:ae3766947577b0cc4b1ea4ad86630c90a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af2b3ac83564fdf708156b9fff27b975f"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#af2b3ac83564fdf708156b9fff27b975f">get_root_ops</a> () const</td></tr>
<tr class="memdesc:af2b3ac83564fdf708156b9fff27b975f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get all root ops.  <a href="#af2b3ac83564fdf708156b9fff27b975f">More...</a><br /></td></tr>
<tr class="separator:af2b3ac83564fdf708156b9fff27b975f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3418295c25133398cbc190e6dd74ff67"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a3418295c25133398cbc190e6dd74ff67">get_dst_ops</a> () const</td></tr>
<tr class="memdesc:a3418295c25133398cbc190e6dd74ff67"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get all dst ops of the whole graph.  <a href="#a3418295c25133398cbc190e6dd74ff67">More...</a><br /></td></tr>
<tr class="separator:a3418295c25133398cbc190e6dd74ff67"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a911f45bf464369c75141cb4b8e34643f"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a911f45bf464369c75141cb4b8e34643f">src_tensors</a> (<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> op) const</td></tr>
<tr class="memdesc:a911f45bf464369c75141cb4b8e34643f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get source tensors to an operator.  <a href="#a911f45bf464369c75141cb4b8e34643f">More...</a><br /></td></tr>
<tr class="separator:a911f45bf464369c75141cb4b8e34643f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a09a3e533a331d82635595317d822247e"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a09a3e533a331d82635595317d822247e">dst_tensors</a> (<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> op) const</td></tr>
<tr class="memdesc:a09a3e533a331d82635595317d822247e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get destination tensors to an operator.  <a href="#a09a3e533a331d82635595317d822247e">More...</a><br /></td></tr>
<tr class="separator:a09a3e533a331d82635595317d822247e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7825d53fe205a5d98a03acb5aaebeaaa"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a7825d53fe205a5d98a03acb5aaebeaaa">src_tensors</a> () const</td></tr>
<tr class="memdesc:a7825d53fe205a5d98a03acb5aaebeaaa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get source tensors of the whole graph.  <a href="#a7825d53fe205a5d98a03acb5aaebeaaa">More...</a><br /></td></tr>
<tr class="separator:a7825d53fe205a5d98a03acb5aaebeaaa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ae00f571426a9c55804b0591646b396"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a3ae00f571426a9c55804b0591646b396">dst_tensors</a> () const</td></tr>
<tr class="memdesc:a3ae00f571426a9c55804b0591646b396"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get destination tensors of the whole graph.  <a href="#a3ae00f571426a9c55804b0591646b396">More...</a><br /></td></tr>
<tr class="separator:a3ae00f571426a9c55804b0591646b396"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae5851ab6cce508e843cf194055f0ace0"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#ae5851ab6cce508e843cf194055f0ace0">all_ops</a> () const</td></tr>
<tr class="memdesc:ae5851ab6cce508e843cf194055f0ace0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get all operators.  <a href="#ae5851ab6cce508e843cf194055f0ace0">More...</a><br /></td></tr>
<tr class="separator:ae5851ab6cce508e843cf194055f0ace0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acced44389cec79b0e30d5e5d2b90800f"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#acced44389cec79b0e30d5e5d2b90800f">all_tensors</a> () const</td></tr>
<tr class="memdesc:acced44389cec79b0e30d5e5d2b90800f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get all tensors.  <a href="#acced44389cec79b0e30d5e5d2b90800f">More...</a><br /></td></tr>
<tr class="separator:acced44389cec79b0e30d5e5d2b90800f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa533919c420cde23d6d4a4da0b22427a"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa533919c420cde23d6d4a4da0b22427a">number_of_ops</a> () const</td></tr>
<tr class="memdesc:aa533919c420cde23d6d4a4da0b22427a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Number of operators.  <a href="#aa533919c420cde23d6d4a4da0b22427a">More...</a><br /></td></tr>
<tr class="separator:aa533919c420cde23d6d4a4da0b22427a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2d3d80999cb601114a4b8fc24e581fec"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a2d3d80999cb601114a4b8fc24e581fec">number_of_tensors</a> () const</td></tr>
<tr class="memdesc:a2d3d80999cb601114a4b8fc24e581fec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Number of tensors.  <a href="#a2d3d80999cb601114a4b8fc24e581fec">More...</a><br /></td></tr>
<tr class="separator:a2d3d80999cb601114a4b8fc24e581fec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a817a6ff79a6a2a870efd5d1a6ff60b91"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a817a6ff79a6a2a870efd5d1a6ff60b91">update_merge_point</a> (<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> t_id, <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> merge_point)</td></tr>
<tr class="memdesc:a817a6ff79a6a2a870efd5d1a6ff60b91"><td class="mdescLeft">&#160;</td><td class="mdescRight">Update <code>merge_point</code> to point to <code>t_id</code>.  <a href="#a817a6ff79a6a2a870efd5d1a6ff60b91">More...</a><br /></td></tr>
<tr class="separator:a817a6ff79a6a2a870efd5d1a6ff60b91"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a60dbd34a02f2f3cf56b9132e26f29e6f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a60dbd34a02f2f3cf56b9132e26f29e6f">link_input</a> (<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> op, <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> in_tensor)</td></tr>
<tr class="separator:a60dbd34a02f2f3cf56b9132e26f29e6f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a67d091e17ebaf42b0108861953af2f57"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a67d091e17ebaf42b0108861953af2f57">link_output</a> (<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> op, <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> out_tensor)</td></tr>
<tr class="separator:a67d091e17ebaf42b0108861953af2f57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a04191e499f77cf9ac929a74cee6fe5c4"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a04191e499f77cf9ac929a74cee6fe5c4">path_exists_from_tensor_to_op</a> (<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> src_tensor, <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> dst_op) const</td></tr>
<tr class="memdesc:a04191e499f77cf9ac929a74cee6fe5c4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if there's a path from <code>src_tensor</code> to <code>dst_op</code>.  <a href="#a04191e499f77cf9ac929a74cee6fe5c4">More...</a><br /></td></tr>
<tr class="separator:a04191e499f77cf9ac929a74cee6fe5c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeedbdf8842e68d64c745cb423f06832d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aeedbdf8842e68d64c745cb423f06832d">path_exists_from_op_to_op</a> (<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> src_op, <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> dst_op) const</td></tr>
<tr class="memdesc:aeedbdf8842e68d64c745cb423f06832d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if there's a path from <code>src_op</code> to <code>dst_op</code>.  <a href="#aeedbdf8842e68d64c745cb423f06832d">More...</a><br /></td></tr>
<tr class="separator:aeedbdf8842e68d64c745cb423f06832d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a29001f898801aec4d89ee1e5b5f6ac2d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a29001f898801aec4d89ee1e5b5f6ac2d">is_src_tensor</a> (<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> tensor) const</td></tr>
<tr class="memdesc:a29001f898801aec4d89ee1e5b5f6ac2d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if tensor is the src tensor of the entire graph.  <a href="#a29001f898801aec4d89ee1e5b5f6ac2d">More...</a><br /></td></tr>
<tr class="separator:a29001f898801aec4d89ee1e5b5f6ac2d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa166dd2c27d413e78a52b297b6eaa434"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa166dd2c27d413e78a52b297b6eaa434">is_dst_tensor</a> (<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> tensor) const</td></tr>
<tr class="memdesc:aa166dd2c27d413e78a52b297b6eaa434"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if tensor is the dst tensor of the entire graph.  <a href="#aa166dd2c27d413e78a52b297b6eaa434">More...</a><br /></td></tr>
<tr class="separator:aa166dd2c27d413e78a52b297b6eaa434"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:aec15c89db50c5cb48154f3e1e56303f1"><td class="memItemLeft" align="right" valign="top">static constexpr <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aec15c89db50c5cb48154f3e1e56303f1">empty_id</a> ()</td></tr>
<tr class="separator:aec15c89db50c5cb48154f3e1e56303f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:a4e4a07e7e6126471b70b8f4793fb7af7"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a4e4a07e7e6126471b70b8f4793fb7af7">operator==</a> (const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml">DependencyGraph</a> &amp;g0, const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml">DependencyGraph</a> &amp;g1)</td></tr>
<tr class="memdesc:a4e4a07e7e6126471b70b8f4793fb7af7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Strict equality comparison (all internal ids and order of insertion matter).  <a href="#a4e4a07e7e6126471b70b8f4793fb7af7">More...</a><br /></td></tr>
<tr class="separator:a4e4a07e7e6126471b70b8f4793fb7af7"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>The dependency graph of a workload, where the nodes are of 2 types: <a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a> or <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml" title="Operator Handle This can be used to further modify an existing operator. ">Operator</a> Represented as a doubly-linked adjacency list with the differentiation between source and destination. </p>
<p>A "Merge Tensor" is an external tensor associated with the tensor within the graph, and serve as a merge point </p>

<p class="definition">Definition at line <a class="el" href="_dependency_graph_8h_source.xhtml#l00051">51</a> of file <a class="el" href="_dependency_graph_8h_source.xhtml">DependencyGraph.h</a>.</p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a id="a3037da158468d821b4cd5d1d831c79af"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3037da158468d821b4cd5d1d831c79af">&#9670;&nbsp;</a></span>AdjList</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a3037da158468d821b4cd5d1d831c79af">AdjList</a> =  std::map&lt;<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a>, std::vector&lt;<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a>&gt; &gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adjacency list. </p>

<p class="definition">Definition at line <a class="el" href="_dependency_graph_8h_source.xhtml#l00077">77</a> of file <a class="el" href="_dependency_graph_8h_source.xhtml">DependencyGraph.h</a>.</p>

</div>
</div>
<a id="aac5e2a1f61e8ea5255aca62f83e9124f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aac5e2a1f61e8ea5255aca62f83e9124f">&#9670;&nbsp;</a></span>Id</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> =  <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_1_1_serial_id_allocator.xhtml#aebc5dc6e56fe725378002f1454d09978">SerialIdAllocator::Id</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dependency_graph_8h_source.xhtml#l00073">73</a> of file <a class="el" href="_dependency_graph_8h_source.xhtml">DependencyGraph.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a62293bb5739ed8756db079365187f720"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a62293bb5739ed8756db079365187f720">&#9670;&nbsp;</a></span>DependencyGraph() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml">DependencyGraph</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="_dependency_graph_8h_source.xhtml#l00097">DependencyGraph::empty_id()</a>.</p>

</div>
</div>
<a id="a27e92839ccf8fcde3d505b69ff2fe68d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a27e92839ccf8fcde3d505b69ff2fe68d">&#9670;&nbsp;</a></span>DependencyGraph() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml">DependencyGraph</a> </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>imported_tensors</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00041">41</a> of file <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml">DependencyGraph.cpp</a>.</p>

<p class="reference">References <a class="el" href="tf__frozen__model__extractor_8py_source.xhtml#l00049">tf_frozen_model_extractor::t</a>.</p>
<div class="fragment"><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    : _adj_src_tensors{}, _adj_dst_tensors{}, _adj_src_ops{}, _adj_dst_ops{}, _merge_to_internal{}, _operator_id{}, _tensor_id{}</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;{</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> <a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a> : imported_tensors)</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    {</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        _adj_src_ops[<a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a>] = {};</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        _adj_dst_ops[<a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a>] = {};</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    }</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;}</div><div class="ttc" id="namespacetf__frozen__model__extractor_xhtml_aaccc9105df5383111407fd5b41255e23"><div class="ttname"><a href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">tf_frozen_model_extractor.t</a></div><div class="ttdeci">t</div><div class="ttdef"><b>Definition:</b> <a href="tf__frozen__model__extractor_8py_source.xhtml#l00049">tf_frozen_model_extractor.py:49</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="abc209c5ad250e66e117dbafc74e7240d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abc209c5ad250e66e117dbafc74e7240d">&#9670;&nbsp;</a></span>DependencyGraph() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml">DependencyGraph</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a3037da158468d821b4cd5d1d831c79af">AdjList</a> &amp;&#160;</td>
          <td class="paramname"><em>adj_src_tensors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a3037da158468d821b4cd5d1d831c79af">AdjList</a> &amp;&#160;</td>
          <td class="paramname"><em>adj_dst_tensors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a3037da158468d821b4cd5d1d831c79af">AdjList</a> &amp;&#160;</td>
          <td class="paramname"><em>adj_src_ops</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a3037da158468d821b4cd5d1d831c79af">AdjList</a> &amp;&#160;</td>
          <td class="paramname"><em>adj_dst_ops</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::map&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a>, <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> &gt;&#160;</td>
          <td class="paramname"><em>merge_points</em> = <code>{}</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00037">37</a> of file <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml">DependencyGraph.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    : _adj_src_tensors{ adj_src_tensors }, _adj_dst_tensors{ adj_dst_tensors }, _adj_src_ops{ adj_src_ops }, _adj_dst_ops{ adj_dst_ops }, _merge_to_internal{ merge_points }, _operator_id{}, _tensor_id{}</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a5922b6c22c15729162e749f06f7f518c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5922b6c22c15729162e749f06f7f518c">&#9670;&nbsp;</a></span>add_operator()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::pair&lt; <a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>, <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">DependencyGraph::Id</a> &gt; add_operator </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>inputs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>outputs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add a new operator. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">inputs</td><td>Input tensors to the operator </td></tr>
    <tr><td class="paramname">outputs</td><td>Output tensors to the operator </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>std::pair&lt;Status, DependencyGraph::Id&gt; where id is the newly allocated operator </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00103">103</a> of file <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml">DependencyGraph.cpp</a>.</p>

<p class="reference">References <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00294">DependencyGraph::link_input()</a>, <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00302">DependencyGraph::link_output()</a>, and <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00380">DependencyGraph::topological_sort()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_fused_kernel_graph_8h_source.xhtml#l00064">ClKernelFusionGroup::add_fused_kernel()</a>, <a class="el" href="_operator_graph_8cpp_source.xhtml#l00134">arm_compute::experimental::dynamic_fusion::add_op_conv2d()</a>, <a class="el" href="_operator_graph_8cpp_source.xhtml#l00201">arm_compute::experimental::dynamic_fusion::add_op_elementwise_op()</a>, <a class="el" href="_operator_graph_8cpp_source.xhtml#l00233">arm_compute::experimental::dynamic_fusion::add_op_floor()</a>, and <a class="el" href="_dependency_graph_8h_source.xhtml#l00097">DependencyGraph::empty_id()</a>.</p>
<div class="fragment"><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;{</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> new_op = insert_new_op();</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keywordflow">for</span>(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> tensor : inputs)</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    {</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a60dbd34a02f2f3cf56b9132e26f29e6f">link_input</a>(new_op, tensor);</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    }</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keywordflow">for</span>(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> tensor : outputs)</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    {</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a67d091e17ebaf42b0108861953af2f57">link_output</a>(new_op, tensor);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    }</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="comment">// Use topological sort in order to detect possible loops / cycles.</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="comment">// NOTE: This is unscalable. We&#39;ll need to have a better way of detecting loops or relax this invariant during operation, and add a validate method instead</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keywordflow">return</span> std::pair&lt;Status, DependencyGraph::Id&gt;(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a34a0357f1b58c5c5f4a45b7014efdc58">topological_sort</a>().first, new_op);</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_a34a0357f1b58c5c5f4a45b7014efdc58"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a34a0357f1b58c5c5f4a45b7014efdc58">arm_compute::experimental::dynamic_fusion::DependencyGraph::topological_sort</a></div><div class="ttdeci">std::pair&lt; Status, std::vector&lt; OpPack &gt; &gt; topological_sort() const</div><div class="ttdoc">Sort the graph in a topological order. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00380">DependencyGraph.cpp:380</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_a67d091e17ebaf42b0108861953af2f57"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a67d091e17ebaf42b0108861953af2f57">arm_compute::experimental::dynamic_fusion::DependencyGraph::link_output</a></div><div class="ttdeci">void link_output(Id op, Id out_tensor)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00302">DependencyGraph.cpp:302</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_a60dbd34a02f2f3cf56b9132e26f29e6f"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a60dbd34a02f2f3cf56b9132e26f29e6f">arm_compute::experimental::dynamic_fusion::DependencyGraph::link_input</a></div><div class="ttdeci">void link_input(Id op, Id in_tensor)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00294">DependencyGraph.cpp:294</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_aac5e2a1f61e8ea5255aca62f83e9124f"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">arm_compute::experimental::dynamic_fusion::DependencyGraph::Id</a></div><div class="ttdeci">SerialIdAllocator::Id Id</div><div class="ttdef"><b>Definition:</b> <a href="_dependency_graph_8h_source.xhtml#l00073">DependencyGraph.h:73</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a21d46af8bdb7e587be804b405b63ac3d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a21d46af8bdb7e587be804b405b63ac3d">&#9670;&nbsp;</a></span>add_tensor()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">DependencyGraph::Id</a> add_tensor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a>&#160;</td>
          <td class="paramname"><em>merge_tensor</em> = <code><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aec15c89db50c5cb48154f3e1e56303f1">empty_id</a>()</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add a new tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">merge_tensor</td><td>The external merge point associated with the tensor. Leave empty if not needed. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Id The newly allocated tensor, or a previously added tensor associated with <code>merge_tensor</code> </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00061">61</a> of file <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml">DependencyGraph.cpp</a>.</p>

<p class="reference">References <a class="el" href="_dependency_graph_8h_source.xhtml#l00097">DependencyGraph::empty_id()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_fused_kernel_graph_8h_source.xhtml#l00064">ClKernelFusionGroup::add_fused_kernel()</a>, <a class="el" href="_operator_graph_8cpp_source.xhtml#l00126">arm_compute::experimental::dynamic_fusion::add_tensor()</a>, <a class="el" href="_dependency_graph_8h_source.xhtml#l00097">DependencyGraph::empty_id()</a>, and <a class="el" href="tests_2validation_2_c_l_2_u_n_i_t_2dynamic__fusion_2_dependency_graph_8cpp_source.xhtml#l00044">arm_compute::test::validation::TEST_CASE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;{</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> new_tensor{ <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aec15c89db50c5cb48154f3e1e56303f1">empty_id</a>() };</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keywordflow">if</span>(merge_tensor != <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aec15c89db50c5cb48154f3e1e56303f1">empty_id</a>())</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    {</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keywordflow">if</span>(_merge_to_internal.find(merge_tensor) != _merge_to_internal.end())</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        {</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            new_tensor = _merge_to_internal[merge_tensor];</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        }</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        {</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            new_tensor                       = insert_new_tensor();</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            _merge_to_internal[merge_tensor] = new_tensor;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        }</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    }</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    {</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        new_tensor = insert_new_tensor();</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    }</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keywordflow">return</span> new_tensor;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_aec15c89db50c5cb48154f3e1e56303f1"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aec15c89db50c5cb48154f3e1e56303f1">arm_compute::experimental::dynamic_fusion::DependencyGraph::empty_id</a></div><div class="ttdeci">static constexpr Id empty_id()</div><div class="ttdef"><b>Definition:</b> <a href="_dependency_graph_8h_source.xhtml#l00097">DependencyGraph.h:97</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_aac5e2a1f61e8ea5255aca62f83e9124f"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">arm_compute::experimental::dynamic_fusion::DependencyGraph::Id</a></div><div class="ttdeci">SerialIdAllocator::Id Id</div><div class="ttdef"><b>Definition:</b> <a href="_dependency_graph_8h_source.xhtml#l00073">DependencyGraph.h:73</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae5851ab6cce508e843cf194055f0ace0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae5851ab6cce508e843cf194055f0ace0">&#9670;&nbsp;</a></span>all_ops()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">DependencyGraph::Id</a> &gt; all_ops </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get all operators. </p>
<dl class="section return"><dt>Returns</dt><dd>std::vector&lt;Id&gt; </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00218">218</a> of file <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml">DependencyGraph.cpp</a>.</p>

<p class="reference">References <a class="el" href="_m_l_g_o_parser_8cpp_source.xhtml#l00290">arm_compute::mlgo::parser::end()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dependency_graph_8h_source.xhtml#l00097">DependencyGraph::empty_id()</a>, <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00160">DependencyGraph::get_dst_ops()</a>, <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00145">DependencyGraph::get_root_ops()</a>, and <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00380">DependencyGraph::topological_sort()</a>.</p>
<div class="fragment"><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;{</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    std::vector&lt;Id&gt; ops{};</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    std::transform(std::begin(_adj_src_tensors), <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">std::end</a>(_adj_src_tensors), std::back_inserter(ops), [](<span class="keyword">const</span> <span class="keyword">auto</span> &amp; it)</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    {</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        <span class="keywordflow">return</span> it.first;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    });</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="keywordflow">return</span> ops;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1mlgo_1_1parser_xhtml_a9fe67a1da3e2628bade473115ecbb5be"><div class="ttname"><a href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">arm_compute::mlgo::parser::end</a></div><div class="ttdeci">void end(TokenStream &amp;in, bool &amp;valid)</div><div class="ttdef"><b>Definition:</b> <a href="_m_l_g_o_parser_8cpp_source.xhtml#l00290">MLGOParser.cpp:290</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="acced44389cec79b0e30d5e5d2b90800f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acced44389cec79b0e30d5e5d2b90800f">&#9670;&nbsp;</a></span>all_tensors()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">DependencyGraph::Id</a> &gt; all_tensors </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get all tensors. </p>
<dl class="section return"><dt>Returns</dt><dd>std::vector&lt;Id&gt; </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00260">260</a> of file <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml">DependencyGraph.cpp</a>.</p>

<p class="reference">References <a class="el" href="_m_l_g_o_parser_8cpp_source.xhtml#l00290">arm_compute::mlgo::parser::end()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dependency_graph_8h_source.xhtml#l00097">DependencyGraph::empty_id()</a>.</p>
<div class="fragment"><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;{</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    std::vector&lt;Id&gt; tensors{};</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    std::transform(std::begin(_adj_src_ops), <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">std::end</a>(_adj_src_ops), std::back_inserter(tensors), [](<span class="keyword">const</span> <span class="keyword">auto</span> &amp; it)</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    {</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        <span class="keywordflow">return</span> it.first;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    });</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    <span class="keywordflow">return</span> tensors;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1mlgo_1_1parser_xhtml_a9fe67a1da3e2628bade473115ecbb5be"><div class="ttname"><a href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">arm_compute::mlgo::parser::end</a></div><div class="ttdeci">void end(TokenStream &amp;in, bool &amp;valid)</div><div class="ttdef"><b>Definition:</b> <a href="_m_l_g_o_parser_8cpp_source.xhtml#l00290">MLGOParser.cpp:290</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af8a6f5f77bc64f863bbd2ff194ba9696"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af8a6f5f77bc64f863bbd2ff194ba9696">&#9670;&nbsp;</a></span>dst_ops()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">DependencyGraph::Id</a> &gt; dst_ops </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a>&#160;</td>
          <td class="paramname"><em>op</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00369">369</a> of file <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml">DependencyGraph.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, and <a class="el" href="_m_l_g_o_parser_8cpp_source.xhtml#l00290">arm_compute::mlgo::parser::end()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dependency_graph_8h_source.xhtml#l00097">DependencyGraph::empty_id()</a>, <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00160">DependencyGraph::get_dst_ops()</a>, <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00120">DependencyGraph::remove_operator()</a>, and <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00380">DependencyGraph::topological_sort()</a>.</p>
<div class="fragment"><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;{</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!operator_exists(op));</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    std::vector&lt;Id&gt; ops{};</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    <span class="keywordflow">for</span>(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> dst_tensor : _adj_dst_tensors.at(op))</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    {</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;        ops.insert(ops.end(), std::begin(_adj_dst_ops.at(dst_tensor)), <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">std::end</a>(_adj_dst_ops.at(dst_tensor)));</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    }</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    <span class="keywordflow">return</span> ops;</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1mlgo_1_1parser_xhtml_a9fe67a1da3e2628bade473115ecbb5be"><div class="ttname"><a href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">arm_compute::mlgo::parser::end</a></div><div class="ttdeci">void end(TokenStream &amp;in, bool &amp;valid)</div><div class="ttdef"><b>Definition:</b> <a href="_m_l_g_o_parser_8cpp_source.xhtml#l00290">MLGOParser.cpp:290</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_aac5e2a1f61e8ea5255aca62f83e9124f"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">arm_compute::experimental::dynamic_fusion::DependencyGraph::Id</a></div><div class="ttdeci">SerialIdAllocator::Id Id</div><div class="ttdef"><b>Definition:</b> <a href="_dependency_graph_8h_source.xhtml#l00073">DependencyGraph.h:73</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a02db2fef0720798c881f6a929b765369"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a02db2fef0720798c881f6a929b765369">&#9670;&nbsp;</a></span>dst_ops_from_tensor()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">DependencyGraph::Id</a> &gt; dst_ops_from_tensor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a>&#160;</td>
          <td class="paramname"><em>tensor</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00213">213</a> of file <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml">DependencyGraph.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dependency_graph_8h_source.xhtml#l00097">DependencyGraph::empty_id()</a>, and <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00228">DependencyGraph::path_exists_from_tensor_to_op()</a>.</p>
<div class="fragment"><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;{</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="keywordflow">return</span> _adj_dst_ops.at(tensor);</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a09a3e533a331d82635595317d822247e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a09a3e533a331d82635595317d822247e">&#9670;&nbsp;</a></span>dst_tensors() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">DependencyGraph::Id</a> &gt; dst_tensors </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a>&#160;</td>
          <td class="paramname"><em>op</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get destination tensors to an operator. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">op</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>std::vector&lt;Id&gt; </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00181">181</a> of file <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml">DependencyGraph.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_8cpp_source.xhtml#l00036">arm_compute::experimental::dynamic_fusion::build()</a>, <a class="el" href="_cl_fused_kernel_graph_8cpp_source.xhtml#l00170">arm_compute::experimental::dynamic_fusion::generate()</a>, <a class="el" href="_cl_fused_kernel_graph_8cpp_source.xhtml#l00132">arm_compute::experimental::dynamic_fusion::generate_store()</a>, and <a class="el" href="_cl_fused_kernel_graph_8h_source.xhtml#l00111">ClKernelFusionGroup::get_dst_tensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;{</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!operator_exists(op));</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="keywordflow">return</span> _adj_dst_tensors.at(op);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3ae00f571426a9c55804b0591646b396"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3ae00f571426a9c55804b0591646b396">&#9670;&nbsp;</a></span>dst_tensors() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">DependencyGraph::Id</a> &gt; dst_tensors </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get destination tensors of the whole graph. </p>
<dl class="section return"><dt>Returns</dt><dd>std::vector&lt;Id&gt; </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00198">198</a> of file <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml">DependencyGraph.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dependency_graph_8h_source.xhtml#l00097">DependencyGraph::empty_id()</a>, <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00328">DependencyGraph::is_dst_tensor()</a>, <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00240">DependencyGraph::path_exists_from_op_to_op()</a>, <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00083">DependencyGraph::remove_tensor()</a>, and <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00380">DependencyGraph::topological_sort()</a>.</p>
<div class="fragment"><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;{</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    std::vector&lt;Id&gt; tensors;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> tensor_dst_ops : _adj_dst_ops)</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    {</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        <span class="keywordflow">if</span>(tensor_dst_ops.second.empty())</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            tensors.push_back(tensor_dst_ops.first);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    }</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="keywordflow">return</span> tensors;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aec15c89db50c5cb48154f3e1e56303f1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aec15c89db50c5cb48154f3e1e56303f1">&#9670;&nbsp;</a></span>empty_id()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static constexpr <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> empty_id </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_dependency_graph_8h_source.xhtml#l00097">97</a> of file <a class="el" href="_dependency_graph_8h_source.xhtml">DependencyGraph.h</a>.</p>

<p class="reference">References <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00103">DependencyGraph::add_operator()</a>, <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00061">DependencyGraph::add_tensor()</a>, <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00218">DependencyGraph::all_ops()</a>, <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00260">DependencyGraph::all_tensors()</a>, <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a62293bb5739ed8756db079365187f720">DependencyGraph::DependencyGraph()</a>, <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00369">DependencyGraph::dst_ops()</a>, <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00213">DependencyGraph::dst_ops_from_tensor()</a>, <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00198">DependencyGraph::dst_tensors()</a>, <a class="el" href="_dependency_graph_8h_source.xhtml#l00065">DependencyGraph::SerialIdAllocator::empty()</a>, <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00160">DependencyGraph::get_dst_ops()</a>, <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00140">DependencyGraph::get_merge_points()</a>, <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00145">DependencyGraph::get_root_ops()</a>, <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00270">DependencyGraph::number_of_ops()</a>, <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00275">DependencyGraph::number_of_tensors()</a>, <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00120">DependencyGraph::remove_operator()</a>, <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00083">DependencyGraph::remove_tensor()</a>, <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00358">DependencyGraph::src_ops()</a>, <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00209">DependencyGraph::src_ops_from_tensor()</a>, <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00187">DependencyGraph::src_tensors()</a>, <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00380">DependencyGraph::topological_sort()</a>, and <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00051">DependencyGraph::update_merge_point()</a>.</p>

<p class="reference">Referenced by <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00061">DependencyGraph::add_tensor()</a>.</p>
<div class="fragment"><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    {</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_1_1_serial_id_allocator.xhtml#afadee1de609a6c58a990b35681a5415b">SerialIdAllocator::empty</a>();</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    }</div><div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_1_1_serial_id_allocator_xhtml_afadee1de609a6c58a990b35681a5415b"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_1_1_serial_id_allocator.xhtml#afadee1de609a6c58a990b35681a5415b">arm_compute::experimental::dynamic_fusion::DependencyGraph::SerialIdAllocator::empty</a></div><div class="ttdeci">static constexpr Id empty()</div><div class="ttdef"><b>Definition:</b> <a href="_dependency_graph_8h_source.xhtml#l00065">DependencyGraph.h:65</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3418295c25133398cbc190e6dd74ff67"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3418295c25133398cbc190e6dd74ff67">&#9670;&nbsp;</a></span>get_dst_ops()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">DependencyGraph::Id</a> &gt; get_dst_ops </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get all dst ops of the whole graph. </p>
<dl class="section return"><dt>Returns</dt><dd>std::vector&lt;Id&gt; </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00160">160</a> of file <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml">DependencyGraph.cpp</a>.</p>

<p class="reference">References <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00218">DependencyGraph::all_ops()</a>, and <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00369">DependencyGraph::dst_ops()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dependency_graph_8h_source.xhtml#l00097">DependencyGraph::empty_id()</a>, and <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00240">DependencyGraph::path_exists_from_op_to_op()</a>.</p>
<div class="fragment"><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;{</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    std::vector&lt;Id&gt; ops{};</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      op_list = <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#ae5851ab6cce508e843cf194055f0ace0">all_ops</a>();</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> op : op_list)</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    {</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <span class="keywordflow">if</span>(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#af8a6f5f77bc64f863bbd2ff194ba9696">dst_ops</a>(op).empty())</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        {</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            ops.emplace_back(op);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        }</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    }</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="keywordflow">return</span> ops;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_ae5851ab6cce508e843cf194055f0ace0"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#ae5851ab6cce508e843cf194055f0ace0">arm_compute::experimental::dynamic_fusion::DependencyGraph::all_ops</a></div><div class="ttdeci">std::vector&lt; Id &gt; all_ops() const</div><div class="ttdoc">Get all operators. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00218">DependencyGraph.cpp:218</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_af8a6f5f77bc64f863bbd2ff194ba9696"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#af8a6f5f77bc64f863bbd2ff194ba9696">arm_compute::experimental::dynamic_fusion::DependencyGraph::dst_ops</a></div><div class="ttdeci">std::vector&lt; Id &gt; dst_ops(Id op) const</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00369">DependencyGraph.cpp:369</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae3766947577b0cc4b1ea4ad86630c90a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae3766947577b0cc4b1ea4ad86630c90a">&#9670;&nbsp;</a></span>get_merge_points()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::map&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">DependencyGraph::Id</a>, <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">DependencyGraph::Id</a> &gt; get_merge_points </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the merge points object. </p>
<dl class="section return"><dt>Returns</dt><dd>std::map&lt;Id, Id&gt; </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00140">140</a> of file <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml">DependencyGraph.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_8cpp_source.xhtml#l00036">arm_compute::experimental::dynamic_fusion::build()</a>, and <a class="el" href="_dependency_graph_8h_source.xhtml#l00097">DependencyGraph::empty_id()</a>.</p>
<div class="fragment"><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;{</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="keywordflow">return</span> _merge_to_internal;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="af2b3ac83564fdf708156b9fff27b975f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af2b3ac83564fdf708156b9fff27b975f">&#9670;&nbsp;</a></span>get_root_ops()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">DependencyGraph::Id</a> &gt; get_root_ops </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get all root ops. </p>
<p>Root ops can also be referred to as "src ops" of the whole graph</p>
<dl class="section return"><dt>Returns</dt><dd>std::vector&lt;Id&gt; </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00145">145</a> of file <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml">DependencyGraph.cpp</a>.</p>

<p class="reference">References <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00218">DependencyGraph::all_ops()</a>, and <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00358">DependencyGraph::src_ops()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_operator_graph_8cpp_source.xhtml#l00134">arm_compute::experimental::dynamic_fusion::add_op_conv2d()</a>, <a class="el" href="_dependency_graph_8h_source.xhtml#l00097">DependencyGraph::empty_id()</a>, <a class="el" href="core_2experimental_2dynamic__fusion_2_cl_kernel_building_impl_2_common_8h_source.xhtml#l00730">ClKernelBlueprint::Implementation::get_graph()</a>, and <a class="el" href="_cl_fused_kernel_graph_8h_source.xhtml#l00094">ClKernelFusionGroup::get_root_kernel()</a>.</p>
<div class="fragment"><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;{</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    std::vector&lt;Id&gt; ops{};</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      op_list = <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#ae5851ab6cce508e843cf194055f0ace0">all_ops</a>();</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> op : op_list)</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    {</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <span class="keywordflow">if</span>(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a28f6adbbe8fe171beb3069b999aa2949">src_ops</a>(op).empty())</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        {</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            ops.emplace_back(op);</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        }</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    }</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keywordflow">return</span> ops;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_ae5851ab6cce508e843cf194055f0ace0"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#ae5851ab6cce508e843cf194055f0ace0">arm_compute::experimental::dynamic_fusion::DependencyGraph::all_ops</a></div><div class="ttdeci">std::vector&lt; Id &gt; all_ops() const</div><div class="ttdoc">Get all operators. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00218">DependencyGraph.cpp:218</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_a28f6adbbe8fe171beb3069b999aa2949"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a28f6adbbe8fe171beb3069b999aa2949">arm_compute::experimental::dynamic_fusion::DependencyGraph::src_ops</a></div><div class="ttdeci">std::vector&lt; Id &gt; src_ops(Id op) const</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00358">DependencyGraph.cpp:358</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa166dd2c27d413e78a52b297b6eaa434"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa166dd2c27d413e78a52b297b6eaa434">&#9670;&nbsp;</a></span>is_dst_tensor()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool is_dst_tensor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a>&#160;</td>
          <td class="paramname"><em>tensor</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if tensor is the dst tensor of the entire graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">tensor</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true </dd>
<dd>
false </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00328">328</a> of file <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml">DependencyGraph.cpp</a>.</p>

<p class="reference">References <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00198">DependencyGraph::dst_tensors()</a>, and <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00187">DependencyGraph::src_tensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;{</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    <span class="keywordflow">if</span>(!tensor_exists(tensor))</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    {</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    }</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    <span class="keywordflow">return</span> _adj_dst_ops.at(tensor).empty();</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a29001f898801aec4d89ee1e5b5f6ac2d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a29001f898801aec4d89ee1e5b5f6ac2d">&#9670;&nbsp;</a></span>is_src_tensor()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool is_src_tensor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a>&#160;</td>
          <td class="paramname"><em>tensor</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if tensor is the src tensor of the entire graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">tensor</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true </dd>
<dd>
false </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00319">319</a> of file <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml">DependencyGraph.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;{</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    <span class="keywordflow">if</span>(!tensor_exists(tensor))</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    {</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    }</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    <span class="keywordflow">return</span> _adj_src_ops.at(tensor).empty();</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a60dbd34a02f2f3cf56b9132e26f29e6f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a60dbd34a02f2f3cf56b9132e26f29e6f">&#9670;&nbsp;</a></span>link_input()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void link_input </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a>&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a>&#160;</td>
          <td class="paramname"><em>in_tensor</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00294">294</a> of file <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml">DependencyGraph.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>.</p>

<p class="reference">Referenced by <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00103">DependencyGraph::add_operator()</a>.</p>
<div class="fragment"><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;{</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!operator_exists(op));</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!tensor_exists(in_tensor));</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(are_connected(op, in_tensor));</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    _adj_src_tensors[op].push_back(in_tensor);</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    _adj_dst_ops[in_tensor].push_back(op);</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a67d091e17ebaf42b0108861953af2f57"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a67d091e17ebaf42b0108861953af2f57">&#9670;&nbsp;</a></span>link_output()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void link_output </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a>&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a>&#160;</td>
          <td class="paramname"><em>out_tensor</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00302">302</a> of file <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml">DependencyGraph.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>.</p>

<p class="reference">Referenced by <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00103">DependencyGraph::add_operator()</a>.</p>
<div class="fragment"><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;{</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!operator_exists(op));</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!tensor_exists(out_tensor));</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(are_connected(op, out_tensor));</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    _adj_dst_tensors[op].push_back(out_tensor);</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    _adj_src_ops[out_tensor].push_back(op);</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa533919c420cde23d6d4a4da0b22427a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa533919c420cde23d6d4a4da0b22427a">&#9670;&nbsp;</a></span>number_of_ops()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int number_of_ops </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Number of operators. </p>
<dl class="section return"><dt>Returns</dt><dd>unsigned int </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00270">270</a> of file <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml">DependencyGraph.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dependency_graph_8h_source.xhtml#l00097">DependencyGraph::empty_id()</a>, and <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00380">DependencyGraph::topological_sort()</a>.</p>
<div class="fragment"><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;{</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <span class="keywordflow">return</span> _adj_src_tensors.size();</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a2d3d80999cb601114a4b8fc24e581fec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2d3d80999cb601114a4b8fc24e581fec">&#9670;&nbsp;</a></span>number_of_tensors()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int number_of_tensors </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Number of tensors. </p>
<dl class="section return"><dt>Returns</dt><dd>unsigned int </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00275">275</a> of file <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml">DependencyGraph.cpp</a>.</p>

<p class="reference">References <a class="el" href="_dependency_graph_8h_source.xhtml#l00061">DependencyGraph::SerialIdAllocator::alloc()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dependency_graph_8h_source.xhtml#l00097">DependencyGraph::empty_id()</a>.</p>
<div class="fragment"><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;{</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <span class="keywordflow">return</span> _adj_src_ops.size();</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aeedbdf8842e68d64c745cb423f06832d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeedbdf8842e68d64c745cb423f06832d">&#9670;&nbsp;</a></span>path_exists_from_op_to_op()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool path_exists_from_op_to_op </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a>&#160;</td>
          <td class="paramname"><em>src_op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a>&#160;</td>
          <td class="paramname"><em>dst_op</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if there's a path from <code>src_op</code> to <code>dst_op</code>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">src_op</td><td></td></tr>
    <tr><td class="paramname">dst_op</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true </dd>
<dd>
false </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00240">240</a> of file <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml">DependencyGraph.cpp</a>.</p>

<p class="reference">References <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00198">DependencyGraph::dst_tensors()</a>, <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00160">DependencyGraph::get_dst_ops()</a>, <a class="el" href="_dependency_graph_8h_source.xhtml#l00041">arm_compute::experimental::dynamic_fusion::is_in()</a>, and <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00228">DependencyGraph::path_exists_from_tensor_to_op()</a>.</p>

<p class="reference">Referenced by <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00228">DependencyGraph::path_exists_from_tensor_to_op()</a>.</p>
<div class="fragment"><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;{</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="keywordflow">if</span>(src_op == dst_op)</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    {</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    }</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab05719fb0811c6eb8a452864575501e2">is_in</a>(src_op, <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a3418295c25133398cbc190e6dd74ff67">get_dst_ops</a>()))</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    {</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    }</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> child_tensor : <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a3ae00f571426a9c55804b0591646b396">dst_tensors</a>(src_op))</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    {</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        <span class="keywordflow">if</span>(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a04191e499f77cf9ac929a74cee6fe5c4">path_exists_from_tensor_to_op</a>(child_tensor, dst_op))</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        {</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        }</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    }</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_ab05719fb0811c6eb8a452864575501e2"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab05719fb0811c6eb8a452864575501e2">arm_compute::experimental::dynamic_fusion::is_in</a></div><div class="ttdeci">bool is_in(const T &amp;v, const std::vector&lt; T &gt; &amp;vec)</div><div class="ttdef"><b>Definition:</b> <a href="_dependency_graph_8h_source.xhtml#l00041">DependencyGraph.h:41</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_a3ae00f571426a9c55804b0591646b396"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a3ae00f571426a9c55804b0591646b396">arm_compute::experimental::dynamic_fusion::DependencyGraph::dst_tensors</a></div><div class="ttdeci">std::vector&lt; Id &gt; dst_tensors() const</div><div class="ttdoc">Get destination tensors of the whole graph. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00198">DependencyGraph.cpp:198</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_a3418295c25133398cbc190e6dd74ff67"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a3418295c25133398cbc190e6dd74ff67">arm_compute::experimental::dynamic_fusion::DependencyGraph::get_dst_ops</a></div><div class="ttdeci">std::vector&lt; Id &gt; get_dst_ops() const</div><div class="ttdoc">Get all dst ops of the whole graph. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00160">DependencyGraph.cpp:160</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_a04191e499f77cf9ac929a74cee6fe5c4"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a04191e499f77cf9ac929a74cee6fe5c4">arm_compute::experimental::dynamic_fusion::DependencyGraph::path_exists_from_tensor_to_op</a></div><div class="ttdeci">bool path_exists_from_tensor_to_op(Id src_tensor, Id dst_op) const</div><div class="ttdoc">Check if there&amp;#39;s a path from src_tensor to dst_op. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00228">DependencyGraph.cpp:228</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a04191e499f77cf9ac929a74cee6fe5c4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a04191e499f77cf9ac929a74cee6fe5c4">&#9670;&nbsp;</a></span>path_exists_from_tensor_to_op()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool path_exists_from_tensor_to_op </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a>&#160;</td>
          <td class="paramname"><em>src_tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a>&#160;</td>
          <td class="paramname"><em>dst_op</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if there's a path from <code>src_tensor</code> to <code>dst_op</code>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">src_tensor</td><td></td></tr>
    <tr><td class="paramname">dst_op</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true </dd>
<dd>
false </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00228">228</a> of file <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml">DependencyGraph.cpp</a>.</p>

<p class="reference">References <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00213">DependencyGraph::dst_ops_from_tensor()</a>, and <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00240">DependencyGraph::path_exists_from_op_to_op()</a>.</p>

<p class="reference">Referenced by <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00240">DependencyGraph::path_exists_from_op_to_op()</a>.</p>
<div class="fragment"><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;{</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> child_op : <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a02db2fef0720798c881f6a929b765369">dst_ops_from_tensor</a>(src_tensor))</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    {</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        <span class="keywordflow">if</span>(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aeedbdf8842e68d64c745cb423f06832d">path_exists_from_op_to_op</a>(child_op, dst_op))</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        {</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        }</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    }</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_a02db2fef0720798c881f6a929b765369"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a02db2fef0720798c881f6a929b765369">arm_compute::experimental::dynamic_fusion::DependencyGraph::dst_ops_from_tensor</a></div><div class="ttdeci">std::vector&lt; Id &gt; dst_ops_from_tensor(Id tensor) const</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00213">DependencyGraph.cpp:213</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_aeedbdf8842e68d64c745cb423f06832d"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aeedbdf8842e68d64c745cb423f06832d">arm_compute::experimental::dynamic_fusion::DependencyGraph::path_exists_from_op_to_op</a></div><div class="ttdeci">bool path_exists_from_op_to_op(Id src_op, Id dst_op) const</div><div class="ttdoc">Check if there&amp;#39;s a path from src_op to dst_op. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00240">DependencyGraph.cpp:240</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af25e92675469847595ee71a8e446f49c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af25e92675469847595ee71a8e446f49c">&#9670;&nbsp;</a></span>remove_operator()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void remove_operator </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a>&#160;</td>
          <td class="paramname"><em>op</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00120">120</a> of file <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml">DependencyGraph.cpp</a>.</p>

<p class="reference">References <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00369">DependencyGraph::dst_ops()</a>, <a class="el" href="_m_l_g_o_parser_8cpp_source.xhtml#l00290">arm_compute::mlgo::parser::end()</a>, and <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00358">DependencyGraph::src_ops()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dependency_graph_8h_source.xhtml#l00097">DependencyGraph::empty_id()</a>.</p>
<div class="fragment"><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;{</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> src_tensor : _adj_src_tensors.at(op))</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    {</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        <span class="keyword">auto</span> &amp;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#af8a6f5f77bc64f863bbd2ff194ba9696">dst_ops</a> = _adj_dst_ops.at(src_tensor);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#af8a6f5f77bc64f863bbd2ff194ba9696">dst_ops</a>.erase(</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            std::remove(std::begin(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#af8a6f5f77bc64f863bbd2ff194ba9696">dst_ops</a>), <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">std::end</a>(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#af8a6f5f77bc64f863bbd2ff194ba9696">dst_ops</a>), op),</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">std::end</a>(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#af8a6f5f77bc64f863bbd2ff194ba9696">dst_ops</a>));</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    }</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> dst_tensor : _adj_dst_tensors.at(op))</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    {</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        <span class="keyword">auto</span> &amp;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a28f6adbbe8fe171beb3069b999aa2949">src_ops</a> = _adj_src_ops.at(dst_tensor);</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a28f6adbbe8fe171beb3069b999aa2949">src_ops</a>.erase(</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            std::remove(std::begin(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a28f6adbbe8fe171beb3069b999aa2949">src_ops</a>), <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">std::end</a>(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a28f6adbbe8fe171beb3069b999aa2949">src_ops</a>), op),</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">std::end</a>(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a28f6adbbe8fe171beb3069b999aa2949">src_ops</a>));</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    }</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    _adj_src_tensors.erase(op);</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    _adj_dst_tensors.erase(op);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_af8a6f5f77bc64f863bbd2ff194ba9696"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#af8a6f5f77bc64f863bbd2ff194ba9696">arm_compute::experimental::dynamic_fusion::DependencyGraph::dst_ops</a></div><div class="ttdeci">std::vector&lt; Id &gt; dst_ops(Id op) const</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00369">DependencyGraph.cpp:369</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1mlgo_1_1parser_xhtml_a9fe67a1da3e2628bade473115ecbb5be"><div class="ttname"><a href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">arm_compute::mlgo::parser::end</a></div><div class="ttdeci">void end(TokenStream &amp;in, bool &amp;valid)</div><div class="ttdef"><b>Definition:</b> <a href="_m_l_g_o_parser_8cpp_source.xhtml#l00290">MLGOParser.cpp:290</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_a28f6adbbe8fe171beb3069b999aa2949"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a28f6adbbe8fe171beb3069b999aa2949">arm_compute::experimental::dynamic_fusion::DependencyGraph::src_ops</a></div><div class="ttdeci">std::vector&lt; Id &gt; src_ops(Id op) const</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00358">DependencyGraph.cpp:358</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a2f7a4b2fa76736e9187fb2912eb719e7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2f7a4b2fa76736e9187fb2912eb719e7">&#9670;&nbsp;</a></span>remove_tensor()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void remove_tensor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a>&#160;</td>
          <td class="paramname"><em>tensor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00083">83</a> of file <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml">DependencyGraph.cpp</a>.</p>

<p class="reference">References <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00198">DependencyGraph::dst_tensors()</a>, <a class="el" href="_m_l_g_o_parser_8cpp_source.xhtml#l00290">arm_compute::mlgo::parser::end()</a>, and <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00187">DependencyGraph::src_tensors()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dependency_graph_8h_source.xhtml#l00097">DependencyGraph::empty_id()</a>.</p>
<div class="fragment"><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;{</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> src_op : _adj_src_ops.at(tensor))</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    {</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <span class="keyword">auto</span> &amp;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a3ae00f571426a9c55804b0591646b396">dst_tensors</a> = _adj_dst_tensors.at(src_op);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a3ae00f571426a9c55804b0591646b396">dst_tensors</a>.erase(</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            std::remove(std::begin(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a3ae00f571426a9c55804b0591646b396">dst_tensors</a>), <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">std::end</a>(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a3ae00f571426a9c55804b0591646b396">dst_tensors</a>), tensor),</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">std::end</a>(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a3ae00f571426a9c55804b0591646b396">dst_tensors</a>));</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    }</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> dst_op : _adj_dst_ops.at(tensor))</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    {</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <span class="keyword">auto</span> &amp;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a7825d53fe205a5d98a03acb5aaebeaaa">src_tensors</a> = _adj_src_tensors.at(dst_op);</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a7825d53fe205a5d98a03acb5aaebeaaa">src_tensors</a>.erase(</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            std::remove(std::begin(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a7825d53fe205a5d98a03acb5aaebeaaa">src_tensors</a>), <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">std::end</a>(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a7825d53fe205a5d98a03acb5aaebeaaa">src_tensors</a>), tensor),</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">std::end</a>(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a7825d53fe205a5d98a03acb5aaebeaaa">src_tensors</a>));</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    }</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    _adj_src_ops.erase(tensor);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    _adj_dst_ops.erase(tensor);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_a7825d53fe205a5d98a03acb5aaebeaaa"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a7825d53fe205a5d98a03acb5aaebeaaa">arm_compute::experimental::dynamic_fusion::DependencyGraph::src_tensors</a></div><div class="ttdeci">std::vector&lt; Id &gt; src_tensors() const</div><div class="ttdoc">Get source tensors of the whole graph. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00187">DependencyGraph.cpp:187</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_a3ae00f571426a9c55804b0591646b396"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a3ae00f571426a9c55804b0591646b396">arm_compute::experimental::dynamic_fusion::DependencyGraph::dst_tensors</a></div><div class="ttdeci">std::vector&lt; Id &gt; dst_tensors() const</div><div class="ttdoc">Get destination tensors of the whole graph. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00198">DependencyGraph.cpp:198</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1mlgo_1_1parser_xhtml_a9fe67a1da3e2628bade473115ecbb5be"><div class="ttname"><a href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">arm_compute::mlgo::parser::end</a></div><div class="ttdeci">void end(TokenStream &amp;in, bool &amp;valid)</div><div class="ttdef"><b>Definition:</b> <a href="_m_l_g_o_parser_8cpp_source.xhtml#l00290">MLGOParser.cpp:290</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a28f6adbbe8fe171beb3069b999aa2949"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a28f6adbbe8fe171beb3069b999aa2949">&#9670;&nbsp;</a></span>src_ops()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">DependencyGraph::Id</a> &gt; src_ops </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a>&#160;</td>
          <td class="paramname"><em>op</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00358">358</a> of file <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml">DependencyGraph.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_m_l_g_o_parser_8cpp_source.xhtml#l00290">arm_compute::mlgo::parser::end()</a>, and <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00187">DependencyGraph::src_tensors()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dependency_graph_8h_source.xhtml#l00097">DependencyGraph::empty_id()</a>, <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00145">DependencyGraph::get_root_ops()</a>, <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00120">DependencyGraph::remove_operator()</a>, and <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00380">DependencyGraph::topological_sort()</a>.</p>
<div class="fragment"><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;{</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!operator_exists(op));</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    std::vector&lt;Id&gt; ops{};</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    <span class="keywordflow">for</span>(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> src_tensor : <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a7825d53fe205a5d98a03acb5aaebeaaa">src_tensors</a>(op))</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    {</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        ops.insert(ops.end(), std::begin(_adj_src_ops.at(src_tensor)), <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">std::end</a>(_adj_src_ops.at(src_tensor)));</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    }</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    <span class="keywordflow">return</span> ops;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_a7825d53fe205a5d98a03acb5aaebeaaa"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a7825d53fe205a5d98a03acb5aaebeaaa">arm_compute::experimental::dynamic_fusion::DependencyGraph::src_tensors</a></div><div class="ttdeci">std::vector&lt; Id &gt; src_tensors() const</div><div class="ttdoc">Get source tensors of the whole graph. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00187">DependencyGraph.cpp:187</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1mlgo_1_1parser_xhtml_a9fe67a1da3e2628bade473115ecbb5be"><div class="ttname"><a href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">arm_compute::mlgo::parser::end</a></div><div class="ttdeci">void end(TokenStream &amp;in, bool &amp;valid)</div><div class="ttdef"><b>Definition:</b> <a href="_m_l_g_o_parser_8cpp_source.xhtml#l00290">MLGOParser.cpp:290</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_aac5e2a1f61e8ea5255aca62f83e9124f"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">arm_compute::experimental::dynamic_fusion::DependencyGraph::Id</a></div><div class="ttdeci">SerialIdAllocator::Id Id</div><div class="ttdef"><b>Definition:</b> <a href="_dependency_graph_8h_source.xhtml#l00073">DependencyGraph.h:73</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab9882955c56de959ad93a5a9bd119bb4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab9882955c56de959ad93a5a9bd119bb4">&#9670;&nbsp;</a></span>src_ops_from_tensor()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">DependencyGraph::Id</a> &gt; src_ops_from_tensor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a>&#160;</td>
          <td class="paramname"><em>tensor</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00209">209</a> of file <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml">DependencyGraph.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dependency_graph_8h_source.xhtml#l00097">DependencyGraph::empty_id()</a>.</p>
<div class="fragment"><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;{</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="keywordflow">return</span> _adj_src_ops.at(tensor);</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a911f45bf464369c75141cb4b8e34643f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a911f45bf464369c75141cb4b8e34643f">&#9670;&nbsp;</a></span>src_tensors() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">DependencyGraph::Id</a> &gt; src_tensors </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a>&#160;</td>
          <td class="paramname"><em>op</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get source tensors to an operator. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">op</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>std::vector&lt;Id&gt; </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00175">175</a> of file <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml">DependencyGraph.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_workload_8cpp_source.xhtml#l00036">arm_compute::experimental::dynamic_fusion::build()</a>, <a class="el" href="_cl_fused_kernel_graph_8cpp_source.xhtml#l00170">arm_compute::experimental::dynamic_fusion::generate()</a>, and <a class="el" href="_cl_fused_kernel_graph_8h_source.xhtml#l00101">ClKernelFusionGroup::get_src_tensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;{</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!operator_exists(op));</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keywordflow">return</span> _adj_src_tensors.at(op);</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7825d53fe205a5d98a03acb5aaebeaaa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7825d53fe205a5d98a03acb5aaebeaaa">&#9670;&nbsp;</a></span>src_tensors() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">DependencyGraph::Id</a> &gt; src_tensors </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get source tensors of the whole graph. </p>
<dl class="section return"><dt>Returns</dt><dd>std::vector&lt;Id&gt; </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00187">187</a> of file <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml">DependencyGraph.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dependency_graph_8h_source.xhtml#l00097">DependencyGraph::empty_id()</a>, <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00328">DependencyGraph::is_dst_tensor()</a>, <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00083">DependencyGraph::remove_tensor()</a>, <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00358">DependencyGraph::src_ops()</a>, and <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00380">DependencyGraph::topological_sort()</a>.</p>
<div class="fragment"><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;{</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    std::vector&lt;Id&gt; tensors;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> tensor_src_ops : _adj_src_ops)</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    {</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        <span class="keywordflow">if</span>(tensor_src_ops.second.empty())</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            tensors.push_back(tensor_src_ops.first);</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    }</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="keywordflow">return</span> tensors;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a34a0357f1b58c5c5f4a45b7014efdc58"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a34a0357f1b58c5c5f4a45b7014efdc58">&#9670;&nbsp;</a></span>topological_sort()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::pair&lt; <a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>, std::vector&lt; <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_1_1_op_pack.xhtml">DependencyGraph::OpPack</a> &gt; &gt; topological_sort </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sort the graph in a topological order. </p>
<dl class="section return"><dt>Returns</dt><dd>std::pair&lt;<a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class. ">Status</a>, std::vector&lt;OpPack&gt;&gt; </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00380">380</a> of file <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml">DependencyGraph.cpp</a>.</p>

<p class="reference">References <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00218">DependencyGraph::all_ops()</a>, <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00369">DependencyGraph::dst_ops()</a>, <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00198">DependencyGraph::dst_tensors()</a>, <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00270">DependencyGraph::number_of_ops()</a>, <a class="el" href="namespacearm__compute.xhtml#a59e56af19e754a6aa26a612ebf91d05fa62be47fdd89da032cf78dfce82239579">arm_compute::RUNTIME_ERROR</a>, <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00358">DependencyGraph::src_ops()</a>, and <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00187">DependencyGraph::src_tensors()</a>.</p>

<p class="reference">Referenced by <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00103">DependencyGraph::add_operator()</a>, <a class="el" href="_cl_composite_operator_8cpp_source.xhtml#l00174">ClCompositeOperator::configure()</a>, <a class="el" href="_dependency_graph_8h_source.xhtml#l00097">DependencyGraph::empty_id()</a>, and <a class="el" href="_cl_fused_kernel_graph_8cpp_source.xhtml#l00050">arm_compute::experimental::dynamic_fusion::traverse()</a>.</p>
<div class="fragment"><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;{</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    <span class="comment">// Incident degree (number of source operators to an op)</span></div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    std::map&lt;Id, unsigned int&gt; in_degree{};</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    std::set&lt;Id&gt;        visited_ops{};</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    std::deque&lt;Id&gt;      zero_in_degree_ops{};</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    std::vector&lt;OpPack&gt; sorted_op_packs{};</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> op : <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#ae5851ab6cce508e843cf194055f0ace0">all_ops</a>())</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    {</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> degree = <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a28f6adbbe8fe171beb3069b999aa2949">src_ops</a>(op).size();</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;        in_degree[op]     = degree;</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;        <span class="keywordflow">if</span>(degree == 0)</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;        {</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;            zero_in_degree_ops.push_back(op);</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;            visited_ops.insert(op);</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;        }</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    }</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    <span class="keywordflow">while</span>(!zero_in_degree_ops.empty())</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    {</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a> op = zero_in_degree_ops.front();</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;        zero_in_degree_ops.pop_front();</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;        sorted_op_packs.push_back(OpPack{ op, <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a7825d53fe205a5d98a03acb5aaebeaaa">src_tensors</a>(op), <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a3ae00f571426a9c55804b0591646b396">dst_tensors</a>(op) });</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> next_op : <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#af8a6f5f77bc64f863bbd2ff194ba9696">dst_ops</a>(op))</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;        {</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;            <span class="keywordflow">if</span>(in_degree[next_op] &gt; 0)</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;            {</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;                in_degree[next_op]--;</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;            }</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;            <span class="keywordflow">if</span>(in_degree[next_op] == 0 &amp;&amp; visited_ops.find(next_op) == visited_ops.end())</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;            {</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;                zero_in_degree_ops.push_back(next_op);</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;                visited_ops.insert(op);</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;            }</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;        }</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    }</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    <span class="comment">// If there are remaining ops with in_degree &gt; 0, then it&#39;s indication that there are cycles in the graph</span></div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    Status st{};</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    <span class="keywordflow">if</span>(sorted_op_packs.size() != <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa533919c420cde23d6d4a4da0b22427a">number_of_ops</a>())</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    {</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;        st = Status{ <a class="code" href="namespacearm__compute.xhtml#a59e56af19e754a6aa26a612ebf91d05fa62be47fdd89da032cf78dfce82239579">ErrorCode::RUNTIME_ERROR</a>, <span class="stringliteral">&quot;Cycles or loops are not allowed in a DependencyGraph&quot;</span> };</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    }</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <span class="keywordflow">return</span> std::make_pair(st, sorted_op_packs);</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_aa533919c420cde23d6d4a4da0b22427a"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aa533919c420cde23d6d4a4da0b22427a">arm_compute::experimental::dynamic_fusion::DependencyGraph::number_of_ops</a></div><div class="ttdeci">unsigned int number_of_ops() const</div><div class="ttdoc">Number of operators. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00270">DependencyGraph.cpp:270</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_a7825d53fe205a5d98a03acb5aaebeaaa"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a7825d53fe205a5d98a03acb5aaebeaaa">arm_compute::experimental::dynamic_fusion::DependencyGraph::src_tensors</a></div><div class="ttdeci">std::vector&lt; Id &gt; src_tensors() const</div><div class="ttdoc">Get source tensors of the whole graph. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00187">DependencyGraph.cpp:187</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_a3ae00f571426a9c55804b0591646b396"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a3ae00f571426a9c55804b0591646b396">arm_compute::experimental::dynamic_fusion::DependencyGraph::dst_tensors</a></div><div class="ttdeci">std::vector&lt; Id &gt; dst_tensors() const</div><div class="ttdoc">Get destination tensors of the whole graph. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00198">DependencyGraph.cpp:198</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_ae5851ab6cce508e843cf194055f0ace0"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#ae5851ab6cce508e843cf194055f0ace0">arm_compute::experimental::dynamic_fusion::DependencyGraph::all_ops</a></div><div class="ttdeci">std::vector&lt; Id &gt; all_ops() const</div><div class="ttdoc">Get all operators. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00218">DependencyGraph.cpp:218</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_af8a6f5f77bc64f863bbd2ff194ba9696"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#af8a6f5f77bc64f863bbd2ff194ba9696">arm_compute::experimental::dynamic_fusion::DependencyGraph::dst_ops</a></div><div class="ttdeci">std::vector&lt; Id &gt; dst_ops(Id op) const</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00369">DependencyGraph.cpp:369</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_a28f6adbbe8fe171beb3069b999aa2949"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a28f6adbbe8fe171beb3069b999aa2949">arm_compute::experimental::dynamic_fusion::DependencyGraph::src_ops</a></div><div class="ttdeci">std::vector&lt; Id &gt; src_ops(Id op) const</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00358">DependencyGraph.cpp:358</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a59e56af19e754a6aa26a612ebf91d05fa62be47fdd89da032cf78dfce82239579"><div class="ttname"><a href="namespacearm__compute.xhtml#a59e56af19e754a6aa26a612ebf91d05fa62be47fdd89da032cf78dfce82239579">arm_compute::ErrorCode::RUNTIME_ERROR</a></div><div class="ttdoc">Generic runtime error. </div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_aac5e2a1f61e8ea5255aca62f83e9124f"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">arm_compute::experimental::dynamic_fusion::DependencyGraph::Id</a></div><div class="ttdeci">SerialIdAllocator::Id Id</div><div class="ttdef"><b>Definition:</b> <a href="_dependency_graph_8h_source.xhtml#l00073">DependencyGraph.h:73</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a817a6ff79a6a2a870efd5d1a6ff60b91"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a817a6ff79a6a2a870efd5d1a6ff60b91">&#9670;&nbsp;</a></span>update_merge_point()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> update_merge_point </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a>&#160;</td>
          <td class="paramname"><em>t_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#aac5e2a1f61e8ea5255aca62f83e9124f">Id</a>&#160;</td>
          <td class="paramname"><em>merge_point</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Update <code>merge_point</code> to point to <code>t_id</code>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">t_id</td><td></td></tr>
    <tr><td class="paramname">merge_point</td><td></td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00051">51</a> of file <a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml">DependencyGraph.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a59e56af19e754a6aa26a612ebf91d05fa62be47fdd89da032cf78dfce82239579">arm_compute::RUNTIME_ERROR</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dependency_graph_8h_source.xhtml#l00097">DependencyGraph::empty_id()</a>.</p>
<div class="fragment"><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;{</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordflow">if</span>(_merge_to_internal.find(merge_point) == _merge_to_internal.end())</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    {</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <span class="keywordflow">return</span> Status{ <a class="code" href="namespacearm__compute.xhtml#a59e56af19e754a6aa26a612ebf91d05fa62be47fdd89da032cf78dfce82239579">ErrorCode::RUNTIME_ERROR</a>, <span class="stringliteral">&quot;Merge point does not exist&quot;</span> };</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    }</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    _merge_to_internal[merge_point] = t_id;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keywordflow">return</span> Status{};</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_a59e56af19e754a6aa26a612ebf91d05fa62be47fdd89da032cf78dfce82239579"><div class="ttname"><a href="namespacearm__compute.xhtml#a59e56af19e754a6aa26a612ebf91d05fa62be47fdd89da032cf78dfce82239579">arm_compute::ErrorCode::RUNTIME_ERROR</a></div><div class="ttdoc">Generic runtime error. </div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Friends And Related Function Documentation</h2>
<a id="a4e4a07e7e6126471b70b8f4793fb7af7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4e4a07e7e6126471b70b8f4793fb7af7">&#9670;&nbsp;</a></span>operator==</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml">DependencyGraph</a> &amp;&#160;</td>
          <td class="paramname"><em>g0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml">DependencyGraph</a> &amp;&#160;</td>
          <td class="paramname"><em>g1</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Strict equality comparison (all internal ids and order of insertion matter). </p>
<p>In the future this may be replaced with a topological comparison, allowing equivalent graphs with different internal ids to be equal</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">g0</td><td></td></tr>
    <tr><td class="paramname">g1</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true </dd>
<dd>
false </dd></dl>

<p class="definition">Definition at line <a class="el" href="_dependency_graph_8h_source.xhtml#l00212">212</a> of file <a class="el" href="_dependency_graph_8h_source.xhtml">DependencyGraph.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    {</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        <span class="comment">// Do not compare id allocators</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        <span class="keywordflow">return</span> std::make_tuple(</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                   g0._adj_src_tensors, g0._adj_dst_tensors, g0._adj_src_ops, g0._adj_dst_ops, g0._merge_to_internal)</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;               == std::make_tuple(</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                   g1._adj_src_tensors, g1._adj_dst_tensors, g1._adj_src_ops, g1._adj_dst_ops, g1._merge_to_internal);</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>arm_compute/core/experimental/<a class="el" href="_dependency_graph_8h_source.xhtml">DependencyGraph.h</a></li>
<li>src/core/experimental/dynamic_fusion/WorkloadImpl/<a class="el" href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml">DependencyGraph.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1experimental.xhtml">experimental</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml">dynamic_fusion</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml">DependencyGraph</a></li>
    <li class="footer">Generated on Thu Aug 18 2022 12:57:50 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
