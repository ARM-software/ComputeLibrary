<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/NEON/kernels/arm_conv/depthwise/depthwise_implementation_constraints.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('depthwise__implementation__constraints_8hpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">depthwise_implementation_constraints.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="depthwise__implementation__constraints_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2021-2022 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">/* Utilities for constructing functions which constrain which kernels are</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment"> * selected for a given depthwise problem.</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment"> * It is expected that this will be included in the files which list the</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment"> * available kernels. To avoid multiple definitions, an anonymous namespace is</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment"> * used.</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__gemm_8hpp.xhtml">arm_gemm.hpp</a>&quot;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &quot;src/core/NEON/kernels/assembly/depthwise.hpp&quot;</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__conv.xhtml">arm_conv</a></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__conv_1_1depthwise.xhtml#a301c401a1e9a5ac74367c4719a185aa4">depthwise</a></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="keyword">namespace</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;{</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> OutputStage&gt;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="keyword">using</span> ConstraintFn = std::function&lt;bool(const DepthwiseArgs &amp;, const OutputStage &amp;)&gt;;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="keyword">using</span> GenericConstraintFn = std::function&lt;bool(const DepthwiseArgs &amp;, const void *)&gt;;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;GenericConstraintFn make_constraint(<span class="keyword">const</span> GenericConstraintFn &amp;f) __attribute__ ((unused));</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;GenericConstraintFn make_constraint(<span class="keyword">const</span> GenericConstraintFn &amp;f)</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;{</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;  <span class="keywordflow">return</span> f;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;}</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> ... Fs&gt;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;GenericConstraintFn make_constraint(<span class="keyword">const</span> GenericConstraintFn &amp;f, Fs ... fs)</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;{</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;  <span class="keywordflow">return</span> [f, fs...] (<span class="keyword">const</span> DepthwiseArgs &amp;<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>, <span class="keyword">const</span> <span class="keywordtype">void</span> *os) -&gt; <span class="keywordtype">bool</span> {</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordflow">return</span> f(args, os) &amp;&amp; make_constraint(fs...)(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>, os);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;  };</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;}</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> OutputStage=Nothing, <span class="keyword">typename</span> ... Fs&gt;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;ConstraintFn&lt;OutputStage&gt; constraint(Fs ... fs)</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;{</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;  <span class="keywordflow">return</span> [fs...] (<span class="keyword">const</span> DepthwiseArgs &amp;<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>, <span class="keyword">const</span> OutputStage &amp;os) -&gt; <span class="keywordtype">bool</span> {</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keywordflow">return</span> make_constraint(fs...)(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>, &amp;os);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;  };</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;}</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">// Some useful constraints</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> Strategy&gt;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearm__conv_1_1pooling.xhtml#a6b83db4cc0278aff2e41048195fea7c4">is_supported</a>(<span class="keyword">const</span> DepthwiseArgs &amp;<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>, <span class="keyword">const</span> <span class="keywordtype">void</span> *)</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;{</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;  <span class="keywordflow">return</span> ((args.kernel_rows == Strategy::kernel_rows) &amp;&amp;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;          (args.kernel_cols == Strategy::kernel_cols) &amp;&amp;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;          (args.stride_rows == Strategy::stride_rows) &amp;&amp;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;          (args.stride_cols == Strategy::stride_cols));</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;}</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="keywordtype">bool</span> cpu_has_dot_product(<span class="keyword">const</span> DepthwiseArgs &amp;args, <span class="keyword">const</span> <span class="keywordtype">void</span> *) __attribute__ ((unused));</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="keywordtype">bool</span> cpu_has_dot_product(<span class="keyword">const</span> DepthwiseArgs &amp;args, <span class="keyword">const</span> <span class="keywordtype">void</span> *)</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;{</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;  <span class="keywordflow">return</span> args.cpu_info-&gt;has_dotprod();</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;}</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="keywordtype">bool</span> cpu_has_sve(<span class="keyword">const</span> DepthwiseArgs &amp;args, <span class="keyword">const</span> <span class="keywordtype">void</span> *) __attribute__ ((unused));</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="keywordtype">bool</span> cpu_has_sve(<span class="keyword">const</span> DepthwiseArgs &amp;args, <span class="keyword">const</span> <span class="keywordtype">void</span> *)</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;{</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;  <span class="keywordflow">return</span> args.cpu_info-&gt;has_sve();</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;}</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="keywordtype">bool</span> cpu_has_sve2(<span class="keyword">const</span> DepthwiseArgs &amp;args, <span class="keyword">const</span> <span class="keywordtype">void</span> *) __attribute__ ((unused));</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="keywordtype">bool</span> cpu_has_sve2(<span class="keyword">const</span> DepthwiseArgs &amp;args, <span class="keyword">const</span> <span class="keywordtype">void</span> *)</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;{</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;  <span class="keywordflow">return</span> args.cpu_info-&gt;has_sve2();</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;}</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="keywordtype">bool</span> cpu_has_fp16(<span class="keyword">const</span> DepthwiseArgs &amp;args, <span class="keyword">const</span> <span class="keywordtype">void</span> *) __attribute__ ((unused));</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="keywordtype">bool</span> cpu_has_fp16(<span class="keyword">const</span> DepthwiseArgs &amp;args, <span class="keyword">const</span> <span class="keywordtype">void</span> *)</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;{</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;  <span class="keywordflow">return</span> args.cpu_info-&gt;has_fp16();</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;}</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="keywordtype">bool</span> has_no_channel_multiplier(<span class="keyword">const</span> DepthwiseArgs &amp;args, <span class="keyword">const</span> <span class="keywordtype">void</span> *) __attribute__ ((unused));</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="keywordtype">bool</span> has_no_channel_multiplier(<span class="keyword">const</span> DepthwiseArgs &amp;args, <span class="keyword">const</span> <span class="keywordtype">void</span> *)</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;{</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;  <span class="keywordflow">return</span> args.channel_multiplier == 1;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;}</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="keywordtype">bool</span> has_channel_multiplier(<span class="keyword">const</span> DepthwiseArgs &amp;args, <span class="keyword">const</span> <span class="keywordtype">void</span> *) __attribute__ ((unused));</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="keywordtype">bool</span> has_channel_multiplier(<span class="keyword">const</span> DepthwiseArgs &amp;args, <span class="keyword">const</span> <span class="keywordtype">void</span> *)</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;{</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;  <span class="keywordflow">return</span> args.channel_multiplier &gt; 1;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;}</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="keywordtype">bool</span> qp_has_no_left_shift(<span class="keyword">const</span> DepthwiseArgs &amp;args, <span class="keyword">const</span> <span class="keywordtype">void</span> *_qp) __attribute__ ((unused));</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="keywordtype">bool</span> qp_has_no_left_shift(<span class="keyword">const</span> DepthwiseArgs &amp;, <span class="keyword">const</span> <span class="keywordtype">void</span> *_qp)</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;{</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;  <span class="keyword">const</span> <span class="keyword">auto</span> qp = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a> *<span class="keyword">&gt;</span>(_qp);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;  <span class="keywordflow">return</span> qp-&gt;<a class="code" href="structarm__gemm_1_1_requantize32.xhtml#adbfc422506b35557afb05aee3474046e">per_channel_requant</a> ?</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    (qp-&gt;per_channel_left_shifts == <span class="keyword">nullptr</span>) :</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    (qp-&gt;per_layer_left_shift == 0);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;}</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="keywordtype">bool</span> qp_zero_a_offset(<span class="keyword">const</span> DepthwiseArgs &amp;args, <span class="keyword">const</span> <span class="keywordtype">void</span> *_qp) __attribute__ ((unused));</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="keywordtype">bool</span> qp_zero_a_offset(<span class="keyword">const</span> DepthwiseArgs &amp;, <span class="keyword">const</span> <span class="keywordtype">void</span> *_qp)</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;{</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;  <span class="keyword">const</span> <span class="keyword">auto</span> qp = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a> *<span class="keyword">&gt;</span>(_qp);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;  <span class="keywordflow">return</span> qp-&gt;<a class="code" href="structarm__gemm_1_1_requantize32.xhtml#a3d53b60fe918402342090da9651ee092">a_offset</a> == 0;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;}</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keywordtype">bool</span> qp_skip_clamp(<span class="keyword">const</span> DepthwiseArgs &amp;args, <span class="keyword">const</span> <span class="keywordtype">void</span> *_qp) __attribute__ ((unused));</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keywordtype">bool</span> qp_skip_clamp(<span class="keyword">const</span> DepthwiseArgs &amp;, <span class="keyword">const</span> <span class="keywordtype">void</span> *_qp)</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;{</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;  <span class="keyword">const</span> <span class="keyword">auto</span> qp = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a> *<span class="keyword">&gt;</span>(_qp);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;  <span class="keywordflow">return</span> (qp-&gt;minval == std::numeric_limits&lt;T&gt;::min() &amp;&amp;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;          qp-&gt;maxval == std::numeric_limits&lt;T&gt;::max());</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;}</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;}  <span class="comment">// namespace</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;}  <span class="comment">// namespace depthwise</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;}  <span class="comment">// namespace arm_conv</span></div><div class="ttc" id="namespacearm__conv_xhtml"><div class="ttname"><a href="namespacearm__conv.xhtml">arm_conv</a></div><div class="ttdef"><b>Definition:</b> <a href="addressing_8cpp_source.xhtml#l00029">addressing.cpp:29</a></div></div>
<div class="ttc" id="namespace_gemm_tuner_xhtml_a8187411843a6284ffb964ef3fb9fcab3"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">GemmTuner.args</a></div><div class="ttdeci">args</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner.py:679</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_requantize32_xhtml_a3d53b60fe918402342090da9651ee092"><div class="ttname"><a href="structarm__gemm_1_1_requantize32.xhtml#a3d53b60fe918402342090da9651ee092">arm_gemm::Requantize32::a_offset</a></div><div class="ttdeci">int32_t a_offset</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00174">arm_gemm.hpp:174</a></div></div>
<div class="ttc" id="namespacearm__conv_1_1pooling_xhtml_a6b83db4cc0278aff2e41048195fea7c4"><div class="ttname"><a href="namespacearm__conv_1_1pooling.xhtml#a6b83db4cc0278aff2e41048195fea7c4">arm_conv::pooling::is_supported</a></div><div class="ttdeci">bool is_supported(const PoolingArgs &amp;args, const Nothing &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="pooling__implementation_8hpp_source.xhtml#l00103">pooling_implementation.hpp:103</a></div></div>
<div class="ttc" id="arm__gemm_8hpp_xhtml"><div class="ttname"><a href="arm__gemm_8hpp.xhtml">arm_gemm.hpp</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_requantize32_xhtml_adbfc422506b35557afb05aee3474046e"><div class="ttname"><a href="structarm__gemm_1_1_requantize32.xhtml#adbfc422506b35557afb05aee3474046e">arm_gemm::Requantize32::per_channel_requant</a></div><div class="ttdeci">bool per_channel_requant</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00177">arm_gemm.hpp:177</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_requantize32_xhtml"><div class="ttname"><a href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00169">arm_gemm.hpp:169</a></div></div>
<div class="ttc" id="namespacearm__conv_1_1depthwise_xhtml_a301c401a1e9a5ac74367c4719a185aa4"><div class="ttname"><a href="namespacearm__conv_1_1depthwise.xhtml#a301c401a1e9a5ac74367c4719a185aa4">arm_conv::depthwise::depthwise</a></div><div class="ttdeci">template UniqueDepthwiseCommon&lt; float &gt; depthwise(const DepthwiseArgs &amp;, const Nothing &amp;)</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_d91e1966cc57df4f49d1e07be7697713.xhtml">NEON</a></li><li class="navelem"><a class="el" href="dir_1ce938f580a6f304b99685e2c1dd19db.xhtml">kernels</a></li><li class="navelem"><a class="el" href="dir_ea98ae4f30fbc97db6231c6535bdb2d9.xhtml">arm_conv</a></li><li class="navelem"><a class="el" href="dir_abb214ad2a926c78a0f27cabc6cb4a00.xhtml">depthwise</a></li><li class="navelem"><a class="el" href="depthwise__implementation__constraints_8hpp.xhtml">depthwise_implementation_constraints.hpp</a></li>
    <li class="footer">Generated on Thu Aug 18 2022 12:57:35 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
