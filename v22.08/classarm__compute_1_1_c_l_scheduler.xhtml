<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: CLScheduler Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarm__compute_1_1_c_l_scheduler.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">CLScheduler Class Reference<span class="mlabels"><span class="mlabel">final</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p>Provides global access to a CL context and command queue.  
 <a href="classarm__compute_1_1_c_l_scheduler.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_c_l_scheduler_8h_source.xhtml">CLScheduler.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a98c15ddf61f1cf0c8d90429f41db09fb"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#a98c15ddf61f1cf0c8d90429f41db09fb">CLScheduler</a> ()</td></tr>
<tr class="memdesc:a98c15ddf61f1cf0c8d90429f41db09fb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor.  <a href="#a98c15ddf61f1cf0c8d90429f41db09fb">More...</a><br /></td></tr>
<tr class="separator:a98c15ddf61f1cf0c8d90429f41db09fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2696485a5840b821fad063ee439fca4"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#aa2696485a5840b821fad063ee439fca4">CLScheduler</a> (const <a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml">CLScheduler</a> &amp;)=delete</td></tr>
<tr class="memdesc:aa2696485a5840b821fad063ee439fca4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prevent instances of this class from being copied (As this class contains pointers)  <a href="#aa2696485a5840b821fad063ee439fca4">More...</a><br /></td></tr>
<tr class="separator:aa2696485a5840b821fad063ee439fca4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afae103416db3e94a7ba0dc7ed642a7fc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml">CLScheduler</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#afae103416db3e94a7ba0dc7ed642a7fc">operator=</a> (const <a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml">CLScheduler</a> &amp;)=delete</td></tr>
<tr class="memdesc:afae103416db3e94a7ba0dc7ed642a7fc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prevent instances of this class from being copied (As this class contains pointers)  <a href="#afae103416db3e94a7ba0dc7ed642a7fc">More...</a><br /></td></tr>
<tr class="separator:afae103416db3e94a7ba0dc7ed642a7fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f1b713830e21a03ef018f2ae7c7bd17"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#a8f1b713830e21a03ef018f2ae7c7bd17">~CLScheduler</a> ()=default</td></tr>
<tr class="memdesc:a8f1b713830e21a03ef018f2ae7c7bd17"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default destructor.  <a href="#a8f1b713830e21a03ef018f2ae7c7bd17">More...</a><br /></td></tr>
<tr class="separator:a8f1b713830e21a03ef018f2ae7c7bd17"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a56d8f451f6b30093a49f1b4978681b07"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#a56d8f451f6b30093a49f1b4978681b07">default_init</a> (<a class="el" href="classarm__compute_1_1_i_c_l_tuner.xhtml">ICLTuner</a> *cl_tuner=nullptr, <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_heuristics_handle.xhtml">CLGEMMHeuristicsHandle</a> *gemm_h=nullptr, <a class="el" href="namespacearm__compute.xhtml#a94eb95e47316e7dc5af7615592d26bdd">CLBackendType</a> cl_backend_type=<a class="el" href="namespacearm__compute.xhtml#a94eb95e47316e7dc5af7615592d26bdda925641e0b76c28cc940e8f3ca178d826">CLBackendType::Native</a>)</td></tr>
<tr class="memdesc:a56d8f451f6b30093a49f1b4978681b07"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialises the context and command queue used by the scheduler to default values and sets a default device and kernel path for the <a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml">CLKernelLibrary</a>.  <a href="#a56d8f451f6b30093a49f1b4978681b07">More...</a><br /></td></tr>
<tr class="separator:a56d8f451f6b30093a49f1b4978681b07"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab74ade35e03d97dc260789e541a157ef"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#ab74ade35e03d97dc260789e541a157ef">default_init_with_context</a> (cl::Device &amp;device, cl::Context &amp;ctx, <a class="el" href="classarm__compute_1_1_i_c_l_tuner.xhtml">ICLTuner</a> *cl_tuner=nullptr, <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_heuristics_handle.xhtml">CLGEMMHeuristicsHandle</a> *gemm_h=nullptr)</td></tr>
<tr class="memdesc:ab74ade35e03d97dc260789e541a157ef"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialises the scheduler with context and device provided by the user.  <a href="#ab74ade35e03d97dc260789e541a157ef">More...</a><br /></td></tr>
<tr class="separator:ab74ade35e03d97dc260789e541a157ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a038d136792f815c57fcdf93b0a59f5f1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#a038d136792f815c57fcdf93b0a59f5f1">default_reinit</a> (<a class="el" href="classarm__compute_1_1_i_c_l_tuner.xhtml">ICLTuner</a> *cl_tuner=nullptr, <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_heuristics_handle.xhtml">CLGEMMHeuristicsHandle</a> *gemm_h=nullptr, <a class="el" href="namespacearm__compute.xhtml#a94eb95e47316e7dc5af7615592d26bdd">CLBackendType</a> cl_backend_type=<a class="el" href="namespacearm__compute.xhtml#a94eb95e47316e7dc5af7615592d26bdda925641e0b76c28cc940e8f3ca178d826">CLBackendType::Native</a>)</td></tr>
<tr class="memdesc:a038d136792f815c57fcdf93b0a59f5f1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Re-initializes the context and command queue used by the scheduler to default values and sets a default device and kernel path for the <a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml">CLKernelLibrary</a>.  <a href="#a038d136792f815c57fcdf93b0a59f5f1">More...</a><br /></td></tr>
<tr class="separator:a038d136792f815c57fcdf93b0a59f5f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae1a643e517f50bf0392fb6516dd7cf67"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">enqueue</a> (<a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml">ICLKernel</a> &amp;kernel, bool flush=true)</td></tr>
<tr class="memdesc:ae1a643e517f50bf0392fb6516dd7cf67"><td class="mdescLeft">&#160;</td><td class="mdescRight">Schedule the execution of the passed kernel if possible.  <a href="#ae1a643e517f50bf0392fb6516dd7cf67">More...</a><br /></td></tr>
<tr class="separator:ae1a643e517f50bf0392fb6516dd7cf67"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c0fc6f465cae029d60ffdfc7f3e99d9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#a5c0fc6f465cae029d60ffdfc7f3e99d9">enqueue_op</a> (<a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml">ICLKernel</a> &amp;kernel, <a class="el" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> &amp;tensors, bool flush=true)</td></tr>
<tr class="memdesc:a5c0fc6f465cae029d60ffdfc7f3e99d9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Schedule the execution of the passed kernel if possible.  <a href="#a5c0fc6f465cae029d60ffdfc7f3e99d9">More...</a><br /></td></tr>
<tr class="separator:a5c0fc6f465cae029d60ffdfc7f3e99d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4ffe2327a88f701790ed239675d2509f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#a4ffe2327a88f701790ed239675d2509f">enqueue_op</a> (<a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml">ICLKernel</a> &amp;kernel, <a class="el" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> &amp;tensors, const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_execution_descriptor.xhtml">experimental::dynamic_fusion::ClExecutionDescriptor</a> &amp;exec_desc, bool flush=true)</td></tr>
<tr class="memdesc:a4ffe2327a88f701790ed239675d2509f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Schedule the execution of the passed kernel if possible.  <a href="#a4ffe2327a88f701790ed239675d2509f">More...</a><br /></td></tr>
<tr class="separator:a4ffe2327a88f701790ed239675d2509f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade56e13dd46cf95a8430a7530ae2cb7f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#ade56e13dd46cf95a8430a7530ae2cb7f">init</a> (cl::Context <a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#a86409f541991c3ac377c2a6b7d1f832d">context</a>, cl::CommandQueue <a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#a398a2582c746d28fc125487a44c9ed74">queue</a>, const cl::Device &amp;device, <a class="el" href="classarm__compute_1_1_i_c_l_tuner.xhtml">ICLTuner</a> *cl_tuner=nullptr, <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_heuristics_handle.xhtml">CLGEMMHeuristicsHandle</a> *gemm_h=nullptr, <a class="el" href="namespacearm__compute.xhtml#a94eb95e47316e7dc5af7615592d26bdd">CLBackendType</a> cl_backend_type=<a class="el" href="namespacearm__compute.xhtml#a94eb95e47316e7dc5af7615592d26bdda925641e0b76c28cc940e8f3ca178d826">CLBackendType::Native</a>)</td></tr>
<tr class="memdesc:ade56e13dd46cf95a8430a7530ae2cb7f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialises the context and command queue to be used by the scheduler.  <a href="#ade56e13dd46cf95a8430a7530ae2cb7f">More...</a><br /></td></tr>
<tr class="separator:ade56e13dd46cf95a8430a7530ae2cb7f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a86409f541991c3ac377c2a6b7d1f832d"><td class="memItemLeft" align="right" valign="top">cl::Context &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#a86409f541991c3ac377c2a6b7d1f832d">context</a> ()</td></tr>
<tr class="memdesc:a86409f541991c3ac377c2a6b7d1f832d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Accessor for the associated CL context.  <a href="#a86409f541991c3ac377c2a6b7d1f832d">More...</a><br /></td></tr>
<tr class="separator:a86409f541991c3ac377c2a6b7d1f832d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a398a2582c746d28fc125487a44c9ed74"><td class="memItemLeft" align="right" valign="top">cl::CommandQueue &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#a398a2582c746d28fc125487a44c9ed74">queue</a> ()</td></tr>
<tr class="memdesc:a398a2582c746d28fc125487a44c9ed74"><td class="mdescLeft">&#160;</td><td class="mdescRight">Accessor for the associated CL command queue.  <a href="#a398a2582c746d28fc125487a44c9ed74">More...</a><br /></td></tr>
<tr class="separator:a398a2582c746d28fc125487a44c9ed74"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a27561688e2fc60176608ef725a4ecb30"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#a27561688e2fc60176608ef725a4ecb30">target</a> () const</td></tr>
<tr class="memdesc:a27561688e2fc60176608ef725a4ecb30"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the target GPU.  <a href="#a27561688e2fc60176608ef725a4ecb30">More...</a><br /></td></tr>
<tr class="separator:a27561688e2fc60176608ef725a4ecb30"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c3cecc6734b01ed92d5e66876411e00"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_heuristics_handle.xhtml">CLGEMMHeuristicsHandle</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#a5c3cecc6734b01ed92d5e66876411e00">gemm_heuristics</a> () const</td></tr>
<tr class="memdesc:a5c3cecc6734b01ed92d5e66876411e00"><td class="mdescLeft">&#160;</td><td class="mdescRight">Accessor for the associated <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_heuristics_handle.xhtml" title="Handle for loading and retrieving GEMM heuristics. ">CLGEMMHeuristicsHandle</a>.  <a href="#a5c3cecc6734b01ed92d5e66876411e00">More...</a><br /></td></tr>
<tr class="separator:a5c3cecc6734b01ed92d5e66876411e00"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a293edc1bbcbddffb7228ac97917ed107"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#a293edc1bbcbddffb7228ac97917ed107">set_context</a> (cl::Context <a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#a86409f541991c3ac377c2a6b7d1f832d">context</a>)</td></tr>
<tr class="memdesc:a293edc1bbcbddffb7228ac97917ed107"><td class="mdescLeft">&#160;</td><td class="mdescRight">Accessor to set the CL context to be used by the scheduler.  <a href="#a293edc1bbcbddffb7228ac97917ed107">More...</a><br /></td></tr>
<tr class="separator:a293edc1bbcbddffb7228ac97917ed107"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9608e5af9f3a199f69ca6aa41b94359a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9608e5af9f3a199f69ca6aa41b94359a">set_queue</a> (cl::CommandQueue <a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#a398a2582c746d28fc125487a44c9ed74">queue</a>)</td></tr>
<tr class="memdesc:a9608e5af9f3a199f69ca6aa41b94359a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Accessor to set the CL command queue to be used by the scheduler.  <a href="#a9608e5af9f3a199f69ca6aa41b94359a">More...</a><br /></td></tr>
<tr class="separator:a9608e5af9f3a199f69ca6aa41b94359a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad5ba9d34a3a855bf1dd2e36316ff550a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#ad5ba9d34a3a855bf1dd2e36316ff550a">set_target</a> (<a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a> <a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#a27561688e2fc60176608ef725a4ecb30">target</a>)</td></tr>
<tr class="memdesc:ad5ba9d34a3a855bf1dd2e36316ff550a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Accessor to set target GPU to be used by the scheduler.  <a href="#ad5ba9d34a3a855bf1dd2e36316ff550a">More...</a><br /></td></tr>
<tr class="separator:ad5ba9d34a3a855bf1dd2e36316ff550a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4e05822793fb639fd65ac30428a7878"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#ad4e05822793fb639fd65ac30428a7878">set_tuner</a> (<a class="el" href="classarm__compute_1_1_i_c_l_tuner.xhtml">ICLTuner</a> *tuner)</td></tr>
<tr class="memdesc:ad4e05822793fb639fd65ac30428a7878"><td class="mdescLeft">&#160;</td><td class="mdescRight">Accessor to set the CL tuner to be used by the scheduler.  <a href="#ad4e05822793fb639fd65ac30428a7878">More...</a><br /></td></tr>
<tr class="separator:ad4e05822793fb639fd65ac30428a7878"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad55f80ed3cd8b6c4f247763b747016af"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#ad55f80ed3cd8b6c4f247763b747016af">sync</a> ()</td></tr>
<tr class="memdesc:ad55f80ed3cd8b6c4f247763b747016af"><td class="mdescLeft">&#160;</td><td class="mdescRight">Blocks until all commands in the associated command queue have finished.  <a href="#ad55f80ed3cd8b6c4f247763b747016af">More...</a><br /></td></tr>
<tr class="separator:ad55f80ed3cd8b6c4f247763b747016af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6096d26e8e29e1a7f01b0f083fb7e33f"><td class="memItemLeft" align="right" valign="top">cl::Event&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#a6096d26e8e29e1a7f01b0f083fb7e33f">enqueue_sync_event</a> ()</td></tr>
<tr class="memdesc:a6096d26e8e29e1a7f01b0f083fb7e33f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enqueues a marker into the associated command queue and return the event.  <a href="#a6096d26e8e29e1a7f01b0f083fb7e33f">More...</a><br /></td></tr>
<tr class="separator:a6096d26e8e29e1a7f01b0f083fb7e33f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c2059df991a75abef4eb643510c9544"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#a6c2059df991a75abef4eb643510c9544">tune_kernel_static</a> (<a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml">ICLKernel</a> &amp;kernel)</td></tr>
<tr class="memdesc:a6c2059df991a75abef4eb643510c9544"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tunes OpenCL kernel.  <a href="#a6c2059df991a75abef4eb643510c9544">More...</a><br /></td></tr>
<tr class="separator:a6c2059df991a75abef4eb643510c9544"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a82200125de0667aac827261b47121ff7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#a82200125de0667aac827261b47121ff7">enable_job_chaining</a> (int job_chaining_size)</td></tr>
<tr class="memdesc:a82200125de0667aac827261b47121ff7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enable job chaining.  <a href="#a82200125de0667aac827261b47121ff7">More...</a><br /></td></tr>
<tr class="separator:a82200125de0667aac827261b47121ff7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd81d12c19e4080b463244a58118e503"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#acd81d12c19e4080b463244a58118e503">is_initialised</a> () const</td></tr>
<tr class="separator:acd81d12c19e4080b463244a58118e503"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a9b58d0eb9a2af8e6d7908695e1557d6c"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml">CLScheduler</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">get</a> ()</td></tr>
<tr class="memdesc:a9b58d0eb9a2af8e6d7908695e1557d6c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Access the scheduler singleton.  <a href="#a9b58d0eb9a2af8e6d7908695e1557d6c">More...</a><br /></td></tr>
<tr class="separator:a9b58d0eb9a2af8e6d7908695e1557d6c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Provides global access to a CL context and command queue. </p>

<p class="definition">Definition at line <a class="el" href="_c_l_scheduler_8h_source.xhtml#l00056">56</a> of file <a class="el" href="_c_l_scheduler_8h_source.xhtml">CLScheduler.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a98c15ddf61f1cf0c8d90429f41db09fb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a98c15ddf61f1cf0c8d90429f41db09fb">&#9670;&nbsp;</a></span>CLScheduler() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml">CLScheduler</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Constructor. </p>

<p class="definition">Definition at line <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00101">101</a> of file <a class="el" href="_c_l_scheduler_8cpp_source.xhtml">CLScheduler.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    : _context(), _queue(), _target(<a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3afa362f4daec88442a387ff7cda411a38">GPUTarget::MIDGARD</a>), _is_initialised(<span class="keyword">false</span>), _cl_tuner(<span class="keyword">nullptr</span>), _gemm_heuristics(<span class="keyword">nullptr</span>), _backend_type(<a class="code" href="namespacearm__compute.xhtml#a94eb95e47316e7dc5af7615592d26bdda925641e0b76c28cc940e8f3ca178d826">CLBackendType::Native</a>), _job_chaining_enabled(<span class="keyword">false</span>),</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;      _job_chaining_size(), _job_chaining_count(0)</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;{</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_a94eb95e47316e7dc5af7615592d26bdda925641e0b76c28cc940e8f3ca178d826"><div class="ttname"><a href="namespacearm__compute.xhtml#a94eb95e47316e7dc5af7615592d26bdda925641e0b76c28cc940e8f3ca178d826">arm_compute::CLBackendType::Native</a></div><div class="ttdoc">OpenCL native backend. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3afa362f4daec88442a387ff7cda411a38"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3afa362f4daec88442a387ff7cda411a38">arm_compute::GPUTarget::MIDGARD</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa2696485a5840b821fad063ee439fca4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa2696485a5840b821fad063ee439fca4">&#9670;&nbsp;</a></span>CLScheduler() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml">CLScheduler</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml">CLScheduler</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prevent instances of this class from being copied (As this class contains pointers) </p>

</div>
</div>
<a id="a8f1b713830e21a03ef018f2ae7c7bd17"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8f1b713830e21a03ef018f2ae7c7bd17">&#9670;&nbsp;</a></span>~CLScheduler()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml">CLScheduler</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default destructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a86409f541991c3ac377c2a6b7d1f832d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a86409f541991c3ac377c2a6b7d1f832d">&#9670;&nbsp;</a></span>context()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl::Context &amp; context </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Accessor for the associated CL context. </p>
<dl class="section return"><dt>Returns</dt><dd>A CL context. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00036">36</a> of file <a class="el" href="_c_l_scheduler_8cpp_source.xhtml">CLScheduler.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00065">CLKernelLibrary::context()</a>, and <a class="el" href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00039">CLKernelLibrary::get()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_tensor_allocator_8cpp_source.xhtml#l00167">CLTensorAllocator::import_memory()</a>, <a class="el" href="src_2runtime_2_c_l_2_utils_8cpp_source.xhtml#l00035">arm_compute::restore_program_cache_from_file()</a>, and <a class="el" href="_framework_8cpp_source.xhtml#l00543">Framework::run()</a>.</p>
<div class="fragment"><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!_is_initialised);</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    _context = <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">CLKernelLibrary::get</a>().<a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a86409f541991c3ac377c2a6b7d1f832d">context</a>();</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keywordflow">return</span> _context;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_acba005f5ce2c62cbf3f94d074d9007aa"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">arm_compute::CLKernelLibrary::get</a></div><div class="ttdeci">static CLKernelLibrary &amp; get()</div><div class="ttdoc">Access the KernelLibrary singleton. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00039">CLKernelLibrary.cpp:39</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_a86409f541991c3ac377c2a6b7d1f832d"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#a86409f541991c3ac377c2a6b7d1f832d">arm_compute::CLKernelLibrary::context</a></div><div class="ttdeci">cl::Context &amp; context()</div><div class="ttdoc">Accessor for the associated CL context. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00065">CLKernelLibrary.cpp:65</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a56d8f451f6b30093a49f1b4978681b07"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a56d8f451f6b30093a49f1b4978681b07">&#9670;&nbsp;</a></span>default_init()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void default_init </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_l_tuner.xhtml">ICLTuner</a> *&#160;</td>
          <td class="paramname"><em>cl_tuner</em> = <code>nullptr</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_heuristics_handle.xhtml">CLGEMMHeuristicsHandle</a> *&#160;</td>
          <td class="paramname"><em>gemm_h</em> = <code>nullptr</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a94eb95e47316e7dc5af7615592d26bdd">CLBackendType</a>&#160;</td>
          <td class="paramname"><em>cl_backend_type</em> = <code><a class="el" href="namespacearm__compute.xhtml#a94eb95e47316e7dc5af7615592d26bdda925641e0b76c28cc940e8f3ca178d826">CLBackendType::Native</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initialises the context and command queue used by the scheduler to default values and sets a default device and kernel path for the <a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml">CLKernelLibrary</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname"><a class="el" href="namespacearm__compute_1_1cl__tuner.xhtml">cl_tuner</a></td><td>(Optional) Pointer to <a class="el" href="classarm__compute_1_1_i_c_l_tuner.xhtml" title="Basic interface for tuning the OpenCL kernels. ">ICLTuner</a> (default=nullptr) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">gemm_h</td><td>(Optional) Pointer to <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_heuristics_handle.xhtml" title="Handle for loading and retrieving GEMM heuristics. ">CLGEMMHeuristicsHandle</a> (default = nullptr) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cl_backend_type</td><td>(Optional) Type of backend to use (default = <a class="el" href="namespacearm__compute.xhtml#a94eb95e47316e7dc5af7615592d26bdda925641e0b76c28cc940e8f3ca178d826" title="OpenCL native backend. ">CLBackendType::Native</a>) </td></tr>
  </table>
  </dd>
</dl>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="dynamic_fusion_2cl_fused_conv2d_elementwise_add_8cpp-example.xhtml#a6">dynamic_fusion/cl_fused_conv2d_elementwise_add.cpp</a>.</dd>
</dl>
<p class="definition">Definition at line <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00126">126</a> of file <a class="el" href="_c_l_scheduler_8cpp_source.xhtml">CLScheduler.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00456">ARM_COMPUTE_ERROR_ON_MSG</a>, <a class="el" href="runtime_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00126">arm_compute::create_opencl_context_and_device()</a>, <a class="el" href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00039">CLKernelLibrary::get()</a>, <a class="el" href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00056">CLKernelLibrary::init()</a>, <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00158">CLScheduler::init()</a>, and <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00043">CLScheduler::queue()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00145">CLScheduler::default_reinit()</a>, <a class="el" href="_c_l_device_backend_8cpp_source.xhtml#l00086">CLDeviceBackend::initialize_backend()</a>, and <a class="el" href="src_2runtime_2_c_l_2_utils_8cpp_source.xhtml#l00035">arm_compute::restore_program_cache_from_file()</a>.</p>
<div class="fragment"><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;{</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keywordflow">if</span>(!_is_initialised)</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    {</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        cl::Context ctx;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        cl::Device  dev;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        cl_int      err;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        std::tie(ctx, dev, err) = <a class="code" href="namespacearm__compute.xhtml#a419153497f83b7db0c19112371b10a3f">create_opencl_context_and_device</a>(cl_backend_type);</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(err != CL_SUCCESS, <span class="stringliteral">&quot;Failed to create OpenCL context&quot;</span>);</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        cl::CommandQueue <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a398a2582c746d28fc125487a44c9ed74">queue</a> = cl::CommandQueue(ctx, dev);</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">CLKernelLibrary::get</a>().<a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a9f976367edcd9ab787375373e050b94b">init</a>(<span class="stringliteral">&quot;./cl_kernels/&quot;</span>, ctx, dev);</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ade56e13dd46cf95a8430a7530ae2cb7f">init</a>(ctx, queue, dev, cl_tuner, gemm_h);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    }</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="comment">// Set CL tuner and GEMM heuristics</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    _cl_tuner        = cl_tuner;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    _gemm_heuristics = gemm_h;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_acba005f5ce2c62cbf3f94d074d9007aa"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">arm_compute::CLKernelLibrary::get</a></div><div class="ttdeci">static CLKernelLibrary &amp; get()</div><div class="ttdoc">Access the KernelLibrary singleton. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00039">CLKernelLibrary.cpp:39</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a419153497f83b7db0c19112371b10a3f"><div class="ttname"><a href="namespacearm__compute.xhtml#a419153497f83b7db0c19112371b10a3f">arm_compute::create_opencl_context_and_device</a></div><div class="ttdeci">std::tuple&lt; cl::Context, cl::Device, cl_int &gt; create_opencl_context_and_device(CLBackendType cl_backend_type)</div><div class="ttdoc">This function creates an OpenCL context and a device. </div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00126">CLHelpers.cpp:126</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a0b0eb3235749a2909dc5a101afe59a1b"><div class="ttname"><a href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond, msg)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00456">Error.h:456</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_a9f976367edcd9ab787375373e050b94b"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#a9f976367edcd9ab787375373e050b94b">arm_compute::CLKernelLibrary::init</a></div><div class="ttdeci">void init(std::string kernel_path, cl::Context context, cl::Device device)</div><div class="ttdoc">Initialises the kernel library. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00056">CLKernelLibrary.cpp:56</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a398a2582c746d28fc125487a44c9ed74"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a398a2582c746d28fc125487a44c9ed74">arm_compute::CLScheduler::queue</a></div><div class="ttdeci">cl::CommandQueue &amp; queue()</div><div class="ttdoc">Accessor for the associated CL command queue. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00043">CLScheduler.cpp:43</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_ade56e13dd46cf95a8430a7530ae2cb7f"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#ade56e13dd46cf95a8430a7530ae2cb7f">arm_compute::CLScheduler::init</a></div><div class="ttdeci">void init(cl::Context context, cl::CommandQueue queue, const cl::Device &amp;device, ICLTuner *cl_tuner=nullptr, CLGEMMHeuristicsHandle *gemm_h=nullptr, CLBackendType cl_backend_type=CLBackendType::Native)</div><div class="ttdoc">Initialises the context and command queue to be used by the scheduler. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00158">CLScheduler.cpp:158</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab74ade35e03d97dc260789e541a157ef"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab74ade35e03d97dc260789e541a157ef">&#9670;&nbsp;</a></span>default_init_with_context()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void default_init_with_context </td>
          <td>(</td>
          <td class="paramtype">cl::Device &amp;&#160;</td>
          <td class="paramname"><em>device</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl::Context &amp;&#160;</td>
          <td class="paramname"><em>ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_l_tuner.xhtml">ICLTuner</a> *&#160;</td>
          <td class="paramname"><em>cl_tuner</em> = <code>nullptr</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_heuristics_handle.xhtml">CLGEMMHeuristicsHandle</a> *&#160;</td>
          <td class="paramname"><em>gemm_h</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initialises the scheduler with context and device provided by the user. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">device</td><td>OpenCL device to be used </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ctx</td><td>OpenCL ctx to be used </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname"><a class="el" href="namespacearm__compute_1_1cl__tuner.xhtml">cl_tuner</a></td><td>(Optional) Pointer to <a class="el" href="classarm__compute_1_1_i_c_l_tuner.xhtml" title="Basic interface for tuning the OpenCL kernels. ">ICLTuner</a> (default=nullptr) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">gemm_h</td><td>(Optional) Pointer to <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_heuristics_handle.xhtml" title="Handle for loading and retrieving GEMM heuristics. ">CLGEMMHeuristicsHandle</a> (default = nullptr) </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00114">114</a> of file <a class="el" href="_c_l_scheduler_8cpp_source.xhtml">CLScheduler.cpp</a>.</p>

<p class="reference">References <a class="el" href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00039">CLKernelLibrary::get()</a>, <a class="el" href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00056">CLKernelLibrary::init()</a>, <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00158">CLScheduler::init()</a>, and <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00043">CLScheduler::queue()</a>.</p>

<p class="reference">Referenced by <a class="el" href="main_8cpp_source.xhtml#l00096">main()</a>, and <a class="el" href="benchmark__examples_2_run_example_8cpp_source.xhtml#l00094">arm_compute::utils::run_example()</a>.</p>
<div class="fragment"><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;{</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keywordflow">if</span>(!_is_initialised)</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    {</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        <span class="keyword">const</span> std::string cl_kernels_folder(<span class="stringliteral">&quot;./cl_kernels/&quot;</span>);</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        cl::CommandQueue  <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a398a2582c746d28fc125487a44c9ed74">queue</a> = cl::CommandQueue(ctx, device);</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">CLKernelLibrary::get</a>().<a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a9f976367edcd9ab787375373e050b94b">init</a>(cl_kernels_folder, ctx, device);</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ade56e13dd46cf95a8430a7530ae2cb7f">init</a>(ctx, queue, device, cl_tuner, gemm_h);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        _cl_tuner = cl_tuner;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    }</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_acba005f5ce2c62cbf3f94d074d9007aa"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">arm_compute::CLKernelLibrary::get</a></div><div class="ttdeci">static CLKernelLibrary &amp; get()</div><div class="ttdoc">Access the KernelLibrary singleton. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00039">CLKernelLibrary.cpp:39</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_a9f976367edcd9ab787375373e050b94b"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#a9f976367edcd9ab787375373e050b94b">arm_compute::CLKernelLibrary::init</a></div><div class="ttdeci">void init(std::string kernel_path, cl::Context context, cl::Device device)</div><div class="ttdoc">Initialises the kernel library. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00056">CLKernelLibrary.cpp:56</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a398a2582c746d28fc125487a44c9ed74"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a398a2582c746d28fc125487a44c9ed74">arm_compute::CLScheduler::queue</a></div><div class="ttdeci">cl::CommandQueue &amp; queue()</div><div class="ttdoc">Accessor for the associated CL command queue. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00043">CLScheduler.cpp:43</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_ade56e13dd46cf95a8430a7530ae2cb7f"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#ade56e13dd46cf95a8430a7530ae2cb7f">arm_compute::CLScheduler::init</a></div><div class="ttdeci">void init(cl::Context context, cl::CommandQueue queue, const cl::Device &amp;device, ICLTuner *cl_tuner=nullptr, CLGEMMHeuristicsHandle *gemm_h=nullptr, CLBackendType cl_backend_type=CLBackendType::Native)</div><div class="ttdoc">Initialises the context and command queue to be used by the scheduler. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00158">CLScheduler.cpp:158</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a038d136792f815c57fcdf93b0a59f5f1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a038d136792f815c57fcdf93b0a59f5f1">&#9670;&nbsp;</a></span>default_reinit()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void default_reinit </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_l_tuner.xhtml">ICLTuner</a> *&#160;</td>
          <td class="paramname"><em>cl_tuner</em> = <code>nullptr</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_heuristics_handle.xhtml">CLGEMMHeuristicsHandle</a> *&#160;</td>
          <td class="paramname"><em>gemm_h</em> = <code>nullptr</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a94eb95e47316e7dc5af7615592d26bdd">CLBackendType</a>&#160;</td>
          <td class="paramname"><em>cl_backend_type</em> = <code><a class="el" href="namespacearm__compute.xhtml#a94eb95e47316e7dc5af7615592d26bdda925641e0b76c28cc940e8f3ca178d826">CLBackendType::Native</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Re-initializes the context and command queue used by the scheduler to default values and sets a default device and kernel path for the <a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml">CLKernelLibrary</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname"><a class="el" href="namespacearm__compute_1_1cl__tuner.xhtml">cl_tuner</a></td><td>(Optional) Pointer to <a class="el" href="classarm__compute_1_1_i_c_l_tuner.xhtml" title="Basic interface for tuning the OpenCL kernels. ">ICLTuner</a> (default=nullptr) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">gemm_h</td><td>(Optional) Pointer to <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_heuristics_handle.xhtml" title="Handle for loading and retrieving GEMM heuristics. ">CLGEMMHeuristicsHandle</a> (default = nullptr) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cl_backend_type</td><td>(Optional) Type of backend to use (default = <a class="el" href="namespacearm__compute.xhtml#a94eb95e47316e7dc5af7615592d26bdda925641e0b76c28cc940e8f3ca178d826" title="OpenCL native backend. ">CLBackendType::Native</a>) </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00145">145</a> of file <a class="el" href="_c_l_scheduler_8cpp_source.xhtml">CLScheduler.cpp</a>.</p>

<p class="reference">References <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00126">CLScheduler::default_init()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_2_u_n_i_t_2dynamic__fusion_2_floor_8cpp_source.xhtml#l00058">arm_compute::test::validation::TEST_CASE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;{</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    _is_initialised = <span class="keyword">false</span>;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a56d8f451f6b30093a49f1b4978681b07">default_init</a>(cl_tuner, gemm_h, cl_backend_type);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a56d8f451f6b30093a49f1b4978681b07"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a56d8f451f6b30093a49f1b4978681b07">arm_compute::CLScheduler::default_init</a></div><div class="ttdeci">void default_init(ICLTuner *cl_tuner=nullptr, CLGEMMHeuristicsHandle *gemm_h=nullptr, CLBackendType cl_backend_type=CLBackendType::Native)</div><div class="ttdoc">Initialises the context and command queue used by the scheduler to default values and sets a default ...</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00126">CLScheduler.cpp:126</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a82200125de0667aac827261b47121ff7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a82200125de0667aac827261b47121ff7">&#9670;&nbsp;</a></span>enable_job_chaining()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void enable_job_chaining </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>job_chaining_size</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Enable job chaining. </p>
<p>The command queue will only be flushed when <code>job_chaining_size</code> kernels have been enqueued.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">job_chaining_size</td><td>Kernels to enqueue before flushing </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00257">257</a> of file <a class="el" href="_c_l_scheduler_8cpp_source.xhtml">CLScheduler.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;{</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    _job_chaining_enabled = <span class="keyword">true</span>;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    _job_chaining_size    = job_chaining_size;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ae1a643e517f50bf0392fb6516dd7cf67"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae1a643e517f50bf0392fb6516dd7cf67">&#9670;&nbsp;</a></span>enqueue()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void enqueue </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml">ICLKernel</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>flush</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Schedule the execution of the passed kernel if possible. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">kernel</td><td><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class. ">Kernel</a> to execute. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">flush</td><td>(Optional) Specifies if the command queue will be flushed after running the kernel. This will be ignored if job chaining is enabled. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00237">237</a> of file <a class="el" href="_c_l_scheduler_8cpp_source.xhtml">CLScheduler.cpp</a>.</p>

<p class="reference">References <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00188">arm_compute::test::validation::pack</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_space_to_depth_layer_8cpp_source.xhtml#l00061">CLSpaceToDepthLayer::run()</a>, <a class="el" href="_c_l_deconvolution_layer_upsample_8cpp_source.xhtml#l00065">CLDeconvolutionLayerUpsample::run()</a>, <a class="el" href="_c_l_f_f_t1_d_8cpp_source.xhtml#l00146">CLFFT1D::run()</a>, <a class="el" href="_c_l_stack_layer_8cpp_source.xhtml#l00093">CLStackLayer::run()</a>, <a class="el" href="_c_l_l2_normalize_layer_8cpp_source.xhtml#l00100">CLL2NormalizeLayer::run()</a>, <a class="el" href="_c_l_normalization_layer_8cpp_source.xhtml#l00073">CLNormalizationLayer::run()</a>, <a class="el" href="_c_l_arg_min_max_layer_8cpp_source.xhtml#l00179">CLArgMinMaxLayer::run()</a>, <a class="el" href="_c_l_pad_layer_8cpp_source.xhtml#l00082">CLPadLayer::run()</a>, <a class="el" href="_c_l_reduction_operation_8cpp_source.xhtml#l00139">CLReductionOperation::run()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_8cpp_source.xhtml#l00327">CLDepthwiseConvolutionLayer::run()</a>, <a class="el" href="_c_l_max_unpooling_layer_8cpp_source.xhtml#l00063">CLMaxUnpoolingLayer::run()</a>, <a class="el" href="_c_l_batch_to_space_layer_8cpp_source.xhtml#l00078">CLBatchToSpaceLayer::run()</a>, <a class="el" href="_c_l_fuse_batch_normalization_8cpp_source.xhtml#l00069">CLFuseBatchNormalization::run()</a>, <a class="el" href="_c_l_batch_normalization_layer_8cpp_source.xhtml#l00068">CLBatchNormalizationLayer::run()</a>, <a class="el" href="_c_l_space_to_batch_layer_8cpp_source.xhtml#l00101">CLSpaceToBatchLayer::run()</a>, <a class="el" href="_c_l_g_e_m_m_deconvolution_layer_8cpp_source.xhtml#l00346">CLGEMMDeconvolutionLayer::run()</a>, <a class="el" href="_c_l_generate_proposals_layer_8cpp_source.xhtml#l00350">CLGenerateProposalsLayer::run()</a>, <a class="el" href="_c_l_2_helper_8h_source.xhtml#l00207">CLSynthetizeFunctionInitOutputWithZeroAndWithZeroConstantBorder&lt; K, bordersize &gt;::run()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml#l00968">CLQLSTMLayer::run()</a>, <a class="el" href="_c_l_2_helper_8h_source.xhtml#l00244">ClSynthetizeOperatorWithBorder&lt; K &gt;::run()</a>, and <a class="el" href="runtime_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00143">arm_compute::schedule_kernel_on_ctx()</a>.</p>
<div class="fragment"><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;{</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    ITensorPack <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    enqueue_common(kernel, pack, flush);</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a1e041dc03ff256dfc8b0bf5c5fe099e0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">arm_compute::test::validation::pack</a></div><div class="ttdeci">ITensorPack pack</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00188">Im2Col.cpp:188</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a5c0fc6f465cae029d60ffdfc7f3e99d9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5c0fc6f465cae029d60ffdfc7f3e99d9">&#9670;&nbsp;</a></span>enqueue_op() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void enqueue_op </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml">ICLKernel</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> &amp;&#160;</td>
          <td class="paramname"><em>tensors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>flush</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Schedule the execution of the passed kernel if possible. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">kernel</td><td><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class. ">Kernel</a> to execute. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensors</td><td><a class="el" href="struct_vector.xhtml" title="Structure to hold Vector information. ">Vector</a> containing the tensors to operate on. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">flush</td><td>(Optional) Specifies if the command queue will be flushed after running the kernel. This will be ignored if job chaining is enabled. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00243">243</a> of file <a class="el" href="_c_l_scheduler_8cpp_source.xhtml">CLScheduler.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="gpu_2cl_2operators_2_cl_gemm_8cpp_source.xhtml#l00771">ClGemm::prepare()</a>, <a class="el" href="gpu_2cl_2operators_2_cl_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00792">ClGemmLowpMatrixMultiplyCore::prepare()</a>, <a class="el" href="_cl_winograd_conv2d_8cpp_source.xhtml#l00279">ClWinogradConv2d::prepare()</a>, <a class="el" href="_cl_gemm_conv2d_8cpp_source.xhtml#l00615">ClGemmConv2d::prepare()</a>, <a class="el" href="_cl_composite_operator_8cpp_source.xhtml#l00208">ClCompositeOperator::prepare()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml#l01109">CLQLSTMLayer::prepare()</a>, <a class="el" href="_cl_dequantize_8cpp_source.xhtml#l00050">ClDequantize::run()</a>, <a class="el" href="_cl_quantize_8cpp_source.xhtml#l00050">ClQuantize::run()</a>, <a class="el" href="_c_l_operator_8cpp_source.xhtml#l00038">ICLOperator::run()</a>, <a class="el" href="gpu_2cl_2operators_2_cl_scale_8cpp_source.xhtml#l00058">ClScale::run()</a>, <a class="el" href="_cl_softmax_8cpp_source.xhtml#l00133">ClSoftmax::run()</a>, <a class="el" href="_cl_concatenate_8cpp_source.xhtml#l00219">ClConcatenate::run()</a>, <a class="el" href="_cl_direct_conv2d_8cpp_source.xhtml#l00120">ClDirectConv2d::run()</a>, <a class="el" href="_cl_direct_conv3d_8cpp_source.xhtml#l00049">ClDirectConv3d::run()</a>, <a class="el" href="gpu_2cl_2operators_2_cl_gemm_lowp_output_stage_8cpp_source.xhtml#l00091">ClGemmLowpOutputStage::run()</a>, <a class="el" href="gpu_2cl_2operators_2_cl_gemm_8cpp_source.xhtml#l00663">ClGemm::run()</a>, <a class="el" href="gpu_2cl_2operators_2_cl_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00655">ClGemmLowpMatrixMultiplyCore::run()</a>, <a class="el" href="_c_l_2_helper_8h_source.xhtml#l00108">CLSynthetizeOperatorInitOutputWithZeroAndWithZeroConstantBorder&lt; K, bordersize &gt;::run()</a>, <a class="el" href="_cl_winograd_conv2d_8cpp_source.xhtml#l00239">ClWinogradConv2d::run()</a>, <a class="el" href="_cl_gemm_conv2d_8cpp_source.xhtml#l00542">ClGemmConv2d::run()</a>, <a class="el" href="_cl_composite_operator_8cpp_source.xhtml#l00224">ClCompositeOperator::run()</a>, <a class="el" href="_c_l_l_s_t_m_layer_8cpp_source.xhtml#l00631">CLLSTMLayer::run()</a>, and <a class="el" href="_c_l_2_helper_8h_source.xhtml#l00244">ClSynthetizeOperatorWithBorder&lt; K &gt;::run()</a>.</p>
<div class="fragment"><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;{</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    enqueue_common(kernel, tensors, flush);</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a4ffe2327a88f701790ed239675d2509f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4ffe2327a88f701790ed239675d2509f">&#9670;&nbsp;</a></span>enqueue_op() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void enqueue_op </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml">ICLKernel</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> &amp;&#160;</td>
          <td class="paramname"><em>tensors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_execution_descriptor.xhtml">experimental::dynamic_fusion::ClExecutionDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>exec_desc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>flush</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Schedule the execution of the passed kernel if possible. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">kernel</td><td><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class. ">Kernel</a> to execute. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensors</td><td>Map containing the tensors to operate on. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">exec_desc</td><td>Execution descriptor </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">flush</td><td>(Optional) Specifies if the command queue will be flushed after running the kernel. This will be ignored if job chaining is enabled. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00250">250</a> of file <a class="el" href="_c_l_scheduler_8cpp_source.xhtml">CLScheduler.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;{</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    enqueue_common(kernel, tensors, exec_desc, flush);</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a6096d26e8e29e1a7f01b0f083fb7e33f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6096d26e8e29e1a7f01b0f083fb7e33f">&#9670;&nbsp;</a></span>enqueue_sync_event()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl::Event enqueue_sync_event </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Enqueues a marker into the associated command queue and return the event. </p>
<dl class="section return"><dt>Returns</dt><dd>An event that can be waited on to block the executing thread. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00079">79</a> of file <a class="el" href="_c_l_scheduler_8cpp_source.xhtml">CLScheduler.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;{</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    cl::Event event;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    _queue.enqueueMarker(&amp;event);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keywordflow">return</span> event;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a5c3cecc6734b01ed92d5e66876411e00"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5c3cecc6734b01ed92d5e66876411e00">&#9670;&nbsp;</a></span>gemm_heuristics()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_heuristics_handle.xhtml">CLGEMMHeuristicsHandle</a> * gemm_heuristics </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Accessor for the associated <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_heuristics_handle.xhtml" title="Handle for loading and retrieving GEMM heuristics. ">CLGEMMHeuristicsHandle</a>. </p>
<dl class="section return"><dt>Returns</dt><dd>Pointer to <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_heuristics_handle.xhtml" title="Handle for loading and retrieving GEMM heuristics. ">CLGEMMHeuristicsHandle</a> </dd></dl>

<p class="definition">Definition at line <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00054">54</a> of file <a class="el" href="_c_l_scheduler_8cpp_source.xhtml">CLScheduler.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_g_e_m_m_auto_heuristics_8cpp_source.xhtml#l00165">arm_compute::cl_gemm::auto_heuristics::select_mlgo_gemm_config_native()</a>, <a class="el" href="_c_l_g_e_m_m_auto_heuristics_8cpp_source.xhtml#l00131">arm_compute::cl_gemm::auto_heuristics::select_mlgo_gemm_config_reshaped()</a>, <a class="el" href="_c_l_g_e_m_m_auto_heuristics_8cpp_source.xhtml#l00096">arm_compute::cl_gemm::auto_heuristics::select_mlgo_gemm_config_reshaped_only_rhs()</a>, <a class="el" href="_c_l_g_e_m_m_auto_heuristics_8cpp_source.xhtml#l00048">arm_compute::cl_gemm::auto_heuristics::select_mlgo_gemm_kernel()</a>, and <a class="el" href="_c_l_device_backend_8cpp_source.xhtml#l00104">CLDeviceBackend::setup_backend_context()</a>.</p>
<div class="fragment"><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;{</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keywordflow">return</span> _gemm_heuristics;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a9b58d0eb9a2af8e6d7908695e1557d6c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9b58d0eb9a2af8e6d7908695e1557d6c">&#9670;&nbsp;</a></span>get()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml">CLScheduler</a> &amp; get </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Access the scheduler singleton. </p>
<p>This method has been deprecated and will be removed in future releases </p><dl class="section return"><dt>Returns</dt><dd>The scheduler </dd></dl>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="dynamic_fusion_2cl_fused_conv2d_elementwise_add_8cpp-example.xhtml#a5">dynamic_fusion/cl_fused_conv2d_elementwise_add.cpp</a>.</dd>
</dl>
<p class="definition">Definition at line <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00107">107</a> of file <a class="el" href="_c_l_scheduler_8cpp_source.xhtml">CLScheduler.cpp</a>.</p>

<p class="reference">References <a class="el" href="_open_c_l_8cpp_source.xhtml#l00188">arm_compute::opencl_is_available()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00177">CLTuner::add_tuning_params()</a>, <a class="el" href="_c_l_buffer_allocator_8cpp_source.xhtml#l00035">CLBufferAllocator::allocate()</a>, <a class="el" href="_cl_direct_convolution_kernel_component_8cpp_source.xhtml#l00328">ClDirectConvolutionKernelComponent::allocate_shared_vars()</a>, <a class="el" href="_cl_queue_8cpp_source.xhtml#l00082">ClQueue::cl_queue()</a>, <a class="el" href="_c_l_memory_region_8cpp_source.xhtml#l00061">CLBufferMemoryRegion::CLBufferMemoryRegion()</a>, <a class="el" href="gpu_2cl_2operators_2_cl_scale_8cpp_source.xhtml#l00038">ClScale::configure()</a>, <a class="el" href="_cl_pool2d_8cpp_source.xhtml#l00037">ClPool2d::configure()</a>, <a class="el" href="_cl_pool3d_8cpp_source.xhtml#l00037">ClPool3d::configure()</a>, <a class="el" href="_cl_softmax_8cpp_source.xhtml#l00055">ClSoftmax::configure()</a>, <a class="el" href="_cl_direct_conv2d_8cpp_source.xhtml#l00068">ClDirectConv2d::configure()</a>, <a class="el" href="_c_l_prior_box_layer_8cpp_source.xhtml#l00049">CLPriorBoxLayer::configure()</a>, <a class="el" href="_c_l_range_8cpp_source.xhtml#l00041">CLRange::configure()</a>, <a class="el" href="_c_l_f_f_t1_d_8cpp_source.xhtml#l00057">CLFFT1D::configure()</a>, <a class="el" href="gpu_2cl_2operators_2_cl_gemm_8cpp_source.xhtml#l00557">ClGemm::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_8cpp_source.xhtml#l00163">CLDepthwiseConvolutionLayer::configure()</a>, <a class="el" href="gpu_2cl_2operators_2_cl_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00256">ClGemmLowpMatrixMultiplyCore::configure()</a>, <a class="el" href="_cl_winograd_conv2d_8cpp_source.xhtml#l00174">ClWinogradConv2d::configure()</a>, <a class="el" href="_c_l_2_helper_8h_source.xhtml#l00096">CLSynthetizeOperatorInitOutputWithZeroAndWithZeroConstantBorder&lt; K, bordersize &gt;::configure()</a>, <a class="el" href="_c_l_crop_resize_8cpp_source.xhtml#l00092">CLCropResize::configure()</a>, <a class="el" href="_cl_gemm_conv2d_8cpp_source.xhtml#l00162">ClGemmConv2d::configure()</a>, <a class="el" href="_cl_conv2d_8cpp_source.xhtml#l00083">ClConv2d::configure()</a>, <a class="el" href="_c_l_convolution_layer_8cpp_source.xhtml#l00069">CLConvolutionLayer::configure()</a>, <a class="el" href="_c_l_2_helper_8h_source.xhtml#l00196">CLSynthetizeFunctionInitOutputWithZeroAndWithZeroConstantBorder&lt; K, bordersize &gt;::configure()</a>, <a class="el" href="_c_l_2_fill_border_8cpp_source.xhtml#l00052">arm_compute::test::validation::DATA_TEST_CASE()</a>, <a class="el" href="_cl_queue_8cpp_source.xhtml#l00094">ClQueue::finish()</a>, <a class="el" href="_cl_direct_convolution_kernel_component_8cpp_source.xhtml#l00294">ClDirectConvolutionKernelComponent::generate_build_options()</a>, <a class="el" href="_c_l_tensor_allocator_8cpp_source.xhtml#l00167">CLTensorAllocator::import_memory()</a>, <a class="el" href="_c_l_device_backend_8cpp_source.xhtml#l00086">CLDeviceBackend::initialize_backend()</a>, <a class="el" href="main_8cpp_source.xhtml#l00096">main()</a>, <a class="el" href="_c_l_array_8h_source.xhtml#l00067">CLArray&lt; cl_int &gt;::map()</a>, <a class="el" href="_c_l_sub_tensor_8cpp_source.xhtml#l00071">CLSubTensor::map()</a>, <a class="el" href="runtime_2_c_l_2_cl_tensor_8cpp_source.xhtml#l00066">CLTensor::map()</a>, <a class="el" href="_open_c_l_timer_8cpp_source.xhtml#l00056">OpenCLClock&lt; output_timestamps &gt;::OpenCLClock()</a>, <a class="el" href="gpu_2cl_2operators_2_cl_gemm_8cpp_source.xhtml#l00771">ClGemm::prepare()</a>, <a class="el" href="gpu_2cl_2operators_2_cl_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00792">ClGemmLowpMatrixMultiplyCore::prepare()</a>, <a class="el" href="_cl_winograd_conv2d_8cpp_source.xhtml#l00279">ClWinogradConv2d::prepare()</a>, <a class="el" href="_cl_gemm_conv2d_8cpp_source.xhtml#l00615">ClGemmConv2d::prepare()</a>, <a class="el" href="_c_l_f_f_t_convolution_layer_8cpp_source.xhtml#l00355">CLFFTConvolutionLayer::prepare()</a>, <a class="el" href="_cl_composite_operator_8cpp_source.xhtml#l00208">ClCompositeOperator::prepare()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml#l01109">CLQLSTMLayer::prepare()</a>, <a class="el" href="src_2runtime_2_c_l_2_utils_8cpp_source.xhtml#l00035">arm_compute::restore_program_cache_from_file()</a>, <a class="el" href="_cl_dequantize_8cpp_source.xhtml#l00050">ClDequantize::run()</a>, <a class="el" href="_cl_quantize_8cpp_source.xhtml#l00050">ClQuantize::run()</a>, <a class="el" href="_c_l_split_8cpp_source.xhtml#l00037">CLSplit::run()</a>, <a class="el" href="_c_l_operator_8cpp_source.xhtml#l00038">ICLOperator::run()</a>, <a class="el" href="gpu_2cl_2operators_2_cl_scale_8cpp_source.xhtml#l00058">ClScale::run()</a>, <a class="el" href="_cl_softmax_8cpp_source.xhtml#l00133">ClSoftmax::run()</a>, <a class="el" href="_cl_concatenate_8cpp_source.xhtml#l00219">ClConcatenate::run()</a>, <a class="el" href="_cl_direct_conv2d_8cpp_source.xhtml#l00120">ClDirectConv2d::run()</a>, <a class="el" href="_cl_direct_conv3d_8cpp_source.xhtml#l00049">ClDirectConv3d::run()</a>, <a class="el" href="gpu_2cl_2operators_2_cl_gemm_lowp_output_stage_8cpp_source.xhtml#l00091">ClGemmLowpOutputStage::run()</a>, <a class="el" href="_c_l_space_to_depth_layer_8cpp_source.xhtml#l00061">CLSpaceToDepthLayer::run()</a>, <a class="el" href="_c_l_deconvolution_layer_upsample_8cpp_source.xhtml#l00065">CLDeconvolutionLayerUpsample::run()</a>, <a class="el" href="_c_l_f_f_t1_d_8cpp_source.xhtml#l00146">CLFFT1D::run()</a>, <a class="el" href="gpu_2cl_2operators_2_cl_gemm_8cpp_source.xhtml#l00663">ClGemm::run()</a>, <a class="el" href="_c_l_stack_layer_8cpp_source.xhtml#l00093">CLStackLayer::run()</a>, <a class="el" href="gpu_2cl_2operators_2_cl_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00655">ClGemmLowpMatrixMultiplyCore::run()</a>, <a class="el" href="_c_l_l2_normalize_layer_8cpp_source.xhtml#l00100">CLL2NormalizeLayer::run()</a>, <a class="el" href="_c_l_normalization_layer_8cpp_source.xhtml#l00073">CLNormalizationLayer::run()</a>, <a class="el" href="_c_l_pad_layer_8cpp_source.xhtml#l00082">CLPadLayer::run()</a>, <a class="el" href="_c_l_arg_min_max_layer_8cpp_source.xhtml#l00179">CLArgMinMaxLayer::run()</a>, <a class="el" href="_c_l_reduction_operation_8cpp_source.xhtml#l00139">CLReductionOperation::run()</a>, <a class="el" href="_cl_winograd_conv2d_8cpp_source.xhtml#l00239">ClWinogradConv2d::run()</a>, <a class="el" href="_c_l_2_helper_8h_source.xhtml#l00108">CLSynthetizeOperatorInitOutputWithZeroAndWithZeroConstantBorder&lt; K, bordersize &gt;::run()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_8cpp_source.xhtml#l00327">CLDepthwiseConvolutionLayer::run()</a>, <a class="el" href="_c_l_max_unpooling_layer_8cpp_source.xhtml#l00063">CLMaxUnpoolingLayer::run()</a>, <a class="el" href="_cl_gemm_conv2d_8cpp_source.xhtml#l00542">ClGemmConv2d::run()</a>, <a class="el" href="_c_l_batch_to_space_layer_8cpp_source.xhtml#l00078">CLBatchToSpaceLayer::run()</a>, <a class="el" href="_c_l_fuse_batch_normalization_8cpp_source.xhtml#l00069">CLFuseBatchNormalization::run()</a>, <a class="el" href="_c_l_crop_resize_8cpp_source.xhtml#l00276">CLCropResize::run()</a>, <a class="el" href="_c_l_batch_normalization_layer_8cpp_source.xhtml#l00068">CLBatchNormalizationLayer::run()</a>, <a class="el" href="_c_l_space_to_batch_layer_8cpp_source.xhtml#l00101">CLSpaceToBatchLayer::run()</a>, <a class="el" href="_c_l_g_e_m_m_deconvolution_layer_8cpp_source.xhtml#l00346">CLGEMMDeconvolutionLayer::run()</a>, <a class="el" href="_c_l_generate_proposals_layer_8cpp_source.xhtml#l00350">CLGenerateProposalsLayer::run()</a>, <a class="el" href="_cl_composite_operator_8cpp_source.xhtml#l00224">ClCompositeOperator::run()</a>, <a class="el" href="_c_l_2_helper_8h_source.xhtml#l00207">CLSynthetizeFunctionInitOutputWithZeroAndWithZeroConstantBorder&lt; K, bordersize &gt;::run()</a>, <a class="el" href="_c_l_l_s_t_m_layer_8cpp_source.xhtml#l00631">CLLSTMLayer::run()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml#l00968">CLQLSTMLayer::run()</a>, <a class="el" href="_c_l_2_helper_8h_source.xhtml#l00244">ClSynthetizeOperatorWithBorder&lt; K &gt;::run()</a>, <a class="el" href="_framework_8cpp_source.xhtml#l00543">Framework::run()</a>, <a class="el" href="benchmark__examples_2_run_example_8cpp_source.xhtml#l00094">arm_compute::utils::run_example()</a>, <a class="el" href="src_2runtime_2_c_l_2_utils_8cpp_source.xhtml#l00073">arm_compute::save_program_cache_to_file()</a>, <a class="el" href="runtime_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00143">arm_compute::schedule_kernel_on_ctx()</a>, <a class="el" href="_cl_queue_8cpp_source.xhtml#l00077">ClQueue::scheduler()</a>, <a class="el" href="_c_l_g_e_m_m_auto_heuristics_8cpp_source.xhtml#l00165">arm_compute::cl_gemm::auto_heuristics::select_mlgo_gemm_config_native()</a>, <a class="el" href="_c_l_g_e_m_m_auto_heuristics_8cpp_source.xhtml#l00131">arm_compute::cl_gemm::auto_heuristics::select_mlgo_gemm_config_reshaped()</a>, <a class="el" href="_c_l_g_e_m_m_auto_heuristics_8cpp_source.xhtml#l00096">arm_compute::cl_gemm::auto_heuristics::select_mlgo_gemm_config_reshaped_only_rhs()</a>, <a class="el" href="_c_l_g_e_m_m_auto_heuristics_8cpp_source.xhtml#l00048">arm_compute::cl_gemm::auto_heuristics::select_mlgo_gemm_kernel()</a>, <a class="el" href="_cl_context_8cpp_source.xhtml#l00081">ClContext::set_cl_ctx()</a>, <a class="el" href="_cl_queue_8cpp_source.xhtml#l00087">ClQueue::set_cl_queue()</a>, <a class="el" href="_c_l_tensor_allocator_8cpp_source.xhtml#l00189">CLTensorAllocator::set_global_allocator()</a>, <a class="el" href="_c_l_device_backend_8cpp_source.xhtml#l00104">CLDeviceBackend::setup_backend_context()</a>, <a class="el" href="_c_l_device_backend_8cpp_source.xhtml#l00225">CLDeviceBackend::sync()</a>, <a class="el" href="tests_2_utils_8h_source.xhtml#l00557">arm_compute::test::sync_if_necessary()</a>, <a class="el" href="tests_2validation_2_c_l_2_u_n_i_t_2_tensor_allocator_8cpp_source.xhtml#l00171">arm_compute::test::validation::TEST_CASE()</a>, <a class="el" href="_open_c_l_timer_8cpp_source.xhtml#l00226">OpenCLClock&lt; output_timestamps &gt;::test_measurements()</a>, <a class="el" href="_operator_graph_impl_8cpp_source.xhtml#l00259">Conv2dContent::translate()</a>, <a class="el" href="_c_l_array_8h_source.xhtml#l00077">CLArray&lt; cl_int &gt;::unmap()</a>, <a class="el" href="_c_l_sub_tensor_8cpp_source.xhtml#l00076">CLSubTensor::unmap()</a>, <a class="el" href="runtime_2_c_l_2_cl_tensor_8cpp_source.xhtml#l00071">CLTensor::unmap()</a>, <a class="el" href="_c_l_memory_region_8cpp_source.xhtml#l00088">CLBufferMemoryRegion::unmap()</a>, <a class="el" href="gpu_2cl_2operators_2_cl_gemm_8cpp_source.xhtml#l00612">ClGemm::validate()</a>, <a class="el" href="gpu_2cl_2operators_2_cl_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00472">ClGemmLowpMatrixMultiplyCore::validate()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_8cpp_source.xhtml#l00251">CLDepthwiseConvolutionLayer::validate()</a>, <a class="el" href="_cl_conv2d_8cpp_source.xhtml#l00124">ClConv2d::validate()</a>, <a class="el" href="_c_l_generate_proposals_layer_8cpp_source.xhtml#l00210">CLGenerateProposalsLayer::validate()</a>, and <a class="el" href="_c_l_convolution_layer_8cpp_source.xhtml#l00128">CLConvolutionLayer::validate()</a>.</p>
<div class="fragment"><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;{</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    std::call_once(_initialize_symbols, <a class="code" href="namespacearm__compute.xhtml#a5f49decb4b0a74d5361686ab45db8961">opencl_is_available</a>);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keyword">static</span> <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a98c15ddf61f1cf0c8d90429f41db09fb">CLScheduler</a> scheduler;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keywordflow">return</span> scheduler;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a98c15ddf61f1cf0c8d90429f41db09fb"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a98c15ddf61f1cf0c8d90429f41db09fb">arm_compute::CLScheduler::CLScheduler</a></div><div class="ttdeci">CLScheduler()</div><div class="ttdoc">Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00101">CLScheduler.cpp:101</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5f49decb4b0a74d5361686ab45db8961"><div class="ttname"><a href="namespacearm__compute.xhtml#a5f49decb4b0a74d5361686ab45db8961">arm_compute::opencl_is_available</a></div><div class="ttdeci">bool opencl_is_available()</div><div class="ttdoc">Check if OpenCL is available. </div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8cpp_source.xhtml#l00188">OpenCL.cpp:188</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ade56e13dd46cf95a8430a7530ae2cb7f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ade56e13dd46cf95a8430a7530ae2cb7f">&#9670;&nbsp;</a></span>init()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void init </td>
          <td>(</td>
          <td class="paramtype">cl::Context&#160;</td>
          <td class="paramname"><em>context</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl::CommandQueue&#160;</td>
          <td class="paramname"><em>queue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cl::Device &amp;&#160;</td>
          <td class="paramname"><em>device</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_l_tuner.xhtml">ICLTuner</a> *&#160;</td>
          <td class="paramname"><em>cl_tuner</em> = <code>nullptr</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_heuristics_handle.xhtml">CLGEMMHeuristicsHandle</a> *&#160;</td>
          <td class="paramname"><em>gemm_h</em> = <code>nullptr</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a94eb95e47316e7dc5af7615592d26bdd">CLBackendType</a>&#160;</td>
          <td class="paramname"><em>cl_backend_type</em> = <code><a class="el" href="namespacearm__compute.xhtml#a94eb95e47316e7dc5af7615592d26bdda925641e0b76c28cc940e8f3ca178d826">CLBackendType::Native</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initialises the context and command queue to be used by the scheduler. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">context</td><td>A CL context. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">queue</td><td>A CL command queue. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">device</td><td>A CL device. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname"><a class="el" href="namespacearm__compute_1_1cl__tuner.xhtml">cl_tuner</a></td><td>(Optional) Pointer to OpenCL tuner (default=nullptr) Note: It is caller's responsibility to release the allocated memory for <a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml" title="Basic implementation of the OpenCL tuner interface. ">CLTuner</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">gemm_h</td><td>(Optional) Pointer to <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_heuristics_handle.xhtml" title="Handle for loading and retrieving GEMM heuristics. ">CLGEMMHeuristicsHandle</a> (default = nullptr) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cl_backend_type</td><td>(Optional) Type of backend to use (default = <a class="el" href="namespacearm__compute.xhtml#a94eb95e47316e7dc5af7615592d26bdda925641e0b76c28cc940e8f3ca178d826" title="OpenCL native backend. ">CLBackendType::Native</a>) </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00158">158</a> of file <a class="el" href="_c_l_scheduler_8cpp_source.xhtml">CLScheduler.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00456">ARM_COMPUTE_ERROR_ON_MSG</a>, <a class="el" href="_i_tensor_pack_8cpp_source.xhtml#l00080">ITensorPack::empty()</a>, <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00223">arm_compute::get_target_from_device()</a>, <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00333">ICLKernel::run()</a>, <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00352">ICLKernel::run_composite_op()</a>, <a class="el" href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00345">ICLKernel::run_op()</a>, <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00152">CLScheduler::set_context()</a>, <a class="el" href="classarm__compute_1_1_i_c_l_tuner.xhtml#ae12d76ff3471c1f73c62b7c65addc1ec">ICLTuner::tune_kernel_dynamic()</a>, and <a class="el" href="_i_kernel_8cpp_source.xhtml#l00028">IKernel::window()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00126">CLScheduler::default_init()</a>, and <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00114">CLScheduler::default_init_with_context()</a>.</p>
<div class="fragment"><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;{</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a293edc1bbcbddffb7228ac97917ed107">set_context</a>(std::move(<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a86409f541991c3ac377c2a6b7d1f832d">context</a>));</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    _queue           = std::move(<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a398a2582c746d28fc125487a44c9ed74">queue</a>);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    _target          = <a class="code" href="namespacearm__compute.xhtml#a281384aa081efe5819eedd6a7c2a429b">get_target_from_device</a>(device);</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    _is_initialised  = <span class="keyword">true</span>;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    _cl_tuner        = cl_tuner;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    _gemm_heuristics = gemm_h;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    _backend_type    = cl_backend_type;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a293edc1bbcbddffb7228ac97917ed107"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a293edc1bbcbddffb7228ac97917ed107">arm_compute::CLScheduler::set_context</a></div><div class="ttdeci">void set_context(cl::Context context)</div><div class="ttdoc">Accessor to set the CL context to be used by the scheduler. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00152">CLScheduler.cpp:152</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a86409f541991c3ac377c2a6b7d1f832d"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a86409f541991c3ac377c2a6b7d1f832d">arm_compute::CLScheduler::context</a></div><div class="ttdeci">cl::Context &amp; context()</div><div class="ttdoc">Accessor for the associated CL context. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00036">CLScheduler.cpp:36</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a281384aa081efe5819eedd6a7c2a429b"><div class="ttname"><a href="namespacearm__compute.xhtml#a281384aa081efe5819eedd6a7c2a429b">arm_compute::get_target_from_device</a></div><div class="ttdeci">GPUTarget get_target_from_device(const cl::Device &amp;device)</div><div class="ttdoc">Helper function to get the GPU target from CL device. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00223">CLHelpers.cpp:223</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a398a2582c746d28fc125487a44c9ed74"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a398a2582c746d28fc125487a44c9ed74">arm_compute::CLScheduler::queue</a></div><div class="ttdeci">cl::CommandQueue &amp; queue()</div><div class="ttdoc">Accessor for the associated CL command queue. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00043">CLScheduler.cpp:43</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="acd81d12c19e4080b463244a58118e503"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acd81d12c19e4080b463244a58118e503">&#9670;&nbsp;</a></span>is_initialised()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool is_initialised </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00094">94</a> of file <a class="el" href="_c_l_scheduler_8cpp_source.xhtml">CLScheduler.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="src_2runtime_2_c_l_2_utils_8cpp_source.xhtml#l00035">arm_compute::restore_program_cache_from_file()</a>.</p>
<div class="fragment"><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;{</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keywordflow">return</span> _is_initialised;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="afae103416db3e94a7ba0dc7ed642a7fc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afae103416db3e94a7ba0dc7ed642a7fc">&#9670;&nbsp;</a></span>operator=()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml">CLScheduler</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml">CLScheduler</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prevent instances of this class from being copied (As this class contains pointers) </p>

</div>
</div>
<a id="a398a2582c746d28fc125487a44c9ed74"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a398a2582c746d28fc125487a44c9ed74">&#9670;&nbsp;</a></span>queue()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl::CommandQueue &amp; queue </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Accessor for the associated CL command queue. </p>
<dl class="section return"><dt>Returns</dt><dd>A CL command queue. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00043">43</a> of file <a class="el" href="_c_l_scheduler_8cpp_source.xhtml">CLScheduler.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00177">CLTuner::add_tuning_params()</a>, <a class="el" href="_cl_queue_8cpp_source.xhtml#l00082">ClQueue::cl_queue()</a>, <a class="el" href="_c_l_2_fill_border_8cpp_source.xhtml#l00052">arm_compute::test::validation::DATA_TEST_CASE()</a>, <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00126">CLScheduler::default_init()</a>, <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00114">CLScheduler::default_init_with_context()</a>, <a class="el" href="_cl_queue_8cpp_source.xhtml#l00094">ClQueue::finish()</a>, <a class="el" href="runtime_2_c_l_2_cl_tensor_8cpp_source.xhtml#l00066">CLTensor::map()</a>, <a class="el" href="_open_c_l_timer_8cpp_source.xhtml#l00056">OpenCLClock&lt; output_timestamps &gt;::OpenCLClock()</a>, <a class="el" href="gpu_2cl_2operators_2_cl_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00792">ClGemmLowpMatrixMultiplyCore::prepare()</a>, <a class="el" href="_cl_winograd_conv2d_8cpp_source.xhtml#l00279">ClWinogradConv2d::prepare()</a>, <a class="el" href="_c_l_f_f_t_convolution_layer_8cpp_source.xhtml#l00355">CLFFTConvolutionLayer::prepare()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml#l01109">CLQLSTMLayer::prepare()</a>, <a class="el" href="_c_l_split_8cpp_source.xhtml#l00037">CLSplit::run()</a>, <a class="el" href="_framework_8cpp_source.xhtml#l00543">Framework::run()</a>, <a class="el" href="_c_l_tensor_allocator_8cpp_source.xhtml#l00189">CLTensorAllocator::set_global_allocator()</a>, <a class="el" href="tests_2validation_2_c_l_2_u_n_i_t_2_tensor_allocator_8cpp_source.xhtml#l00343">arm_compute::test::validation::TEST_CASE()</a>, <a class="el" href="_open_c_l_timer_8cpp_source.xhtml#l00226">OpenCLClock&lt; output_timestamps &gt;::test_measurements()</a>, and <a class="el" href="runtime_2_c_l_2_cl_tensor_8cpp_source.xhtml#l00071">CLTensor::unmap()</a>.</p>
<div class="fragment"><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;{</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!_is_initialised);</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keywordflow">return</span> _queue;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a293edc1bbcbddffb7228ac97917ed107"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a293edc1bbcbddffb7228ac97917ed107">&#9670;&nbsp;</a></span>set_context()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void set_context </td>
          <td>(</td>
          <td class="paramtype">cl::Context&#160;</td>
          <td class="paramname"><em>context</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Accessor to set the CL context to be used by the scheduler. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">context</td><td>A CL context. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00152">152</a> of file <a class="el" href="_c_l_scheduler_8cpp_source.xhtml">CLScheduler.cpp</a>.</p>

<p class="reference">References <a class="el" href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00039">CLKernelLibrary::get()</a>, and <a class="el" href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00077">CLKernelLibrary::set_context()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00158">CLScheduler::init()</a>, <a class="el" href="_framework_8cpp_source.xhtml#l00543">Framework::run()</a>, and <a class="el" href="_cl_context_8cpp_source.xhtml#l00081">ClContext::set_cl_ctx()</a>.</p>
<div class="fragment"><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;{</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    _context = std::move(<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a86409f541991c3ac377c2a6b7d1f832d">context</a>);</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">CLKernelLibrary::get</a>().<a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a293edc1bbcbddffb7228ac97917ed107">set_context</a>(_context);</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_acba005f5ce2c62cbf3f94d074d9007aa"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">arm_compute::CLKernelLibrary::get</a></div><div class="ttdeci">static CLKernelLibrary &amp; get()</div><div class="ttdoc">Access the KernelLibrary singleton. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00039">CLKernelLibrary.cpp:39</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_a293edc1bbcbddffb7228ac97917ed107"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#a293edc1bbcbddffb7228ac97917ed107">arm_compute::CLKernelLibrary::set_context</a></div><div class="ttdeci">void set_context(cl::Context context)</div><div class="ttdoc">Sets the CL context used to create programs. </div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00077">CLKernelLibrary.cpp:77</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a86409f541991c3ac377c2a6b7d1f832d"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a86409f541991c3ac377c2a6b7d1f832d">arm_compute::CLScheduler::context</a></div><div class="ttdeci">cl::Context &amp; context()</div><div class="ttdoc">Accessor for the associated CL context. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00036">CLScheduler.cpp:36</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a9608e5af9f3a199f69ca6aa41b94359a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9608e5af9f3a199f69ca6aa41b94359a">&#9670;&nbsp;</a></span>set_queue()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void set_queue </td>
          <td>(</td>
          <td class="paramtype">cl::CommandQueue&#160;</td>
          <td class="paramname"><em>queue</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Accessor to set the CL command queue to be used by the scheduler. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">queue</td><td>A CL command queue. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00059">59</a> of file <a class="el" href="_c_l_scheduler_8cpp_source.xhtml">CLScheduler.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_open_c_l_timer_8cpp_source.xhtml#l00056">OpenCLClock&lt; output_timestamps &gt;::OpenCLClock()</a>, <a class="el" href="_framework_8cpp_source.xhtml#l00543">Framework::run()</a>, and <a class="el" href="_cl_queue_8cpp_source.xhtml#l00087">ClQueue::set_cl_queue()</a>.</p>
<div class="fragment"><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;{</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    _queue = std::move(<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a398a2582c746d28fc125487a44c9ed74">queue</a>);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a398a2582c746d28fc125487a44c9ed74"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a398a2582c746d28fc125487a44c9ed74">arm_compute::CLScheduler::queue</a></div><div class="ttdeci">cl::CommandQueue &amp; queue()</div><div class="ttdoc">Accessor for the associated CL command queue. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00043">CLScheduler.cpp:43</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad5ba9d34a3a855bf1dd2e36316ff550a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad5ba9d34a3a855bf1dd2e36316ff550a">&#9670;&nbsp;</a></span>set_target()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void set_target </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a>&#160;</td>
          <td class="paramname"><em>target</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Accessor to set target GPU to be used by the scheduler. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">target</td><td>The target GPU. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00064">64</a> of file <a class="el" href="_c_l_scheduler_8cpp_source.xhtml">CLScheduler.cpp</a>.</p>

<p class="reference">References <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00049">CLScheduler::target()</a>.</p>
<div class="fragment"><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;{</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    _target = <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a27561688e2fc60176608ef725a4ecb30">target</a>;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a27561688e2fc60176608ef725a4ecb30"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a27561688e2fc60176608ef725a4ecb30">arm_compute::CLScheduler::target</a></div><div class="ttdeci">GPUTarget target() const</div><div class="ttdoc">Get the target GPU. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00049">CLScheduler.cpp:49</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad4e05822793fb639fd65ac30428a7878"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad4e05822793fb639fd65ac30428a7878">&#9670;&nbsp;</a></span>set_tuner()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void set_tuner </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_l_tuner.xhtml">ICLTuner</a> *&#160;</td>
          <td class="paramname"><em>tuner</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Accessor to set the CL tuner to be used by the scheduler. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tuner</td><td>A CL tuner </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00069">69</a> of file <a class="el" href="_c_l_scheduler_8cpp_source.xhtml">CLScheduler.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;{</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    _cl_tuner = tuner;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ad55f80ed3cd8b6c4f247763b747016af"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad55f80ed3cd8b6c4f247763b747016af">&#9670;&nbsp;</a></span>sync()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sync </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Blocks until all commands in the associated command queue have finished. </p>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="dynamic_fusion_2cl_fused_conv2d_elementwise_add_8cpp-example.xhtml#a42">dynamic_fusion/cl_fused_conv2d_elementwise_add.cpp</a>.</dd>
</dl>
<p class="definition">Definition at line <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00074">74</a> of file <a class="el" href="_c_l_scheduler_8cpp_source.xhtml">CLScheduler.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_crop_resize_8cpp_source.xhtml#l00092">CLCropResize::configure()</a>, <a class="el" href="main_8cpp_source.xhtml#l00096">main()</a>, <a class="el" href="_c_l_crop_resize_8cpp_source.xhtml#l00276">CLCropResize::run()</a>, <a class="el" href="_c_l_device_backend_8cpp_source.xhtml#l00225">CLDeviceBackend::sync()</a>, <a class="el" href="tests_2_utils_8h_source.xhtml#l00557">arm_compute::test::sync_if_necessary()</a>, and <a class="el" href="tests_2validation_2_c_l_2_u_n_i_t_2_tensor_allocator_8cpp_source.xhtml#l00212">arm_compute::test::validation::TEST_CASE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;{</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    _queue.finish();</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a27561688e2fc60176608ef725a4ecb30"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a27561688e2fc60176608ef725a4ecb30">&#9670;&nbsp;</a></span>target()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a> target </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the target GPU. </p>
<dl class="section return"><dt>Returns</dt><dd>The target GPU. </dd></dl>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="dynamic_fusion_2cl_fused_conv2d_elementwise_add_8cpp-example.xhtml#a32">dynamic_fusion/cl_fused_conv2d_elementwise_add.cpp</a>.</dd>
</dl>
<p class="definition">Definition at line <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00049">49</a> of file <a class="el" href="_c_l_scheduler_8cpp_source.xhtml">CLScheduler.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_direct_convolution_kernel_component_8cpp_source.xhtml#l00328">ClDirectConvolutionKernelComponent::allocate_shared_vars()</a>, <a class="el" href="gpu_2cl_2operators_2_cl_gemm_8cpp_source.xhtml#l00557">ClGemm::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_8cpp_source.xhtml#l00163">CLDepthwiseConvolutionLayer::configure()</a>, <a class="el" href="gpu_2cl_2operators_2_cl_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00256">ClGemmLowpMatrixMultiplyCore::configure()</a>, <a class="el" href="_c_l_convolution_layer_8cpp_source.xhtml#l00069">CLConvolutionLayer::configure()</a>, <a class="el" href="_cl_direct_convolution_kernel_component_8cpp_source.xhtml#l00294">ClDirectConvolutionKernelComponent::generate_build_options()</a>, <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00064">CLScheduler::set_target()</a>, <a class="el" href="_c_l_2_u_n_i_t_2dynamic__fusion_2_floor_8cpp_source.xhtml#l00058">arm_compute::test::validation::TEST_CASE()</a>, <a class="el" href="_operator_graph_impl_8cpp_source.xhtml#l00259">Conv2dContent::translate()</a>, <a class="el" href="gpu_2cl_2operators_2_cl_gemm_8cpp_source.xhtml#l00612">ClGemm::validate()</a>, <a class="el" href="gpu_2cl_2operators_2_cl_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00472">ClGemmLowpMatrixMultiplyCore::validate()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_8cpp_source.xhtml#l00251">CLDepthwiseConvolutionLayer::validate()</a>, <a class="el" href="_cl_conv2d_8cpp_source.xhtml#l00124">ClConv2d::validate()</a>, and <a class="el" href="_c_l_convolution_layer_8cpp_source.xhtml#l00128">CLConvolutionLayer::validate()</a>.</p>
<div class="fragment"><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;{</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keywordflow">return</span> _target;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a6c2059df991a75abef4eb643510c9544"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6c2059df991a75abef4eb643510c9544">&#9670;&nbsp;</a></span>tune_kernel_static()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void tune_kernel_static </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml">ICLKernel</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Tunes OpenCL kernel. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">kernel</td><td><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class. ">Kernel</a> to tune </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00086">86</a> of file <a class="el" href="_c_l_scheduler_8cpp_source.xhtml">CLScheduler.cpp</a>.</p>

<p class="reference">References <a class="el" href="classarm__compute_1_1_i_c_l_tuner.xhtml#a384fdc1bc38a4fc6e79af675cc4aa8e3">ICLTuner::tune_kernel_static()</a>.</p>

<p class="reference">Referenced by <a class="el" href="gpu_2cl_2operators_2_cl_scale_8cpp_source.xhtml#l00038">ClScale::configure()</a>, <a class="el" href="_cl_pool2d_8cpp_source.xhtml#l00037">ClPool2d::configure()</a>, <a class="el" href="_cl_pool3d_8cpp_source.xhtml#l00037">ClPool3d::configure()</a>, <a class="el" href="_cl_direct_conv2d_8cpp_source.xhtml#l00068">ClDirectConv2d::configure()</a>, <a class="el" href="_c_l_range_8cpp_source.xhtml#l00041">CLRange::configure()</a>, and <a class="el" href="_cl_gemm_conv2d_8cpp_source.xhtml#l00162">ClGemmConv2d::configure()</a>.</p>
<div class="fragment"><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;{</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordflow">if</span>(_cl_tuner != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        _cl_tuner-&gt;<a class="code" href="classarm__compute_1_1_i_c_l_tuner.xhtml#a384fdc1bc38a4fc6e79af675cc4aa8e3">tune_kernel_static</a>(kernel);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    }</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_i_c_l_tuner_xhtml_a384fdc1bc38a4fc6e79af675cc4aa8e3"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_tuner.xhtml#a384fdc1bc38a4fc6e79af675cc4aa8e3">arm_compute::ICLTuner::tune_kernel_static</a></div><div class="ttdeci">virtual void tune_kernel_static(ICLKernel &amp;kernel)=0</div><div class="ttdoc">Tune OpenCL kernel statically. </div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>arm_compute/runtime/CL/<a class="el" href="_c_l_scheduler_8h_source.xhtml">CLScheduler.h</a></li>
<li>src/runtime/CL/<a class="el" href="_c_l_scheduler_8cpp_source.xhtml">CLScheduler.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml">CLScheduler</a></li>
    <li class="footer">Generated on Thu Aug 18 2022 12:57:46 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
