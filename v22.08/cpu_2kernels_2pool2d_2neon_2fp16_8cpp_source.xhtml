<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/cpu/kernels/pool2d/neon/fp16.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('cpu_2kernels_2pool2d_2neon_2fp16_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">fp16.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="cpu_2kernels_2pool2d_2neon_2fp16_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2021-2022 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_helpers_8h.xhtml">arm_compute/core/Helpers.h</a>&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_tensor_8h.xhtml">arm_compute/core/ITensor.h</a>&quot;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_types_8h.xhtml">arm_compute/core/Types.h</a>&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2utils_2misc_2_traits_8h.xhtml">arm_compute/core/utils/misc/Traits.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="intrinsics_8h.xhtml">src/core/NEON/wrapper/intrinsics/intrinsics.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_window_helpers_8h.xhtml">src/core/helpers/WindowHelpers.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="cpu_2kernels_2pool2d_2neon_2list_8h.xhtml">src/cpu/kernels/pool2d/neon/list.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#if defined(__ARM_FEATURE_FP16_VECTOR_ARITHMETIC) &amp;&amp; defined(ENABLE_FP16_KERNELS)</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">namespace </span>cpu</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">namespace</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="keywordtype">void</span> pooling2_f16_maxpool_indices(<span class="keyword">const</span> ITensor *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, ITensor *dst0, ITensor *dst1, PoolingLayerInfo &amp;pool_info, <span class="keyword">const</span> Window &amp;window_src, <span class="keyword">const</span> Window &amp;window)</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> window_start_x = window.x().start();</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> window_end_x   = window.x().end();</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> window_step_x  = 8;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    Window window_out = window;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    window_out.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    Iterator in(src, window_src);</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    Iterator out(dst0, window_out);</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    Iterator indices(dst1, window_out);</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_pad_top  = pool_info.pad_stride_info.pad_top();</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_pad_left = pool_info.pad_stride_info.pad_left();</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keywordtype">int</span> pool_stride_x = 0;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keywordtype">int</span> pool_stride_y = 0;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    std::tie(pool_stride_x, pool_stride_y) = pool_info.pad_stride_info.stride();</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_right      = src-&gt;info()-&gt;padding().right;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_left       = src-&gt;info()-&gt;padding().left;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_horizontal = pad_right + pad_left;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> in_stride_y    = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(src-&gt;info()-&gt;strides_in_bytes().y());</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> in_stride_z    = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(src-&gt;info()-&gt;strides_in_bytes().z());</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window_out, [&amp;](<span class="keyword">const</span> Coordinates &amp; <span class="keywordtype">id</span>)</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    {</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>    = <span class="keywordtype">id</span>.y() * pool_stride_x;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a>   = <span class="keywordtype">id</span>.z() * pool_stride_y;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> pool_limit_y = pool_pad_top - <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a>;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> pool_limit_x = pool_pad_left - <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> pool_start_y = std::max(0, window_src.z().start() + pool_limit_y);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> pool_start_x = std::max(0, window_src.y().start() + pool_limit_x);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> in_x0_offset = (pool_start_x - pool_pad_left) * static_cast&lt;int&gt;(src-&gt;info()-&gt;strides_in_bytes().y()) + (pool_start_y - pool_pad_top) * <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(src-&gt;info()-&gt;strides_in_bytes().z());</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> in_x1_offset = (pool_start_x + 1 - pool_pad_left) * static_cast&lt;int&gt;(src-&gt;info()-&gt;strides_in_bytes().y()) + (pool_start_y - pool_pad_top) * <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                                 (src-&gt;info()-&gt;strides_in_bytes().z());</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> in_x2_offset = (pool_start_x - pool_pad_left) * static_cast&lt;int&gt;(src-&gt;info()-&gt;strides_in_bytes().y()) + (pool_start_y + 1 - pool_pad_top) * <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                                 (src-&gt;info()-&gt;strides_in_bytes().z());</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> in_x3_offset = (pool_start_x + 1 - pool_pad_left) * static_cast&lt;int&gt;(src-&gt;info()-&gt;strides_in_bytes().y()) + (pool_start_y + 1 - pool_pad_top) * <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                                 (src-&gt;info()-&gt;strides_in_bytes().z());</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <span class="keywordtype">int</span> x_off = window_start_x;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        <span class="keywordflow">for</span>(; x_off &lt;= (window_end_x - window_step_x); x_off += window_step_x)</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        {</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>  in_x0_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>float16_t *<span class="keyword">&gt;</span>(in.ptr() + in_x0_offset) + x_off;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>  in_x1_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>float16_t *<span class="keyword">&gt;</span>(in.ptr() + in_x1_offset) + x_off;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>  in_x2_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>float16_t *<span class="keyword">&gt;</span>(in.ptr() + in_x2_offset) + x_off;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>  in_x3_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>float16_t *<span class="keyword">&gt;</span>(in.ptr() + in_x3_offset) + x_off;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>  v_x0      = vld1q_f16(in_x0_ptr);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>  v_x1      = vld1q_f16(in_x1_ptr);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>  v_x2      = vld1q_f16(in_x2_ptr);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>  v_x3      = vld1q_f16(in_x3_ptr);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            float16x8_t vres      = <a class="code" href="clang-tidy_8h.xhtml#aade96dc9217219aec841782a4aaf76ad">vmaxq_f16</a>(<a class="code" href="clang-tidy_8h.xhtml#aade96dc9217219aec841782a4aaf76ad">vmaxq_f16</a>(v_x2, v_x3), <a class="code" href="clang-tidy_8h.xhtml#aade96dc9217219aec841782a4aaf76ad">vmaxq_f16</a>(v_x0, v_x1));</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            <span class="comment">// Store result</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            vst1q_f16(reinterpret_cast&lt;float16_t *&gt;(out.ptr()) + x_off, vres);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            <span class="keyword">const</span> uint32_t   offset_base    = offset_no_padding&lt;float16_t&gt;(in.offset(), id, *src-&gt;info(), pool_stride_x, pool_stride_y, <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>);</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            <span class="keyword">const</span> uint32_t   offset_x0      = (uint32_t)offset_base / <span class="keyword">sizeof</span>(float16_t) + x_off;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            <span class="keyword">const</span> uint32_t   offset_x1      = (uint32_t)offset_x0 + in_stride_y / <span class="keyword">sizeof</span>(float16_t) - pad_horizontal;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            <span class="keyword">const</span> uint32_t   offset_x2      = (uint32_t)offset_x0 + in_stride_z / <span class="keyword">sizeof</span>(float16_t) - pad_horizontal * src-&gt;info()-&gt;tensor_shape()[1];</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            <span class="keyword">const</span> uint32_t   offset_x3      = (uint32_t)offset_x2 + in_stride_y / <span class="keyword">sizeof</span>(float16_t) - pad_horizontal;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            <span class="keyword">const</span> uint32x4_t voffset_x0_0   = { offset_x0, offset_x0 + 1, offset_x0 + 2, offset_x0 + 3 };</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            <span class="keyword">const</span> uint32x4_t voffset_x0_1   = { offset_x0 + 4, offset_x0 + 5, offset_x0 + 6, offset_x0 + 7 };</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            <span class="keyword">const</span> uint16x8_t voffset_x0     = vcombine_u16(vmovn_u32(voffset_x0_0), vmovn_u32(voffset_x0_1));</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            <span class="keyword">const</span> uint32x4_t voffset_x1_0   = { offset_x1, offset_x1 + 1, offset_x1 + 2, offset_x1 + 3 };</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            <span class="keyword">const</span> uint32x4_t voffset_x1_1   = { offset_x1 + 4, offset_x1 + 5, offset_x1 + 6, offset_x1 + 7 };</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            <span class="keyword">const</span> uint16x8_t voffset_x1     = vcombine_u16(vmovn_u32(voffset_x1_0), vmovn_u32(voffset_x1_1));</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            <span class="keyword">const</span> uint32x4_t voffset_x2_0   = { offset_x2, offset_x2 + 1, offset_x2 + 2, offset_x2 + 3 };</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            <span class="keyword">const</span> uint32x4_t voffset_x2_1   = { offset_x2 + 4, offset_x2 + 5, offset_x2 + 6, offset_x2 + 7 };</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            <span class="keyword">const</span> uint16x8_t voffset_x2     = vcombine_u16(vmovn_u32(voffset_x2_0), vmovn_u32(voffset_x2_1));</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            <span class="keyword">const</span> uint32x4_t voffset_x3_0   = { offset_x3, offset_x3 + 1, offset_x3 + 2, offset_x3 + 3 };</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            <span class="keyword">const</span> uint32x4_t voffset_x3_1   = { offset_x3 + 4, offset_x3 + 5, offset_x3 + 6, offset_x3 + 7 };</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            <span class="keyword">const</span> uint16x8_t voffset_x3     = vcombine_u16(vmovn_u32(voffset_x3_0), vmovn_u32(voffset_x3_1));</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            <span class="keyword">const</span> uint16x8_t tmp_indices0   = vbslq_u16(<a class="code" href="clang-tidy_8h.xhtml#ab850ad118bcc0b7573bb6ef7485d0f59">vcgeq_f16</a>(v_x0, v_x1), voffset_x0, voffset_x1);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            <span class="keyword">const</span> uint16x8_t tmp_indices1   = vbslq_u16(<a class="code" href="clang-tidy_8h.xhtml#ab850ad118bcc0b7573bb6ef7485d0f59">vcgeq_f16</a>(v_x2, v_x3), voffset_x2, voffset_x3);</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            <span class="keyword">const</span> uint16x8_t tmp_indices2   = vbslq_u16(<a class="code" href="clang-tidy_8h.xhtml#ab850ad118bcc0b7573bb6ef7485d0f59">vcgeq_f16</a>(<a class="code" href="clang-tidy_8h.xhtml#aade96dc9217219aec841782a4aaf76ad">vmaxq_f16</a>(v_x0, v_x1), <a class="code" href="clang-tidy_8h.xhtml#aade96dc9217219aec841782a4aaf76ad">vmaxq_f16</a>(v_x2, v_x3)), tmp_indices0, tmp_indices1);</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            <span class="keyword">const</span> uint32x4_t tmp_indeces3_0 = vmovl_u16(vget_low_u16(tmp_indices2));</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            <span class="keyword">const</span> uint32x4_t tmp_indeces3_1 = vmovl_u16(vget_high_u16(tmp_indices2));</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            <span class="comment">// Store indicies</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            vst1q_u32(reinterpret_cast&lt;uint32_t *&gt;(indices.ptr()) + x_off, tmp_indeces3_0);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            vst1q_u32(reinterpret_cast&lt;uint32_t *&gt;(indices.ptr() + 16) + x_off, tmp_indeces3_1);</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        }</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <span class="comment">// Left-overs loop</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        <span class="keywordflow">for</span>(; x_off &lt; window_end_x; ++x_off)</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        {</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> x0  = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>float16_t *<span class="keyword">&gt;</span>(in.ptr() + in_x0_offset) + x_off);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> x1  = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>float16_t *<span class="keyword">&gt;</span>(in.ptr() + in_x1_offset) + x_off);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> x2  = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>float16_t *<span class="keyword">&gt;</span>(in.ptr() + in_x2_offset) + x_off);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> x3  = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>float16_t *<span class="keyword">&gt;</span>(in.ptr() + in_x3_offset) + x_off);</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            float16_t  res = std::max(std::max(x2, x3), std::max(x0, x1));</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            <span class="comment">// Store result</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            *(<span class="keyword">reinterpret_cast&lt;</span>float16_t *<span class="keyword">&gt;</span>(out.ptr()) + x_off) = res;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            <span class="keyword">const</span> uint32_t offset_base = offset_no_padding&lt;float16_t&gt;(in.offset(), id, *src-&gt;info(), pool_stride_x, pool_stride_y, <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            <span class="keyword">const</span> uint32_t offset_x0   = (uint32_t)offset_base / <span class="keyword">sizeof</span>(float16_t) + x_off;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            <span class="keyword">const</span> uint32_t offset_x1   = (uint32_t)offset_x0 + in_stride_y / <span class="keyword">sizeof</span>(float16_t) - pad_horizontal;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            <span class="keyword">const</span> uint32_t offset_x2   = (uint32_t)offset_x0 + in_stride_z / <span class="keyword">sizeof</span>(float16_t) - pad_horizontal * src-&gt;info()-&gt;tensor_shape()[1];</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            <span class="keyword">const</span> uint32_t offset_x3   = (uint32_t)offset_x2 + in_stride_y / <span class="keyword">sizeof</span>(float16_t) - pad_horizontal;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            <span class="keyword">const</span> uint32_t tmp_idx0    = (x0 &gt;= x1) ? offset_x0 : offset_x1;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            <span class="keyword">const</span> uint32_t tmp_idx1    = (x2 &gt;= x3) ? offset_x2 : offset_x3;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            <span class="keyword">const</span> uint32_t tmp_idx2    = (std::max(x0, x1) &gt;= std::max(x2, x3)) ? tmp_idx0 : tmp_idx1;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            <span class="comment">// Store indices</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            *(<span class="keyword">reinterpret_cast&lt;</span>uint32_t *<span class="keyword">&gt;</span>(indices.ptr()) + x_off) = tmp_idx2;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        }</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    },</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    in, out, indices);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;}</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;}</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#af8966e308573541aa625e4a7f955d424">poolingMxN_fp16_neon_nhwc</a>(<span class="keyword">const</span> ITensor *src, ITensor *dst0, ITensor *dst1, PoolingLayerInfo &amp;pool_info, <span class="keyword">const</span> Window &amp;window_src, <span class="keyword">const</span> Window &amp;window)</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;{</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="keywordflow">if</span>(pool_info.pool_size == Size2D(2, 2) &amp;&amp; pool_info.pool_type == <a class="code" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93a26a4b44a837bf97b972628509912b4a5">PoolingType::MAX</a> &amp;&amp; dst1)</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    {</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        pooling2_f16_maxpool_indices(src, dst0, dst1, pool_info, window_src, window);</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    }</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> window_start_x = window.x().start();</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> window_end_x   = window.x().end();</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> window_step_x  = 8;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    Window window_out = window;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    window_out.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 1, 1));</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    Iterator in(src, window_src);</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    Iterator out(dst0, window_out);</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_size_x     = pool_info.is_global_pooling ? src-&gt;info()-&gt;tensor_shape().y() : pool_info.pool_size.width;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_size_y     = pool_info.is_global_pooling ? src-&gt;info()-&gt;tensor_shape().z() : pool_info.pool_size.height;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_pad_right  = pool_info.pad_stride_info.pad_right();</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_pad_top    = pool_info.pad_stride_info.pad_top();</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_pad_left   = pool_info.pad_stride_info.pad_left();</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_pad_bottom = pool_info.pad_stride_info.pad_bottom();</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="keywordtype">int</span>       pool_stride_x   = 0;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keywordtype">int</span>       pool_stride_y   = 0;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    std::tie(pool_stride_x, pool_stride_y) = pool_info.pad_stride_info.stride();</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> upper_bound_w = src-&gt;info()-&gt;dimension(1) + (pool_info.exclude_padding ? 0 : pool_pad_right);</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> upper_bound_h = src-&gt;info()-&gt;dimension(2) + (pool_info.exclude_padding ? 0 : pool_pad_bottom);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    float16x8_t vres;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window_out, [&amp;](<span class="keyword">const</span> Coordinates &amp; <span class="keywordtype">id</span>)</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    {</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> idx_width    = <span class="keywordtype">id</span>.y() * pool_stride_x;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> idx_height   = <span class="keywordtype">id</span>.z() * pool_stride_y;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> pool_limit_y = pool_pad_top - <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a>;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> pool_limit_x = pool_pad_left - <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> pool_start_y = std::max(0, window_src.z().start() + pool_limit_y);</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> pool_end_y   = std::min(pool_size_y, window_src.z().end() + pool_limit_y);</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> pool_start_x = std::max(0, window_src.y().start() + pool_limit_x);</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> pool_end_x   = std::min(pool_size_x, window_src.y().end() + pool_limit_x);</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        <span class="keywordtype">int</span> x_off = window_start_x;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        <span class="keywordflow">for</span>(; x_off &lt;= (window_end_x - window_step_x); x_off += window_step_x)</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        {</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            <span class="keywordflow">if</span>(pool_info.pool_type != <a class="code" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93a26a4b44a837bf97b972628509912b4a5">PoolingType::MAX</a>)</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            {</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                <span class="comment">// Calculate scale</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a> = calculate_avg_scale_pool2d(pool_info.exclude_padding, <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>, <span class="keywordtype">id</span>, pool_size_x, pool_size_y, upper_bound_w, upper_bound_h, pool_pad_left, pool_pad_top, pool_stride_x,</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                                                               pool_stride_y);</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                <span class="keyword">const</span> float16x8_t scale_v = vdupq_n_f16(scale);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                <span class="comment">// Perform pooling</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                vres = vdupq_n_f16(0.0f);</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = pool_start_y; y &lt; pool_end_y; ++y)</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                {</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = pool_start_x; x &lt; pool_end_x; ++x)</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                    {</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                        <span class="keyword">const</span> float16x8_t data = vld1q_f16(reinterpret_cast&lt;const float16_t *&gt;(in.ptr() + (x - pool_pad_left) * static_cast&lt;int&gt;(src-&gt;info()-&gt;strides_in_bytes().y()) + (y - pool_pad_top) * <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                                                                                               (src-&gt;info()-&gt;strides_in_bytes().z())) + x_off);</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                        <span class="comment">// Get power of 2 in case of l2 pooling and accumulate</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                        <span class="keywordflow">if</span>(pool_info.pool_type == <a class="code" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93a7e6aa2d53f6ee2b1a34b017fa403cb76">PoolingType::L2</a>)</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                        {</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                            vres = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(vres, <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(data, data));</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                        }</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                        <span class="keywordflow">else</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                        {</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                            vres = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(vres, data);</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                        }</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                    }</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                }</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                <span class="comment">// Divide by scale</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                vres = <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(vres, scale_v);</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;            }</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;            {</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                vres = vdupq_n_f16(-std::numeric_limits&lt;float&gt;::infinity());</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = pool_start_y; y &lt; pool_end_y; ++y)</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                {</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = pool_start_x; x &lt; pool_end_x; ++x)</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                    {</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                        <span class="keyword">const</span> float16x8_t data = vld1q_f16(reinterpret_cast&lt;const float16_t *&gt;(in.ptr() + (x - pool_pad_left) * static_cast&lt;int&gt;(src-&gt;info()-&gt;strides_in_bytes().y()) + (y - pool_pad_top) * <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                                                                                               (src-&gt;info()-&gt;strides_in_bytes().z())) + x_off);</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                        vres                   = <a class="code" href="clang-tidy_8h.xhtml#aade96dc9217219aec841782a4aaf76ad">vmaxq_f16</a>(vres, data);</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                    }</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                }</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;            }</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;            <span class="comment">// Calculate square-root in case of l2 pooling</span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;            <span class="keywordflow">if</span>(pool_info.pool_type == <a class="code" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93a7e6aa2d53f6ee2b1a34b017fa403cb76">PoolingType::L2</a>)</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;            {</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                float16x8_t sqrt_reciprocal = <a class="code" href="clang-tidy_8h.xhtml#ad952d0fdf95c4563ece11698a912c785">vrsqrteq_f16</a>(vres);</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                vres                        = <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(vres, <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(<a class="code" href="clang-tidy_8h.xhtml#ac29596e74442e01b7c1633a23c3b73b5">vrsqrtsq_f16</a>(<a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(vres, sqrt_reciprocal), sqrt_reciprocal), sqrt_reciprocal));</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;            }</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;            <span class="comment">// Store result</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;            vst1q_f16(reinterpret_cast&lt;float16_t *&gt;(out.ptr()) + x_off, vres);</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        }</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        <span class="comment">// Left-overs loop</span></div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        <span class="keywordflow">for</span>(; x_off &lt; window_end_x; ++x_off)</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        {</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;            float16_t res = 0.0f;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;            <span class="keywordflow">if</span>(pool_info.pool_type != <a class="code" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93a26a4b44a837bf97b972628509912b4a5">PoolingType::MAX</a>)</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;            {</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                <span class="comment">// Calculate scale</span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                <span class="keyword">const</span> float16_t scale = calculate_avg_scale_pool2d(pool_info.exclude_padding, <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>, <span class="keywordtype">id</span>, pool_size_x, pool_size_y, upper_bound_w, upper_bound_h, pool_pad_left, pool_pad_top, pool_stride_x,</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                                                                   pool_stride_y);</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = pool_start_y; y &lt; pool_end_y; ++y)</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                {</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = pool_start_x; x &lt; pool_end_x; ++x)</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                    {</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                        <span class="keyword">const</span> <span class="keywordtype">float</span> data = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>float16_t *<span class="keyword">&gt;</span>(in.ptr() + (x - pool_pad_left) * static_cast&lt;int&gt;(src-&gt;info()-&gt;strides_in_bytes().y()) + (y - pool_pad_top) * <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span></div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                                                                                 (src-&gt;info()-&gt;strides_in_bytes().z())) + x_off);</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                        <span class="comment">// Get power of 2 in case of l2 pooling and accumulate</span></div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                        <span class="keywordflow">if</span>(pool_info.pool_type == <a class="code" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93a7e6aa2d53f6ee2b1a34b017fa403cb76">PoolingType::L2</a>)</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                        {</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                            res += data * data;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                        }</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;                        <span class="keywordflow">else</span></div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                        {</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                            res += data;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;                        }</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                    }</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                }</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                <span class="comment">// Divide by scale</span></div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                res *= <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;            }</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;            {</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                res = -std::numeric_limits&lt;float&gt;::infinity();</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = pool_start_y; y &lt; pool_end_y; ++y)</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                {</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = pool_start_x; x &lt; pool_end_x; ++x)</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                    {</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                        <span class="keyword">const</span> float16_t data = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>float16_t *<span class="keyword">&gt;</span>(in.ptr() + (x - pool_pad_left) * static_cast&lt;int&gt;(src-&gt;info()-&gt;strides_in_bytes().y()) + (y - pool_pad_top) * <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span></div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                                                                                     (src-&gt;info()-&gt;strides_in_bytes().z())) + x_off);</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                        res                  = std::max(res, data);</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                    }</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                }</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;            }</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;            <span class="comment">// Calculate square-root in case of l2 pooling</span></div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;            <span class="keywordflow">if</span>(pool_info.pool_type == <a class="code" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93a7e6aa2d53f6ee2b1a34b017fa403cb76">PoolingType::L2</a>)</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;            {</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                res = std::sqrt(res);</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;            }</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;            <span class="comment">// Store result</span></div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;            *(<span class="keyword">reinterpret_cast&lt;</span>float16_t *<span class="keyword">&gt;</span>(out.ptr()) + x_off) = res;</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        }</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    },</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    in, out);</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;}</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;} <span class="comment">// namespace cpu</span></div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* defined(__ARM_FEATURE_FP16_VECTOR_ARITHMETIC) &amp;&amp; defined(ENABLE_FP16_KERNELS) */</span><span class="preprocessor"></span></div><div class="ttc" id="clang-tidy_8h_xhtml_aade96dc9217219aec841782a4aaf76ad"><div class="ttname"><a href="clang-tidy_8h.xhtml#aade96dc9217219aec841782a4aaf76ad">vmaxq_f16</a></div><div class="ttdeci">float16x8_t vmaxq_f16(float16x8_t, float16x8_t)</div><div class="ttdef"><b>Definition:</b> <a href="clang-tidy_8h_source.xhtml#l00163">clang-tidy.h:163</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ac354c23c8e4921ea8a8ad07e1a1d3fe5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">arm_compute::test::validation::idx_width</a></div><div class="ttdeci">const int idx_width</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00265">Scale.cpp:265</a></div></div>
<div class="ttc" id="_window_helpers_8h_xhtml"><div class="ttname"><a href="_window_helpers_8h.xhtml">WindowHelpers.h</a></div></div>
<div class="ttc" id="_i_tensor_8h_xhtml"><div class="ttname"><a href="_i_tensor_8h.xhtml">ITensor.h</a></div></div>
<div class="ttc" id="clang-tidy_8h_xhtml_a2c2032af67addd543930e3027b04e8d4"><div class="ttname"><a href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a></div><div class="ttdeci">float16x8_t vmulq_f16(float16x8_t, float16x8_t)</div><div class="ttdef"><b>Definition:</b> <a href="clang-tidy_8h_source.xhtml#l00078">clang-tidy.h:78</a></div></div>
<div class="ttc" id="clang-tidy_8h_xhtml_ad952d0fdf95c4563ece11698a912c785"><div class="ttname"><a href="clang-tidy_8h.xhtml#ad952d0fdf95c4563ece11698a912c785">vrsqrteq_f16</a></div><div class="ttdeci">float16x8_t vrsqrteq_f16(float16x8_t)</div><div class="ttdef"><b>Definition:</b> <a href="clang-tidy_8h_source.xhtml#l00133">clang-tidy.h:133</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a4f12b7902ae53e3898b2ab779f962340"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">arm_compute::test::validation::scale</a></div><div class="ttdeci">NEScale scale</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00275">Scale.cpp:275</a></div></div>
<div class="ttc" id="clang-tidy_8h_xhtml_a79c9aca60e8cf347407d072168faf2aa"><div class="ttname"><a href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a></div><div class="ttdeci">float16x8_t vaddq_f16(float16x8_t, float16x8_t)</div><div class="ttdef"><b>Definition:</b> <a href="clang-tidy_8h_source.xhtml#l00068">clang-tidy.h:68</a></div></div>
<div class="ttc" id="clang-tidy_8h_xhtml_ac29596e74442e01b7c1633a23c3b73b5"><div class="ttname"><a href="clang-tidy_8h.xhtml#ac29596e74442e01b7c1633a23c3b73b5">vrsqrtsq_f16</a></div><div class="ttdeci">float16x8_t vrsqrtsq_f16(float16x8_t, float16x8_t)</div><div class="ttdef"><b>Definition:</b> <a href="clang-tidy_8h_source.xhtml#l00008">clang-tidy.h:8</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2022 Arm Limited. </div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a9172da722f0a434e5cc07c0a3c115d93a26a4b44a837bf97b972628509912b4a5"><div class="ttname"><a href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93a26a4b44a837bf97b972628509912b4a5">arm_compute::PoolingType::MAX</a></div><div class="ttdoc">Max Pooling. </div></div>
<div class="ttc" id="clang-tidy_8h_xhtml_ab850ad118bcc0b7573bb6ef7485d0f59"><div class="ttname"><a href="clang-tidy_8h.xhtml#ab850ad118bcc0b7573bb6ef7485d0f59">vcgeq_f16</a></div><div class="ttdeci">uint16x8_t vcgeq_f16(float16x8_t, float16x8_t)</div><div class="ttdef"><b>Definition:</b> <a href="clang-tidy_8h_source.xhtml#l00093">clang-tidy.h:93</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_aa96e81276ee4f87ab386cd05a5539a7d"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">arm_compute::Window::DimX</a></div><div class="ttdeci">static constexpr size_t DimX</div><div class="ttdoc">Alias for dimension 0 also known as X dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00043">Window.h:43</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_abb9f749a8ea92dda58cc0881b1450158"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">arm_compute::test::validation::idx_height</a></div><div class="ttdeci">const int idx_height</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00266">Scale.cpp:266</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_af8966e308573541aa625e4a7f955d424"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#af8966e308573541aa625e4a7f955d424">arm_compute::cpu::poolingMxN_fp16_neon_nhwc</a></div><div class="ttdeci">void poolingMxN_fp16_neon_nhwc(const ITensor *src0, ITensor *dst0, ITensor *dst1, PoolingLayerInfo &amp;, const Window &amp;window_src, const Window &amp;window)</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a9172da722f0a434e5cc07c0a3c115d93a7e6aa2d53f6ee2b1a34b017fa403cb76"><div class="ttname"><a href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93a7e6aa2d53f6ee2b1a34b017fa403cb76">arm_compute::PoolingType::L2</a></div><div class="ttdoc">L2 Pooling. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">arm_compute::DataLayout::NHWC</a></div><div class="ttdoc">Num samples, height, width, channels. </div></div>
<div class="ttc" id="arm__compute_2core_2_helpers_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_helpers_8h.xhtml">Helpers.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5002bf7ec46d52971f9526e94172cfee"><div class="ttname"><a href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;... iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00077">Helpers.inl:77</a></div></div>
<div class="ttc" id="arm__compute_2core_2_types_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="intrinsics_8h_xhtml"><div class="ttname"><a href="intrinsics_8h.xhtml">intrinsics.h</a></div></div>
<div class="ttc" id="cpu_2kernels_2pool2d_2neon_2list_8h_xhtml"><div class="ttname"><a href="cpu_2kernels_2pool2d_2neon_2list_8h.xhtml">list.h</a></div></div>
<div class="ttc" id="arm__compute_2core_2utils_2misc_2_traits_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2utils_2misc_2_traits_8h.xhtml">Traits.h</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_2c61f424fd391396db977702a2beee9a.xhtml">cpu</a></li><li class="navelem"><a class="el" href="dir_1de7bcbbdec2bf3559cb3c688662d4f5.xhtml">kernels</a></li><li class="navelem"><a class="el" href="dir_1b6f9ec1b0fc533ab3281c9e7c09cb9d.xhtml">pool2d</a></li><li class="navelem"><a class="el" href="dir_fc078af2ce9e3170a13f4ad84b67af9a.xhtml">neon</a></li><li class="navelem"><a class="el" href="cpu_2kernels_2pool2d_2neon_2fp16_8cpp.xhtml">fp16.cpp</a></li>
    <li class="footer">Generated on Thu Aug 18 2022 12:57:37 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
