<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: tests/AssetsLibrary.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_assets_library_8h_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">AssetsLibrary.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_assets_library_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017-2022 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_TEST_TENSOR_LIBRARY_H</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define ARM_COMPUTE_TEST_TENSOR_LIBRARY_H</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_coordinates_8h.xhtml">arm_compute/core/Coordinates.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_error_8h.xhtml">arm_compute/core/Error.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_helpers_8h.xhtml">arm_compute/core/Helpers.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_tensor_info_8h.xhtml">arm_compute/core/TensorInfo.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_tensor_shape_8h.xhtml">arm_compute/core/TensorShape.h</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_types_8h.xhtml">arm_compute/core/Types.h</a>&quot;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_window_8h.xhtml">arm_compute/core/Window.h</a>&quot;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_random_8h.xhtml">support/Random.h</a>&quot;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_raw_tensor_8h.xhtml">tests/RawTensor.h</a>&quot;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_tensor_cache_8h.xhtml">tests/TensorCache.h</a>&quot;</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="tests_2_utils_8h.xhtml">tests/Utils.h</a>&quot;</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_exceptions_8h.xhtml">tests/framework/Exceptions.h</a>&quot;</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#include &quot;utils/Utils.h&quot;</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor">#include &lt;cstddef&gt;</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor">#include &lt;fstream&gt;</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="preprocessor">#include &lt;random&gt;</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="preprocessor">#include &lt;type_traits&gt;</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;{</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="keyword">namespace </span>test</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;{<span class="comment"></span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">/** Factory class to create and fill tensors.</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment"> * Allows to initialise tensors from loaded images or by specifying the shape</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment"> * explicitly. Furthermore, provides methods to fill tensors with the content of</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment"> * loaded images or with random values.</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00059"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_assets_library.xhtml">   59</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml">AssetsLibrary</a> final</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;{</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00062"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a51733f705cc27b63c4be127eb50639c4">   62</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a51733f705cc27b63c4be127eb50639c4">RangePair</a> = std::pair&lt;float, float&gt;;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment">    /** Initialises the library with a @p path to the assets directory.</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment">     * Furthermore, sets the seed for the random generator to @p seed.</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">     * @param[in] path Path to load assets from.</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment">     * @param[in] seed Seed used to initialise the random number generator.</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#adb53338108890e6b7354e16a1e9ae716">AssetsLibrary</a>(std::string <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac4cb5f95f1d720ef0cc94b74152cf50b">path</a>, std::random_device::result_type <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a0a20fa200643e1e3aa4004375d9188f1">seed</a>);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment">    /** Path to assets directory used to initialise library.</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment">     * @return the path to the assets directory.</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    std::string <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac4cb5f95f1d720ef0cc94b74152cf50b">path</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment">    /** Seed that is used to fill tensors with random values.</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment">     * @return the initial random seed.</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    std::random_device::result_type <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a0a20fa200643e1e3aa4004375d9188f1">seed</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment">    /** Provides a tensor shape for the specified image.</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment">     * @param[in] name Image file used to look up the raw tensor.</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">     * @return the tensor shape for the specified image.</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#acc474b96886b5fd500460c7b25dc84fa">get_image_shape</a>(<span class="keyword">const</span> std::string &amp;<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a>);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment">    /** Provides a constant raw tensor for the specified image.</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment">     * @param[in] name Image file used to look up the raw tensor.</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment">     * @return a raw tensor for the specified image.</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;<span class="keyword">get</span>(<span class="keyword">const</span> std::string &amp;<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a>) <span class="keyword">const</span>;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment">    /** Provides a raw tensor for the specified image.</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment">     * @param[in] name Image file used to look up the raw tensor.</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">     * @return a raw tensor for the specified image.</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> <span class="keyword">get</span>(<span class="keyword">const</span> std::string &amp;<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a>);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">    /** Creates an uninitialised raw tensor with the given @p data_type and @p</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">     * num_channels. The shape is derived from the specified image.</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment">     * @param[in] name         Image file used to initialise the tensor.</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">     * @param[in] data_type    Data type used to initialise the tensor.</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">     * @param[in] num_channels Number of channels used to initialise the tensor.</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">     * @return a raw tensor for the specified image.</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> <span class="keyword">get</span>(<span class="keyword">const</span> std::string &amp;<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>, <span class="keywordtype">int</span> num_channels = 1) <span class="keyword">const</span>;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment">    /** Provides a contant raw tensor for the specified image after it has been</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment">     * converted to @p format.</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment">     * @param[in] name   Image file used to look up the raw tensor.</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment">     * @param[in] format Format used to look up the raw tensor.</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment">     * @return a raw tensor for the specified image.</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;<span class="keyword">get</span>(<span class="keyword">const</span> std::string &amp;<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format) <span class="keyword">const</span>;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">    /** Provides a raw tensor for the specified image after it has been</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment">     * converted to @p format.</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment">     * @param[in] name   Image file used to look up the raw tensor.</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment">     * @param[in] format Format used to look up the raw tensor.</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment">     * @return a raw tensor for the specified image.</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> <span class="keyword">get</span>(<span class="keyword">const</span> std::string &amp;<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format);</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment">    /** Provides a contant raw tensor for the specified channel after it has</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment">     * been extracted form the given image.</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment">     * @param[in] name    Image file used to look up the raw tensor.</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment">     * @param[in] channel Channel used to look up the raw tensor.</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment">     * @note The channel has to be unambiguous so that the format can be</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment">     *       inferred automatically.</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment">     * @return a raw tensor for the specified image channel.</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;<span class="keyword">get</span>(<span class="keyword">const</span> std::string &amp;<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a>, <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a> channel) <span class="keyword">const</span>;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment">    /** Provides a raw tensor for the specified channel after it has been</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment">     * extracted form the given image.</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment">     * @param[in] name    Image file used to look up the raw tensor.</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment">     * @param[in] channel Channel used to look up the raw tensor.</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment">     * @note The channel has to be unambiguous so that the format can be</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment">     *       inferred automatically.</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="comment">     * @return a raw tensor for the specified image channel.</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> <span class="keyword">get</span>(<span class="keyword">const</span> std::string &amp;<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a>, <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a> channel);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment">    /** Provides a constant raw tensor for the specified channel after it has</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment">     * been extracted form the given image formatted to @p format.</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment">     * @param[in] name    Image file used to look up the raw tensor.</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment">     * @param[in] format  Format used to look up the raw tensor.</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment">     * @param[in] channel Channel used to look up the raw tensor.</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="comment">     * @return a raw tensor for the specified image channel.</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;<span class="keyword">get</span>(<span class="keyword">const</span> std::string &amp;<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format, <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a> channel) <span class="keyword">const</span>;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment">    /** Provides a raw tensor for the specified channel after it has been</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment">     * extracted form the given image formatted to @p format.</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment">     * @param[in] name    Image file used to look up the raw tensor.</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment">     * @param[in] format  Format used to look up the raw tensor.</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment">     * @param[in] channel Channel used to look up the raw tensor.</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="comment">     * @return a raw tensor for the specified image channel.</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> <span class="keyword">get</span>(<span class="keyword">const</span> std::string &amp;<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format, <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a> channel);</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment">    /** Puts garbage values all around the tensor for testing purposes</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment">     * @param[in, out] tensor       To be filled tensor.</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="comment">     * @param[in]      distribution Distribution used to fill the tensor&#39;s surroundings.</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="comment">     * @param[in]      seed_offset  The offset will be added to the global seed before initialising the random generator.</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> D&gt;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ae139c07ceb794ec059efb92aa4c6fd9d">fill_borders_with_garbage</a>(T &amp;&amp;tensor, D &amp;&amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a756aeab6b5c217b924c3cc70222c975d">distribution</a>, std::random_device::result_type seed_offset) <span class="keyword">const</span>;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="comment">    /** Fills the specified @p tensor with random values drawn from @p</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment">     * distribution.</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="comment">     * @param[in, out] tensor       To be filled tensor.</span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="comment">     * @param[in]      distribution Distribution used to fill the tensor.</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="comment">     * @param[in]      seed_offset  The offset will be added to the global seed before initialising the random generator.</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="comment">     * @note The @p distribution has to provide operator(Generator &amp;) which</span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="comment">     *       will be used to draw samples.</span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> D&gt;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">fill</a>(T &amp;&amp;tensor, D &amp;&amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a756aeab6b5c217b924c3cc70222c975d">distribution</a>, std::random_device::result_type seed_offset) <span class="keyword">const</span>;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> D&gt;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a6327330393eee13d12234267ab5d19d4">fill_boxes</a>(T &amp;&amp;tensor, D &amp;&amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a756aeab6b5c217b924c3cc70222c975d">distribution</a>, std::random_device::result_type seed_offset) <span class="keyword">const</span>;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="comment">    /** Fills the specified @p raw tensor with random values drawn from @p</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="comment">     * distribution.</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="comment">     * @param[in, out] vec          To be filled vector.</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment">     * @param[in]      distribution Distribution used to fill the tensor.</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="comment">     * @param[in]      seed_offset  The offset will be added to the global seed before initialising the random generator.</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="comment">     * @note The @p distribution has to provide operator(Generator &amp;) which</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="comment">     *       will be used to draw samples.</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> D&gt;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">fill</a>(std::vector&lt;T&gt; &amp;vec, D &amp;&amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a756aeab6b5c217b924c3cc70222c975d">distribution</a>, std::random_device::result_type seed_offset) <span class="keyword">const</span>;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="comment">    /** Fills the specified @p raw tensor with random values drawn from @p</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="comment">     * distribution.</span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment">     * @param[in, out] raw          To be filled raw.</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="comment">     * @param[in]      distribution Distribution used to fill the tensor.</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="comment">     * @param[in]      seed_offset  The offset will be added to the global seed before initialising the random generator.</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="comment">     * @note The @p distribution has to provide operator(Generator &amp;) which</span></div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="comment">     *       will be used to draw samples.</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> D&gt;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">fill</a>(<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;raw, D &amp;&amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a756aeab6b5c217b924c3cc70222c975d">distribution</a>, std::random_device::result_type seed_offset) <span class="keyword">const</span>;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="comment">    /** Fills the specified @p tensor with the content of the specified image</span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="comment">     * converted to the given format.</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="comment">     * @param[in, out] tensor To be filled tensor.</span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="comment">     * @param[in]      name   Image file used to fill the tensor.</span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="comment">     * @param[in]      format Format of the image used to fill the tensor.</span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="comment">     * @warning No check is performed that the specified format actually</span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="comment">     *          matches the format of the tensor.</span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">fill</a>(T &amp;&amp;tensor, <span class="keyword">const</span> std::string &amp;name, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format) <span class="keyword">const</span>;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="comment">    /** Fills the raw tensor with the content of the specified image</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="comment">     * converted to the given format.</span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="comment">     * @param[in, out] raw    To be filled raw tensor.</span></div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="comment">     * @param[in]      name   Image file used to fill the tensor.</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="comment">     * @param[in]      format Format of the image used to fill the tensor.</span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="comment">     * @warning No check is performed that the specified format actually</span></div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="comment">     *          matches the format of the tensor.</span></div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">fill</a>(<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;raw, <span class="keyword">const</span> std::string &amp;name, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format) <span class="keyword">const</span>;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="comment">    /** Fills the specified @p tensor with the content of the specified channel</span></div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="comment">     * extracted from the given image.</span></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="comment">     * @param[in, out] tensor  To be filled tensor.</span></div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="comment">     * @param[in]      name    Image file used to fill the tensor.</span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="comment">     * @param[in]      channel Channel of the image used to fill the tensor.</span></div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="comment">     * @note The channel has to be unambiguous so that the format can be</span></div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="comment">     *       inferred automatically.</span></div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="comment">     * @warning No check is performed that the specified format actually</span></div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="comment">     *          matches the format of the tensor.</span></div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">fill</a>(T &amp;&amp;tensor, <span class="keyword">const</span> std::string &amp;name, <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a> channel) <span class="keyword">const</span>;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="comment">    /** Fills the raw tensor with the content of the specified channel</span></div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="comment">     * extracted from the given image.</span></div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="comment">     * @param[in, out] raw     To be filled raw tensor.</span></div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="comment">     * @param[in]      name    Image file used to fill the tensor.</span></div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="comment">     * @param[in]      channel Channel of the image used to fill the tensor.</span></div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="comment">     * @note The channel has to be unambiguous so that the format can be</span></div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="comment">     *       inferred automatically.</span></div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="comment">     * @warning No check is performed that the specified format actually</span></div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="comment">     *          matches the format of the tensor.</span></div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">fill</a>(<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;raw, <span class="keyword">const</span> std::string &amp;name, <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a> channel) <span class="keyword">const</span>;</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="comment">    /** Fills the specified @p tensor with the content of the specified channel</span></div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;<span class="comment">     * extracted from the given image after it has been converted to the given</span></div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="comment">     * format.</span></div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;<span class="comment">     * @param[in, out] tensor  To be filled tensor.</span></div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;<span class="comment">     * @param[in]      name    Image file used to fill the tensor.</span></div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;<span class="comment">     * @param[in]      format  Format of the image used to fill the tensor.</span></div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="comment">     * @param[in]      channel Channel of the image used to fill the tensor.</span></div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;<span class="comment">     * @warning No check is performed that the specified format actually</span></div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="comment">     *          matches the format of the tensor.</span></div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">fill</a>(T &amp;&amp;tensor, <span class="keyword">const</span> std::string &amp;name, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format, <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a> channel) <span class="keyword">const</span>;</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="comment">    /** Fills the raw tensor with the content of the specified channel</span></div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;<span class="comment">     * extracted from the given image after it has been converted to the given</span></div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="comment">     * format.</span></div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="comment">     * @param[in, out] raw     To be filled raw tensor.</span></div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="comment">     * @param[in]      name    Image file used to fill the tensor.</span></div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="comment">     * @param[in]      format  Format of the image used to fill the tensor.</span></div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;<span class="comment">     * @param[in]      channel Channel of the image used to fill the tensor.</span></div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="comment">     * @warning No check is performed that the specified format actually</span></div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;<span class="comment">     *          matches the format of the tensor.</span></div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">fill</a>(<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;raw, <span class="keyword">const</span> std::string &amp;name, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format, <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a> channel) <span class="keyword">const</span>;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;<span class="comment">    /** Fills the specified @p tensor with the content of the raw tensor.</span></div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;<span class="comment">     * @param[in, out] tensor To be filled tensor.</span></div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;<span class="comment">     * @param[in]      raw    Raw tensor used to fill the tensor.</span></div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="comment">     * @warning No check is performed that the specified format actually</span></div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="comment">     *          matches the format of the tensor.</span></div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">fill</a>(T &amp;&amp;tensor, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> raw) <span class="keyword">const</span>;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;<span class="comment">    /** Fill a tensor with uniform distribution</span></div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;<span class="comment">     * @param[in, out] tensor      To be filled tensor.</span></div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;<span class="comment">     * @param[in]      seed_offset The offset will be added to the global seed before initialising the random generator.</span></div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a6bdf347bae60f8b5b4303776cfc48d68">fill_tensor_uniform</a>(T &amp;&amp;tensor, std::random_device::result_type seed_offset) <span class="keyword">const</span>;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;<span class="comment">    /** Fill a tensor with uniform distribution</span></div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;<span class="comment">     * @param[in, out] tensor      To be filled tensor.</span></div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;<span class="comment">     * @param[in]      seed_offset The offset will be added to the global seed before initialising the random generator.</span></div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;<span class="comment">     * @param[in]      low         lowest value in the range (inclusive)</span></div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;<span class="comment">     * @param[in]      high        highest value in the range (inclusive)</span></div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;<span class="comment">     * @note    @p low and @p high must be of the same type as the data type of @p tensor</span></div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> D&gt;</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a6bdf347bae60f8b5b4303776cfc48d68">fill_tensor_uniform</a>(T &amp;&amp;tensor, std::random_device::result_type seed_offset, D low, D high) <span class="keyword">const</span>;</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="comment">    /** Fill a tensor with uniform distribution across the specified range</span></div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;<span class="comment">     * @param[in, out] tensor               To be filled tensor.</span></div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;<span class="comment">     * @param[in]      seed_offset          The offset will be added to the global seed before initialising the random generator.</span></div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;<span class="comment">     * @param[in]      excluded_range_pairs Ranges to exclude from the generator</span></div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a7fd005cb98921bb25824629d659ea79d">fill_tensor_uniform_ranged</a>(T                                          &amp;&amp;tensor,</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                                    std::random_device::result_type              seed_offset,</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                                    <span class="keyword">const</span> std::vector&lt;AssetsLibrary::RangePair&gt; &amp;excluded_range_pairs) <span class="keyword">const</span>;</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;<span class="comment">    /** Fills the specified @p tensor with data loaded from .npy (numpy binary) in specified path.</span></div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;<span class="comment">     * @param[in, out] tensor To be filled tensor.</span></div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;<span class="comment">     * @param[in]      name   Data file.</span></div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;<span class="comment">     * @note The numpy array stored in the binary .npy file must be row-major in the sense that it</span></div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;<span class="comment">     * must store elements within a row consecutively in the memory, then rows within a 2D slice,</span></div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;<span class="comment">     * then 2D slices within a 3D slice and so on. Note that it imposes no restrictions on what</span></div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;<span class="comment">     * indexing convention is used in the numpy array. That is, the numpy array can be either fortran</span></div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;<span class="comment">     * style or C style as long as it adheres to the rule above.</span></div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;<span class="comment">     * More concretely, the orders of dimensions for each style are as follows:</span></div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;<span class="comment">     * C-style (numpy default):</span></div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;<span class="comment">     *      array[HigherDims..., Z, Y, X]</span></div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;<span class="comment">     * Fortran style:</span></div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;<span class="comment">     *      array[X, Y, Z, HigherDims...]</span></div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a5580270336a3055bb7477b227563ccf0">fill_layer_data</a>(T &amp;&amp;tensor, std::string name) <span class="keyword">const</span>;</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;<span class="comment">    /** Fill a tensor with a constant value</span></div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;<span class="comment">     * @param[in, out] tensor To be filled tensor.</span></div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;<span class="comment">     * @param[in]      value  Value to be assigned to all elements of the input tensor.</span></div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;<span class="comment">     * @note    @p value must be of the same type as the data type of @p tensor</span></div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> D&gt;</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#aa13fcfba9d7f0433db83255bd1f0638a">fill_tensor_value</a>(T &amp;&amp;tensor, D value) <span class="keyword">const</span>;</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;<span class="comment">    /** Fill a tensor with a given vector with static values.</span></div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;<span class="comment">     * @param[in, out] tensor To be filled tensor.</span></div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;<span class="comment">     * @param[in]      values A vector containing values</span></div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;<span class="comment">     * To cope with various size tensors, the vector size doens&#39;t have to be</span></div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;<span class="comment">     * the same as tensor&#39;s size. If the size of the tensor is larger than the vector,</span></div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;<span class="comment">     * the iterator the vector will keep iterating and wrap around. If the vector is</span></div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;<span class="comment">     * larger, values located after the required size won&#39;t be used.</span></div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> DataType&gt;</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a2671aad2f80990bde5be020d3089c194">fill_static_values</a>(T &amp;&amp;tensor, <span class="keyword">const</span> std::vector&lt;DataType&gt; &amp;values) <span class="keyword">const</span>;</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    <span class="comment">// Function type to generate a number to fill tensors.</span></div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> ResultType&gt;</div><div class="line"><a name="l00411"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a65b24fb0e719b699c557c2e0286b4c36">  411</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a65b24fb0e719b699c557c2e0286b4c36">GeneratorFunctionType</a> = std::function&lt;ResultType(void)&gt;;<span class="comment"></span></div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;<span class="comment">    /** Fill a tensor with a value generator function.</span></div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;<span class="comment">     * @param[in, out] tensor         To be filled tensor.</span></div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;<span class="comment">     * @param[in]      generate_value A function that generates values.</span></div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ResultType&gt;</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a94a0a4589d93586d4d6755553c45007d">fill_with_generator</a>(T &amp;&amp;tensor, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a65b24fb0e719b699c557c2e0286b4c36">GeneratorFunctionType&lt;ResultType&gt;</a> &amp;generate_value) <span class="keyword">const</span>;</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    <span class="comment">// Function prototype to convert between image formats.</span></div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    <span class="keyword">using</span> Converter = void (*)(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    <span class="comment">// Function prototype to extract a channel from an image.</span></div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <span class="keyword">using</span> Extractor = void (*)(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    <span class="comment">// Function prototype to load an image file.</span></div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    <span class="keyword">using</span> Loader = <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> (*)(<span class="keyword">const</span> std::string &amp;<a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac4cb5f95f1d720ef0cc94b74152cf50b">path</a>);</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    <span class="keyword">const</span> Converter &amp;get_converter(<a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> src, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>) <span class="keyword">const</span>;</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    <span class="keyword">const</span> Converter &amp;get_converter(<a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> src, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>) <span class="keyword">const</span>;</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    <span class="keyword">const</span> Converter &amp;get_converter(<a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> src, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>) <span class="keyword">const</span>;</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    <span class="keyword">const</span> Converter &amp;get_converter(<a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> src, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>) <span class="keyword">const</span>;</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    <span class="keyword">const</span> Extractor &amp;get_extractor(<a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format, <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a>) <span class="keyword">const</span>;</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    <span class="keyword">const</span> Loader &amp;get_loader(<span class="keyword">const</span> std::string &amp;extension) <span class="keyword">const</span>;</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;<span class="comment">    /** Creates a raw tensor from the specified image.</span></div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;<span class="comment">     * @param[in] name To be loaded image file.</span></div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;<span class="comment">     * @note If use_single_image is true @p name is ignored and the user image</span></div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;<span class="comment">     *       is loaded instead.</span></div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> load_image(<span class="keyword">const</span> std::string &amp;name) <span class="keyword">const</span>;</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;<span class="comment">    /** Provides a raw tensor for the specified image and format.</span></div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;<span class="comment">     * @param[in] name   Image file used to look up the raw tensor.</span></div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;<span class="comment">     * @param[in] format Format used to look up the raw tensor.</span></div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;<span class="comment">     * If the tensor has already been requested before the cached version will</span></div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;<span class="comment">     * be returned. Otherwise the tensor will be added to the cache.</span></div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;<span class="comment">     * @note If use_single_image is true @p name is ignored and the user image</span></div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;<span class="comment">     *       is loaded instead.</span></div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;find_or_create_raw_tensor(<span class="keyword">const</span> std::string &amp;name, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format) <span class="keyword">const</span>;</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;<span class="comment">    /** Provides a raw tensor for the specified image, format and channel.</span></div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;<span class="comment">     * @param[in] name    Image file used to look up the raw tensor.</span></div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;<span class="comment">     * @param[in] format  Format used to look up the raw tensor.</span></div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;<span class="comment">     * @param[in] channel Channel used to look up the raw tensor.</span></div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;<span class="comment">     * If the tensor has already been requested before the cached version will</span></div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;<span class="comment">     * be returned. Otherwise the tensor will be added to the cache.</span></div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;<span class="comment">     * @note If use_single_image is true @p name is ignored and the user image</span></div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;<span class="comment">     *       is loaded instead.</span></div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;find_or_create_raw_tensor(<span class="keyword">const</span> std::string &amp;name, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format, <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a> channel) <span class="keyword">const</span>;</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    <span class="keyword">mutable</span> <a class="code" href="classarm__compute_1_1test_1_1_tensor_cache.xhtml">TensorCache</a>             _cache{};</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    <span class="keyword">mutable</span> <a class="code" href="namespacearm__compute.xhtml#acded863dbfdd730829d4188d67eefcf0">arm_compute::Mutex</a>      _format_lock{};</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    <span class="keyword">mutable</span> <a class="code" href="namespacearm__compute.xhtml#acded863dbfdd730829d4188d67eefcf0">arm_compute::Mutex</a>      _channel_lock{};</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    <span class="keyword">const</span> std::string               _library_path;</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    std::random_device::result_type _seed;</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;};</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;<span class="keyword">namespace </span>detail</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;{</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00481"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1detail.xhtml#a8f88ff91d07f88724302b134e4cd7eac">  481</a></span>&#160;<span class="keyword">inline</span> std::vector&lt;std::pair&lt;T, T&gt;&gt; <a class="code" href="namespacearm__compute_1_1test_1_1detail.xhtml#a8f88ff91d07f88724302b134e4cd7eac">convert_range_pair</a>(<span class="keyword">const</span> std::vector&lt;AssetsLibrary::RangePair&gt; &amp;excluded_range_pairs)</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;{</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    std::vector&lt;std::pair&lt;T, T&gt;&gt; converted;</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    std::transform(excluded_range_pairs.begin(),</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;                   excluded_range_pairs.end(),</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;                   std::back_inserter(converted),</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;                   [](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a51733f705cc27b63c4be127eb50639c4">AssetsLibrary::RangePair</a> &amp; p)</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    {</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;        <span class="keywordflow">return</span> std::pair&lt;T, T&gt;(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(p.first), static_cast&lt;T&gt;(p.second));</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    });</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    <span class="keywordflow">return</span> converted;</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;}</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;<span class="comment">/* Read npy header and check the payload is suitable for the specified type and shape</span></div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;<span class="comment"> * @param[in] stream         ifstream of the npy file</span></div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;<span class="comment"> * @param[in] expect_typestr Expected typestr</span></div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;<span class="comment"> * @param[in] expect_shape   Shape of tensor expected to receive the data</span></div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;<span class="comment"> * @note Advances stream to the beginning of the data payload</span></div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1detail.xhtml#a40419c68846445199d5a02f2be253b0a">validate_npy_header</a>(std::ifstream &amp;stream, <span class="keyword">const</span> std::string &amp;expect_typestr, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;expect_shape);</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;} <span class="comment">// namespace detail</span></div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> D&gt;</div><div class="line"><a name="l00506"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ae139c07ceb794ec059efb92aa4c6fd9d">  506</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ae139c07ceb794ec059efb92aa4c6fd9d">AssetsLibrary::fill_borders_with_garbage</a>(T &amp;&amp;tensor, D &amp;&amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a756aeab6b5c217b924c3cc70222c975d">distribution</a>, std::random_device::result_type seed_offset)<span class="keyword"> const</span></div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_border_size.xhtml">PaddingSize</a> padding_size = tensor.padding();</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> window;</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    window.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(0, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(-padding_size.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">left</a>, tensor.shape()[0] + padding_size.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a78b0fed184c642b78f32fd34b228a5f9">right</a>, 1));</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    <span class="keywordflow">if</span>(tensor.shape().num_dimensions() &gt; 1)</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    {</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;        window.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(1, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(-padding_size.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">top</a>, tensor.shape()[1] + padding_size.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">bottom</a>, 1));</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    }</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    std::mt19937 gen(_seed + seed_offset);</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp; <span class="keywordtype">id</span>)</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    {</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;        <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a> = tensor.shape();</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;        <span class="comment">// If outside of valid region</span></div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;        <span class="keywordflow">if</span>(<span class="keywordtype">id</span>.x() &lt; 0 || <span class="keywordtype">id</span>.x() &gt;= static_cast&lt;int&gt;(shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">x</a>()) || <span class="keywordtype">id</span>.y() &lt; 0 || <span class="keywordtype">id</span>.y() &gt;= <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#ac4a1050be02b20b3f791b9a483f3abe2">y</a>()))</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;        {</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;            <span class="keyword">using</span> ResultType         = <span class="keyword">typename</span> std::remove_reference&lt;D&gt;::type::result_type;</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;            <span class="keyword">const</span> ResultType value   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a756aeab6b5c217b924c3cc70222c975d">distribution</a>(gen);</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;            <span class="keywordtype">void</span> *<span class="keyword">const</span>      out_ptr = tensor(<span class="keywordtype">id</span>);</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;            <a class="code" href="namespacearm__compute_1_1test.xhtml#a1e6934e95738573214c2ce1d6648d116">store_value_with_data_type</a>(out_ptr, value, tensor.data_type());</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;        }</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;    });</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;}</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> D&gt;</div><div class="line"><a name="l00535"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a6327330393eee13d12234267ab5d19d4">  535</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a6327330393eee13d12234267ab5d19d4">AssetsLibrary::fill_boxes</a>(T &amp;&amp;tensor, D &amp;&amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a756aeab6b5c217b924c3cc70222c975d">distribution</a>, std::random_device::result_type seed_offset)<span class="keyword"> const</span></div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;    <span class="keyword">using</span> DistributionType = <span class="keyword">typename</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">std::remove_reference&lt;D&gt;::type</a>;</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;    <span class="keyword">using</span> ResultType       = <span class="keyword">typename</span> DistributionType::result_type;</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;    std::mt19937   gen(_seed + seed_offset);</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>(tensor.shape());</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;    <span class="keyword">const</span> uint32_t num_boxes = tensor.num_elements() / 4;</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;    <span class="comment">// Iterate over all elements</span></div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    DistributionType size_dist{ ResultType(0.f), ResultType(1.f) };</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;    <span class="keywordflow">for</span>(uint32_t element_idx = 0; element_idx &lt; num_boxes * 4; element_idx += 4)</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    {</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;        <span class="keyword">const</span> ResultType delta   = size_dist(gen);</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;        <span class="keyword">const</span> ResultType <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a> = size_dist(gen);</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;        <span class="keyword">const</span> ResultType left    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a756aeab6b5c217b924c3cc70222c975d">distribution</a>(gen);</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;        <span class="keyword">const</span> ResultType top     = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a756aeab6b5c217b924c3cc70222c975d">distribution</a>(gen);</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;        <span class="keyword">const</span> ResultType right   = left + delta;</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;        <span class="keyword">const</span> ResultType bottom  = top + <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>;</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;        <span class="keyword">const</span> std::tuple&lt;ResultType, ResultType, ResultType, ResultType&gt; box(left, top, right, bottom);</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;        <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> x1              = <a class="code" href="namespacearm__compute_1_1test.xhtml#a24d8c0391cfa38e78969b6ad97c0ff09">index2coord</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>, element_idx);</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;        <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> y1              = <a class="code" href="namespacearm__compute_1_1test.xhtml#a24d8c0391cfa38e78969b6ad97c0ff09">index2coord</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>, element_idx + 1);</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;        <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> x2              = <a class="code" href="namespacearm__compute_1_1test.xhtml#a24d8c0391cfa38e78969b6ad97c0ff09">index2coord</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>, element_idx + 2);</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;        <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> y2              = <a class="code" href="namespacearm__compute_1_1test.xhtml#a24d8c0391cfa38e78969b6ad97c0ff09">index2coord</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>, element_idx + 3);</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;        ResultType &amp;target_value_x1 = <span class="keyword">reinterpret_cast&lt;</span>ResultType *<span class="keyword">&gt;</span>(tensor(x1))[0];</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;        ResultType &amp;target_value_y1 = <span class="keyword">reinterpret_cast&lt;</span>ResultType *<span class="keyword">&gt;</span>(tensor(y1))[0];</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;        ResultType &amp;target_value_x2 = <span class="keyword">reinterpret_cast&lt;</span>ResultType *<span class="keyword">&gt;</span>(tensor(x2))[0];</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;        ResultType &amp;target_value_y2 = <span class="keyword">reinterpret_cast&lt;</span>ResultType *<span class="keyword">&gt;</span>(tensor(y2))[0];</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;        <a class="code" href="namespacearm__compute_1_1test.xhtml#a1e6934e95738573214c2ce1d6648d116">store_value_with_data_type</a>(&amp;target_value_x1, std::get&lt;0&gt;(box), tensor.data_type());</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;        <a class="code" href="namespacearm__compute_1_1test.xhtml#a1e6934e95738573214c2ce1d6648d116">store_value_with_data_type</a>(&amp;target_value_y1, std::get&lt;1&gt;(box), tensor.data_type());</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;        <a class="code" href="namespacearm__compute_1_1test.xhtml#a1e6934e95738573214c2ce1d6648d116">store_value_with_data_type</a>(&amp;target_value_x2, std::get&lt;2&gt;(box), tensor.data_type());</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;        <a class="code" href="namespacearm__compute_1_1test.xhtml#a1e6934e95738573214c2ce1d6648d116">store_value_with_data_type</a>(&amp;target_value_y2, std::get&lt;3&gt;(box), tensor.data_type());</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;    }</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ae139c07ceb794ec059efb92aa4c6fd9d">fill_borders_with_garbage</a>(tensor, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a756aeab6b5c217b924c3cc70222c975d">distribution</a>, seed_offset);</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;}</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> D&gt;</div><div class="line"><a name="l00571"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_assets_library.xhtml#acd6a57c4cd51640fa1804b6bde75e149">  571</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">AssetsLibrary::fill</a>(std::vector&lt;T&gt; &amp;vec, D &amp;&amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a756aeab6b5c217b924c3cc70222c975d">distribution</a>, std::random_device::result_type seed_offset)<span class="keyword"> const</span></div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(vec.empty(), <span class="stringliteral">&quot;Vector must not be empty&quot;</span>);</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;    <span class="keyword">using</span> ResultType = <span class="keyword">typename</span> std::remove_reference&lt;D&gt;::type::result_type;</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;    std::mt19937 gen(_seed + seed_offset);</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i = 0; i &lt; vec.size(); ++i)</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;    {</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;        <span class="keyword">const</span> ResultType value = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a756aeab6b5c217b924c3cc70222c975d">distribution</a>(gen);</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;        vec[i] = value;</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;    }</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;}</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ResultType&gt;</div><div class="line"><a name="l00587"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a94a0a4589d93586d4d6755553c45007d">  587</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a94a0a4589d93586d4d6755553c45007d">AssetsLibrary::fill_with_generator</a>(T &amp;&amp;tensor, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a65b24fb0e719b699c557c2e0286b4c36">GeneratorFunctionType&lt;ResultType&gt;</a> &amp;generate_value)<span class="keyword"> const</span></div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span>  is_nhwc = tensor.data_layout() == <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>;</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>(tensor.shape());</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;    <span class="keywordflow">if</span>(is_nhwc)</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;    {</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;        <span class="comment">// Ensure that the equivalent tensors will be filled for both data layouts</span></div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a21c3e11887f3acf9284ca763372c7da0">permute</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>, <a class="code" href="namespacearm__compute.xhtml#a33e65be485104e2e9e69fca551d6f492">PermutationVector</a>(1<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">U</a>, 2<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">U</a>, 0<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">U</a>));</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;    }</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;    <span class="comment">// Iterate over all elements</span></div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;    <span class="keyword">const</span> uint32_t num_elements = tensor.num_elements();</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;    <span class="keywordflow">for</span>(uint32_t element_idx = 0; element_idx &lt; num_elements; ++element_idx)</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;    {</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;        <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> <span class="keywordtype">id</span> = <a class="code" href="namespacearm__compute_1_1test.xhtml#a24d8c0391cfa38e78969b6ad97c0ff09">index2coord</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>, element_idx);</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;        <span class="keywordflow">if</span>(is_nhwc)</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;        {</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;            <span class="comment">// Write in the correct id for permuted shapes</span></div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;            <a class="code" href="namespacearm__compute.xhtml#a21c3e11887f3acf9284ca763372c7da0">permute</a>(<span class="keywordtype">id</span>, <a class="code" href="namespacearm__compute.xhtml#a33e65be485104e2e9e69fca551d6f492">PermutationVector</a>(2<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">U</a>, 0<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">U</a>, 1<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">U</a>));</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;        }</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;        <span class="comment">// Iterate over all channels</span></div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> channel = 0; channel &lt; tensor.num_channels(); ++channel)</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;        {</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;            <span class="keyword">const</span> ResultType value        = generate_value();</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;            ResultType      &amp;target_value = <span class="keyword">reinterpret_cast&lt;</span>ResultType *<span class="keyword">&gt;</span>(tensor(<span class="keywordtype">id</span>))[channel];</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;            <a class="code" href="namespacearm__compute_1_1test.xhtml#a1e6934e95738573214c2ce1d6648d116">store_value_with_data_type</a>(&amp;target_value, value, tensor.data_type());</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;        }</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    }</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;}</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> D&gt;</div><div class="line"><a name="l00622"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">  622</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">AssetsLibrary::fill</a>(T &amp;&amp;tensor, D &amp;&amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a756aeab6b5c217b924c3cc70222c975d">distribution</a>, std::random_device::result_type seed_offset)<span class="keyword"> const</span></div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;    <span class="keyword">using</span> ResultType = <span class="keyword">typename</span> std::remove_reference&lt;D&gt;::type::result_type;</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;    std::mt19937 gen(_seed + seed_offset);</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a65b24fb0e719b699c557c2e0286b4c36">GeneratorFunctionType&lt;ResultType&gt;</a> number_generator = [&amp;]()</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;    {</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;        <span class="keyword">const</span> ResultType value = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a756aeab6b5c217b924c3cc70222c975d">distribution</a>(gen);</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;        <span class="keywordflow">return</span> value;</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;    };</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a94a0a4589d93586d4d6755553c45007d">fill_with_generator</a>(tensor, number_generator);</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ae139c07ceb794ec059efb92aa4c6fd9d">fill_borders_with_garbage</a>(tensor, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a756aeab6b5c217b924c3cc70222c975d">distribution</a>, seed_offset);</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;}</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> DataType&gt;</div><div class="line"><a name="l00638"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a2671aad2f80990bde5be020d3089c194">  638</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a2671aad2f80990bde5be020d3089c194">AssetsLibrary::fill_static_values</a>(T &amp;&amp;tensor, <span class="keyword">const</span> std::vector&lt;DataType&gt; &amp;values)<span class="keyword"> const</span></div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;    <span class="keyword">auto</span>                            it             = values.begin();</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a65b24fb0e719b699c557c2e0286b4c36">GeneratorFunctionType&lt;DataType&gt;</a> get_next_value = [&amp;]()</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;    {</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> value = *it;</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;        ++it;</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;        <span class="keywordflow">if</span>(it == values.end())</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;        {</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;            it = values.begin();</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;        }</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;        <span class="keywordflow">return</span> value;</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;    };</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a94a0a4589d93586d4d6755553c45007d">fill_with_generator</a>(tensor, get_next_value);</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;}</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> D&gt;</div><div class="line"><a name="l00658"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a72642223d82ac5d32582d66ba180fdfc">  658</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">AssetsLibrary::fill</a>(<a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;raw, D &amp;&amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a756aeab6b5c217b924c3cc70222c975d">distribution</a>, std::random_device::result_type seed_offset)<span class="keyword"> const</span></div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;    std::mt19937 gen(_seed + seed_offset);</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> = 0; <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> &lt; raw.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#ad7701a09a964eab360a8e51fa7ad2c16">size</a>(); <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> += raw.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a62b67b578f684c4d516843c9dea86a23">element_size</a>())</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;    {</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;        <span class="keyword">using</span> ResultType       = <span class="keyword">typename</span> std::remove_reference&lt;D&gt;::type::result_type;</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;        <span class="keyword">const</span> ResultType value = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a756aeab6b5c217b924c3cc70222c975d">distribution</a>(gen);</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;        <a class="code" href="namespacearm__compute_1_1test.xhtml#a1e6934e95738573214c2ce1d6648d116">store_value_with_data_type</a>(raw.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a4ae7e1f6885eb47c11062cc74e6a6e19">data</a>() + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, value, raw.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a>());</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;    }</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;}</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00672"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_assets_library.xhtml#afcd66ee0f0a1ad59ad21a4d548f83c21">  672</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">AssetsLibrary::fill</a>(T &amp;&amp;tensor, <span class="keyword">const</span> std::string &amp;<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format)<span class="keyword"> const</span></div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;raw = <span class="keyword">get</span>(<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a>, format);</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> = 0; <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> &lt; raw.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#ad7701a09a964eab360a8e51fa7ad2c16">size</a>(); <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> += raw.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a62b67b578f684c4d516843c9dea86a23">element_size</a>())</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;    {</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> <span class="keywordtype">id</span> = <a class="code" href="namespacearm__compute_1_1test.xhtml#a24d8c0391cfa38e78969b6ad97c0ff09">index2coord</a>(raw.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>(), <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> / raw.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a62b67b578f684c4d516843c9dea86a23">element_size</a>());</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#afb9ded5f49336ae503bb9f2035ea902b">RawTensor::value_type</a> *<span class="keyword">const</span> raw_ptr = raw.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a4ae7e1f6885eb47c11062cc74e6a6e19">data</a>() + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>;</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>                         out_ptr = <span class="keyword">static_cast&lt;</span><a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#afb9ded5f49336ae503bb9f2035ea902b">RawTensor::value_type</a> *<span class="keyword">&gt;</span>(tensor(<span class="keywordtype">id</span>));</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;        std::copy_n(raw_ptr, raw.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a62b67b578f684c4d516843c9dea86a23">element_size</a>(), out_ptr);</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;    }</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;}</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00687"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_assets_library.xhtml#aac6c6e6cbcb3d9e0330282f29a6a5e02">  687</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">AssetsLibrary::fill</a>(T &amp;&amp;tensor, <span class="keyword">const</span> std::string &amp;<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a>, <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a> channel)<span class="keyword"> const</span></div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">fill</a>(std::forward&lt;T&gt;(tensor), name, <a class="code" href="namespacearm__compute_1_1test.xhtml#aa337ab76176f3c4193642ac6de3a61cf">get_format_for_channel</a>(channel), channel);</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;}</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00693"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ab8fd0d2de26c842de05a6d15b28b518a">  693</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">AssetsLibrary::fill</a>(T &amp;&amp;tensor, <span class="keyword">const</span> std::string &amp;<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format, <a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">Channel</a> channel)<span class="keyword"> const</span></div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> &amp;raw = <span class="keyword">get</span>(<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a>, format, channel);</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> = 0; <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> &lt; raw.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#ad7701a09a964eab360a8e51fa7ad2c16">size</a>(); <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> += raw.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a62b67b578f684c4d516843c9dea86a23">element_size</a>())</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;    {</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> <span class="keywordtype">id</span> = <a class="code" href="namespacearm__compute_1_1test.xhtml#a24d8c0391cfa38e78969b6ad97c0ff09">index2coord</a>(raw.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>(), <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> / raw.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a62b67b578f684c4d516843c9dea86a23">element_size</a>());</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#afb9ded5f49336ae503bb9f2035ea902b">RawTensor::value_type</a> *<span class="keyword">const</span> raw_ptr = raw.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a4ae7e1f6885eb47c11062cc74e6a6e19">data</a>() + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>;</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>                         out_ptr = <span class="keyword">static_cast&lt;</span><a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#afb9ded5f49336ae503bb9f2035ea902b">RawTensor::value_type</a> *<span class="keyword">&gt;</span>(tensor(<span class="keywordtype">id</span>));</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;        std::copy_n(raw_ptr, raw.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a62b67b578f684c4d516843c9dea86a23">element_size</a>(), out_ptr);</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;    }</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;}</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00708"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a05e6db8fe58b0d75a552c226477a344e">  708</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">AssetsLibrary::fill</a>(T &amp;&amp;tensor, <a class="code" href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">RawTensor</a> raw)<span class="keyword"> const</span></div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> = 0; <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> &lt; raw.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#ad7701a09a964eab360a8e51fa7ad2c16">size</a>(); <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> += raw.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a62b67b578f684c4d516843c9dea86a23">element_size</a>())</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;    {</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> <span class="keywordtype">id</span> = <a class="code" href="namespacearm__compute_1_1test.xhtml#a24d8c0391cfa38e78969b6ad97c0ff09">index2coord</a>(raw.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>(), <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> / raw.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a62b67b578f684c4d516843c9dea86a23">element_size</a>());</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#afb9ded5f49336ae503bb9f2035ea902b">RawTensor::value_type</a> *<span class="keyword">const</span> raw_ptr = raw.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a4ae7e1f6885eb47c11062cc74e6a6e19">data</a>() + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>;</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>                         out_ptr = <span class="keyword">static_cast&lt;</span><a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#afb9ded5f49336ae503bb9f2035ea902b">RawTensor::value_type</a> *<span class="keyword">&gt;</span>(tensor(<span class="keywordtype">id</span>));</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;        std::copy_n(raw_ptr, raw.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a62b67b578f684c4d516843c9dea86a23">element_size</a>(), out_ptr);</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;    }</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;}</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00721"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a6bdf347bae60f8b5b4303776cfc48d68">  721</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a6bdf347bae60f8b5b4303776cfc48d68">AssetsLibrary::fill_tensor_uniform</a>(T &amp;&amp;tensor, std::random_device::result_type seed_offset)<span class="keyword"> const</span></div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;    <span class="keywordflow">switch</span>(tensor.data_type())</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;    {</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>:</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>:</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;        {</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;            std::uniform_int_distribution&lt;unsigned int&gt; distribution_u8(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;uint8_t&gt;::lowest</a>(), std::numeric_limits&lt;uint8_t&gt;::max());</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">fill</a>(tensor, distribution_u8, seed_offset);</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;        }</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">DataType::S8</a>:</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a5f007421a4becd11c0666c2058b0b36c">DataType::QSYMM8</a>:</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a34f500e941c4df30b870126ec868ebd5">DataType::QSYMM8_PER_CHANNEL</a>:</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">DataType::QASYMM8_SIGNED</a>:</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;        {</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;            std::uniform_int_distribution&lt;int&gt; distribution_s8(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;int8_t&gt;::lowest</a>(), std::numeric_limits&lt;int8_t&gt;::max());</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">fill</a>(tensor, distribution_s8, seed_offset);</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;        }</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">DataType::U16</a>:</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;        {</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;            std::uniform_int_distribution&lt;uint16_t&gt; distribution_u16(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;uint16_t&gt;::lowest</a>(), std::numeric_limits&lt;uint16_t&gt;::max());</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">fill</a>(tensor, distribution_u16, seed_offset);</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;        }</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>:</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">DataType::QSYMM16</a>:</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;        {</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;            std::uniform_int_distribution&lt;int16_t&gt; distribution_s16(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;int16_t&gt;::lowest</a>(), std::numeric_limits&lt;int16_t&gt;::max());</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">fill</a>(tensor, distribution_s16, seed_offset);</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;        }</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">DataType::U32</a>:</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;        {</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;            std::uniform_int_distribution&lt;uint32_t&gt; distribution_u32(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;uint32_t&gt;::lowest</a>(), std::numeric_limits&lt;uint32_t&gt;::max());</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">fill</a>(tensor, distribution_u32, seed_offset);</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;        }</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>:</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;        {</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;            std::uniform_int_distribution&lt;int32_t&gt; distribution_s32(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;int32_t&gt;::lowest</a>(), std::numeric_limits&lt;int32_t&gt;::max());</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">fill</a>(tensor, distribution_s32, seed_offset);</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;        }</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a31d65cccd6593e4101db93fb878abcaa">DataType::U64</a>:</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;        {</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;            std::uniform_int_distribution&lt;uint64_t&gt; distribution_u64(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;uint64_t&gt;::lowest</a>(), std::numeric_limits&lt;uint64_t&gt;::max());</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">fill</a>(tensor, distribution_u64, seed_offset);</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;        }</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a115dca124dc6423c7a400b8a8a0270cc">DataType::S64</a>:</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;        {</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;            std::uniform_int_distribution&lt;int64_t&gt; distribution_s64(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;int64_t&gt;::lowest</a>(), std::numeric_limits&lt;int64_t&gt;::max());</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">fill</a>(tensor, distribution_s64, seed_offset);</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;        }</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa4b19a06b5361a32b32759aa26ffdbab">DataType::BFLOAT16</a>:</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;        {</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;            <span class="comment">// It doesn&#39;t make sense to check [-inf, inf], so hard code it to a big number</span></div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;            <a class="code" href="classarm__compute_1_1utils_1_1uniform__real__distribution__16bit.xhtml">arm_compute::utils::uniform_real_distribution_16bit&lt;bfloat16&gt;</a> distribution_bf16{ -1000.f, 1000.f };</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">fill</a>(tensor, distribution_bf16, seed_offset);</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;        }</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">DataType::F16</a>:</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;        {</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;            <span class="comment">// It doesn&#39;t make sense to check [-inf, inf], so hard code it to a big number</span></div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;            <a class="code" href="classarm__compute_1_1utils_1_1uniform__real__distribution__16bit.xhtml">arm_compute::utils::uniform_real_distribution_16bit&lt;half&gt;</a> distribution_f16{ -100.f, 100.f };</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">fill</a>(tensor, distribution_f16, seed_offset);</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;        }</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>:</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;        {</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;            <span class="comment">// It doesn&#39;t make sense to check [-inf, inf], so hard code it to a big number</span></div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;            std::uniform_real_distribution&lt;float&gt; distribution_f32(-1000.f, 1000.f);</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">fill</a>(tensor, distribution_f32, seed_offset);</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;        }</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a1ad5f6f3069070ec4cbbdc94d5e61e0e">DataType::F64</a>:</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;        {</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;            <span class="comment">// It doesn&#39;t make sense to check [-inf, inf], so hard code it to a big number</span></div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;            std::uniform_real_distribution&lt;double&gt; distribution_f64(-1000.f, 1000.f);</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">fill</a>(tensor, distribution_f64, seed_offset);</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;        }</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6abd7ef6d4f35bc7d05c559b65032f15d1">DataType::SIZET</a>:</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;        {</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;            std::uniform_int_distribution&lt;size_t&gt; distribution_sizet(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;size_t&gt;::lowest</a>(), std::numeric_limits&lt;size_t&gt;::max());</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">fill</a>(tensor, distribution_sizet, seed_offset);</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;        }</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT SUPPORTED!&quot;</span>);</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;    }</div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;}</div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;</div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00818"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a7fd005cb98921bb25824629d659ea79d">  818</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a7fd005cb98921bb25824629d659ea79d">AssetsLibrary::fill_tensor_uniform_ranged</a>(T                                          &amp;&amp;tensor,</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;                                               std::random_device::result_type              seed_offset,</div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;                                               <span class="keyword">const</span> std::vector&lt;AssetsLibrary::RangePair&gt; &amp;excluded_range_pairs)<span class="keyword"> const</span></div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearm__compute_1_1utils_1_1random.xhtml">arm_compute::utils::random</a>;</div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;</div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;    <span class="keywordflow">switch</span>(tensor.data_type())</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;    {</div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>:</div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>:</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;        {</div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>                          converted_pairs = detail::convert_range_pair&lt;uint32_t&gt;(excluded_range_pairs);</div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;            <a class="code" href="classarm__compute_1_1utils_1_1random_1_1_ranged_uniform_distribution.xhtml">RangedUniformDistribution&lt;uint32_t&gt;</a> distribution_u8(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;uint8_t&gt;::lowest</a>(),</div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;                                                                std::numeric_limits&lt;uint8_t&gt;::max(),</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;                                                                converted_pairs);</div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">fill</a>(tensor, distribution_u8, seed_offset);</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;        }</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">DataType::S8</a>:</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a5f007421a4becd11c0666c2058b0b36c">DataType::QSYMM8</a>:</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;        {</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>                         converted_pairs = detail::convert_range_pair&lt;int32_t&gt;(excluded_range_pairs);</div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;            <a class="code" href="classarm__compute_1_1utils_1_1random_1_1_ranged_uniform_distribution.xhtml">RangedUniformDistribution&lt;int32_t&gt;</a> distribution_s8(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;int8_t&gt;::lowest</a>(),</div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;                                                               std::numeric_limits&lt;int8_t&gt;::max(),</div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;                                                               converted_pairs);</div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">fill</a>(tensor, distribution_s8, seed_offset);</div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;        }</div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">DataType::U16</a>:</div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;        {</div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>                          converted_pairs = detail::convert_range_pair&lt;uint16_t&gt;(excluded_range_pairs);</div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;            <a class="code" href="classarm__compute_1_1utils_1_1random_1_1_ranged_uniform_distribution.xhtml">RangedUniformDistribution&lt;uint16_t&gt;</a> distribution_u16(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;uint16_t&gt;::lowest</a>(),</div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;                                                                 std::numeric_limits&lt;uint16_t&gt;::max(),</div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;                                                                 converted_pairs);</div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">fill</a>(tensor, distribution_u16, seed_offset);</div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;        }</div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>:</div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">DataType::QSYMM16</a>:</div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;        {</div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>                         converted_pairs = detail::convert_range_pair&lt;int16_t&gt;(excluded_range_pairs);</div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;            <a class="code" href="classarm__compute_1_1utils_1_1random_1_1_ranged_uniform_distribution.xhtml">RangedUniformDistribution&lt;int16_t&gt;</a> distribution_s16(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;int16_t&gt;::lowest</a>(),</div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;                                                                std::numeric_limits&lt;int16_t&gt;::max(),</div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;                                                                converted_pairs);</div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">fill</a>(tensor, distribution_s16, seed_offset);</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;        }</div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">DataType::U32</a>:</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;        {</div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>                          converted_pairs = detail::convert_range_pair&lt;uint32_t&gt;(excluded_range_pairs);</div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;            <a class="code" href="classarm__compute_1_1utils_1_1random_1_1_ranged_uniform_distribution.xhtml">RangedUniformDistribution&lt;uint32_t&gt;</a> distribution_u32(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;uint32_t&gt;::lowest</a>(),</div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;                                                                 std::numeric_limits&lt;uint32_t&gt;::max(),</div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;                                                                 converted_pairs);</div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">fill</a>(tensor, distribution_u32, seed_offset);</div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;        }</div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>:</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;        {</div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>                         converted_pairs = detail::convert_range_pair&lt;int32_t&gt;(excluded_range_pairs);</div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;            <a class="code" href="classarm__compute_1_1utils_1_1random_1_1_ranged_uniform_distribution.xhtml">RangedUniformDistribution&lt;int32_t&gt;</a> distribution_s32(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;int32_t&gt;::lowest</a>(),</div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;                                                                std::numeric_limits&lt;int32_t&gt;::max(),</div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;                                                                converted_pairs);</div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">fill</a>(tensor, distribution_s32, seed_offset);</div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;        }</div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa4b19a06b5361a32b32759aa26ffdbab">DataType::BFLOAT16</a>:</div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;        {</div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;            <span class="comment">// It doesn&#39;t make sense to check [-inf, inf], so hard code it to a big number</span></div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>                          converted_pairs = detail::convert_range_pair&lt;bfloat16&gt;(excluded_range_pairs);</div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;            <a class="code" href="classarm__compute_1_1utils_1_1random_1_1_ranged_uniform_distribution.xhtml">RangedUniformDistribution&lt;bfloat16&gt;</a> distribution_bf16(<a class="code" href="namespacearm__gemm.xhtml#ac882ca3f500a8e83c76a8acc59831255">bfloat16</a>(-1000.f), <a class="code" href="namespacearm__gemm.xhtml#ac882ca3f500a8e83c76a8acc59831255">bfloat16</a>(1000.f), converted_pairs);</div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">fill</a>(tensor, distribution_bf16, seed_offset);</div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;        }</div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">DataType::F16</a>:</div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;        {</div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;            <span class="comment">// It doesn&#39;t make sense to check [-inf, inf], so hard code it to a big number</span></div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>                      converted_pairs = detail::convert_range_pair&lt;half&gt;(excluded_range_pairs);</div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;            <a class="code" href="classarm__compute_1_1utils_1_1random_1_1_ranged_uniform_distribution.xhtml">RangedUniformDistribution&lt;half&gt;</a> distribution_f16(<a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a>(-100.f), <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a>(100.f), converted_pairs);</div><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">fill</a>(tensor, distribution_f16, seed_offset);</div><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;        }</div><div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>:</div><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;        {</div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;            <span class="comment">// It doesn&#39;t make sense to check [-inf, inf], so hard code it to a big number</span></div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>                       converted_pairs = detail::convert_range_pair&lt;float&gt;(excluded_range_pairs);</div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;            <a class="code" href="classarm__compute_1_1utils_1_1random_1_1_ranged_uniform_distribution.xhtml">RangedUniformDistribution&lt;float&gt;</a> distribution_f32(-1000.f, 1000.f, converted_pairs);</div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">fill</a>(tensor, distribution_f32, seed_offset);</div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;        }</div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT SUPPORTED!&quot;</span>);</div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;    }</div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;}</div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;</div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> D&gt;</div><div class="line"><a name="l00913"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ab419bdd4d1b71e56517cbd99428e3740">  913</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a6bdf347bae60f8b5b4303776cfc48d68">AssetsLibrary::fill_tensor_uniform</a>(T &amp;&amp;tensor, std::random_device::result_type seed_offset, D low, D high)<span class="keyword"> const</span></div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;    <span class="keywordflow">switch</span>(tensor.data_type())</div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;    {</div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>:</div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>:</div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;        {</div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;            <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!(std::is_same&lt;uint8_t, D&gt;::value));</div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;            std::uniform_int_distribution&lt;uint32_t&gt; distribution_u8(low, high);</div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">fill</a>(tensor, distribution_u8, seed_offset);</div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;        }</div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">DataType::S8</a>:</div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a5f007421a4becd11c0666c2058b0b36c">DataType::QSYMM8</a>:</div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">DataType::QASYMM8_SIGNED</a>:</div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;        {</div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;            <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!(std::is_same&lt;int8_t, D&gt;::value));</div><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;            std::uniform_int_distribution&lt;int32_t&gt; distribution_s8(low, high);</div><div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">fill</a>(tensor, distribution_s8, seed_offset);</div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;        }</div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">DataType::U16</a>:</div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;        {</div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;            <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!(std::is_same&lt;uint16_t, D&gt;::value));</div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;            std::uniform_int_distribution&lt;uint16_t&gt; distribution_u16(low, high);</div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">fill</a>(tensor, distribution_u16, seed_offset);</div><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;        }</div><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">DataType::S16</a>:</div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">DataType::QSYMM16</a>:</div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;        {</div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;            <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!(std::is_same&lt;int16_t, D&gt;::value));</div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;            std::uniform_int_distribution&lt;int16_t&gt; distribution_s16(low, high);</div><div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">fill</a>(tensor, distribution_s16, seed_offset);</div><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;        }</div><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">DataType::U32</a>:</div><div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;        {</div><div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;            <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!(std::is_same&lt;uint32_t, D&gt;::value));</div><div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;            std::uniform_int_distribution&lt;uint32_t&gt; distribution_u32(low, high);</div><div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">fill</a>(tensor, distribution_u32, seed_offset);</div><div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;        }</div><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>:</div><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;        {</div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;            <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!(std::is_same&lt;int32_t, D&gt;::value));</div><div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;            std::uniform_int_distribution&lt;int32_t&gt; distribution_s32(low, high);</div><div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">fill</a>(tensor, distribution_s32, seed_offset);</div><div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;        }</div><div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a31d65cccd6593e4101db93fb878abcaa">DataType::U64</a>:</div><div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;        {</div><div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;            <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!(std::is_same&lt;uint64_t, D&gt;::value));</div><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;            std::uniform_int_distribution&lt;uint64_t&gt; distribution_u64(low, high);</div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">fill</a>(tensor, distribution_u64, seed_offset);</div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;        }</div><div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a115dca124dc6423c7a400b8a8a0270cc">DataType::S64</a>:</div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;        {</div><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;            <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!(std::is_same&lt;int64_t, D&gt;::value));</div><div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;            std::uniform_int_distribution&lt;int64_t&gt; distribution_s64(low, high);</div><div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">fill</a>(tensor, distribution_s64, seed_offset);</div><div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;        }</div><div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa4b19a06b5361a32b32759aa26ffdbab">DataType::BFLOAT16</a>:</div><div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;        {</div><div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;            <a class="code" href="classarm__compute_1_1utils_1_1uniform__real__distribution__16bit.xhtml">arm_compute::utils::uniform_real_distribution_16bit&lt;bfloat16&gt;</a> distribution_bf16{ float(low), float(high) };</div><div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">fill</a>(tensor, distribution_bf16, seed_offset);</div><div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;        }</div><div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">DataType::F16</a>:</div><div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;        {</div><div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;            <a class="code" href="classarm__compute_1_1utils_1_1uniform__real__distribution__16bit.xhtml">arm_compute::utils::uniform_real_distribution_16bit&lt;half&gt;</a> distribution_f16{ float(low), float(high) };</div><div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">fill</a>(tensor, distribution_f16, seed_offset);</div><div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;        }</div><div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>:</div><div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;        {</div><div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;            <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!(std::is_same&lt;float, D&gt;::value));</div><div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;            std::uniform_real_distribution&lt;float&gt; distribution_f32(low, high);</div><div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">fill</a>(tensor, distribution_f32, seed_offset);</div><div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;        }</div><div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a1ad5f6f3069070ec4cbbdc94d5e61e0e">DataType::F64</a>:</div><div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;        {</div><div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;            <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!(std::is_same&lt;double, D&gt;::value));</div><div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;            std::uniform_real_distribution&lt;double&gt; distribution_f64(low, high);</div><div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">fill</a>(tensor, distribution_f64, seed_offset);</div><div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;        }</div><div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6abd7ef6d4f35bc7d05c559b65032f15d1">DataType::SIZET</a>:</div><div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;        {</div><div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;            <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!(std::is_same&lt;size_t, D&gt;::value));</div><div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;            std::uniform_int_distribution&lt;size_t&gt; distribution_sizet(low, high);</div><div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;            <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">fill</a>(tensor, distribution_sizet, seed_offset);</div><div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;        }</div><div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT SUPPORTED!&quot;</span>);</div><div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;    }</div><div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;}</div><div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;</div><div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l01016"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a5580270336a3055bb7477b227563ccf0"> 1016</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a5580270336a3055bb7477b227563ccf0">AssetsLibrary::fill_layer_data</a>(T &amp;&amp;tensor, std::string <a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a>)<span class="keyword"> const</span></div><div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;<span class="preprocessor">#ifdef _WIN32</span></div><div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;    <span class="keyword">const</span> std::string path_separator(<span class="stringliteral">&quot;\\&quot;</span>);</div><div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;<span class="preprocessor">#else  </span><span class="comment">/* _WIN32 */</span><span class="preprocessor"></span></div><div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;    <span class="keyword">const</span> std::string path_separator(<span class="stringliteral">&quot;/&quot;</span>);</div><div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* _WIN32 */</span><span class="preprocessor"></span></div><div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;    <span class="keyword">const</span> std::string <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac4cb5f95f1d720ef0cc94b74152cf50b">path</a> = _library_path + path_separator + <a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a>;</div><div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;</div><div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;    <span class="comment">// Open file</span></div><div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;    std::ifstream stream(path, std::ios::in | std::ios::binary);</div><div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;    <span class="keywordflow">if</span>(!stream.good())</div><div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;    {</div><div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_file_not_found.xhtml">framework::FileNotFound</a>(<span class="stringliteral">&quot;Could not load npy file: &quot;</span> + path);</div><div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;    }</div><div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;</div><div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1detail.xhtml#a40419c68846445199d5a02f2be253b0a">validate_npy_header</a>(stream, tensor.data_type(), tensor.shape());</div><div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;</div><div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;    <span class="comment">// Read data</span></div><div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;    <span class="keywordflow">if</span>(tensor.padding().empty())</div><div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;    {</div><div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;        <span class="comment">// If tensor has no padding read directly from stream.</span></div><div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;        stream.read(reinterpret_cast&lt;char *&gt;(tensor.data()), tensor.size());</div><div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;    }</div><div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;    {</div><div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;        <span class="comment">// If tensor has padding accessing tensor elements through execution window.</span></div><div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;        <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> window;</div><div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;        window.<a class="code" href="classarm__compute_1_1_window.xhtml#a14470b4cb59140a1b6ff3b8f16c89ab6">use_tensor_dimensions</a>(tensor.shape());</div><div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;</div><div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp; <span class="keywordtype">id</span>)</div><div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;        {</div><div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;            stream.read(reinterpret_cast&lt;char *&gt;(tensor(<span class="keywordtype">id</span>)), tensor.element_size());</div><div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;        });</div><div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;    }</div><div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;}</div><div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;</div><div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> D&gt;</div><div class="line"><a name="l01054"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1_assets_library.xhtml#aa13fcfba9d7f0433db83255bd1f0638a"> 1054</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#aa13fcfba9d7f0433db83255bd1f0638a">AssetsLibrary::fill_tensor_value</a>(T &amp;&amp;tensor, D value)<span class="keyword"> const</span></div><div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_assets_library.xhtml#a6bdf347bae60f8b5b4303776cfc48d68">fill_tensor_uniform</a>(tensor, 0, value, value);</div><div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;}</div><div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;} <span class="comment">// namespace test</span></div><div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_TEST_TENSOR_LIBRARY_H */</span><span class="preprocessor"></span></div><div class="ttc" id="src_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a009469e4d9b8fce3b6d5e97d2077827d"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a></div><div class="ttdeci">__global uchar * offset(const Image *img, int x, int y)</div><div class="ttdoc">Get the pointer position of a Image. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01084">helpers.h:1084</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a3fdd42ea34070a54e696b3adc28c4be3"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">arm_compute::BorderSize::top</a></div><div class="ttdeci">unsigned int top</div><div class="ttdoc">top of the border </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00390">Types.h:390</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a45cde9abb508c62d67c3bb2b9bf566a5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">arm_compute::test::validation::shape</a></div><div class="ttdeci">shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">DFT.cpp:115</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_a62b67b578f684c4d516843c9dea86a23"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a62b67b578f684c4d516843c9dea86a23">arm_compute::test::SimpleTensor::element_size</a></div><div class="ttdeci">size_t element_size() const override</div><div class="ttdoc">Size of each element in the tensor in bytes. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00326">SimpleTensor.h:326</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_raw_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1_raw_tensor.xhtml">arm_compute::test::RawTensor</a></div><div class="ttdoc">Subclass of SimpleTensor using uint8_t as value type. </div><div class="ttdef"><b>Definition:</b> <a href="_raw_tensor_8h_source.xhtml#l00038">RawTensor.h:38</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_tensor_cache_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1_tensor_cache.xhtml">arm_compute::test::TensorCache</a></div><div class="ttdoc">Stores RawTensor categorised by the image they are created from including name, format and channel...</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_cache_8h_source.xhtml#l00042">TensorCache.h:42</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml">arm_compute::TensorShape</a></div><div class="ttdoc">Shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00039">TensorShape.h:39</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1random_1_1_ranged_uniform_distribution_xhtml"><div class="ttname"><a href="classarm__compute_1_1utils_1_1random_1_1_ranged_uniform_distribution.xhtml">arm_compute::utils::random::RangedUniformDistribution</a></div><div class="ttdoc">Uniform distribution within a given number of sub-ranges. </div><div class="ttdef"><b>Definition:</b> <a href="_random_8h_source.xhtml#l00044">Random.h:44</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_ad7701a09a964eab360a8e51fa7ad2c16"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#ad7701a09a964eab360a8e51fa7ad2c16">arm_compute::test::SimpleTensor::size</a></div><div class="ttdeci">size_t size() const override</div><div class="ttdoc">Total size of the tensor in bytes. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00338">SimpleTensor.h:338</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">arm_compute::DataType::QSYMM16</a></div><div class="ttdoc">quantized, symmetric fixed-point 16-bit number </div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml">arm_compute::BorderSize</a></div><div class="ttdoc">Container for 2D border size. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00282">Types.h:282</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_assets_library_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1_assets_library.xhtml">arm_compute::test::AssetsLibrary</a></div><div class="ttdoc">Factory class to create and fill tensors. </div><div class="ttdef"><b>Definition:</b> <a href="_assets_library_8h_source.xhtml#l00059">AssetsLibrary.h:59</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_assets_library_xhtml_ac4cb5f95f1d720ef0cc94b74152cf50b"><div class="ttname"><a href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac4cb5f95f1d720ef0cc94b74152cf50b">arm_compute::test::AssetsLibrary::path</a></div><div class="ttdeci">std::string path() const</div><div class="ttdoc">Path to assets directory used to initialise library. </div><div class="ttdef"><b>Definition:</b> <a href="_assets_library_8cpp_source.xhtml#l00260">AssetsLibrary.cpp:260</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_aa337ab76176f3c4193642ac6de3a61cf"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#aa337ab76176f3c4193642ac6de3a61cf">arm_compute::test::get_format_for_channel</a></div><div class="ttdeci">Format get_format_for_channel(Channel channel)</div><div class="ttdoc">Look up the format corresponding to a channel. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00144">Utils.h:144</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::Format::U8</a></div><div class="ttdoc">1 channel, 1 U8 per channel </div></div>
<div class="ttc" id="_window_8h_xhtml"><div class="ttname"><a href="_window_8h.xhtml">Window.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a73e2825fd61d349c5ca2f5313e3c8ea1"><div class="ttname"><a href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">arm_compute::half</a></div><div class="ttdeci">half_float::half half</div><div class="ttdoc">16-bit floating point type </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00048">Types.h:48</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1detail_xhtml_a8f88ff91d07f88724302b134e4cd7eac"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1detail.xhtml#a8f88ff91d07f88724302b134e4cd7eac">arm_compute::test::detail::convert_range_pair</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; T, T &gt; &gt; convert_range_pair(const std::vector&lt; AssetsLibrary::RangePair &gt; &amp;excluded_range_pairs)</div><div class="ttdef"><b>Definition:</b> <a href="_assets_library_8h_source.xhtml#l00481">AssetsLibrary.h:481</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::Format::F32</a></div><div class="ttdoc">1 channel, 1 F32 per channel </div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_a9a3e72153aeb3ed212e9c3698774e881"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a9a3e72153aeb3ed212e9c3698774e881">arm_compute::test::SimpleTensor::data_type</a></div><div class="ttdeci">DataType data_type() const override</div><div class="ttdoc">Data type of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00357">SimpleTensor.h:357</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a33e65be485104e2e9e69fca551d6f492"><div class="ttname"><a href="namespacearm__compute.xhtml#a33e65be485104e2e9e69fca551d6f492">arm_compute::PermutationVector</a></div><div class="ttdeci">Strides PermutationVector</div><div class="ttdoc">Permutation vector. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00051">Types.h:51</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1detail_xhtml_a40419c68846445199d5a02f2be253b0a"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1detail.xhtml#a40419c68846445199d5a02f2be253b0a">arm_compute::test::detail::validate_npy_header</a></div><div class="ttdeci">void validate_npy_header(std::ifstream &amp;stream, const std::string &amp;expect_typestr, const TensorShape &amp;expect_shape)</div><div class="ttdef"><b>Definition:</b> <a href="_assets_library_8cpp_source.xhtml#l00522">AssetsLibrary.cpp:522</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_1_1_dimension_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml">arm_compute::Window::Dimension</a></div><div class="ttdoc">Describe one of the image&amp;#39;s dimensions with a start, end and step. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00079">Window.h:79</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aef9ef3ebca4d2b64b6ec83808bafa5f2">arm_compute::Format::U16</a></div><div class="ttdoc">1 channel, 1 U16 per channel </div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a802ffcf1b49237efe5be8a314d3f3869"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">arm_compute::BorderSize::bottom</a></div><div class="ttdeci">unsigned int bottom</div><div class="ttdoc">bottom of the border </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00392">Types.h:392</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_acded863dbfdd730829d4188d67eefcf0"><div class="ttname"><a href="namespacearm__compute.xhtml#acded863dbfdd730829d4188d67eefcf0">arm_compute::Mutex</a></div><div class="ttdeci">std::mutex Mutex</div><div class="ttdoc">Wrapper of Mutex data-object. </div><div class="ttdef"><b>Definition:</b> <a href="_mutex_8h_source.xhtml#l00033">Mutex.h:33</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_aba5871b3e4a65d057ec1c28fce8b00ba"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">arm_compute::test::SimpleTensor::shape</a></div><div class="ttdeci">TensorShape shape() const override</div><div class="ttdoc">Shape of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00320">SimpleTensor.h:320</a></div></div>
<div class="ttc" id="_tensor_info_8h_xhtml"><div class="ttname"><a href="_tensor_info_8h.xhtml">TensorInfo.h</a></div></div>
<div class="ttc" id="_random_8h_xhtml"><div class="ttname"><a href="_random_8h.xhtml">Random.h</a></div></div>
<div class="ttc" id="gemm__interleaved_8hpp_xhtml_a6fbca3dca9ecb372332fc525529cc086"><div class="ttname"><a href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></div><div class="ttdeci">decltype(strategy::transforms) typedef type</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00259">gemm_interleaved.hpp:259</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_assets_library_xhtml_acc474b96886b5fd500460c7b25dc84fa"><div class="ttname"><a href="classarm__compute_1_1test_1_1_assets_library.xhtml#acc474b96886b5fd500460c7b25dc84fa">arm_compute::test::AssetsLibrary::get_image_shape</a></div><div class="ttdeci">TensorShape get_image_shape(const std::string &amp;name)</div><div class="ttdoc">Provides a tensor shape for the specified image. </div><div class="ttdef"><b>Definition:</b> <a href="_assets_library_8cpp_source.xhtml#l00466">AssetsLibrary.cpp:466</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_assets_library_xhtml_a51733f705cc27b63c4be127eb50639c4"><div class="ttname"><a href="classarm__compute_1_1test_1_1_assets_library.xhtml#a51733f705cc27b63c4be127eb50639c4">arm_compute::test::AssetsLibrary::RangePair</a></div><div class="ttdeci">std::pair&lt; float, float &gt; RangePair</div><div class="ttdef"><b>Definition:</b> <a href="_assets_library_8h_source.xhtml#l00062">AssetsLibrary.h:62</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_a73e352c61baaf9c1178da2d30105b04e"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">arm_compute::support::cpp11::lowest</a></div><div class="ttdeci">T lowest()</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00277">ToolchainSupport.h:277</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_a14470b4cb59140a1b6ff3b8f16c89ab6"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a14470b4cb59140a1b6ff3b8f16c89ab6">arm_compute::Window::use_tensor_dimensions</a></div><div class="ttdeci">void use_tensor_dimensions(const TensorShape &amp;shape, size_t first_dimension=Window::DimX)</div><div class="ttdoc">Use the tensor&amp;#39;s dimensions to fill the window dimensions. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00276">Window.inl:276</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_assets_library_xhtml_a6327330393eee13d12234267ab5d19d4"><div class="ttname"><a href="classarm__compute_1_1test_1_1_assets_library.xhtml#a6327330393eee13d12234267ab5d19d4">arm_compute::test::AssetsLibrary::fill_boxes</a></div><div class="ttdeci">void fill_boxes(T &amp;&amp;tensor, D &amp;&amp;distribution, std::random_device::result_type seed_offset) const</div><div class="ttdef"><b>Definition:</b> <a href="_assets_library_8h_source.xhtml#l00535">AssetsLibrary.h:535</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2022 Arm Limited. </div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">arm_compute::Format::F16</a></div><div class="ttdoc">1 channel, 1 F16 per channel </div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_assets_library_xhtml_aa13fcfba9d7f0433db83255bd1f0638a"><div class="ttname"><a href="classarm__compute_1_1test_1_1_assets_library.xhtml#aa13fcfba9d7f0433db83255bd1f0638a">arm_compute::test::AssetsLibrary::fill_tensor_value</a></div><div class="ttdeci">void fill_tensor_value(T &amp;&amp;tensor, D value) const</div><div class="ttdoc">Fill a tensor with a constant value. </div><div class="ttdef"><b>Definition:</b> <a href="_assets_library_8h_source.xhtml#l01054">AssetsLibrary.h:1054</a></div></div>
<div class="ttc" id="namespacearm__gemm_xhtml_ac882ca3f500a8e83c76a8acc59831255"><div class="ttname"><a href="namespacearm__gemm.xhtml#ac882ca3f500a8e83c76a8acc59831255">arm_gemm::bfloat16</a></div><div class="ttdeci">arm_compute::bfloat16 bfloat16</div><div class="ttdef"><b>Definition:</b> <a href="bfloat_8hpp_source.xhtml#l00030">bfloat.hpp:30</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a21c3e11887f3acf9284ca763372c7da0"><div class="ttname"><a href="namespacearm__compute.xhtml#a21c3e11887f3acf9284ca763372c7da0">arm_compute::permute</a></div><div class="ttdeci">void permute(Dimensions&lt; T &gt; &amp;dimensions, const PermutationVector &amp;perm)</div><div class="ttdoc">Permutes given Dimensions according to a permutation vector. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_helpers_8h_source.xhtml#l00125">Helpers.h:125</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::Format::S32</a></div><div class="ttdoc">1 channel, 1 S32 per channel </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58aa4b19a06b5361a32b32759aa26ffdbab"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa4b19a06b5361a32b32759aa26ffdbab">arm_compute::Format::BFLOAT16</a></div><div class="ttdoc">16-bit brain floating-point number </div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_aa87f8fc26981b0f3228a78c83b95b802"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">arm_compute::Dimensions::x</a></div><div class="ttdeci">T x() const</div><div class="ttdoc">Alias to access the size of the first dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00087">Dimensions.h:87</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a115dca124dc6423c7a400b8a8a0270cc"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a115dca124dc6423c7a400b8a8a0270cc">arm_compute::DataType::S64</a></div><div class="ttdoc">signed 64-bit number </div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1uniform__real__distribution__16bit_xhtml"><div class="ttname"><a href="classarm__compute_1_1utils_1_1uniform__real__distribution__16bit.xhtml">arm_compute::utils::uniform_real_distribution_16bit</a></div><div class="ttdoc">Specialized class to generate random non-zero FP16 values. </div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00254">Utils.h:254</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_assets_library_xhtml_a94a0a4589d93586d4d6755553c45007d"><div class="ttname"><a href="classarm__compute_1_1test_1_1_assets_library.xhtml#a94a0a4589d93586d4d6755553c45007d">arm_compute::test::AssetsLibrary::fill_with_generator</a></div><div class="ttdeci">void fill_with_generator(T &amp;&amp;tensor, const GeneratorFunctionType&lt; ResultType &gt; &amp;generate_value) const</div><div class="ttdoc">Fill a tensor with a value generator function. </div><div class="ttdef"><b>Definition:</b> <a href="_assets_library_8h_source.xhtml#l00587">AssetsLibrary.h:587</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_assets_library_xhtml_a7fd005cb98921bb25824629d659ea79d"><div class="ttname"><a href="classarm__compute_1_1test_1_1_assets_library.xhtml#a7fd005cb98921bb25824629d659ea79d">arm_compute::test::AssetsLibrary::fill_tensor_uniform_ranged</a></div><div class="ttdeci">void fill_tensor_uniform_ranged(T &amp;&amp;tensor, std::random_device::result_type seed_offset, const std::vector&lt; AssetsLibrary::RangePair &gt; &amp;excluded_range_pairs) const</div><div class="ttdoc">Fill a tensor with uniform distribution across the specified range. </div><div class="ttdef"><b>Definition:</b> <a href="_assets_library_8h_source.xhtml#l00818">AssetsLibrary.h:818</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a1e6934e95738573214c2ce1d6648d116"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a1e6934e95738573214c2ce1d6648d116">arm_compute::test::store_value_with_data_type</a></div><div class="ttdeci">void store_value_with_data_type(void *ptr, T value, DataType data_type)</div><div class="ttdoc">Write the value after casting the pointer according to data_type. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00251">Utils.h:251</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6abd7ef6d4f35bc7d05c559b65032f15d1"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6abd7ef6d4f35bc7d05c559b65032f15d1">arm_compute::DataType::SIZET</a></div><div class="ttdoc">size_t </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">arm_compute::Format::U32</a></div><div class="ttdoc">1 channel, 1 U32 per channel </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455a"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455a">arm_compute::Channel</a></div><div class="ttdeci">Channel</div><div class="ttdoc">Available channels. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00459">Types.h:459</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">arm_compute::Format</a></div><div class="ttdeci">Format</div><div class="ttdoc">Image colour formats. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00056">Types.h:56</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">arm_compute::DataType::QASYMM8</a></div><div class="ttdoc">quantized, asymmetric fixed-point 8-bit number unsigned </div></div>
<div class="ttc" id="_error_8h_xhtml_a0b0eb3235749a2909dc5a101afe59a1b"><div class="ttname"><a href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond, msg)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00456">Error.h:456</a></div></div>
<div class="ttc" id="classarm__compute_1_1_coordinates_xhtml"><div class="ttname"><a href="classarm__compute_1_1_coordinates.xhtml">arm_compute::Coordinates</a></div><div class="ttdoc">Coordinates of an item. </div><div class="ttdef"><b>Definition:</b> <a href="_coordinates_8h_source.xhtml#l00037">Coordinates.h:37</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_1_1cast_xhtml_a2ea3d1fc01a3a442900249ca182ffa5e"><div class="ttname"><a href="namespacearm__compute_1_1utils_1_1cast.xhtml#a2ea3d1fc01a3a442900249ca182ffa5e">arm_compute::utils::cast::U</a></div><div class="ttdeci">U</div><div class="ttdef"><b>Definition:</b> <a href="_saturate_cast_8h_source.xhtml#l00057">SaturateCast.h:57</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_afb9ded5f49336ae503bb9f2035ea902b"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#afb9ded5f49336ae503bb9f2035ea902b">arm_compute::test::SimpleTensor&lt; uint8_t &gt;::value_type</a></div><div class="ttdeci">uint8_t value_type</div><div class="ttdoc">Tensor value type. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00103">SimpleTensor.h:103</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_assets_library_xhtml_a5580270336a3055bb7477b227563ccf0"><div class="ttname"><a href="classarm__compute_1_1test_1_1_assets_library.xhtml#a5580270336a3055bb7477b227563ccf0">arm_compute::test::AssetsLibrary::fill_layer_data</a></div><div class="ttdeci">void fill_layer_data(T &amp;&amp;tensor, std::string name) const</div><div class="ttdoc">Fills the specified tensor with data loaded from .npy (numpy binary) in specified path...</div><div class="ttdef"><b>Definition:</b> <a href="_assets_library_8h_source.xhtml#l01016">AssetsLibrary.h:1016</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_assets_library_xhtml_ac186c860429337d470bccc138ed84423"><div class="ttname"><a href="classarm__compute_1_1test_1_1_assets_library.xhtml#ac186c860429337d470bccc138ed84423">arm_compute::test::AssetsLibrary::fill</a></div><div class="ttdeci">void fill(T &amp;&amp;tensor, D &amp;&amp;distribution, std::random_device::result_type seed_offset) const</div><div class="ttdoc">Fills the specified tensor with random values drawn from distribution. </div><div class="ttdef"><b>Definition:</b> <a href="_assets_library_8h_source.xhtml#l00622">AssetsLibrary.h:622</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_file_not_found_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_file_not_found.xhtml">arm_compute::test::framework::FileNotFound</a></div><div class="ttdoc">Error class for when some external assets are missing. </div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8h_source.xhtml#l00067">Exceptions.h:67</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_acd3d2bba51cb84d34dd7656ad2375a6e"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">arm_compute::Window::set</a></div><div class="ttdeci">void set(size_t dimension, const Dimension &amp;dim)</div><div class="ttdoc">Set the values of a given dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00049">Window.inl:49</a></div></div>
<div class="ttc" id="_n_e_batch_normalization_layer_kernel_8cpp_xhtml_a8f8f80d37794cde9472343e4487ba3eb"><div class="ttname"><a href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#a8f8f80d37794cde9472343e4487ba3eb">name</a></div><div class="ttdeci">const char * name</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00060">NEBatchNormalizationLayerKernel.cpp:60</a></div></div>
<div class="ttc" id="_error_8h_xhtml"><div class="ttname"><a href="_error_8h.xhtml">Error.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a756aeab6b5c217b924c3cc70222c975d"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a756aeab6b5c217b924c3cc70222c975d">arm_compute::test::validation::distribution</a></div><div class="ttdeci">std::uniform_real_distribution&lt; float &gt; distribution(-5.f, 5.f)</div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a24d8c0391cfa38e78969b6ad97c0ff09"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a24d8c0391cfa38e78969b6ad97c0ff09">arm_compute::test::index2coord</a></div><div class="ttdeci">Coordinates index2coord(const TensorShape &amp;shape, int index)</div><div class="ttdoc">Convert a linear index into n-dimensional coordinates. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00358">Utils.h:358</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a05374b750b0fc472c34ee61e6f028bba"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">arm_compute::BorderSize::left</a></div><div class="ttdeci">unsigned int left</div><div class="ttdoc">left of the border </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00393">Types.h:393</a></div></div>
<div class="ttc" id="_tensor_cache_8h_xhtml"><div class="ttname"><a href="_tensor_cache_8h.xhtml">TensorCache.h</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml_a78b0fed184c642b78f32fd34b228a5f9"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a78b0fed184c642b78f32fd34b228a5f9">arm_compute::BorderSize::right</a></div><div class="ttdeci">unsigned int right</div><div class="ttdoc">right of the border </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00391">Types.h:391</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6e0b0886efb94aec797f6b830329b72c">arm_compute::Format::S16</a></div><div class="ttdoc">1 channel, 1 S16 per channel </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a5f007421a4becd11c0666c2058b0b36c"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a5f007421a4becd11c0666c2058b0b36c">arm_compute::DataType::QSYMM8</a></div><div class="ttdoc">quantized, symmetric fixed-point 8-bit number </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a34f500e941c4df30b870126ec868ebd5"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a34f500e941c4df30b870126ec868ebd5">arm_compute::DataType::QSYMM8_PER_CHANNEL</a></div><div class="ttdoc">quantized, symmetric per channel fixed-point 8-bit number </div></div>
<div class="ttc" id="tests_2_utils_8h_xhtml"><div class="ttname"><a href="tests_2_utils_8h.xhtml">Utils.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_assets_library_xhtml_a2671aad2f80990bde5be020d3089c194"><div class="ttname"><a href="classarm__compute_1_1test_1_1_assets_library.xhtml#a2671aad2f80990bde5be020d3089c194">arm_compute::test::AssetsLibrary::fill_static_values</a></div><div class="ttdeci">void fill_static_values(T &amp;&amp;tensor, const std::vector&lt; DataType &gt; &amp;values) const</div><div class="ttdoc">Fill a tensor with a given vector with static values. </div><div class="ttdef"><b>Definition:</b> <a href="_assets_library_8h_source.xhtml#l00638">AssetsLibrary.h:638</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_assets_library_xhtml_a6bdf347bae60f8b5b4303776cfc48d68"><div class="ttname"><a href="classarm__compute_1_1test_1_1_assets_library.xhtml#a6bdf347bae60f8b5b4303776cfc48d68">arm_compute::test::AssetsLibrary::fill_tensor_uniform</a></div><div class="ttdeci">void fill_tensor_uniform(T &amp;&amp;tensor, std::random_device::result_type seed_offset) const</div><div class="ttdoc">Fill a tensor with uniform distribution. </div><div class="ttdef"><b>Definition:</b> <a href="_assets_library_8h_source.xhtml#l00721">AssetsLibrary.h:721</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_1_1random_xhtml"><div class="ttname"><a href="namespacearm__compute_1_1utils_1_1random.xhtml">arm_compute::utils::random</a></div><div class="ttdef"><b>Definition:</b> <a href="_random_8h_source.xhtml#l00037">Random.h:37</a></div></div>
<div class="ttc" id="_coordinates_8h_xhtml"><div class="ttname"><a href="_coordinates_8h.xhtml">Coordinates.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">arm_compute::DataLayout::NHWC</a></div><div class="ttdoc">Num samples, height, width, channels. </div></div>
<div class="ttc" id="_exceptions_8h_xhtml"><div class="ttname"><a href="_exceptions_8h.xhtml">Exceptions.h</a></div></div>
<div class="ttc" id="arm__compute_2core_2_helpers_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_helpers_8h.xhtml">Helpers.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5002bf7ec46d52971f9526e94172cfee"><div class="ttname"><a href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;... iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00077">Helpers.inl:77</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_ac4a1050be02b20b3f791b9a483f3abe2"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#ac4a1050be02b20b3f791b9a483f3abe2">arm_compute::Dimensions::y</a></div><div class="ttdeci">T y() const</div><div class="ttdoc">Alias to access the size of the second dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00092">Dimensions.h:92</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">arm_compute::DataType::QASYMM8_SIGNED</a></div><div class="ttdoc">quantized, asymmetric fixed-point 8-bit number signed </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a1ad5f6f3069070ec4cbbdc94d5e61e0e"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a1ad5f6f3069070ec4cbbdc94d5e61e0e">arm_compute::DataType::F64</a></div><div class="ttdoc">64-bit floating-point number </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a5f5b6c4337eac9e2e0046ca2304d80dc"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">arm_compute::test::validation::data_type</a></div><div class="ttdeci">data_type</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_cast_8cpp_source.xhtml#l00203">Cast.cpp:203</a></div></div>
<div class="ttc" id="_raw_tensor_8h_xhtml"><div class="ttname"><a href="_raw_tensor_8h.xhtml">RawTensor.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a31d65cccd6593e4101db93fb878abcaa"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a31d65cccd6593e4101db93fb878abcaa">arm_compute::DataType::U64</a></div><div class="ttdoc">unsigned 64-bit number </div></div>
<div class="ttc" id="arm__compute_2core_2_types_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">arm_compute::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdoc">Available data types. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00079">Types.h:79</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">arm_compute::DataType::S8</a></div><div class="ttdoc">signed 8-bit number </div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_assets_library_xhtml_ae139c07ceb794ec059efb92aa4c6fd9d"><div class="ttname"><a href="classarm__compute_1_1test_1_1_assets_library.xhtml#ae139c07ceb794ec059efb92aa4c6fd9d">arm_compute::test::AssetsLibrary::fill_borders_with_garbage</a></div><div class="ttdeci">void fill_borders_with_garbage(T &amp;&amp;tensor, D &amp;&amp;distribution, std::random_device::result_type seed_offset) const</div><div class="ttdoc">Puts garbage values all around the tensor for testing purposes. </div><div class="ttdef"><b>Definition:</b> <a href="_assets_library_8h_source.xhtml#l00506">AssetsLibrary.h:506</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_assets_library_xhtml_adb53338108890e6b7354e16a1e9ae716"><div class="ttname"><a href="classarm__compute_1_1test_1_1_assets_library.xhtml#adb53338108890e6b7354e16a1e9ae716">arm_compute::test::AssetsLibrary::AssetsLibrary</a></div><div class="ttdeci">AssetsLibrary(std::string path, std::random_device::result_type seed)</div><div class="ttdoc">Initialises the library with a path to the assets directory. </div><div class="ttdef"><b>Definition:</b> <a href="_assets_library_8cpp_source.xhtml#l00254">AssetsLibrary.cpp:254</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml">arm_compute::Window</a></div><div class="ttdoc">Describe a multidimensional execution window. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00039">Window.h:39</a></div></div>
<div class="ttc" id="_tensor_shape_8h_xhtml"><div class="ttname"><a href="_tensor_shape_8h.xhtml">TensorShape.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_assets_library_xhtml_a0a20fa200643e1e3aa4004375d9188f1"><div class="ttname"><a href="classarm__compute_1_1test_1_1_assets_library.xhtml#a0a20fa200643e1e3aa4004375d9188f1">arm_compute::test::AssetsLibrary::seed</a></div><div class="ttdeci">std::random_device::result_type seed() const</div><div class="ttdoc">Seed that is used to fill tensors with random values. </div><div class="ttdef"><b>Definition:</b> <a href="_assets_library_8cpp_source.xhtml#l00265">AssetsLibrary.cpp:265</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1quantization_xhtml_a552dc3787d7ea1675f3e4e8993501d58"><div class="ttname"><a href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">arm_compute::quantization::epsilon</a></div><div class="ttdeci">constexpr float epsilon</div><div class="ttdef"><b>Definition:</b> <a href="_asymm_helpers_8cpp_source.xhtml#l00037">AsymmHelpers.cpp:37</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_a4ae7e1f6885eb47c11062cc74e6a6e19"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a4ae7e1f6885eb47c11062cc74e6a6e19">arm_compute::test::SimpleTensor::data</a></div><div class="ttdeci">const T * data() const</div><div class="ttdoc">Constant pointer to the underlying buffer. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00418">SimpleTensor.h:418</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_assets_library_xhtml_a65b24fb0e719b699c557c2e0286b4c36"><div class="ttname"><a href="classarm__compute_1_1test_1_1_assets_library.xhtml#a65b24fb0e719b699c557c2e0286b4c36">arm_compute::test::AssetsLibrary::GeneratorFunctionType</a></div><div class="ttdeci">std::function&lt; ResultType(void)&gt; GeneratorFunctionType</div><div class="ttdef"><b>Definition:</b> <a href="_assets_library_8h_source.xhtml#l00411">AssetsLibrary.h:411</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="_assets_library_8h.xhtml">AssetsLibrary.h</a></li>
    <li class="footer">Generated on Thu Aug 18 2022 12:57:40 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
