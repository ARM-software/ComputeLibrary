<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute::quantization Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('namespacearm__compute_1_1quantization.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">arm_compute::quantization Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:aada9ec2ea42d767854b2b7545ffd310b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1quantization.xhtml#aada9ec2ea42d767854b2b7545ffd310b">calculate_quantized_multiplier</a> (float multiplier, int32_t *quant_multiplier, int32_t *shift, bool ignore_epsilon=false)</td></tr>
<tr class="memdesc:aada9ec2ea42d767854b2b7545ffd310b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate quantized representation of multiplier.  <a href="#aada9ec2ea42d767854b2b7545ffd310b">More...</a><br /></td></tr>
<tr class="separator:aada9ec2ea42d767854b2b7545ffd310b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a59887c93c2b70a4c0fb452ee94bcd1ef"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1quantization.xhtml#a59887c93c2b70a4c0fb452ee94bcd1ef">calculate_quantized_multiplier_less_than_one</a> (float multiplier, int32_t *quant_multiplier, int32_t *right_shift, bool ignore_epsilon=false)</td></tr>
<tr class="memdesc:a59887c93c2b70a4c0fb452ee94bcd1ef"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate quantized representation of multiplier with value less than one.  <a href="#a59887c93c2b70a4c0fb452ee94bcd1ef">More...</a><br /></td></tr>
<tr class="separator:a59887c93c2b70a4c0fb452ee94bcd1ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34f24bcb4a4017178a0fcfb2f6e2c954"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1quantization.xhtml#a34f24bcb4a4017178a0fcfb2f6e2c954">calculate_quantized_multiplier_greater_than_one</a> (float multiplier, int32_t *quantized_multiplier, int32_t *left_shift)</td></tr>
<tr class="memdesc:a34f24bcb4a4017178a0fcfb2f6e2c954"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate quantized representation of multiplier having value greater than one.  <a href="#a34f24bcb4a4017178a0fcfb2f6e2c954">More...</a><br /></td></tr>
<tr class="separator:a34f24bcb4a4017178a0fcfb2f6e2c954"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7c9cea57b791676637d2fda3637d340e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1quantization.xhtml#a7c9cea57b791676637d2fda3637d340e">calculate_quantized_multipliers</a> (const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;iq_info, const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;wq_info, const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;oq_info, <a class="el" href="structarm__compute_1_1_g_e_m_m_lowp_output_stage_info.xhtml">GEMMLowpOutputStageInfo</a> &amp;stage_info)</td></tr>
<tr class="memdesc:a7c9cea57b791676637d2fda3637d340e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate quantized representation of per-channel multipliers.  <a href="#a7c9cea57b791676637d2fda3637d340e">More...</a><br /></td></tr>
<tr class="separator:a7c9cea57b791676637d2fda3637d340e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8860c9932b57a5066c460ea310e1bc4"><td class="memItemLeft" align="right" valign="top">std::pair&lt; int, int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1quantization.xhtml#ab8860c9932b57a5066c460ea310e1bc4">get_min_max_values_from_quantized_data_type</a> (<a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> data_type)</td></tr>
<tr class="memdesc:ab8860c9932b57a5066c460ea310e1bc4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get minimum and maximum values for the input quantized data type.  <a href="#ab8860c9932b57a5066c460ea310e1bc4">More...</a><br /></td></tr>
<tr class="separator:ab8860c9932b57a5066c460ea310e1bc4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abeaefa3fdf7cf7c4ca6e2a69c4e7405b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1quantization.xhtml#abeaefa3fdf7cf7c4ca6e2a69c4e7405b">compute_quantized_multipliers_and_shifts</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *weights, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output, int32_t *output_multipliers_ptr, int32_t *output_shifts_ptr)</td></tr>
<tr class="memdesc:abeaefa3fdf7cf7c4ca6e2a69c4e7405b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute quantized per-channel multipliers and shifts.  <a href="#abeaefa3fdf7cf7c4ca6e2a69c4e7405b">More...</a><br /></td></tr>
<tr class="separator:abeaefa3fdf7cf7c4ca6e2a69c4e7405b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe3908fe41d9f2559f4a9eab1997fe61"><td class="memItemLeft" align="right" valign="top">int32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1quantization.xhtml#afe3908fe41d9f2559f4a9eab1997fe61">rounding_divide_by_pow2</a> (int32_t x, int exponent)</td></tr>
<tr class="memdesc:afe3908fe41d9f2559f4a9eab1997fe61"><td class="mdescLeft">&#160;</td><td class="mdescRight">Round to the nearest division by a power-of-two using exponent, copied from NEMath.  <a href="#afe3908fe41d9f2559f4a9eab1997fe61">More...</a><br /></td></tr>
<tr class="separator:afe3908fe41d9f2559f4a9eab1997fe61"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa703bf08de12606a393302bea059b796"><td class="memItemLeft" align="right" valign="top">int32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1quantization.xhtml#aa703bf08de12606a393302bea059b796">saturating_rounding_doubling_highmul</a> (int32_t a, int32_t b)</td></tr>
<tr class="memdesc:aa703bf08de12606a393302bea059b796"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute multiplication of two integers.  <a href="#aa703bf08de12606a393302bea059b796">More...</a><br /></td></tr>
<tr class="separator:aa703bf08de12606a393302bea059b796"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1dabc0d2dbb6015a29d5d50f3afa4a12"><td class="memItemLeft" align="right" valign="top">int32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1quantization.xhtml#a1dabc0d2dbb6015a29d5d50f3afa4a12">multiply_by_quantized_multiplier</a> (int32_t input, int32_t qmul, int32_t shift)</td></tr>
<tr class="memdesc:a1dabc0d2dbb6015a29d5d50f3afa4a12"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute the value multiplied by given quantized multiplier and shift.  <a href="#a1dabc0d2dbb6015a29d5d50f3afa4a12">More...</a><br /></td></tr>
<tr class="separator:a1dabc0d2dbb6015a29d5d50f3afa4a12"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a4651e527aae28ea6e3a3bbf491020d"><td class="memItemLeft" align="right" valign="top">int32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1quantization.xhtml#a9a4651e527aae28ea6e3a3bbf491020d">saturating_rounding_multiply_by_pow2</a> (int32_t exponent, int32_t v)</td></tr>
<tr class="memdesc:a9a4651e527aae28ea6e3a3bbf491020d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute the value multiplied the power-of-two.  <a href="#a9a4651e527aae28ea6e3a3bbf491020d">More...</a><br /></td></tr>
<tr class="separator:a9a4651e527aae28ea6e3a3bbf491020d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a950e9885276264349956c8f1b5b7454f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1quantization.xhtml#a950e9885276264349956c8f1b5b7454f">get_invsqrt_quantized_multiplier_exp</a> (int32_t input, int32_t reverse_shift, int32_t &amp;output_inv_sqrt, int32_t &amp;output_shift)</td></tr>
<tr class="memdesc:a950e9885276264349956c8f1b5b7454f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute quantized multiplier and shift for the inverse square root of input.  <a href="#a950e9885276264349956c8f1b5b7454f">More...</a><br /></td></tr>
<tr class="separator:a950e9885276264349956c8f1b5b7454f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:ab153bd5bebd2a695c5d2c79801d0abec"><td class="memItemLeft" align="right" valign="top">constexpr int64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1quantization.xhtml#ab153bd5bebd2a695c5d2c79801d0abec">fixed_point_one_Q0</a> = (1LL &lt;&lt; 31)</td></tr>
<tr class="separator:ab153bd5bebd2a695c5d2c79801d0abec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a552dc3787d7ea1675f3e4e8993501d58"><td class="memItemLeft" align="right" valign="top">constexpr float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a> = 0.00001f</td></tr>
<tr class="separator:a552dc3787d7ea1675f3e4e8993501d58"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="aada9ec2ea42d767854b2b7545ffd310b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aada9ec2ea42d767854b2b7545ffd310b">&#9670;&nbsp;</a></span>calculate_quantized_multiplier()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> calculate_quantized_multiplier </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>multiplier</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t *&#160;</td>
          <td class="paramname"><em>quant_multiplier</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t *&#160;</td>
          <td class="paramname"><em>shift</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>ignore_epsilon</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate quantized representation of multiplier. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">multiplier</td><td>Real multiplier. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">quant_multiplier</td><td>Integer multiplier. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">shift</td><td>bit shift. A negative value indicates a left shift, while a positive value indicates a right shift </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ignore_epsilon</td><td>When true, ignore pre-defined epsilon value. Defaults to false</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a status </dd></dl>

<p class="definition">Definition at line <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00039">39</a> of file <a class="el" href="_asymm_helpers_8cpp_source.xhtml">AsymmHelpers.cpp</a>.</p>

<p class="reference">References <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00089">calculate_quantized_multiplier_greater_than_one()</a>, and <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00053">calculate_quantized_multiplier_less_than_one()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00114">calculate_quantized_multipliers()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml#l00094">CLQLSTMLayer::CLQLSTMLayer()</a>, <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00179">compute_quantized_multipliers_and_shifts()</a>, <a class="el" href="_n_e_q_l_s_t_m_layer_normalization_kernel_8cpp_source.xhtml#l00084">NEQLSTMLayerNormalizationKernel::configure()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_normalization_kernel_8cpp_source.xhtml#l00088">CLQLSTMLayerNormalizationKernel::configure()</a>, <a class="el" href="_cl_direct_conv2d_kernel_8cpp_source.xhtml#l00147">ClDirectConv2dKernel::configure()</a>, <a class="el" href="_cl_direct_conv3d_kernel_8cpp_source.xhtml#l00092">ClDirectConv3dKernel::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_native_kernel_8cpp_source.xhtml#l00174">CLDepthwiseConvolutionLayerNativeKernel::configure()</a>, <a class="el" href="_n_e_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00060">NELSTMLayerQuantized::configure()</a>, <a class="el" href="_c_l_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00072">CLLSTMLayerQuantized::configure()</a>, <a class="el" href="_n_e_q_l_s_t_m_layer_8cpp_source.xhtml#l00214">NEQLSTMLayer::configure()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml#l00172">CLQLSTMLayer::configure()</a>, <a class="el" href="_convolution3d_8h_source.xhtml#l00049">arm_compute::test::convolution_3d::detail::convolution3d()</a>, <a class="el" href="conv3d_2neon_2quantized_8h_source.xhtml#l00040">arm_compute::cpu::directconv3d_quantized_neon_ndhwc()</a>, <a class="el" href="_cpu_pool2d_assembly_wrapper_kernel_8cpp_source.xhtml#l00183">CpuPool2dAssemblyWrapperKernel::is_configured()</a>, <a class="el" href="_n_e_q_l_s_t_m_layer_8cpp_source.xhtml#l00113">NEQLSTMLayer::NEQLSTMLayer()</a>, <a class="el" href="reference_2_q_l_s_t_m_layer_normalization_8cpp_source.xhtml#l00040">arm_compute::test::validation::reference::qlstm_layer_normalization()</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8cpp_source.xhtml#l00771">arm_compute::cpu::run_depthwise_quanitized8bit()</a>, <a class="el" href="_cpu_pool2d_assembly_wrapper_kernel_8cpp_source.xhtml#l00094">CpuPool2dAssemblyWrapperKernel::validate()</a>, <a class="el" href="_n_e_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00248">NELSTMLayerQuantized::validate()</a>, <a class="el" href="_c_l_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00280">CLLSTMLayerQuantized::validate()</a>, <a class="el" href="_n_e_q_l_s_t_m_layer_8cpp_source.xhtml#l00675">NEQLSTMLayer::validate()</a>, and <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml#l00603">CLQLSTMLayer::validate()</a>.</p>
<div class="fragment"><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keywordflow">if</span>(multiplier &gt;= 1.f)</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    {</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        Status status = <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a34f24bcb4a4017178a0fcfb2f6e2c954">calculate_quantized_multiplier_greater_than_one</a>(multiplier, quant_multiplier, shift);</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        *shift *= -1;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <span class="keywordflow">return</span> status;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    }</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    {</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a59887c93c2b70a4c0fb452ee94bcd1ef">calculate_quantized_multiplier_less_than_one</a>(multiplier, quant_multiplier, shift, ignore_epsilon);</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    }</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1quantization_xhtml_a34f24bcb4a4017178a0fcfb2f6e2c954"><div class="ttname"><a href="namespacearm__compute_1_1quantization.xhtml#a34f24bcb4a4017178a0fcfb2f6e2c954">arm_compute::quantization::calculate_quantized_multiplier_greater_than_one</a></div><div class="ttdeci">Status calculate_quantized_multiplier_greater_than_one(float multiplier, int32_t *quantized_multiplier, int32_t *left_shift)</div><div class="ttdoc">Calculate quantized representation of multiplier having value greater than one. </div><div class="ttdef"><b>Definition:</b> <a href="_asymm_helpers_8cpp_source.xhtml#l00089">AsymmHelpers.cpp:89</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1quantization_xhtml_a59887c93c2b70a4c0fb452ee94bcd1ef"><div class="ttname"><a href="namespacearm__compute_1_1quantization.xhtml#a59887c93c2b70a4c0fb452ee94bcd1ef">arm_compute::quantization::calculate_quantized_multiplier_less_than_one</a></div><div class="ttdeci">Status calculate_quantized_multiplier_less_than_one(float multiplier, int32_t *quant_multiplier, int32_t *right_shift, bool ignore_epsilon=false)</div><div class="ttdoc">Calculate quantized representation of multiplier with value less than one. </div><div class="ttdef"><b>Definition:</b> <a href="_asymm_helpers_8cpp_source.xhtml#l00053">AsymmHelpers.cpp:53</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a34f24bcb4a4017178a0fcfb2f6e2c954"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a34f24bcb4a4017178a0fcfb2f6e2c954">&#9670;&nbsp;</a></span>calculate_quantized_multiplier_greater_than_one()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> calculate_quantized_multiplier_greater_than_one </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>multiplier</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t *&#160;</td>
          <td class="paramname"><em>quantized_multiplier</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t *&#160;</td>
          <td class="paramname"><em>left_shift</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate quantized representation of multiplier having value greater than one. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">multiplier</td><td>Real multiplier. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">quantized_multiplier</td><td>Integer multiplier. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">left_shift</td><td>Left bit shift.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a status </dd></dl>

<p class="definition">Definition at line <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00089">89</a> of file <a class="el" href="_asymm_helpers_8cpp_source.xhtml">AsymmHelpers.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00296">ARM_COMPUTE_RETURN_ERROR_ON</a>, and <a class="el" href="_toolchain_support_8h_source.xhtml#l00184">arm_compute::support::cpp11::round()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00039">calculate_quantized_multiplier()</a>.</p>
<div class="fragment"><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;{</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(quantized_multiplier == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(left_shift == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(multiplier &lt; 1.f);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keywordtype">int</span>          shift_exp = 0;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">double</span> q         = std::frexp(multiplier, &amp;shift_exp);</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    *left_shift            = shift_exp;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keyword">auto</span> q_fixed           = <span class="keyword">static_cast&lt;</span>int64_t<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute.xhtml#aaae2b6b1c3f4404121346a4c27b22647">support::cpp11::round</a>(q * <a class="code" href="namespacearm__compute_1_1quantization.xhtml#ab153bd5bebd2a695c5d2c79801d0abec">fixed_point_one_Q0</a>));</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(q_fixed &gt; <a class="code" href="namespacearm__compute_1_1quantization.xhtml#ab153bd5bebd2a695c5d2c79801d0abec">fixed_point_one_Q0</a>);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keywordflow">if</span>(q_fixed == <a class="code" href="namespacearm__compute_1_1quantization.xhtml#ab153bd5bebd2a695c5d2c79801d0abec">fixed_point_one_Q0</a>)</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    {</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        q_fixed /= 2;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        ++*left_shift;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    }</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(*left_shift &lt; 0);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(q_fixed &gt; std::numeric_limits&lt;int32_t&gt;::max());</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    *quantized_multiplier = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(q_fixed);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keywordflow">return</span> Status{};</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a206d6e247e0957ac3dee45d27756fc25"><div class="ttname"><a href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true, an error is returned. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00296">Error.h:296</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_aaae2b6b1c3f4404121346a4c27b22647"><div class="ttname"><a href="namespacearm__compute.xhtml#aaae2b6b1c3f4404121346a4c27b22647">arm_compute::round</a></div><div class="ttdeci">int round(float x, RoundingPolicy rounding_policy)</div><div class="ttdoc">Return a rounded value of x. </div><div class="ttdef"><b>Definition:</b> <a href="_rounding_8cpp_source.xhtml#l00035">Rounding.cpp:35</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1quantization_xhtml_ab153bd5bebd2a695c5d2c79801d0abec"><div class="ttname"><a href="namespacearm__compute_1_1quantization.xhtml#ab153bd5bebd2a695c5d2c79801d0abec">arm_compute::quantization::fixed_point_one_Q0</a></div><div class="ttdeci">constexpr int64_t fixed_point_one_Q0</div><div class="ttdef"><b>Definition:</b> <a href="_asymm_helpers_8cpp_source.xhtml#l00036">AsymmHelpers.cpp:36</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a59887c93c2b70a4c0fb452ee94bcd1ef"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a59887c93c2b70a4c0fb452ee94bcd1ef">&#9670;&nbsp;</a></span>calculate_quantized_multiplier_less_than_one()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> calculate_quantized_multiplier_less_than_one </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>multiplier</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t *&#160;</td>
          <td class="paramname"><em>quant_multiplier</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t *&#160;</td>
          <td class="paramname"><em>right_shift</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>ignore_epsilon</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate quantized representation of multiplier with value less than one. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">multiplier</td><td>Real multiplier. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">quant_multiplier</td><td>Integer multiplier. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">right_shift</td><td>Right bit shift. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ignore_epsilon</td><td>When true, ignore pre-defined epsilon value. Defaults to false</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a status </dd></dl>

<p class="definition">Definition at line <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00053">53</a> of file <a class="el" href="_asymm_helpers_8cpp_source.xhtml">AsymmHelpers.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00296">ARM_COMPUTE_RETURN_ERROR_ON</a>, <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00037">epsilon</a>, and <a class="el" href="_toolchain_support_8h_source.xhtml#l00184">arm_compute::support::cpp11::round()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00039">calculate_quantized_multiplier()</a>, and <a class="el" href="neon__gemm__qasymm8_8cpp_source.xhtml#l00095">main()</a>.</p>
<div class="fragment"><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;{</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> internal_epsilon = ignore_epsilon ? 0.0f : <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(quant_multiplier == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(right_shift == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(multiplier &lt; -internal_epsilon);</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(multiplier &gt; 1.0f + internal_epsilon);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keywordtype">int</span>          shift_exp = 0;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">double</span> q         = std::frexp(multiplier, &amp;shift_exp);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    *right_shift           = -1 * shift_exp;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keyword">auto</span> q_fixed           = <span class="keyword">static_cast&lt;</span>int64_t<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute.xhtml#aaae2b6b1c3f4404121346a4c27b22647">support::cpp11::round</a>(q * <a class="code" href="namespacearm__compute_1_1quantization.xhtml#ab153bd5bebd2a695c5d2c79801d0abec">fixed_point_one_Q0</a>));</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(q_fixed &gt; <a class="code" href="namespacearm__compute_1_1quantization.xhtml#ab153bd5bebd2a695c5d2c79801d0abec">fixed_point_one_Q0</a>);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keywordflow">if</span>(q_fixed == <a class="code" href="namespacearm__compute_1_1quantization.xhtml#ab153bd5bebd2a695c5d2c79801d0abec">fixed_point_one_Q0</a>)</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    {</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        q_fixed /= 2;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        --*right_shift;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    }</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordflow">if</span>(ignore_epsilon &amp;&amp; *right_shift &gt; 31)</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    {</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        *right_shift = 0;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        q_fixed      = 0;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    }</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(*right_shift &lt; 0);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(q_fixed &gt; std::numeric_limits&lt;int32_t&gt;::max());</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    *quant_multiplier = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(q_fixed);</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keywordflow">return</span> Status{};</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a206d6e247e0957ac3dee45d27756fc25"><div class="ttname"><a href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true, an error is returned. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00296">Error.h:296</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_aaae2b6b1c3f4404121346a4c27b22647"><div class="ttname"><a href="namespacearm__compute.xhtml#aaae2b6b1c3f4404121346a4c27b22647">arm_compute::round</a></div><div class="ttdeci">int round(float x, RoundingPolicy rounding_policy)</div><div class="ttdoc">Return a rounded value of x. </div><div class="ttdef"><b>Definition:</b> <a href="_rounding_8cpp_source.xhtml#l00035">Rounding.cpp:35</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1quantization_xhtml_ab153bd5bebd2a695c5d2c79801d0abec"><div class="ttname"><a href="namespacearm__compute_1_1quantization.xhtml#ab153bd5bebd2a695c5d2c79801d0abec">arm_compute::quantization::fixed_point_one_Q0</a></div><div class="ttdeci">constexpr int64_t fixed_point_one_Q0</div><div class="ttdef"><b>Definition:</b> <a href="_asymm_helpers_8cpp_source.xhtml#l00036">AsymmHelpers.cpp:36</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1quantization_xhtml_a552dc3787d7ea1675f3e4e8993501d58"><div class="ttname"><a href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">arm_compute::quantization::epsilon</a></div><div class="ttdeci">constexpr float epsilon</div><div class="ttdef"><b>Definition:</b> <a href="_asymm_helpers_8cpp_source.xhtml#l00037">AsymmHelpers.cpp:37</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7c9cea57b791676637d2fda3637d340e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7c9cea57b791676637d2fda3637d340e">&#9670;&nbsp;</a></span>calculate_quantized_multipliers()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a> calculate_quantized_multipliers </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>iq_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>wq_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>oq_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_g_e_m_m_lowp_output_stage_info.xhtml">GEMMLowpOutputStageInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>stage_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate quantized representation of per-channel multipliers. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">iq_info</td><td>Input quantization info. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">wq_info</td><td>Weights quantization info. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">oq_info</td><td>Output quantization info. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">stage_info</td><td>GemmLowp output stage info</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a status </dd></dl>

<p class="definition">Definition at line <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00114">114</a> of file <a class="el" href="_asymm_helpers_8cpp_source.xhtml">AsymmHelpers.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00296">ARM_COMPUTE_RETURN_ERROR_ON</a>, <a class="el" href="_error_8h_source.xhtml#l00204">ARM_COMPUTE_RETURN_ON_ERROR</a>, <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00039">calculate_quantized_multiplier()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l02224">GEMMLowpOutputStageInfo::gemmlowp_multiplier</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l02228">GEMMLowpOutputStageInfo::gemmlowp_multipliers</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l02225">GEMMLowpOutputStageInfo::gemmlowp_shift</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l02229">GEMMLowpOutputStageInfo::gemmlowp_shifts</a>, and <a class="el" href="_quantization_info_8h_source.xhtml#l00126">QuantizationInfo::scale()</a>.</p>
<div class="fragment"><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;{</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(iq_info.scale().empty());</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(wq_info.scale().empty());</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(oq_info.scale().empty());</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> size = wq_info.scale().size();</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keyword">auto</span> &amp;quant_multipliers = stage_info.gemmlowp_multipliers;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keyword">auto</span> &amp;quant_shifts      = stage_info.gemmlowp_shifts;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    quant_multipliers.resize(size);</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    quant_shifts.resize(size);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> &amp;w_scales = wq_info.scale();</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> i_scale  = iq_info.scale().at(0);</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> o_scale  = oq_info.scale().at(0);</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; size; ++i)</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    {</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span> multiplier       = i_scale * w_scales[i] / o_scale;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        int32_t     quant_multiplier = 0;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        int32_t     quant_shift      = 0;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="namespacearm__compute_1_1quantization.xhtml#aada9ec2ea42d767854b2b7545ffd310b">calculate_quantized_multiplier</a>(multiplier, &amp;quant_multiplier, &amp;quant_shift));</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        quant_multipliers[i] = quant_multiplier;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        quant_shifts[i]      = quant_shift;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    }</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="comment">// Legacy part</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    stage_info.gemmlowp_shift      = quant_shifts[0];</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    stage_info.gemmlowp_multiplier = quant_multipliers[0];</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keywordflow">return</span> Status{};</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a8a1e1c105f0bdaf37db408c7cfcb77a4"><div class="ttname"><a href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ON_ERROR(status)</div><div class="ttdoc">Checks if a status contains an error and returns it. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00204">Error.h:204</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1quantization_xhtml_aada9ec2ea42d767854b2b7545ffd310b"><div class="ttname"><a href="namespacearm__compute_1_1quantization.xhtml#aada9ec2ea42d767854b2b7545ffd310b">arm_compute::quantization::calculate_quantized_multiplier</a></div><div class="ttdeci">Status calculate_quantized_multiplier(float multiplier, int32_t *quant_multiplier, int32_t *shift, bool ignore_epsilon=false)</div><div class="ttdoc">Calculate quantized representation of multiplier. </div><div class="ttdef"><b>Definition:</b> <a href="_asymm_helpers_8cpp_source.xhtml#l00039">AsymmHelpers.cpp:39</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a206d6e247e0957ac3dee45d27756fc25"><div class="ttname"><a href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true, an error is returned. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00296">Error.h:296</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="abeaefa3fdf7cf7c4ca6e2a69c4e7405b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abeaefa3fdf7cf7c4ca6e2a69c4e7405b">&#9670;&nbsp;</a></span>compute_quantized_multipliers_and_shifts()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void compute_quantized_multipliers_and_shifts </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t *&#160;</td>
          <td class="paramname"><em>output_multipliers_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t *&#160;</td>
          <td class="paramname"><em>output_shifts_ptr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Compute quantized per-channel multipliers and shifts. </p>
<p>As many multipliers and shifts as output channels are computed. If weights are not quantized per-channel, multipliers and shifts will end up being the same for each channel.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input tensor info. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">weights</td><td>Weights tensor info. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">output</td><td>Output tensor info. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output_multipliers_ptr</td><td>Pointer to the buffer where to store per-channel multipliers. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output_shifts_ptr</td><td>Pointer to the buffer where to store per-channel shifts.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>min and max values for the quantized data type </dd></dl>

<p class="definition">Definition at line <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00179">179</a> of file <a class="el" href="_asymm_helpers_8cpp_source.xhtml">AsymmHelpers.cpp</a>.</p>

<p class="reference">References <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00039">calculate_quantized_multiplier()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo::quantization_info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00066">UniformQuantizationInfo::scale</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00126">QuantizationInfo::scale()</a>, and <a class="el" href="_quantization_info_8h_source.xhtml#l00150">QuantizationInfo::uniform()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_gemm_conv2d_8cpp_source.xhtml#l00162">ClGemmConv2d::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_8cpp_source.xhtml#l00344">CLDepthwiseConvolutionLayer::prepare()</a>, and <a class="el" href="_cl_gemm_conv2d_8cpp_source.xhtml#l00349">ClGemmConv2d::validate()</a>.</p>
<div class="fragment"><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;{</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo iq_info = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;quantization_info().uniform();</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keyword">const</span> QuantizationInfo        wq_info = weights-&gt;quantization_info();</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo oq_info = output-&gt;quantization_info().uniform();</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_filters = wq_info.scale().size();</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; num_filters; ++i)</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    {</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        int32_t     output_multiplier = 0;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        int32_t     output_shift      = 0;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span> multiplier        = iq_info.scale * wq_info.scale()[i] / oq_info.scale;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        <a class="code" href="namespacearm__compute_1_1quantization.xhtml#aada9ec2ea42d767854b2b7545ffd310b">calculate_quantized_multiplier</a>(multiplier, &amp;output_multiplier, &amp;output_shift);</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        output_multipliers_ptr[i] = output_multiplier;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        output_shifts_ptr[i]      = output_shift;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    }</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1quantization_xhtml_aada9ec2ea42d767854b2b7545ffd310b"><div class="ttname"><a href="namespacearm__compute_1_1quantization.xhtml#aada9ec2ea42d767854b2b7545ffd310b">arm_compute::quantization::calculate_quantized_multiplier</a></div><div class="ttdeci">Status calculate_quantized_multiplier(float multiplier, int32_t *quant_multiplier, int32_t *shift, bool ignore_epsilon=false)</div><div class="ttdoc">Calculate quantized representation of multiplier. </div><div class="ttdef"><b>Definition:</b> <a href="_asymm_helpers_8cpp_source.xhtml#l00039">AsymmHelpers.cpp:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">LSTMLayerQuantized.cpp:486</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a950e9885276264349956c8f1b5b7454f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a950e9885276264349956c8f1b5b7454f">&#9670;&nbsp;</a></span>get_invsqrt_quantized_multiplier_exp()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void get_invsqrt_quantized_multiplier_exp </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>reverse_shift</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t &amp;&#160;</td>
          <td class="paramname"><em>output_inv_sqrt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t &amp;&#160;</td>
          <td class="paramname"><em>output_shift</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Compute quantized multiplier and shift for the inverse square root of input. </p>
<p>Using 3-bit fixed point and 5 iteration of Newton-Raphson method.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input to use </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">reverse_shift</td><td>-1 to reverse the shift direction </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output_inv_sqrt</td><td>Quantized multiplier for inverse square root </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output_shift</td><td>Shift for inverse square root </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00257">257</a> of file <a class="el" href="_asymm_helpers_8cpp_source.xhtml">AsymmHelpers.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00217">rounding_divide_by_pow2()</a>, <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00203">saturating_rounding_doubling_highmul()</a>, and <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00231">saturating_rounding_multiply_by_pow2()</a>.</p>

<p class="reference">Referenced by <a class="el" href="reference_2_q_l_s_t_m_layer_normalization_8cpp_source.xhtml#l00040">arm_compute::test::validation::reference::qlstm_layer_normalization()</a>, and <a class="el" href="_n_e_q_l_s_t_m_layer_normalization_kernel_8cpp_source.xhtml#l00163">NEQLSTMLayerNormalizationKernel::run()</a>.</p>
<div class="fragment"><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;{</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> &lt; 0);</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> &lt;= 1)</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    {</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        <span class="comment">// dealing the inputs (0 and 1) separately to avoid overflow</span></div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        output_inv_sqrt = std::numeric_limits&lt;std::int32_t&gt;::max();</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        output_shift    = 0;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    }</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <span class="comment">// prepare input for fixed point operation and compute shift value</span></div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    output_shift = 11;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <span class="keywordflow">while</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> &gt;= (1 &lt;&lt; 29))</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    {</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> /= 4;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        ++output_shift;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    }</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <span class="keyword">const</span> uint32_t max_left_shift_bits       = __builtin_clz(static_cast&lt;uint32_t&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>)) - 1;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <span class="keyword">const</span> uint32_t max_left_shift_bits_pairs = max_left_shift_bits / 2;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    <span class="keyword">const</span> uint32_t left_shift_bit_pairs      = max_left_shift_bits_pairs - 1;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    output_shift -= left_shift_bit_pairs;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> &lt;&lt;= 2 * left_shift_bit_pairs;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <span class="comment">// Calculation in fixed point domain with 3 integer bits.</span></div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <span class="keyword">using</span> FixedPointRawType                    = int32_t;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    constexpr uint32_t fixedpoint_position     = 3;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    constexpr uint32_t fixedpoint_int_position = <span class="keyword">sizeof</span>(FixedPointRawType) * 8 - 1 - fixedpoint_position;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <span class="keyword">using</span> FixedPoint3                          = FixedPointRawType;</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    <span class="keyword">using</span> FixedPoint0                          = FixedPointRawType;</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <span class="comment">// fixed point representation of input divided by 2 and 1.5 for Newton-Raphson iteration</span></div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    <span class="keyword">const</span> FixedPoint3 fixedpoint_input      = (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> &gt;&gt; 1);</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <span class="keyword">const</span> FixedPoint3 fixedpoint_half_input = <a class="code" href="namespacearm__compute_1_1quantization.xhtml#afe3908fe41d9f2559f4a9eab1997fe61">rounding_divide_by_pow2</a>(fixedpoint_input, 1);</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <span class="keyword">const</span> FixedPoint3 fixedpoint_half_three = (0x1 &lt;&lt; fixedpoint_int_position) + (0x1 &lt;&lt; (fixedpoint_int_position - 1));</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <span class="comment">// initial guess (1) in fixed point representation</span></div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    FixedPoint3 x = 0x1 &lt;&lt; fixedpoint_int_position;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <span class="comment">// multiplication of two fixed point numbers, defined for readability</span></div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <span class="keyword">auto</span> fixed_point_mul = [](FixedPointRawType a, FixedPointRawType <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>) -&gt; FixedPointRawType</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    {</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1quantization.xhtml#aa703bf08de12606a393302bea059b796">saturating_rounding_doubling_highmul</a>(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    };</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <span class="comment">// rescaling of fixed point to have dst_bit integer bits, defined for readability</span></div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <span class="keyword">auto</span> fixed_point_rescale = [](FixedPointRawType a, uint32_t src_bit, uint32_t dst_bit) -&gt; FixedPointRawType</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    {</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        <span class="keyword">const</span> uint32_t exponent = src_bit - dst_bit;</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a9a4651e527aae28ea6e3a3bbf491020d">saturating_rounding_multiply_by_pow2</a>(exponent, a);</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    };</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    <span class="comment">// 5 iterations of Newton-Raphson method for inverse square root - 1.5 * x_n = input/2 * (x_n)^3</span></div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    constexpr int32_t num_iteration = 5;</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    <span class="keywordflow">for</span>(int32_t i = 0; i &lt; num_iteration; ++i)</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    {</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> x3 = fixed_point_rescale(fixed_point_mul(fixed_point_mul(x, x), x), 9, fixedpoint_position);</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        x             = fixed_point_rescale(fixed_point_mul(fixedpoint_half_three, x) - fixed_point_mul(fixedpoint_half_input, x3), 6, fixedpoint_position);</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    }</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <span class="comment">// fixed point representation of sqrt(1/2)</span></div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    <span class="keyword">const</span> FixedPoint0 fixedpoint_half_sqrt_2 = 1518500250;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    x                                        = fixed_point_mul(fixedpoint_half_sqrt_2, x);</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    output_inv_sqrt                          = x;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <span class="keywordflow">if</span>(output_shift &lt; 0)</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    {</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        output_inv_sqrt &lt;&lt;= -output_shift;</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        output_shift = 0;</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    }</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    <span class="comment">// convert right shift to left shift</span></div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    output_shift *= reverse_shift;</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">LSTMLayerQuantized.cpp:486</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1quantization_xhtml_aa703bf08de12606a393302bea059b796"><div class="ttname"><a href="namespacearm__compute_1_1quantization.xhtml#aa703bf08de12606a393302bea059b796">arm_compute::quantization::saturating_rounding_doubling_highmul</a></div><div class="ttdeci">int32_t saturating_rounding_doubling_highmul(int32_t a, int32_t b)</div><div class="ttdoc">Compute multiplication of two integers. </div><div class="ttdef"><b>Definition:</b> <a href="_asymm_helpers_8cpp_source.xhtml#l00203">AsymmHelpers.cpp:203</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1quantization_xhtml_afe3908fe41d9f2559f4a9eab1997fe61"><div class="ttname"><a href="namespacearm__compute_1_1quantization.xhtml#afe3908fe41d9f2559f4a9eab1997fe61">arm_compute::quantization::rounding_divide_by_pow2</a></div><div class="ttdeci">int32_t rounding_divide_by_pow2(int32_t x, int exponent)</div><div class="ttdoc">Round to the nearest division by a power-of-two using exponent, copied from NEMath. </div><div class="ttdef"><b>Definition:</b> <a href="_asymm_helpers_8cpp_source.xhtml#l00217">AsymmHelpers.cpp:217</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1quantization_xhtml_a9a4651e527aae28ea6e3a3bbf491020d"><div class="ttname"><a href="namespacearm__compute_1_1quantization.xhtml#a9a4651e527aae28ea6e3a3bbf491020d">arm_compute::quantization::saturating_rounding_multiply_by_pow2</a></div><div class="ttdeci">int32_t saturating_rounding_multiply_by_pow2(int32_t exponent, int32_t v)</div><div class="ttdoc">Compute the value multiplied the power-of-two. </div><div class="ttdef"><b>Definition:</b> <a href="_asymm_helpers_8cpp_source.xhtml#l00231">AsymmHelpers.cpp:231</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab8860c9932b57a5066c460ea310e1bc4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab8860c9932b57a5066c460ea310e1bc4">&#9670;&nbsp;</a></span>get_min_max_values_from_quantized_data_type()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::pair&lt; int, int &gt; get_min_max_values_from_quantized_data_type </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>data_type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get minimum and maximum values for the input quantized data type. </p>
<dl class="section return"><dt>Returns</dt><dd>min and max values for the quantized data type </dd></dl>

<p class="definition">Definition at line <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00151">151</a> of file <a class="el" href="_asymm_helpers_8cpp_source.xhtml">AsymmHelpers.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00352">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3b989c6b5398b3b9538ad103a324205e">arm_compute::QASYMM16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">arm_compute::QASYMM8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">arm_compute::QASYMM8_SIGNED</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">arm_compute::QSYMM16</a>, and <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a5f007421a4becd11c0666c2058b0b36c">arm_compute::QSYMM8</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_quantize_kernel_8cpp_source.xhtml#l00069">ClQuantizeKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_by_fixed_point_kernel_8cpp_source.xhtml#l00085">ClGemmLowpQuantizeDownInt32ScaleByFixedPointKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_kernel_8cpp_source.xhtml#l00085">ClGemmLowpQuantizeDownInt32ScaleKernel::configure()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_normalization_kernel_8cpp_source.xhtml#l00088">CLQLSTMLayerNormalizationKernel::configure()</a>, and <a class="el" href="_cpu_gemm_lowp_quantize_down_int32_scale_kernel_8cpp_source.xhtml#l00262">CpuGemmLowpQuantizeDownInt32ScaleKernel::configure()</a>.</p>
<div class="fragment"><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;{</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keywordtype">int</span> min_quant_val = 0;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="keywordtype">int</span> max_quant_val = 0;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="keywordflow">switch</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>)</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    {</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM8:</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            min_quant_val = std::numeric_limits&lt;uint8_t&gt;::min();</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            max_quant_val = std::numeric_limits&lt;uint8_t&gt;::max();</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM8:</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM8_SIGNED:</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            min_quant_val = std::numeric_limits&lt;int8_t&gt;::min();</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            max_quant_val = std::numeric_limits&lt;int8_t&gt;::max();</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="keywordflow">case</span> DataType::QASYMM16:</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            min_quant_val = std::numeric_limits&lt;uint16_t&gt;::min();</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            max_quant_val = std::numeric_limits&lt;uint16_t&gt;::max();</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <span class="keywordflow">case</span> DataType::QSYMM16:</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            min_quant_val = std::numeric_limits&lt;int16_t&gt;::min();</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            max_quant_val = std::numeric_limits&lt;int16_t&gt;::max();</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported data type&quot;</span>);</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    }</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keywordflow">return</span> std::make_pair(min_quant_val, max_quant_val);</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a5f5b6c4337eac9e2e0046ca2304d80dc"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">arm_compute::test::validation::data_type</a></div><div class="ttdeci">data_type</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_cast_8cpp_source.xhtml#l00203">Cast.cpp:203</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1dabc0d2dbb6015a29d5d50f3afa4a12"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1dabc0d2dbb6015a29d5d50f3afa4a12">&#9670;&nbsp;</a></span>multiply_by_quantized_multiplier()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int32_t multiply_by_quantized_multiplier </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>qmul</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>shift</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Compute the value multiplied by given quantized multiplier and shift. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Target value to multiply. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">qmul</td><td>Quantized multipler </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">shift</td><td>Left bit shift</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The multiplied value </dd></dl>

<p class="definition">Definition at line <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00224">224</a> of file <a class="el" href="_asymm_helpers_8cpp_source.xhtml">AsymmHelpers.cpp</a>.</p>

<p class="reference">References <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00217">rounding_divide_by_pow2()</a>, and <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00203">saturating_rounding_doubling_highmul()</a>.</p>

<p class="reference">Referenced by <a class="el" href="reference_2_q_l_s_t_m_layer_normalization_8cpp_source.xhtml#l00040">arm_compute::test::validation::reference::qlstm_layer_normalization()</a>, and <a class="el" href="_n_e_q_l_s_t_m_layer_normalization_kernel_8cpp_source.xhtml#l00163">NEQLSTMLayerNormalizationKernel::run()</a>.</p>
<div class="fragment"><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;{</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> left_shift  = shift &gt; 0 ? shift : 0;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> right_shift = shift &gt; 0 ? 0 : -shift;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1quantization.xhtml#afe3908fe41d9f2559f4a9eab1997fe61">rounding_divide_by_pow2</a>(<a class="code" href="namespacearm__compute_1_1quantization.xhtml#aa703bf08de12606a393302bea059b796">saturating_rounding_doubling_highmul</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a> * (1 &lt;&lt; left_shift), qmul), right_shift);</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">LSTMLayerQuantized.cpp:486</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1quantization_xhtml_aa703bf08de12606a393302bea059b796"><div class="ttname"><a href="namespacearm__compute_1_1quantization.xhtml#aa703bf08de12606a393302bea059b796">arm_compute::quantization::saturating_rounding_doubling_highmul</a></div><div class="ttdeci">int32_t saturating_rounding_doubling_highmul(int32_t a, int32_t b)</div><div class="ttdoc">Compute multiplication of two integers. </div><div class="ttdef"><b>Definition:</b> <a href="_asymm_helpers_8cpp_source.xhtml#l00203">AsymmHelpers.cpp:203</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1quantization_xhtml_afe3908fe41d9f2559f4a9eab1997fe61"><div class="ttname"><a href="namespacearm__compute_1_1quantization.xhtml#afe3908fe41d9f2559f4a9eab1997fe61">arm_compute::quantization::rounding_divide_by_pow2</a></div><div class="ttdeci">int32_t rounding_divide_by_pow2(int32_t x, int exponent)</div><div class="ttdoc">Round to the nearest division by a power-of-two using exponent, copied from NEMath. </div><div class="ttdef"><b>Definition:</b> <a href="_asymm_helpers_8cpp_source.xhtml#l00217">AsymmHelpers.cpp:217</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="afe3908fe41d9f2559f4a9eab1997fe61"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afe3908fe41d9f2559f4a9eab1997fe61">&#9670;&nbsp;</a></span>rounding_divide_by_pow2()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int32_t rounding_divide_by_pow2 </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>exponent</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Round to the nearest division by a power-of-two using exponent, copied from NEMath. </p>
<dl class="section note"><dt>Note</dt><dd>This function calculates the following expression: (x + 2^n -1 ) / 2^n where n = exponent</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>Element to divide. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">exponent</td><td>Integer value used to round to nearest division by a power-of-two</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the nearest division by a power-of-two using exponent </dd></dl>

<p class="definition">Definition at line <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00217">217</a> of file <a class="el" href="_asymm_helpers_8cpp_source.xhtml">AsymmHelpers.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00257">get_invsqrt_quantized_multiplier_exp()</a>, <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00224">multiply_by_quantized_multiplier()</a>, and <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00231">saturating_rounding_multiply_by_pow2()</a>.</p>
<div class="fragment"><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;{</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keyword">const</span> int32_t mask      = (1 &lt;&lt; exponent) - 1;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <span class="keyword">const</span> int32_t threshold = (mask &gt;&gt; 1) + (x &lt; 0 ? 1 : 0);</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <span class="keywordflow">return</span> (x &gt;&gt; exponent) + ((x &amp; mask) &gt; threshold ? 1 : 0);</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aa703bf08de12606a393302bea059b796"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa703bf08de12606a393302bea059b796">&#9670;&nbsp;</a></span>saturating_rounding_doubling_highmul()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int32_t saturating_rounding_doubling_highmul </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Compute multiplication of two integers. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">a</td><td>One integer to multiply </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">b</td><td>Another integer to multiply</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The multiplied value </dd></dl>

<p class="definition">Definition at line <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00203">203</a> of file <a class="el" href="_asymm_helpers_8cpp_source.xhtml">AsymmHelpers.cpp</a>.</p>

<p class="reference">References <a class="el" href="_toolchain_support_8h_source.xhtml#l00315">arm_compute::support::cpp11::signbit()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00257">get_invsqrt_quantized_multiplier_exp()</a>, and <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00224">multiply_by_quantized_multiplier()</a>.</p>
<div class="fragment"><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;{</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="keywordtype">bool</span>    overflow = a == <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> &amp;&amp; a == std::numeric_limits&lt;int32_t&gt;::min();</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    int64_t a_64(a);</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    int64_t b_64(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    int64_t ab_64               = a_64 * b_64;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span>  is_positive_or_zero =</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        a == 0 || <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> == 0 ||</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        (<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ae77474c2a053d0a9a019efd154a49893">std::signbit</a>(static_cast&lt;double&gt;(a)) == <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ae77474c2a053d0a9a019efd154a49893">std::signbit</a>(static_cast&lt;double&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>)));</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    int32_t nudge               = is_positive_or_zero ? (1 &lt;&lt; 30) : (1 - (1 &lt;&lt; 30));</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    int32_t ab_x2_high32        = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>((ab_64 + nudge) / (1ll &lt;&lt; 31));</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="keywordflow">return</span> overflow ? std::numeric_limits&lt;int32_t&gt;::max() : ab_x2_high32;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_ae77474c2a053d0a9a019efd154a49893"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ae77474c2a053d0a9a019efd154a49893">arm_compute::support::cpp11::signbit</a></div><div class="ttdeci">bool signbit(T value)</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00315">ToolchainSupport.h:315</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a9a4651e527aae28ea6e3a3bbf491020d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9a4651e527aae28ea6e3a3bbf491020d">&#9670;&nbsp;</a></span>saturating_rounding_multiply_by_pow2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int32_t saturating_rounding_multiply_by_pow2 </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>exponent</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>v</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Compute the value multiplied the power-of-two. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">exponent</td><td>Exponent used to calculate power-of-two </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">v</td><td>Target value to multiply</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The multiplied value </dd></dl>

<p class="definition">Definition at line <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00231">231</a> of file <a class="el" href="_asymm_helpers_8cpp_source.xhtml">AsymmHelpers.cpp</a>.</p>

<p class="reference">References <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00217">rounding_divide_by_pow2()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00257">get_invsqrt_quantized_multiplier_exp()</a>.</p>
<div class="fragment"><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;{</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="keywordflow">if</span>(exponent == 0)</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    {</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        <span class="keywordflow">return</span> v;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    }</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(exponent &lt; 0)</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    {</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1quantization.xhtml#afe3908fe41d9f2559f4a9eab1997fe61">rounding_divide_by_pow2</a>(v, -exponent);</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    }</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    {</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        constexpr <span class="keyword">auto</span> min   = std::numeric_limits&lt;int32_t&gt;::min();</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        constexpr <span class="keyword">auto</span> max   = std::numeric_limits&lt;int32_t&gt;::max();</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>     width = <span class="keyword">sizeof</span>(int32_t) * 8;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        <span class="keyword">const</span> int32_t threshold = ((1 &lt;&lt; (width - 1 - exponent)) - 1);</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        <span class="keywordtype">bool</span>          pos_mask  = v &gt; threshold;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        <span class="keywordtype">bool</span>          neg_mask  = v &lt; -threshold;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        int32_t       result    = v &lt;&lt; exponent;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        result                  = pos_mask ? max : result;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        result                  = neg_mask ? min : result;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    }</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1quantization_xhtml_afe3908fe41d9f2559f4a9eab1997fe61"><div class="ttname"><a href="namespacearm__compute_1_1quantization.xhtml#afe3908fe41d9f2559f4a9eab1997fe61">arm_compute::quantization::rounding_divide_by_pow2</a></div><div class="ttdeci">int32_t rounding_divide_by_pow2(int32_t x, int exponent)</div><div class="ttdoc">Round to the nearest division by a power-of-two using exponent, copied from NEMath. </div><div class="ttdef"><b>Definition:</b> <a href="_asymm_helpers_8cpp_source.xhtml#l00217">AsymmHelpers.cpp:217</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a id="a552dc3787d7ea1675f3e4e8993501d58"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a552dc3787d7ea1675f3e4e8993501d58">&#9670;&nbsp;</a></span>epsilon</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">constexpr float epsilon = 0.00001f</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00037">37</a> of file <a class="el" href="_asymm_helpers_8cpp_source.xhtml">AsymmHelpers.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_builder_8cpp_source.xhtml#l00148">GraphBuilder::add_batch_normalization_node()</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00555">GraphBuilder::add_l2_normalize_node()</a>, <a class="el" href="reference_2_batch_normalization_layer_8cpp_source.xhtml#l00040">arm_compute::test::validation::reference::batch_normalization_layer()</a>, <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00053">calculate_quantized_multiplier_less_than_one()</a>, <a class="el" href="_n_e_mean_std_dev_normalization_kernel_8cpp_source.xhtml#l00131">NEMeanStdDevNormalizationKernel::configure()</a>, <a class="el" href="_n_e_fuse_batch_normalization_kernel_8cpp_source.xhtml#l00220">NEFuseBatchNormalizationKernel::configure()</a>, <a class="el" href="_c_l_mean_std_dev_normalization_kernel_8cpp_source.xhtml#l00070">CLMeanStdDevNormalizationKernel::configure()</a>, <a class="el" href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00314">NEBatchNormalizationLayerKernel::configure()</a>, <a class="el" href="_c_l_l2_normalize_layer_kernel_8cpp_source.xhtml#l00085">CLL2NormalizeLayerKernel::configure()</a>, <a class="el" href="_n_e_instance_normalization_layer_8cpp_source.xhtml#l00041">NEInstanceNormalizationLayer::configure()</a>, <a class="el" href="_c_l_fuse_batch_normalization_kernel_8cpp_source.xhtml#l00117">CLFuseBatchNormalizationKernel::configure()</a>, <a class="el" href="_c_l_batch_normalization_layer_kernel_8cpp_source.xhtml#l00121">CLBatchNormalizationLayerKernel::configure()</a>, <a class="el" href="_function_helpers_8h_source.xhtml#l00177">arm_compute::graph::backends::detail::create_batch_normalization_layer()</a>, <a class="el" href="_function_helpers_8h_source.xhtml#l00222">arm_compute::graph::backends::detail::create_fused_convolution_batch_normalization_layer()</a>, <a class="el" href="_function_helpers_8h_source.xhtml#l00649">arm_compute::graph::backends::detail::create_fused_convolution_batch_normalization_with_post_op()</a>, <a class="el" href="_function_helpers_8h_source.xhtml#l00279">arm_compute::graph::backends::detail::create_fused_depthwise_convolution_batch_normalization_layer()</a>, <a class="el" href="_function_helpers_8h_source.xhtml#l01283">arm_compute::graph::backends::detail::create_l2_normalize_layer()</a>, <a class="el" href="_assets_library_8h_source.xhtml#l00535">AssetsLibrary::fill_boxes()</a>, <a class="el" href="core_2_n_e_o_n_2kernels_2batchnormalization_2impl_2_n_e_o_n_2fp32_8cpp_source.xhtml#l00135">arm_compute::cpu::fp32_neon_batch_normalization()</a>, <a class="el" href="reference_2_fuse_batch_normalization_8cpp_source.xhtml#l00071">arm_compute::test::validation::reference::fuse_batch_normalization_conv_layer()</a>, <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00640">arm_compute::graph::detail::fuse_convolution_batch_normalization_with_post_ops()</a>, <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00082">arm_compute::graph::detail::fuse_convolution_with_batch_normalization()</a>, <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00162">arm_compute::graph::detail::fuse_depthwise_convolution_with_batch_normalization()</a>, <a class="el" href="fuse__batch__normalization_2generic_2impl_8cpp_source.xhtml#l00031">arm_compute::cpu::fused_batch_normalization_conv()</a>, <a class="el" href="cpu_2kernels_2fuse__batch__normalization_2generic_2fp32_8cpp_source.xhtml#l00031">arm_compute::cpu::fused_batch_normalization_conv_f32()</a>, <a class="el" href="fuse__batch__normalization_2nchw_2all_8cpp_source.xhtml#l00128">arm_compute::cpu::fused_batch_normalization_dwc_nchw_f32()</a>, <a class="el" href="fuse__batch__normalization_2nhwc_2neon_2impl_8cpp_source.xhtml#l00031">arm_compute::cpu::fused_batch_normalization_dwc_nhwc()</a>, <a class="el" href="cpu_2kernels_2fuse__batch__normalization_2nhwc_2neon_2fp32_8cpp_source.xhtml#l00032">arm_compute::cpu::fused_batch_normalization_dwc_nhwc_f32()</a>, <a class="el" href="reference_2_instance_normalization_layer_8cpp_source.xhtml#l00040">arm_compute::test::validation::reference::instance_normalization()</a>, <a class="el" href="instancenorm_2generic_2neon_2impl_8cpp_source.xhtml#l00070">arm_compute::cpu::instance_normalization_nchw()</a>, <a class="el" href="float__ops_8h_source.xhtml#l00097">arm_compute::helpers::float_ops::is_one()</a>, <a class="el" href="float__ops_8h_source.xhtml#l00109">arm_compute::helpers::float_ops::is_zero()</a>, <a class="el" href="reference_2_l2_normalize_layer_8cpp_source.xhtml#l00051">arm_compute::test::validation::reference::l2_normalize()</a>, <a class="el" href="l2normlayer_2generic_2neon_2impl_8cpp_source.xhtml#l00079">arm_compute::cpu::l2_normalize_yz()</a>, <a class="el" href="reference_2_mean_std_dev_normalization_layer_8cpp_source.xhtml#l00037">arm_compute::test::validation::reference::mean_std_normalization_layer()</a>, <a class="el" href="meanstddevnorm_2generic_2neon_2impl_8cpp_source.xhtml#l00033">arm_compute::cpu::mean_stddev_normalization()</a>, <a class="el" href="_n_e_l2_normalize_layer_kernel_8h_source.xhtml#l00037">NEL2NormalizeLayerKernel::name()</a>, <a class="el" href="_n_e_fuse_batch_normalization_kernel_8h_source.xhtml#l00038">NEFuseBatchNormalizationKernel::name()</a>, <a class="el" href="_n_e_instance_normalization_layer_kernel_8h_source.xhtml#l00038">NEInstanceNormalizationLayerKernel::name()</a>, <a class="el" href="_n_e_batch_normalization_layer_kernel_8h_source.xhtml#l00039">NEBatchNormalizationLayerKernel::name()</a>, <a class="el" href="_n_e_mean_std_dev_normalization_kernel_8h_source.xhtml#l00041">NEMeanStdDevNormalizationKernel::name()</a>, <a class="el" href="cpu_2kernels_2instancenorm_2generic_2neon_2fp32_8cpp_source.xhtml#l00029">arm_compute::cpu::neon_fp32_instancenorm()</a>, <a class="el" href="cpu_2kernels_2l2normlayer_2generic_2neon_2fp32_8cpp_source.xhtml#l00033">arm_compute::cpu::neon_fp32_l2_normalize_x()</a>, <a class="el" href="cpu_2kernels_2l2normlayer_2generic_2neon_2fp32_8cpp_source.xhtml#l00039">arm_compute::cpu::neon_fp32_l2_normalize_yz()</a>, <a class="el" href="cpu_2kernels_2meanstddevnorm_2generic_2neon_2fp32_8cpp_source.xhtml#l00030">arm_compute::cpu::neon_fp32_meanstddevnorm()</a>, <a class="el" href="_validation_8h_source.xhtml#l00334">compare&lt; RelativeTolerance&lt; U &gt; &gt;::operator bool()</a>, <a class="el" href="_validation_8h_source.xhtml#l00086">AbsoluteTolerance&lt; U &gt;::operator U()</a>, <a class="el" href="_validation_8h_source.xhtml#l00122">RelativeTolerance&lt; U &gt;::operator value_type()</a>, <a class="el" href="_random_8h_source.xhtml#l00061">RangedUniformDistribution&lt; T &gt;::RangedUniformDistribution()</a>, <a class="el" href="tests_2_utils_8h_source.xhtml#l00081">arm_compute::test::round_half_even()</a>, <a class="el" href="support_2_rounding_8h_source.xhtml#l00150">arm_compute::utils::rounding::round_half_even()</a>, <a class="el" href="_n_e_instance_normalization_layer_8cpp_source.xhtml#l00075">NEInstanceNormalizationLayer::validate()</a>, and <a class="el" href="_validate_helpers_8h_source.xhtml#l00391">arm_compute::graph::backends::detail::validate_l2_normalize_layer()</a>.</p>

</div>
</div>
<a id="ab153bd5bebd2a695c5d2c79801d0abec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab153bd5bebd2a695c5d2c79801d0abec">&#9670;&nbsp;</a></span>fixed_point_one_Q0</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">constexpr int64_t fixed_point_one_Q0 = (1LL &lt;&lt; 31)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00036">36</a> of file <a class="el" href="_asymm_helpers_8cpp_source.xhtml">AsymmHelpers.cpp</a>.</p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1quantization.xhtml">quantization</a></li>
    <li class="footer">Generated on Thu Aug 18 2022 12:57:52 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
