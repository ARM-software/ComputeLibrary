<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute/runtime/IScheduler.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_i_scheduler_8h_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">IScheduler.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_i_scheduler_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017-2021 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_ISCHEDULER_H</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define ARM_COMPUTE_ISCHEDULER_H</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_c_p_p_types_8h.xhtml">arm_compute/core/CPP/CPPTypes.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_types_8h.xhtml">arm_compute/core/Types.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2experimental_2_types_8h.xhtml">arm_compute/core/experimental/Types.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;functional&gt;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;limits&gt;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">class </span>ICPPKernel;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">class </span>ITensor;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">class </span>Window;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">/** Scheduler interface to run kernels */</span></div><div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_i_scheduler.xhtml">   41</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1_i_scheduler.xhtml">IScheduler</a></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">    /** Strategies available to split a workload */</span></div><div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_i_scheduler.xhtml#ad3ab921e075d1edd827faf95870aa808">   45</a></span>&#160;    <span class="keyword">enum class</span> <a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#ad3ab921e075d1edd827faf95870aa808">StrategyHint</a></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    {</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#ad3ab921e075d1edd827faf95870aa808afe6f99ef1ec99efbdc19a9786cf1facc">STATIC</a>,  <span class="comment">/**&lt; Split the workload evenly among the threads */</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#ad3ab921e075d1edd827faf95870aa808a0fcc90da4811c877ba9f9c12f7d60bc9">DYNAMIC</a>, <span class="comment">/**&lt; Split the workload dynamically using a bucket system */</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    };</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment">    /** Function to be used and map a given thread id to a logical core id</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">     * Mapping function expects the thread index and total number of cores as input,</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment">     * and returns the logical core index to bind against</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00056"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_i_scheduler.xhtml#a47266bbd911ce9049fc1194e9fac9051">   56</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#a47266bbd911ce9049fc1194e9fac9051">BindFunc</a> = std::function&lt;int(int, int)&gt;;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">    /** When arm_compute::ISchedular::Hints::_split_dimension is initialized with this value</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">     * then the schedular is free to break down the problem space over as many dimensions</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment">     * as it wishes</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00062"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_i_scheduler.xhtml#af5e26fa35c7355cf0d41e1e18c709a6e">   62</a></span>&#160;    <span class="keyword">static</span> constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#af5e26fa35c7355cf0d41e1e18c709a6e">split_dimensions_all</a> = std::numeric_limits&lt;unsigned&gt;::max();</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">    /** Scheduler hints</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment">     * Collection of preferences set by the function regarding how to split a given workload</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00068"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml">   68</a></span>&#160;    <span class="keyword">class </span><a class="code" href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml">Hints</a></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    {</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment">        /** Constructor</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">         *</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment">         * @param[in] split_dimension Dimension along which to split the kernel&#39;s execution window.</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment">         * @param[in] strategy        (Optional) Split strategy.</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment">         * @param[in] threshold       (Optional) Dynamic scheduling capping threshold.</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">         */</span></div><div class="line"><a name="l00077"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml#a5a266231f17565daee90ba9b944b63c6">   77</a></span>&#160;        <a class="code" href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml#a5a266231f17565daee90ba9b944b63c6">Hints</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> split_dimension, <a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#ad3ab921e075d1edd827faf95870aa808">StrategyHint</a> <a class="code" href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a> = <a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#ad3ab921e075d1edd827faf95870aa808afe6f99ef1ec99efbdc19a9786cf1facc">StrategyHint::STATIC</a>, <span class="keywordtype">int</span> threshold = 0)</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            : _split_dimension(split_dimension), _strategy(<a class="code" href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a>), _threshold(threshold)</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        {</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        }<span class="comment"></span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment">        /** Set the split_dimension hint</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment">         *</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment">         * @param[in] split_dimension Dimension along which to split the kernel&#39;s execution window.</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment">         *</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment">         * @return the Hints object</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment">         */</span></div><div class="line"><a name="l00087"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml#aa3f198c6c5870e2fff6b323f9933ae25">   87</a></span>&#160;        <a class="code" href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml">Hints</a> &amp;<a class="code" href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml#aa3f198c6c5870e2fff6b323f9933ae25">set_split_dimension</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> split_dimension)</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        {</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            _split_dimension = split_dimension;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        }<span class="comment"></span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment">        /** Return the prefered split dimension</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment">         *</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment">         * @return The split dimension</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment">         */</span></div><div class="line"><a name="l00096"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml#a4682a1a3d110d8f8807051cd998ced88">   96</a></span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml#a4682a1a3d110d8f8807051cd998ced88">split_dimension</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="keyword">        </span>{</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            <span class="keywordflow">return</span> _split_dimension;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        }</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment">        /** Set the strategy hint</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment">         *</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment">         * @param[in] strategy Prefered strategy to use to split the workload</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment">         *</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">         * @return the Hints object</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment">         */</span></div><div class="line"><a name="l00107"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml#afae467bfef0ebb2891c61d767ec7a03e">  107</a></span>&#160;        <a class="code" href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml">Hints</a> &amp;<a class="code" href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml#afae467bfef0ebb2891c61d767ec7a03e">set_strategy</a>(<a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#ad3ab921e075d1edd827faf95870aa808">StrategyHint</a> <a class="code" href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a>)</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        {</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            _strategy = <a class="code" href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a>;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        }<span class="comment"></span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment">        /** Return the prefered strategy to use to split workload.</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">         *</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">         * @return The strategy</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment">         */</span></div><div class="line"><a name="l00116"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml#a7d8915bebdf3785072169d23b3b6d6a3">  116</a></span>&#160;        <a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#ad3ab921e075d1edd827faf95870aa808">StrategyHint</a> <a class="code" href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml#a7d8915bebdf3785072169d23b3b6d6a3">strategy</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="keyword">        </span>{</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            <span class="keywordflow">return</span> _strategy;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        }<span class="comment"></span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment">        /** Return the granule capping threshold to be used by dynamic scheduling.</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment">         *</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment">         * @return The capping threshold</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment">         */</span></div><div class="line"><a name="l00124"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml#a35edee05aa4b2e0e80c851cdc3e68654">  124</a></span>&#160;        <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml#a35edee05aa4b2e0e80c851cdc3e68654">threshold</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="keyword">        </span>{</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            <span class="keywordflow">return</span> _threshold;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        }</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keyword">private</span>:</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _split_dimension{};</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        <a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#ad3ab921e075d1edd827faf95870aa808">StrategyHint</a> _strategy{};</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <span class="keywordtype">int</span>          _threshold{};</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    };<span class="comment"></span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment">    /** Signature for the workloads to execute */</span></div><div class="line"><a name="l00135"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_i_scheduler.xhtml#a4cdc00a99619ba76bf79a466cb85d4da">  135</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#a4cdc00a99619ba76bf79a466cb85d4da">Workload</a> = std::function&lt;void(const ThreadInfo &amp;)&gt;;<span class="comment"></span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment">    /** Default constructor. */</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#a34956db09db14c551e9966c9b66036f9">IScheduler</a>();</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment">    /** Destructor. */</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#a6d209385481644d97e7ca96072b73eb8">~IScheduler</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment">    /** Sets the number of threads the scheduler will use to run the kernels.</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment">     * @param[in] num_threads If set to 0, then one thread per CPU core available on the system will be used, otherwise the number of threads specified.</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#a645ac2d9d4144fd0174296de7eb1e1b5">set_num_threads</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#ac24584a63e484123e3756d1b2a1c9e2f">num_threads</a>) = 0;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment">    /** Sets the number of threads the scheduler will use to run the kernels but also using a binding function to pin the threads to given logical cores</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment">     * @param[in] num_threads If set to 0, then one thread per CPU core available on the system will be used, otherwise the number of threads specified.</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment">     * @param[in] func        Binding function to use.</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#a64cafb079598059f1ee04f3076f1035e">set_num_threads_with_affinity</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#ac24584a63e484123e3756d1b2a1c9e2f">num_threads</a>, <a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#a47266bbd911ce9049fc1194e9fac9051">BindFunc</a> func);</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">    /** Returns the number of threads that the SingleThreadScheduler has in its pool.</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment">     * @return Number of threads available in SingleThreadScheduler.</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#ac24584a63e484123e3756d1b2a1c9e2f">num_threads</a>() <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="comment">    /** Runs the kernel in the same thread as the caller synchronously.</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment">     * @param[in] kernel Kernel to execute.</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="comment">     * @param[in] hints  Hints for the scheduler.</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#a4e58f95544bd5ac6559a421671bd9842">schedule</a>(<a class="code" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml">ICPPKernel</a> *kernel, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml">Hints</a> &amp;hints) = 0;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment">    /** Runs the kernel in the same thread as the caller synchronously.</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment">     * @param[in] kernel  Kernel to execute.</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment">     * @param[in] hints   Hints for the scheduler.</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment">     * @param[in] window  Window to use for kernel execution.</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="comment">     * @param[in] tensors Vector containing the tensors to operate on.</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#a15103352886ec83d9c250a7f5d5c630f">schedule_op</a>(<a class="code" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml">ICPPKernel</a> *kernel, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml">Hints</a> &amp;hints, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> &amp;tensors) = 0;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment">    /** Execute all the passed workloads</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="comment">     * @note there is no guarantee regarding the order in which the workloads will be executed or whether or not they will be executed in parallel.</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment">     * @param[in] workloads Array of workloads to run</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment">     * @param[in] tag       String that can be used by profiling tools to identify the workloads run by the scheduler (Can be null).</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#a3becf955da8cad5036399bcb90f1408d">run_tagged_workloads</a>(std::vector&lt;Workload&gt; &amp;workloads, <span class="keyword">const</span> <span class="keywordtype">char</span> *tag);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment">    /** Get CPU info.</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment">     * @return CPU info.</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <a class="code" href="classarm__compute_1_1_c_p_u_info.xhtml">CPUInfo</a> &amp;<a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#ab0fd9e7b4f6240c55b4fe6a54d4418b5">cpu_info</a>();<span class="comment"></span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="comment">    /** Get a hint for the best possible number of execution threads</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment">     * @warning In case we can&#39;t work out the best number of threads,</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="comment">     *          std::thread::hardware_concurrency() is returned else 1 in case of bare metal builds</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="comment">     * @return Best possible number of execution threads to use</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#a6de5358eb9a099cda48662b2fc523ec5">num_threads_hint</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="keyword">protected</span>:<span class="comment"></span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="comment">    /** Execute all the passed workloads</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="comment">     * @note there is no guarantee regarding the order in which the workloads will be executed or whether or not they will be executed in parallel.</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="comment">     * @param[in] workloads Array of workloads to run</span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> run_workloads(std::vector&lt;Workload&gt; &amp;workloads) = 0;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="comment">    /** Common scheduler logic to execute the given kernel</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="comment">     * @param[in] kernel  Kernel to execute.</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="comment">     * @param[in] hints   Hints for the scheduler.</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="comment">     * @param[in] window  Window to use for kernel execution.</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="comment">     * @param[in] tensors Vector containing the tensors to operate on.</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="keywordtype">void</span> schedule_common(<a class="code" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml">ICPPKernel</a> *kernel, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml">Hints</a> &amp;hints, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> &amp;tensors);</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="comment">    /** Adjust the number of windows to the optimize performance</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="comment">     * (used for small workloads where smaller number of threads might improve the performance)</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="comment">     * @param[in] window           Window to use for kernel execution</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="comment">     * @param[in] split_dimension  Axis of dimension to split</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="comment">     * @param[in] init_num_windows Initial number of sub-windows to split</span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="comment">     * @param[in] kernel           Kernel to execute</span></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="comment">     * @param[in] cpu_info         The CPU platform used to create the context.</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="comment">     * @return Adjusted number of windows</span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    std::size_t adjust_num_of_windows(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, std::size_t split_dimension, std::size_t init_num_windows, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml">ICPPKernel</a> &amp;kernel, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_p_u_info.xhtml">CPUInfo</a> &amp;<a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#ab0fd9e7b4f6240c55b4fe6a54d4418b5">cpu_info</a>);</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _num_threads_hint = {};</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;};</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_ISCHEDULER_H */</span><span class="preprocessor"></span></div><div class="ttc" id="classarm__compute_1_1_i_scheduler_xhtml_a4cdc00a99619ba76bf79a466cb85d4da"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml#a4cdc00a99619ba76bf79a466cb85d4da">arm_compute::IScheduler::Workload</a></div><div class="ttdeci">std::function&lt; void(const ThreadInfo &amp;)&gt; Workload</div><div class="ttdoc">Signature for the workloads to execute. </div><div class="ttdef"><b>Definition:</b> <a href="_i_scheduler_8h_source.xhtml#l00135">IScheduler.h:135</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_scheduler_xhtml_a34956db09db14c551e9966c9b66036f9"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml#a34956db09db14c551e9966c9b66036f9">arm_compute::IScheduler::IScheduler</a></div><div class="ttdeci">IScheduler()</div><div class="ttdoc">Default constructor. </div><div class="ttdef"><b>Definition:</b> <a href="_i_scheduler_8cpp_source.xhtml#l00035">IScheduler.cpp:35</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_p_p_kernel_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_c_p_p_kernel.xhtml">arm_compute::ICPPKernel</a></div><div class="ttdoc">Common interface for all kernels implemented in C++. </div><div class="ttdef"><b>Definition:</b> <a href="_i_c_p_p_kernel_8h_source.xhtml#l00038">ICPPKernel.h:38</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_scheduler_xhtml_a645ac2d9d4144fd0174296de7eb1e1b5"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml#a645ac2d9d4144fd0174296de7eb1e1b5">arm_compute::IScheduler::set_num_threads</a></div><div class="ttdeci">virtual void set_num_threads(unsigned int num_threads)=0</div><div class="ttdoc">Sets the number of threads the scheduler will use to run the kernels. </div></div>
<div class="ttc" id="classarm__compute_1_1_i_scheduler_xhtml_a15103352886ec83d9c250a7f5d5c630f"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml#a15103352886ec83d9c250a7f5d5c630f">arm_compute::IScheduler::schedule_op</a></div><div class="ttdeci">virtual void schedule_op(ICPPKernel *kernel, const Hints &amp;hints, const Window &amp;window, ITensorPack &amp;tensors)=0</div><div class="ttdoc">Runs the kernel in the same thread as the caller synchronously. </div></div>
<div class="ttc" id="classarm__compute_1_1_i_scheduler_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml">arm_compute::IScheduler</a></div><div class="ttdoc">Scheduler interface to run kernels. </div><div class="ttdef"><b>Definition:</b> <a href="_i_scheduler_8h_source.xhtml#l00041">IScheduler.h:41</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_scheduler_xhtml_ad3ab921e075d1edd827faf95870aa808afe6f99ef1ec99efbdc19a9786cf1facc"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml#ad3ab921e075d1edd827faf95870aa808afe6f99ef1ec99efbdc19a9786cf1facc">arm_compute::IScheduler::StrategyHint::STATIC</a></div><div class="ttdoc">Split the workload evenly among the threads. </div></div>
<div class="ttc" id="classarm__compute_1_1_i_scheduler_xhtml_af5e26fa35c7355cf0d41e1e18c709a6e"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml#af5e26fa35c7355cf0d41e1e18c709a6e">arm_compute::IScheduler::split_dimensions_all</a></div><div class="ttdeci">static constexpr unsigned int split_dimensions_all</div><div class="ttdoc">When arm_compute::ISchedular::Hints::_split_dimension is initialized with this value then the schedul...</div><div class="ttdef"><b>Definition:</b> <a href="_i_scheduler_8h_source.xhtml#l00062">IScheduler.h:62</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_scheduler_xhtml_ab0fd9e7b4f6240c55b4fe6a54d4418b5"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml#ab0fd9e7b4f6240c55b4fe6a54d4418b5">arm_compute::IScheduler::cpu_info</a></div><div class="ttdeci">CPUInfo &amp; cpu_info()</div><div class="ttdoc">Get CPU info. </div><div class="ttdef"><b>Definition:</b> <a href="_i_scheduler_8cpp_source.xhtml#l00041">IScheduler.cpp:41</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_scheduler_xhtml_a3becf955da8cad5036399bcb90f1408d"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml#a3becf955da8cad5036399bcb90f1408d">arm_compute::IScheduler::run_tagged_workloads</a></div><div class="ttdeci">virtual void run_tagged_workloads(std::vector&lt; Workload &gt; &amp;workloads, const char *tag)</div><div class="ttdoc">Execute all the passed workloads. </div><div class="ttdef"><b>Definition:</b> <a href="_i_scheduler_8cpp_source.xhtml#l00172">IScheduler.cpp:172</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_scheduler_1_1_hints_xhtml_a35edee05aa4b2e0e80c851cdc3e68654"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml#a35edee05aa4b2e0e80c851cdc3e68654">arm_compute::IScheduler::Hints::threshold</a></div><div class="ttdeci">int threshold() const</div><div class="ttdoc">Return the granule capping threshold to be used by dynamic scheduling. </div><div class="ttdef"><b>Definition:</b> <a href="_i_scheduler_8h_source.xhtml#l00124">IScheduler.h:124</a></div></div>
<div class="ttc" id="arm__compute_2core_2experimental_2_types_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2experimental_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2022 Arm Limited. </div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_scheduler_1_1_hints_xhtml_a5a266231f17565daee90ba9b944b63c6"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml#a5a266231f17565daee90ba9b944b63c6">arm_compute::IScheduler::Hints::Hints</a></div><div class="ttdeci">Hints(unsigned int split_dimension, StrategyHint strategy=StrategyHint::STATIC, int threshold=0)</div><div class="ttdoc">Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="_i_scheduler_8h_source.xhtml#l00077">IScheduler.h:77</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_scheduler_xhtml_ad3ab921e075d1edd827faf95870aa808a0fcc90da4811c877ba9f9c12f7d60bc9"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml#ad3ab921e075d1edd827faf95870aa808a0fcc90da4811c877ba9f9c12f7d60bc9">arm_compute::IScheduler::StrategyHint::DYNAMIC</a></div><div class="ttdoc">Split the workload dynamically using a bucket system. </div></div>
<div class="ttc" id="classarm__compute_1_1_i_scheduler_xhtml_a47266bbd911ce9049fc1194e9fac9051"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml#a47266bbd911ce9049fc1194e9fac9051">arm_compute::IScheduler::BindFunc</a></div><div class="ttdeci">std::function&lt; int(int, int)&gt; BindFunc</div><div class="ttdoc">Function to be used and map a given thread id to a logical core id. </div><div class="ttdef"><b>Definition:</b> <a href="_i_scheduler_8h_source.xhtml#l00056">IScheduler.h:56</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_scheduler_xhtml_a6d209385481644d97e7ca96072b73eb8"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml#a6d209385481644d97e7ca96072b73eb8">arm_compute::IScheduler::~IScheduler</a></div><div class="ttdeci">virtual ~IScheduler()=default</div><div class="ttdoc">Destructor. </div></div>
<div class="ttc" id="classarm__compute_1_1_i_scheduler_1_1_hints_xhtml_a7d8915bebdf3785072169d23b3b6d6a3"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml#a7d8915bebdf3785072169d23b3b6d6a3">arm_compute::IScheduler::Hints::strategy</a></div><div class="ttdeci">StrategyHint strategy() const</div><div class="ttdoc">Return the prefered strategy to use to split workload. </div><div class="ttdef"><b>Definition:</b> <a href="_i_scheduler_8h_source.xhtml#l00116">IScheduler.h:116</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_scheduler_1_1_hints_xhtml_aa3f198c6c5870e2fff6b323f9933ae25"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml#aa3f198c6c5870e2fff6b323f9933ae25">arm_compute::IScheduler::Hints::set_split_dimension</a></div><div class="ttdeci">Hints &amp; set_split_dimension(unsigned int split_dimension)</div><div class="ttdoc">Set the split_dimension hint. </div><div class="ttdef"><b>Definition:</b> <a href="_i_scheduler_8h_source.xhtml#l00087">IScheduler.h:87</a></div></div>
<div class="ttc" id="working__space_8hpp_xhtml_af96bef5f590df4bd6149576c22be99bb"><div class="ttname"><a href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a></div><div class="ttdeci">const StratType * strategy</div><div class="ttdef"><b>Definition:</b> <a href="working__space_8hpp_source.xhtml#l00105">working_space.hpp:105</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_p_u_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_p_u_info.xhtml">arm_compute::CPUInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_types_8h_source.xhtml#l00065">CPPTypes.h:65</a></div></div>
<div class="ttc" id="_c_p_p_types_8h_xhtml"><div class="ttname"><a href="_c_p_p_types_8h.xhtml">CPPTypes.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_scheduler_xhtml_a4e58f95544bd5ac6559a421671bd9842"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml#a4e58f95544bd5ac6559a421671bd9842">arm_compute::IScheduler::schedule</a></div><div class="ttdeci">virtual void schedule(ICPPKernel *kernel, const Hints &amp;hints)=0</div><div class="ttdoc">Runs the kernel in the same thread as the caller synchronously. </div></div>
<div class="ttc" id="classarm__compute_1_1_i_scheduler_xhtml_a6de5358eb9a099cda48662b2fc523ec5"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml#a6de5358eb9a099cda48662b2fc523ec5">arm_compute::IScheduler::num_threads_hint</a></div><div class="ttdeci">unsigned int num_threads_hint() const</div><div class="ttdoc">Get a hint for the best possible number of execution threads. </div><div class="ttdef"><b>Definition:</b> <a href="_i_scheduler_8cpp_source.xhtml#l00052">IScheduler.cpp:52</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_pack_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_pack.xhtml">arm_compute::ITensorPack</a></div><div class="ttdoc">Tensor packing service. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_pack_8h_source.xhtml#l00039">ITensorPack.h:39</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_scheduler_1_1_hints_xhtml_a4682a1a3d110d8f8807051cd998ced88"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml#a4682a1a3d110d8f8807051cd998ced88">arm_compute::IScheduler::Hints::split_dimension</a></div><div class="ttdeci">unsigned int split_dimension() const</div><div class="ttdoc">Return the prefered split dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_i_scheduler_8h_source.xhtml#l00096">IScheduler.h:96</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_scheduler_xhtml_ac24584a63e484123e3756d1b2a1c9e2f"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml#ac24584a63e484123e3756d1b2a1c9e2f">arm_compute::IScheduler::num_threads</a></div><div class="ttdeci">virtual unsigned int num_threads() const =0</div><div class="ttdoc">Returns the number of threads that the SingleThreadScheduler has in its pool. </div></div>
<div class="ttc" id="classarm__compute_1_1_i_scheduler_xhtml_a64cafb079598059f1ee04f3076f1035e"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml#a64cafb079598059f1ee04f3076f1035e">arm_compute::IScheduler::set_num_threads_with_affinity</a></div><div class="ttdeci">virtual void set_num_threads_with_affinity(unsigned int num_threads, BindFunc func)</div><div class="ttdoc">Sets the number of threads the scheduler will use to run the kernels but also using a binding functio...</div><div class="ttdef"><b>Definition:</b> <a href="_i_scheduler_8cpp_source.xhtml#l00046">IScheduler.cpp:46</a></div></div>
<div class="ttc" id="arm__compute_2core_2_types_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_scheduler_1_1_hints_xhtml_afae467bfef0ebb2891c61d767ec7a03e"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml#afae467bfef0ebb2891c61d767ec7a03e">arm_compute::IScheduler::Hints::set_strategy</a></div><div class="ttdeci">Hints &amp; set_strategy(StrategyHint strategy)</div><div class="ttdoc">Set the strategy hint. </div><div class="ttdef"><b>Definition:</b> <a href="_i_scheduler_8h_source.xhtml#l00107">IScheduler.h:107</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_scheduler_1_1_hints_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml">arm_compute::IScheduler::Hints</a></div><div class="ttdoc">Scheduler hints. </div><div class="ttdef"><b>Definition:</b> <a href="_i_scheduler_8h_source.xhtml#l00068">IScheduler.h:68</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml">arm_compute::Window</a></div><div class="ttdoc">Describe a multidimensional execution window. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00039">Window.h:39</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_scheduler_xhtml_ad3ab921e075d1edd827faf95870aa808"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml#ad3ab921e075d1edd827faf95870aa808">arm_compute::IScheduler::StrategyHint</a></div><div class="ttdeci">StrategyHint</div><div class="ttdoc">Strategies available to split a workload. </div><div class="ttdef"><b>Definition:</b> <a href="_i_scheduler_8h_source.xhtml#l00045">IScheduler.h:45</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_214608ef36d61442cb2b0c1c4e9a7def.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="dir_8bc26130589aa16388b5a02f17abf2c2.xhtml">runtime</a></li><li class="navelem"><a class="el" href="_i_scheduler_8h.xhtml">IScheduler.h</a></li>
    <li class="footer">Generated on Thu Aug 18 2022 12:57:34 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
