<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/experimental/dynamic_fusion/OperatorGraph.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_operator_graph_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">OperatorGraph.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_operator_graph_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2022 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifdef ENABLE_EXPERIMENTAL_DYNAMIC_FUSION</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_operator_graph_8h.xhtml">arm_compute/core/experimental/OperatorGraph.h</a>&quot;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_shape_calculator_8h.xhtml">arm_compute/core/utils/misc/ShapeCalculator.h</a>&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_operator_graph_impl_8h.xhtml">src/core/experimental/dynamic_fusion/WorkloadImpl/OperatorGraphImpl.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_auto_configuration_8h.xhtml">src/core/helpers/AutoConfiguration.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;{</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">namespace </span>experimental</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;{</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">namespace </span>dynamic_fusion</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">namespace</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keywordtype">void</span> check_dependency_graph_op_success(OperatorGraph &amp;graph, <span class="keyword">const</span> Status &amp;status)</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keywordflow">if</span>(!<span class="keywordtype">bool</span>(status))</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    {</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        graph.impl()-&gt;status = Status{ status.error_code(), <span class="stringliteral">&quot;Cycles or loops are not allowed&quot;</span> };</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    }</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;}</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">// Check if there are more than one roots in the graph</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="keywordtype">void</span> check_multiple_roots(OperatorGraph &amp;graph)</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;{</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keywordflow">if</span>(graph.impl()-&gt;graph.get_root_ops().size() &gt; 1)</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    {</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        graph.impl()-&gt;status = Status{ <a class="code" href="namespacearm__compute.xhtml#a59e56af19e754a6aa26a612ebf91d05fa62be47fdd89da032cf78dfce82239579">ErrorCode::RUNTIME_ERROR</a>, <span class="stringliteral">&quot;Multiple roots are not allowed&quot;</span> };</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    }</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;}</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="keywordtype">void</span> check_execution_shape(OperatorGraph &amp;graph, <span class="keyword">const</span> ITensorInfo &amp;dst_info)</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;{</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> roots = graph.impl()-&gt;graph.get_root_ops();</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> root : roots)</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    {</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <span class="comment">// We assume exactly 1 dst tensor for all operators</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> root_info = graph.impl()-&gt;tensors[graph.impl()-&gt;graph.dst_tensors(root)[0]]-&gt;get_tensor_info();</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> dim = 0; dim &lt; root_info-&gt;num_dimensions(); ++dim)</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        {</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            <span class="keywordflow">if</span>(root_info-&gt;dimension(dim) != dst_info.dimension(dim))</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            {</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                graph.impl()-&gt;status = Status{ <a class="code" href="namespacearm__compute.xhtml#a59e56af19e754a6aa26a612ebf91d05fa62be47fdd89da032cf78dfce82239579">ErrorCode::RUNTIME_ERROR</a>, <span class="stringliteral">&quot;Cannot change execution space&quot;</span> };</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                <span class="keywordflow">return</span>;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            }</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        }</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    }</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;}</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;} <span class="comment">// namespace</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml#a4304855d37d80ea9d9c0165850ebbb84">   74</a></span>&#160;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml#a4304855d37d80ea9d9c0165850ebbb84">OpTensor::OpTensor</a>(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml#aebc5dc6e56fe725378002f1454d09978">Id</a> <span class="keywordtype">id</span>)</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    : _id{ <span class="keywordtype">id</span> }</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;{</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;}</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml#a12ba42d3b571d9f64ecd959b78fcfddf">   79</a></span>&#160;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml#aebc5dc6e56fe725378002f1454d09978">OpTensor::Id</a> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml#a12ba42d3b571d9f64ecd959b78fcfddf">OpTensor::id</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordflow">return</span> _id;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;}</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab8924eaffc5f48d813b7665ef7ffd214">   84</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab8924eaffc5f48d813b7665ef7ffd214">operator&lt;</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a> &amp;t0, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a> &amp;t1)</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;{</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keywordflow">return</span> t0.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml#a12ba42d3b571d9f64ecd959b78fcfddf">id</a>() &lt; t1.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml#a12ba42d3b571d9f64ecd959b78fcfddf">id</a>();</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;}</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml#aa47504b35a9b4a10e8af456b25b697a0">   89</a></span>&#160;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml#aa47504b35a9b4a10e8af456b25b697a0">Operator::Operator</a>(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml#aebc5dc6e56fe725378002f1454d09978">Id</a> <span class="keywordtype">id</span>)</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    : _id{ <span class="keywordtype">id</span> }</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;{</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;}</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml#a48a9016f32cb2b81ff5d5374690209d4">   94</a></span>&#160;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml#aebc5dc6e56fe725378002f1454d09978">Operator::Id</a> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml#a48a9016f32cb2b81ff5d5374690209d4">Operator::id</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keywordflow">return</span> _id;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;}</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a61e490117b62035a67b5ccfd4a0553ec">   99</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab8924eaffc5f48d813b7665ef7ffd214">operator&lt;</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml">Operator</a> &amp;op0, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml">Operator</a> &amp;op1)</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;{</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keywordflow">return</span> op0.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml#a48a9016f32cb2b81ff5d5374690209d4">id</a>() &lt; op1.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml#a48a9016f32cb2b81ff5d5374690209d4">id</a>();</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;}</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml#abfae5a56fd8931efd58c6da23e2b2668">  104</a></span>&#160;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml#abfae5a56fd8931efd58c6da23e2b2668">OperatorGraph::OperatorGraph</a>()</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    : _impl{ std::make_unique&lt;Implementation&gt;() }</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;{</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;}</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml#a46f3ddad7376b1b67eeea8f1bc734dda">OperatorGraph::~OperatorGraph</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml#abfc12bb496964f0d83301d79db02f510">  111</a></span>&#160;<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation.xhtml">OperatorGraph::Implementation</a> *<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml#abfc12bb496964f0d83301d79db02f510">OperatorGraph::impl</a>()</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;{</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keywordflow">return</span> _impl.get();</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;}</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno"><a class="line" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml#af6ef2f18ff79a7de035b969b06cf2a17">  116</a></span>&#160;<span class="keyword">const</span> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation.xhtml">OperatorGraph::Implementation</a> *<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml#abfc12bb496964f0d83301d79db02f510">OperatorGraph::impl</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keywordflow">return</span> _impl.get();</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;}</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a048af4e9fc68526bf6d39e80e043a456">  121</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a048af4e9fc68526bf6d39e80e043a456">validate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml">OperatorGraph</a> &amp;graph)</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;{</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keywordflow">return</span> graph.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml#abfc12bb496964f0d83301d79db02f510">impl</a>()-&gt;<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation.xhtml#ae29aa2d4ae440022daaed1107eb306b3">status</a>;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;}</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a8aad35ee7c2bfa06456fade719732d21">  126</a></span>&#160;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a8aad35ee7c2bfa06456fade719732d21">add_tensor</a>(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml">OperatorGraph</a> &amp;graph, <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>)</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;{</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keyword">auto</span>     <span class="keywordtype">id</span> = graph.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml#abfc12bb496964f0d83301d79db02f510">impl</a>()-&gt;<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation.xhtml#a49509a42eb2f3dfac81faeb4fa4e82b3">graph</a>.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a21d46af8bdb7e587be804b405b63ac3d">add_tensor</a>();</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a> op_tensor(<span class="keywordtype">id</span>);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    graph.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml#abfc12bb496964f0d83301d79db02f510">impl</a>()-&gt;<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation.xhtml#a2f35efed60816600b44faaba9da1163f">add_tensor</a>(<span class="keywordtype">id</span>, &amp;info);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keywordflow">return</span> op_tensor;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;}</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a859ce0f92e55dabcfe0ce42b4d0be85e">  134</a></span>&#160;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml">Operator</a> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a859ce0f92e55dabcfe0ce42b4d0be85e">add_op_conv2d</a>(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml">OperatorGraph</a> &amp;graph, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_descriptor.xhtml">Conv2dDescriptor</a> &amp;desc, <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a> weights, <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a> <a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>)</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;{</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="comment">// Check if map is empty as a complex operator can only be root</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keywordflow">if</span>(!graph.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml#abfc12bb496964f0d83301d79db02f510">impl</a>()-&gt;<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation.xhtml#a49509a42eb2f3dfac81faeb4fa4e82b3">graph</a>.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#af2b3ac83564fdf708156b9fff27b975f">get_root_ops</a>().empty())</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    {</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        graph.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml#abfc12bb496964f0d83301d79db02f510">impl</a>()-&gt;<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation.xhtml#ae29aa2d4ae440022daaed1107eb306b3">status</a> = <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a>{ <a class="code" href="namespacearm__compute.xhtml#a59e56af19e754a6aa26a612ebf91d05fa62be47fdd89da032cf78dfce82239579">ErrorCode::RUNTIME_ERROR</a>, <span class="stringliteral">&quot;Cannot add multiple complex operators&quot;</span> };</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml">Operator</a>{};</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    }</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    std::pair&lt;Status, DependencyGraph::Id&gt; status_id;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keywordflow">if</span>(bias.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml#a12ba42d3b571d9f64ecd959b78fcfddf">id</a>() == -1)</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    {</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        status_id = graph.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml#abfc12bb496964f0d83301d79db02f510">impl</a>()-&gt;<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation.xhtml#a49509a42eb2f3dfac81faeb4fa4e82b3">graph</a>.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a5922b6c22c15729162e749f06f7f518c">add_operator</a>({ input.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml#a12ba42d3b571d9f64ecd959b78fcfddf">id</a>(), weights.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml#a12ba42d3b571d9f64ecd959b78fcfddf">id</a>() }, { dst.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml#a12ba42d3b571d9f64ecd959b78fcfddf">id</a>() });</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    }</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    {</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        status_id = graph.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml#abfc12bb496964f0d83301d79db02f510">impl</a>()-&gt;<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation.xhtml#a49509a42eb2f3dfac81faeb4fa4e82b3">graph</a>.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a5922b6c22c15729162e749f06f7f518c">add_operator</a>({ input.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml#a12ba42d3b571d9f64ecd959b78fcfddf">id</a>(), weights.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml#a12ba42d3b571d9f64ecd959b78fcfddf">id</a>(), bias.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml#a12ba42d3b571d9f64ecd959b78fcfddf">id</a>() }, { dst.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml#a12ba42d3b571d9f64ecd959b78fcfddf">id</a>() });</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    }</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    check_dependency_graph_op_success(graph, status_id.first);</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml">Operator</a> op_node(status_id.second);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="comment">// Infer TensorInfo</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor_content.xhtml">OpTensorContent</a> *dst_tensor = graph.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml#abfc12bb496964f0d83301d79db02f510">impl</a>()-&gt;<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation.xhtml#a8ab011f9aab792685edbdf86be0b7ff5">tensors</a>[dst.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml#a12ba42d3b571d9f64ecd959b78fcfddf">id</a>()].get();</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keywordflow">if</span>(dst_tensor-&gt;<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor_content.xhtml#adfb505060334802baaf44e1239b09193">get_tensor_info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a18064e0011c3869d884653e9e7c47b66">total_size</a>() == 0)</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    {</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>   = graph.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml#abfc12bb496964f0d83301d79db02f510">impl</a>()-&gt;<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation.xhtml#a8ab011f9aab792685edbdf86be0b7ff5">tensors</a>[input.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml#a12ba42d3b571d9f64ecd959b78fcfddf">id</a>()]-&gt;get_tensor_info();</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <span class="keyword">auto</span> wts   = graph.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml#abfc12bb496964f0d83301d79db02f510">impl</a>()-&gt;<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation.xhtml#a8ab011f9aab792685edbdf86be0b7ff5">tensors</a>[weights.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml#a12ba42d3b571d9f64ecd959b78fcfddf">id</a>()]-&gt;get_tensor_info();</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a> = <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ac93cc76b563b366f030b8310a46046c3">misc::shape_calculator::compute_deep_convolution_shape</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;tensor_shape(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;data_layout(), wts-&gt;tensor_shape(), <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>(desc.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_descriptor.xhtml#af5212d2d7b4918bf6251e1967182179f">stride</a>.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a94b8468af876f5ab54020d5e9787a4f0">x</a>(), desc.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_descriptor.xhtml#af5212d2d7b4918bf6251e1967182179f">stride</a>.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#aaaeb4853150b7d0e8b685fd08052924f">y</a>(), desc.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_descriptor.xhtml#a06504ecad0ad3eab61f6a1f6ebb11b92">pad</a>.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_padding2_d.xhtml#a951236a0702535ba18ba51db69428658">left</a>,</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                                                                            desc.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_descriptor.xhtml#a06504ecad0ad3eab61f6a1f6ebb11b92">pad</a>.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_padding2_d.xhtml#aa022cff9934a1a99bd77c49ca6a135a2">right</a>,</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                                                                            desc.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_descriptor.xhtml#a06504ecad0ad3eab61f6a1f6ebb11b92">pad</a>.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_padding2_d.xhtml#ab9332a87d0af5aa12cac847eff68b7af">top</a>, desc.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_descriptor.xhtml#a06504ecad0ad3eab61f6a1f6ebb11b92">pad</a>.<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_padding2_d.xhtml#a859088de403805f35d826df5ef39ee80">bottom</a>, <a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">DimensionRoundingType::FLOOR</a>)); <span class="comment">// use the default DimensionRoundingType</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a37c28ce239ce7092298245ce59694917">auto_init_if_empty</a>(*(dst_tensor-&gt;<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor_content.xhtml#adfb505060334802baaf44e1239b09193">get_tensor_info</a>()), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;clone()-&gt;set_tensor_shape(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>));</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    }</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="comment">// Check execution space</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="keyword">auto</span> dst_info = dst_tensor-&gt;<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor_content.xhtml#adfb505060334802baaf44e1239b09193">get_tensor_info</a>();</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    check_execution_shape(graph, *dst_info);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_tensor_desc_pack.xhtml">ITensorDescPack&lt;OpTensorContent&gt;</a> tensors;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    tensors.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_tensor_desc_pack.xhtml#a228484585f0c1b71ad5392081698d722">add_const_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5">ACL_SRC_0</a>, graph.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml#abfc12bb496964f0d83301d79db02f510">impl</a>()-&gt;<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation.xhtml#a8ab011f9aab792685edbdf86be0b7ff5">tensors</a>[input.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml#a12ba42d3b571d9f64ecd959b78fcfddf">id</a>()].get());</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    tensors.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_tensor_desc_pack.xhtml#a228484585f0c1b71ad5392081698d722">add_const_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0">ACL_SRC_1</a>, graph.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml#abfc12bb496964f0d83301d79db02f510">impl</a>()-&gt;<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation.xhtml#a8ab011f9aab792685edbdf86be0b7ff5">tensors</a>[weights.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml#a12ba42d3b571d9f64ecd959b78fcfddf">id</a>()].get());</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keywordflow">if</span>(bias.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml#a12ba42d3b571d9f64ecd959b78fcfddf">id</a>() != -1)</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    {</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        tensors.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_tensor_desc_pack.xhtml#a228484585f0c1b71ad5392081698d722">add_const_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a01cea947a24713975f86d0769bf8fad5">ACL_SRC_2</a>, graph.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml#abfc12bb496964f0d83301d79db02f510">impl</a>()-&gt;<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation.xhtml#a8ab011f9aab792685edbdf86be0b7ff5">tensors</a>[bias.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml#a12ba42d3b571d9f64ecd959b78fcfddf">id</a>()].get());</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    }</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    tensors.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_tensor_desc_pack.xhtml#a228484585f0c1b71ad5392081698d722">add_const_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a540ce448c4606321a9e07595de6e4724">ACL_DST_0</a>, graph.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml#abfc12bb496964f0d83301d79db02f510">impl</a>()-&gt;<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation.xhtml#a8ab011f9aab792685edbdf86be0b7ff5">tensors</a>[dst.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml#a12ba42d3b571d9f64ecd959b78fcfddf">id</a>()].get());</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    graph.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml#abfc12bb496964f0d83301d79db02f510">impl</a>()-&gt;<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation.xhtml#ae64306c052aba3a825fc523f8f10f5d2">add_node</a>&lt;<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_content.xhtml">Conv2dContent</a>&gt;(status_id.second, desc, tensors);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    check_multiple_roots(graph);</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="keywordflow">return</span> op_node;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;}</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00190"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a3f35f393fb5fcab516529f5dd5dcbdeb">  190</a></span>&#160;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml">Operator</a> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a859ce0f92e55dabcfe0ce42b4d0be85e">add_op_conv2d</a>(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml">OperatorGraph</a> &amp;graph, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_descriptor.xhtml">Conv2dDescriptor</a> &amp;desc, <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a> weights, <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>)</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;{</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a859ce0f92e55dabcfe0ce42b4d0be85e">add_op_conv2d</a>(graph, desc, input, weights, <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a>(-1), dst);</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;}</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a0500494c1c88e005019c1046023207b9">  195</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a0500494c1c88e005019c1046023207b9">force_conv2d_method</a>(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml">OperatorGraph</a> &amp;graph, <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml">Operator</a> conv2d, <a class="code" href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517d">ConvolutionMethod</a> method)</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;{</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="keyword">auto</span> node = utils::cast::polymorphic_downcast&lt;Conv2dContent *&gt;(graph.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml#abfc12bb496964f0d83301d79db02f510">impl</a>()-&gt;<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation.xhtml#a5403557297e77f4648580ccb49c4173a">operators</a>[conv2d.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml#a48a9016f32cb2b81ff5d5374690209d4">id</a>()].get());</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    node-&gt;set_method(method);</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;}</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6ddaa43fa5e752d3a4804654ef17890b">  201</a></span>&#160;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml">Operator</a> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6ddaa43fa5e752d3a4804654ef17890b">add_op_elementwise_op</a>(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml">OperatorGraph</a> &amp;graph, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_elementwise_descriptor.xhtml">ElementwiseDescriptor</a> &amp;desc, <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a> lhs, <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a> rhs, <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>)</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;{</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keyword">auto</span> <span class="keywordtype">id</span> = graph.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml#abfc12bb496964f0d83301d79db02f510">impl</a>()-&gt;<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation.xhtml#a49509a42eb2f3dfac81faeb4fa4e82b3">graph</a>.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a5922b6c22c15729162e749f06f7f518c">add_operator</a>({ rhs.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml#a12ba42d3b571d9f64ecd959b78fcfddf">id</a>(), lhs.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml#a12ba42d3b571d9f64ecd959b78fcfddf">id</a>() }, { dst.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml#a12ba42d3b571d9f64ecd959b78fcfddf">id</a>() });</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    check_dependency_graph_op_success(graph, <span class="keywordtype">id</span>.first);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml">Operator</a> op_node(<span class="keywordtype">id</span>.second);</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="comment">// Infer TensorInfo</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="keyword">auto</span>             node_lhs = graph.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml#abfc12bb496964f0d83301d79db02f510">impl</a>()-&gt;<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation.xhtml#a8ab011f9aab792685edbdf86be0b7ff5">tensors</a>[lhs.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml#a12ba42d3b571d9f64ecd959b78fcfddf">id</a>()]-&gt;get_tensor_info();</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="keyword">auto</span>             node_rhs = graph.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml#abfc12bb496964f0d83301d79db02f510">impl</a>()-&gt;<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation.xhtml#a8ab011f9aab792685edbdf86be0b7ff5">tensors</a>[rhs.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml#a12ba42d3b571d9f64ecd959b78fcfddf">id</a>()]-&gt;get_tensor_info();</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor_content.xhtml">OpTensorContent</a> *node_dst = graph.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml#abfc12bb496964f0d83301d79db02f510">impl</a>()-&gt;<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation.xhtml#a8ab011f9aab792685edbdf86be0b7ff5">tensors</a>[dst.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml#a12ba42d3b571d9f64ecd959b78fcfddf">id</a>()].get();</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keywordflow">if</span>(node_dst-&gt;<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor_content.xhtml#adfb505060334802baaf44e1239b09193">get_tensor_info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a18064e0011c3869d884653e9e7c47b66">total_size</a>() == 0)</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    {</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        <span class="keyword">const</span> std::pair&lt;TensorShape, ValidRegion&gt; broadcast_pair = <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#ae056a42fb510e2fa170a74ab06ee31da">ITensorInfo::broadcast_shape_and_valid_region</a>(*node_rhs, *node_lhs);</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a37c28ce239ce7092298245ce59694917">auto_init_if_empty</a>(*(node_dst-&gt;<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor_content.xhtml#adfb505060334802baaf44e1239b09193">get_tensor_info</a>()), node_lhs-&gt;clone()-&gt;set_tensor_shape(broadcast_pair.first));</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    }</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="comment">// Check execution space</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <span class="keyword">auto</span> dst_info = node_dst-&gt;<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor_content.xhtml#adfb505060334802baaf44e1239b09193">get_tensor_info</a>();</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    check_execution_shape(graph, *dst_info);</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_tensor_desc_pack.xhtml">ITensorDescPack&lt;OpTensorContent&gt;</a> tensors;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    tensors.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_tensor_desc_pack.xhtml#a228484585f0c1b71ad5392081698d722">add_const_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5">ACL_SRC_0</a>, graph.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml#abfc12bb496964f0d83301d79db02f510">impl</a>()-&gt;<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation.xhtml#a8ab011f9aab792685edbdf86be0b7ff5">tensors</a>[lhs.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml#a12ba42d3b571d9f64ecd959b78fcfddf">id</a>()].get());</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    tensors.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_tensor_desc_pack.xhtml#a228484585f0c1b71ad5392081698d722">add_const_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0">ACL_SRC_1</a>, graph.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml#abfc12bb496964f0d83301d79db02f510">impl</a>()-&gt;<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation.xhtml#a8ab011f9aab792685edbdf86be0b7ff5">tensors</a>[rhs.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml#a12ba42d3b571d9f64ecd959b78fcfddf">id</a>()].get());</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    tensors.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_tensor_desc_pack.xhtml#a228484585f0c1b71ad5392081698d722">add_const_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a540ce448c4606321a9e07595de6e4724">ACL_DST_0</a>, graph.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml#abfc12bb496964f0d83301d79db02f510">impl</a>()-&gt;<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation.xhtml#a8ab011f9aab792685edbdf86be0b7ff5">tensors</a>[dst.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml#a12ba42d3b571d9f64ecd959b78fcfddf">id</a>()].get());</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    graph.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml#abfc12bb496964f0d83301d79db02f510">impl</a>()-&gt;<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation.xhtml#ae64306c052aba3a825fc523f8f10f5d2">add_node</a>&lt;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_elementwise_content.xhtml">ElementwiseContent</a>&gt;(<span class="keywordtype">id</span>.second, desc, tensors);</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    check_multiple_roots(graph);</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="keywordflow">return</span> op_node;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;}</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div><div class="line"><a name="l00233"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a3f7c5a493aa563a630eaec1042f95071">  233</a></span>&#160;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml">Operator</a> <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a3f7c5a493aa563a630eaec1042f95071">add_op_floor</a>(<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml">OperatorGraph</a> &amp;graph, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_floor_descriptor.xhtml">FloorDescriptor</a> &amp;desc, <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">OpTensor</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>)</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;{</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="keyword">auto</span> <span class="keywordtype">id</span> = graph.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml#abfc12bb496964f0d83301d79db02f510">impl</a>()-&gt;<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation.xhtml#a49509a42eb2f3dfac81faeb4fa4e82b3">graph</a>.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a5922b6c22c15729162e749f06f7f518c">add_operator</a>({ src.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml#a12ba42d3b571d9f64ecd959b78fcfddf">id</a>() }, { dst.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml#a12ba42d3b571d9f64ecd959b78fcfddf">id</a>() });</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    check_dependency_graph_op_success(graph, <span class="keywordtype">id</span>.first);</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml">Operator</a> op_node(<span class="keywordtype">id</span>.second);</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="comment">// Infer TensorInfo</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keyword">auto</span>             node_src = graph.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml#abfc12bb496964f0d83301d79db02f510">impl</a>()-&gt;<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation.xhtml#a8ab011f9aab792685edbdf86be0b7ff5">tensors</a>[src.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml#a12ba42d3b571d9f64ecd959b78fcfddf">id</a>()]-&gt;get_tensor_info();</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor_content.xhtml">OpTensorContent</a> *node_dst = graph.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml#abfc12bb496964f0d83301d79db02f510">impl</a>()-&gt;<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation.xhtml#a8ab011f9aab792685edbdf86be0b7ff5">tensors</a>[dst.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml#a12ba42d3b571d9f64ecd959b78fcfddf">id</a>()].get();</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="keywordflow">if</span>(node_dst-&gt;<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor_content.xhtml#adfb505060334802baaf44e1239b09193">get_tensor_info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a18064e0011c3869d884653e9e7c47b66">total_size</a>() == 0)</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    {</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a37c28ce239ce7092298245ce59694917">auto_init_if_empty</a>(*(node_dst-&gt;<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor_content.xhtml#adfb505060334802baaf44e1239b09193">get_tensor_info</a>()), *node_src);</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    }</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="comment">// Check execution space</span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keyword">auto</span> dst_info = node_dst-&gt;<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor_content.xhtml#adfb505060334802baaf44e1239b09193">get_tensor_info</a>();</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    check_execution_shape(graph, *dst_info);</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_tensor_desc_pack.xhtml">ITensorDescPack&lt;OpTensorContent&gt;</a> tensors;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    tensors.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_tensor_desc_pack.xhtml#a228484585f0c1b71ad5392081698d722">add_const_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5">ACL_SRC_0</a>, graph.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml#abfc12bb496964f0d83301d79db02f510">impl</a>()-&gt;<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation.xhtml#a8ab011f9aab792685edbdf86be0b7ff5">tensors</a>[src.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml#a12ba42d3b571d9f64ecd959b78fcfddf">id</a>()].get());</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    tensors.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_tensor_desc_pack.xhtml#a228484585f0c1b71ad5392081698d722">add_const_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a540ce448c4606321a9e07595de6e4724">ACL_DST_0</a>, graph.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml#abfc12bb496964f0d83301d79db02f510">impl</a>()-&gt;<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation.xhtml#a8ab011f9aab792685edbdf86be0b7ff5">tensors</a>[dst.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml#a12ba42d3b571d9f64ecd959b78fcfddf">id</a>()].get());</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    graph.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml#abfc12bb496964f0d83301d79db02f510">impl</a>()-&gt;<a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation.xhtml#ae64306c052aba3a825fc523f8f10f5d2">add_node</a>&lt;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_floor_content.xhtml">FloorContent</a>&gt;(<span class="keywordtype">id</span>.second, desc, tensors);</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    check_multiple_roots(graph);</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keywordflow">return</span> op_node;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;}</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;} <span class="comment">// namespace dynamic_fusion</span></div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;} <span class="comment">// namespace experimental</span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ENABLE_EXPERIMENTAL_DYNAMIC_FUSION */</span><span class="preprocessor"></span></div><div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml">arm_compute::experimental::dynamic_fusion::OpTensor</a></div><div class="ttdoc">Operator Tensor Handle This can be either an argument tensor, or an intermediate tensor linking 2 Ope...</div><div class="ttdef"><b>Definition:</b> <a href="_operator_graph_8h_source.xhtml#l00068">OperatorGraph.h:68</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a45cde9abb508c62d67c3bb2b9bf566a5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">arm_compute::test::validation::shape</a></div><div class="ttdeci">shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">DFT.cpp:115</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a01cea947a24713975f86d0769bf8fad5"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a01cea947a24713975f86d0769bf8fad5">arm_compute::ACL_SRC_2</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00047">Types.h:47</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_padding2_d_xhtml_a859088de403805f35d826df5ef39ee80"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_padding2_d.xhtml#a859088de403805f35d826df5ef39ee80">arm_compute::experimental::dynamic_fusion::Padding2D::bottom</a></div><div class="ttdeci">size_t bottom</div><div class="ttdoc">Padding across the height dimension on the bottom, in elements. </div><div class="ttdef"><b>Definition:</b> <a href="_operator_graph_8h_source.xhtml#l00143">OperatorGraph.h:143</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a048af4e9fc68526bf6d39e80e043a456"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a048af4e9fc68526bf6d39e80e043a456">arm_compute::experimental::dynamic_fusion::validate</a></div><div class="ttdeci">Status validate(const OperatorGraph &amp;op_graph)</div><div class="ttdoc">Return the validity of op_graph, usually after performing an operation (e.g. </div><div class="ttdef"><b>Definition:</b> <a href="_operator_graph_8cpp_source.xhtml#l00121">OperatorGraph.cpp:121</a></div></div>
<div class="ttc" id="_operator_graph_8h_xhtml"><div class="ttname"><a href="_operator_graph_8h.xhtml">OperatorGraph.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_a21d46af8bdb7e587be804b405b63ac3d"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a21d46af8bdb7e587be804b405b63ac3d">arm_compute::experimental::dynamic_fusion::DependencyGraph::add_tensor</a></div><div class="ttdeci">Id add_tensor(Id merge_tensor=empty_id())</div><div class="ttdoc">Add a new tensor. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00061">DependencyGraph.cpp:61</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_af2b3ac83564fdf708156b9fff27b975f"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#af2b3ac83564fdf708156b9fff27b975f">arm_compute::experimental::dynamic_fusion::DependencyGraph::get_root_ops</a></div><div class="ttdeci">std::vector&lt; Id &gt; get_root_ops() const</div><div class="ttdoc">Get all root ops. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00145">DependencyGraph.cpp:145</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe"><div class="ttname"><a href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">arm_compute::DimensionRoundingType::FLOOR</a></div><div class="ttdoc">Floor rounding. </div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_floor_content_xhtml"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_floor_content.xhtml">arm_compute::experimental::dynamic_fusion::FloorContent</a></div><div class="ttdef"><b>Definition:</b> <a href="_operator_graph_impl_8h_source.xhtml#l00184">OperatorGraphImpl.h:184</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_descriptor_xhtml_a06504ecad0ad3eab61f6a1f6ebb11b92"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_descriptor.xhtml#a06504ecad0ad3eab61f6a1f6ebb11b92">arm_compute::experimental::dynamic_fusion::Conv2dDescriptor::pad</a></div><div class="ttdeci">Padding2D pad</div><div class="ttdef"><b>Definition:</b> <a href="_operator_graph_8h_source.xhtml#l00151">OperatorGraph.h:151</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a6ddaa43fa5e752d3a4804654ef17890b"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a6ddaa43fa5e752d3a4804654ef17890b">arm_compute::experimental::dynamic_fusion::add_op_elementwise_op</a></div><div class="ttdeci">Operator add_op_elementwise_op(OperatorGraph &amp;graph, const ElementwiseDescriptor &amp;desc, OpTensor lhs, OpTensor rhs, OpTensor dst)</div><div class="ttdoc">Add op Elementwise to graph, and optionally describes fusion through passing of intermediate OpTensor...</div><div class="ttdef"><b>Definition:</b> <a href="_operator_graph_8cpp_source.xhtml#l00201">OperatorGraph.cpp:201</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_xhtml"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml">arm_compute::experimental::dynamic_fusion::OperatorGraph</a></div><div class="ttdoc">Graph of operators to execute within a Workload. </div><div class="ttdef"><b>Definition:</b> <a href="_operator_graph_8h_source.xhtml#l00042">OperatorGraph.h:42</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_elementwise_content_xhtml"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_elementwise_content.xhtml">arm_compute::experimental::dynamic_fusion::ElementwiseContent</a></div><div class="ttdef"><b>Definition:</b> <a href="_operator_graph_impl_8h_source.xhtml#l00160">OperatorGraphImpl.h:160</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation_xhtml_ae64306c052aba3a825fc523f8f10f5d2"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation.xhtml#ae64306c052aba3a825fc523f8f10f5d2">arm_compute::experimental::dynamic_fusion::OperatorGraph::Implementation::add_node</a></div><div class="ttdeci">void add_node(Operator::Id id, Args &amp;&amp;... args)</div><div class="ttdef"><b>Definition:</b> <a href="_operator_graph_impl_8h_source.xhtml#l00212">OperatorGraphImpl.h:212</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation_xhtml_a5403557297e77f4648580ccb49c4173a"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation.xhtml#a5403557297e77f4648580ccb49c4173a">arm_compute::experimental::dynamic_fusion::OperatorGraph::Implementation::operators</a></div><div class="ttdeci">OperatorMap operators</div><div class="ttdef"><b>Definition:</b> <a href="_operator_graph_impl_8h_source.xhtml#l00236">OperatorGraphImpl.h:236</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor&amp;#39;s metadata. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00040">ITensorInfo.h:40</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation_xhtml_a8ab011f9aab792685edbdf86be0b7ff5"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation.xhtml#a8ab011f9aab792685edbdf86be0b7ff5">arm_compute::experimental::dynamic_fusion::OperatorGraph::Implementation::tensors</a></div><div class="ttdeci">OpTensorMap tensors</div><div class="ttdef"><b>Definition:</b> <a href="_operator_graph_impl_8h_source.xhtml#l00237">OperatorGraphImpl.h:237</a></div></div>
<div class="ttc" id="classarm__compute_1_1_size2_d_xhtml_a94b8468af876f5ab54020d5e9787a4f0"><div class="ttname"><a href="classarm__compute_1_1_size2_d.xhtml#a94b8468af876f5ab54020d5e9787a4f0">arm_compute::Size2D::x</a></div><div class="ttdeci">size_t x() const</div><div class="ttdoc">Semantic accessor for width as x. </div><div class="ttdef"><b>Definition:</b> <a href="_size2_d_8h_source.xhtml#l00075">Size2D.h:75</a></div></div>
<div class="ttc" id="classarm__compute_1_1_status_xhtml"><div class="ttname"><a href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a></div><div class="ttdoc">Status class. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00052">Error.h:52</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a683661ae75dcb7aef16b9c9bde31517d"><div class="ttname"><a href="namespacearm__compute.xhtml#a683661ae75dcb7aef16b9c9bde31517d">arm_compute::ConvolutionMethod</a></div><div class="ttdeci">ConvolutionMethod</div><div class="ttdoc">Available ConvolutionMethod. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00134">Types.h:134</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_ae056a42fb510e2fa170a74ab06ee31da"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#ae056a42fb510e2fa170a74ab06ee31da">arm_compute::ITensorInfo::broadcast_shape_and_valid_region</a></div><div class="ttdeci">static std::pair&lt; TensorShape, ValidRegion &gt; broadcast_shape_and_valid_region(const Infos &amp;... infos)</div><div class="ttdoc">If infos are broadcast compatible tensor info&amp;#39;s, return the broadcasted shape and the intersection of...</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00299">ITensorInfo.h:299</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a0500494c1c88e005019c1046023207b9"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a0500494c1c88e005019c1046023207b9">arm_compute::experimental::dynamic_fusion::force_conv2d_method</a></div><div class="ttdeci">void force_conv2d_method(OperatorGraph &amp;graph, Operator conv2d, ConvolutionMethod method)</div><div class="ttdoc">(Only for Debuging and Testing) Force a conv2d method </div><div class="ttdef"><b>Definition:</b> <a href="_operator_graph_8cpp_source.xhtml#l00195">OperatorGraph.cpp:195</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2022 Arm Limited. </div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation_xhtml_a2f35efed60816600b44faaba9da1163f"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation.xhtml#a2f35efed60816600b44faaba9da1163f">arm_compute::experimental::dynamic_fusion::OperatorGraph::Implementation::add_tensor</a></div><div class="ttdeci">void add_tensor(OpTensor::Id id, Args &amp;&amp;... args)</div><div class="ttdef"><b>Definition:</b> <a href="_operator_graph_impl_8h_source.xhtml#l00218">OperatorGraphImpl.h:218</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_floor_descriptor_xhtml"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_floor_descriptor.xhtml">arm_compute::experimental::dynamic_fusion::FloorDescriptor</a></div><div class="ttdoc">Descriptor for Floor operation. </div><div class="ttdef"><b>Definition:</b> <a href="_operator_graph_8h_source.xhtml#l00205">OperatorGraph.h:205</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation_xhtml"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation.xhtml">arm_compute::experimental::dynamic_fusion::OperatorGraph::Implementation</a></div><div class="ttdef"><b>Definition:</b> <a href="_operator_graph_impl_8h_source.xhtml#l00208">OperatorGraphImpl.h:208</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_descriptor_xhtml_af5212d2d7b4918bf6251e1967182179f"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_descriptor.xhtml#af5212d2d7b4918bf6251e1967182179f">arm_compute::experimental::dynamic_fusion::Conv2dDescriptor::stride</a></div><div class="ttdeci">Size2D stride</div><div class="ttdef"><b>Definition:</b> <a href="_operator_graph_8h_source.xhtml#l00152">OperatorGraph.h:152</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">LSTMLayerQuantized.cpp:486</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_padding2_d_xhtml_aa022cff9934a1a99bd77c49ca6a135a2"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_padding2_d.xhtml#aa022cff9934a1a99bd77c49ca6a135a2">arm_compute::experimental::dynamic_fusion::Padding2D::right</a></div><div class="ttdeci">size_t right</div><div class="ttdoc">Padding across the width dimension on the right, in elements. </div><div class="ttdef"><b>Definition:</b> <a href="_operator_graph_8h_source.xhtml#l00141">OperatorGraph.h:141</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_tensor_desc_pack_xhtml"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_tensor_desc_pack.xhtml">arm_compute::experimental::dynamic_fusion::ITensorDescPack</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_desc_pack_8h_source.xhtml#l00039">ITensorDescPack.h:39</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation_xhtml_a49509a42eb2f3dfac81faeb4fa4e82b3"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation.xhtml#a49509a42eb2f3dfac81faeb4fa4e82b3">arm_compute::experimental::dynamic_fusion::OperatorGraph::Implementation::graph</a></div><div class="ttdeci">Dependency graph</div><div class="ttdef"><b>Definition:</b> <a href="_operator_graph_impl_8h_source.xhtml#l00235">OperatorGraphImpl.h:235</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_xhtml_a46f3ddad7376b1b67eeea8f1bc734dda"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml#a46f3ddad7376b1b67eeea8f1bc734dda">arm_compute::experimental::dynamic_fusion::OperatorGraph::~OperatorGraph</a></div><div class="ttdeci">~OperatorGraph()</div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation_xhtml_ae29aa2d4ae440022daaed1107eb306b3"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_1_1_implementation.xhtml#ae29aa2d4ae440022daaed1107eb306b3">arm_compute::experimental::dynamic_fusion::OperatorGraph::Implementation::status</a></div><div class="ttdeci">Status status</div><div class="ttdef"><b>Definition:</b> <a href="_operator_graph_impl_8h_source.xhtml#l00238">OperatorGraphImpl.h:238</a></div></div>
<div class="ttc" id="_operator_graph_impl_8h_xhtml"><div class="ttname"><a href="_operator_graph_impl_8h.xhtml">OperatorGraphImpl.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a37c28ce239ce7092298245ce59694917"><div class="ttname"><a href="namespacearm__compute.xhtml#a37c28ce239ce7092298245ce59694917">arm_compute::auto_init_if_empty</a></div><div class="ttdeci">bool auto_init_if_empty(ITensorInfo &amp;info, const TensorShape &amp;shape, int num_channels, DataType data_type, QuantizationInfo quantization_info=QuantizationInfo())</div><div class="ttdoc">Auto initialize the tensor info (shape, number of channels and data type) if the current assignment i...</div><div class="ttdef"><b>Definition:</b> <a href="_auto_configuration_8h_source.xhtml#l00042">AutoConfiguration.h:42</a></div></div>
<div class="ttc" id="_shape_calculator_8h_xhtml"><div class="ttname"><a href="_shape_calculator_8h.xhtml">ShapeCalculator.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pad_stride_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml">arm_compute::PadStrideInfo</a></div><div class="ttdoc">Padding and stride information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00669">Types.h:669</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor_xhtml_aebc5dc6e56fe725378002f1454d09978"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml#aebc5dc6e56fe725378002f1454d09978">arm_compute::experimental::dynamic_fusion::OpTensor::Id</a></div><div class="ttdeci">int Id</div><div class="ttdef"><b>Definition:</b> <a href="_operator_graph_8h_source.xhtml#l00071">OperatorGraph.h:71</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_elementwise_descriptor_xhtml"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_elementwise_descriptor.xhtml">arm_compute::experimental::dynamic_fusion::ElementwiseDescriptor</a></div><div class="ttdoc">Descriptor for Elementwise binary operation. </div><div class="ttdef"><b>Definition:</b> <a href="_operator_graph_8h_source.xhtml#l00182">OperatorGraph.h:182</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a59e56af19e754a6aa26a612ebf91d05fa62be47fdd89da032cf78dfce82239579"><div class="ttname"><a href="namespacearm__compute.xhtml#a59e56af19e754a6aa26a612ebf91d05fa62be47fdd89da032cf78dfce82239579">arm_compute::ErrorCode::RUNTIME_ERROR</a></div><div class="ttdoc">Generic runtime error. </div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_content_xhtml"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_content.xhtml">arm_compute::experimental::dynamic_fusion::Conv2dContent</a></div><div class="ttdef"><b>Definition:</b> <a href="_operator_graph_impl_8h_source.xhtml#l00111">OperatorGraphImpl.h:111</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_xhtml_aa47504b35a9b4a10e8af456b25b697a0"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml#aa47504b35a9b4a10e8af456b25b697a0">arm_compute::experimental::dynamic_fusion::Operator::Operator</a></div><div class="ttdeci">Operator(Id id={})</div><div class="ttdef"><b>Definition:</b> <a href="_operator_graph_8cpp_source.xhtml#l00089">OperatorGraph.cpp:89</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5">arm_compute::ACL_SRC_0</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00045">Types.h:45</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor_content_xhtml"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor_content.xhtml">arm_compute::experimental::dynamic_fusion::OpTensorContent</a></div><div class="ttdef"><b>Definition:</b> <a href="_operator_graph_impl_8h_source.xhtml#l00051">OperatorGraphImpl.h:51</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_padding2_d_xhtml_a951236a0702535ba18ba51db69428658"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_padding2_d.xhtml#a951236a0702535ba18ba51db69428658">arm_compute::experimental::dynamic_fusion::Padding2D::left</a></div><div class="ttdeci">size_t left</div><div class="ttdoc">Padding across the width dimension on the left, in elements. </div><div class="ttdef"><b>Definition:</b> <a href="_operator_graph_8h_source.xhtml#l00140">OperatorGraph.h:140</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor_content_xhtml_adfb505060334802baaf44e1239b09193"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor_content.xhtml#adfb505060334802baaf44e1239b09193">arm_compute::experimental::dynamic_fusion::OpTensorContent::get_tensor_info</a></div><div class="ttdeci">const ITensorInfo * get_tensor_info() const</div><div class="ttdef"><b>Definition:</b> <a href="_operator_graph_impl_8h_source.xhtml#l00074">OperatorGraphImpl.h:74</a></div></div>
<div class="ttc" id="classarm__compute_1_1_size2_d_xhtml_aaaeb4853150b7d0e8b685fd08052924f"><div class="ttname"><a href="classarm__compute_1_1_size2_d.xhtml#aaaeb4853150b7d0e8b685fd08052924f">arm_compute::Size2D::y</a></div><div class="ttdeci">size_t y() const</div><div class="ttdoc">Semantic accessor for height as y. </div><div class="ttdef"><b>Definition:</b> <a href="_size2_d_8h_source.xhtml#l00084">Size2D.h:84</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_descriptor_xhtml"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_conv2d_descriptor.xhtml">arm_compute::experimental::dynamic_fusion::Conv2dDescriptor</a></div><div class="ttdoc">Descriptor for Conv2dDescriptor operation. </div><div class="ttdef"><b>Definition:</b> <a href="_operator_graph_8h_source.xhtml#l00148">OperatorGraph.h:148</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0">arm_compute::ACL_SRC_1</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00046">Types.h:46</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a3f7c5a493aa563a630eaec1042f95071"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a3f7c5a493aa563a630eaec1042f95071">arm_compute::experimental::dynamic_fusion::add_op_floor</a></div><div class="ttdeci">Operator add_op_floor(OperatorGraph &amp;graph, const FloorDescriptor &amp;desc, OpTensor src, OpTensor dst)</div><div class="ttdoc">Add op Floor to graph, and optionally describes fusion through passing of intermediate OpTensor s...</div><div class="ttdef"><b>Definition:</b> <a href="_operator_graph_8cpp_source.xhtml#l00233">OperatorGraph.cpp:233</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_tensor_desc_pack_xhtml_a228484585f0c1b71ad5392081698d722"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_i_tensor_desc_pack.xhtml#a228484585f0c1b71ad5392081698d722">arm_compute::experimental::dynamic_fusion::ITensorDescPack::add_const_tensor</a></div><div class="ttdeci">void add_const_tensor(int id, const TDesc *tensor)</div><div class="ttdoc">Add const tensor to the pack. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_desc_pack_8h_source.xhtml#l00104">ITensorDescPack.h:104</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ac57b92957968088a392021cac1d2076b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a></div><div class="ttdeci">ScaleKernelInfo info(interpolation_policy, default_border_mode, PixelValue(), sampling_policy, false)</div></div>
<div class="ttc" id="_auto_configuration_8h_xhtml"><div class="ttname"><a href="_auto_configuration_8h.xhtml">AutoConfiguration.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_xhtml_abfae5a56fd8931efd58c6da23e2b2668"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml#abfae5a56fd8931efd58c6da23e2b2668">arm_compute::experimental::dynamic_fusion::OperatorGraph::OperatorGraph</a></div><div class="ttdeci">OperatorGraph()</div><div class="ttdef"><b>Definition:</b> <a href="_operator_graph_8cpp_source.xhtml#l00104">OperatorGraph.cpp:104</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a18064e0011c3869d884653e9e7c47b66"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a18064e0011c3869d884653e9e7c47b66">arm_compute::ITensorInfo::total_size</a></div><div class="ttdeci">virtual size_t total_size() const =0</div><div class="ttdoc">Returns the total size of the tensor in bytes. </div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph_xhtml_a5922b6c22c15729162e749f06f7f518c"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_dependency_graph.xhtml#a5922b6c22c15729162e749f06f7f518c">arm_compute::experimental::dynamic_fusion::DependencyGraph::add_operator</a></div><div class="ttdeci">std::pair&lt; Status, DependencyGraph::Id &gt; add_operator(const std::vector&lt; Id &gt; &amp;inputs, const std::vector&lt; Id &gt; &amp;outputs)</div><div class="ttdoc">Add a new operator. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2experimental_2dynamic__fusion_2_workload_impl_2_dependency_graph_8cpp_source.xhtml#l00103">DependencyGraph.cpp:103</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a8aad35ee7c2bfa06456fade719732d21"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a8aad35ee7c2bfa06456fade719732d21">arm_compute::experimental::dynamic_fusion::add_tensor</a></div><div class="ttdeci">OpTensor add_tensor(OperatorGraph &amp;graph, ITensorInfo &amp;info)</div><div class="ttdoc">Associate a TensorInfo with a newly created OpTensor in the graph. </div><div class="ttdef"><b>Definition:</b> <a href="_operator_graph_8cpp_source.xhtml#l00126">OperatorGraph.cpp:126</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_xhtml"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml">arm_compute::experimental::dynamic_fusion::Operator</a></div><div class="ttdoc">Operator Handle This can be used to further modify an existing operator. </div><div class="ttdef"><b>Definition:</b> <a href="_operator_graph_8h_source.xhtml#l00107">OperatorGraph.h:107</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor_xhtml_a12ba42d3b571d9f64ecd959b78fcfddf"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml#a12ba42d3b571d9f64ecd959b78fcfddf">arm_compute::experimental::dynamic_fusion::OpTensor::id</a></div><div class="ttdeci">Id id() const</div><div class="ttdoc">Id of the OpTensor. </div><div class="ttdef"><b>Definition:</b> <a href="_operator_graph_8cpp_source.xhtml#l00079">OperatorGraph.cpp:79</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_padding2_d_xhtml_ab9332a87d0af5aa12cac847eff68b7af"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_padding2_d.xhtml#ab9332a87d0af5aa12cac847eff68b7af">arm_compute::experimental::dynamic_fusion::Padding2D::top</a></div><div class="ttdeci">size_t top</div><div class="ttdoc">Padding across the height dimension on the top, in elements. </div><div class="ttdef"><b>Definition:</b> <a href="_operator_graph_8h_source.xhtml#l00142">OperatorGraph.h:142</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a540ce448c4606321a9e07595de6e4724"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a540ce448c4606321a9e07595de6e4724">arm_compute::ACL_DST_0</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00056">Types.h:56</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_ab8924eaffc5f48d813b7665ef7ffd214"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#ab8924eaffc5f48d813b7665ef7ffd214">arm_compute::experimental::dynamic_fusion::operator&lt;</a></div><div class="ttdeci">bool operator&lt;(const OpTensor &amp;t0, const OpTensor &amp;t1)</div><div class="ttdoc">Provide order of OpTensor by checking if t0 is &quot;lower than&quot; t1. </div><div class="ttdef"><b>Definition:</b> <a href="_operator_graph_8cpp_source.xhtml#l00084">OperatorGraph.cpp:84</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor_xhtml_a4304855d37d80ea9d9c0165850ebbb84"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_op_tensor.xhtml#a4304855d37d80ea9d9c0165850ebbb84">arm_compute::experimental::dynamic_fusion::OpTensor::OpTensor</a></div><div class="ttdeci">OpTensor(Id id={})</div><div class="ttdef"><b>Definition:</b> <a href="_operator_graph_8cpp_source.xhtml#l00074">OperatorGraph.cpp:74</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph_xhtml_abfc12bb496964f0d83301d79db02f510"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_graph.xhtml#abfc12bb496964f0d83301d79db02f510">arm_compute::experimental::dynamic_fusion::OperatorGraph::impl</a></div><div class="ttdeci">Implementation * impl()</div><div class="ttdef"><b>Definition:</b> <a href="_operator_graph_8cpp_source.xhtml#l00111">OperatorGraph.cpp:111</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_ac93cc76b563b366f030b8310a46046c3"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ac93cc76b563b366f030b8310a46046c3">arm_compute::misc::shape_calculator::compute_deep_convolution_shape</a></div><div class="ttdeci">TensorShape compute_deep_convolution_shape(const TensorShape &amp;input_shape, DataLayout input_data_layout, const TensorShape &amp;weights_shape, const PadStrideInfo &amp;conv_info)</div><div class="ttdoc">Calculate the deep convolution shape output shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l00713">ShapeCalculator.h:713</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a859ce0f92e55dabcfe0ce42b4d0be85e"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a859ce0f92e55dabcfe0ce42b4d0be85e">arm_compute::experimental::dynamic_fusion::add_op_conv2d</a></div><div class="ttdeci">Operator add_op_conv2d(OperatorGraph &amp;graph, const Conv2dDescriptor &amp;desc, OpTensor input, OpTensor weights, OpTensor bias, OpTensor dst)</div><div class="ttdoc">Add op Conv2d to graph. </div><div class="ttdef"><b>Definition:</b> <a href="_operator_graph_8cpp_source.xhtml#l00134">OperatorGraph.cpp:134</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_xhtml_a48a9016f32cb2b81ff5d5374690209d4"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml#a48a9016f32cb2b81ff5d5374690209d4">arm_compute::experimental::dynamic_fusion::Operator::id</a></div><div class="ttdeci">Id id() const</div><div class="ttdoc">Id of the Operator. </div><div class="ttdef"><b>Definition:</b> <a href="_operator_graph_8cpp_source.xhtml#l00094">OperatorGraph.cpp:94</a></div></div>
<div class="ttc" id="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator_xhtml_aebc5dc6e56fe725378002f1454d09978"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_operator.xhtml#aebc5dc6e56fe725378002f1454d09978">arm_compute::experimental::dynamic_fusion::Operator::Id</a></div><div class="ttdeci">int Id</div><div class="ttdef"><b>Definition:</b> <a href="_operator_graph_8h_source.xhtml#l00110">OperatorGraph.h:110</a></div></div>
<div class="ttc" id="working__space_8hpp_xhtml_a1fb7b822a92dd3ab6e7ab15c67b0ff9e"><div class="ttname"><a href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a></div><div class="ttdeci">const int32_t * bias</div><div class="ttdef"><b>Definition:</b> <a href="working__space_8hpp_source.xhtml#l00292">working_space.hpp:292</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_b7458c46e3e273561b07052265b89043.xhtml">experimental</a></li><li class="navelem"><a class="el" href="dir_4ba1de0cc05164046c8a7675a91253dd.xhtml">dynamic_fusion</a></li><li class="navelem"><a class="el" href="_operator_graph_8cpp.xhtml">OperatorGraph.cpp</a></li>
    <li class="footer">Generated on Thu Aug 18 2022 12:57:35 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
