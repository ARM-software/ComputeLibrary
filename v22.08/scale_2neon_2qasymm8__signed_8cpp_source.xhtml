<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/cpu/kernels/scale/neon/qasymm8_signed.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('scale_2neon_2qasymm8__signed_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">qasymm8_signed.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="scale_2neon_2qasymm8__signed_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2021 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="cpu_2kernels_2scale_2neon_2list_8h.xhtml">src/cpu/kernels/scale/neon/list.h</a>&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;{</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keyword">namespace</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;{</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keywordtype">void</span> qasymm8_signed_neon_scale_bilinear(<span class="keyword">const</span> ITensor *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, ITensor *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, <span class="keyword">const</span> ITensor *offsets, <span class="keyword">const</span> ITensor *dx, <span class="keyword">const</span> ITensor *dy,</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;                                        <a class="code" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> border_mode, PixelValue constant_border_value, <span class="keywordtype">float</span> sampling_offset,</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;                                        <span class="keywordtype">bool</span> align_corners, <span class="keyword">const</span> Window &amp;window)</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;{</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="comment">// Data layout is NHWC</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="comment">// Compute the ratio between source height and destination height</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> hr = <a class="code" href="namespacearm__compute_1_1scale__utils.xhtml#a8c25b29542a5312b947f72e5ea5c825b">scale_utils::calculate_resize_ratio</a>(src-&gt;info()-&gt;dimension(2), dst-&gt;info()-&gt;dimension(2), align_corners);</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    Window     win_off;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    win_off.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 0, 0));</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    win_off.set(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, Window::Dimension(0, 0, 0));</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="comment">// Don&#39;t increment in X and Y direction for the input tensor</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="comment">// A pointer to the start of this plane is needed as base for the precomputed offsets</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    Window win_in(window);</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    win_in.set(1, Window::Dimension(0, 0, 0));</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    win_in.set(2, Window::Dimension(0, 0, 0));</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> d = <a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>; d &lt; offsets-&gt;info()-&gt;num_dimensions(); ++d)</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    {</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        win_off.set(d, Window::Dimension(0, 0, 0));</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    }</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    Iterator in(src, win_in);</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    Iterator out(dst, window);</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keyword">const</span> int32_t in_dim_w = src-&gt;info()-&gt;dimension(1);</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">const</span> int32_t in_dim_h = src-&gt;info()-&gt;dimension(2);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keyword">const</span> int32_t stride_w = src-&gt;info()-&gt;strides_in_bytes()[1];</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keyword">const</span> int32_t stride_h = src-&gt;info()-&gt;strides_in_bytes()[2];</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo iq_info = src-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo oq_info = dst-&gt;info()-&gt;quantization_info().uniform();</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keywordflow">if</span>(border_mode == <a class="code" href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92">BorderMode::CONSTANT</a>)</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    {</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="keyword">const</span> int8_t const_border_value = <span class="keyword">static_cast&lt;</span>int8_t<span class="keyword">&gt;</span>(constant_border_value.get&lt;int8_t&gt;());</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> Coordinates &amp; <span class="keywordtype">id</span>)</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        {</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            <span class="keyword">const</span> int32_t index_h       = std::floor((<span class="keywordtype">id</span>[2] + sampling_offset) * hr - sampling_offset);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            <span class="keyword">const</span> int32_t index_w       = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int32_t *<span class="keyword">&gt;</span>(offsets-&gt;ptr_to_element(Coordinates(<span class="keywordtype">id</span>[1], <span class="keywordtype">id</span>[2]))));</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>    dx_val        = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(dx-&gt;ptr_to_element(Coordinates(<span class="keywordtype">id</span>[1], <span class="keywordtype">id</span>[2]))));</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>    dy_val        = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(dy-&gt;ptr_to_element(Coordinates(<span class="keywordtype">id</span>[1], <span class="keywordtype">id</span>[2]))));</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>    pixel_row_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(in.ptr());</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> a00 = (0 &lt;= index_w &amp;&amp; index_w &lt; in_dim_w &amp;&amp; 0 &lt;= index_h &amp;&amp; index_h &lt; in_dim_h) ?</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                             (*(pixel_row_ptr + index_w * stride_w + index_h * stride_h)) :</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                             const_border_value;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> a01 = (-1 &lt;= index_w &amp;&amp; index_w + 1 &lt; in_dim_w &amp;&amp; 0 &lt;= index_h &amp;&amp; index_h &lt; in_dim_h) ?</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                             (*(pixel_row_ptr + (index_w + 1) * stride_w + index_h * stride_h)) :</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                             const_border_value;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> a10 = (0 &lt;= index_w &amp;&amp; index_w &lt; in_dim_w &amp;&amp; -1 &lt;= index_h &amp;&amp; index_h &lt; in_dim_h - 1) ?</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                             (*(pixel_row_ptr + index_w * stride_w + (index_h + 1) * stride_h)) :</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                             const_border_value;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> a11 = (-1 &lt;= index_w &amp;&amp; index_w &lt; in_dim_w - 1 &amp;&amp; -1 &lt;= index_h &amp;&amp; index_h &lt; in_dim_h - 1) ?</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                             (*(pixel_row_ptr + (index_w + 1) * stride_w + (index_h + 1) * stride_h)) :</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                             const_border_value;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">float</span> inp00                      = <a class="code" href="structarm__compute_1_1_qasymm8_quantization_helper.xhtml#a912f8a4d002b2f74c071627a99469463">Qasymm8QuantizationHelper&lt;int8_t&gt;::dequantize</a>(a00, iq_info);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">float</span> inp01                      = <a class="code" href="structarm__compute_1_1_qasymm8_quantization_helper.xhtml#a912f8a4d002b2f74c071627a99469463">Qasymm8QuantizationHelper&lt;int8_t&gt;::dequantize</a>(a01, iq_info);</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">float</span> inp10                      = <a class="code" href="structarm__compute_1_1_qasymm8_quantization_helper.xhtml#a912f8a4d002b2f74c071627a99469463">Qasymm8QuantizationHelper&lt;int8_t&gt;::dequantize</a>(a10, iq_info);</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">float</span> inp11                      = <a class="code" href="structarm__compute_1_1_qasymm8_quantization_helper.xhtml#a912f8a4d002b2f74c071627a99469463">Qasymm8QuantizationHelper&lt;int8_t&gt;::dequantize</a>(a11, iq_info);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            *<span class="keyword">reinterpret_cast&lt;</span>int8_t *<span class="keyword">&gt;</span>(out.ptr()) = <a class="code" href="structarm__compute_1_1_qasymm8_quantization_helper.xhtml#a66704ef21ed85f31075f412a965b9b7b">Qasymm8QuantizationHelper&lt;int8_t&gt;::quantize</a>(<a class="code" href="namespacearm__compute_1_1scale__helpers.xhtml#aeb969d3b0e5ceb8597c39b708f0df6e8">scale_helpers::delta_bilinear</a>(inp00, inp01, inp10, inp11, dx_val, dy_val), oq_info);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        },</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        in, out);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    }</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(border_mode == <a class="code" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a4ef59320fbe90fe47d40f1f71e4c5daa">BorderMode::REPLICATE</a>)</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    {</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">execute_window_loop</a>(window, [&amp;](<span class="keyword">const</span> Coordinates &amp; <span class="keywordtype">id</span>)</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        {</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span>     index_h       = std::floor((<span class="keywordtype">id</span>[2] + sampling_offset) * hr - sampling_offset);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            <span class="keyword">const</span> int32_t index_w       = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int32_t *<span class="keyword">&gt;</span>(offsets-&gt;ptr_to_element(Coordinates(<span class="keywordtype">id</span>[1], <span class="keywordtype">id</span>[2]))));</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>    dx_val        = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(dx-&gt;ptr_to_element(Coordinates(<span class="keywordtype">id</span>[1], <span class="keywordtype">id</span>[2]))));</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>    dy_val        = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(dy-&gt;ptr_to_element(Coordinates(<span class="keywordtype">id</span>[1], <span class="keywordtype">id</span>[2]))));</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>    pixel_row_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(in.ptr());</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            <span class="keyword">auto</span> clamped_w  = utility::clamp&lt;int&gt;(index_w, 0, in_dim_w - 1);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            <span class="keyword">auto</span> clamped_w1 = utility::clamp&lt;int&gt;(index_w + 1, 0, in_dim_w - 1);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            <span class="keyword">auto</span> clamped_h  = utility::clamp&lt;int&gt;(index_h, 0, in_dim_h - 1);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            <span class="keyword">auto</span> clamped_h1 = utility::clamp&lt;int&gt;(index_h + 1, 0, in_dim_h - 1);</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> a00 = *(pixel_row_ptr + clamped_w * stride_w + clamped_h * stride_h);</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> a01 = *(pixel_row_ptr + clamped_w1 * stride_w + clamped_h * stride_h);</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> a10 = *(pixel_row_ptr + clamped_w * stride_w + clamped_h1 * stride_h);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> a11 = *(pixel_row_ptr + clamped_w1 * stride_w + clamped_h1 * stride_h);</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">float</span> inp00                      = <a class="code" href="structarm__compute_1_1_qasymm8_quantization_helper.xhtml#a912f8a4d002b2f74c071627a99469463">Qasymm8QuantizationHelper&lt;int8_t&gt;::dequantize</a>(a00, iq_info);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">float</span> inp01                      = <a class="code" href="structarm__compute_1_1_qasymm8_quantization_helper.xhtml#a912f8a4d002b2f74c071627a99469463">Qasymm8QuantizationHelper&lt;int8_t&gt;::dequantize</a>(a01, iq_info);</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">float</span> inp10                      = <a class="code" href="structarm__compute_1_1_qasymm8_quantization_helper.xhtml#a912f8a4d002b2f74c071627a99469463">Qasymm8QuantizationHelper&lt;int8_t&gt;::dequantize</a>(a10, iq_info);</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">float</span> inp11                      = <a class="code" href="structarm__compute_1_1_qasymm8_quantization_helper.xhtml#a912f8a4d002b2f74c071627a99469463">Qasymm8QuantizationHelper&lt;int8_t&gt;::dequantize</a>(a11, iq_info);</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            *<span class="keyword">reinterpret_cast&lt;</span>int8_t *<span class="keyword">&gt;</span>(out.ptr()) = <a class="code" href="structarm__compute_1_1_qasymm8_quantization_helper.xhtml#a66704ef21ed85f31075f412a965b9b7b">Qasymm8QuantizationHelper&lt;int8_t&gt;::quantize</a>(<a class="code" href="namespacearm__compute_1_1scale__helpers.xhtml#aeb969d3b0e5ceb8597c39b708f0df6e8">scale_helpers::delta_bilinear</a>(inp00, inp01, inp10, inp11, dx_val, dy_val), oq_info);</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        },</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        in, out);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    }</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    {</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Not implemented&quot;</span>);</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    }</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;}</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;}</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="keyword">namespace </span>cpu</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;{</div><div class="line"><a name="l00131"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a5afa676c133f2bd00b896680e5176cd4">  131</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a5afa676c133f2bd00b896680e5176cd4">qasymm8_signed_neon_scale</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *offsets, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dx, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dy,</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                               <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a> policy, <a class="code" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> border_mode, <a class="code" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> constant_border_value, <span class="keywordtype">float</span> sampling_offset,</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                               <span class="keywordtype">bool</span> align_corners, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;{</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keywordflow">if</span>(policy == <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9aad6fddf718ad19b063e02fdd7e8e3e65">InterpolationPolicy::BILINEAR</a>)</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    {</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        qasymm8_signed_neon_scale_bilinear(src, dst, offsets, dx, dy, border_mode, constant_border_value, sampling_offset, align_corners, window);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    }</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(policy == <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2">InterpolationPolicy::NEAREST_NEIGHBOR</a>)</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    {</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        nearest_neon_scale&lt;int8_t&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, offsets, sampling_offset, align_corners, window);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    }</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;}</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;} <span class="comment">// namespace cpu</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="ttc" id="namespacearm__compute_xhtml_a15a05537a472ee742404821851529327"><div class="ttname"><a href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">arm_compute::BorderMode</a></div><div class="ttdeci">BorderMode</div><div class="ttdoc">Methods available to handle borders. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00274">Types.h:274</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pixel_value_xhtml"><div class="ttname"><a href="classarm__compute_1_1_pixel_value.xhtml">arm_compute::PixelValue</a></div><div class="ttdoc">Class describing the value of a pixel for any image format. </div><div class="ttdef"><b>Definition:</b> <a href="_pixel_value_8h_source.xhtml#l00034">PixelValue.h:34</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a966a9c417ce5e94dca08d9b5e745c0c9"><div class="ttname"><a href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">arm_compute::InterpolationPolicy</a></div><div class="ttdeci">InterpolationPolicy</div><div class="ttdoc">Interpolation method. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00411">Types.h:411</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00352">Error.h:352</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a966a9c417ce5e94dca08d9b5e745c0c9aad6fddf718ad19b063e02fdd7e8e3e65"><div class="ttname"><a href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9aad6fddf718ad19b063e02fdd7e8e3e65">arm_compute::InterpolationPolicy::BILINEAR</a></div><div class="ttdoc">Output values are defined by bilinear interpolation between the pixels. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2"><div class="ttname"><a href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2">arm_compute::InterpolationPolicy::NEAREST_NEIGHBOR</a></div><div class="ttdoc">Output values are defined to match the source pixel whose center is nearest to the sample position...</div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml">arm_compute::ITensor</a></div><div class="ttdoc">Interface for CPU tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_8h_source.xhtml#l00036">ITensor.h:36</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2022 Arm Limited. </div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="structarm__compute_1_1_qasymm8_quantization_helper_xhtml_a66704ef21ed85f31075f412a965b9b7b"><div class="ttname"><a href="structarm__compute_1_1_qasymm8_quantization_helper.xhtml#a66704ef21ed85f31075f412a965b9b7b">arm_compute::Qasymm8QuantizationHelper::quantize</a></div><div class="ttdeci">static QUANTIZED_TYPE quantize(float value, const UniformQuantizationInfo &amp;qinfo)</div><div class="ttdoc">Quantize a value given a 8-bit asymmetric quantization scheme. </div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00225">QuantizationInfo.h:225</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_aa96e81276ee4f87ab386cd05a5539a7d"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">arm_compute::Window::DimX</a></div><div class="ttdeci">static constexpr size_t DimX</div><div class="ttdoc">Alias for dimension 0 also known as X dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00043">Window.h:43</a></div></div>
<div class="ttc" id="cpu_2kernels_2scale_2neon_2list_8h_xhtml"><div class="ttname"><a href="cpu_2kernels_2scale_2neon_2list_8h.xhtml">list.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a5afa676c133f2bd00b896680e5176cd4"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a5afa676c133f2bd00b896680e5176cd4">arm_compute::cpu::qasymm8_signed_neon_scale</a></div><div class="ttdeci">void qasymm8_signed_neon_scale(const ITensor *src, ITensor *dst, const ITensor *offsets, const ITensor *dx, const ITensor *dy, InterpolationPolicy policy, BorderMode border_mode, PixelValue constant_border_value, float sampling_offset, bool align_corners, const Window &amp;window)</div><div class="ttdef"><b>Definition:</b> <a href="scale_2neon_2qasymm8__signed_8cpp_source.xhtml#l00131">qasymm8_signed.cpp:131</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_ad2d402364fa822b0b7775081291eeca9"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">arm_compute::Window::DimY</a></div><div class="ttdeci">static constexpr size_t DimY</div><div class="ttdoc">Alias for dimension 1 also known as Y dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00045">Window.h:45</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_a893d17b56b9abc4423ce26e9a24ac5dc"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">arm_compute::Window::DimZ</a></div><div class="ttdeci">static constexpr size_t DimZ</div><div class="ttdoc">Alias for dimension 2 also known as Z dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00047">Window.h:47</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92"><div class="ttname"><a href="namespacearm__compute.xhtml#a14d24d90ab4ba2956e92e27890ba4c91a8d6b5cada83510220f59e00ce86d4d92">arm_compute::PaddingMode::CONSTANT</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a15a05537a472ee742404821851529327a4ef59320fbe90fe47d40f1f71e4c5daa"><div class="ttname"><a href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a4ef59320fbe90fe47d40f1f71e4c5daa">arm_compute::BorderMode::REPLICATE</a></div><div class="ttdoc">Pixels outside the image are assumed to have the same value as the closest image pixel. </div></div>
<div class="ttc" id="structarm__compute_1_1_qasymm8_quantization_helper_xhtml_a912f8a4d002b2f74c071627a99469463"><div class="ttname"><a href="structarm__compute_1_1_qasymm8_quantization_helper.xhtml#a912f8a4d002b2f74c071627a99469463">arm_compute::Qasymm8QuantizationHelper::dequantize</a></div><div class="ttdeci">static float dequantize(QUANTIZED_TYPE value, const UniformQuantizationInfo &amp;qinfo)</div><div class="ttdoc">Dequantize a value given a 8-bit asymmetric quantization scheme. </div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00275">QuantizationInfo.h:275</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5002bf7ec46d52971f9526e94172cfee"><div class="ttname"><a href="namespacearm__compute.xhtml#a5002bf7ec46d52971f9526e94172cfee">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;... iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00077">Helpers.inl:77</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1scale__utils_xhtml_a8c25b29542a5312b947f72e5ea5c825b"><div class="ttname"><a href="namespacearm__compute_1_1scale__utils.xhtml#a8c25b29542a5312b947f72e5ea5c825b">arm_compute::scale_utils::calculate_resize_ratio</a></div><div class="ttdeci">float calculate_resize_ratio(size_t input_size, size_t output_size, bool align_corners=false)</div><div class="ttdoc">Returns resize ratio between input and output with consideration of aligned corners. </div><div class="ttdef"><b>Definition:</b> <a href="_scale_utils_8cpp_source.xhtml#l00027">ScaleUtils.cpp:27</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1scale__helpers_xhtml_aeb969d3b0e5ceb8597c39b708f0df6e8"><div class="ttname"><a href="namespacearm__compute_1_1scale__helpers.xhtml#aeb969d3b0e5ceb8597c39b708f0df6e8">arm_compute::scale_helpers::delta_bilinear</a></div><div class="ttdeci">float delta_bilinear(float a00, float a01, float a10, float a11, float dx_val, float dy_val)</div><div class="ttdoc">Computes bilinear interpolation using the top-left, top-right, bottom-left, bottom-right pixels and t...</div><div class="ttdef"><b>Definition:</b> <a href="_scale_helpers_8h_source.xhtml#l00186">ScaleHelpers.h:186</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml">arm_compute::Window</a></div><div class="ttdoc">Describe a multidimensional execution window. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00039">Window.h:39</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_2c61f424fd391396db977702a2beee9a.xhtml">cpu</a></li><li class="navelem"><a class="el" href="dir_1de7bcbbdec2bf3559cb3c688662d4f5.xhtml">kernels</a></li><li class="navelem"><a class="el" href="dir_d124c31da0c35b9984b69db8d6578477.xhtml">scale</a></li><li class="navelem"><a class="el" href="dir_5e9e7712b7f30b8f985deeedb9292b59.xhtml">neon</a></li><li class="navelem"><a class="el" href="scale_2neon_2qasymm8__signed_8cpp.xhtml">qasymm8_signed.cpp</a></li>
    <li class="footer">Generated on Thu Aug 18 2022 12:57:37 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
