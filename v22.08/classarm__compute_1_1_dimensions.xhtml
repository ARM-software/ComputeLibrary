<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: Dimensions&lt; T &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarm__compute_1_1_dimensions.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-attribs">Static Public Attributes</a>  </div>
  <div class="headertitle">
<div class="title">Dimensions&lt; T &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><a class="el" href="classarm__compute_1_1_dimensions.xhtml" title="Dimensions with dimensionality. ">Dimensions</a> with dimensionality.  
 <a href="classarm__compute_1_1_dimensions.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_dimensions_8h_source.xhtml">Dimensions.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a669af0de951a474c4b443f7bc7c026e0"><td class="memTemplParams" colspan="2">template&lt;typename... Ts&gt; </td></tr>
<tr class="memitem:a669af0de951a474c4b443f7bc7c026e0"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_dimensions.xhtml#a669af0de951a474c4b443f7bc7c026e0">Dimensions</a> (Ts... dims)</td></tr>
<tr class="memdesc:a669af0de951a474c4b443f7bc7c026e0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor to initialize the tensor shape.  <a href="#a669af0de951a474c4b443f7bc7c026e0">More...</a><br /></td></tr>
<tr class="separator:a669af0de951a474c4b443f7bc7c026e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0d3c59537291735849c740364496a41c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_dimensions.xhtml#a0d3c59537291735849c740364496a41c">Dimensions</a> (const <a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a> &amp;)=default</td></tr>
<tr class="memdesc:a0d3c59537291735849c740364496a41c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be copy constructed.  <a href="#a0d3c59537291735849c740364496a41c">More...</a><br /></td></tr>
<tr class="separator:a0d3c59537291735849c740364496a41c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2c96e96e2d005b4a8b66c2acd1688903"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_dimensions.xhtml#a2c96e96e2d005b4a8b66c2acd1688903">operator=</a> (const <a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a> &amp;)=default</td></tr>
<tr class="memdesc:a2c96e96e2d005b4a8b66c2acd1688903"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be copied.  <a href="#a2c96e96e2d005b4a8b66c2acd1688903">More...</a><br /></td></tr>
<tr class="separator:a2c96e96e2d005b4a8b66c2acd1688903"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2c609345b3b6fa8da2486f75fff8ed8"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_dimensions.xhtml#aa2c609345b3b6fa8da2486f75fff8ed8">Dimensions</a> (<a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:aa2c609345b3b6fa8da2486f75fff8ed8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be move constructed.  <a href="#aa2c609345b3b6fa8da2486f75fff8ed8">More...</a><br /></td></tr>
<tr class="separator:aa2c609345b3b6fa8da2486f75fff8ed8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a80565e11a35c48747bcc2cba06931e20"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_dimensions.xhtml#a80565e11a35c48747bcc2cba06931e20">operator=</a> (<a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:a80565e11a35c48747bcc2cba06931e20"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be moved.  <a href="#a80565e11a35c48747bcc2cba06931e20">More...</a><br /></td></tr>
<tr class="separator:a80565e11a35c48747bcc2cba06931e20"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a71d9685536fceae3487102a0cc105397"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_dimensions.xhtml#a71d9685536fceae3487102a0cc105397">set</a> (size_t dimension, T value, bool increase_dim_unit=true)</td></tr>
<tr class="memdesc:a71d9685536fceae3487102a0cc105397"><td class="mdescLeft">&#160;</td><td class="mdescRight">Accessor to set the value of one of the dimensions.  <a href="#a71d9685536fceae3487102a0cc105397">More...</a><br /></td></tr>
<tr class="separator:a71d9685536fceae3487102a0cc105397"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa87f8fc26981b0f3228a78c83b95b802"><td class="memItemLeft" align="right" valign="top">T&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_dimensions.xhtml#aa87f8fc26981b0f3228a78c83b95b802">x</a> () const</td></tr>
<tr class="memdesc:aa87f8fc26981b0f3228a78c83b95b802"><td class="mdescLeft">&#160;</td><td class="mdescRight">Alias to access the size of the first dimension.  <a href="#aa87f8fc26981b0f3228a78c83b95b802">More...</a><br /></td></tr>
<tr class="separator:aa87f8fc26981b0f3228a78c83b95b802"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac4a1050be02b20b3f791b9a483f3abe2"><td class="memItemLeft" align="right" valign="top">T&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_dimensions.xhtml#ac4a1050be02b20b3f791b9a483f3abe2">y</a> () const</td></tr>
<tr class="memdesc:ac4a1050be02b20b3f791b9a483f3abe2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Alias to access the size of the second dimension.  <a href="#ac4a1050be02b20b3f791b9a483f3abe2">More...</a><br /></td></tr>
<tr class="separator:ac4a1050be02b20b3f791b9a483f3abe2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb29a685080e999c2a0cb874d2f7bb5a"><td class="memItemLeft" align="right" valign="top">T&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_dimensions.xhtml#abb29a685080e999c2a0cb874d2f7bb5a">z</a> () const</td></tr>
<tr class="memdesc:abb29a685080e999c2a0cb874d2f7bb5a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Alias to access the size of the third dimension.  <a href="#abb29a685080e999c2a0cb874d2f7bb5a">More...</a><br /></td></tr>
<tr class="separator:abb29a685080e999c2a0cb874d2f7bb5a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1de8262b54af91014549e2088519d536"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_dimensions.xhtml#a1de8262b54af91014549e2088519d536">increment</a> (size_t dim, T step=1)</td></tr>
<tr class="memdesc:a1de8262b54af91014549e2088519d536"><td class="mdescLeft">&#160;</td><td class="mdescRight">Increments the given dimension by a step size, avoiding overflows.  <a href="#a1de8262b54af91014549e2088519d536">More...</a><br /></td></tr>
<tr class="separator:a1de8262b54af91014549e2088519d536"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a08834d57877df4172a35bccc6719ab3a"><td class="memItemLeft" align="right" valign="top">const T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_dimensions.xhtml#a08834d57877df4172a35bccc6719ab3a">operator[]</a> (size_t dimension) const</td></tr>
<tr class="memdesc:a08834d57877df4172a35bccc6719ab3a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generic accessor to get the size of any dimension.  <a href="#a08834d57877df4172a35bccc6719ab3a">More...</a><br /></td></tr>
<tr class="separator:a08834d57877df4172a35bccc6719ab3a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac88390e0a6503d5d09c65d204980beb1"><td class="memItemLeft" align="right" valign="top">T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_dimensions.xhtml#ac88390e0a6503d5d09c65d204980beb1">operator[]</a> (size_t dimension)</td></tr>
<tr class="memdesc:ac88390e0a6503d5d09c65d204980beb1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generic accessor to get the size of any dimension.  <a href="#ac88390e0a6503d5d09c65d204980beb1">More...</a><br /></td></tr>
<tr class="separator:ac88390e0a6503d5d09c65d204980beb1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a80a5f2d6e3a697c9aad893a3b4242615"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">num_dimensions</a> () const</td></tr>
<tr class="memdesc:a80a5f2d6e3a697c9aad893a3b4242615"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the effective dimensionality of the tensor.  <a href="#a80a5f2d6e3a697c9aad893a3b4242615">More...</a><br /></td></tr>
<tr class="separator:a80a5f2d6e3a697c9aad893a3b4242615"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a810a78f0b7cc0270f38d4136e023ea3b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_dimensions.xhtml#a810a78f0b7cc0270f38d4136e023ea3b">set_num_dimensions</a> (size_t <a class="el" href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">num_dimensions</a>)</td></tr>
<tr class="memdesc:a810a78f0b7cc0270f38d4136e023ea3b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set number of dimensions.  <a href="#a810a78f0b7cc0270f38d4136e023ea3b">More...</a><br /></td></tr>
<tr class="separator:a810a78f0b7cc0270f38d4136e023ea3b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c265a91027decdda59e5086c550d0f7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_dimensions.xhtml#a0c265a91027decdda59e5086c550d0f7">collapse</a> (const size_t n, const size_t first=0)</td></tr>
<tr class="memdesc:a0c265a91027decdda59e5086c550d0f7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Collapse dimensions.  <a href="#a0c265a91027decdda59e5086c550d0f7">More...</a><br /></td></tr>
<tr class="separator:a0c265a91027decdda59e5086c550d0f7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a112cc1d5093b7672bf11569659251a7c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_dimensions.xhtml#a112cc1d5093b7672bf11569659251a7c">collapse_from</a> (size_t start)</td></tr>
<tr class="memdesc:a112cc1d5093b7672bf11569659251a7c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Collapse dimensions starting from a given point.  <a href="#a112cc1d5093b7672bf11569659251a7c">More...</a><br /></td></tr>
<tr class="separator:a112cc1d5093b7672bf11569659251a7c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3e0f41c0e7278cadd08bf9216623ada3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_dimensions.xhtml#a3e0f41c0e7278cadd08bf9216623ada3">remove</a> (size_t idx)</td></tr>
<tr class="memdesc:a3e0f41c0e7278cadd08bf9216623ada3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Remove dimension of a given index.  <a href="#a3e0f41c0e7278cadd08bf9216623ada3">More...</a><br /></td></tr>
<tr class="separator:a3e0f41c0e7278cadd08bf9216623ada3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab2878b67ca384a699c1270900b31290b"><td class="memItemLeft" align="right" valign="top">std::array&lt; T, <a class="el" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">num_max_dimensions</a> &gt;::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_dimensions.xhtml#ab2878b67ca384a699c1270900b31290b">begin</a> ()</td></tr>
<tr class="memdesc:ab2878b67ca384a699c1270900b31290b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a read/write iterator that points to the first element in the dimension array.  <a href="#ab2878b67ca384a699c1270900b31290b">More...</a><br /></td></tr>
<tr class="separator:ab2878b67ca384a699c1270900b31290b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab3821c007799102f18ef1cf4ec88be9c"><td class="memItemLeft" align="right" valign="top">std::array&lt; T, <a class="el" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">num_max_dimensions</a> &gt;::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_dimensions.xhtml#ab3821c007799102f18ef1cf4ec88be9c">begin</a> () const</td></tr>
<tr class="memdesc:ab3821c007799102f18ef1cf4ec88be9c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a read-only (constant) iterator that points to the first element in the dimension array.  <a href="#ab3821c007799102f18ef1cf4ec88be9c">More...</a><br /></td></tr>
<tr class="separator:ab3821c007799102f18ef1cf4ec88be9c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8c9efb4e1ad142d58d65af400f20217d"><td class="memItemLeft" align="right" valign="top">std::array&lt; T, <a class="el" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">num_max_dimensions</a> &gt;::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_dimensions.xhtml#a8c9efb4e1ad142d58d65af400f20217d">cbegin</a> () const</td></tr>
<tr class="memdesc:a8c9efb4e1ad142d58d65af400f20217d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a read-only (constant) iterator that points to the first element in the dimension array.  <a href="#a8c9efb4e1ad142d58d65af400f20217d">More...</a><br /></td></tr>
<tr class="separator:a8c9efb4e1ad142d58d65af400f20217d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac684b52c6197edff9cccb3abd1e41f59"><td class="memItemLeft" align="right" valign="top">std::array&lt; T, <a class="el" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">num_max_dimensions</a> &gt;::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_dimensions.xhtml#ac684b52c6197edff9cccb3abd1e41f59">end</a> ()</td></tr>
<tr class="memdesc:ac684b52c6197edff9cccb3abd1e41f59"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a read/write iterator that points one past the last element in the dimension array.  <a href="#ac684b52c6197edff9cccb3abd1e41f59">More...</a><br /></td></tr>
<tr class="separator:ac684b52c6197edff9cccb3abd1e41f59"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abfb712208ab2802329e9b75c0c61469f"><td class="memItemLeft" align="right" valign="top">std::array&lt; T, <a class="el" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">num_max_dimensions</a> &gt;::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_dimensions.xhtml#abfb712208ab2802329e9b75c0c61469f">end</a> () const</td></tr>
<tr class="memdesc:abfb712208ab2802329e9b75c0c61469f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a read-only (constant) iterator that points one past the last element in the dimension array.  <a href="#abfb712208ab2802329e9b75c0c61469f">More...</a><br /></td></tr>
<tr class="separator:abfb712208ab2802329e9b75c0c61469f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afde273ebfa15fe83c690ad5cf6693c9f"><td class="memItemLeft" align="right" valign="top">std::array&lt; T, <a class="el" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">num_max_dimensions</a> &gt;::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_dimensions.xhtml#afde273ebfa15fe83c690ad5cf6693c9f">cend</a> () const</td></tr>
<tr class="memdesc:afde273ebfa15fe83c690ad5cf6693c9f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a read-only (constant) iterator that points one past the last element in the dimension array.  <a href="#afde273ebfa15fe83c690ad5cf6693c9f">More...</a><br /></td></tr>
<tr class="separator:afde273ebfa15fe83c690ad5cf6693c9f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-attribs"></a>
Static Public Attributes</h2></td></tr>
<tr class="memitem:a1b67d5b720119d50faa286c774579ecc"><td class="memItemLeft" align="right" valign="top">static constexpr size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">num_max_dimensions</a> = <a class="el" href="namespacearm__compute.xhtml#a769d636d7a3c7c84579a5f477a18bc9d">MAX_DIMS</a></td></tr>
<tr class="memdesc:a1b67d5b720119d50faa286c774579ecc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Number of dimensions the tensor has.  <a href="#a1b67d5b720119d50faa286c774579ecc">More...</a><br /></td></tr>
<tr class="separator:a1b67d5b720119d50faa286c774579ecc"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;typename T&gt;<br />
class arm_compute::Dimensions&lt; T &gt;</h3>

<p><a class="el" href="classarm__compute_1_1_dimensions.xhtml" title="Dimensions with dimensionality. ">Dimensions</a> with dimensionality. </p>

<p class="definition">Definition at line <a class="el" href="_dimensions_8h_source.xhtml#l00042">42</a> of file <a class="el" href="_dimensions_8h_source.xhtml">Dimensions.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a669af0de951a474c4b443f7bc7c026e0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a669af0de951a474c4b443f7bc7c026e0">&#9670;&nbsp;</a></span>Dimensions() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a> </td>
          <td>(</td>
          <td class="paramtype">Ts...&#160;</td>
          <td class="paramname"><em>dims</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Constructor to initialize the tensor shape. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dims</td><td>Values to initialize the dimensions. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_dimensions_8h_source.xhtml#l00053">53</a> of file <a class="el" href="_dimensions_8h_source.xhtml">Dimensions.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dimensions_8h_source.xhtml#l00053">Dimensions&lt; size_t &gt;::Dimensions()</a>.</p>
<div class="fragment"><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        : _id{ { <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(dims)... } }, _num_dimensions{ <span class="keyword">sizeof</span>...(dims) }</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    {</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a0d3c59537291735849c740364496a41c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0d3c59537291735849c740364496a41c">&#9670;&nbsp;</a></span>Dimensions() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allow instances of this class to be copy constructed. </p>

</div>
</div>
<a id="aa2c609345b3b6fa8da2486f75fff8ed8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa2c609345b3b6fa8da2486f75fff8ed8">&#9670;&nbsp;</a></span>Dimensions() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a>&lt; T &gt; &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allow instances of this class to be move constructed. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="ab2878b67ca384a699c1270900b31290b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab2878b67ca384a699c1270900b31290b">&#9670;&nbsp;</a></span>begin() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::array&lt;T, <a class="el" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">num_max_dimensions</a>&gt;::iterator begin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns a read/write iterator that points to the first element in the dimension array. </p>
<dl class="section return"><dt>Returns</dt><dd>an iterator. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_dimensions_8h_source.xhtml#l00215">215</a> of file <a class="el" href="_dimensions_8h_source.xhtml">Dimensions.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="_shape_calculator_8h_source.xhtml#l00051">arm_compute::misc::shape_calculator::calculate_reduce_mean_shape()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00231">Dimensions&lt; size_t &gt;::cbegin()</a>, <a class="el" href="_n_e_reduce_mean_8cpp_source.xhtml#l00114">NEReduceMean::configure()</a>, <a class="el" href="_c_l_reduce_mean_8cpp_source.xhtml#l00114">CLReduceMean::configure()</a>, <a class="el" href="arm__compute_2core_2_helpers_8h_source.xhtml#l00125">arm_compute::permute()</a>, and <a class="el" href="arm__compute_2core_2_utils_8h_source.xhtml#l00728">arm_compute::permute_strides()</a>.</p>
<div class="fragment"><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    {</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        <span class="keywordflow">return</span> _id.begin();</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="ab3821c007799102f18ef1cf4ec88be9c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab3821c007799102f18ef1cf4ec88be9c">&#9670;&nbsp;</a></span>begin() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::array&lt;T, <a class="el" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">num_max_dimensions</a>&gt;::const_iterator begin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns a read-only (constant) iterator that points to the first element in the dimension array. </p>
<dl class="section return"><dt>Returns</dt><dd>an iterator. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_dimensions_8h_source.xhtml#l00223">223</a> of file <a class="el" href="_dimensions_8h_source.xhtml">Dimensions.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    {</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        <span class="keywordflow">return</span> _id.begin();</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a8c9efb4e1ad142d58d65af400f20217d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8c9efb4e1ad142d58d65af400f20217d">&#9670;&nbsp;</a></span>cbegin()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::array&lt;T, <a class="el" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">num_max_dimensions</a>&gt;::const_iterator cbegin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns a read-only (constant) iterator that points to the first element in the dimension array. </p>
<dl class="section return"><dt>Returns</dt><dd>an iterator. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_dimensions_8h_source.xhtml#l00231">231</a> of file <a class="el" href="_dimensions_8h_source.xhtml">Dimensions.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_fully_connected_8cpp_source.xhtml#l00227">ClFullyConnected::configure()</a>, <a class="el" href="_cpu_fully_connected_8cpp_source.xhtml#l00234">CpuFullyConnected::configure()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00276">arm_compute::operator==()</a>, <a class="el" href="_slice_operations_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::slice()</a>, <a class="el" href="_slice_operations_8cpp_source.xhtml#l00080">arm_compute::test::validation::reference::strided_slice()</a>, <a class="el" href="_cl_fully_connected_8cpp_source.xhtml#l00328">ClFullyConnected::validate()</a>, <a class="el" href="_cpu_fully_connected_8cpp_source.xhtml#l00354">CpuFullyConnected::validate()</a>, <a class="el" href="_n_e_slice_8cpp_source.xhtml#l00050">NESlice::validate()</a>, and <a class="el" href="_c_l_slice_8cpp_source.xhtml#l00050">CLSlice::validate()</a>.</p>
<div class="fragment"><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    {</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_dimensions.xhtml#ab2878b67ca384a699c1270900b31290b">begin</a>();</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    }</div><div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_ab2878b67ca384a699c1270900b31290b"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#ab2878b67ca384a699c1270900b31290b">arm_compute::Dimensions::begin</a></div><div class="ttdeci">std::array&lt; T, num_max_dimensions &gt;::iterator begin()</div><div class="ttdoc">Returns a read/write iterator that points to the first element in the dimension array. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00215">Dimensions.h:215</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="afde273ebfa15fe83c690ad5cf6693c9f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afde273ebfa15fe83c690ad5cf6693c9f">&#9670;&nbsp;</a></span>cend()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::array&lt;T, <a class="el" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">num_max_dimensions</a>&gt;::const_iterator cend </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns a read-only (constant) iterator that points one past the last element in the dimension array. </p>
<dl class="section return"><dt>Returns</dt><dd>an iterator. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_dimensions_8h_source.xhtml#l00255">255</a> of file <a class="el" href="_dimensions_8h_source.xhtml">Dimensions.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_fully_connected_8cpp_source.xhtml#l00227">ClFullyConnected::configure()</a>, <a class="el" href="_cpu_fully_connected_8cpp_source.xhtml#l00234">CpuFullyConnected::configure()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00276">arm_compute::operator==()</a>, <a class="el" href="_cl_fully_connected_8cpp_source.xhtml#l00328">ClFullyConnected::validate()</a>, and <a class="el" href="_cpu_fully_connected_8cpp_source.xhtml#l00354">CpuFullyConnected::validate()</a>.</p>
<div class="fragment"><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    {</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_dimensions.xhtml#ac684b52c6197edff9cccb3abd1e41f59">end</a>();</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    }</div><div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_ac684b52c6197edff9cccb3abd1e41f59"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#ac684b52c6197edff9cccb3abd1e41f59">arm_compute::Dimensions::end</a></div><div class="ttdeci">std::array&lt; T, num_max_dimensions &gt;::iterator end()</div><div class="ttdoc">Returns a read/write iterator that points one past the last element in the dimension array...</div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00239">Dimensions.h:239</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0c265a91027decdda59e5086c550d0f7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0c265a91027decdda59e5086c550d0f7">&#9670;&nbsp;</a></span>collapse()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void collapse </td>
          <td>(</td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>first</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Collapse dimensions. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">n</td><td>Number of dimensions to collapse into <code>first</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">first</td><td><a class="el" href="classarm__compute_1_1_dimensions.xhtml" title="Dimensions with dimensionality. ">Dimensions</a> into which the following <code>n</code> are collapsed. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_dimensions_8h_source.xhtml#l00159">159</a> of file <a class="el" href="_dimensions_8h_source.xhtml">Dimensions.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tensor_shape_8h_source.xhtml#l00133">TensorShape::collapse()</a>, and <a class="el" href="_dimensions_8h_source.xhtml#l00183">Dimensions&lt; size_t &gt;::collapse_from()</a>.</p>
<div class="fragment"><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    {</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(first + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a> &gt; _id.size());</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">size_t</span> last = std::min(_num_dimensions, first + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a>);</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <span class="keywordflow">if</span>(last &gt; (first + 1))</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        {</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            <span class="comment">// Collapse dimensions into the first</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            _id[first] = <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a48e7832f8e28c3f7fc0ded12467f8bb0">std::accumulate</a>(&amp;_id[first], &amp;_id[last], 1, std::multiplies&lt;T&gt;());</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            <span class="comment">// Shift the remaining dimensions down</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#ad9000ce99b9ffcec5722cade36d7e757">std::copy</a>(&amp;_id[last], &amp;_id[_num_dimensions], &amp;_id[first + 1]);</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            <span class="comment">// Reduce the number of dimensions</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">size_t</span> old_num_dimensions = _num_dimensions;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            _num_dimensions -= last - first - 1;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            <span class="comment">// Fill the now empty dimensions with zero</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1utils.xhtml#aba1951c4bc7afc65e9ef8b1b2c194b94">std::fill</a>(&amp;_id[_num_dimensions], &amp;_id[old_num_dimensions], 0);</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        }</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    }</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1utils_xhtml_aba1951c4bc7afc65e9ef8b1b2c194b94"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1utils.xhtml#aba1951c4bc7afc65e9ef8b1b2c194b94">arm_compute::test::validation::utils::fill</a></div><div class="ttdeci">void fill(U &amp;&amp;tensor, int seed, AssetsLibrary *library)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_c_l_2_u_n_i_t_2dynamic__fusion_2_utils_8h_source.xhtml#l00055">Utils.h:55</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_ad9000ce99b9ffcec5722cade36d7e757"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#ad9000ce99b9ffcec5722cade36d7e757">arm_compute::test::validation::reference::copy</a></div><div class="ttdeci">SimpleTensor&lt; T &gt; copy(const SimpleTensor&lt; T &gt; &amp;src, const TensorShape &amp;output_shape)</div><div class="ttdef"><b>Definition:</b> <a href="reference_2_copy_8cpp_source.xhtml#l00037">Copy.cpp:37</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_a48e7832f8e28c3f7fc0ded12467f8bb0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a48e7832f8e28c3f7fc0ded12467f8bb0">arm_compute::test::validation::reference::accumulate</a></div><div class="ttdeci">SimpleTensor&lt; T2 &gt; accumulate(const SimpleTensor&lt; T1 &gt; &amp;src, DataType output_data_type)</div><div class="ttdef"><b>Definition:</b> <a href="_accumulate_8cpp_source.xhtml#l00038">Accumulate.cpp:38</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a47196b5f5be413bedc213df1640c19cb"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">arm_compute::test::validation::n</a></div><div class="ttdeci">const unsigned int n</div><div class="ttdef"><b>Definition:</b> <a href="_g_e_m_m_matrix_multiply_native_8cpp_source.xhtml#l00360">GEMMMatrixMultiplyNative.cpp:360</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a112cc1d5093b7672bf11569659251a7c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a112cc1d5093b7672bf11569659251a7c">&#9670;&nbsp;</a></span>collapse_from()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void collapse_from </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>start</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Collapse dimensions starting from a given point. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">start</td><td>Starting point of collapsing dimensions </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_dimensions_8h_source.xhtml#l00183">183</a> of file <a class="el" href="_dimensions_8h_source.xhtml">Dimensions.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="_shape_calculator_8h_source.xhtml#l00579">arm_compute::misc::shape_calculator::compute_softmax_shape()</a>.</p>
<div class="fragment"><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    {</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(start &gt; <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">num_dimensions</a>());</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a0c265a91027decdda59e5086c550d0f7">collapse</a>(<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">num_dimensions</a>() - start, start);</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    }</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a0c265a91027decdda59e5086c550d0f7"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a0c265a91027decdda59e5086c550d0f7">arm_compute::Dimensions::collapse</a></div><div class="ttdeci">void collapse(const size_t n, const size_t first=0)</div><div class="ttdoc">Collapse dimensions. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00159">Dimensions.h:159</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a80a5f2d6e3a697c9aad893a3b4242615"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">arm_compute::Dimensions::num_dimensions</a></div><div class="ttdeci">unsigned int num_dimensions() const</div><div class="ttdoc">Returns the effective dimensionality of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00143">Dimensions.h:143</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac684b52c6197edff9cccb3abd1e41f59"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac684b52c6197edff9cccb3abd1e41f59">&#9670;&nbsp;</a></span>end() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::array&lt;T, <a class="el" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">num_max_dimensions</a>&gt;::iterator end </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns a read/write iterator that points one past the last element in the dimension array. </p>
<dl class="section return"><dt>Returns</dt><dd>an iterator. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_dimensions_8h_source.xhtml#l00239">239</a> of file <a class="el" href="_dimensions_8h_source.xhtml">Dimensions.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="_dimensions_8h_source.xhtml#l00255">Dimensions&lt; size_t &gt;::cend()</a>, <a class="el" href="arm__compute_2core_2_helpers_8h_source.xhtml#l00125">arm_compute::permute()</a>, and <a class="el" href="arm__compute_2core_2_utils_8h_source.xhtml#l00728">arm_compute::permute_strides()</a>.</p>
<div class="fragment"><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    {</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        <span class="keywordflow">return</span> _id.end();</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="abfb712208ab2802329e9b75c0c61469f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abfb712208ab2802329e9b75c0c61469f">&#9670;&nbsp;</a></span>end() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::array&lt;T, <a class="el" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">num_max_dimensions</a>&gt;::const_iterator end </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns a read-only (constant) iterator that points one past the last element in the dimension array. </p>
<dl class="section return"><dt>Returns</dt><dd>an iterator. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_dimensions_8h_source.xhtml#l00247">247</a> of file <a class="el" href="_dimensions_8h_source.xhtml">Dimensions.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    {</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        <span class="keywordflow">return</span> _id.end();</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a1de8262b54af91014549e2088519d536"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1de8262b54af91014549e2088519d536">&#9670;&nbsp;</a></span>increment()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void increment </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>dim</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>step</em> = <code>1</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Increments the given dimension by a step size, avoiding overflows. </p>
<dl class="section note"><dt>Note</dt><dd>Precondition: dim &lt; _num_dimensions</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dim</td><td>Dimension to increment. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">step</td><td>Step to increment <code>dim</code> by. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_dimensions_8h_source.xhtml#l00108">108</a> of file <a class="el" href="_dimensions_8h_source.xhtml">Dimensions.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    {</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(dim &gt;= _num_dimensions);</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <span class="keywordflow">if</span>((std::numeric_limits&lt;T&gt;::max() - _id[dim]) &gt;= <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>)</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        {</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            _id[dim] += <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        }</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    }</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a05c10bc9018179245c50d45b330a1c6a"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">arm_compute::cpu::step</a></div><div class="ttdeci">constexpr int step</div><div class="ttdef"><b>Definition:</b> <a href="cpu_2kernels_2floor_2neon_2fp32_8cpp_source.xhtml#l00035">fp32.cpp:35</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a80a5f2d6e3a697c9aad893a3b4242615"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a80a5f2d6e3a697c9aad893a3b4242615">&#9670;&nbsp;</a></span>num_dimensions()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int num_dimensions </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the effective dimensionality of the tensor. </p>

<p class="definition">Definition at line <a class="el" href="_dimensions_8h_source.xhtml#l00143">143</a> of file <a class="el" href="_dimensions_8h_source.xhtml">Dimensions.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00190">TensorInfo::auto_padding()</a>, <a class="el" href="_tensor_shape_8h_source.xhtml#l00211">TensorShape::broadcast_shape()</a>, <a class="el" href="tensor__transform_8cpp_source.xhtml#l00072">arm_compute::helpers::tensor_transform::calculate_end_on_index()</a>, <a class="el" href="_window_helpers_8cpp_source.xhtml#l00133">arm_compute::calculate_max_enlarged_window()</a>, <a class="el" href="_window_helpers_8cpp_source.xhtml#l00028">arm_compute::calculate_max_window()</a>, <a class="el" href="_window_helpers_8cpp_source.xhtml#l00182">arm_compute::calculate_max_window_horizontal()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00051">arm_compute::misc::shape_calculator::calculate_reduce_mean_shape()</a>, <a class="el" href="tensor__transform_8cpp_source.xhtml#l00039">arm_compute::helpers::tensor_transform::calculate_start_on_index()</a>, <a class="el" href="tensor__transform_8cpp_source.xhtml#l00034">arm_compute::helpers::tensor_transform::calculate_stride_on_index()</a>, <a class="el" href="tensor__transform_8cpp_source.xhtml#l00120">arm_compute::helpers::tensor_transform::calculate_strided_slice_coords()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01319">arm_compute::misc::shape_calculator::calculate_unstack_shape()</a>, <a class="el" href="src_2core_2_helpers_8cpp_source.xhtml#l00028">arm_compute::calculate_valid_region_scale()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00183">Dimensions&lt; size_t &gt;::collapse_from()</a>, <a class="el" href="_validation_8h_source.xhtml#l00150">arm_compute::test::validation::compare_dimensions()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01509">arm_compute::misc::shape_calculator::compute_gather_shape()</a>, <a class="el" href="_detection_output_layer_node_8cpp_source.xhtml#l00047">DetectionOutputLayerNode::compute_output_descriptor()</a>, <a class="el" href="_split_layer_node_8cpp_source.xhtml#l00052">SplitLayerNode::compute_output_descriptor()</a>, <a class="el" href="src_2graph_2nodes_2_fully_connected_layer_8cpp_source.xhtml#l00090">FullyConnectedLayerNode::compute_output_descriptor()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01206">arm_compute::misc::shape_calculator::compute_padded_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00579">arm_compute::misc::shape_calculator::compute_softmax_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01101">arm_compute::misc::shape_calculator::compute_split_shape()</a>, <a class="el" href="tensor__transform_8cpp_source.xhtml#l00139">arm_compute::helpers::tensor_transform::compute_strided_slice_output_shape()</a>, <a class="el" href="src_2graph_2nodes_2_fully_connected_layer_8cpp_source.xhtml#l00055">FullyConnectedLayerNode::compute_weights_descriptor()</a>, <a class="el" href="_cl_permute_kernel_8cpp_source.xhtml#l00085">ClPermuteKernel::configure()</a>, <a class="el" href="_c_l_strided_slice_kernel_8cpp_source.xhtml#l00078">CLStridedSliceKernel::configure()</a>, <a class="el" href="_c_l_select_kernel_8cpp_source.xhtml#l00071">CLSelectKernel::configure()</a>, <a class="el" href="_cpu_gemm_lowp_offset_contribution_kernel_8cpp_source.xhtml#l00361">CpuGemmLowpOffsetContributionKernel::configure()</a>, <a class="el" href="_n_e_select_kernel_8cpp_source.xhtml#l00169">NESelectKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_kernel_8cpp_source.xhtml#l00108">ClGemmLowpOffsetContributionKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_output_stage_kernel_8cpp_source.xhtml#l00132">ClGemmLowpOffsetContributionOutputStageKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00288">ClGemmLowpMatrixMultiplyReshapedOnlyRhsKernel::configure()</a>, <a class="el" href="_n_e_unstack_8cpp_source.xhtml#l00063">NEUnstack::configure()</a>, <a class="el" href="_n_e_reduce_mean_8cpp_source.xhtml#l00114">NEReduceMean::configure()</a>, <a class="el" href="_c_l_unstack_8cpp_source.xhtml#l00069">CLUnstack::configure()</a>, <a class="el" href="_c_l_reduce_mean_8cpp_source.xhtml#l00114">CLReduceMean::configure()</a>, <a class="el" href="_cpu_gemm_lowp_offset_contribution_output_stage_kernel_8cpp_source.xhtml#l00842">CpuGemmLowpOffsetContributionOutputStageKernel::configure()</a>, <a class="el" href="_c_p_p_split_8h_source.xhtml#l00133">CPPSplit&lt; CLSlice, ICLTensor &gt;::configure()</a>, <a class="el" href="tensor__transform_8cpp_source.xhtml#l00172">arm_compute::helpers::tensor_transform::construct_slice_end_mask()</a>, <a class="el" href="arm__compute_2core_2_helpers_8h_source.xhtml#l00257">arm_compute::convert_negative_axis()</a>, <a class="el" href="tests_2_utils_8h_source.xhtml#l00387">arm_compute::test::coord2index()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00175">arm_compute::coords2index()</a>, <a class="el" href="_tensor_shape_8cpp_source.xhtml#l00039">arm_compute::test::validation::DATA_TEST_CASE()</a>, <a class="el" href="tests_2validation_2reference_2_fully_connected_layer_8cpp_source.xhtml#l00115">arm_compute::test::validation::reference::fully_connected_layer()</a>, <a class="el" href="tests_2_utils_8h_source.xhtml#l00358">arm_compute::test::index2coord()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00156">arm_compute::index2coords()</a>, <a class="el" href="_window_helpers_8h_source.xhtml#l00074">arm_compute::intersect_valid_regions()</a>, <a class="el" href="_sub_tensor_info_8h_source.xhtml#l00145">SubTensorInfo::num_dimensions()</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00226">TensorInfo::num_dimensions()</a>, <a class="el" href="src_2core_2_sub_tensor_info_8cpp_source.xhtml#l00137">SubTensorInfo::offset_element_in_bytes()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00368">TensorInfo::offset_element_in_bytes()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00276">arm_compute::operator==()</a>, <a class="el" href="arm__compute_2core_2_helpers_8h_source.xhtml#l00125">arm_compute::permute()</a>, <a class="el" href="arm__compute_2core_2_utils_8h_source.xhtml#l00728">arm_compute::permute_strides()</a>, <a class="el" href="_c_l_comparison_kernel_8cpp_source.xhtml#l00172">CLComparisonKernel::run()</a>, <a class="el" href="_cl_elementwise_kernel_8cpp_source.xhtml#l00293">ClElementwiseKernel::run_op()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00269">ClMulKernel::run_op()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00391">ClComplexMulKernel::run_op()</a>, <a class="el" href="reference_2_select_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::select()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00149">Dimensions&lt; size_t &gt;::set_num_dimensions()</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00318">TensorInfo::set_tensor_shape()</a>, <a class="el" href="tests_2_utils_8h_source.xhtml#l00218">arm_compute::test::shape_to_valid_region()</a>, <a class="el" href="_slice_operations_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::slice()</a>, <a class="el" href="reference_2_stack_layer_8cpp_source.xhtml#l00041">arm_compute::test::validation::reference::stack_layer()</a>, <a class="el" href="_slice_operations_8cpp_source.xhtml#l00080">arm_compute::test::validation::reference::strided_slice()</a>, <a class="el" href="_window_8inl_source.xhtml#l00276">Window::use_tensor_dimensions()</a>, <a class="el" href="_cl_crop_kernel_8cpp_source.xhtml#l00090">ClCropKernel::validate()</a>, <a class="el" href="_split_layer_node_8cpp_source.xhtml#l00131">SplitLayerNode::validate()</a>, <a class="el" href="_n_e_select_kernel_8cpp_source.xhtml#l00187">NESelectKernel::validate()</a>, <a class="el" href="_n_e_unstack_8cpp_source.xhtml#l00092">NEUnstack::validate()</a>, <a class="el" href="_c_l_unstack_8cpp_source.xhtml#l00098">CLUnstack::validate()</a>, <a class="el" href="_n_e_crop_kernel_8cpp_source.xhtml#l00210">NECropKernel::validate()</a>, <a class="el" href="_n_e_slice_8cpp_source.xhtml#l00050">NESlice::validate()</a>, <a class="el" href="_validation_8cpp_source.xhtml#l00145">arm_compute::test::validation::validate()</a>, <a class="el" href="_c_l_slice_8cpp_source.xhtml#l00050">CLSlice::validate()</a>, <a class="el" href="_assets_library_8cpp_source.xhtml#l00522">arm_compute::test::detail::validate_npy_header()</a>, and <a class="el" href="tests_2validation_2_helpers_8cpp_source.xhtml#l00274">arm_compute::test::validation::zeros()</a>.</p>
<div class="fragment"><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    {</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        <span class="keywordflow">return</span> _num_dimensions;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a2c96e96e2d005b4a8b66c2acd1688903"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2c96e96e2d005b4a8b66c2acd1688903">&#9670;&nbsp;</a></span>operator=() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allow instances of this class to be copied. </p>

<p class="reference">Referenced by <a class="el" href="_dimensions_8h_source.xhtml#l00053">Dimensions&lt; size_t &gt;::Dimensions()</a>.</p>

</div>
</div>
<a id="a80565e11a35c48747bcc2cba06931e20"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a80565e11a35c48747bcc2cba06931e20">&#9670;&nbsp;</a></span>operator=() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a>&lt; T &gt; &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allow instances of this class to be moved. </p>

</div>
</div>
<a id="a08834d57877df4172a35bccc6719ab3a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a08834d57877df4172a35bccc6719ab3a">&#9670;&nbsp;</a></span>operator[]() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const T&amp; operator[] </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>dimension</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Generic accessor to get the size of any dimension. </p>
<dl class="section note"><dt>Note</dt><dd>Precondition: dimension &lt; <a class="el" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc" title="Number of dimensions the tensor has. ">Dimensions::num_max_dimensions</a></dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dimension</td><td>Dimension of the wanted size</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The size of the requested dimension. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_dimensions_8h_source.xhtml#l00124">124</a> of file <a class="el" href="_dimensions_8h_source.xhtml">Dimensions.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    {</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(dimension &gt;= <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">num_max_dimensions</a>);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        <span class="keywordflow">return</span> _id[dimension];</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    }</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a1b67d5b720119d50faa286c774579ecc"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">arm_compute::Dimensions::num_max_dimensions</a></div><div class="ttdeci">static constexpr size_t num_max_dimensions</div><div class="ttdoc">Number of dimensions the tensor has. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00046">Dimensions.h:46</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac88390e0a6503d5d09c65d204980beb1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac88390e0a6503d5d09c65d204980beb1">&#9670;&nbsp;</a></span>operator[]() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T&amp; operator[] </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>dimension</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Generic accessor to get the size of any dimension. </p>
<dl class="section note"><dt>Note</dt><dd>Precondition: dimension &lt; <a class="el" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc" title="Number of dimensions the tensor has. ">Dimensions::num_max_dimensions</a></dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dimension</td><td>Dimension of the wanted size</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The size of the requested dimension. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_dimensions_8h_source.xhtml#l00137">137</a> of file <a class="el" href="_dimensions_8h_source.xhtml">Dimensions.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    {</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(dimension &gt;= <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">num_max_dimensions</a>);</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="keywordflow">return</span> _id[dimension];</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    }</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a1b67d5b720119d50faa286c774579ecc"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">arm_compute::Dimensions::num_max_dimensions</a></div><div class="ttdeci">static constexpr size_t num_max_dimensions</div><div class="ttdoc">Number of dimensions the tensor has. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00046">Dimensions.h:46</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3e0f41c0e7278cadd08bf9216623ada3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3e0f41c0e7278cadd08bf9216623ada3">&#9670;&nbsp;</a></span>remove()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void remove </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>idx</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Remove dimension of a given index. </p>
<dl class="section note"><dt>Note</dt><dd>If index is greater than the number of dimensions no operation is performed</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">idx</td><td>Dimension index to remove </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_dimensions_8h_source.xhtml#l00196">196</a> of file <a class="el" href="_dimensions_8h_source.xhtml">Dimensions.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    {</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_num_dimensions &lt; 1);</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        <span class="keywordflow">if</span>(idx &gt;= _num_dimensions)</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        {</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            <span class="keywordflow">return</span>;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        }</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#ad9000ce99b9ffcec5722cade36d7e757">std::copy</a>(_id.begin() + idx + 1, _id.end(), _id.begin() + idx);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        _num_dimensions--;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        <span class="comment">// Make sure all empty dimensions are filled with 0</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1utils.xhtml#aba1951c4bc7afc65e9ef8b1b2c194b94">std::fill</a>(_id.begin() + _num_dimensions, _id.end(), 0);</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    }</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1utils_xhtml_aba1951c4bc7afc65e9ef8b1b2c194b94"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1utils.xhtml#aba1951c4bc7afc65e9ef8b1b2c194b94">arm_compute::test::validation::utils::fill</a></div><div class="ttdeci">void fill(U &amp;&amp;tensor, int seed, AssetsLibrary *library)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_c_l_2_u_n_i_t_2dynamic__fusion_2_utils_8h_source.xhtml#l00055">Utils.h:55</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_ad9000ce99b9ffcec5722cade36d7e757"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#ad9000ce99b9ffcec5722cade36d7e757">arm_compute::test::validation::reference::copy</a></div><div class="ttdeci">SimpleTensor&lt; T &gt; copy(const SimpleTensor&lt; T &gt; &amp;src, const TensorShape &amp;output_shape)</div><div class="ttdef"><b>Definition:</b> <a href="reference_2_copy_8cpp_source.xhtml#l00037">Copy.cpp:37</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a71d9685536fceae3487102a0cc105397"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a71d9685536fceae3487102a0cc105397">&#9670;&nbsp;</a></span>set()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void set </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>dimension</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>increase_dim_unit</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Accessor to set the value of one of the dimensions. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dimension</td><td>Dimension for which the value is set. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>Value to be set for the dimension. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">increase_dim_unit</td><td>(Optional) Set to true if new unit dimensions increase the number of dimensions (e.g. for <a class="el" href="classarm__compute_1_1_coordinates.xhtml" title="Coordinates of an item. ">Coordinates</a>), false otherwise (e.g. for TensorShapes) </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_dimensions_8h_source.xhtml#l00076">76</a> of file <a class="el" href="_dimensions_8h_source.xhtml">Dimensions.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="tests_2validation_2reference_2_utils_8h_source.xhtml#l00102">arm_compute::test::validation::apply_2d_spatial_filter()</a>, <a class="el" href="src_2core_2_helpers_8cpp_source.xhtml#l00028">arm_compute::calculate_valid_region_scale()</a>, <a class="el" href="_color_convert_helper_8h_source.xhtml#l00309">arm_compute::test::colorconvert_helper::detail::colorconvert_iyuv_to_rgb()</a>, <a class="el" href="_color_convert_helper_8h_source.xhtml#l00364">arm_compute::test::colorconvert_helper::detail::colorconvert_nv12_to_rgb()</a>, <a class="el" href="_split_layer_node_8cpp_source.xhtml#l00052">SplitLayerNode::compute_output_descriptor()</a>, <a class="el" href="src_2core_2helpers_2_utils_8h_source.xhtml#l00041">arm_compute::compute_strides()</a>, <a class="el" href="_access_window_transpose_8cpp_source.xhtml#l00032">AccessWindowTranspose::compute_valid_region()</a>, <a class="el" href="_access_window_static_8cpp_source.xhtml#l00045">AccessWindowStatic::compute_valid_region()</a>, <a class="el" href="_i_access_window_8cpp_source.xhtml#l00037">AccessWindowRectangle::compute_valid_region()</a>, <a class="el" href="_n_e_unstack_8cpp_source.xhtml#l00063">NEUnstack::configure()</a>, <a class="el" href="_c_l_unstack_8cpp_source.xhtml#l00069">CLUnstack::configure()</a>, <a class="el" href="_cpu_winograd_conv2d_8cpp_source.xhtml#l00162">CpuWinogradConv2d::configure()</a>, <a class="el" href="_c_p_p_split_8h_source.xhtml#l00133">CPPSplit&lt; CLSlice, ICLTensor &gt;::configure()</a>, <a class="el" href="_window_iterator_8h_source.xhtml#l00041">arm_compute::convert_window_coord_to_position()</a>, <a class="el" href="_erode_8cpp_source.xhtml#l00041">arm_compute::test::validation::reference::erode()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00362">NPYLoader::fill_tensor()</a>, <a class="el" href="reference_2_gather_8cpp_source.xhtml#l00040">arm_compute::test::validation::reference::gather()</a>, <a class="el" href="crop_2generic_2neon_2impl_8cpp_source.xhtml#l00036">arm_compute::cpu::in_bounds_crop_window()</a>, <a class="el" href="_window_helpers_8h_source.xhtml#l00074">arm_compute::intersect_valid_regions()</a>, <a class="el" href="reference_2_logical_8cpp_source.xhtml#l00037">arm_compute::test::validation::reference::logical_binary_op()</a>, <a class="el" href="_n_e_gather_kernel_8cpp_source.xhtml#l00089">NEGatherKernel::NEGatherKernel()</a>, <a class="el" href="_color_convert_helper_8h_source.xhtml#l00793">arm_compute::test::colorconvert_helper::detail::nv_to_yuv4()</a>, <a class="el" href="arm__compute_2core_2_helpers_8h_source.xhtml#l00125">arm_compute::permute()</a>, <a class="el" href="arm__compute_2core_2_utils_8h_source.xhtml#l00728">arm_compute::permute_strides()</a>, <a class="el" href="reference_2_reorg_layer_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::reorg_layer()</a>, <a class="el" href="_n_e_reorg_layer_kernel_8cpp_source.xhtml#l00102">NEReorgLayerKernel::run()</a>, <a class="el" href="_tensor_shape_8h_source.xhtml#l00079">TensorShape::set()</a>, <a class="el" href="tests_2_utils_8h_source.xhtml#l00218">arm_compute::test::shape_to_valid_region()</a>, <a class="el" href="_slice_operations_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::slice()</a>, <a class="el" href="reference_2_softmax_layer_8cpp_source.xhtml#l00039">arm_compute::test::validation::reference::softmax_layer_generic()</a>, <a class="el" href="_slice_operations_8cpp_source.xhtml#l00080">arm_compute::test::validation::reference::strided_slice()</a>, <a class="el" href="tests_2validation_2reference_2_utils_8h_source.xhtml#l00063">arm_compute::test::validation::tensor_elem_at()</a>, <a class="el" href="tests_2validation_2reference_2_utils_8cpp_source.xhtml#l00070">arm_compute::test::validation::transpose()</a>, <a class="el" href="_c_p_p_split_8h_source.xhtml#l00058">CPPSplit&lt; CLSlice, ICLTensor &gt;::validate()</a>, <a class="el" href="_n_e_unstack_8cpp_source.xhtml#l00092">NEUnstack::validate()</a>, <a class="el" href="_c_l_unstack_8cpp_source.xhtml#l00098">CLUnstack::validate()</a>, and <a class="el" href="_validation_8cpp_source.xhtml#l00224">arm_compute::test::validation::validate()</a>.</p>
<div class="fragment"><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    {</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(dimension &gt;= <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">num_max_dimensions</a>);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        _id[dimension] = value;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <span class="comment">// Don&#39;t increase the number of dimensions if the new dimension is 1</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <span class="keywordflow">if</span>(increase_dim_unit || value != 1)</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        {</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            _num_dimensions = std::max(_num_dimensions, dimension + 1);</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        }</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    }</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a1b67d5b720119d50faa286c774579ecc"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">arm_compute::Dimensions::num_max_dimensions</a></div><div class="ttdeci">static constexpr size_t num_max_dimensions</div><div class="ttdoc">Number of dimensions the tensor has. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00046">Dimensions.h:46</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a810a78f0b7cc0270f38d4136e023ea3b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a810a78f0b7cc0270f38d4136e023ea3b">&#9670;&nbsp;</a></span>set_num_dimensions()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void set_num_dimensions </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>num_dimensions</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set number of dimensions. </p>

<p class="definition">Definition at line <a class="el" href="_dimensions_8h_source.xhtml#l00149">149</a> of file <a class="el" href="_dimensions_8h_source.xhtml">Dimensions.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_transpose_kernel_8cpp_source.xhtml#l00427">CpuTransposeKernel::configure()</a>, <a class="el" href="_c_p_p_detection_output_layer_8cpp_source.xhtml#l00393">CPPDetectionOutputLayer::configure()</a>, <a class="el" href="_c_p_p_upsample_kernel_8cpp_source.xhtml#l00044">CPPUpsampleKernel::configure()</a>, <a class="el" href="_c_p_p_permute_kernel_8cpp_source.xhtml#l00102">CPPPermuteKernel::configure()</a>, <a class="el" href="_window_iterator_8cpp_source.xhtml#l00098">DATA_TEST_CASE()</a>, and <a class="el" href="utils_2_utils_8h_source.xhtml#l00333">NPYLoader::init_tensor()</a>.</p>
<div class="fragment"><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    {</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        _num_dimensions = <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">num_dimensions</a>;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    }</div><div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a80a5f2d6e3a697c9aad893a3b4242615"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">arm_compute::Dimensions::num_dimensions</a></div><div class="ttdeci">unsigned int num_dimensions() const</div><div class="ttdoc">Returns the effective dimensionality of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00143">Dimensions.h:143</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa87f8fc26981b0f3228a78c83b95b802"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa87f8fc26981b0f3228a78c83b95b802">&#9670;&nbsp;</a></span>x()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T x </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Alias to access the size of the first dimension. </p>

<p class="definition">Definition at line <a class="el" href="_dimensions_8h_source.xhtml#l00087">87</a> of file <a class="el" href="_dimensions_8h_source.xhtml">Dimensions.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_utils_8cpp_source.xhtml#l00263">ImageAccessor::access_tensor()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00344">ValidationInputAccessor::access_tensor()</a>, <a class="el" href="add_2generic_2neon_2qasymm8_8cpp_source.xhtml#l00035">arm_compute::cpu::add_qasymm8_neon()</a>, <a class="el" href="add_2generic_2neon_2qasymm8__signed_8cpp_source.xhtml#l00035">arm_compute::cpu::add_qasymm8_signed_neon()</a>, <a class="el" href="add_2generic_2sve2_2qasymm8__signed_8cpp_source.xhtml#l00037">arm_compute::cpu::add_qasymm8_signed_sve2()</a>, <a class="el" href="add_2generic_2sve2_2qasymm8_8cpp_source.xhtml#l00037">arm_compute::cpu::add_qasymm8_sve2()</a>, <a class="el" href="add_2generic_2neon_2qsymm16_8cpp_source.xhtml#l00035">arm_compute::cpu::add_qsymm16_neon()</a>, <a class="el" href="add_2generic_2sve2_2qsymm16_8cpp_source.xhtml#l00037">arm_compute::cpu::add_qsymm16_sve2()</a>, <a class="el" href="add_2generic_2neon_2impl_8cpp_source.xhtml#l00034">arm_compute::cpu::add_same_neon()</a>, <a class="el" href="add_2generic_2sve_2impl_8cpp_source.xhtml#l00036">arm_compute::cpu::add_same_sve()</a>, <a class="el" href="tests_2validation_2reference_2_utils_8h_source.xhtml#l00102">arm_compute::test::validation::apply_2d_spatial_filter()</a>, <a class="el" href="_cpu_add_kernel_8cpp_source.xhtml#l00042">arm_compute::cpu::kernels::can_interpret_inputs_as_1d_array()</a>, <a class="el" href="reference_2_col2_im_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::col2im()</a>, <a class="el" href="_color_convert_helper_8h_source.xhtml#l00309">arm_compute::test::colorconvert_helper::detail::colorconvert_iyuv_to_rgb()</a>, <a class="el" href="_color_convert_helper_8h_source.xhtml#l00364">arm_compute::test::colorconvert_helper::detail::colorconvert_nv12_to_rgb()</a>, <a class="el" href="_color_convert_helper_8h_source.xhtml#l00508">arm_compute::test::colorconvert_helper::detail::colorconvert_rgb_to_iyuv()</a>, <a class="el" href="_color_convert_helper_8h_source.xhtml#l00420">arm_compute::test::colorconvert_helper::detail::colorconvert_rgb_to_nv12()</a>, <a class="el" href="_color_convert_helper_8h_source.xhtml#l00273">arm_compute::test::colorconvert_helper::detail::colorconvert_yuyv_to_rgb()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00988">arm_compute::misc::shape_calculator::compute_output_stage_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00088">arm_compute::misc::shape_calculator::compute_vector_to_tensor_output_shape()</a>, <a class="el" href="_cl_dequantize_kernel_8cpp_source.xhtml#l00069">ClDequantizeKernel::configure()</a>, <a class="el" href="_cl_copy_kernel_8cpp_source.xhtml#l00076">ClCopyKernel::configure()</a>, <a class="el" href="_cl_elementwise_unary_kernel_8cpp_source.xhtml#l00074">ClElementWiseUnaryKernel::configure()</a>, <a class="el" href="_cl_quantize_kernel_8cpp_source.xhtml#l00069">ClQuantizeKernel::configure()</a>, <a class="el" href="_c_l_strided_slice_kernel_8cpp_source.xhtml#l00078">CLStridedSliceKernel::configure()</a>, <a class="el" href="_c_l_select_kernel_8cpp_source.xhtml#l00071">CLSelectKernel::configure()</a>, <a class="el" href="_c_l_tile_kernel_8cpp_source.xhtml#l00068">CLTileKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_kernel_8cpp_source.xhtml#l00108">ClGemmLowpOffsetContributionKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_output_stage_kernel_8cpp_source.xhtml#l00132">ClGemmLowpOffsetContributionOutputStageKernel::configure()</a>, <a class="el" href="_n_e_f_f_t_convolution_layer_8cpp_source.xhtml#l00105">NEFFTConvolutionLayer::configure()</a>, <a class="el" href="_c_l_f_f_t_convolution_layer_8cpp_source.xhtml#l00113">CLFFTConvolutionLayer::configure()</a>, <a class="el" href="reference_2_convert_fully_connected_weights_8cpp_source.xhtml#l00035">arm_compute::test::validation::reference::convert_fully_connected_weights()</a>, <a class="el" href="directconv2d_2nchw_2all_8cpp_source.xhtml#l00062">arm_compute::cpu::kernels::convolve_nchw()</a>, <a class="el" href="directconv2d_2nhwc_2neon_2impl_8cpp_source.xhtml#l00057">arm_compute::cpu::kernels::convolve_nhwc()</a>, <a class="el" href="_i_tensor_8cpp_source.xhtml#l00035">ITensor::copy_from()</a>, <a class="el" href="reference_2_deconvolution_layer_8cpp_source.xhtml#l00037">arm_compute::test::validation::reference::deconvolution_layer()</a>, <a class="el" href="elementwise__binary_2generic_2sve_2impl_8cpp_source.xhtml#l00036">arm_compute::cpu::elementwise_arithmetic_op()</a>, <a class="el" href="elementwise__binary_2generic_2sve2_2impl_8h_source.xhtml#l00104">arm_compute::cpu::elementwise_arithmetic_quantized_op()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00856">arm_compute::cpu::elementwise_comp_quantized_signed()</a>, <a class="el" href="elementwise__binary_2generic_2sve_2impl_8cpp_source.xhtml#l00141">arm_compute::cpu::elementwise_comparison_op()</a>, <a class="el" href="elementwise__binary_2generic_2sve2_2impl_8h_source.xhtml#l00235">arm_compute::cpu::elementwise_comparison_quantized_op()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00084">arm_compute::cpu::elementwise_op()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00748">arm_compute::cpu::elementwise_op_quantized()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00963">arm_compute::cpu::elementwise_op_quantized_signed()</a>, <a class="el" href="_erode_8cpp_source.xhtml#l00041">arm_compute::test::validation::reference::erode()</a>, <a class="el" href="src_2core_2_sub_tensor_info_8cpp_source.xhtml#l00117">SubTensorInfo::extend_padding()</a>, <a class="el" href="_assets_library_8h_source.xhtml#l00506">AssetsLibrary::fill_borders_with_garbage()</a>, <a class="el" href="activation_2generic_2neon_2qasymm8_8cpp_source.xhtml#l00420">arm_compute::cpu::neon_qasymm8_activation_lut()</a>, <a class="el" href="softmax_2generic_2neon_2impl_8cpp_source.xhtml#l00268">arm_compute::cpu::neon_softmax_logits_1d_float()</a>, <a class="el" href="softmax_2generic_2neon_2impl_8cpp_source.xhtml#l00091">arm_compute::cpu::neon_softmax_logits_1d_quantized()</a>, <a class="el" href="_non_maxima_suppression_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::non_maxima_suppression()</a>, <a class="el" href="reference_2_pad_layer_8cpp_source.xhtml#l00039">arm_compute::test::validation::reference::pad_layer()</a>, <a class="el" href="pool2d_2neon_2quantized_8h_source.xhtml#l00041">arm_compute::cpu::poolingMxN_q8_neon_nhwc()</a>, <a class="el" href="validation_2reference_2_scale_8cpp_source.xhtml#l00041">arm_compute::test::validation::reference::scale_core()</a>, <a class="el" href="reference_2_select_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::select()</a>, <a class="el" href="tests_2_utils_8h_source.xhtml#l00218">arm_compute::test::shape_to_valid_region()</a>, <a class="el" href="sub_2neon_2qasymm8_8cpp_source.xhtml#l00035">arm_compute::cpu::sub_qasymm8_neon()</a>, <a class="el" href="sub_2neon_2qasymm8__signed_8cpp_source.xhtml#l00035">arm_compute::cpu::sub_qasymm8_signed_neon()</a>, <a class="el" href="sub_2neon_2qsymm16_8cpp_source.xhtml#l00035">arm_compute::cpu::sub_qsymm16_neon()</a>, <a class="el" href="cpu_2kernels_2sub_2neon_2list_8h_source.xhtml#l00045">arm_compute::cpu::sub_same_neon()</a>, <a class="el" href="softmax_2generic_2sve2_2impl_8cpp_source.xhtml#l00034">arm_compute::cpu::sve2_softmax_logits_1d_quantized()</a>, <a class="el" href="softmax_2generic_2sve_2impl_8cpp_source.xhtml#l00073">arm_compute::cpu::sve_softmax_logits_1d_float()</a>, <a class="el" href="tests_2validation_2reference_2_utils_8h_source.xhtml#l00063">arm_compute::test::validation::tensor_elem_at()</a>, <a class="el" href="reference_2_tile_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::tile()</a>, <a class="el" href="reference_2_transpose_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::transpose()</a>, <a class="el" href="tests_2validation_2reference_2_utils_8cpp_source.xhtml#l00070">arm_compute::test::validation::transpose()</a>, <a class="el" href="_n_e_q_l_s_t_m_layer_normalization_kernel_8cpp_source.xhtml#l00137">NEQLSTMLayerNormalizationKernel::validate()</a>, <a class="el" href="_n_e_select_kernel_8cpp_source.xhtml#l00187">NESelectKernel::validate()</a>, <a class="el" href="_n_e_f_f_t_convolution_layer_8cpp_source.xhtml#l00263">NEFFTConvolutionLayer::validate()</a>, <a class="el" href="_n_e_deconvolution_layer_8cpp_source.xhtml#l00084">NEDeconvolutionLayer::validate()</a>, and <a class="el" href="_c_l_f_f_t_convolution_layer_8cpp_source.xhtml#l00272">CLFFTConvolutionLayer::validate()</a>.</p>
<div class="fragment"><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    {</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <span class="keywordflow">return</span> _id[0];</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="ac4a1050be02b20b3f791b9a483f3abe2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac4a1050be02b20b3f791b9a483f3abe2">&#9670;&nbsp;</a></span>y()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T y </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Alias to access the size of the second dimension. </p>

<p class="definition">Definition at line <a class="el" href="_dimensions_8h_source.xhtml#l00092">92</a> of file <a class="el" href="_dimensions_8h_source.xhtml">Dimensions.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_utils_8cpp_source.xhtml#l00263">ImageAccessor::access_tensor()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00344">ValidationInputAccessor::access_tensor()</a>, <a class="el" href="tests_2validation_2reference_2_utils_8h_source.xhtml#l00102">arm_compute::test::validation::apply_2d_spatial_filter()</a>, <a class="el" href="pool3d_2neon_2quantized_8h_source.xhtml#l00038">arm_compute::cpu::avg_poolingMxNxD_q8_neon_ndhwc()</a>, <a class="el" href="reference_2_col2_im_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::col2im()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00517">arm_compute::colorconvert_iyuv_to_rgb()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00455">arm_compute::colorconvert_nv12_to_rgb()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00988">arm_compute::misc::shape_calculator::compute_output_stage_shape()</a>, <a class="el" href="_c_l_select_kernel_8cpp_source.xhtml#l00071">CLSelectKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_kernel_8cpp_source.xhtml#l00108">ClGemmLowpOffsetContributionKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_output_stage_kernel_8cpp_source.xhtml#l00132">ClGemmLowpOffsetContributionOutputStageKernel::configure()</a>, <a class="el" href="_n_e_f_f_t_convolution_layer_8cpp_source.xhtml#l00105">NEFFTConvolutionLayer::configure()</a>, <a class="el" href="_c_l_f_f_t_convolution_layer_8cpp_source.xhtml#l00113">CLFFTConvolutionLayer::configure()</a>, <a class="el" href="reference_2_convert_fully_connected_weights_8cpp_source.xhtml#l00035">arm_compute::test::validation::reference::convert_fully_connected_weights()</a>, <a class="el" href="directconv2d_2nchw_2all_8cpp_source.xhtml#l00062">arm_compute::cpu::kernels::convolve_nchw()</a>, <a class="el" href="directconv2d_2nhwc_2neon_2impl_8cpp_source.xhtml#l00057">arm_compute::cpu::kernels::convolve_nhwc()</a>, <a class="el" href="_i_tensor_8cpp_source.xhtml#l00035">ITensor::copy_from()</a>, <a class="el" href="reference_2_deconvolution_layer_8cpp_source.xhtml#l00037">arm_compute::test::validation::reference::deconvolution_layer()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00518">DetectionOutputAccessor::DetectionOutputAccessor()</a>, <a class="el" href="cpu_2kernels_2conv3d_2neon_2list_8h_source.xhtml#l00039">arm_compute::cpu::directconv3d_float_neon_ndhwc()</a>, <a class="el" href="conv3d_2neon_2quantized_8h_source.xhtml#l00040">arm_compute::cpu::directconv3d_quantized_neon_ndhwc()</a>, <a class="el" href="_erode_8cpp_source.xhtml#l00041">arm_compute::test::validation::reference::erode()</a>, <a class="el" href="src_2core_2_sub_tensor_info_8cpp_source.xhtml#l00117">SubTensorInfo::extend_padding()</a>, <a class="el" href="_assets_library_8h_source.xhtml#l00506">AssetsLibrary::fill_borders_with_garbage()</a>, <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00640">arm_compute::graph::detail::fuse_convolution_batch_normalization_with_post_ops()</a>, <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00541">arm_compute::graph::detail::fuse_convolution_with_post_ops()</a>, <a class="el" href="pool3d_2neon_2quantized_8h_source.xhtml#l00228">arm_compute::cpu::max_poolingMxNxD_q8_neon_ndhwc()</a>, <a class="el" href="_non_maxima_suppression_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::non_maxima_suppression()</a>, <a class="el" href="cpu_2kernels_2pool2d_2neon_2list_8h_source.xhtml#l00062">arm_compute::cpu::offset_no_padding()</a>, <a class="el" href="reference_2_pad_layer_8cpp_source.xhtml#l00039">arm_compute::test::validation::reference::pad_layer()</a>, <a class="el" href="cpu_2kernels_2pool2d_2neon_2fp32_8cpp_source.xhtml#l00146">arm_compute::cpu::poolingMxN_fp32_neon_nhwc()</a>, <a class="el" href="pool2d_2neon_2quantized_8h_source.xhtml#l00041">arm_compute::cpu::poolingMxN_q8_neon_nhwc()</a>, <a class="el" href="tests_2_utils_8h_source.xhtml#l00218">arm_compute::test::shape_to_valid_region()</a>, <a class="el" href="tests_2validation_2reference_2_utils_8h_source.xhtml#l00063">arm_compute::test::validation::tensor_elem_at()</a>, <a class="el" href="reference_2_tile_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::tile()</a>, <a class="el" href="reference_2_transpose_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::transpose()</a>, <a class="el" href="tests_2validation_2reference_2_utils_8cpp_source.xhtml#l00070">arm_compute::test::validation::transpose()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_reduction_kernel_8cpp_source.xhtml#l00101">CpuGemmLowpMatrixAReductionKernel::validate()</a>, and <a class="el" href="_n_e_deconvolution_layer_8cpp_source.xhtml#l00084">NEDeconvolutionLayer::validate()</a>.</p>
<div class="fragment"><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    {</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <span class="keywordflow">return</span> _id[1];</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="abb29a685080e999c2a0cb874d2f7bb5a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abb29a685080e999c2a0cb874d2f7bb5a">&#9670;&nbsp;</a></span>z()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T z </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Alias to access the size of the third dimension. </p>

<p class="definition">Definition at line <a class="el" href="_dimensions_8h_source.xhtml#l00097">97</a> of file <a class="el" href="_dimensions_8h_source.xhtml">Dimensions.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="pool3d_2neon_2quantized_8h_source.xhtml#l00038">arm_compute::cpu::avg_poolingMxNxD_q8_neon_ndhwc()</a>, <a class="el" href="reference_2_col2_im_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::col2im()</a>, <a class="el" href="_c_l_strided_slice_kernel_8cpp_source.xhtml#l00078">CLStridedSliceKernel::configure()</a>, <a class="el" href="_cl_depth_concatenate_kernel_8cpp_source.xhtml#l00067">ClDepthConcatenateKernel::configure()</a>, <a class="el" href="directconv2d_2nchw_2all_8cpp_source.xhtml#l00062">arm_compute::cpu::kernels::convolve_nchw()</a>, <a class="el" href="directconv2d_2nhwc_2neon_2impl_8cpp_source.xhtml#l00057">arm_compute::cpu::kernels::convolve_nhwc()</a>, <a class="el" href="_n_e_o_n_2_direct_convolution_layer_8cpp_source.xhtml#l00294">arm_compute::test::validation::DATA_TEST_CASE()</a>, <a class="el" href="cpu_2kernels_2conv3d_2neon_2list_8h_source.xhtml#l00039">arm_compute::cpu::directconv3d_float_neon_ndhwc()</a>, <a class="el" href="conv3d_2neon_2quantized_8h_source.xhtml#l00040">arm_compute::cpu::directconv3d_quantized_neon_ndhwc()</a>, <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00640">arm_compute::graph::detail::fuse_convolution_batch_normalization_with_post_ops()</a>, <a class="el" href="_node_fusion_mutator_8cpp_source.xhtml#l00541">arm_compute::graph::detail::fuse_convolution_with_post_ops()</a>, <a class="el" href="pool3d_2neon_2quantized_8h_source.xhtml#l00228">arm_compute::cpu::max_poolingMxNxD_q8_neon_ndhwc()</a>, <a class="el" href="cpu_2kernels_2pool2d_2neon_2list_8h_source.xhtml#l00062">arm_compute::cpu::offset_no_padding()</a>, <a class="el" href="reference_2_pad_layer_8cpp_source.xhtml#l00039">arm_compute::test::validation::reference::pad_layer()</a>, <a class="el" href="cpu_2kernels_2pool2d_2neon_2fp32_8cpp_source.xhtml#l00146">arm_compute::cpu::poolingMxN_fp32_neon_nhwc()</a>, <a class="el" href="pool2d_2neon_2quantized_8h_source.xhtml#l00041">arm_compute::cpu::poolingMxN_q8_neon_nhwc()</a>, <a class="el" href="tests_2validation_2reference_2_utils_8h_source.xhtml#l00063">arm_compute::test::validation::tensor_elem_at()</a>, <a class="el" href="reference_2_tile_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::tile()</a>, and <a class="el" href="_n_e_deconvolution_layer_8cpp_source.xhtml#l00084">NEDeconvolutionLayer::validate()</a>.</p>
<div class="fragment"><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    {</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        <span class="keywordflow">return</span> _id[2];</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Field Documentation</h2>
<a id="a1b67d5b720119d50faa286c774579ecc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1b67d5b720119d50faa286c774579ecc">&#9670;&nbsp;</a></span>num_max_dimensions</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr size_t num_max_dimensions = <a class="el" href="namespacearm__compute.xhtml#a769d636d7a3c7c84579a5f477a18bc9d">MAX_DIMS</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Number of dimensions the tensor has. </p>

<p class="definition">Definition at line <a class="el" href="_dimensions_8h_source.xhtml#l00046">46</a> of file <a class="el" href="_dimensions_8h_source.xhtml">Dimensions.h</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>arm_compute/core/<a class="el" href="_dimensions_8h_source.xhtml">Dimensions.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a></li>
    <li class="footer">Generated on Thu Aug 18 2022 12:57:46 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
