<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: PostOpCLKernelUtils Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarm__compute_1_1experimental_1_1_post_op_c_l_kernel_utils.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">PostOpCLKernelUtils Class Reference<span class="mlabels"><span class="mlabel">final</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p>Manage validation, building and configurations of PostOp CL kernels.  
 <a href="classarm__compute_1_1experimental_1_1_post_op_c_l_kernel_utils.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_c_l_utils_8h_source.xhtml">CLUtils.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:acc6c359c2d328d099cefdebb284d52ec"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1_post_op_c_l_kernel_utils.xhtml#acc6c359c2d328d099cefdebb284d52ec">NamePostfix</a> = std::string</td></tr>
<tr class="memdesc:acc6c359c2d328d099cefdebb284d52ec"><td class="mdescLeft">&#160;</td><td class="mdescRight">CL kernel name postfix for post ops.  <a href="#acc6c359c2d328d099cefdebb284d52ec">More...</a><br /></td></tr>
<tr class="separator:acc6c359c2d328d099cefdebb284d52ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a54b0f2ab4a4899dab4a62cc868f29c78"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1_post_op_c_l_kernel_utils.xhtml#a54b0f2ab4a4899dab4a62cc868f29c78">Slots</a> = std::vector&lt; unsigned int &gt;</td></tr>
<tr class="memdesc:a54b0f2ab4a4899dab4a62cc868f29c78"><td class="mdescLeft">&#160;</td><td class="mdescRight">CL kernels that supports post ops assign each post op to a 'slot', in accordance with the postfix For example, for a kernel with postfix '_act_prelu_eltwiseadd', there are 3 slots slot 1: (unary) activation, slot 2: pRelu, slot 3: elementwise addition.  <a href="#a54b0f2ab4a4899dab4a62cc868f29c78">More...</a><br /></td></tr>
<tr class="separator:a54b0f2ab4a4899dab4a62cc868f29c78"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a283ea1fb18effc662f97182b20e63313"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1_post_op_c_l_kernel_utils.xhtml#a283ea1fb18effc662f97182b20e63313">Config</a> = std::map&lt; <a class="el" href="namespacearm__compute_1_1experimental.xhtml#a51c75906c46ed4b65a031a361e9786f7">PostOpTypeSequence</a>, std::tuple&lt; <a class="el" href="classarm__compute_1_1experimental_1_1_post_op_c_l_kernel_utils.xhtml#acc6c359c2d328d099cefdebb284d52ec">NamePostfix</a>, <a class="el" href="classarm__compute_1_1experimental_1_1_post_op_c_l_kernel_utils.xhtml#a54b0f2ab4a4899dab4a62cc868f29c78">Slots</a> &gt; &gt;</td></tr>
<tr class="separator:a283ea1fb18effc662f97182b20e63313"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a887bf9bb250974b5d375de9d68a69884"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1_post_op_c_l_kernel_utils.xhtml#a887bf9bb250974b5d375de9d68a69884">PostOpCLKernelUtils</a> (const <a class="el" href="classarm__compute_1_1experimental_1_1_post_op_c_l_kernel_utils.xhtml#a283ea1fb18effc662f97182b20e63313">Config</a> &amp;config)</td></tr>
<tr class="separator:a887bf9bb250974b5d375de9d68a69884"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe5a65a9cfbdb8ae1e4c1311de29ac33"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1_post_op_c_l_kernel_utils.xhtml#afe5a65a9cfbdb8ae1e4c1311de29ac33">is_post_op_sequence_supported</a> (const <a class="el" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml">PostOpList</a>&lt; <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&gt; &amp;post_ops) const</td></tr>
<tr class="memdesc:afe5a65a9cfbdb8ae1e4c1311de29ac33"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if the post op sequence is supported in the current configuration.  <a href="#afe5a65a9cfbdb8ae1e4c1311de29ac33">More...</a><br /></td></tr>
<tr class="separator:afe5a65a9cfbdb8ae1e4c1311de29ac33"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a218e5eeacb45ee9e74da2222d6b7b53e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1_post_op_c_l_kernel_utils.xhtml#a218e5eeacb45ee9e74da2222d6b7b53e">set_post_ops_cl_build_options</a> (<a class="el" href="classarm__compute_1_1_c_l_build_options.xhtml">CLBuildOptions</a> &amp;built_opts, const <a class="el" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml">PostOpList</a>&lt; <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&gt; &amp;post_ops) const</td></tr>
<tr class="memdesc:a218e5eeacb45ee9e74da2222d6b7b53e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper function to set PostOp related build options.  <a href="#a218e5eeacb45ee9e74da2222d6b7b53e">More...</a><br /></td></tr>
<tr class="separator:a218e5eeacb45ee9e74da2222d6b7b53e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac87409fcf3ae448af6031dcdb5cf24a5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1_post_op_c_l_kernel_utils.xhtml#ac87409fcf3ae448af6031dcdb5cf24a5">set_post_ops_cl_kernel_name</a> (std::string &amp;<a class="el" href="_cl_im2_col_kernel_8cpp.xhtml#a624a24e6d361fe7b8b8b2f6b375683a4">kernel_name</a>, const <a class="el" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml">PostOpList</a>&lt; <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&gt; &amp;post_ops) const</td></tr>
<tr class="memdesc:ac87409fcf3ae448af6031dcdb5cf24a5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper function to set PostOp kernel name.  <a href="#ac87409fcf3ae448af6031dcdb5cf24a5">More...</a><br /></td></tr>
<tr class="separator:ac87409fcf3ae448af6031dcdb5cf24a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a2eca2f571d0b9e858a17b349ff4b118c"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1_post_op_c_l_kernel_utils.xhtml#a2eca2f571d0b9e858a17b349ff4b118c">are_post_op_shapes_compliant</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *dst, const <a class="el" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml">experimental::PostOpList</a>&lt; <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&gt; &amp;post_ops)</td></tr>
<tr class="memdesc:a2eca2f571d0b9e858a17b349ff4b118c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if post op argument tensor shapes are compliant All post ops must not alter the shape of the original dst tensor (even after broadcasting)  <a href="#a2eca2f571d0b9e858a17b349ff4b118c">More...</a><br /></td></tr>
<tr class="separator:a2eca2f571d0b9e858a17b349ff4b118c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Manage validation, building and configurations of PostOp CL kernels. </p>

<p class="definition">Definition at line <a class="el" href="_c_l_utils_8h_source.xhtml#l00064">64</a> of file <a class="el" href="_c_l_utils_8h_source.xhtml">CLUtils.h</a>.</p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a id="a283ea1fb18effc662f97182b20e63313"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a283ea1fb18effc662f97182b20e63313">&#9670;&nbsp;</a></span>Config</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarm__compute_1_1experimental_1_1_post_op_c_l_kernel_utils.xhtml#a283ea1fb18effc662f97182b20e63313">Config</a> =  std::map&lt;<a class="el" href="namespacearm__compute_1_1experimental.xhtml#a51c75906c46ed4b65a031a361e9786f7">PostOpTypeSequence</a>, std::tuple&lt;<a class="el" href="classarm__compute_1_1experimental_1_1_post_op_c_l_kernel_utils.xhtml#acc6c359c2d328d099cefdebb284d52ec">NamePostfix</a>, <a class="el" href="classarm__compute_1_1experimental_1_1_post_op_c_l_kernel_utils.xhtml#a54b0f2ab4a4899dab4a62cc868f29c78">Slots</a>&gt; &gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_c_l_utils_8h_source.xhtml#l00085">85</a> of file <a class="el" href="_c_l_utils_8h_source.xhtml">CLUtils.h</a>.</p>

</div>
</div>
<a id="acc6c359c2d328d099cefdebb284d52ec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acc6c359c2d328d099cefdebb284d52ec">&#9670;&nbsp;</a></span>NamePostfix</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarm__compute_1_1experimental_1_1_post_op_c_l_kernel_utils.xhtml#acc6c359c2d328d099cefdebb284d52ec">NamePostfix</a> =  std::string</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>CL kernel name postfix for post ops. </p>

<p class="definition">Definition at line <a class="el" href="_c_l_utils_8h_source.xhtml#l00068">68</a> of file <a class="el" href="_c_l_utils_8h_source.xhtml">CLUtils.h</a>.</p>

</div>
</div>
<a id="a54b0f2ab4a4899dab4a62cc868f29c78"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a54b0f2ab4a4899dab4a62cc868f29c78">&#9670;&nbsp;</a></span>Slots</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarm__compute_1_1experimental_1_1_post_op_c_l_kernel_utils.xhtml#a54b0f2ab4a4899dab4a62cc868f29c78">Slots</a> =  std::vector&lt;unsigned int&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>CL kernels that supports post ops assign each post op to a 'slot', in accordance with the postfix For example, for a kernel with postfix '_act_prelu_eltwiseadd', there are 3 slots slot 1: (unary) activation, slot 2: pRelu, slot 3: elementwise addition. </p>
<p>Some kernels may allow some slots to be optional, to support multiple combinations of post op sequences. In such cases, we need to explicitly set up a mapping between each post op and the slots for that kernel. For example, suppose we have 2 kernels with postfixes: _eltwiseadd_prelu, _act_eltwiseadd_act_prelu, where the activations in the second kernel are optional. Say we want to support an eltwise addition, followed by a prelu (sequence { eltwiseadd, prelu }). Now we can choose which one of the 2 kernels to use, since they both support this post op sequence. We can either:</p><ol type="1">
<li>assign the elementwise to slot 1 and prelu to slot 2 of kernel 1 { { Eltwise_Add, PRelu } -&gt; {"_eltwise_act", {1, 2} } } or</li>
<li>assign the elementwise to slot 2 and prelu to slot 4 of kernel 1 { { Eltwise_Add, PRelu } -&gt; {"_act_eltwiseadd_act_prelu", {2, 4} } } </li>
</ol>

<p class="definition">Definition at line <a class="el" href="_c_l_utils_8h_source.xhtml#l00084">84</a> of file <a class="el" href="_c_l_utils_8h_source.xhtml">CLUtils.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a887bf9bb250974b5d375de9d68a69884"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a887bf9bb250974b5d375de9d68a69884">&#9670;&nbsp;</a></span>PostOpCLKernelUtils()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1experimental_1_1_post_op_c_l_kernel_utils.xhtml">PostOpCLKernelUtils</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1_post_op_c_l_kernel_utils.xhtml#a283ea1fb18effc662f97182b20e63313">Config</a> &amp;&#160;</td>
          <td class="paramname"><em>config</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_c_l_utils_8cpp_source.xhtml#l00074">74</a> of file <a class="el" href="_c_l_utils_8cpp_source.xhtml">CLUtils.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00456">ARM_COMPUTE_ERROR_ON_MSG</a>.</p>
<div class="fragment"><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    : _supported_config(supported_config)</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;{</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(supported_config.empty(), <span class="stringliteral">&quot;Empty PostOp CL kernel support configuration is not allowed&quot;</span>);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> it = _supported_config.begin(); it != _supported_config.end(); ++it)</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    {</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <span class="keyword">auto</span> post_op_sequence = it-&gt;first;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <span class="keyword">auto</span> post_op_slots    = std::get&lt;1&gt;(it-&gt;second);</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(post_op_sequence.size() != post_op_slots.size(), <span class="stringliteral">&quot;The number of PostOps must be the same as that of the assigned slots&quot;</span>);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    }</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a0b0eb3235749a2909dc5a101afe59a1b"><div class="ttname"><a href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond, msg)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00456">Error.h:456</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a2eca2f571d0b9e858a17b349ff4b118c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2eca2f571d0b9e858a17b349ff4b118c">&#9670;&nbsp;</a></span>are_post_op_shapes_compliant()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool are_post_op_shapes_compliant </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml">experimental::PostOpList</a>&lt; <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&gt; &amp;&#160;</td>
          <td class="paramname"><em>post_ops</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Check if post op argument tensor shapes are compliant All post ops must not alter the shape of the original dst tensor (even after broadcasting) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dst</td><td>Dst tensor to apply the post ops to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">post_ops</td><td>Post ops</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if shapes are compliant and false otherwise </dd></dl>

<p class="definition">Definition at line <a class="el" href="_c_l_utils_8cpp_source.xhtml#l00086">86</a> of file <a class="el" href="_c_l_utils_8cpp_source.xhtml">CLUtils.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_shape_8h_source.xhtml#l00211">TensorShape::broadcast_shape()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo::dimension()</a>, <a class="el" href="_i_post_op_8h_source.xhtml#l00165">PostOpList&lt; TensorRelatedT &gt;::get_list()</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00047">arm_compute::detail::have_different_dimensions()</a>, and <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>.</p>
<div class="fragment"><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;{</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;op : <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8cd3187b8cbe01fb39012663c3f93aa5">post_ops</a>.get_list())</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;tensor : op-&gt;arguments())</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        {</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            <span class="keyword">const</span> TensorShape &amp;out_shape = <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#a244a32cac2f5011bd0fc49700bf3d5de">TensorShape::broadcast_shape</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;tensor_shape(), (*tensor)-&gt;tensor_shape());</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            <span class="comment">// All post ops must be elementwise and must not alter the shape of the original dst tensor after broadcasting</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1detail.xhtml#a45d610a8bc262f7007c934293361e888">detail::have_different_dimensions</a>(out_shape, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;tensor_shape(), 0))</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            {</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            }</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            <span class="comment">// NOTE: Kernel limitation: currently only the following broadcasting types are supported:</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            <span class="comment">//  1. Post op arg is scalar, broadcast in both first and second dims</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            <span class="comment">//  2. Post op arg is of shape: second dim=1, first dim=N, broadcast only in second dim</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            <span class="comment">//  This means this case: Post op arg is of shape: second dim=M, first dim=1, broadcast only in first dim, is NOT supported</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;dimension(0) &gt; 1 &amp;&amp; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;dimension(1) &gt; 1 &amp;&amp; (*tensor)-&gt;dimension(0) == 1 &amp;&amp; (*tensor)-&gt;dimension(1) &gt; 1)</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            {</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            }</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        }</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    }</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8cd3187b8cbe01fb39012663c3f93aa5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8cd3187b8cbe01fb39012663c3f93aa5">arm_compute::test::validation::post_ops</a></div><div class="ttdeci">experimental::PostOpList&lt; ITensorInfo * &gt; post_ops</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00410">ConvolutionLayer.cpp:410</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml_a244a32cac2f5011bd0fc49700bf3d5de"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml#a244a32cac2f5011bd0fc49700bf3d5de">arm_compute::TensorShape::broadcast_shape</a></div><div class="ttdeci">static TensorShape broadcast_shape(const Shapes &amp;... shapes)</div><div class="ttdoc">If shapes are broadcast compatible, return the broadcasted shape. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00211">TensorShape.h:211</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1detail_xhtml_a45d610a8bc262f7007c934293361e888"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#a45d610a8bc262f7007c934293361e888">arm_compute::detail::have_different_dimensions</a></div><div class="ttdeci">bool have_different_dimensions(const Dimensions&lt; T &gt; &amp;dim1, const Dimensions&lt; T &gt; &amp;dim2, unsigned int upper_dim)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00047">Validate.h:47</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="afe5a65a9cfbdb8ae1e4c1311de29ac33"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afe5a65a9cfbdb8ae1e4c1311de29ac33">&#9670;&nbsp;</a></span>is_post_op_sequence_supported()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool is_post_op_sequence_supported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml">PostOpList</a>&lt; <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&gt; &amp;&#160;</td>
          <td class="paramname"><em>post_ops</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if the post op sequence is supported in the current configuration. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">post_ops</td><td>Post ops</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if the post op sequence is supported and false otherwise </dd></dl>

<p class="definition">Definition at line <a class="el" href="_c_l_utils_8cpp_source.xhtml#l00111">111</a> of file <a class="el" href="_c_l_utils_8cpp_source.xhtml">CLUtils.cpp</a>.</p>

<p class="reference">References <a class="el" href="_post_op_utils_8h_source.xhtml#l00087">arm_compute::experimental::get_post_op_sequence()</a>, and <a class="el" href="_i_post_op_8h_source.xhtml#l00150">PostOpList&lt; TensorRelatedT &gt;::size()</a>.</p>
<div class="fragment"><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;{</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8cd3187b8cbe01fb39012663c3f93aa5">post_ops</a>.size() == 0)</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    {</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>; <span class="comment">// Always support cases where no post op is specified</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    }</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> post_op_sequence = <a class="code" href="namespacearm__compute_1_1experimental.xhtml#a22525cfde930b77c53f9b6f5e98f2eae">get_post_op_sequence</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8cd3187b8cbe01fb39012663c3f93aa5">post_ops</a>);</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keywordflow">return</span> _supported_config.find(post_op_sequence) != _supported_config.end();</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8cd3187b8cbe01fb39012663c3f93aa5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8cd3187b8cbe01fb39012663c3f93aa5">arm_compute::test::validation::post_ops</a></div><div class="ttdeci">experimental::PostOpList&lt; ITensorInfo * &gt; post_ops</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00410">ConvolutionLayer.cpp:410</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_xhtml_a22525cfde930b77c53f9b6f5e98f2eae"><div class="ttname"><a href="namespacearm__compute_1_1experimental.xhtml#a22525cfde930b77c53f9b6f5e98f2eae">arm_compute::experimental::get_post_op_sequence</a></div><div class="ttdeci">PostOpTypeSequence get_post_op_sequence(const PostOpList&lt; T &gt; &amp;post_ops)</div><div class="ttdoc">Get a sequence of PostOp Types from PostOpList. </div><div class="ttdef"><b>Definition:</b> <a href="_post_op_utils_8h_source.xhtml#l00087">PostOpUtils.h:87</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a218e5eeacb45ee9e74da2222d6b7b53e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a218e5eeacb45ee9e74da2222d6b7b53e">&#9670;&nbsp;</a></span>set_post_ops_cl_build_options()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void set_post_ops_cl_build_options </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_c_l_build_options.xhtml">CLBuildOptions</a> &amp;&#160;</td>
          <td class="paramname"><em>built_opts</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml">PostOpList</a>&lt; <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&gt; &amp;&#160;</td>
          <td class="paramname"><em>post_ops</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Helper function to set PostOp related build options. </p>
<dl class="section note"><dt>Note</dt><dd>Convention<ol type="1">
<li>Each post op "slot" is prefixed with "P&lt;slot number&gt;", followed by the usual parameters for that post op. E.g. If the first slot is an activation, we need to pass 3 definitions in this way: -P1_ACTIVATION_TYPE=... -P1_ACTIVATION_A_VAL=... -P1_ACTIVATION_B_VAL=...</li>
<li>For multi-ary post ops, to pass the position of the previous op's dest tensor, we append "_X_POS_&lt;pos&gt;" to the post op type. E.g. for a single post op add(dst, x), where dst is the result of the main op. In this case, the position of the previous op's dest is 0, so we pass -P1_ELTWISE_OP=ADD_X_POS_0</li>
</ol>
</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">built_opts</td><td>OpenCL kernel build options </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">post_ops</td><td>Post ops </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_c_l_utils_8cpp_source.xhtml#l00122">122</a> of file <a class="el" href="_c_l_utils_8cpp_source.xhtml">CLUtils.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425eaaa9a62e70841c4d06dd16306a85700d36">arm_compute::experimental::Activation</a>, <a class="el" href="_c_l_compile_context_8cpp_source.xhtml#l00041">CLBuildOptions::add_option()</a>, <a class="el" href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425eaa6416e8534b0dc047508a56ab36d45130">arm_compute::experimental::Eltwise_Add</a>, <a class="el" href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425eaa56ce6a9123158f9f5836a8d8f854bb21">arm_compute::experimental::Eltwise_PRelu</a>, <a class="el" href="arm__compute_2core_2_utils_8h_source.xhtml#l01124">arm_compute::float_to_string_with_full_precision()</a>, <a class="el" href="_i_post_op_8h_source.xhtml#l00165">PostOpList&lt; TensorRelatedT &gt;::get_list()</a>, <a class="el" href="_post_op_utils_8h_source.xhtml#l00087">arm_compute::experimental::get_post_op_sequence()</a>, <a class="el" href="src_2core_2_utils_8cpp_source.xhtml#l00351">arm_compute::lower_string()</a>, <a class="el" href="_i_post_op_8h_source.xhtml#l00150">PostOpList&lt; TensorRelatedT &gt;::size()</a>, <a class="el" href="src_2core_2_utils_8cpp_source.xhtml#l00163">arm_compute::string_from_activation_func()</a>, and <a class="el" href="_string_support_8h_source.xhtml#l00168">arm_compute::support::cpp11::to_string()</a>.</p>
<div class="fragment"><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;{</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> post_op_sequence = <a class="code" href="namespacearm__compute_1_1experimental.xhtml#a22525cfde930b77c53f9b6f5e98f2eae">get_post_op_sequence</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8cd3187b8cbe01fb39012663c3f93aa5">post_ops</a>);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> slots            = std::get&lt;1&gt;(_supported_config.at(post_op_sequence));</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> post_op_id = 0; post_op_id &lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8cd3187b8cbe01fb39012663c3f93aa5">post_ops</a>.size(); ++post_op_id)</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    {</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> &amp;post_op     = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8cd3187b8cbe01fb39012663c3f93aa5">post_ops</a>.get_list().at(post_op_id);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>  slot_prefix = <span class="stringliteral">&quot;-DP&quot;</span> + <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">support::cpp11::to_string</a>(slots[post_op_id]);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        <span class="keywordflow">if</span>(post_op-&gt;type() == <a class="code" href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425eaaa9a62e70841c4d06dd16306a85700d36">experimental::PostOpType::Activation</a>)</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        {</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> _post_op  = utils::cast::polymorphic_downcast&lt;const experimental::PostOpAct&lt;ITensorInfo *&gt; *&gt;(post_op.get());</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> act_type  = slot_prefix + <span class="stringliteral">&quot;_ACTIVATION_TYPE=&quot;</span> + <a class="code" href="namespacearm__compute.xhtml#a0a7bb17a0a0414a7162f635776a02eb5">lower_string</a>(<a class="code" href="namespacearm__compute.xhtml#a635f1895d94050329b7da12850d1a056">string_from_activation_func</a>(_post_op-&gt;_act_info.activation()));</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> act_a_val = slot_prefix + <span class="stringliteral">&quot;_ACTIVATION_A_VAL=&quot;</span> + <a class="code" href="namespacearm__compute.xhtml#a9cd394c15b73f79ca1d98f5328064be2">float_to_string_with_full_precision</a>(_post_op-&gt;_act_info.a());</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> act_b_val = slot_prefix + <span class="stringliteral">&quot;_ACTIVATION_B_VAL=&quot;</span> + <a class="code" href="namespacearm__compute.xhtml#a9cd394c15b73f79ca1d98f5328064be2">float_to_string_with_full_precision</a>(_post_op-&gt;_act_info.b());</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            build_opts.add_option(act_type);</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            build_opts.add_option(act_a_val);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            build_opts.add_option(act_b_val);</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        }</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(post_op-&gt;type() == <a class="code" href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425eaa6416e8534b0dc047508a56ab36d45130">experimental::PostOpType::Eltwise_Add</a>)</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        {</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            <span class="keywordtype">size_t</span>     arg_id     = 1;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> eltwise_op = slot_prefix + <span class="stringliteral">&quot;_ELTWISE_OP=ADD&quot;</span> + <span class="stringliteral">&quot;_X_POS_&quot;</span> + <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">support::cpp11::to_string</a>(post_op-&gt;prev_dst_pos());</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            build_opts.add_option(eltwise_op);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;tensor : post_op-&gt;arguments())</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            {</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> height = slot_prefix + <span class="stringliteral">&quot;_ELTWISE_ARG&quot;</span> + <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">support::cpp11::to_string</a>(arg_id) + <span class="stringliteral">&quot;_HEIGHT=&quot;</span> + <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">support::cpp11::to_string</a>((*tensor)-&gt;dimension(1));</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> width  = slot_prefix + <span class="stringliteral">&quot;_ELTWISE_ARG&quot;</span> + <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">support::cpp11::to_string</a>(arg_id) + <span class="stringliteral">&quot;_WIDTH=&quot;</span> + <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">support::cpp11::to_string</a>((*tensor)-&gt;dimension(0));</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                build_opts.add_option(height);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                build_opts.add_option(width);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                ++arg_id;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            }</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        }</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(post_op-&gt;type() == <a class="code" href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425eaa56ce6a9123158f9f5836a8d8f854bb21">experimental::PostOpType::Eltwise_PRelu</a>)</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        {</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            <span class="keywordtype">size_t</span>     arg_id     = 1;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> eltwise_op = slot_prefix + <span class="stringliteral">&quot;_ELTWISE_OP=PRELU&quot;</span> + <span class="stringliteral">&quot;_X_POS_&quot;</span> + <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">support::cpp11::to_string</a>(post_op-&gt;prev_dst_pos());</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            build_opts.add_option(eltwise_op);</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;tensor : post_op-&gt;arguments())</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            {</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> height = slot_prefix + <span class="stringliteral">&quot;_ELTWISE_ARG&quot;</span> + <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">support::cpp11::to_string</a>(arg_id) + <span class="stringliteral">&quot;_HEIGHT=&quot;</span> + <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">support::cpp11::to_string</a>((*tensor)-&gt;dimension(1));</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> width  = slot_prefix + <span class="stringliteral">&quot;_ELTWISE_ARG&quot;</span> + <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">support::cpp11::to_string</a>(arg_id) + <span class="stringliteral">&quot;_WIDTH=&quot;</span> + <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">support::cpp11::to_string</a>((*tensor)-&gt;dimension(0));</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                build_opts.add_option(height);</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                build_opts.add_option(width);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                ++arg_id;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            }</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        }</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    }</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8cd3187b8cbe01fb39012663c3f93aa5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8cd3187b8cbe01fb39012663c3f93aa5">arm_compute::test::validation::post_ops</a></div><div class="ttdeci">experimental::PostOpList&lt; ITensorInfo * &gt; post_ops</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00410">ConvolutionLayer.cpp:410</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_acc5dddee1cbe93a4eaf0a9f74ee96bb7"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">arm_compute::support::cpp11::to_string</a></div><div class="ttdeci">std::string to_string(T &amp;&amp;value)</div><div class="ttdoc">Convert integer and float values to string. </div><div class="ttdef"><b>Definition:</b> <a href="_string_support_8h_source.xhtml#l00168">StringSupport.h:168</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_xhtml_a3411c74a9d92ff2e88330fce49a425eaa56ce6a9123158f9f5836a8d8f854bb21"><div class="ttname"><a href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425eaa56ce6a9123158f9f5836a8d8f854bb21">arm_compute::experimental::PostOpType::Eltwise_PRelu</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a635f1895d94050329b7da12850d1a056"><div class="ttname"><a href="namespacearm__compute.xhtml#a635f1895d94050329b7da12850d1a056">arm_compute::string_from_activation_func</a></div><div class="ttdeci">const std::string &amp; string_from_activation_func(ActivationLayerInfo::ActivationFunction act)</div><div class="ttdoc">Translates a given activation function to a string. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_utils_8cpp_source.xhtml#l00163">Utils.cpp:163</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a0a7bb17a0a0414a7162f635776a02eb5"><div class="ttname"><a href="namespacearm__compute.xhtml#a0a7bb17a0a0414a7162f635776a02eb5">arm_compute::lower_string</a></div><div class="ttdeci">std::string lower_string(const std::string &amp;val)</div><div class="ttdoc">Lower a given string. </div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_utils_8cpp_source.xhtml#l00351">Utils.cpp:351</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a9cd394c15b73f79ca1d98f5328064be2"><div class="ttname"><a href="namespacearm__compute.xhtml#a9cd394c15b73f79ca1d98f5328064be2">arm_compute::float_to_string_with_full_precision</a></div><div class="ttdeci">std::string float_to_string_with_full_precision(float val)</div><div class="ttdoc">Create a string with the float in full precision. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l01124">Utils.h:1124</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_xhtml_a3411c74a9d92ff2e88330fce49a425eaaa9a62e70841c4d06dd16306a85700d36"><div class="ttname"><a href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425eaaa9a62e70841c4d06dd16306a85700d36">arm_compute::experimental::PostOpType::Activation</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_xhtml_a3411c74a9d92ff2e88330fce49a425eaa6416e8534b0dc047508a56ab36d45130"><div class="ttname"><a href="namespacearm__compute_1_1experimental.xhtml#a3411c74a9d92ff2e88330fce49a425eaa6416e8534b0dc047508a56ab36d45130">arm_compute::experimental::PostOpType::Eltwise_Add</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_xhtml_a22525cfde930b77c53f9b6f5e98f2eae"><div class="ttname"><a href="namespacearm__compute_1_1experimental.xhtml#a22525cfde930b77c53f9b6f5e98f2eae">arm_compute::experimental::get_post_op_sequence</a></div><div class="ttdeci">PostOpTypeSequence get_post_op_sequence(const PostOpList&lt; T &gt; &amp;post_ops)</div><div class="ttdoc">Get a sequence of PostOp Types from PostOpList. </div><div class="ttdef"><b>Definition:</b> <a href="_post_op_utils_8h_source.xhtml#l00087">PostOpUtils.h:87</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac87409fcf3ae448af6031dcdb5cf24a5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac87409fcf3ae448af6031dcdb5cf24a5">&#9670;&nbsp;</a></span>set_post_ops_cl_kernel_name()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void set_post_ops_cl_kernel_name </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>kernel_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1_post_op_list.xhtml">PostOpList</a>&lt; <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&gt; &amp;&#160;</td>
          <td class="paramname"><em>post_ops</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Helper function to set PostOp kernel name. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">kernel_name</td><td>OpenCL kernel name </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">post_ops</td><td>Post ops </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_c_l_utils_8cpp_source.xhtml#l00171">171</a> of file <a class="el" href="_c_l_utils_8cpp_source.xhtml">CLUtils.cpp</a>.</p>

<p class="reference">References <a class="el" href="_post_op_utils_8h_source.xhtml#l00087">arm_compute::experimental::get_post_op_sequence()</a>.</p>
<div class="fragment"><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;{</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> post_op_sequence = <a class="code" href="namespacearm__compute_1_1experimental.xhtml#a22525cfde930b77c53f9b6f5e98f2eae">get_post_op_sequence</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8cd3187b8cbe01fb39012663c3f93aa5">post_ops</a>);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> postfix          = std::get&lt;0&gt;(_supported_config.at(post_op_sequence));</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <a class="code" href="_cl_im2_col_kernel_8cpp.xhtml#a624a24e6d361fe7b8b8b2f6b375683a4">kernel_name</a> += postfix;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8cd3187b8cbe01fb39012663c3f93aa5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8cd3187b8cbe01fb39012663c3f93aa5">arm_compute::test::validation::post_ops</a></div><div class="ttdeci">experimental::PostOpList&lt; ITensorInfo * &gt; post_ops</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00410">ConvolutionLayer.cpp:410</a></div></div>
<div class="ttc" id="_cl_im2_col_kernel_8cpp_xhtml_a624a24e6d361fe7b8b8b2f6b375683a4"><div class="ttname"><a href="_cl_im2_col_kernel_8cpp.xhtml#a624a24e6d361fe7b8b8b2f6b375683a4">kernel_name</a></div><div class="ttdeci">std::string kernel_name</div><div class="ttdef"><b>Definition:</b> <a href="_cl_im2_col_kernel_8cpp_source.xhtml#l00056">ClIm2ColKernel.cpp:56</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_xhtml_a22525cfde930b77c53f9b6f5e98f2eae"><div class="ttname"><a href="namespacearm__compute_1_1experimental.xhtml#a22525cfde930b77c53f9b6f5e98f2eae">arm_compute::experimental::get_post_op_sequence</a></div><div class="ttdeci">PostOpTypeSequence get_post_op_sequence(const PostOpList&lt; T &gt; &amp;post_ops)</div><div class="ttdoc">Get a sequence of PostOp Types from PostOpList. </div><div class="ttdef"><b>Definition:</b> <a href="_post_op_utils_8h_source.xhtml#l00087">PostOpUtils.h:87</a></div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/core/CL/<a class="el" href="_c_l_utils_8h_source.xhtml">CLUtils.h</a></li>
<li>src/core/CL/<a class="el" href="_c_l_utils_8cpp_source.xhtml">CLUtils.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1experimental.xhtml">experimental</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1experimental_1_1_post_op_c_l_kernel_utils.xhtml">PostOpCLKernelUtils</a></li>
    <li class="footer">Generated on Thu Aug 18 2022 12:57:49 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
