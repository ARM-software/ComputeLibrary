<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/NEON/kernels/arm_gemm/quantized.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('quantized_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">quantized.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="quantized_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2019 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__gemm_8hpp.xhtml">arm_gemm.hpp</a>&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="utils_8hpp.xhtml">utils.hpp</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;arm_neon.h&gt;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__gemm.xhtml">arm_gemm</a> {</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">namespace </span>{</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">/* Requantize a block of data, using the requantize parameters in &#39;qp&#39;.</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment"> * row_bias and col_bias are assumed to be precomputed values which include</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment"> * any externally supplied bias, plus the row/column contibution sums, plus</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment"> * the overall constant offset (A_offset * B_offset * depth).</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment"> * Note that this function works equally well for uint8_t output: just set</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment"> * minval/maxval appropriately and cast the output pointer.  It is caller&#39;s</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment"> * responsibility to ensure that minval/maxval are representable in the</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment"> * target type - the downcast to (u)int8_t is done by simply extracting the</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment"> * LSB.</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment"> * The &#39;do_shift_correction&#39; template parameter turns on the correction</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment"> * applied to negative values being shifted right to make sure they round</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment"> * properly - if negative values are never output (e.g. fused ReLU) this is</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment"> * unnecessary.</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment"> * The &#39;per_channel&#39; template parameter selects between per channel and per</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment"> * layer requantization - in the former case we need to load vectors of</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment"> * shifts and multipliers for each column.  A separate vector for each</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment"> * column is set up in any case (and it is hoped that the compiler can elide</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment"> * the needless movs in the per-layer case).</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="keyword">template</span>&lt;<span class="keywordtype">bool</span> do_shift_correction, <span class="keywordtype">bool</span> per_channel, <span class="keywordtype">bool</span> do_left_shift&gt;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="keywordtype">void</span> requantize_block_32_int(<span class="keyword">const</span> Requantize32 &amp;qp, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> width, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> height,</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;                             <span class="keyword">const</span> int32_t *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> in_stride, int8_t *output, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> out_stride,</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                             <span class="keyword">const</span> int32_t *row_bias, <span class="keyword">const</span> int32_t *col_bias, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> start_col) {</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">const</span> int32x4_t v_mul          = vdupq_n_s32(qp.per_layer_mul);</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">const</span> int32x4_t v_right_shift  = vdupq_n_s32(qp.per_layer_right_shift);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keyword">const</span> int32x4_t v_left_shift   = vdupq_n_s32(qp.per_layer_left_shift);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keyword">const</span> int32x4_t v_minval       = vdupq_n_s32(qp.minval);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keyword">const</span> int32x4_t v_maxval       = vdupq_n_s32(qp.maxval);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keyword">const</span> int32x4_t v_c_offset     = vdupq_n_s32(qp.c_offset);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="comment">/* To make sure we have plenty of accumulators, compute two rows at a</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment">     * time.  If the number of rows is odd, compute the bottom row twice to</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment">     * avoid needing a duplicate codepath. */</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> row=0; row&lt;height; row+=2) {</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="comment">/* Prefer to do 4 vectors (16 values) at once as this collapses</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment">         * neatly to a single vector of output, failing that a vector at a</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment">         * time and then the odd ones out at the end.  */</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> blocks=(width / 16);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> regs=(width % 16) / 4;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> odds=(width % 4);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <span class="keyword">const</span> int32_t *colptr = col_bias;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <span class="keyword">const</span> int32_t *perch_mul_ptr    = qp.per_channel_muls + start_col;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <span class="keyword">const</span> int32_t *perch_shift_ptr  = qp.per_channel_right_shifts + start_col;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <span class="keyword">const</span> int32_t *perch_shiftl_ptr = qp.per_channel_left_shifts + start_col;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        <span class="keyword">const</span> int32_t *in_ptr = input + (row * in_stride);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        int8_t *out_ptr = output + (row * out_stride);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        int32_t row_sum = row_bias[row];</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <span class="keyword">const</span> int32_t *in_ptr1;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        int8_t *out_ptr1;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        int32_t row_sum1;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        <span class="keywordflow">if</span> (row == height-1) {</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            in_ptr1  = in_ptr;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            out_ptr1 = out_ptr;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            row_sum1 = row_sum;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            in_ptr1  = in_ptr + in_stride;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            out_ptr1 = out_ptr + out_stride;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            row_sum1 = row_bias[row+1];</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        }</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="keyword">const</span> int32x4_t v_row_sum  = vdupq_n_s32(row_sum);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="keyword">const</span> int32x4_t v_row_sum1 = vdupq_n_s32(row_sum1);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <span class="keywordflow">while</span> (blocks--) {</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            int32x4_t v_mul0;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            int32x4_t v_mul1;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            int32x4_t v_mul2;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            int32x4_t v_mul3;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            int32x4_t v_shf0;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            int32x4_t v_shf1;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            int32x4_t v_shf2;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            int32x4_t v_shf3;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            int32x4_t v_shf0l;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            int32x4_t v_shf1l;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            int32x4_t v_shf2l;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            int32x4_t v_shf3l;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            <span class="keywordflow">if</span> (per_channel) {</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                v_mul0 = vld1q_s32(perch_mul_ptr);</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                v_mul1 = vld1q_s32(perch_mul_ptr + 4);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                v_mul2 = vld1q_s32(perch_mul_ptr + 8);</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                v_mul3 = vld1q_s32(perch_mul_ptr + 12);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                perch_mul_ptr += 16;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                v_shf0 = vld1q_s32(perch_shift_ptr);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                v_shf1 = vld1q_s32(perch_shift_ptr + 4);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                v_shf2 = vld1q_s32(perch_shift_ptr + 8);</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                v_shf3 = vld1q_s32(perch_shift_ptr + 12);</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                perch_shift_ptr += 16;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                <span class="keywordflow">if</span> (do_left_shift) {</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                    v_shf0l = vld1q_s32(perch_shiftl_ptr);</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                    v_shf1l = vld1q_s32(perch_shiftl_ptr + 4);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                    v_shf2l = vld1q_s32(perch_shiftl_ptr + 8);</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                    v_shf3l = vld1q_s32(perch_shiftl_ptr + 12);</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                    perch_shiftl_ptr += 16;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                }</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                v_mul0=v_mul1=v_mul2=v_mul3=v_mul;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                v_shf0=v_shf1=v_shf2=v_shf3=v_right_shift;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                v_shf0l=v_shf1l=v_shf2l=v_shf3l=v_left_shift;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            }</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            <span class="comment">// Load column pointers</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            int32x4_t v_col0 = vld1q_s32(colptr);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            int32x4_t v_col1 = vld1q_s32(colptr + 4);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            int32x4_t v_col2 = vld1q_s32(colptr + 8);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            int32x4_t v_col3 = vld1q_s32(colptr + 12);</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            colptr += 16;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            <span class="comment">// Load input data (row 0);</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            int32x4_t v_in00 = vld1q_s32(in_ptr);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            int32x4_t v_in01 = vld1q_s32(in_ptr + 4);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            int32x4_t v_in02 = vld1q_s32(in_ptr + 8);</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            int32x4_t v_in03 = vld1q_s32(in_ptr + 12);</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            in_ptr += 16;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;            <span class="comment">// Load input data (row 1);</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            int32x4_t v_in10 = vld1q_s32(in_ptr1);</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            int32x4_t v_in11 = vld1q_s32(in_ptr1 + 4);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            int32x4_t v_in12 = vld1q_s32(in_ptr1 + 8);</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            int32x4_t v_in13 = vld1q_s32(in_ptr1 + 12);</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            in_ptr1 += 16;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            <span class="comment">// Add on row bias and column bias</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            v_in00 = vaddq_s32(v_in00, v_row_sum);</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            v_in01 = vaddq_s32(v_in01, v_row_sum);</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            v_in02 = vaddq_s32(v_in02, v_row_sum);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            v_in03 = vaddq_s32(v_in03, v_row_sum);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            v_in10 = vaddq_s32(v_in10, v_row_sum1);</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            v_in11 = vaddq_s32(v_in11, v_row_sum1);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            v_in12 = vaddq_s32(v_in12, v_row_sum1);</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            v_in13 = vaddq_s32(v_in13, v_row_sum1);</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            v_in00 = vaddq_s32(v_in00, v_col0);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            v_in01 = vaddq_s32(v_in01, v_col1);</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;            v_in02 = vaddq_s32(v_in02, v_col2);</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;            v_in03 = vaddq_s32(v_in03, v_col3);</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;            v_in10 = vaddq_s32(v_in10, v_col0);</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            v_in11 = vaddq_s32(v_in11, v_col1);</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            v_in12 = vaddq_s32(v_in12, v_col2);</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            v_in13 = vaddq_s32(v_in13, v_col3);</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            <span class="comment">// Quantize</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            <span class="comment">// If a left shift is needed it needs to happen first.</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            <span class="keywordflow">if</span> (do_left_shift) {</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                v_in00 = vrshlq_s32(v_in00, v_shf0l);</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                v_in01 = vrshlq_s32(v_in01, v_shf1l);</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                v_in02 = vrshlq_s32(v_in02, v_shf2l);</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                v_in03 = vrshlq_s32(v_in03, v_shf3l);</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                v_in10 = vrshlq_s32(v_in10, v_shf0l);</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                v_in11 = vrshlq_s32(v_in11, v_shf1l);</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                v_in12 = vrshlq_s32(v_in12, v_shf2l);</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                v_in13 = vrshlq_s32(v_in13, v_shf3l);</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;            }</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            <span class="comment">// Multiply</span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;            v_in00 = vqrdmulhq_s32(v_in00, v_mul0);</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;            v_in01 = vqrdmulhq_s32(v_in01, v_mul1);</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;            v_in02 = vqrdmulhq_s32(v_in02, v_mul2);</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            v_in03 = vqrdmulhq_s32(v_in03, v_mul3);</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            v_in10 = vqrdmulhq_s32(v_in10, v_mul0);</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            v_in11 = vqrdmulhq_s32(v_in11, v_mul1);</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;            v_in12 = vqrdmulhq_s32(v_in12, v_mul2);</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            v_in13 = vqrdmulhq_s32(v_in13, v_mul3);</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;            <span class="comment">// Compute and add on corrective offset</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            <span class="keywordflow">if</span> (do_shift_correction) {</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                int32x4_t v_temp00 = vandq_s32(v_in00, v_shf0);</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                int32x4_t v_temp01 = vandq_s32(v_in01, v_shf1);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                int32x4_t v_temp02 = vandq_s32(v_in02, v_shf2);</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                int32x4_t v_temp03 = vandq_s32(v_in03, v_shf3);</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                int32x4_t v_temp10 = vandq_s32(v_in10, v_shf0);</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                int32x4_t v_temp11 = vandq_s32(v_in11, v_shf1);</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                int32x4_t v_temp12 = vandq_s32(v_in12, v_shf2);</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                int32x4_t v_temp13 = vandq_s32(v_in13, v_shf3);</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                v_temp00 = vshrq_n_s32(v_temp00, 31);</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                v_temp01 = vshrq_n_s32(v_temp01, 31);</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                v_temp02 = vshrq_n_s32(v_temp02, 31);</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                v_temp03 = vshrq_n_s32(v_temp03, 31);</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                v_temp10 = vshrq_n_s32(v_temp10, 31);</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                v_temp11 = vshrq_n_s32(v_temp11, 31);</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                v_temp12 = vshrq_n_s32(v_temp12, 31);</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                v_temp13 = vshrq_n_s32(v_temp13, 31);</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                v_in00 = vqaddq_s32(v_in00, v_temp00);</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                v_in01 = vqaddq_s32(v_in01, v_temp01);</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                v_in02 = vqaddq_s32(v_in02, v_temp02);</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                v_in03 = vqaddq_s32(v_in03, v_temp03);</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                v_in10 = vqaddq_s32(v_in10, v_temp10);</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                v_in11 = vqaddq_s32(v_in11, v_temp11);</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                v_in12 = vqaddq_s32(v_in12, v_temp12);</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                v_in13 = vqaddq_s32(v_in13, v_temp13);</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;            }</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;            v_in00 = vrshlq_s32(v_in00, v_shf0);</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;            v_in01 = vrshlq_s32(v_in01, v_shf1);</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;            v_in02 = vrshlq_s32(v_in02, v_shf2);</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;            v_in03 = vrshlq_s32(v_in03, v_shf3);</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;            v_in10 = vrshlq_s32(v_in10, v_shf0);</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;            v_in11 = vrshlq_s32(v_in11, v_shf1);</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;            v_in12 = vrshlq_s32(v_in12, v_shf2);</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;            v_in13 = vrshlq_s32(v_in13, v_shf3);</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;            v_in00 = vaddq_s32(v_in00, v_c_offset);</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;            v_in01 = vaddq_s32(v_in01, v_c_offset);</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;            v_in02 = vaddq_s32(v_in02, v_c_offset);</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;            v_in03 = vaddq_s32(v_in03, v_c_offset);</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;            v_in10 = vaddq_s32(v_in10, v_c_offset);</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;            v_in11 = vaddq_s32(v_in11, v_c_offset);</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;            v_in12 = vaddq_s32(v_in12, v_c_offset);</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;            v_in13 = vaddq_s32(v_in13, v_c_offset);</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;            v_in00 = vmaxq_s32(v_in00, v_minval);</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;            v_in01 = vmaxq_s32(v_in01, v_minval);</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;            v_in02 = vmaxq_s32(v_in02, v_minval);</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;            v_in03 = vmaxq_s32(v_in03, v_minval);</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;            v_in10 = vmaxq_s32(v_in10, v_minval);</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;            v_in11 = vmaxq_s32(v_in11, v_minval);</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;            v_in12 = vmaxq_s32(v_in12, v_minval);</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;            v_in13 = vmaxq_s32(v_in13, v_minval);</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;            v_in00 = vminq_s32(v_in00, v_maxval);</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;            v_in01 = vminq_s32(v_in01, v_maxval);</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;            v_in02 = vminq_s32(v_in02, v_maxval);</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;            v_in03 = vminq_s32(v_in03, v_maxval);</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;            v_in10 = vminq_s32(v_in10, v_maxval);</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;            v_in11 = vminq_s32(v_in11, v_maxval);</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;            v_in12 = vminq_s32(v_in12, v_maxval);</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;            v_in13 = vminq_s32(v_in13, v_maxval);</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;            int16x8_t v_uz00 = vuzp1q_s16(vreinterpretq_s16_s32(v_in00), vreinterpretq_s16_s32(v_in01));</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;            int16x8_t v_uz01 = vuzp1q_s16(vreinterpretq_s16_s32(v_in02), vreinterpretq_s16_s32(v_in03));</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;            int16x8_t v_uz10 = vuzp1q_s16(vreinterpretq_s16_s32(v_in10), vreinterpretq_s16_s32(v_in11));</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;            int16x8_t v_uz11 = vuzp1q_s16(vreinterpretq_s16_s32(v_in12), vreinterpretq_s16_s32(v_in13));</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;            int8x16_t v_uz0 = vuzp1q_s8(vreinterpretq_s8_s16(v_uz00), vreinterpretq_s8_s16(v_uz01));</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;            int8x16_t v_uz1 = vuzp1q_s8(vreinterpretq_s8_s16(v_uz10), vreinterpretq_s8_s16(v_uz11));</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;            vst1q_s8(out_ptr, v_uz0);</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;            out_ptr += 16;</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;            vst1q_s8(out_ptr1, v_uz1);</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;            out_ptr1 += 16;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        }</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        <span class="comment">// We are often quantizing one block of interleaved kernel output at a time - these are three registers</span></div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        <span class="comment">// wide.  Special case that here.</span></div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        <span class="keywordflow">if</span> (regs==3) {</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;            regs -= 3;</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;            int32x4_t v_mul0;</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;            int32x4_t v_mul1;</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;            int32x4_t v_mul2;</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;            int32x4_t v_shf0;</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;            int32x4_t v_shf1;</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;            int32x4_t v_shf2;</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;            int32x4_t v_shf0l;</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;            int32x4_t v_shf1l;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;            int32x4_t v_shf2l;</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;            <span class="keywordflow">if</span> (per_channel) {</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;                v_mul0 = vld1q_s32(perch_mul_ptr);</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;                v_mul1 = vld1q_s32(perch_mul_ptr + 4);</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;                v_mul2 = vld1q_s32(perch_mul_ptr + 8);</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                perch_mul_ptr += 12;</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                v_shf0 = vld1q_s32(perch_shift_ptr);</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;                v_shf1 = vld1q_s32(perch_shift_ptr + 4);</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;                v_shf2 = vld1q_s32(perch_shift_ptr + 8);</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                perch_shift_ptr += 12;</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                <span class="keywordflow">if</span> (do_left_shift) {</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                    v_shf0l = vld1q_s32(perch_shiftl_ptr);</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                    v_shf1l = vld1q_s32(perch_shiftl_ptr + 4);</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;                    v_shf2l = vld1q_s32(perch_shiftl_ptr + 8);</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                    perch_shiftl_ptr += 12;</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                }</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;            } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                v_mul0=v_mul1=v_mul2=v_mul;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                v_shf0=v_shf1=v_shf2=v_right_shift;</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                v_shf0l=v_shf1l=v_shf2l=v_left_shift;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;            }</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;            <span class="comment">// Load column pointers</span></div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;            int32x4_t v_col0 = vld1q_s32(colptr);</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;            int32x4_t v_col1 = vld1q_s32(colptr + 4);</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;            int32x4_t v_col2 = vld1q_s32(colptr + 8);</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;            colptr += 12;</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;            <span class="comment">// Load input data (row 0);</span></div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;            int32x4_t v_in00 = vld1q_s32(in_ptr);</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;            int32x4_t v_in01 = vld1q_s32(in_ptr + 4);</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;            int32x4_t v_in02 = vld1q_s32(in_ptr + 8);</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;            in_ptr += 12;</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;            <span class="comment">// Load input data (row 1);</span></div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;            int32x4_t v_in10 = vld1q_s32(in_ptr1);</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;            int32x4_t v_in11 = vld1q_s32(in_ptr1 + 4);</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;            int32x4_t v_in12 = vld1q_s32(in_ptr1 + 8);</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;            in_ptr1 += 12;</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;            <span class="comment">// Add on row bias and column bias</span></div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;            v_in00 = vaddq_s32(v_in00, v_row_sum);</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;            v_in01 = vaddq_s32(v_in01, v_row_sum);</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;            v_in02 = vaddq_s32(v_in02, v_row_sum);</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;            v_in10 = vaddq_s32(v_in10, v_row_sum1);</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;            v_in11 = vaddq_s32(v_in11, v_row_sum1);</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;            v_in12 = vaddq_s32(v_in12, v_row_sum1);</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;            v_in00 = vaddq_s32(v_in00, v_col0);</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;            v_in01 = vaddq_s32(v_in01, v_col1);</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;            v_in02 = vaddq_s32(v_in02, v_col2);</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;            v_in10 = vaddq_s32(v_in10, v_col0);</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;            v_in11 = vaddq_s32(v_in11, v_col1);</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;            v_in12 = vaddq_s32(v_in12, v_col2);</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;            <span class="comment">// Quantize</span></div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;            <span class="comment">// If a left shift is needed it needs to happen first.</span></div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;            <span class="keywordflow">if</span> (do_left_shift) {</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                v_in00 = vrshlq_s32(v_in00, v_shf0l);</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;                v_in01 = vrshlq_s32(v_in01, v_shf1l);</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;                v_in02 = vrshlq_s32(v_in02, v_shf2l);</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                v_in10 = vrshlq_s32(v_in10, v_shf0l);</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                v_in11 = vrshlq_s32(v_in11, v_shf1l);</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                v_in12 = vrshlq_s32(v_in12, v_shf2l);</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;            }</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;            <span class="comment">// Multiply</span></div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;            v_in00 = vqrdmulhq_s32(v_in00, v_mul0);</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;            v_in01 = vqrdmulhq_s32(v_in01, v_mul1);</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;            v_in02 = vqrdmulhq_s32(v_in02, v_mul2);</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;            v_in10 = vqrdmulhq_s32(v_in10, v_mul0);</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;            v_in11 = vqrdmulhq_s32(v_in11, v_mul1);</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;            v_in12 = vqrdmulhq_s32(v_in12, v_mul2);</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;            <span class="comment">// Compute and add on corrective offset</span></div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;            <span class="keywordflow">if</span> (do_shift_correction) {</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                int32x4_t v_temp00 = vandq_s32(v_in00, v_shf0);</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;                int32x4_t v_temp01 = vandq_s32(v_in01, v_shf1);</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;                int32x4_t v_temp02 = vandq_s32(v_in02, v_shf2);</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                int32x4_t v_temp10 = vandq_s32(v_in10, v_shf0);</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;                int32x4_t v_temp11 = vandq_s32(v_in11, v_shf1);</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;                int32x4_t v_temp12 = vandq_s32(v_in12, v_shf2);</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;                v_temp00 = vshrq_n_s32(v_temp00, 31);</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;                v_temp01 = vshrq_n_s32(v_temp01, 31);</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;                v_temp02 = vshrq_n_s32(v_temp02, 31);</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;                v_temp10 = vshrq_n_s32(v_temp10, 31);</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;                v_temp11 = vshrq_n_s32(v_temp11, 31);</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;                v_temp12 = vshrq_n_s32(v_temp12, 31);</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;                v_in00 = vqaddq_s32(v_in00, v_temp00);</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;                v_in01 = vqaddq_s32(v_in01, v_temp01);</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;                v_in02 = vqaddq_s32(v_in02, v_temp02);</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;                v_in10 = vqaddq_s32(v_in10, v_temp10);</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;                v_in11 = vqaddq_s32(v_in11, v_temp11);</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;                v_in12 = vqaddq_s32(v_in12, v_temp12);</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;            }</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;            v_in00 = vrshlq_s32(v_in00, v_shf0);</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;            v_in01 = vrshlq_s32(v_in01, v_shf1);</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;            v_in02 = vrshlq_s32(v_in02, v_shf2);</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;            v_in10 = vrshlq_s32(v_in10, v_shf0);</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;            v_in11 = vrshlq_s32(v_in11, v_shf1);</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;            v_in12 = vrshlq_s32(v_in12, v_shf2);</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;            v_in00 = vaddq_s32(v_in00, v_c_offset);</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;            v_in01 = vaddq_s32(v_in01, v_c_offset);</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;            v_in02 = vaddq_s32(v_in02, v_c_offset);</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;            v_in10 = vaddq_s32(v_in10, v_c_offset);</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;            v_in11 = vaddq_s32(v_in11, v_c_offset);</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;            v_in12 = vaddq_s32(v_in12, v_c_offset);</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;            v_in00 = vmaxq_s32(v_in00, v_minval);</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;            v_in01 = vmaxq_s32(v_in01, v_minval);</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;            v_in02 = vmaxq_s32(v_in02, v_minval);</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;            v_in10 = vmaxq_s32(v_in10, v_minval);</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;            v_in11 = vmaxq_s32(v_in11, v_minval);</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;            v_in12 = vmaxq_s32(v_in12, v_minval);</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;            v_in00 = vminq_s32(v_in00, v_maxval);</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;            v_in01 = vminq_s32(v_in01, v_maxval);</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;            v_in02 = vminq_s32(v_in02, v_maxval);</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;            v_in10 = vminq_s32(v_in10, v_maxval);</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;            v_in11 = vminq_s32(v_in11, v_maxval);</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;            v_in12 = vminq_s32(v_in12, v_maxval);</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;            int16x8_t v_uz00 = vuzp1q_s16(vreinterpretq_s16_s32(v_in00), vreinterpretq_s16_s32(v_in01));</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;            int16x8_t v_uz01 = vuzp1q_s16(vreinterpretq_s16_s32(v_in02), vreinterpretq_s16_s32(v_in02));</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;            int16x8_t v_uz10 = vuzp1q_s16(vreinterpretq_s16_s32(v_in10), vreinterpretq_s16_s32(v_in11));</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;            int16x8_t v_uz11 = vuzp1q_s16(vreinterpretq_s16_s32(v_in12), vreinterpretq_s16_s32(v_in12));</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;            int8x16_t v_uz0 = vuzp1q_s8(vreinterpretq_s8_s16(v_uz00), vreinterpretq_s8_s16(v_uz01));</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;            int8x16_t v_uz1 = vuzp1q_s8(vreinterpretq_s8_s16(v_uz10), vreinterpretq_s8_s16(v_uz11));</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;            vst1q_lane_s64(reinterpret_cast&lt;int64_t *&gt;(out_ptr), vreinterpretq_s64_s8(v_uz0), 0);</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;            vst1q_lane_s32(reinterpret_cast&lt;int32_t *&gt;(out_ptr + 8), vreinterpretq_s32_s8(v_uz0), 2);</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;            out_ptr += 12;</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;            vst1q_lane_s64(reinterpret_cast&lt;int64_t *&gt;(out_ptr1), vreinterpretq_s64_s8(v_uz1), 0);</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;            vst1q_lane_s32(reinterpret_cast&lt;int32_t *&gt;(out_ptr1 + 8), vreinterpretq_s32_s8(v_uz1), 2);</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;            out_ptr1 += 12;</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;        }</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;        <span class="keywordflow">while</span> (regs--) {</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;            int32x4_t v_mul0;</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;            int32x4_t v_shf0;</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;            int32x4_t v_shf0l;</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;            <span class="keywordflow">if</span> (per_channel) {</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;                v_mul0 = vld1q_s32(perch_mul_ptr);</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;                perch_mul_ptr += 4;</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;                v_shf0 = vld1q_s32(perch_shift_ptr);</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;                perch_shift_ptr += 4;</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;                <span class="keywordflow">if</span> (do_left_shift) {</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;                    v_shf0l = vld1q_s32(perch_shiftl_ptr);</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;                    perch_shiftl_ptr += 4;</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;                }</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;            } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;                v_mul0=v_mul;</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;                v_shf0=v_right_shift;</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;                v_shf0l=v_left_shift;</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;            }</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;            <span class="comment">// Load column pointers</span></div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;            int32x4_t v_col0 = vld1q_s32(colptr);</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;            colptr += 4;</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;            <span class="comment">// Load input data (row 0);</span></div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;            int32x4_t v_in00 = vld1q_s32(in_ptr);</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;            in_ptr += 4;</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;            <span class="comment">// Load input data (row 1);</span></div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;            int32x4_t v_in10 = vld1q_s32(in_ptr1);</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;            in_ptr1 += 4;</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;            <span class="comment">// Add on row sum and bias constant</span></div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;            v_in00 = vaddq_s32(v_in00, v_row_sum);</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;            v_in10 = vaddq_s32(v_in10, v_row_sum1);</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;            <span class="comment">// Subtract col sum * a_offset</span></div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;            v_in00 = vaddq_s32(v_in00, v_col0);</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;            v_in10 = vaddq_s32(v_in10, v_col0);</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;            <span class="comment">// Quantize - start with (optional) left shift</span></div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;            <span class="keywordflow">if</span> (do_left_shift) {</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;                v_in00 = vrshlq_s32(v_in00, v_shf0l);</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;                v_in10 = vrshlq_s32(v_in10, v_shf0l);</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;            }</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;            <span class="comment">// Then multiply</span></div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;            v_in00 = vqrdmulhq_s32(v_in00, v_mul0);</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;            v_in10 = vqrdmulhq_s32(v_in10, v_mul0);</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;            <span class="comment">// Compute and add on corrective offset</span></div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;            <span class="keywordflow">if</span> (do_shift_correction) {</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;                int32x4_t v_temp00 = vandq_s32(v_in00, v_shf0);</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;                int32x4_t v_temp10 = vandq_s32(v_in10, v_shf0);</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;                v_temp00 = vshrq_n_s32(v_temp00, 31);</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;                v_temp10 = vshrq_n_s32(v_temp10, 31);</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;                v_in00 = vqaddq_s32(v_in00, v_temp00);</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;                v_in10 = vqaddq_s32(v_in10, v_temp10);</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;            }</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;            v_in00 = vrshlq_s32(v_in00, v_shf0);</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;            v_in10 = vrshlq_s32(v_in10, v_shf0);</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;            v_in00 = vaddq_s32(v_in00, v_c_offset);</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;            v_in10 = vaddq_s32(v_in10, v_c_offset);</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;            v_in00 = vmaxq_s32(v_in00, v_minval);</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;            v_in10 = vmaxq_s32(v_in10, v_minval);</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;            v_in00 = vminq_s32(v_in00, v_maxval);</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;            v_in10 = vminq_s32(v_in10, v_maxval);</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;            int16x8_t v_uz00 = vuzp1q_s16(vreinterpretq_s16_s32(v_in00), vreinterpretq_s16_s32(v_in10));</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;            int8x16_t v_uz0 = vuzp1q_s8(vreinterpretq_s8_s16(v_uz00), vreinterpretq_s8_s16(v_uz00));</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;            vst1q_lane_s32(reinterpret_cast&lt;int32_t *&gt;(out_ptr), vreinterpretq_s32_s8(v_uz0), 0);</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;            out_ptr += 4;</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;            vst1q_lane_s32(reinterpret_cast&lt;int32_t *&gt;(out_ptr1), vreinterpretq_s32_s8(v_uz0), 1);</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;            out_ptr1 += 4;</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;        }</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;        <span class="keywordflow">if</span> (odds) {</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;            int32x4_t v_col0 = vdupq_n_s32(0);</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;            int32x4_t v_in00 = vdupq_n_s32(0);</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;            int32x4_t v_in10 = vdupq_n_s32(0);</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;            int32x4_t v_mul0 = vdupq_n_s32(0);</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;            int32x4_t v_shf0 = vdupq_n_s32(0);</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;            int32x4_t v_shf0l = vdupq_n_s32(0);</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;            <span class="keywordflow">if</span> (!per_channel) {</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;                v_mul0 = v_mul;</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;                v_shf0 = v_right_shift;</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;                v_shf0l = v_left_shift;</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;            }</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;            <span class="keywordflow">do</span> {</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;                v_col0 = vld1q_lane_s32(colptr, v_col0, 0);</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;                v_in00 = vld1q_lane_s32(in_ptr, v_in00, 0);</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;                v_in10 = vld1q_lane_s32(in_ptr1, v_in10, 0);</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;                <span class="keywordflow">if</span> (per_channel) {</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;                    v_mul0 = vld1q_lane_s32(perch_mul_ptr, v_mul0, 0);</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;                    v_shf0 = vld1q_lane_s32(perch_shift_ptr, v_shf0, 0);</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;                    <span class="keywordflow">if</span> (do_left_shift) {</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;                        v_shf0l = vld1q_lane_s32(perch_shiftl_ptr, v_shf0l, 0);</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;                    }</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;                }</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;                <span class="keywordflow">if</span> (odds == 1) { <span class="keywordflow">break</span>; }</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;                v_col0 = vld1q_lane_s32(colptr + 1, v_col0, 1);</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;                v_in00 = vld1q_lane_s32(in_ptr + 1, v_in00, 1);</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;                v_in10 = vld1q_lane_s32(in_ptr1 + 1, v_in10, 1);</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;                <span class="keywordflow">if</span> (per_channel) {</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;                    v_mul0 = vld1q_lane_s32(perch_mul_ptr + 1, v_mul0, 1);</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;                    v_shf0 = vld1q_lane_s32(perch_shift_ptr + 1, v_shf0, 1);</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;                    <span class="keywordflow">if</span> (do_left_shift) {</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;                        v_shf0l = vld1q_lane_s32(perch_shiftl_ptr + 1, v_shf0l, 1);</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;                    }</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;                }</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;                <span class="keywordflow">if</span> (odds == 2) { <span class="keywordflow">break</span>; }</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;                v_col0 = vld1q_lane_s32(colptr + 2, v_col0, 2);</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;                v_in00 = vld1q_lane_s32(in_ptr + 2, v_in00, 2);</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;                v_in10 = vld1q_lane_s32(in_ptr1 + 2, v_in10, 2);</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;                <span class="keywordflow">if</span> (per_channel) {</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;                    v_mul0 = vld1q_lane_s32(perch_mul_ptr + 2, v_mul0, 2);</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;                    v_shf0 = vld1q_lane_s32(perch_shift_ptr + 2, v_shf0, 2);</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;                    <span class="keywordflow">if</span> (do_left_shift) {</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;                        v_shf0l = vld1q_lane_s32(perch_shiftl_ptr + 2, v_shf0l, 2);</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;                    }</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;                }</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;            } <span class="keywordflow">while</span> (0);</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;            <span class="comment">// Add on row sum and bias constant</span></div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;            v_in00 = vaddq_s32(v_in00, v_row_sum);</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;            v_in10 = vaddq_s32(v_in10, v_row_sum1);</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;            <span class="comment">// Subtract col sum * a_offset</span></div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;            v_in00 = vaddq_s32(v_in00, v_col0);</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;            v_in10 = vaddq_s32(v_in10, v_col0);</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;            <span class="comment">// Quantize - start with (optional) left shift</span></div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;            <span class="keywordflow">if</span> (do_left_shift) {</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;                v_in00 = vrshlq_s32(v_in00, v_shf0l);</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;                v_in10 = vrshlq_s32(v_in10, v_shf0l);</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;            }</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;            <span class="comment">// Then multiply</span></div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;            v_in00 = vqrdmulhq_s32(v_in00, v_mul0);</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;            v_in10 = vqrdmulhq_s32(v_in10, v_mul0);</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;            <span class="comment">// Compute and add on corrective offset</span></div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;            <span class="keywordflow">if</span> (do_shift_correction) {</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;                int32x4_t v_temp00 = vandq_s32(v_in00, v_shf0);</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;                int32x4_t v_temp10 = vandq_s32(v_in10, v_shf0);</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;                v_temp00 = vshrq_n_s32(v_temp00, 31);</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;                v_temp10 = vshrq_n_s32(v_temp10, 31);</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;                v_in00 = vqaddq_s32(v_in00, v_temp00);</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;                v_in10 = vqaddq_s32(v_in10, v_temp10);</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;            }</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;            v_in00 = vrshlq_s32(v_in00, v_shf0);</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;            v_in10 = vrshlq_s32(v_in10, v_shf0);</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;            v_in00 = vaddq_s32(v_in00, v_c_offset);</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;            v_in10 = vaddq_s32(v_in10, v_c_offset);</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;            v_in00 = vmaxq_s32(v_in00, v_minval);</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;            v_in10 = vmaxq_s32(v_in10, v_minval);</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;            v_in00 = vminq_s32(v_in00, v_maxval);</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;            v_in10 = vminq_s32(v_in10, v_maxval);</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;            <span class="keywordflow">do</span> {</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;                vst1q_lane_s8(out_ptr, vreinterpretq_s8_s32(v_in00), 0);</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;                vst1q_lane_s8(out_ptr1, vreinterpretq_s8_s32(v_in10), 0);</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;                <span class="keywordflow">if</span> (odds==1) { <span class="keywordflow">break</span>; }</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;                vst1q_lane_s8(out_ptr + 1, vreinterpretq_s8_s32(v_in00), 4);</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;                vst1q_lane_s8(out_ptr1 + 1, vreinterpretq_s8_s32(v_in10), 4);</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;                <span class="keywordflow">if</span> (odds==2) { <span class="keywordflow">break</span>; }</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;                vst1q_lane_s8(out_ptr + 2, vreinterpretq_s8_s32(v_in00), 8);</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;                vst1q_lane_s8(out_ptr1 + 2, vreinterpretq_s8_s32(v_in10), 8);</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;            } <span class="keywordflow">while</span>(0);</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;        }</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;    }</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;}</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;} <span class="comment">// anonymous namespace</span></div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> Tin, <span class="keyword">typename</span> Tout&gt;</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__gemm.xhtml#a5ef9b17d8d1641178b4327a376312282">requantize_block_32</a>(<span class="keyword">const</span> Requantize32 &amp;qp, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> width, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> height,</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;                         <span class="keyword">const</span> Tin *input, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> in_stride, Tout *output, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> out_stride,</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;                         <span class="keyword">const</span> int32_t *row_bias, <span class="keyword">const</span> int32_t *col_bias, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> start_col) {</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;    <span class="keywordflow">if</span> (qp.per_channel_requant) {</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;        <span class="keywordflow">if</span> (qp.minval &gt;= qp.c_offset) {</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;            <span class="keywordflow">if</span> (qp.per_channel_left_shifts) {</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;                requantize_block_32_int&lt;false, true, true&gt;(qp, width, height, <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int32_t *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>), in_stride,</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;                                 reinterpret_cast&lt;int8_t *&gt;(output), out_stride, row_bias, col_bias, start_col);</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;            } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;                requantize_block_32_int&lt;false, true, false&gt;(qp, width, height, <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int32_t *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>), in_stride,</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;                                 reinterpret_cast&lt;int8_t *&gt;(output), out_stride, row_bias, col_bias, start_col);</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;            }</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;        } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;            <span class="keywordflow">if</span> (qp.per_channel_left_shifts) {</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;                requantize_block_32_int&lt;true, true, true&gt;(qp, width, height, <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int32_t *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>), in_stride,</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;                                 reinterpret_cast&lt;int8_t *&gt;(output), out_stride, row_bias, col_bias, start_col);</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;            } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;                requantize_block_32_int&lt;true, true, false&gt;(qp, width, height, <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int32_t *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>), in_stride,</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;                                 reinterpret_cast&lt;int8_t *&gt;(output), out_stride, row_bias, col_bias, start_col);</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;            }</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;        }</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;        <span class="keywordflow">if</span> (qp.minval &gt;= qp.c_offset) {</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;            <span class="keywordflow">if</span> (qp.per_layer_left_shift &gt; 0) {</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;                requantize_block_32_int&lt;false, false, true&gt;(qp, width, height, <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int32_t *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>), in_stride,</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;                                 reinterpret_cast&lt;int8_t *&gt;(output), out_stride, row_bias, col_bias, start_col);</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;            } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;                requantize_block_32_int&lt;false, false, false&gt;(qp, width, height, <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int32_t *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>), in_stride,</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;                                 reinterpret_cast&lt;int8_t *&gt;(output), out_stride, row_bias, col_bias, start_col);</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;            }</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;        } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;            <span class="keywordflow">if</span> (qp.per_layer_left_shift &gt; 0) {</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;                requantize_block_32_int&lt;true, false, true&gt;(qp, width, height, <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int32_t *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>), in_stride,</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;                                 reinterpret_cast&lt;int8_t *&gt;(output), out_stride, row_bias, col_bias, start_col);</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;            } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;                requantize_block_32_int&lt;true, false, false&gt;(qp, width, height, <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int32_t *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>), in_stride,</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;                                 reinterpret_cast&lt;int8_t *&gt;(output), out_stride, row_bias, col_bias, start_col);</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;            }</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;        }</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;    }</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;}</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;<span class="keyword">template</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__gemm.xhtml#a5ef9b17d8d1641178b4327a376312282">requantize_block_32</a>(<span class="keyword">const</span> Requantize32 &amp;qp, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> width, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> height,</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;                         <span class="keyword">const</span> int32_t *input, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> in_stride, int8_t *output, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> out_stride,</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;                         <span class="keyword">const</span> int32_t *row_bias, <span class="keyword">const</span> int32_t *col_bias, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> start_col);</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;<span class="keyword">template</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__gemm.xhtml#a5ef9b17d8d1641178b4327a376312282">requantize_block_32</a>(<span class="keyword">const</span> Requantize32 &amp;qp, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> width, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> height,</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;                         <span class="keyword">const</span> uint32_t *input, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> in_stride, uint8_t *output, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> out_stride,</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;                         <span class="keyword">const</span> int32_t *row_bias, <span class="keyword">const</span> int32_t *col_bias, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> start_col);</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;<span class="comment"> * Routine (and helpers) to compute row sums needed for offset correction.</span></div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;<span class="comment"> * This is often needed for a lot of short rows (e.g.  Syrax 5 - 6400 rows</span></div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;<span class="comment"> * of length 27), therefore it&#39;s important not to sacrifice performance on</span></div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;<span class="comment"> * odd length rows.</span></div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;<span class="comment"> * To minimize performance loss in these cases, this routine will overread</span></div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;<span class="comment"> * by up to 7 bytes.</span></div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;<span class="comment"> * This is handled via &quot;mask&quot; and &quot;mask mode&quot; parameters to the inner</span></div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;<span class="comment"> * routines; mask mode == 1 indicates that are between 1 and 8 bytes</span></div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;<span class="comment"> * (inclusive) needed at the end; in these cases we always read 8 bytes.</span></div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;<span class="comment"> * mask mode == 2 indicates that there are between 9 and 15 bytes needed at</span></div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;<span class="comment"> * the end, and in this case we always read 16 bytes.  In both cases the</span></div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;<span class="comment"> * &#39;mask&#39; vector is set up so that the read value can be masked off to clear</span></div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;<span class="comment"> * the overread lanes.  This is handled by &#39;accumulate_masked_8&#39; and</span></div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;<span class="comment"> * &#39;accumulate_masked_16&#39; above.</span></div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;<span class="comment"> * This routine is templated on the type to be accumulated, because the</span></div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;<span class="comment"> * innermost instruction used needs to be of the correct signedness.</span></div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;<span class="comment"> * However, beyond this point we always use signed values in both cases.</span></div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;<span class="comment"> * The instructions that need to be different are therefore wrapped in</span></div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;<span class="comment"> * helper functions below.</span></div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;<span class="comment"> * The general strategy used is to load vectors of 16 bytes and accumulate</span></div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;<span class="comment"> * (using uadalp/sadalp or AArch32 equivalents) into 8x16-bit accumulators.</span></div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;<span class="comment"> * These are then reduced (using uadalp/sadalp again) into 4x32-bit</span></div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;<span class="comment"> * accumulators.  The 4 accumulators for up to 4 rows being processed are</span></div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;<span class="comment"> * then added together into a single output vector using pairwise adds.</span></div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;<span class="comment"> * This reduction from the 8x16-bit into the 4x32-bit accumulators needs to</span></div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;<span class="comment"> * occur before the 16-bit accumulators can overflow - which is every 32</span></div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;<span class="comment"> * iterations (512 total bytes processed).  This is explained more below.</span></div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;<span class="keyword">namespace </span>{</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;    <span class="keyword">struct </span>row_sum_helpers {</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;        <span class="keyword">const</span> Requantize32 &amp;qp;</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;        <span class="comment">/* Load a full 16 byte vector, pairwise accumulate into &#39;sum&#39; with uadalp or sadalp */</span></div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;        <span class="keyword">inline</span> int16x8_t accumulate_16(<span class="keyword">const</span> T *ptr, int16x8_t sum);</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;        <span class="comment">/* Load a full 16 byte vector, but mask before accumulation (see above). */</span></div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;        <span class="keyword">inline</span> int16x8_t accumulate_masked_16(<span class="keyword">const</span> T *ptr, int16x8_t sum, uint64x2_t mask);</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;        <span class="comment">/* Load 8 bytes and mask before accumulation. */</span></div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;        <span class="keyword">inline</span> int16x8_t accumulate_masked_8(<span class="keyword">const</span> T *ptr, int16x8_t sum, uint64x2_t mask);</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;        <span class="comment">/* This function does the actual work for up to 4 rows at a time.</span></div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;<span class="comment">         * It&#39;s pulled out so we can template on the row count to generate</span></div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;<span class="comment">         * the 4 different cases.  4 rows are computed at a time as this</span></div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;<span class="comment">         * reduces to a single vector write.  */</span></div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;        <span class="keyword">template</span>&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> rows, <span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;        <span class="keywordtype">void</span> compute_some_rows(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> blocks, <span class="keyword">const</span> T *input, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> in_stride, int32_t *row_bias, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> mask_mode, uint64x2_t mask, int32x4_t offset_mul) {</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;            int16x8_t sums[<a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a74742cb5c8e2ac354a60cb73383d8176">rows</a>];</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;            int32x4_t finalsums[<a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a74742cb5c8e2ac354a60cb73383d8176">rows</a>];</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0; i&lt;<a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a74742cb5c8e2ac354a60cb73383d8176">rows</a>; i++) {</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;                sums[i]      = vdupq_n_s16(0);</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;                finalsums[i] = vdupq_n_s32(0);</div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;            }</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0; i&lt;blocks; i++) {</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> r=0; r&lt;<a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a74742cb5c8e2ac354a60cb73383d8176">rows</a>; r++) {</div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;                    <span class="comment">/* If we add too many blocks together, we run the risk</span></div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;<span class="comment">                     * of overflowing the intermediate 16-bit accumulators,</span></div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;<span class="comment">                     * especially in the unsigned case where we later treat</span></div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;<span class="comment">                     * the accumulator as signed.</span></div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;<span class="comment">                     *</span></div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;<span class="comment">                     * In that case, the maximum (signed) value is 16383,</span></div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;<span class="comment">                     * which is safe for 64 (unsigned) accumulations (255*64</span></div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;<span class="comment">                     * = 16,320).</span></div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;<span class="comment">                     *</span></div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;<span class="comment">                     * Each invocation of pairwise add adds 2 values to the</span></div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;<span class="comment">                     * accumulator - so in the unsigned case we can do 32</span></div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;<span class="comment">                     * adds before we need to reset the 16-bit accumulator</span></div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;<span class="comment">                     * by adding into the 32-bit &#39;finalsums&#39;.</span></div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;<span class="comment">                     *</span></div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;<span class="comment">                     * We could do 64 adds in the signed case, but that</span></div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;<span class="comment">                     * optimization is not worth the complexity.</span></div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;<span class="comment">                     */</span></div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;                    <span class="keywordflow">if</span> (i &gt; 0 &amp;&amp; ((i &amp; 31) == 0)) {</div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;                        finalsums[r] = vpadalq_s16(finalsums[r], sums[r]);</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;                        sums[r] = vdupq_n_s16(0);</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;                    }</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;                    sums[r] = accumulate_16(input + (r * in_stride) + (i * 16), sums[r]);</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;                }</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;            }</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;</div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;            <span class="comment">/* Handle the final masked read if needed. */</span></div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;            <span class="keywordflow">if</span> (mask_mode &gt; 0) {</div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> r=0; r&lt;<a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a74742cb5c8e2ac354a60cb73383d8176">rows</a>; r++) {</div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;                    <span class="keywordflow">if</span> (mask_mode == 1) {</div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;                        sums[r] = accumulate_masked_8(input + (r * in_stride) + (blocks * 16), sums[r], mask);</div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;                    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;                        sums[r] = accumulate_masked_16(input + (r * in_stride) + (blocks * 16), sums[r], mask);</div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;                    }</div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;                }</div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;            }</div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;</div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0; i&lt;<a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a74742cb5c8e2ac354a60cb73383d8176">rows</a>; i++) {</div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;                finalsums[i] = vpadalq_s16(finalsums[i], sums[i]);</div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;            }</div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;</div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;            int32x4_t t0, t1;</div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;            int32x2_t t2;</div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;</div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;            <span class="comment">/* Result writeback - need to write back one value per row</span></div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;<span class="comment">             * processed.  Multiply all the final totals by -b_offset so</span></div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;<span class="comment">             * that the terms can simply be added in the requantize code.</span></div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;<span class="comment">             * */</span></div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;            <span class="keywordflow">switch</span> (rows) {</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;                <span class="keywordflow">case</span> 1:</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;                    <span class="comment">/* If we only have one output, just use ADDV.  Multiply</span></div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;<span class="comment">                     * the offset into all four components separately so it</span></div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;<span class="comment">                     * can stay in the SIMD register file.  */</span></div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;                    t0 = vmulq_s32(finalsums[0], offset_mul);</div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;                    *row_bias = vaddvq_s32(t0);</div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;</div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;                <span class="keywordflow">case</span> 2:</div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;                    <span class="comment">/* For two outputs, two rounds of pairwise adds will</span></div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;<span class="comment">                     * generate the result in a 2-vector we can store in one</span></div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;<span class="comment">                     * go.  */</span></div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;                    t0 = vpaddq_s32(finalsums[0], finalsums[1]);</div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;                    t0 = vpaddq_s32(t0, t0);</div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;                    t2 = vmul_s32(vget_low_s32(t0), vget_low_s32(offset_mul));</div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;                    vst1_s32(row_bias, t2);</div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;</div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;                <span class="keywordflow">case</span> 3:</div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;                    <span class="comment">/* Three rows - need to store the low two words plus the odd value from lane 2 */</span></div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;                    t0 = vpaddq_s32(finalsums[0], finalsums[1]);</div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;                    t1 = vpaddq_s32(finalsums[2], finalsums[2]);</div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;</div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;                    t0 = vpaddq_s32(t0, t1);</div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;                    t0 = vmulq_s32(t0, offset_mul);</div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;</div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;                    vst1_s32(row_bias, vget_low_s32(t0));</div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;                    row_bias[2] = vgetq_lane_s32(t0, 2);</div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;</div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;                <span class="keywordflow">case</span> 4:</div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;                    <span class="comment">/* Four rows (most common case) - reduce to a single</span></div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;<span class="comment">                     * vector with pairwise adds.  */</span></div><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;                    t0 = vpaddq_s32(finalsums[0], finalsums[1]);</div><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;                    t1 = vpaddq_s32(finalsums[2], finalsums[3]);</div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;</div><div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;                    t0 = vpaddq_s32(t0, t1);</div><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;                    t0 = vmulq_s32(t0, offset_mul);</div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;</div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;                    vst1q_s32(row_bias, t0);</div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;</div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;                <span class="keywordflow">default</span>:</div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;                    <a class="code" href="utils_8hpp.xhtml#aa468b37bb9d2901433139d01b79036b0">UNREACHABLE</a>(<span class="stringliteral">&quot;Impossible.&quot;</span>);</div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;            }</div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;        }</div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;</div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;        row_sum_helpers(<span class="keyword">const</span> Requantize32 &amp;qp) : qp(qp) { }</div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;    };</div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;</div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;    <span class="keyword">template</span>&lt;&gt;</div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;    int16x8_t row_sum_helpers::accumulate_16(<span class="keyword">const</span> uint8_t *ptr, int16x8_t sum) {</div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;        <span class="keywordflow">return</span> vreinterpretq_s16_u16(vpadalq_u8(vreinterpretq_u16_s16(sum), vld1q_u8(ptr)));</div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;    }</div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;</div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;    <span class="keyword">template</span>&lt;&gt;</div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;    int16x8_t row_sum_helpers::accumulate_16(<span class="keyword">const</span> int8_t *ptr, int16x8_t sum) {</div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;        <span class="keywordflow">return</span> vpadalq_s8(sum, vld1q_s8(ptr));</div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;    }</div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;</div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;    <span class="keyword">template</span>&lt;&gt;</div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;    int16x8_t row_sum_helpers::accumulate_masked_16(<span class="keyword">const</span> int8_t *ptr, int16x8_t sum, uint64x2_t mask) {</div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;        int8x16_t v = vandq_s8(vld1q_s8(ptr), vreinterpretq_s8_u64(mask));</div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;        <span class="keywordflow">return</span> vpadalq_s8(sum, v);</div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;    }</div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;</div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;    <span class="keyword">template</span>&lt;&gt;</div><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;    int16x8_t row_sum_helpers::accumulate_masked_16(<span class="keyword">const</span> uint8_t *ptr, int16x8_t sum, uint64x2_t mask) {</div><div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;        uint8x16_t v = vandq_u8(vld1q_u8(ptr), vreinterpretq_u8_u64(mask));</div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;        <span class="keywordflow">return</span> vreinterpretq_s16_u16(vpadalq_u8(vreinterpretq_u16_s16(sum), v));</div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;    }</div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;</div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;    <span class="keyword">template</span>&lt;&gt;</div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;    int16x8_t row_sum_helpers::accumulate_masked_8(<span class="keyword">const</span> int8_t *ptr, int16x8_t sum, uint64x2_t mask) {</div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;        int8x16_t v = vcombine_s8(vld1_s8(ptr), vdup_n_s8(0));</div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;        v = vreinterpretq_s8_u64(vandq_u64(mask, vreinterpretq_u64_s8(v)));</div><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;        <span class="keywordflow">return</span> vpadalq_s8(sum, v);</div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;    }</div><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;</div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;    <span class="keyword">template</span>&lt;&gt;</div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;    int16x8_t row_sum_helpers::accumulate_masked_8(<span class="keyword">const</span> uint8_t *ptr, int16x8_t sum, uint64x2_t mask) {</div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;        uint8x16_t v = vcombine_u8(vld1_u8(ptr), vdup_n_u8(0));</div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;        v = vreinterpretq_u8_u64(vandq_u64(mask, vreinterpretq_u64_u8(v)));</div><div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;        <span class="keywordflow">return</span> vreinterpretq_s16_u16(vpadalq_u8(vreinterpretq_u16_s16(sum), v));</div><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;    }</div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;}</div><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;</div><div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__gemm.xhtml#a283c57cffc3c8e60d00b41f10e4b7476">compute_row_sums</a>(<span class="keyword">const</span> Requantize32 &amp;qp, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> width, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> height,</div><div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;                      <span class="keyword">const</span> T *input, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> in_stride, int32_t *row_bias) {</div><div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;    <span class="comment">/* If the &#39;b&#39; offset is zero, just skip this entirely. */</span></div><div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;    <span class="keywordflow">if</span> (qp.b_offset == 0) {</div><div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;        memset(row_bias, 0, height * <span class="keyword">sizeof</span>(int32_t));</div><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;    }</div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;</div><div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;    row_sum_helpers thehelpers(qp);</div><div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;</div><div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;    <span class="keyword">const</span> int32x4_t offset_mul = vdupq_n_s32(-qp.b_offset);</div><div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;</div><div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;    <span class="comment">/* Work out how many full vectors of 16 bytes we will read, and how many</span></div><div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;<span class="comment">     * odd bytes at the end */</span></div><div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> blocks = (width / 16);</div><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> odds = width % 16;</div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;</div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;    <span class="comment">/* Generate a mask to use on the last iteration, if necessary. */</span></div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;    uint64x2_t mask;</div><div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> mask_mode = 0;</div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;</div><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;    <span class="keywordflow">if</span> (odds &gt; 0 &amp;&amp; odds &lt;= 8) {</div><div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;        <span class="comment">/* 1-8 odds: mask in the low lane, 0 in the top */</span></div><div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;        uint64_t maskval = (~0ULL) &gt;&gt; (8 * (8-odds));</div><div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;</div><div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;        mask = vsetq_lane_u64(maskval, vdupq_n_u64(0), 0);</div><div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;</div><div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;        mask_mode = 1;</div><div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (odds &gt; 8) {</div><div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;        <span class="comment">/* 9-15 odds: mask in the top lane, all 1s in the bottom. */</span></div><div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;        uint64_t maskval = (~0ULL) &gt;&gt; (8 * (16-odds));</div><div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;</div><div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;        mask = vsetq_lane_u64(maskval, vdupq_n_u64(~0ULL), 1);</div><div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;</div><div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;        mask_mode = 2;</div><div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;    }</div><div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;</div><div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> row=0; row&lt;height; row+=4) {</div><div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;        <span class="keywordflow">switch</span>(height-row) {</div><div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;            <span class="keywordflow">default</span>:</div><div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;            <span class="keywordflow">case</span> 4:</div><div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;                thehelpers.compute_some_rows&lt;4&gt;(blocks, input + (row * in_stride), in_stride, row_bias + row, mask_mode, mask, offset_mul);</div><div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;            <span class="keywordflow">case</span> 3:</div><div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;                thehelpers.compute_some_rows&lt;3&gt;(blocks, input + (row * in_stride), in_stride, row_bias + row, mask_mode, mask, offset_mul);</div><div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;            <span class="keywordflow">case</span> 2:</div><div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;                thehelpers.compute_some_rows&lt;2&gt;(blocks, input + (row * in_stride), in_stride, row_bias + row, mask_mode, mask, offset_mul);</div><div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;            <span class="keywordflow">case</span> 1:</div><div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;                thehelpers.compute_some_rows&lt;1&gt;(blocks, input + (row * in_stride), in_stride, row_bias + row, mask_mode, mask, offset_mul);</div><div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;        }</div><div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;    }</div><div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;}</div><div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;</div><div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;<span class="comment">/* Instantiate the two versions for uint8_t and int8_t. */</span></div><div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;<span class="keyword">template</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__gemm.xhtml#a283c57cffc3c8e60d00b41f10e4b7476">compute_row_sums</a>(<span class="keyword">const</span> Requantize32 &amp;, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>, <span class="keyword">const</span> int8_t *, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>, int32_t *);</div><div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;<span class="keyword">template</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__gemm.xhtml#a283c57cffc3c8e60d00b41f10e4b7476">compute_row_sums</a>(<span class="keyword">const</span> Requantize32 &amp;, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>, <span class="keyword">const</span> uint8_t *, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>, int32_t *);</div><div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;</div><div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;<span class="keyword">template</span>&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> active_rows, <span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> add_block(<span class="keyword">const</span> T *input, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> in_stride, int32_t *output);</div><div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;</div><div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;<span class="keyword">template</span>&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> active_rows&gt;</div><div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> add_block(<span class="keyword">const</span> uint8_t *input, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> in_stride, int32_t *output) {</div><div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;    uint8x16_t inputs[4];</div><div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;</div><div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0; i&lt;4; i++) {</div><div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;        <span class="keywordflow">if</span> (i &lt; active_rows) {</div><div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;            inputs[i] = vld1q_u8(input + i * in_stride);</div><div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;        } <span class="keywordflow">else</span> {</div><div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;            inputs[i] = vdupq_n_u8(0);</div><div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;        }</div><div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;    }</div><div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;</div><div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;    int16x8_t sums_16b[4];</div><div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;</div><div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;    <span class="comment">// Two adds for the low pairs</span></div><div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;    sums_16b[0]=vreinterpretq_s16_u16(vaddl_u8(vget_low_u8(inputs[0]), vget_low_u8(inputs[1])));</div><div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;    sums_16b[1]=vreinterpretq_s16_u16(vaddl_u8(vget_low_u8(inputs[2]), vget_low_u8(inputs[3])));</div><div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;    <span class="comment">// Two adds for the high pairs</span></div><div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;    sums_16b[2]=vreinterpretq_s16_u16(vaddl_high_u8(inputs[0], inputs[1]));</div><div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;    sums_16b[3]=vreinterpretq_s16_u16(vaddl_high_u8(inputs[2], inputs[3]));</div><div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;</div><div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;    int32x4_t sums_32b[4];</div><div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;</div><div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;    sums_32b[0]=vaddl_s16(vget_low_s16(sums_16b[0]), vget_low_s16(sums_16b[1]));</div><div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;    sums_32b[1]=vaddl_high_s16(sums_16b[0], sums_16b[1]);</div><div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;    sums_32b[2]=vaddl_s16(vget_low_s16(sums_16b[2]), vget_low_s16(sums_16b[3]));</div><div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;    sums_32b[3]=vaddl_high_s16(sums_16b[2], sums_16b[3]);</div><div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;</div><div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0; i&lt;4; i++) {</div><div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;        vst1q_s32(output + 4*i, vaddq_s32(sums_32b[i], vld1q_s32(output + 4*i)));</div><div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;    }</div><div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;}</div><div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;</div><div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;<span class="keyword">template</span>&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> active_rows&gt;</div><div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> add_block(<span class="keyword">const</span> int8_t *input, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> in_stride, int32_t *output) {</div><div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;    int8x16_t inputs[4];</div><div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;</div><div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0; i&lt;4; i++) {</div><div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;        <span class="keywordflow">if</span> (i &lt; active_rows) {</div><div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;            inputs[i] = vld1q_s8(input + i * in_stride);</div><div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;        } <span class="keywordflow">else</span> {</div><div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;            inputs[i] = vdupq_n_s8(0);</div><div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;        }</div><div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;    }</div><div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;</div><div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;    int16x8_t sums_16b[4];</div><div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;</div><div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;    <span class="comment">// Two adds for the low pairs</span></div><div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;    sums_16b[0]=vaddl_s8(vget_low_s8(inputs[0]), vget_low_s8(inputs[1]));</div><div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;    sums_16b[1]=vaddl_s8(vget_low_s8(inputs[2]), vget_low_s8(inputs[3]));</div><div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;    <span class="comment">// Two adds for the high pairs</span></div><div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;    sums_16b[2]=vaddl_high_s8(inputs[0], inputs[1]);</div><div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;    sums_16b[3]=vaddl_high_s8(inputs[2], inputs[3]);</div><div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;</div><div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;    int32x4_t sums_32b[4];</div><div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;</div><div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;    sums_32b[0]=vaddl_s16(vget_low_s16(sums_16b[0]), vget_low_s16(sums_16b[1]));</div><div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;    sums_32b[1]=vaddl_high_s16(sums_16b[0], sums_16b[1]);</div><div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;    sums_32b[2]=vaddl_s16(vget_low_s16(sums_16b[2]), vget_low_s16(sums_16b[3]));</div><div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;    sums_32b[3]=vaddl_high_s16(sums_16b[2], sums_16b[3]);</div><div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;</div><div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0; i&lt;4; i++) {</div><div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;        vst1q_s32(output + 4*i, vaddq_s32(sums_32b[i], vld1q_s32(output + 4*i)));</div><div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;    }</div><div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;}</div><div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;</div><div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;<span class="comment">/* &quot;first_col&quot; parameter is used to offset the read into the qp.bias array,</span></div><div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;<span class="comment"> * in cases where we are not computing the first columns of the output (i.e.</span></div><div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;<span class="comment"> * in multithreaded cases where we divide columns across threads) */</span></div><div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__gemm.xhtml#a0f7c3bb1a6bbcb34dc0988ef61510c38">compute_col_sums</a>(<span class="keyword">const</span> Requantize32 &amp;qp, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> width, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> height, <span class="keyword">const</span> T *input, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> in_stride, int32_t *col_bias, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> depth, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> multi, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> first_col) {</div><div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;    <span class="comment">/* Only actually add up the columns if a_offset is non-zero. */</span></div><div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;    <span class="keywordflow">if</span> (qp.a_offset != 0) {</div><div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;        memset(reinterpret_cast&lt;void *&gt;(col_bias), 0, width * <span class="keyword">sizeof</span>(int32_t));</div><div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;</div><div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> row=0; row&lt;height; row+=4) {</div><div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numrows=std::min(height-row, 4u);</div><div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;</div><div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> col=0; col&lt;width; col+=16) {</div><div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;                <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numcols=std::min(width-col, 16u);</div><div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;</div><div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;                <span class="keywordflow">if</span> (numcols==16) {</div><div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;                    <span class="keywordflow">switch</span>(numrows) {</div><div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;                        <span class="keywordflow">case</span> 1:</div><div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;                            add_block&lt;1&gt;(input + row * in_stride + col, in_stride, col_bias + col);</div><div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;                            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;</div><div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;                        <span class="keywordflow">case</span> 2:</div><div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;                            add_block&lt;2&gt;(input + row * in_stride + col, in_stride, col_bias + col);</div><div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;                            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;</div><div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;                        <span class="keywordflow">case</span> 3:</div><div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;                            add_block&lt;3&gt;(input + row * in_stride + col, in_stride, col_bias + col);</div><div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;                            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;</div><div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;                        <span class="keywordflow">case</span> 4:</div><div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;                            add_block&lt;4&gt;(input + row * in_stride + col, in_stride, col_bias + col);</div><div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;                            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;</div><div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;                        <span class="keywordflow">default</span>:</div><div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;                            <a class="code" href="utils_8hpp.xhtml#aa468b37bb9d2901433139d01b79036b0">UNREACHABLE</a>(<span class="stringliteral">&quot;Impossible.&quot;</span>);</div><div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;                    }</div><div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;                } <span class="keywordflow">else</span> {</div><div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;                    <span class="keywordflow">for</span> (; col&lt;width; col++) {</div><div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;                        int32_t sum=0;</div><div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> r=0; r&lt;numrows; r++) {</div><div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;                            sum += input[(row + r)*in_stride + col];</div><div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;                        }</div><div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;                        col_bias[col] += sum;</div><div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;                    }</div><div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;                }</div><div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;            }</div><div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;        }</div><div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;    }</div><div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;</div><div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> col=0; col&lt;width; col++) {</div><div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;        int32_t result = col_bias[col];</div><div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;</div><div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;        result = (qp.a_offset * qp.b_offset * depth) - (result * qp.a_offset);</div><div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;</div><div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;        <span class="keywordflow">if</span> (qp.bias != <span class="keyword">nullptr</span>) {</div><div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;            result += qp.bias[multi * qp.bias_multi_stride + col + first_col];</div><div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;        }</div><div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;</div><div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;        col_bias[col] = result;</div><div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;    }</div><div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;}</div><div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;</div><div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;<span class="keyword">template</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__gemm.xhtml#a0f7c3bb1a6bbcb34dc0988ef61510c38">compute_col_sums</a>(<span class="keyword">const</span> Requantize32 &amp;qp, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> width, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> height, <span class="keyword">const</span> int8_t *input, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> in_stride, int32_t *col_bias, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> depth, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> multi, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> first_col);</div><div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;<span class="keyword">template</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__gemm.xhtml#a0f7c3bb1a6bbcb34dc0988ef61510c38">compute_col_sums</a>(<span class="keyword">const</span> Requantize32 &amp;qp, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> width, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> height, <span class="keyword">const</span> uint8_t *input, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> in_stride, int32_t *col_bias, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> depth, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> multi, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> first_col);</div><div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;</div><div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;} <span class="comment">// namespace arm_gemm</span></div><div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;</div><div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;<span class="preprocessor">#endif // __aarch64__</span></div><div class="ttc" id="namespacearm__gemm_xhtml_a283c57cffc3c8e60d00b41f10e4b7476"><div class="ttname"><a href="namespacearm__gemm.xhtml#a283c57cffc3c8e60d00b41f10e4b7476">arm_gemm::compute_row_sums</a></div><div class="ttdeci">void compute_row_sums(const Requantize32 &amp;qp, unsigned int width, unsigned int height, const T *input, unsigned int in_stride, int32_t *row_bias)</div></div>
<div class="ttc" id="namespacecaffe__mnist__image__extractor_xhtml_a74742cb5c8e2ac354a60cb73383d8176"><div class="ttname"><a href="namespacecaffe__mnist__image__extractor.xhtml#a74742cb5c8e2ac354a60cb73383d8176">caffe_mnist_image_extractor.rows</a></div><div class="ttdeci">rows</div><div class="ttdef"><b>Definition:</b> <a href="caffe__mnist__image__extractor_8py_source.xhtml#l00030">caffe_mnist_image_extractor.py:30</a></div></div>
<div class="ttc" id="namespacearm__gemm_xhtml"><div class="ttname"><a href="namespacearm__gemm.xhtml">arm_gemm</a></div><div class="ttdef"><b>Definition:</b> <a href="barrier_8hpp_source.xhtml#l00030">barrier.hpp:30</a></div></div>
<div class="ttc" id="arm__gemm_8hpp_xhtml"><div class="ttname"><a href="arm__gemm_8hpp.xhtml">arm_gemm.hpp</a></div></div>
<div class="ttc" id="utils_8hpp_xhtml"><div class="ttname"><a href="utils_8hpp.xhtml">utils.hpp</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">LSTMLayerQuantized.cpp:486</a></div></div>
<div class="ttc" id="utils_8hpp_xhtml_aa468b37bb9d2901433139d01b79036b0"><div class="ttname"><a href="utils_8hpp.xhtml#aa468b37bb9d2901433139d01b79036b0">UNREACHABLE</a></div><div class="ttdeci">#define UNREACHABLE(why)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00034">utils.hpp:34</a></div></div>
<div class="ttc" id="namespacearm__gemm_xhtml_a5ef9b17d8d1641178b4327a376312282"><div class="ttname"><a href="namespacearm__gemm.xhtml#a5ef9b17d8d1641178b4327a376312282">arm_gemm::requantize_block_32</a></div><div class="ttdeci">void requantize_block_32(const Requantize32 &amp;qp, unsigned int width, unsigned int height, const Tin *input, unsigned int in_stride, Tout *output, unsigned int out_stride, const int32_t *row_bias, const int32_t *col_bias, unsigned int start_col)</div></div>
<div class="ttc" id="namespacearm__gemm_xhtml_a0f7c3bb1a6bbcb34dc0988ef61510c38"><div class="ttname"><a href="namespacearm__gemm.xhtml#a0f7c3bb1a6bbcb34dc0988ef61510c38">arm_gemm::compute_col_sums</a></div><div class="ttdeci">void compute_col_sums(const Requantize32 &amp;qp, unsigned int width, unsigned int height, const T *input, unsigned int in_stride, int32_t *col_bias, unsigned int depth, unsigned int multi, unsigned int first_col)</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_d91e1966cc57df4f49d1e07be7697713.xhtml">NEON</a></li><li class="navelem"><a class="el" href="dir_1ce938f580a6f304b99685e2c1dd19db.xhtml">kernels</a></li><li class="navelem"><a class="el" href="dir_9847dd9cb7a28e46201717fa7336cf62.xhtml">arm_gemm</a></li><li class="navelem"><a class="el" href="quantized_8cpp.xhtml">quantized.cpp</a></li>
    <li class="footer">Generated on Thu Aug 18 2022 12:57:37 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
