<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: examples/dynamic_fusion/cl_ref_conv2d_elementwise_add.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('cl__ref__conv2d__elementwise__add_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">cl_ref_conv2d_elementwise_add.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="cl__ref__conv2d__elementwise__add_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2022 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_CL </span><span class="comment">/* Needed by Utils.cpp to handle OpenCL exceptions properly */</span><span class="preprocessor"></span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#error &quot;This example needs to be built with -DARM_COMPUTE_CL&quot;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_CL */</span><span class="preprocessor"></span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_types_8h.xhtml">arm_compute/core/Types.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_c_l_scheduler_8h.xhtml">arm_compute/runtime/CL/CLScheduler.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2runtime_2_c_l_2_c_l_tensor_8h.xhtml">arm_compute/runtime/CL/CLTensor.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_c_l_tuner_8h.xhtml">arm_compute/runtime/CL/CLTuner.h</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_c_l_direct_convolution_layer_8h.xhtml">arm_compute/runtime/CL/functions/CLDirectConvolutionLayer.h</a>&quot;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2runtime_2_c_l_2functions_2_c_l_elementwise_operations_8h.xhtml">arm_compute/runtime/CL/functions/CLElementwiseOperations.h</a>&quot;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_shape_calculator_8h.xhtml">arm_compute/core/utils/misc/ShapeCalculator.h</a>&quot;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="utils_2_type_printer_8h.xhtml">utils/TypePrinter.h</a>&quot;</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include &quot;utils/Utils.h&quot;</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#include &lt;cstdlib&gt;</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a>;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespaceutils.xhtml">utils</a>;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno"><a class="line" href="cl__ref__conv2d__elementwise__add_8cpp.xhtml#a8a0d0d0d2c7aadb9489acb48070abbe0">   44</a></span>&#160;<span class="preprocessor">#define TICK(clock_name) \</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor">    auto clock_name##_tick = std::chrono::high_resolution_clock::now();</span></div><div class="line"><a name="l00046"></a><span class="lineno"><a class="line" href="cl__ref__conv2d__elementwise__add_8cpp.xhtml#a7a0bd5785180fd883a5d376571cfba97">   46</a></span>&#160;<span class="preprocessor">#define TOCK(clock_name, measurement_map)                                               \</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="preprocessor">    auto clock_name##_tock                 = std::chrono::high_resolution_clock::now(); \</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="preprocessor">    measurement_map[&quot;\&quot;&quot; #clock_name &quot;\&quot;&quot;] = duration_cast&lt;microseconds&gt;(clock_name##_tock - clock_name##_tick);</span></div><div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="cl__ref__conv2d__elementwise__add_8cpp.xhtml#a869e20491a1fb38de29f95a30d0ec2ec">   49</a></span>&#160;<span class="preprocessor">#define TOCK_AVG(clock_name, measurement_map, num_iterations)                           \</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="preprocessor">    auto clock_name##_tock                 = std::chrono::high_resolution_clock::now(); \</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="preprocessor">    measurement_map[&quot;\&quot;&quot; #clock_name &quot;\&quot;&quot;] = duration_cast&lt;microseconds&gt;((clock_name##_tock - clock_name##_tick) / (num_iterations));</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="keyword">using</span> std::chrono::duration_cast;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="keyword">using</span> std::chrono::microseconds;<span class="comment"></span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">/** A reference for comparing against the fusion of a direct convolution with an elementwise addition:</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment"> *  examples/dynamic_fusion/cl_fused_conv2d_elementwise_add.cpp</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="keyword">class </span>ClRefConv2dEltwiseAddExample : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1utils_1_1_example.xhtml">Example</a></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;{</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordtype">bool</span> do_setup(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> **argv)<span class="keyword"> override</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keywordtype">size_t</span>       ih;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keywordtype">size_t</span>       iw;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="keywordtype">size_t</span>       ifm;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keywordtype">size_t</span>       wh;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keywordtype">size_t</span>       ww;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keywordtype">size_t</span>       ofm;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keywordtype">size_t</span>       tuner_choice;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_x;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_y;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <span class="keywordflow">if</span>(argc &lt; 10)</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        {</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            <span class="comment">// Print help</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            std::cout &lt;&lt; <span class="stringliteral">&quot;Usage:  ./cl_ref_conv2d_elementwise_add ih iw ifm wh ww ofm tuner_choice(0=Disable, 1=Rapid, 2=Normal, 3=Exhaustive) pad_x pad_y\n&quot;</span>;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            std::cout &lt;&lt; <span class="stringliteral">&quot;Too few or no input_matrices provided. Using shape config = SRGAN_0, tuner_choice=2\n\n&quot;</span>;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            ih           = 512;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            iw           = 512;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            ifm          = 64;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            wh           = 1;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            ww           = 1;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            ofm          = 3;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            tuner_choice = 2;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            pad_x        = 0;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            pad_y        = 0;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        }</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        {</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            ih           = strtol(argv[1], <span class="keyword">nullptr</span>, 10);</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            iw           = strtol(argv[2], <span class="keyword">nullptr</span>, 10);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            ifm          = strtol(argv[3], <span class="keyword">nullptr</span>, 10);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            wh           = strtol(argv[4], <span class="keyword">nullptr</span>, 10);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            ww           = strtol(argv[5], <span class="keyword">nullptr</span>, 10);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            ofm          = strtol(argv[6], <span class="keyword">nullptr</span>, 10);</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            tuner_choice = strtol(argv[7], <span class="keyword">nullptr</span>, 10);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            pad_x        = strtol(argv[8], <span class="keyword">nullptr</span>, 10);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            pad_y        = strtol(argv[9], <span class="keyword">nullptr</span>, 10);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        }</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml">CLTuner</a> *tuner_to_use;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <span class="keywordflow">switch</span>(tuner_choice)</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        {</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            <span class="keywordflow">case</span> 0:</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                tuner_to_use = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            }</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            <span class="keywordflow">case</span> 1:</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            {</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                tuner.<a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#aae485b24df65d39cb646e48317f49639">set_tuner_mode</a>(<a class="code" href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5caba44d3559b36fc1c14e5752bccce1eef">CLTunerMode::RAPID</a>);</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                tuner_to_use = &amp;tuner;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            }</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            <span class="keywordflow">case</span> 3:</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            {</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                tuner.<a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#aae485b24df65d39cb646e48317f49639">set_tuner_mode</a>(<a class="code" href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5ca39e07a5dab0694c7ebb6a0578511ee15">CLTunerMode::EXHAUSTIVE</a>);</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                tuner_to_use = &amp;tuner;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            }</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            <span class="keywordflow">case</span> 2:</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            <span class="keywordflow">default</span>:</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            {</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                tuner.<a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#aae485b24df65d39cb646e48317f49639">set_tuner_mode</a>(<a class="code" href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5ca1e23852820b9154316c7c06e2b7ba051">CLTunerMode::NORMAL</a>);</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                tuner_to_use = &amp;tuner;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            }</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        }</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a56d8f451f6b30093a49f1b4978681b07">default_init</a>(tuner_to_use);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        <a class="code" href="cl__ref__conv2d__elementwise__add_8cpp.xhtml#a8a0d0d0d2c7aadb9489acb48070abbe0">TICK</a>(startup_time);</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <a class="code" href="cl__ref__conv2d__elementwise__add_8cpp.xhtml#a8a0d0d0d2c7aadb9489acb48070abbe0">TICK</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5357bacf3b395353bef0acf15487b92b">configure</a>);</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <span class="comment">/* Computation:</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment">         * out = add_desc(addend, conv2d1x1(direct_conv)(input, weights, bias))</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment">         */</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>          <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>   = <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>          <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a> = <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>{ 1, 1, pad_x, pad_y };</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>          t_input_shape     = <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>(ifm, iw, ih);</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>          t_weight_shape    = <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>(ifm, ww, wh, ofm);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>          t_bias_shape      = <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>(ofm);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>          t_l1_addend_shape = <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>(ofm, iw);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>          t_dst_shape       = <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ac93cc76b563b366f030b8310a46046c3">misc::shape_calculator::compute_deep_convolution_shape</a>(t_input_shape, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a>, t_weight_shape, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;input_shape: &quot;</span> &lt;&lt; t_input_shape &lt;&lt; std::endl;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;weight_shape: &quot;</span> &lt;&lt; t_weight_shape &lt;&lt; std::endl;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;bias_shape: &quot;</span> &lt;&lt; t_bias_shape &lt;&lt; std::endl;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;addend_shape: &quot;</span> &lt;&lt; t_l1_addend_shape &lt;&lt; std::endl;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;dst_shape: &quot;</span> &lt;&lt; t_dst_shape &lt;&lt; std::endl;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="keyword">auto</span> t_input_info     = <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>(t_input_shape, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a>);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <span class="keyword">auto</span> t_weight_info    = <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>(t_weight_shape, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a>);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <span class="keyword">auto</span> t_bias_info      = <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>(t_bias_shape, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a>);</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3d09b061aa584cda45ff42e3ded1c9d9">t_l0_dst_info</a>    = <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>(t_dst_shape, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a>); <span class="comment">// Intermediate tensor for cond3</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <span class="keyword">auto</span> t_l1_addend_info = <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>(t_l1_addend_shape, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a>);</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5847c3506e79d3ceecc471581a7fda4b">t_dst_info</a>       = <a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>(t_dst_shape, 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">data_layout</a>);</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <span class="comment">// Init tensors</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        {</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            t_input.allocator()-&gt;init(t_input_info);</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            t_weight.allocator()-&gt;init(t_weight_info);</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;            t_bias.allocator()-&gt;init(t_bias_info);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;            t_l1_addend.allocator()-&gt;init(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5847c3506e79d3ceecc471581a7fda4b">t_dst_info</a>);</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            t_l0_dst.allocator()-&gt;init(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3d09b061aa584cda45ff42e3ded1c9d9">t_l0_dst_info</a>);</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            t_dst.allocator()-&gt;init(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5847c3506e79d3ceecc471581a7fda4b">t_dst_info</a>);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        }</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        op0.configure(&amp;t_input, &amp;t_weight, &amp;t_bias, &amp;t_l0_dst, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>);</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        op1.configure(&amp;t_l0_dst, &amp;t_l1_addend, &amp;t_dst, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>{});</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <a class="code" href="cl__ref__conv2d__elementwise__add_8cpp.xhtml#a7a0bd5785180fd883a5d376571cfba97">TOCK</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5357bacf3b395353bef0acf15487b92b">configure</a>, measurements);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        <a class="code" href="cl__ref__conv2d__elementwise__add_8cpp.xhtml#a8a0d0d0d2c7aadb9489acb48070abbe0">TICK</a>(tensor_allocation);</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <span class="comment">// Construct tensors</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <span class="comment">// Allocate and fill tensors</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        {</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            t_input.allocator()-&gt;allocate();</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            t_weight.allocator()-&gt;allocate();</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            t_bias.allocator()-&gt;allocate();</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            t_l1_addend.allocator()-&gt;allocate();</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;            t_l0_dst.allocator()-&gt;allocate();</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            t_dst.allocator()-&gt;allocate();</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            <a class="code" href="namespacearm__compute_1_1utils.xhtml#a98f6963b2f39dfd94bbec58601b60a99">fill_random_tensor</a>(t_input, -1.f, 1.f);</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;            <a class="code" href="namespacearm__compute_1_1utils.xhtml#a98f6963b2f39dfd94bbec58601b60a99">fill_random_tensor</a>(t_weight, -1.f, 1.f);</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;            <a class="code" href="namespacearm__compute_1_1utils.xhtml#a98f6963b2f39dfd94bbec58601b60a99">fill_random_tensor</a>(t_bias, -1.f, 1.f);</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            <a class="code" href="namespacearm__compute_1_1utils.xhtml#a98f6963b2f39dfd94bbec58601b60a99">fill_random_tensor</a>(t_l1_addend, -1.f, 1.f);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        }</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        <a class="code" href="cl__ref__conv2d__elementwise__add_8cpp.xhtml#a7a0bd5785180fd883a5d376571cfba97">TOCK</a>(tensor_allocation, measurements);</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        <span class="comment">// Dummy run for CLTuner</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <a class="code" href="cl__ref__conv2d__elementwise__add_8cpp.xhtml#a8a0d0d0d2c7aadb9489acb48070abbe0">TICK</a>(dummy_run);</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        op0.run();</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ad55f80ed3cd8b6c4f247763b747016af">sync</a>();</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        <a class="code" href="cl__ref__conv2d__elementwise__add_8cpp.xhtml#a7a0bd5785180fd883a5d376571cfba97">TOCK</a>(dummy_run, measurements);</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        <a class="code" href="cl__ref__conv2d__elementwise__add_8cpp.xhtml#a7a0bd5785180fd883a5d376571cfba97">TOCK</a>(startup_time, measurements);</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    }</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="keywordtype">void</span> do_run()<span class="keyword"> override</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        <span class="comment">// Run the ops</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        op0.run();</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        op1.run();</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        <span class="comment">// Make sure all the OpenCL jobs are done executing:</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ad55f80ed3cd8b6c4f247763b747016af">sync</a>();</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    }</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="keywordtype">void</span> do_teardown()<span class="keyword"> override</span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a> : measurements)</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        {</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            std::cout &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a>.first &lt;&lt; <span class="stringliteral">&quot;: &quot;</span> &lt;&lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a>.second.count() &lt;&lt; <span class="stringliteral">&quot;us&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        }</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    }</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a>                 t_input{};</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a>                 t_weight{};</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a>                 t_bias{};</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a>                 t_l1_addend{};</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a>                 t_l0_dst{};</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a>                 t_dst{};</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_direct_convolution_layer.xhtml">CLDirectConvolutionLayer</a> op0{};</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml">CLArithmeticAddition</a>     op1{};</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml">CLTuner</a>                  tuner{};</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    std::map&lt;std::string, std::chrono::microseconds&gt; measurements{};</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;};</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="comment">/** Main program for sgemm test</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment"> * @param[in] argc Number of arguments</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment"> * @param[in] argv Arguments ( [optional] Matrix A, [optional] Matrix B, [optional] Matrix C, [optional] alpha, [optional] beta )</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00231"></a><span class="lineno"><a class="line" href="cl__ref__conv2d__elementwise__add_8cpp.xhtml#a3c04138a5bfe5d72780bb7e82a18e627">  231</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="cl__ref__conv2d__elementwise__add_8cpp.xhtml#a3c04138a5bfe5d72780bb7e82a18e627">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> **argv)</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;{</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="keywordflow">return</span> utils::run_example&lt;ClRefConv2dEltwiseAddExample&gt;(argc, argv);</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;}</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="preprocessor">#undef TICK</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="preprocessor">#undef TOCK</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="preprocessor">#undef TOCK_AVG</span></div><div class="ttc" id="classarm__compute_1_1_c_l_tuner_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuner.xhtml">arm_compute::CLTuner</a></div><div class="ttdoc">Basic implementation of the OpenCL tuner interface. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_8h_source.xhtml#l00040">CLTuner.h:40</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tuner_xhtml_aae485b24df65d39cb646e48317f49639"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuner.xhtml#aae485b24df65d39cb646e48317f49639">arm_compute::CLTuner::set_tuner_mode</a></div><div class="ttdeci">void set_tuner_mode(CLTunerMode mode)</div><div class="ttdoc">Set OpenCL tuner mode. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_8cpp_source.xhtml#l00106">CLTuner.cpp:106</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml">arm_compute::TensorShape</a></div><div class="ttdoc">Shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00039">TensorShape.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_acf5f12bbab64dd614bd8220c97fe484f"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#acf5f12bbab64dd614bd8220c97fe484f">arm_compute::test::validation::data_layout</a></div><div class="ttdeci">const auto data_layout</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00403">ConvolutionLayer.cpp:403</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a9b58d0eb9a2af8e6d7908695e1557d6c"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">arm_compute::CLScheduler::get</a></div><div class="ttdeci">static CLScheduler &amp; get()</div><div class="ttdoc">Access the scheduler singleton. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00107">CLScheduler.cpp:107</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a00525ff582f16038a1d3819aa44a23a3"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">arm_compute::test::validation::conv_info</a></div><div class="ttdeci">const auto conv_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00404">ConvolutionLayer.cpp:404</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a56d8f451f6b30093a49f1b4978681b07"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a56d8f451f6b30093a49f1b4978681b07">arm_compute::CLScheduler::default_init</a></div><div class="ttdeci">void default_init(ICLTuner *cl_tuner=nullptr, CLGEMMHeuristicsHandle *gemm_h=nullptr, CLBackendType cl_backend_type=CLBackendType::Native)</div><div class="ttdoc">Initialises the context and command queue used by the scheduler to default values and sets a default ...</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00126">CLScheduler.cpp:126</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::Format::F32</a></div><div class="ttdoc">1 channel, 1 F32 per channel </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ae76ef5bd3ad69f7380ebb3ac6033ec5ca1e23852820b9154316c7c06e2b7ba051"><div class="ttname"><a href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5ca1e23852820b9154316c7c06e2b7ba051">arm_compute::CLTunerMode::NORMAL</a></div><div class="ttdoc">Searches a subset of LWS configurations while tuning. </div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_arithmetic_addition_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml">arm_compute::CLArithmeticAddition</a></div><div class="ttdoc">Basic function to run opencl::kernels::ClSaturatedArithmeticKernel for addition. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2runtime_2_c_l_2functions_2_c_l_elementwise_operations_8h_source.xhtml#l00041">CLElementwiseOperations.h:41</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2022 Arm Limited. </div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_xhtml_a98f6963b2f39dfd94bbec58601b60a99"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml#a98f6963b2f39dfd94bbec58601b60a99">arm_compute::utils::fill_random_tensor</a></div><div class="ttdeci">void fill_random_tensor(TensorType &amp;tensor, std::random_device::result_type seed, T lower_bound=std::numeric_limits&lt; T &gt;::lowest(), T upper_bound=std::numeric_limits&lt; T &gt;::max())</div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00730">Utils.h:730</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ae76ef5bd3ad69f7380ebb3ac6033ec5caba44d3559b36fc1c14e5752bccce1eef"><div class="ttname"><a href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5caba44d3559b36fc1c14e5752bccce1eef">arm_compute::CLTunerMode::RAPID</a></div><div class="ttdoc">Searches a minimal subset of LWS configurations while tuning. </div></div>
<div class="ttc" id="_c_l_scheduler_8h_xhtml"><div class="ttname"><a href="_c_l_scheduler_8h.xhtml">CLScheduler.h</a></div><div class="ttdoc">Interface to enqueue OpenCL kernels and get/set the OpenCL CommandQueue and ICLTuner. </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a5847c3506e79d3ceecc471581a7fda4b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a5847c3506e79d3ceecc471581a7fda4b">arm_compute::test::validation::t_dst_info</a></div><div class="ttdeci">auto t_dst_info</div><div class="ttdef"><b>Definition:</b> <a href="_integration___operator_fuse_movenet_sub_graph1_8cpp_source.xhtml#l00251">Integration_OperatorFuseMovenetSubGraph1.cpp:251</a></div></div>
<div class="ttc" id="cl__ref__conv2d__elementwise__add_8cpp_xhtml_a8a0d0d0d2c7aadb9489acb48070abbe0"><div class="ttname"><a href="cl__ref__conv2d__elementwise__add_8cpp.xhtml#a8a0d0d0d2c7aadb9489acb48070abbe0">TICK</a></div><div class="ttdeci">#define TICK(clock_name)</div><div class="ttdef"><b>Definition:</b> <a href="cl__ref__conv2d__elementwise__add_8cpp_source.xhtml#l00044">cl_ref_conv2d_elementwise_add.cpp:44</a></div></div>
<div class="ttc" id="cl__ref__conv2d__elementwise__add_8cpp_xhtml_a7a0bd5785180fd883a5d376571cfba97"><div class="ttname"><a href="cl__ref__conv2d__elementwise__add_8cpp.xhtml#a7a0bd5785180fd883a5d376571cfba97">TOCK</a></div><div class="ttdeci">#define TOCK(clock_name, measurement_map)</div><div class="ttdef"><b>Definition:</b> <a href="cl__ref__conv2d__elementwise__add_8cpp_source.xhtml#l00046">cl_ref_conv2d_elementwise_add.cpp:46</a></div></div>
<div class="ttc" id="utils_2_type_printer_8h_xhtml"><div class="ttname"><a href="utils_2_type_printer_8h.xhtml">TypePrinter.h</a></div></div>
<div class="ttc" id="_c_l_direct_convolution_layer_8h_xhtml"><div class="ttname"><a href="_c_l_direct_convolution_layer_8h.xhtml">CLDirectConvolutionLayer.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a3d09b061aa584cda45ff42e3ded1c9d9"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a3d09b061aa584cda45ff42e3ded1c9d9">arm_compute::test::validation::t_l0_dst_info</a></div><div class="ttdeci">auto t_l0_dst_info</div><div class="ttdef"><b>Definition:</b> <a href="_integration___operator_fuse_movenet_sub_graph1_8cpp_source.xhtml#l00250">Integration_OperatorFuseMovenetSubGraph1.cpp:250</a></div></div>
<div class="ttc" id="namespaceutils_xhtml"><div class="ttname"><a href="namespaceutils.xhtml">utils</a></div></div>
<div class="ttc" id="_shape_calculator_8h_xhtml"><div class="ttname"><a href="_shape_calculator_8h.xhtml">ShapeCalculator.h</a></div></div>
<div class="ttc" id="_c_l_tuner_8h_xhtml"><div class="ttname"><a href="_c_l_tuner_8h.xhtml">CLTuner.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_example_xhtml"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_example.xhtml">arm_compute::utils::Example</a></div><div class="ttdoc">Abstract Example class. </div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00074">Utils.h:74</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pad_stride_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml">arm_compute::PadStrideInfo</a></div><div class="ttdoc">Padding and stride information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00669">Types.h:669</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_ad55f80ed3cd8b6c4f247763b747016af"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#ad55f80ed3cd8b6c4f247763b747016af">arm_compute::CLScheduler::sync</a></div><div class="ttdeci">void sync()</div><div class="ttdoc">Blocks until all commands in the associated command queue have finished. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00074">CLScheduler.cpp:74</a></div></div>
<div class="ttc" id="cl__ref__conv2d__elementwise__add_8cpp_xhtml_a3c04138a5bfe5d72780bb7e82a18e627"><div class="ttname"><a href="cl__ref__conv2d__elementwise__add_8cpp.xhtml#a3c04138a5bfe5d72780bb7e82a18e627">main</a></div><div class="ttdeci">int main(int argc, char **argv)</div><div class="ttdoc">Main program for sgemm test. </div><div class="ttdef"><b>Definition:</b> <a href="cl__ref__conv2d__elementwise__add_8cpp_source.xhtml#l00231">cl_ref_conv2d_elementwise_add.cpp:231</a></div></div>
<div class="ttc" id="arm__compute_2runtime_2_c_l_2functions_2_c_l_elementwise_operations_8h_xhtml"><div class="ttname"><a href="arm__compute_2runtime_2_c_l_2functions_2_c_l_elementwise_operations_8h.xhtml">CLElementwiseOperations.h</a></div></div>
<div class="ttc" id="arm__compute_2runtime_2_c_l_2_c_l_tensor_8h_xhtml"><div class="ttname"><a href="arm__compute_2runtime_2_c_l_2_c_l_tensor_8h.xhtml">CLTensor.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">arm_compute::DataLayout::NHWC</a></div><div class="ttdoc">Num samples, height, width, channels. </div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml">arm_compute::TensorInfo</a></div><div class="ttdoc">Store the tensor&amp;#39;s metadata. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00043">TensorInfo.h:43</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a5f5b6c4337eac9e2e0046ca2304d80dc"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">arm_compute::test::validation::data_type</a></div><div class="ttdeci">data_type</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_cast_8cpp_source.xhtml#l00203">Cast.cpp:203</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_direct_convolution_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_direct_convolution_layer.xhtml">arm_compute::CLDirectConvolutionLayer</a></div><div class="ttdoc">Basic function to execute direct convolution function: </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_direct_convolution_layer_8h_source.xhtml#l00041">CLDirectConvolutionLayer.h:41</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a5357bacf3b395353bef0acf15487b92b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a5357bacf3b395353bef0acf15487b92b">arm_compute::test::validation::configure</a></div><div class="ttdeci">im2col_func configure(src_target.info(), dst_target.info(), spatial_kernel, conv_info, has_bias)</div></div>
<div class="ttc" id="arm__compute_2core_2_types_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ae76ef5bd3ad69f7380ebb3ac6033ec5ca39e07a5dab0694c7ebb6a0578511ee15"><div class="ttname"><a href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5ca39e07a5dab0694c7ebb6a0578511ee15">arm_compute::CLTunerMode::EXHAUSTIVE</a></div><div class="ttdoc">Searches all possible LWS configurations while tuning. </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a545be126d77ec11a9824249de111def9"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">arm_compute::test::validation::m</a></div><div class="ttdeci">const unsigned int m</div><div class="ttdef"><b>Definition:</b> <a href="_g_e_m_m_matrix_multiply_native_8cpp_source.xhtml#l00359">GEMMMatrixMultiplyNative.cpp:359</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a82b8ac759c804bc1fb4e2d21e178fb6f"><div class="ttname"><a href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">arm_compute::ConvertPolicy</a></div><div class="ttdeci">ConvertPolicy</div><div class="ttdoc">Policy to handle integer overflow. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00404">Types.h:404</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1misc_1_1shape__calculator_xhtml_ac93cc76b563b366f030b8310a46046c3"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ac93cc76b563b366f030b8310a46046c3">arm_compute::misc::shape_calculator::compute_deep_convolution_shape</a></div><div class="ttdeci">TensorShape compute_deep_convolution_shape(const TensorShape &amp;input_shape, DataLayout input_data_layout, const TensorShape &amp;weights_shape, const PadStrideInfo &amp;conv_info)</div><div class="ttdoc">Calculate the deep convolution shape output shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l00713">ShapeCalculator.h:713</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor.xhtml">arm_compute::CLTensor</a></div><div class="ttdoc">Basic implementation of the OpenCL tensor interface. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2runtime_2_c_l_2_c_l_tensor_8h_source.xhtml#l00041">CLTensor.h:41</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_d28a4824dc47e487b107a5db32ef43c4.xhtml">examples</a></li><li class="navelem"><a class="el" href="dir_70e6c0049fba471da54b4e8a54d0f397.xhtml">dynamic_fusion</a></li><li class="navelem"><a class="el" href="cl__ref__conv2d__elementwise__add_8cpp.xhtml">cl_ref_conv2d_elementwise_add.cpp</a></li>
    <li class="footer">Generated on Thu Aug 18 2022 12:57:34 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
