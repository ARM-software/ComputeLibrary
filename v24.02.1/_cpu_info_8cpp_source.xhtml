<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/common/cpuinfo/CpuInfo.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.02.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_cpu_info_8cpp_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">CpuInfo.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_cpu_info_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2021-2024 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_cpu_info_8h.xhtml">src/common/cpuinfo/CpuInfo.h</a>&quot;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160; </div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_error_8h.xhtml">arm_compute/core/Error.h</a>&quot;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_log_8h.xhtml">arm_compute/core/Log.h</a>&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160; </div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_string_support_8h.xhtml">support/StringSupport.h</a>&quot;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_toolchain_support_8h.xhtml">support/ToolchainSupport.h</a>&quot;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160; </div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;sstream&gt;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160; </div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#if !defined(BARE_METAL)</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &lt;cstring&gt;</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include &lt;fstream&gt;</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#if !defined(_WIN64)</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#include &lt;regex.h&gt;</span> <span class="comment">/* C++ std::regex takes up a lot of space in the standalone builds */</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#include &lt;sched.h&gt;</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* !defined(_WIN64) */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160; </div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor">#include &lt;thread&gt;</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="preprocessor">#include &lt;unordered_map&gt;</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* !defined(BARE_METAL) */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160; </div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="preprocessor">#if !defined(_WIN64)</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="preprocessor">#if !defined(BARE_METAL) &amp;&amp; !defined(__APPLE__) &amp;&amp; !defined(__OpenBSD__) &amp;&amp; (defined(__arm__) || defined(__aarch64__))</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="preprocessor">#include &lt;asm/hwcap.h&gt;</span> <span class="comment">/* Get HWCAP bits from asm/hwcap.h */</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="preprocessor">#include &lt;sys/auxv.h&gt;</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="preprocessor">#elif defined(__APPLE__) &amp;&amp; defined(__aarch64__)</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="preprocessor">#include &lt;sys/sysctl.h&gt;</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="preprocessor">#include &lt;sys/types.h&gt;</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* defined(__APPLE__) &amp;&amp; defined(__aarch64__)) */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* !defined(BARE_METAL) &amp;&amp; !defined(__APPLE__) &amp;&amp; !defined(__OpenBSD__) &amp;&amp; (defined(__arm__) || defined(__aarch64__)) */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160; </div>
<div class="line"><a name="l00057"></a><span class="lineno"><a class="line" href="_cpu_info_8cpp.xhtml#a6f1ae534cac43c2430d66e81bfe4d0f7">   57</a></span>&#160;<span class="preprocessor">#define ARM_COMPUTE_CPU_FEATURE_HWCAP_CPUID    (1 &lt;&lt; 11)</span></div>
<div class="line"><a name="l00058"></a><span class="lineno"><a class="line" href="_cpu_info_8cpp.xhtml#a5596c84a7096be3975643069954aec7d">   58</a></span>&#160;<span class="preprocessor">#define ARM_COMPUTE_GET_FEATURE_REG(var, freg) __asm __volatile(&quot;MRS %0, &quot; #freg : &quot;=r&quot;(var))</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;{</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="keyword">namespace </span>cpuinfo</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;{</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="keyword">namespace</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;{</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="preprocessor">#if !defined(_WIN64) &amp;&amp; !defined(BARE_METAL) &amp;&amp; !defined(__APPLE__) &amp;&amp; !defined(__OpenBSD__) &amp;&amp; \</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="preprocessor">    (defined(__arm__) || defined(__aarch64__))</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">/** Extract MIDR using CPUID information that are exposed to user-space</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment"> * @param[in] max_num_cpus Maximum number of possible CPUs</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment"> * @return std::vector&lt;uint32_t&gt; A list of the MIDR of each core</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;std::vector&lt;uint32_t&gt; midr_from_cpuid(uint32_t max_num_cpus)</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;{</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    std::vector&lt;uint32_t&gt; cpus;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; max_num_cpus; ++i)</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    {</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a> &lt;&lt; <span class="stringliteral">&quot;/sys/devices/system/cpu/cpu&quot;</span> &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot;/regs/identification/midr_el1&quot;</span>;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        std::ifstream file(<a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>.str(), std::ios::in);</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <span class="keywordflow">if</span> (file.is_open())</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        {</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            std::string line;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            <span class="keywordflow">if</span> (<span class="keywordtype">bool</span>(getline(file, line)))</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            {</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                cpus.emplace_back(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ae7b85c41ac94d98f07b1cef18b33d2d1">support::cpp11::stoul</a>(line, <span class="keyword">nullptr</span>, <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aebc1ea57c14482b68dac0c0dab766126a027219c7702304969c898aeffed504af">support::cpp11::NumericBase::BASE_16</a>));</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            }</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        }</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    }</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keywordflow">return</span> cpus;</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;}</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment">/** Extract MIDR by parsing the /proc/cpuinfo meta-data</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment"> * @param[in] max_num_cpus Maximum number of possible CPUs</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment"> * @return std::vector&lt;uint32_t&gt; A list of the MIDR of each core</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;std::vector&lt;uint32_t&gt; midr_from_proc_cpuinfo(<span class="keywordtype">int</span> max_num_cpus)</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;{</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    std::vector&lt;uint32_t&gt; cpus;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160; </div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    regex_t proc_regex;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    regex_t imp_regex;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    regex_t var_regex;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    regex_t part_regex;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    regex_t rev_regex;</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160; </div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    memset(&amp;proc_regex, 0, <span class="keyword">sizeof</span>(regex_t));</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    memset(&amp;imp_regex, 0, <span class="keyword">sizeof</span>(regex_t));</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    memset(&amp;var_regex, 0, <span class="keyword">sizeof</span>(regex_t));</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    memset(&amp;part_regex, 0, <span class="keyword">sizeof</span>(regex_t));</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    memset(&amp;rev_regex, 0, <span class="keyword">sizeof</span>(regex_t));</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160; </div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keywordtype">int</span> ret_status = 0;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="comment">// If &quot;long-form&quot; cpuinfo is present, parse that to populate models.</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    ret_status |= regcomp(&amp;proc_regex, R<span class="stringliteral">&quot;(^processor.*([[:digit:]]+)$)&quot;, REG_EXTENDED);</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="stringliteral">    ret_status |= regcomp(&amp;imp_regex, R</span><span class="stringliteral">&quot;(^CPU implementer.*0x(..)$)&quot;, REG_EXTENDED);</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="stringliteral">    ret_status |= regcomp(&amp;var_regex, R</span><span class="stringliteral">&quot;(^CPU variant.*0x(.)$)&quot;, REG_EXTENDED);</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="stringliteral">    ret_status |= regcomp(&amp;part_regex, R</span><span class="stringliteral">&quot;(^CPU part.*0x(...)$)&quot;, REG_EXTENDED);</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="stringliteral">    ret_status |= regcomp(&amp;rev_regex, R</span><span class="stringliteral">&quot;(^CPU revision.*([[:digit:]]+)$)&quot;, REG_EXTENDED);</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="stringliteral">    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(ret_status);</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="stringliteral">    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(ret_status != 0, </span><span class="stringliteral">&quot;Regex compilation failed.&quot;</span>);</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160; </div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    std::ifstream file(<span class="stringliteral">&quot;/proc/cpuinfo&quot;</span>, std::ios::in);</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keywordflow">if</span> (file.is_open())</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    {</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        std::string line;</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        <span class="keywordtype">int</span>         midr   = 0;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        <span class="keywordtype">int</span>         curcpu = -1;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160; </div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <span class="keywordflow">while</span> (<span class="keywordtype">bool</span>(getline(file, line)))</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        {</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            std::array&lt;regmatch_t, 2&gt; match;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            ret_status = regexec(&amp;proc_regex, line.c_str(), 2, match.data(), 0);</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            <span class="keywordflow">if</span> (ret_status == 0)</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            {</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                std::string <span class="keywordtype">id</span>     = line.substr(match[1].rm_so, (match[1].rm_eo - match[1].rm_so));</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                <span class="keywordtype">int</span>         newcpu = <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#abdba606a789b8d664774f17d18f45cfe">support::cpp11::stoi</a>(<span class="keywordtype">id</span>, <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160; </div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                <span class="keywordflow">if</span> (curcpu &gt;= 0 &amp;&amp; midr == 0)</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                {</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                    <span class="comment">// Matched a new CPU ID without any description of the previous one - looks like old format.</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                    <span class="keywordflow">return</span> {};</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                }</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160; </div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                <span class="keywordflow">if</span> (curcpu &gt;= 0 &amp;&amp; curcpu &lt; max_num_cpus)</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                {</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                    cpus.emplace_back(midr);</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                }</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                {</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                    <a class="code" href="arm__compute_2core_2_log_8h.xhtml#a14f4c3a00d20ad742642767c9449993e">ARM_COMPUTE_LOG_INFO_MSG_CORE</a>(</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                        <span class="stringliteral">&quot;Trying to populate a core id with id greater than the expected number of cores!&quot;</span>);</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                }</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160; </div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                midr   = 0;</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                curcpu = newcpu;</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160; </div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;            }</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160; </div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            ret_status = regexec(&amp;imp_regex, line.c_str(), 2, match.data(), 0);</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            <span class="keywordflow">if</span> (ret_status == 0)</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            {</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                std::string subexp = line.substr(match[1].rm_so, (match[1].rm_eo - match[1].rm_so));</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                <span class="keywordtype">int</span>         impv   = <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#abdba606a789b8d664774f17d18f45cfe">support::cpp11::stoi</a>(subexp, <span class="keyword">nullptr</span>, <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aebc1ea57c14482b68dac0c0dab766126a027219c7702304969c898aeffed504af">support::cpp11::NumericBase::BASE_16</a>);</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                midr |= (impv &lt;&lt; 24);</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160; </div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            }</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160; </div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            ret_status = regexec(&amp;var_regex, line.c_str(), 2, match.data(), 0);</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            <span class="keywordflow">if</span> (ret_status == 0)</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            {</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                std::string subexp = line.substr(match[1].rm_so, (match[1].rm_eo - match[1].rm_so));</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                <span class="keywordtype">int</span>         varv   = <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#abdba606a789b8d664774f17d18f45cfe">support::cpp11::stoi</a>(subexp, <span class="keyword">nullptr</span>, <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aebc1ea57c14482b68dac0c0dab766126a027219c7702304969c898aeffed504af">support::cpp11::NumericBase::BASE_16</a>);</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                midr |= (varv &lt;&lt; 20);</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160; </div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            }</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160; </div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;            ret_status = regexec(&amp;part_regex, line.c_str(), 2, match.data(), 0);</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            <span class="keywordflow">if</span> (ret_status == 0)</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;            {</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                std::string subexp = line.substr(match[1].rm_so, (match[1].rm_eo - match[1].rm_so));</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                <span class="keywordtype">int</span>         partv  = <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#abdba606a789b8d664774f17d18f45cfe">support::cpp11::stoi</a>(subexp, <span class="keyword">nullptr</span>, <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aebc1ea57c14482b68dac0c0dab766126a027219c7702304969c898aeffed504af">support::cpp11::NumericBase::BASE_16</a>);</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                midr |= (partv &lt;&lt; 4);</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160; </div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            }</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160; </div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            ret_status = regexec(&amp;rev_regex, line.c_str(), 2, match.data(), 0);</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            <span class="keywordflow">if</span> (ret_status == 0)</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            {</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                std::string subexp = line.substr(match[1].rm_so, (match[1].rm_eo - match[1].rm_so));</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                <span class="keywordtype">int</span>         regv   = <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#abdba606a789b8d664774f17d18f45cfe">support::cpp11::stoi</a>(subexp, <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                midr |= (regv);</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                midr |= (0xf &lt;&lt; 16);</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160; </div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            }</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        }</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160; </div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        <span class="keywordflow">if</span> (curcpu &gt;= 0 &amp;&amp; curcpu &lt; max_num_cpus)</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        {</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;            cpus.emplace_back(midr);</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        }</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        {</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            <a class="code" href="arm__compute_2core_2_log_8h.xhtml#a14f4c3a00d20ad742642767c9449993e">ARM_COMPUTE_LOG_INFO_MSG_CORE</a>(</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                <span class="stringliteral">&quot;Trying to populate a core id with id greater than the expected number of cores!&quot;</span>);</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        }</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    }</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160; </div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="comment">// Free allocated memory</span></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    regfree(&amp;proc_regex);</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    regfree(&amp;imp_regex);</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    regfree(&amp;var_regex);</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    regfree(&amp;part_regex);</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    regfree(&amp;rev_regex);</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160; </div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="keywordflow">return</span> cpus;</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;}</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="comment">/** Get the maximim number of CPUs in the system by parsing /sys/devices/system/cpu/present</span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment"> * @return int Maximum number of CPUs</span></div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="keywordtype">int</span> get_max_cpus()</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;{</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keywordtype">int</span>           max_cpus = 1;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    std::ifstream CPUspresent;</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    CPUspresent.open(<span class="stringliteral">&quot;/sys/devices/system/cpu/present&quot;</span>, std::ios::in);</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="keywordtype">bool</span> success = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160; </div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="keywordflow">if</span> (CPUspresent.is_open())</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    {</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        std::string line;</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160; </div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        <span class="keywordflow">if</span> (<span class="keywordtype">bool</span>(getline(CPUspresent, line)))</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        {</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;            <span class="comment">/* The content of this file is a list of ranges or single values, e.g.</span></div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="comment">                 * 0-5, or 1-3,5,7 or similar.  As we are interested in the</span></div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="comment">                 * max valid ID, we just need to find the last valid</span></div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="comment">                 * delimiter (&#39;-&#39; or &#39;,&#39;) and parse the integer immediately after that.</span></div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="comment">                 */</span></div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;            <span class="keyword">auto</span> startfrom = line.begin();</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160; </div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;            <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = line.begin(); i &lt; line.end(); ++i)</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;            {</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                <span class="keywordflow">if</span> (*i == <span class="charliteral">&#39;-&#39;</span> || *i == <span class="charliteral">&#39;,&#39;</span>)</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                {</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                    startfrom = i + 1;</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                }</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;            }</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160; </div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;            line.erase(line.begin(), startfrom);</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160; </div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;            max_cpus = <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#abdba606a789b8d664774f17d18f45cfe">support::cpp11::stoi</a>(line, <span class="keyword">nullptr</span>) + 1;</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;            success  = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        }</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    }</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160; </div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <span class="comment">// Return std::thread::hardware_concurrency() as a fallback.</span></div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    <span class="keywordflow">if</span> (!success)</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    {</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        max_cpus = std::thread::hardware_concurrency();</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    }</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <span class="keywordflow">return</span> max_cpus;</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;}</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="preprocessor">#elif defined(__aarch64__) &amp;&amp; \</span></div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="preprocessor">    defined(__APPLE__) </span><span class="comment">/* !defined(BARE_METAL) &amp;&amp; !defined(__APPLE__) &amp;&amp; (defined(__arm__) || defined(__aarch64__)) */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="comment">/** Query features through sysctlbyname</span></div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="comment">  *</span></div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="comment">  * @return int value queried</span></div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="comment">  */</span></div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="keywordtype">int</span> get_hw_capability(<span class="keyword">const</span> std::string &amp;cap)</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;{</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    int64_t result(0);</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <span class="keywordtype">size_t</span>  size = <span class="keyword">sizeof</span>(result);</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    sysctlbyname(cap.c_str(), &amp;result, &amp;size, NULL, 0);</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <span class="keywordflow">return</span> result;</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;}</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* !defined(BARE_METAL) &amp;&amp; !defined(__APPLE__) &amp;&amp; !defined(__OpenBSD__) &amp;&amp; (defined(__arm__) || defined(__aarch64__)) */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160; </div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="preprocessor">#if defined(BARE_METAL) &amp;&amp; defined(__aarch64__)</span></div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;uint64_t get_sve_feature_reg()</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;{</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    uint64_t svefr0 = 0;</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    __asm __volatile(<span class="stringliteral">&quot;.inst 0xd5380483 // mrs x3, ID_AA64ZFR0_EL1\n&quot;</span></div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                     <span class="stringliteral">&quot;MOV  %0, X3&quot;</span></div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                     : <span class="stringliteral">&quot;=r&quot;</span>(svefr0)</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                     :</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                     : <span class="stringliteral">&quot;x3&quot;</span>);</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="keywordflow">return</span> svefr0;</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;}</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* defined(BARE_METAL) &amp;&amp; defined(__aarch64__) */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;} <span class="comment">// namespace</span></div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160; </div>
<div class="line"><a name="l00301"></a><span class="lineno"><a class="line" href="classarm__compute_1_1cpuinfo_1_1_cpu_info.xhtml#ae82cbece298ec4aff3d35182ffa61c75">  301</a></span>&#160;<a class="code" href="classarm__compute_1_1cpuinfo_1_1_cpu_info.xhtml#ab7d98af1963169ce0ba5e98635271e24">CpuInfo::CpuInfo</a>(<a class="code" href="structarm__compute_1_1cpuinfo_1_1_cpu_isa_info.xhtml">CpuIsaInfo</a> <a class="code" href="_n_e_fuse_batch_normalization_kernel_8cpp.xhtml#a1659171e98a705cddffe279eda7c17b8">isa</a>, std::vector&lt;CpuModel&gt; cpus) : _isa(std::move(<a class="code" href="_n_e_fuse_batch_normalization_kernel_8cpp.xhtml#a1659171e98a705cddffe279eda7c17b8">isa</a>)), _cpus(std::move(cpus))</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;{</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;}</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160; </div>
<div class="line"><a name="l00305"></a><span class="lineno"><a class="line" href="classarm__compute_1_1cpuinfo_1_1_cpu_info.xhtml#a686af658dafc836c66bc29bc8fe6932b">  305</a></span>&#160;<a class="code" href="classarm__compute_1_1cpuinfo_1_1_cpu_info.xhtml">CpuInfo</a> <a class="code" href="classarm__compute_1_1cpuinfo_1_1_cpu_info.xhtml#a686af658dafc836c66bc29bc8fe6932b">CpuInfo::build</a>()</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;{</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="preprocessor">#if !defined(_WIN64) &amp;&amp; !defined(BARE_METAL) &amp;&amp; !defined(__APPLE__) &amp;&amp; !defined(__OpenBSD__) &amp;&amp; \</span></div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="preprocessor">    (defined(__arm__) || defined(__aarch64__))</span></div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    <span class="keyword">const</span> uint32_t hwcaps   = getauxval(AT_HWCAP);</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    <span class="keyword">const</span> uint32_t hwcaps2  = getauxval(AT_HWCAP2);</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    <span class="keyword">const</span> uint32_t max_cpus = get_max_cpus();</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160; </div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    <span class="comment">// Populate midr values</span></div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    std::vector&lt;uint32_t&gt; cpus_midr;</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    <span class="keywordflow">if</span> (hwcaps &amp; <a class="code" href="_cpu_info_8cpp.xhtml#a6f1ae534cac43c2430d66e81bfe4d0f7">ARM_COMPUTE_CPU_FEATURE_HWCAP_CPUID</a>)</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    {</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        cpus_midr = midr_from_cpuid(max_cpus);</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    }</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <span class="keywordflow">if</span> (cpus_midr.empty())</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    {</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        cpus_midr = midr_from_proc_cpuinfo(max_cpus);</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    }</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <span class="keywordflow">if</span> (cpus_midr.empty())</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    {</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        cpus_midr.resize(max_cpus, 0);</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    }</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160; </div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    <span class="comment">// Populate isa (Assume homogeneous ISA specification)</span></div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    <a class="code" href="structarm__compute_1_1cpuinfo_1_1_cpu_isa_info.xhtml">CpuIsaInfo</a> <a class="code" href="classarm__compute_1_1cpuinfo_1_1_cpu_info.xhtml#a38f04d1608271656814fbb66e4688a0b">isa</a> = <a class="code" href="namespacearm__compute_1_1cpuinfo.xhtml#a9abbd59830c6b78524e28478b2f78208">init_cpu_isa_from_hwcaps</a>(hwcaps, hwcaps2, cpus_midr.back());</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160; </div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    <span class="comment">// Convert midr to models</span></div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    std::vector&lt;CpuModel&gt; cpus_model;</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    std::transform(std::begin(cpus_midr), <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">std::end</a>(cpus_midr), std::back_inserter(cpus_model),</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                   [](uint32_t midr) -&gt; <a class="code" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4">CpuModel</a> { <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1cpuinfo.xhtml#ac48afee48f0c8e4b0e0be117385694d7">midr_to_model</a>(midr); });</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160; </div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    <a class="code" href="classarm__compute_1_1cpuinfo_1_1_cpu_info.xhtml">CpuInfo</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>(<a class="code" href="classarm__compute_1_1cpuinfo_1_1_cpu_info.xhtml#a38f04d1608271656814fbb66e4688a0b">isa</a>, cpus_model);</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>;</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160; </div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;<span class="preprocessor">#elif (BARE_METAL) &amp;&amp; \</span></div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;<span class="preprocessor">    defined(          \</span></div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;<span class="preprocessor">        __aarch64__) </span><span class="comment">/* !defined(BARE_METAL) &amp;&amp; !defined(__APPLE__) &amp;&amp; !defined(__OpenBSD__) &amp;&amp; (defined(__arm__) || defined(__aarch64__)) */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160; </div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    <span class="comment">// Assume single CPU in bare metal mode.  Just read the ID register and feature bits directly.</span></div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    uint64_t isar0 = 0, isar1 = 0, pfr0 = 0, pfr1 = 0, svefr0 = 0, midr = 0;</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    <a class="code" href="_cpu_info_8cpp.xhtml#a5596c84a7096be3975643069954aec7d">ARM_COMPUTE_GET_FEATURE_REG</a>(isar0, ID_AA64ISAR0_EL1);</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <a class="code" href="_cpu_info_8cpp.xhtml#a5596c84a7096be3975643069954aec7d">ARM_COMPUTE_GET_FEATURE_REG</a>(isar1, ID_AA64ISAR1_EL1);</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <a class="code" href="_cpu_info_8cpp.xhtml#a5596c84a7096be3975643069954aec7d">ARM_COMPUTE_GET_FEATURE_REG</a>(pfr0, ID_AA64PFR0_EL1);</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    <a class="code" href="_cpu_info_8cpp.xhtml#a5596c84a7096be3975643069954aec7d">ARM_COMPUTE_GET_FEATURE_REG</a>(pfr1, ID_AA64PFR1_EL1);</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    <a class="code" href="_cpu_info_8cpp.xhtml#a5596c84a7096be3975643069954aec7d">ARM_COMPUTE_GET_FEATURE_REG</a>(midr, MIDR_EL1);</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    <span class="keywordflow">if</span> ((pfr0 &gt;&gt; 32) &amp; 0xf)</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    {</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;        svefr0 = get_sve_feature_reg();</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    }</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160; </div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    <a class="code" href="structarm__compute_1_1cpuinfo_1_1_cpu_isa_info.xhtml">CpuIsaInfo</a>            <a class="code" href="classarm__compute_1_1cpuinfo_1_1_cpu_info.xhtml#a38f04d1608271656814fbb66e4688a0b">isa</a> = <a class="code" href="namespacearm__compute_1_1cpuinfo.xhtml#ad40a2cde10e8b5f3e44af23f1e878f1c">init_cpu_isa_from_regs</a>(isar0, isar1, pfr0, pfr1, svefr0, midr);</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    std::vector&lt;CpuModel&gt; cpus_model(1, <a class="code" href="namespacearm__compute_1_1cpuinfo.xhtml#ac48afee48f0c8e4b0e0be117385694d7">midr_to_model</a>(midr));</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    <a class="code" href="classarm__compute_1_1cpuinfo_1_1_cpu_info.xhtml">CpuInfo</a>               <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>(<a class="code" href="classarm__compute_1_1cpuinfo_1_1_cpu_info.xhtml#a38f04d1608271656814fbb66e4688a0b">isa</a>, cpus_model);</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>;</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;<span class="preprocessor">#elif defined(__aarch64__) &amp;&amp; defined(__APPLE__) </span><span class="comment">/* #elif(BARE_METAL) &amp;&amp; defined(__aarch64__) */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    <span class="keywordtype">int</span>                   ncpus = get_hw_capability(<span class="stringliteral">&quot;hw.perflevel0.logicalcpu&quot;</span>);</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    <a class="code" href="structarm__compute_1_1cpuinfo_1_1_cpu_isa_info.xhtml">CpuIsaInfo</a>            isainfo;</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    std::vector&lt;CpuModel&gt; cpus_model(ncpus);</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    isainfo.<a class="code" href="structarm__compute_1_1cpuinfo_1_1_cpu_isa_info.xhtml#af778cbee81845454fec3eaec33d7ac57">neon</a> = get_hw_capability(<span class="stringliteral">&quot;hw.optional.neon&quot;</span>);</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    isainfo.<a class="code" href="structarm__compute_1_1cpuinfo_1_1_cpu_isa_info.xhtml#a2af87cdc1d4cc99aeee94cbefeae7811">fp16</a> = get_hw_capability(<span class="stringliteral">&quot;hw.optional.neon_fp16&quot;</span>);</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    isainfo.<a class="code" href="structarm__compute_1_1cpuinfo_1_1_cpu_isa_info.xhtml#aa9a6bf94935dd333e9337fdccc119616">dot</a>  = get_hw_capability(<span class="stringliteral">&quot;hw.optional.arm.FEAT_DotProd&quot;</span>);</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    <a class="code" href="classarm__compute_1_1cpuinfo_1_1_cpu_info.xhtml">CpuInfo</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>(isainfo, cpus_model);</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>;</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;<span class="preprocessor">#elif defined(__aarch64__) &amp;&amp; defined(_WIN64)    </span><span class="comment">/* #elif defined(__aarch64__) &amp;&amp; defined(__APPLE__) */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    <a class="code" href="structarm__compute_1_1cpuinfo_1_1_cpu_isa_info.xhtml">CpuIsaInfo</a> isainfo;</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    isainfo.<a class="code" href="structarm__compute_1_1cpuinfo_1_1_cpu_isa_info.xhtml#af778cbee81845454fec3eaec33d7ac57">neon</a> = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    <a class="code" href="classarm__compute_1_1cpuinfo_1_1_cpu_info.xhtml">CpuInfo</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>(isainfo, {CpuModel::GENERIC});</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>;</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;<span class="preprocessor">#else                                            </span><span class="comment">/* #elif defined(__aarch64__) &amp;&amp; defined(_WIN64) */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    <a class="code" href="classarm__compute_1_1cpuinfo_1_1_cpu_info.xhtml">CpuInfo</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>(<a class="code" href="structarm__compute_1_1cpuinfo_1_1_cpu_isa_info.xhtml">CpuIsaInfo</a>(), {CpuModel::GENERIC});</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>;</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* !defined(BARE_METAL) &amp;&amp; !defined(__APPLE__) &amp;&amp; !defined(__OpenBSD__) &amp;&amp; (defined(__arm__) || defined(__aarch64__)) */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;}</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160; </div>
<div class="line"><a name="l00379"></a><span class="lineno"><a class="line" href="classarm__compute_1_1cpuinfo_1_1_cpu_info.xhtml#a8ff1f812b21b85daca91749ab3760386">  379</a></span>&#160;<a class="code" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4">CpuModel</a> <a class="code" href="classarm__compute_1_1cpuinfo_1_1_cpu_info.xhtml#ada9426e8aa29745aadf93352e1eb00b5">CpuInfo::cpu_model</a>(uint32_t cpuid)<span class="keyword"> const</span></div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    <span class="keywordflow">if</span> (cpuid &lt; _cpus.size())</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    {</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;        <span class="keywordflow">return</span> _cpus[cpuid];</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    }</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    <span class="keywordflow">return</span> CpuModel::GENERIC;</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;}</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160; </div>
<div class="line"><a name="l00388"></a><span class="lineno"><a class="line" href="classarm__compute_1_1cpuinfo_1_1_cpu_info.xhtml#ada9426e8aa29745aadf93352e1eb00b5">  388</a></span>&#160;<a class="code" href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4">CpuModel</a> <a class="code" href="classarm__compute_1_1cpuinfo_1_1_cpu_info.xhtml#ada9426e8aa29745aadf93352e1eb00b5">CpuInfo::cpu_model</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;<span class="preprocessor">#if defined(_WIN64) || defined(BARE_METAL) || defined(__APPLE__) || defined(__OpenBSD__) || \</span></div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;<span class="preprocessor">    (!defined(__arm__) &amp;&amp; !defined(__aarch64__))</span></div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1cpuinfo_1_1_cpu_info.xhtml#ada9426e8aa29745aadf93352e1eb00b5">cpu_model</a>(0);</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;<span class="preprocessor">#else </span><span class="comment">/* defined(BARE_METAL) || defined(__APPLE__) || defined(__OpenBSD__) || (!defined(__arm__) &amp;&amp; !defined(__aarch64__)) */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1cpuinfo_1_1_cpu_info.xhtml#ada9426e8aa29745aadf93352e1eb00b5">cpu_model</a>(sched_getcpu());</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* defined(BARE_METAL) || defined(__APPLE__) || defined(__OpenBSD__) || (!defined(__arm__) &amp;&amp; !defined(__aarch64__)) */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;}</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160; </div>
<div class="line"><a name="l00398"></a><span class="lineno"><a class="line" href="classarm__compute_1_1cpuinfo_1_1_cpu_info.xhtml#adbfb368a91028856295df4cdaef94cdd">  398</a></span>&#160;uint32_t <a class="code" href="classarm__compute_1_1cpuinfo_1_1_cpu_info.xhtml#adbfb368a91028856295df4cdaef94cdd">CpuInfo::num_cpus</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    <span class="keywordflow">return</span> _cpus.size();</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;}</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160; </div>
<div class="line"><a name="l00403"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpuinfo.xhtml#a8d1f363d679403ae1ad371b85e63c7a3">  403</a></span>&#160;uint32_t <a class="code" href="namespacearm__compute_1_1cpuinfo.xhtml#a8d1f363d679403ae1ad371b85e63c7a3">num_threads_hint</a>()</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;{</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1cpuinfo.xhtml#a8d1f363d679403ae1ad371b85e63c7a3">num_threads_hint</a> = 1;</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160; </div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;<span class="preprocessor">#if !defined(BARE_METAL) &amp;&amp; !defined(_WIN64) &amp;&amp; !defined(ARM_COMPUTE_DISABLE_THREADS_HINT)</span></div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    std::vector&lt;std::string&gt; cpus;</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    cpus.reserve(64);</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160; </div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    <span class="comment">// CPU part regex</span></div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    regex_t cpu_part_rgx;</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    memset(&amp;cpu_part_rgx, 0, <span class="keyword">sizeof</span>(regex_t));</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    <span class="keywordtype">int</span> ret_status = regcomp(&amp;cpu_part_rgx, R<span class="stringliteral">&quot;(.*CPU part.+/?\:[[:space:]]+([[:alnum:]]+).*)&quot;, REG_EXTENDED);</span></div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;<span class="stringliteral">    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(ret_status);</span></div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;<span class="stringliteral">    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(ret_status != 0, </span><span class="stringliteral">&quot;Regex compilation failed.&quot;</span>);</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160; </div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    <span class="comment">// Read cpuinfo and get occurrence of each core</span></div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    std::ifstream cpuinfo_file(<span class="stringliteral">&quot;/proc/cpuinfo&quot;</span>, std::ios::in);</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    <span class="keywordflow">if</span> (cpuinfo_file.is_open())</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    {</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;        std::string line;</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;        <span class="keywordflow">while</span> (<span class="keywordtype">bool</span>(getline(cpuinfo_file, line)))</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;        {</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;            std::array&lt;regmatch_t, 2&gt; match;</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;            <span class="keywordflow">if</span> (regexec(&amp;cpu_part_rgx, line.c_str(), 2, match.data(), 0) == 0)</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;            {</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;                cpus.emplace_back(line.substr(match[1].rm_so, (match[1].rm_eo - match[1].rm_so)));</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;            }</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;        }</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    }</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    regfree(&amp;cpu_part_rgx);</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160; </div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    <span class="comment">// Get min number of threads</span></div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    std::sort(std::begin(cpus), <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">std::end</a>(cpus));</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    <span class="keyword">auto</span> least_frequent_cpu_occurences = [](<span class="keyword">const</span> std::vector&lt;std::string&gt; &amp;cpus) -&gt; uint32_t</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    {</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;        std::unordered_map&lt;std::string, uint32_t&gt; cpus_freq;</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;cpu : cpus)</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;        {</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;            cpus_freq[cpu]++;</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;        }</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160; </div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;        uint32_t <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ab026a1aeec48074092f548c130c323f4">vmin</a> = cpus.size() + 1;</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;cpu_freq : cpus_freq)</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;        {</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;            <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ab026a1aeec48074092f548c130c323f4">vmin</a> = std::min(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ab026a1aeec48074092f548c130c323f4">vmin</a>, cpu_freq.second);</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;        }</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ab026a1aeec48074092f548c130c323f4">vmin</a>;</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    };</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160; </div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    <span class="comment">// Set thread hint</span></div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    <a class="code" href="namespacearm__compute_1_1cpuinfo.xhtml#a8d1f363d679403ae1ad371b85e63c7a3">num_threads_hint</a> = cpus.empty() ? std::thread::hardware_concurrency() : least_frequent_cpu_occurences(cpus);</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* !defined(BARE_METAL) &amp;&amp; !defined(_WIN64) &amp;&amp; !defined(ARM_COMPUTE_DISABLE_THREADS_HINT) */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160; </div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1cpuinfo.xhtml#a8d1f363d679403ae1ad371b85e63c7a3">num_threads_hint</a>;</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;}</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;} <span class="comment">// namespace cpuinfo</span></div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;} <span class="comment">// namespace arm_compute</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="a_string_support_8h_xhtml"><div class="ttname"><a href="_string_support_8h.xhtml">StringSupport.h</a></div></div>
<div class="ttc" id="astructarm__compute_1_1cpuinfo_1_1_cpu_isa_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1cpuinfo_1_1_cpu_isa_info.xhtml">arm_compute::cpuinfo::CpuIsaInfo</a></div><div class="ttdoc">CPU ISA (Instruction Set Architecture) information.</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_isa_info_8h_source.xhtml#l00037">CpuIsaInfo.h:37</a></div></div>
<div class="ttc" id="astructarm__compute_1_1cpuinfo_1_1_cpu_isa_info_xhtml_af778cbee81845454fec3eaec33d7ac57"><div class="ttname"><a href="structarm__compute_1_1cpuinfo_1_1_cpu_isa_info.xhtml#af778cbee81845454fec3eaec33d7ac57">arm_compute::cpuinfo::CpuIsaInfo::neon</a></div><div class="ttdeci">bool neon</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_isa_info_8h_source.xhtml#l00040">CpuIsaInfo.h:40</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_aa41d7415a5386798147cccae2333d5d4"><div class="ttname"><a href="namespacearm__compute.xhtml#aa41d7415a5386798147cccae2333d5d4">arm_compute::CPUModel</a></div><div class="ttdeci">CPUModel</div><div class="ttdoc">CPU models types.</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_types_8h_source.xhtml#l00059">CPPTypes.h:59</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1support_1_1cpp11_xhtml_aebc1ea57c14482b68dac0c0dab766126a027219c7702304969c898aeffed504af"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aebc1ea57c14482b68dac0c0dab766126a027219c7702304969c898aeffed504af">arm_compute::support::cpp11::NumericBase::BASE_16</a></div><div class="ttdeci">@ BASE_16</div></div>
<div class="ttc" id="astructarm__compute_1_1cpuinfo_1_1_cpu_isa_info_xhtml_aa9a6bf94935dd333e9337fdccc119616"><div class="ttname"><a href="structarm__compute_1_1cpuinfo_1_1_cpu_isa_info.xhtml#aa9a6bf94935dd333e9337fdccc119616">arm_compute::cpuinfo::CpuIsaInfo::dot</a></div><div class="ttdeci">bool dot</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_isa_info_8h_source.xhtml#l00052">CpuIsaInfo.h:52</a></div></div>
<div class="ttc" id="astructarm__compute_1_1cpuinfo_1_1_cpu_isa_info_xhtml_a2af87cdc1d4cc99aeee94cbefeae7811"><div class="ttname"><a href="structarm__compute_1_1cpuinfo_1_1_cpu_isa_info.xhtml#a2af87cdc1d4cc99aeee94cbefeae7811">arm_compute::cpuinfo::CpuIsaInfo::fp16</a></div><div class="ttdeci">bool fp16</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_isa_info_8h_source.xhtml#l00047">CpuIsaInfo.h:47</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1cpuinfo_1_1_cpu_info_xhtml_ada9426e8aa29745aadf93352e1eb00b5"><div class="ttname"><a href="classarm__compute_1_1cpuinfo_1_1_cpu_info.xhtml#ada9426e8aa29745aadf93352e1eb00b5">arm_compute::cpuinfo::CpuInfo::cpu_model</a></div><div class="ttdeci">CpuModel cpu_model() const</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_info_8cpp_source.xhtml#l00388">CpuInfo.cpp:388</a></div></div>
<div class="ttc" id="anamespacecaffe__mnist__image__extractor_xhtml_a4b99ff73a8a869319570237b5c57ab03"><div class="ttname"><a href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">caffe_mnist_image_extractor.str</a></div><div class="ttdeci">str</div><div class="ttdef"><b>Definition:</b> <a href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor.py:21</a></div></div>
<div class="ttc" id="a_error_8h_xhtml"><div class="ttname"><a href="_error_8h.xhtml">Error.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_ab026a1aeec48074092f548c130c323f4"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ab026a1aeec48074092f548c130c323f4">arm_compute::wrapper::vmin</a></div><div class="ttdeci">uint8x8_t vmin(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="min_8h_source.xhtml#l00039">min.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpuinfo_xhtml_ac48afee48f0c8e4b0e0be117385694d7"><div class="ttname"><a href="namespacearm__compute_1_1cpuinfo.xhtml#ac48afee48f0c8e4b0e0be117385694d7">arm_compute::cpuinfo::midr_to_model</a></div><div class="ttdeci">CpuModel midr_to_model(uint32_t midr)</div><div class="ttdoc">Extract the model type from the MIDR value.</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_model_8cpp_source.xhtml#l00080">CpuModel.cpp:80</a></div></div>
<div class="ttc" id="a_cpu_info_8cpp_xhtml_a6f1ae534cac43c2430d66e81bfe4d0f7"><div class="ttname"><a href="_cpu_info_8cpp.xhtml#a6f1ae534cac43c2430d66e81bfe4d0f7">ARM_COMPUTE_CPU_FEATURE_HWCAP_CPUID</a></div><div class="ttdeci">#define ARM_COMPUTE_CPU_FEATURE_HWCAP_CPUID</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_info_8cpp_source.xhtml#l00057">CpuInfo.cpp:57</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_log_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_log_8h.xhtml">Log.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1cpuinfo_1_1_cpu_info_xhtml_ab7d98af1963169ce0ba5e98635271e24"><div class="ttname"><a href="classarm__compute_1_1cpuinfo_1_1_cpu_info.xhtml#ab7d98af1963169ce0ba5e98635271e24">arm_compute::cpuinfo::CpuInfo::CpuInfo</a></div><div class="ttdeci">CpuInfo()=default</div><div class="ttdoc">Default constructor.</div></div>
<div class="ttc" id="a_error_8h_xhtml_a0b0eb3235749a2909dc5a101afe59a1b"><div class="ttname"><a href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond, msg)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00456">Error.h:456</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1cpuinfo_1_1_cpu_info_xhtml_a686af658dafc836c66bc29bc8fe6932b"><div class="ttname"><a href="classarm__compute_1_1cpuinfo_1_1_cpu_info.xhtml#a686af658dafc836c66bc29bc8fe6932b">arm_compute::cpuinfo::CpuInfo::build</a></div><div class="ttdeci">static CpuInfo build()</div><div class="ttdoc">CpuInfo builder function from system related information.</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_info_8cpp_source.xhtml#l00305">CpuInfo.cpp:305</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpuinfo_xhtml_ad40a2cde10e8b5f3e44af23f1e878f1c"><div class="ttname"><a href="namespacearm__compute_1_1cpuinfo.xhtml#ad40a2cde10e8b5f3e44af23f1e878f1c">arm_compute::cpuinfo::init_cpu_isa_from_regs</a></div><div class="ttdeci">CpuIsaInfo init_cpu_isa_from_regs(uint64_t isar0, uint64_t isar1, uint64_t pfr0, uint64_t pfr1, uint64_t svefr0, uint64_t midr)</div><div class="ttdoc">Identify ISA related information through register information.</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_isa_info_8cpp_source.xhtml#l00155">CpuIsaInfo.cpp:155</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1cpuinfo_1_1_cpu_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1cpuinfo_1_1_cpu_info.xhtml">arm_compute::cpuinfo::CpuInfo</a></div><div class="ttdoc">Aggregate class that contains CPU related information.</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_info_8h_source.xhtml#l00044">CpuInfo.h:44</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00151">Error.h:151</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1support_1_1cpp11_xhtml_ae7b85c41ac94d98f07b1cef18b33d2d1"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ae7b85c41ac94d98f07b1cef18b33d2d1">arm_compute::support::cpp11::stoul</a></div><div class="ttdeci">unsigned long stoul(const std::string &amp;str, std::size_t *pos=0, NumericBase base=NumericBase::BASE_10)</div><div class="ttdoc">Convert string values to unsigned long.</div><div class="ttdef"><b>Definition:</b> <a href="_string_support_8h_source.xhtml#l00091">StringSupport.h:91</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_log_8h_xhtml_a14f4c3a00d20ad742642767c9449993e"><div class="ttname"><a href="arm__compute_2core_2_log_8h.xhtml#a14f4c3a00d20ad742642767c9449993e">ARM_COMPUTE_LOG_INFO_MSG_CORE</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_INFO_MSG_CORE(msg)</div><div class="ttdoc">Log information level message to the core system logger.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_log_8h_source.xhtml#l00087">Log.h:87</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1cpuinfo_1_1_cpu_info_xhtml_a38f04d1608271656814fbb66e4688a0b"><div class="ttname"><a href="classarm__compute_1_1cpuinfo_1_1_cpu_info.xhtml#a38f04d1608271656814fbb66e4688a0b">arm_compute::cpuinfo::CpuInfo::isa</a></div><div class="ttdeci">const CpuIsaInfo &amp; isa() const</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_info_8h_source.xhtml#l00111">CpuInfo.h:111</a></div></div>
<div class="ttc" id="a_toolchain_support_8h_xhtml"><div class="ttname"><a href="_toolchain_support_8h.xhtml">ToolchainSupport.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2024 Arm Limited.</div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1support_1_1cpp11_xhtml_abdba606a789b8d664774f17d18f45cfe"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#abdba606a789b8d664774f17d18f45cfe">arm_compute::support::cpp11::stoi</a></div><div class="ttdeci">int stoi(const std::string &amp;str, std::size_t *pos=0, NumericBase base=NumericBase::BASE_10)</div><div class="ttdoc">Convert string values to integer.</div><div class="ttdef"><b>Definition:</b> <a href="_string_support_8h_source.xhtml#l00055">StringSupport.h:55</a></div></div>
<div class="ttc" id="a_cpu_info_8cpp_xhtml_a5596c84a7096be3975643069954aec7d"><div class="ttname"><a href="_cpu_info_8cpp.xhtml#a5596c84a7096be3975643069954aec7d">ARM_COMPUTE_GET_FEATURE_REG</a></div><div class="ttdeci">#define ARM_COMPUTE_GET_FEATURE_REG(var, freg)</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_info_8cpp_source.xhtml#l00058">CpuInfo.cpp:58</a></div></div>
<div class="ttc" id="a_cpu_info_8h_xhtml"><div class="ttname"><a href="_cpu_info_8h.xhtml">CpuInfo.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1mlgo_1_1parser_xhtml_a9fe67a1da3e2628bade473115ecbb5be"><div class="ttname"><a href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">arm_compute::mlgo::parser::end</a></div><div class="ttdeci">void end(TokenStream &amp;in, bool &amp;valid)</div><div class="ttdef"><b>Definition:</b> <a href="_m_l_g_o_parser_8cpp_source.xhtml#l00283">MLGOParser.cpp:283</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1cpuinfo_1_1_cpu_info_xhtml_adbfb368a91028856295df4cdaef94cdd"><div class="ttname"><a href="classarm__compute_1_1cpuinfo_1_1_cpu_info.xhtml#adbfb368a91028856295df4cdaef94cdd">arm_compute::cpuinfo::CpuInfo::num_cpus</a></div><div class="ttdeci">uint32_t num_cpus() const</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_info_8cpp_source.xhtml#l00398">CpuInfo.cpp:398</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_ac57b92957968088a392021cac1d2076b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a></div><div class="ttdeci">ScaleKernelInfo info(interpolation_policy, default_border_mode, PixelValue(), sampling_policy, false)</div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpuinfo_xhtml_a9abbd59830c6b78524e28478b2f78208"><div class="ttname"><a href="namespacearm__compute_1_1cpuinfo.xhtml#a9abbd59830c6b78524e28478b2f78208">arm_compute::cpuinfo::init_cpu_isa_from_hwcaps</a></div><div class="ttdeci">CpuIsaInfo init_cpu_isa_from_hwcaps(uint32_t hwcaps, uint32_t hwcaps2, uint32_t midr)</div><div class="ttdoc">Identify ISA related information through system information.</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_isa_info_8cpp_source.xhtml#l00142">CpuIsaInfo.cpp:142</a></div></div>
<div class="ttc" id="a_n_e_fuse_batch_normalization_kernel_8cpp_xhtml_a1659171e98a705cddffe279eda7c17b8"><div class="ttname"><a href="_n_e_fuse_batch_normalization_kernel_8cpp.xhtml#a1659171e98a705cddffe279eda7c17b8">isa</a></div><div class="ttdeci">cpuinfo::CpuIsaInfo isa</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_fuse_batch_normalization_kernel_8cpp_source.xhtml#l00052">NEFuseBatchNormalizationKernel.cpp:52</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpuinfo_xhtml_a8d1f363d679403ae1ad371b85e63c7a3"><div class="ttname"><a href="namespacearm__compute_1_1cpuinfo.xhtml#a8d1f363d679403ae1ad371b85e63c7a3">arm_compute::cpuinfo::num_threads_hint</a></div><div class="ttdeci">uint32_t num_threads_hint()</div><div class="ttdoc">Some systems have both big and small cores, this fuction computes the minimum number of cores that ar...</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_info_8cpp_source.xhtml#l00403">CpuInfo.cpp:403</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_fdedb0aba14d44ce9d99bc100e026e6a.xhtml">common</a></li><li class="navelem"><a class="el" href="dir_6af2047187e4f1498fa09099c58202d5.xhtml">cpuinfo</a></li><li class="navelem"><a class="el" href="_cpu_info_8cpp.xhtml">CpuInfo.cpp</a></li>
    <li class="footer">Generated on Mon Mar 18 2024 11:31:56 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
