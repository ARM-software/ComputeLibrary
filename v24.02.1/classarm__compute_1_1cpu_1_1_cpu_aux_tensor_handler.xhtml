<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: CpuAuxTensorHandler Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.02.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">CpuAuxTensorHandler Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> handler to wrap and handle tensor allocations on workspace buffers.  
 <a href="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_cpu_aux_tensor_handler_8h_source.xhtml">CpuAuxTensorHandler.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a0d1b3be632f92ee64c21cfffb082b208"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler.xhtml#a0d1b3be632f92ee64c21cfffb082b208">CpuAuxTensorHandler</a> (int slot_id, <a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;info, <a class="el" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> &amp;pack, bool pack_inject=false, bool bypass_alloc=false, bool bypass_import=false)</td></tr>
<tr class="memdesc:a0d1b3be632f92ee64c21cfffb082b208"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a temporary tensor handle, by either important an existing tensor from a tensor pack, or allocating a new one.  <a href="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler.xhtml#a0d1b3be632f92ee64c21cfffb082b208">More...</a><br /></td></tr>
<tr class="separator:a0d1b3be632f92ee64c21cfffb082b208"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1e52bc1d490ec42b480b3f4d48c987f"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler.xhtml#af1e52bc1d490ec42b480b3f4d48c987f">CpuAuxTensorHandler</a> (<a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;info, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, bool bypass_import=false)</td></tr>
<tr class="memdesc:af1e52bc1d490ec42b480b3f4d48c987f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a temporary handle to the original tensor with a new <a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> This is useful if we want to change a tensor's tensor info at run time without modifying the original tensor.  <a href="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler.xhtml#af1e52bc1d490ec42b480b3f4d48c987f">More...</a><br /></td></tr>
<tr class="separator:af1e52bc1d490ec42b480b3f4d48c987f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a21bbbe8d05e683f000460fa2b04152b9"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler.xhtml#a21bbbe8d05e683f000460fa2b04152b9">CpuAuxTensorHandler</a> (const <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler.xhtml">CpuAuxTensorHandler</a> &amp;)=delete</td></tr>
<tr class="separator:a21bbbe8d05e683f000460fa2b04152b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a55097c0b857b68c22fba17036ee0432b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler.xhtml">CpuAuxTensorHandler</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler.xhtml#a55097c0b857b68c22fba17036ee0432b">operator=</a> (const <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler.xhtml">CpuAuxTensorHandler</a>)=delete</td></tr>
<tr class="separator:a55097c0b857b68c22fba17036ee0432b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7c2c75f7cd3c0d2bbe368ca6f161d7df"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler.xhtml#a7c2c75f7cd3c0d2bbe368ca6f161d7df">~CpuAuxTensorHandler</a> ()</td></tr>
<tr class="separator:a7c2c75f7cd3c0d2bbe368ca6f161d7df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a07a5753fe338458e235f3107133299b6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler.xhtml#a07a5753fe338458e235f3107133299b6">get</a> ()</td></tr>
<tr class="separator:a07a5753fe338458e235f3107133299b6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0334363467dcf7fc3375ed2ffcb72f3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler.xhtml#ad0334363467dcf7fc3375ed2ffcb72f3">operator()</a> ()</td></tr>
<tr class="separator:ad0334363467dcf7fc3375ed2ffcb72f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> handler to wrap and handle tensor allocations on workspace buffers. </p>
<dl class="section note"><dt>Note</dt><dd>Important: Despite the impression given by its name, the handler owns, rather than merely points to, the underlying tensor memory.</dd>
<dd>
About memory handling using bypass_* flags The bypass_alloc / bypass_import flags are meant to skip the expensive auxiliary tensor memory allocations or imports that are not needed during runtime, e.g. when the handler is not used at all in some branch of execution.</dd></dl>
<p>If not handled correctly, these two flags can lead to performance issues (not bypass when needed to), or memory bugs (bypass when should not to).</p>
<p>Make sure:</p>
<ol type="1">
<li><p class="startli">The aux tensor handlers must always be declared at the root level, or the same level as the run/prepare methods that potentially use them.</p>
<p class="startli">Once the handler is destroyed (e.g. when going out of scope), the memory it owns (returned by the <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler.xhtml#a07a5753fe338458e235f3107133299b6">get()</a> method) will also be destroyed.</p>
<p class="startli">Thus it's important to ensure the handler is always in-scope when it is being used by a operator / kernel.</p>
</li>
<li><p class="startli">The handler's bypass_alloc and bypass_import flags should always be inverse of whether the handler is used in its surrounding scope by run/prepare. (This usually means being added to some tensor pack)</p>
<p class="startli">This ensures we only bypass if and only if the aux tensor is not used by the op / kernel later.</p>
</li>
</ol>
<p>So the general usage pattern goes like this: </p><pre class="fragment"> bool use_aux_tensor =  some_condition_about_when_to_use_the_aux_tensor

 CpuAuxTensorHandler aux_handler {..., !use_aux_tensor || bypass_alloc / bypass_import ||};

 if (use_aux_tensor)
 {
     tensor_pack.add_tensor(aux_handler.get());
 }
 op.run(tensor_pack);
</pre> 
<p class="definition">Definition at line <a class="el" href="_cpu_aux_tensor_handler_8h_source.xhtml#l00078">78</a> of file <a class="el" href="_cpu_aux_tensor_handler_8h_source.xhtml">CpuAuxTensorHandler.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a0d1b3be632f92ee64c21cfffb082b208"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0d1b3be632f92ee64c21cfffb082b208">&#9670;&nbsp;</a></span>CpuAuxTensorHandler() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler.xhtml">CpuAuxTensorHandler</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>slot_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> &amp;&#160;</td>
          <td class="paramname"><em>pack</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>pack_inject</em> = <code>false</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>bypass_alloc</em> = <code>false</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>bypass_import</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create a temporary tensor handle, by either important an existing tensor from a tensor pack, or allocating a new one. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">slot_id</td><td>Slot id of the tensor to be retrieved in the tensor pack If no such tensor exists in the tensor pack, a new tensor will be allocated. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> info containing requested size of the new tensor. If requested size is larger than the tensor retrieved from the tensor pack, a new tensor will be allocated. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">pack</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> pack to retrieve the old tensor. When <code>pack_inject</code> is true, the new tensor will also be added here. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pack_inject</td><td>In case of a newly allocated tensor, whether to add this tensor back to the <code>pack</code> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bypass_alloc</td><td>Bypass allocation in case of a new tensor This is to prevent unnecessary memory operations when the handler object is not used </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bypass_import</td><td>Bypass importation in case of a retrieved tensor This is to prevent unnecessary memory operations when the handler object is not used </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_cpu_aux_tensor_handler_8h_source.xhtml#l00100">100</a> of file <a class="el" href="_cpu_aux_tensor_handler_8h_source.xhtml">CpuAuxTensorHandler.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        : _tensor()</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    {</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.total_size() == 0)</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        {</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        }</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        _tensor.<a class="code" href="classarm__compute_1_1_tensor.xhtml#adbd0cf83a8e1b335a9bf405a8e5019fa">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#a7e551033018a2665355bbb757ed32e9a">soft_init</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160; </div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        ITensor *packed_tensor = utils::cast::polymorphic_downcast&lt;ITensor *&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a341a4c8a24d190d39504656989573d91">get_tensor</a>(slot_id));</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <span class="keywordflow">if</span> ((packed_tensor == <span class="keyword">nullptr</span>) || (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.total_size() &gt; packed_tensor-&gt;info()-&gt;total_size()))</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        {</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            <span class="keywordflow">if</span> (!bypass_alloc)</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            {</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                _tensor.<a class="code" href="classarm__compute_1_1_tensor.xhtml#adbd0cf83a8e1b335a9bf405a8e5019fa">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                <a class="code" href="src_2common_2utils_2_log_8h.xhtml#a9711076575f7df473c6e0214334687f3">ARM_COMPUTE_LOG_INFO_WITH_FUNCNAME_ACL</a>(<span class="stringliteral">&quot;Allocating auxiliary tensor&quot;</span>);</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            }</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160; </div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            <span class="keywordflow">if</span> (pack_inject)</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            {</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a6d8078b635739e84400cf8240a2993e7">add_tensor</a>(slot_id, &amp;_tensor);</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                _injected_tensor_pack = &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                _injected_slot_id     = slot_id;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            }</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        }</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        {</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            <span class="keywordflow">if</span> (!bypass_import)</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            {</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                _tensor.<a class="code" href="classarm__compute_1_1_tensor.xhtml#adbd0cf83a8e1b335a9bf405a8e5019fa">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_allocator.xhtml#a84052cebf66a6126051a166a078253a4">import_memory</a>(packed_tensor-&gt;buffer());</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            }</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        }</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_tensor_pack_8cpp_source.xhtml#l00038">ITensorPack::add_tensor()</a>, <a class="el" href="src_2runtime_2_tensor_allocator_8cpp_source.xhtml#l00133">TensorAllocator::allocate()</a>, <a class="el" href="src_2runtime_2_tensor_8cpp_source.xhtml#l00047">Tensor::allocator()</a>, <a class="el" href="src_2common_2utils_2_log_8h_source.xhtml#l00034">ARM_COMPUTE_LOG_INFO_WITH_FUNCNAME_ACL</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#ab988210662dbd3bf32fd563c7dd1bdbf">ITensor::buffer()</a>, <a class="el" href="_i_tensor_pack_8cpp_source.xhtml#l00063">ITensorPack::get_tensor()</a>, <a class="el" href="src_2runtime_2_tensor_allocator_8cpp_source.xhtml#l00154">TensorAllocator::import_memory()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00188">arm_compute::test::validation::pack</a>, <a class="el" href="_i_tensor_allocator_8cpp_source.xhtml#l00040">ITensorAllocator::soft_init()</a>, and <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a18064e0011c3869d884653e9e7c47b66">ITensorInfo::total_size()</a>.</p>

</div>
</div>
<a id="af1e52bc1d490ec42b480b3f4d48c987f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af1e52bc1d490ec42b480b3f4d48c987f">&#9670;&nbsp;</a></span>CpuAuxTensorHandler() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler.xhtml">CpuAuxTensorHandler</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>bypass_import</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create a temporary handle to the original tensor with a new <a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> This is useful if we want to change a tensor's tensor info at run time without modifying the original tensor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td>New tensor info to "assign" to <code>tensor</code> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> to be assigned a new <a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bypass_import</td><td>Bypass importing <code>tensor's</code> memory into the handler. This is to prevent unnecessary memory operations when the handler object is not used </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_cpu_aux_tensor_handler_8h_source.xhtml#l00147">147</a> of file <a class="el" href="_cpu_aux_tensor_handler_8h_source.xhtml">CpuAuxTensorHandler.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                                                                                             : _tensor()</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    {</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        _tensor.<a class="code" href="classarm__compute_1_1_tensor.xhtml#adbd0cf83a8e1b335a9bf405a8e5019fa">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#a7e551033018a2665355bbb757ed32e9a">soft_init</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="keywordflow">if</span> (!bypass_import)</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        {</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info() == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.total_size() &lt;= <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.info()-&gt;total_size())</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            {</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                _tensor.<a class="code" href="classarm__compute_1_1_tensor.xhtml#adbd0cf83a8e1b335a9bf405a8e5019fa">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_allocator.xhtml#a84052cebf66a6126051a166a078253a4">import_memory</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.buffer());</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            }</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        }</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="src_2runtime_2_tensor_8cpp_source.xhtml#l00047">Tensor::allocator()</a>, <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="src_2runtime_2_tensor_allocator_8cpp_source.xhtml#l00154">TensorAllocator::import_memory()</a>, <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, <a class="el" href="_i_tensor_allocator_8cpp_source.xhtml#l00040">ITensorAllocator::soft_init()</a>, and <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00067">tensor</a>.</p>

</div>
</div>
<a id="a21bbbe8d05e683f000460fa2b04152b9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a21bbbe8d05e683f000460fa2b04152b9">&#9670;&nbsp;</a></span>CpuAuxTensorHandler() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler.xhtml">CpuAuxTensorHandler</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler.xhtml">CpuAuxTensorHandler</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a7c2c75f7cd3c0d2bbe368ca6f161d7df"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7c2c75f7cd3c0d2bbe368ca6f161d7df">&#9670;&nbsp;</a></span>~CpuAuxTensorHandler()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler.xhtml">CpuAuxTensorHandler</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cpu_aux_tensor_handler_8h_source.xhtml#l00163">163</a> of file <a class="el" href="_cpu_aux_tensor_handler_8h_source.xhtml">CpuAuxTensorHandler.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    {</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <span class="keywordflow">if</span> (_injected_tensor_pack)</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        {</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            _injected_tensor_pack-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a2475b3be2ed6a5ef5654491aa6b7ca48">remove_tensor</a>(_injected_slot_id);</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        }</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_tensor_pack_8cpp_source.xhtml#l00069">ITensorPack::remove_tensor()</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a07a5753fe338458e235f3107133299b6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a07a5753fe338458e235f3107133299b6">&#9670;&nbsp;</a></span>get()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>* get </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cpu_aux_tensor_handler_8h_source.xhtml#l00171">171</a> of file <a class="el" href="_cpu_aux_tensor_handler_8h_source.xhtml">CpuAuxTensorHandler.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    {</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <span class="keywordflow">return</span> &amp;_tensor;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_cpu_gemm_direct_conv2d_8cpp_source.xhtml#l00223">CpuGemmDirectConv2d::prepare()</a>, <a class="el" href="_cpu_winograd_conv2d_8cpp_source.xhtml#l00422">CpuWinogradConv2d::prepare()</a>, <a class="el" href="_cpu_fully_connected_8cpp_source.xhtml#l00529">CpuFullyConnected::prepare()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00694">CpuGemmLowpMatrixMultiplyCore::prepare()</a>, <a class="el" href="_cpu_gemm_conv2d_8cpp_source.xhtml#l00888">CpuGemmConv2d::prepare()</a>, <a class="el" href="_cpu_add_mul_add_8cpp_source.xhtml#l00104">CpuAddMulAdd::run()</a>, <a class="el" href="_cpu_softmax_8cpp_source.xhtml#l00159">CpuSoftmaxGeneric::run()</a>, <a class="el" href="_cpu_mat_mul_8cpp_source.xhtml#l00255">CpuMatMul::run()</a>, <a class="el" href="_cpu_winograd_conv2d_8cpp_source.xhtml#l00356">CpuWinogradConv2d::run()</a>, <a class="el" href="_cpu_fully_connected_8cpp_source.xhtml#l00490">CpuFullyConnected::run()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00552">CpuGemmLowpMatrixMultiplyCore::run()</a>, <a class="el" href="_cpu_gemm_8cpp_source.xhtml#l00403">CpuGemm::run()</a>, and <a class="el" href="_cpu_gemm_conv2d_8cpp_source.xhtml#l00797">CpuGemmConv2d::run()</a>.</p>

</div>
</div>
<a id="ad0334363467dcf7fc3375ed2ffcb72f3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad0334363467dcf7fc3375ed2ffcb72f3">&#9670;&nbsp;</a></span>operator()()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>* operator() </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cpu_aux_tensor_handler_8h_source.xhtml#l00176">176</a> of file <a class="el" href="_cpu_aux_tensor_handler_8h_source.xhtml">CpuAuxTensorHandler.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    {</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <span class="keywordflow">return</span> &amp;_tensor;</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    }</div>
</div><!-- fragment -->
</div>
</div>
<a id="a55097c0b857b68c22fba17036ee0432b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a55097c0b857b68c22fba17036ee0432b">&#9670;&nbsp;</a></span>operator=()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler.xhtml">CpuAuxTensorHandler</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype">const&#160;</td>
          <td class="paramname"><em>CpuAuxTensorHandler</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>src/cpu/utils/<a class="el" href="_cpu_aux_tensor_handler_8h_source.xhtml">CpuAuxTensorHandler.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="asrc_2common_2utils_2_log_8h_xhtml_a9711076575f7df473c6e0214334687f3"><div class="ttname"><a href="src_2common_2utils_2_log_8h.xhtml#a9711076575f7df473c6e0214334687f3">ARM_COMPUTE_LOG_INFO_WITH_FUNCNAME_ACL</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_INFO_WITH_FUNCNAME_ACL(msg)</div><div class="ttdef"><b>Definition:</b> <a href="src_2common_2utils_2_log_8h_source.xhtml#l00034">Log.h:34</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_pack_xhtml_a2475b3be2ed6a5ef5654491aa6b7ca48"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_pack.xhtml#a2475b3be2ed6a5ef5654491aa6b7ca48">arm_compute::ITensorPack::remove_tensor</a></div><div class="ttdeci">void remove_tensor(int id)</div><div class="ttdoc">Remove the tensor stored with the given id.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_pack_8cpp_source.xhtml#l00069">ITensorPack.cpp:69</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_pack_xhtml_a6d8078b635739e84400cf8240a2993e7"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_pack.xhtml#a6d8078b635739e84400cf8240a2993e7">arm_compute::ITensorPack::add_tensor</a></div><div class="ttdeci">void add_tensor(int id, ITensor *tensor)</div><div class="ttdoc">Add tensor to the pack.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_pack_8cpp_source.xhtml#l00038">ITensorPack.cpp:38</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_pack_xhtml_a341a4c8a24d190d39504656989573d91"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_pack.xhtml#a341a4c8a24d190d39504656989573d91">arm_compute::ITensorPack::get_tensor</a></div><div class="ttdeci">ITensor * get_tensor(int id)</div><div class="ttdoc">Get tensor of a given id from the pac.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_pack_8cpp_source.xhtml#l00063">ITensorPack.cpp:63</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_allocator_xhtml_a7e551033018a2665355bbb757ed32e9a"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_allocator.xhtml#a7e551033018a2665355bbb757ed32e9a">arm_compute::ITensorAllocator::soft_init</a></div><div class="ttdeci">void soft_init(TensorInfo &amp;input, size_t alignment=0)</div><div class="ttdoc">Initialize a tensor based with a reference TensorInfo.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_allocator_8cpp_source.xhtml#l00040">ITensorAllocator.cpp:40</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_xhtml_adbd0cf83a8e1b335a9bf405a8e5019fa"><div class="ttname"><a href="classarm__compute_1_1_tensor.xhtml#adbd0cf83a8e1b335a9bf405a8e5019fa">arm_compute::Tensor::allocator</a></div><div class="ttdeci">TensorAllocator * allocator()</div><div class="ttdoc">Return a pointer to the tensor's allocator.</div><div class="ttdef"><b>Definition:</b> <a href="src_2runtime_2_tensor_8cpp_source.xhtml#l00047">Tensor.cpp:47</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a1e041dc03ff256dfc8b0bf5c5fe099e0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">arm_compute::test::validation::pack</a></div><div class="ttdeci">ITensorPack pack</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00188">Im2Col.cpp:188</a></div></div>
<div class="ttc" id="a_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00067">ClWorkloadRuntime.cpp:67</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_allocator_xhtml_a6e509c2a177b0b29e9e2369535094dee"><div class="ttname"><a href="classarm__compute_1_1_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">arm_compute::TensorAllocator::allocate</a></div><div class="ttdeci">void allocate() override</div><div class="ttdoc">Allocate size specified by TensorInfo of CPU memory.</div><div class="ttdef"><b>Definition:</b> <a href="src_2runtime_2_tensor_allocator_8cpp_source.xhtml#l00133">TensorAllocator.cpp:133</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_ac57b92957968088a392021cac1d2076b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a></div><div class="ttdeci">ScaleKernelInfo info(interpolation_policy, default_border_mode, PixelValue(), sampling_policy, false)</div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_allocator_xhtml_a84052cebf66a6126051a166a078253a4"><div class="ttname"><a href="classarm__compute_1_1_tensor_allocator.xhtml#a84052cebf66a6126051a166a078253a4">arm_compute::TensorAllocator::import_memory</a></div><div class="ttdeci">Status import_memory(void *memory)</div><div class="ttdoc">Import an existing memory as a tensor's backing memory.</div><div class="ttdef"><b>Definition:</b> <a href="src_2runtime_2_tensor_allocator_8cpp_source.xhtml#l00154">TensorAllocator.cpp:154</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1cpu.xhtml">cpu</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler.xhtml">CpuAuxTensorHandler</a></li>
    <li class="footer">Generated on Mon Mar 18 2024 11:32:12 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
