<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: support/DeepCopy.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.02.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_deep_copy_8h_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">DeepCopy.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_deep_copy_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2022 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160; </div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_MISC_ITERABLE_H</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#define ARM_COMPUTE_MISC_ITERABLE_H</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;{</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="keyword">namespace </span>utils</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;{</div>
<div class="line"><a name="l00031"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1utils_1_1memory.xhtml">   31</a></span>&#160;<span class="keyword">namespace </span>memory</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;{</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">namespace</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{<span class="comment"></span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">/**  Default polymorphic deep copy function, used by deep_unique_ptr</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment"> * @param ptr  Potentially polymorphic object to be deep copied</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment"> * @return template &lt;typename Base, typename Derived&gt;*</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Base, <span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;Base *default_polymorphic_copy(<span class="keyword">const</span> Base *ptr)</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    static_assert(std::is_base_of&lt;Base, Derived&gt;::value, <span class="stringliteral">&quot;Derived is not a specialization of Base&quot;</span>);</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordflow">if</span> (ptr == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    {</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    }</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">new</span> Derived(*<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Derived *<span class="keyword">&gt;</span>(ptr));</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;}</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;} <span class="comment">// namespace</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">/** A deep-copying unique pointer that also supports polymorphic cloning behavior</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment"> * @note The == operator compares the dereferenced value instead of the pointer itself.</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment"> * @tparam Base Base type</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Base&gt;</div>
<div class="line"><a name="l00059"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml">   59</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml">deep_unique_ptr</a></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;{</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00062"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#af19e5941b885a2b0da5666a1d9a10838">   62</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#af19e5941b885a2b0da5666a1d9a10838">CopyFunc</a> = std::function&lt;Base *(<span class="keyword">const</span> Base *)&gt;;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160; </div>
<div class="line"><a name="l00064"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#a2d9fa4ea2bb82870f30269acb158523f">   64</a></span>&#160;    <a class="code" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#a2d9fa4ea2bb82870f30269acb158523f">deep_unique_ptr</a>(std::nullptr_t val = <span class="keyword">nullptr</span>) noexcept : _val{val}, _copy{}</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    {</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    }</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived, <span class="keyword">typename</span> CopyFuncDerived&gt;</div>
<div class="line"><a name="l00068"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#ae58d8465d2b804da4fb9e750e3947a38">   68</a></span>&#160;    <a class="code" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#ae58d8465d2b804da4fb9e750e3947a38">deep_unique_ptr</a>(Derived *value, <span class="keyword">const</span> CopyFuncDerived &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#ad9000ce99b9ffcec5722cade36d7e757">copy</a>) noexcept : _val{value}, _copy{std::move(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#ad9000ce99b9ffcec5722cade36d7e757">copy</a>)}</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    {</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        static_assert(std::is_base_of&lt;Base, Derived&gt;::value, <span class="stringliteral">&quot;Derived is not a specialization of Base&quot;</span>);</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        static_assert(std::is_constructible&lt;CopyFunc, CopyFuncDerived&gt;::value,</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                      <span class="stringliteral">&quot;CopyFuncDerived is not valid for a copy functor&quot;</span>);</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    }</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160; </div>
<div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#afca2b75d4d718e3f68845a383baaa551">   75</a></span>&#160;    <a class="code" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#afca2b75d4d718e3f68845a383baaa551">deep_unique_ptr</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml">deep_unique_ptr&lt;Base&gt;</a> &amp;ptr) : <a class="code" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml">deep_unique_ptr</a>(ptr.clone())</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    {</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    }</div>
<div class="line"><a name="l00078"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#a649cc0ef4bd9919a899ddd033ddf9009">   78</a></span>&#160;    <a class="code" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml">deep_unique_ptr</a> &amp;<a class="code" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#a649cc0ef4bd9919a899ddd033ddf9009">operator=</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml">deep_unique_ptr&lt;Base&gt;</a> &amp;ptr)</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    {</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <a class="code" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml">deep_unique_ptr&lt;Base&gt;</a> tmp(ptr);</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <a class="code" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#af10963555438c739192d8ac0e77272c6">swap</a>(*<span class="keyword">this</span>, tmp);</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    }</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160; </div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <a class="code" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#a2d9fa4ea2bb82870f30269acb158523f">deep_unique_ptr</a>(<a class="code" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml">deep_unique_ptr&lt;Base&gt;</a> &amp;&amp;ptr)            = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <a class="code" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml">deep_unique_ptr</a> &amp;<a class="code" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#a649cc0ef4bd9919a899ddd033ddf9009">operator=</a>(<a class="code" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml">deep_unique_ptr&lt;Base&gt;</a> &amp;&amp;ptr) = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <a class="code" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#a76ffa711331aeda4d47de52d92a35e99">~deep_unique_ptr</a>()                                      = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00088"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#af10963555438c739192d8ac0e77272c6">   88</a></span>&#160;    <span class="keyword">friend</span> <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#af10963555438c739192d8ac0e77272c6">swap</a>(<a class="code" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml">deep_unique_ptr</a> &amp;ptr0, <a class="code" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml">deep_unique_ptr&lt;Base&gt;</a> &amp;ptr1) noexcept</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    {</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="keyword">using</span> <a class="code" href="namespacearm__compute.xhtml#ae70b8de3a0b147a476cabb07b8707d7f">std::swap</a>;</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        <a class="code" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#af10963555438c739192d8ac0e77272c6">swap</a>(ptr0._val, ptr1._val);</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <a class="code" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#af10963555438c739192d8ac0e77272c6">swap</a>(ptr0._copy, ptr1._copy);</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    }</div>
<div class="line"><a name="l00094"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#a72216fa65e6711f08ea66a1f60cbfe6d">   94</a></span>&#160;    Base &amp;<a class="code" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#a72216fa65e6711f08ea66a1f60cbfe6d">operator*</a>() noexcept</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    {</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <span class="keywordflow">return</span> *_val;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    }</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160; </div>
<div class="line"><a name="l00099"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#a14b77386b0589c7cda5f1b0906874523">   99</a></span>&#160;    <span class="keyword">const</span> Base &amp;<a class="code" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#a14b77386b0589c7cda5f1b0906874523">operator*</a>() const noexcept</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    {</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <span class="keywordflow">return</span> *_val;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    }</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160; </div>
<div class="line"><a name="l00104"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#a28b99fdcac18716413b77f56382da0e3">  104</a></span>&#160;    Base *<a class="code" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#a28b99fdcac18716413b77f56382da0e3">operator-&gt;</a>() noexcept</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    {</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <span class="keywordflow">return</span> _val.operator-&gt;();</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    }</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160; </div>
<div class="line"><a name="l00109"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#a8e9cbd797d4d19897303d84acf1586c2">  109</a></span>&#160;    <span class="keyword">const</span> Base *<a class="code" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#a8e9cbd797d4d19897303d84acf1586c2">operator-&gt;</a>() const noexcept</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    {</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <span class="keywordflow">return</span> _val.operator-&gt;();</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    }</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160; </div>
<div class="line"><a name="l00114"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#a3d71c09b56ba4a1218c32fe7c4e3b39e">  114</a></span>&#160;    Base *<a class="code" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#a3d71c09b56ba4a1218c32fe7c4e3b39e">get</a>() noexcept</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    {</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        <span class="keywordflow">return</span> _val.get();</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    }</div>
<div class="line"><a name="l00118"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#a084833a9a124b044091ac69bf96ffad6">  118</a></span>&#160;    <span class="keyword">const</span> Base *<a class="code" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#a084833a9a124b044091ac69bf96ffad6">get</a>() const noexcept</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    {</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <span class="keywordflow">return</span> _val.get();</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    }</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160; </div>
<div class="line"><a name="l00123"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#a420e60e9788bfa3b52aa3aab72ea3a5e">  123</a></span>&#160;    <span class="keyword">explicit</span> <span class="keyword">operator</span> bool() const noexcept</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    {</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><span class="keywordtype">bool</span><span class="keyword">&gt;</span>(_val);</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    }</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160; </div>
<div class="line"><a name="l00128"></a><span class="lineno"><a class="line" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#a6ff83e9851412c2f36d66e2e19f38742">  128</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#a6ff83e9851412c2f36d66e2e19f38742">operator==</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml">deep_unique_ptr&lt;Base&gt;</a> &amp;rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        <span class="keywordflow">if</span> (rhs.<a class="code" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#a3d71c09b56ba4a1218c32fe7c4e3b39e">get</a>() == <span class="keyword">nullptr</span> &amp;&amp; _val == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        {</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        }</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (rhs.<a class="code" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#a3d71c09b56ba4a1218c32fe7c4e3b39e">get</a>() == <span class="keyword">nullptr</span> || _val == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        {</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        }</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        {</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            <span class="keywordflow">return</span> (*_val == *rhs);</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        }</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    }</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160; </div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <a class="code" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml">deep_unique_ptr</a> clone()<span class="keyword"> const</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        <span class="keywordflow">return</span> {_copy(_val.get()), <a class="code" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#af19e5941b885a2b0da5666a1d9a10838">CopyFunc</a>(_copy)};</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    }</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    std::unique_ptr&lt;Base&gt; _val{<span class="keyword">nullptr</span>};</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <a class="code" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#af19e5941b885a2b0da5666a1d9a10838">CopyFunc</a>              _copy{};</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;};</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment">/** Utility function to create a polymorphic deep-copying unique pointer</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment"> * @tparam Base</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment"> * @tparam Derived</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment"> * @tparam CopyFunc</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment"> * @param temp</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment"> * @param copy</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment"> * @return deep_unique_ptr&lt;Base&gt;</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Base, <span class="keyword">typename</span> Derived, <span class="keyword">typename</span> CopyFunc&gt;</div>
<div class="line"><a name="l00163"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1utils_1_1memory.xhtml#a8d20d7414ceb8ac4c9795ee259eed7d0">  163</a></span>&#160;<a class="code" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml">deep_unique_ptr&lt;Base&gt;</a> <a class="code" href="namespacearm__compute_1_1utils_1_1memory.xhtml#a8d20d7414ceb8ac4c9795ee259eed7d0">make_deep_unique</a>(Derived &amp;&amp;temp, CopyFunc <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#ad9000ce99b9ffcec5722cade36d7e757">copy</a>)</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;{</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keywordflow">return</span> {<span class="keyword">new</span> Derived(std::move(temp)), CopyFunc{std::move(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#ad9000ce99b9ffcec5722cade36d7e757">copy</a>)}};</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;}</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160; </div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Base, <span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00169"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1utils_1_1memory.xhtml#abee7c3789c5c90c7b920fdb93afe49c6">  169</a></span>&#160;<a class="code" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml">deep_unique_ptr&lt;Base&gt;</a> <a class="code" href="namespacearm__compute_1_1utils_1_1memory.xhtml#a8d20d7414ceb8ac4c9795ee259eed7d0">make_deep_unique</a>(Derived &amp;&amp;temp)</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;{</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    static_assert(std::is_base_of&lt;Base, Derived&gt;::value, <span class="stringliteral">&quot;Derived is not a specialization of Base&quot;</span>);</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160; </div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keywordflow">return</span> make_deep_unique&lt;Base, Derived&gt;(std::move(temp), default_polymorphic_copy&lt;Base, Derived&gt;);</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;}</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160; </div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Base, <span class="keyword">typename</span> Derived, <span class="keyword">typename</span>... Args&gt;</div>
<div class="line"><a name="l00177"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1utils_1_1memory.xhtml#a762df72c2adf03470565b7f1f0800675">  177</a></span>&#160;<a class="code" href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml">deep_unique_ptr&lt;Base&gt;</a> <a class="code" href="namespacearm__compute_1_1utils_1_1memory.xhtml#a8d20d7414ceb8ac4c9795ee259eed7d0">make_deep_unique</a>(Args &amp;&amp;...<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;{</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    static_assert(std::is_constructible&lt;Derived, Args...&gt;::value, <span class="stringliteral">&quot;Cannot instantiate Derived from arguments&quot;</span>);</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160; </div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="keywordflow">return</span> make_deep_unique&lt;Base, Derived&gt;(std::move(Derived{std::forward&lt;Args&gt;(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)...}));</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;}</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160; </div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;} <span class="comment">// namespace memory</span></div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;} <span class="comment">// namespace utils</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;} <span class="comment">// namespace arm_compute</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="preprocessor">#endif // ARM_COMPUTE_MISC_ITERABLE_H</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="anamespace_gemm_tuner_xhtml_a8187411843a6284ffb964ef3fb9fcab3"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">GemmTuner.args</a></div><div class="ttdeci">args</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner.py:679</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr_xhtml_a14b77386b0589c7cda5f1b0906874523"><div class="ttname"><a href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#a14b77386b0589c7cda5f1b0906874523">arm_compute::utils::memory::deep_unique_ptr::operator*</a></div><div class="ttdeci">const Base &amp; operator*() const noexcept</div><div class="ttdef"><b>Definition:</b> <a href="_deep_copy_8h_source.xhtml#l00099">DeepCopy.h:99</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr_xhtml_a6ff83e9851412c2f36d66e2e19f38742"><div class="ttname"><a href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#a6ff83e9851412c2f36d66e2e19f38742">arm_compute::utils::memory::deep_unique_ptr::operator==</a></div><div class="ttdeci">bool operator==(const deep_unique_ptr&lt; Base &gt; &amp;rhs) const</div><div class="ttdef"><b>Definition:</b> <a href="_deep_copy_8h_source.xhtml#l00128">DeepCopy.h:128</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr_xhtml_af19e5941b885a2b0da5666a1d9a10838"><div class="ttname"><a href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#af19e5941b885a2b0da5666a1d9a10838">arm_compute::utils::memory::deep_unique_ptr::CopyFunc</a></div><div class="ttdeci">std::function&lt; Base *(const Base *)&gt; CopyFunc</div><div class="ttdef"><b>Definition:</b> <a href="_deep_copy_8h_source.xhtml#l00062">DeepCopy.h:62</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr_xhtml"><div class="ttname"><a href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml">arm_compute::utils::memory::deep_unique_ptr</a></div><div class="ttdoc">A deep-copying unique pointer that also supports polymorphic cloning behavior.</div><div class="ttdef"><b>Definition:</b> <a href="_deep_copy_8h_source.xhtml#l00059">DeepCopy.h:59</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr_xhtml_a084833a9a124b044091ac69bf96ffad6"><div class="ttname"><a href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#a084833a9a124b044091ac69bf96ffad6">arm_compute::utils::memory::deep_unique_ptr::get</a></div><div class="ttdeci">const Base * get() const noexcept</div><div class="ttdef"><b>Definition:</b> <a href="_deep_copy_8h_source.xhtml#l00118">DeepCopy.h:118</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr_xhtml_ae58d8465d2b804da4fb9e750e3947a38"><div class="ttname"><a href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#ae58d8465d2b804da4fb9e750e3947a38">arm_compute::utils::memory::deep_unique_ptr::deep_unique_ptr</a></div><div class="ttdeci">deep_unique_ptr(Derived *value, const CopyFuncDerived &amp;copy) noexcept</div><div class="ttdef"><b>Definition:</b> <a href="_deep_copy_8h_source.xhtml#l00068">DeepCopy.h:68</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr_xhtml_a2d9fa4ea2bb82870f30269acb158523f"><div class="ttname"><a href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#a2d9fa4ea2bb82870f30269acb158523f">arm_compute::utils::memory::deep_unique_ptr::deep_unique_ptr</a></div><div class="ttdeci">deep_unique_ptr(std::nullptr_t val=nullptr) noexcept</div><div class="ttdef"><b>Definition:</b> <a href="_deep_copy_8h_source.xhtml#l00064">DeepCopy.h:64</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1utils_1_1memory_xhtml_a8d20d7414ceb8ac4c9795ee259eed7d0"><div class="ttname"><a href="namespacearm__compute_1_1utils_1_1memory.xhtml#a8d20d7414ceb8ac4c9795ee259eed7d0">arm_compute::utils::memory::make_deep_unique</a></div><div class="ttdeci">deep_unique_ptr&lt; Base &gt; make_deep_unique(Derived &amp;&amp;temp, CopyFunc copy)</div><div class="ttdoc">Utility function to create a polymorphic deep-copying unique pointer.</div><div class="ttdef"><b>Definition:</b> <a href="_deep_copy_8h_source.xhtml#l00163">DeepCopy.h:163</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr_xhtml_a649cc0ef4bd9919a899ddd033ddf9009"><div class="ttname"><a href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#a649cc0ef4bd9919a899ddd033ddf9009">arm_compute::utils::memory::deep_unique_ptr::operator=</a></div><div class="ttdeci">deep_unique_ptr &amp; operator=(const deep_unique_ptr&lt; Base &gt; &amp;ptr)</div><div class="ttdef"><b>Definition:</b> <a href="_deep_copy_8h_source.xhtml#l00078">DeepCopy.h:78</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr_xhtml_a72216fa65e6711f08ea66a1f60cbfe6d"><div class="ttname"><a href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#a72216fa65e6711f08ea66a1f60cbfe6d">arm_compute::utils::memory::deep_unique_ptr::operator*</a></div><div class="ttdeci">Base &amp; operator*() noexcept</div><div class="ttdef"><b>Definition:</b> <a href="_deep_copy_8h_source.xhtml#l00094">DeepCopy.h:94</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_ad9000ce99b9ffcec5722cade36d7e757"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#ad9000ce99b9ffcec5722cade36d7e757">arm_compute::test::validation::reference::copy</a></div><div class="ttdeci">SimpleTensor&lt; T &gt; copy(const SimpleTensor&lt; T &gt; &amp;src, const TensorShape &amp;output_shape)</div><div class="ttdef"><b>Definition:</b> <a href="reference_2_copy_8cpp_source.xhtml#l00037">Copy.cpp:37</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr_xhtml_a3d71c09b56ba4a1218c32fe7c4e3b39e"><div class="ttname"><a href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#a3d71c09b56ba4a1218c32fe7c4e3b39e">arm_compute::utils::memory::deep_unique_ptr::get</a></div><div class="ttdeci">Base * get() noexcept</div><div class="ttdef"><b>Definition:</b> <a href="_deep_copy_8h_source.xhtml#l00114">DeepCopy.h:114</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr_xhtml_a8e9cbd797d4d19897303d84acf1586c2"><div class="ttname"><a href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#a8e9cbd797d4d19897303d84acf1586c2">arm_compute::utils::memory::deep_unique_ptr::operator-&gt;</a></div><div class="ttdeci">const Base * operator-&gt;() const noexcept</div><div class="ttdef"><b>Definition:</b> <a href="_deep_copy_8h_source.xhtml#l00109">DeepCopy.h:109</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ae70b8de3a0b147a476cabb07b8707d7f"><div class="ttname"><a href="namespacearm__compute.xhtml#ae70b8de3a0b147a476cabb07b8707d7f">arm_compute::swap</a></div><div class="ttdeci">void swap(Window &amp;lhs, Window &amp;rhs)</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00318">Window.inl:318</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2024 Arm Limited.</div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr_xhtml_afca2b75d4d718e3f68845a383baaa551"><div class="ttname"><a href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#afca2b75d4d718e3f68845a383baaa551">arm_compute::utils::memory::deep_unique_ptr::deep_unique_ptr</a></div><div class="ttdeci">deep_unique_ptr(const deep_unique_ptr&lt; Base &gt; &amp;ptr)</div><div class="ttdef"><b>Definition:</b> <a href="_deep_copy_8h_source.xhtml#l00075">DeepCopy.h:75</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr_xhtml_af10963555438c739192d8ac0e77272c6"><div class="ttname"><a href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#af10963555438c739192d8ac0e77272c6">arm_compute::utils::memory::deep_unique_ptr::swap</a></div><div class="ttdeci">friend void swap(deep_unique_ptr &amp;ptr0, deep_unique_ptr&lt; Base &gt; &amp;ptr1) noexcept</div><div class="ttdef"><b>Definition:</b> <a href="_deep_copy_8h_source.xhtml#l00088">DeepCopy.h:88</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr_xhtml_a76ffa711331aeda4d47de52d92a35e99"><div class="ttname"><a href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#a76ffa711331aeda4d47de52d92a35e99">arm_compute::utils::memory::deep_unique_ptr::~deep_unique_ptr</a></div><div class="ttdeci">~deep_unique_ptr()=default</div></div>
<div class="ttc" id="aclassarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr_xhtml_a28b99fdcac18716413b77f56382da0e3"><div class="ttname"><a href="classarm__compute_1_1utils_1_1memory_1_1deep__unique__ptr.xhtml#a28b99fdcac18716413b77f56382da0e3">arm_compute::utils::memory::deep_unique_ptr::operator-&gt;</a></div><div class="ttdeci">Base * operator-&gt;() noexcept</div><div class="ttdef"><b>Definition:</b> <a href="_deep_copy_8h_source.xhtml#l00104">DeepCopy.h:104</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_5815af820a9cc9481f1d0990a0d60286.xhtml">support</a></li><li class="navelem"><a class="el" href="_deep_copy_8h.xhtml">DeepCopy.h</a></li>
    <li class="footer">Generated on Mon Mar 18 2024 11:32:04 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
