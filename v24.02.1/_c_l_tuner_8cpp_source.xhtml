<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/runtime/CL/CLTuner.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.02.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_c_l_tuner_8cpp_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">CLTuner.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_c_l_tuner_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017-2023 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_c_l_tuner_8h.xhtml">arm_compute/runtime/CL/CLTuner.h</a>&quot;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160; </div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_error_8h.xhtml">arm_compute/core/Error.h</a>&quot;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_c_l_scheduler_8h.xhtml">arm_compute/runtime/CL/CLScheduler.h</a>&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_c_l_tuning_parameters_list_8h.xhtml">arm_compute/runtime/CL/tuners/CLTuningParametersList.h</a>&quot;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160; </div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="src_2common_2utils_2_log_8h.xhtml">src/common/utils/Log.h</a>&quot;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="core_2_c_l_2_i_c_l_kernel_8h.xhtml">src/core/CL/ICLKernel.h</a>&quot;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_string_support_8h.xhtml">support/StringSupport.h</a>&quot;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160; </div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &lt;cerrno&gt;</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &lt;fstream&gt;</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &lt;limits&gt;</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160; </div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div>
<div class="line"><a name="l00040"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_tuner.xhtml#af40cb6e89337657d0fea6a8629f69a32">   40</a></span>&#160;<a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#af40cb6e89337657d0fea6a8629f69a32">CLTuner::CLTuner</a>(<span class="keywordtype">bool</span> tune_new_kernels, <a class="code" href="structarm__compute_1_1_c_l_tuning_info.xhtml">CLTuningInfo</a> tuning_info)</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    : real_clEnqueueNDRangeKernel(nullptr),</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;      _tuning_params_table(),</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;      _lws_table(),</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;      _kernel_event(),</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;      _tune_new_kernels(tune_new_kernels),</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;      _tuning_info(tuning_info)</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;{</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;}</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160; </div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="keyword">struct </span>CLTuner::IKernelData</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;{</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keyword">virtual</span> ~IKernelData()                                          = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> do_run(<a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml">ICLKernel</a> &amp;kernel, cl::CommandQueue &amp;queue) = 0;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;};</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="keyword">struct </span>DefaultKernelData : <span class="keyword">public</span> CLTuner::IKernelData</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;{</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    DefaultKernelData(ITensorPack &amp;tensors) : _tensors{tensors}</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    {</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    }</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    ~DefaultKernelData() <span class="keyword">override</span> = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordtype">void</span> do_run(ICLKernel &amp;kernel, cl::CommandQueue &amp;queue)<span class="keyword"> override</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span> inject_memory = !_tensors.empty();</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        inject_memory ? kernel.run_op(_tensors, kernel.window(), queue) : kernel.run(kernel.window(), queue);</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    }</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160; </div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    ITensorPack &amp;_tensors;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;};</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160; </div>
<div class="line"><a name="l00071"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_tuner.xhtml#ac6fe363cafdd1fcfb6179a7cceac7dad">   71</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#ac6fe363cafdd1fcfb6179a7cceac7dad">CLTuner::kernel_event_is_set</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keywordflow">return</span> _kernel_event() != <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;}</div>
<div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_tuner.xhtml#a7937dca7876064401bb14b4443bf5d8d">   75</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#a7937dca7876064401bb14b4443bf5d8d">CLTuner::set_cl_kernel_event</a>(cl_event kernel_event)</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;{</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    _kernel_event = kernel_event;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;}</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160; </div>
<div class="line"><a name="l00080"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_tuner.xhtml#aba10acdb2d58e3e0a96364c487a71d40">   80</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#aba10acdb2d58e3e0a96364c487a71d40">CLTuner::set_tune_new_kernels</a>(<span class="keywordtype">bool</span> tune_new_kernels)</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;{</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    _tune_new_kernels = <a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#a362184f6651ae4acde05d5ce85cfd16f">tune_new_kernels</a>;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;}</div>
<div class="line"><a name="l00084"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_tuner.xhtml#a362184f6651ae4acde05d5ce85cfd16f">   84</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#a362184f6651ae4acde05d5ce85cfd16f">CLTuner::tune_new_kernels</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keywordflow">return</span> _tune_new_kernels;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;}</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160; </div>
<div class="line"><a name="l00089"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_tuner.xhtml#aae485b24df65d39cb646e48317f49639">   89</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#aae485b24df65d39cb646e48317f49639">CLTuner::set_tuner_mode</a>(<a class="code" href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5c">CLTunerMode</a> <a class="code" href="namespaceclang__tidy__rules.xhtml#a1a6b6fb557d8d37d59700faf4e4c9167">mode</a>)</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;{</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    _tuning_info.<a class="code" href="structarm__compute_1_1_c_l_tuning_info.xhtml#a249f3f713c6ea8f564e760559cf509f4">tuner_mode</a> = <a class="code" href="namespaceclang__tidy__rules.xhtml#a1a6b6fb557d8d37d59700faf4e4c9167">mode</a>;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;}</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160; </div>
<div class="line"><a name="l00094"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_tuner.xhtml#a52f755d664bbdcb9346cdf5cc4a7e958">   94</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#a52f755d664bbdcb9346cdf5cc4a7e958">CLTuner::tune_kernel_static</a>(<a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml">ICLKernel</a> &amp;kernel)</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;{</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(kernel);</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;}</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160; </div>
<div class="line"><a name="l00099"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_tuner.xhtml#af073b532560e2105dd22d381f5888ce7">   99</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#af073b532560e2105dd22d381f5888ce7">CLTuner::tune_kernel_dynamic</a>(<a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml">ICLKernel</a> &amp;kernel)</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;{</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#af073b532560e2105dd22d381f5888ce7">tune_kernel_dynamic</a>(kernel, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>);</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;}</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160; </div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="keywordtype">void</span> CLTuner::do_tune_kernel_dynamic(<a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml">ICLKernel</a> &amp;kernel, IKernelData *data)</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;{</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="comment">// Get the configuration ID from the kernel and append GPU target name and number of available compute units</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keyword">const</span> std::string config_id = kernel.<a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a8f7f6ab59fc0e601d750b83e75a398eb">config_id</a>() + <span class="stringliteral">&quot;_&quot;</span> + <a class="code" href="namespacearm__compute.xhtml#af7795707992825c309fe846740dc8cf8">string_from_target</a>(kernel.<a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#aa550ff0352ff2388e02f7b0a41bf5fe7">get_target</a>()) + <span class="stringliteral">&quot;_MP&quot;</span> +</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                                  <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">support::cpp11::to_string</a>(<a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">CLKernelLibrary::get</a>().get_num_compute_units());</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160; </div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="comment">// Check if we need to find the Optimal LWS. If the kernel&#39;s config_id is equal to default_config_id, the kernel does not require to be tuned</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keywordflow">if</span> (kernel.<a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a8f7f6ab59fc0e601d750b83e75a398eb">config_id</a>() != arm_compute::default_config_id)</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    {</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <span class="keyword">auto</span> p = _tuning_params_table.find(config_id);</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160; </div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        <span class="keywordflow">if</span> (p == _tuning_params_table.end())</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        {</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            <span class="keywordflow">if</span> (_tune_new_kernels)</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            {</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                <span class="comment">// Find the optimal LWS for the kernel</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                <a class="code" href="classarm__compute_1_1_c_l_tuning_params.xhtml">CLTuningParams</a> opt_tuning_params = find_optimal_tuning_params(kernel, data);</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160; </div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                <span class="comment">// Insert the optimal LWS in the table</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                <a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#a7993b367bfe0275459eafb09059da1d8">add_tuning_params</a>(config_id, opt_tuning_params);</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160; </div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                <span class="comment">// Set Local-Workgroup-Size</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                kernel.<a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#ad356b88c8f61267d593d9ed99835bde9">set_lws_hint</a>(opt_tuning_params.<a class="code" href="classarm__compute_1_1_c_l_tuning_params.xhtml#a722b1a9a06026623079b291d4a6c752f">get_lws</a>());</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                <span class="keywordflow">if</span> (_tuning_info.<a class="code" href="structarm__compute_1_1_c_l_tuning_info.xhtml#a93490954be8daf7e7326c5375e122259">tune_wbsm</a>)</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                {</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                    kernel.<a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a48bd4a8a34a8bfa14d8092efd3f3f171">set_wbsm_hint</a>(opt_tuning_params.<a class="code" href="classarm__compute_1_1_c_l_tuning_params.xhtml#a911324ec4a6233263cccbea220d2cdb8">get_wbsm</a>());</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                }</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            }</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        }</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        {</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            <span class="comment">// Set Local-Workgroup-Size</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            kernel.<a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#ad356b88c8f61267d593d9ed99835bde9">set_lws_hint</a>(p-&gt;second.get_lws());</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            <span class="keywordflow">if</span> (_tuning_info.<a class="code" href="structarm__compute_1_1_c_l_tuning_info.xhtml#a93490954be8daf7e7326c5375e122259">tune_wbsm</a>)</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            {</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                kernel.<a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml#a48bd4a8a34a8bfa14d8092efd3f3f171">set_wbsm_hint</a>(p-&gt;second.get_wbsm());</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            }</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        }</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    }</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;}</div>
<div class="line"><a name="l00145"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_tuner.xhtml#a3b900b566993081d019a907df150842d">  145</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#af073b532560e2105dd22d381f5888ce7">CLTuner::tune_kernel_dynamic</a>(<a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml">ICLKernel</a> &amp;kernel, <a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> &amp;tensors)</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;{</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    DefaultKernelData data{tensors};</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160; </div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    do_tune_kernel_dynamic(kernel, &amp;data);</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;}</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160; </div>
<div class="line"><a name="l00152"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_tuner.xhtml#a7993b367bfe0275459eafb09059da1d8">  152</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#a7993b367bfe0275459eafb09059da1d8">CLTuner::add_tuning_params</a>(<span class="keyword">const</span> std::string &amp;kernel_id, <a class="code" href="classarm__compute_1_1_c_l_tuning_params.xhtml">CLTuningParams</a> optimal_tuning_params)</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;{</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    _tuning_params_table.emplace(kernel_id, optimal_tuning_params);</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;}</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160; </div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<a class="code" href="classarm__compute_1_1_c_l_tuning_params.xhtml">CLTuningParams</a> CLTuner::find_optimal_tuning_params(<a class="code" href="classarm__compute_1_1_i_c_l_kernel.xhtml">ICLKernel</a> &amp;kernel, IKernelData *data)</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;{</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="comment">// Profiling queue</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    cl::CommandQueue queue_profiler;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160; </div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="comment">// Extract real OpenCL function to intercept</span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#a5baba955626e8da33ed5dd829a538974">real_clEnqueueNDRangeKernel</a> == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    {</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#a5baba955626e8da33ed5dd829a538974">real_clEnqueueNDRangeKernel</a> = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ab5c1d962dbe252b8d6a9a3414557d194">clEnqueueNDRangeKernel_ptr</a>;</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    }</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160; </div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="comment">// Get the default queue</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    cl::CommandQueue default_queue = <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a398a2582c746d28fc125487a44c9ed74">queue</a>();</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160; </div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="comment">// Check if we can use the OpenCL timer with the default queue</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    cl_command_queue_properties props = default_queue.getInfo&lt;CL_QUEUE_PROPERTIES&gt;();</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160; </div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keywordflow">if</span> ((props &amp; CL_QUEUE_PROFILING_ENABLE) == 0)</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    {</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        <span class="comment">// Set the queue for profiling</span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        queue_profiler = cl::CommandQueue(<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adf0dd2db07cdbb966d6e385d3cd2605c">context</a>(), props | CL_QUEUE_PROFILING_ENABLE);</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    }</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    {</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        queue_profiler = default_queue;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    }</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160; </div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="comment">// Start intercepting enqueues:</span></div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keyword">auto</span> interceptor = [<span class="keyword">this</span>](cl_command_queue command_queue, cl_kernel kernel, cl_uint work_dim, <span class="keyword">const</span> <span class="keywordtype">size_t</span> *gwo,</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                              <span class="keyword">const</span> <span class="keywordtype">size_t</span> *gws, <span class="keyword">const</span> <span class="keywordtype">size_t</span> *lws, cl_uint num_events_in_wait_list,</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                              <span class="keyword">const</span> cl_event *event_wait_list, cl_event *event)</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    {</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        <span class="keywordflow">if</span> (this-&gt;<a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#ac6fe363cafdd1fcfb6179a7cceac7dad">kernel_event_is_set</a>())</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        {</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            <span class="comment">// If the event is already set it means the kernel enqueue is sliced: given that we only time the first slice we can save time by skipping the other enqueues.</span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            <span class="keywordflow">return</span> CL_SUCCESS;</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        }</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        cl_event tmp;</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        cl_int   <a class="code" href="namespacecheck__header__guards.xhtml#a7f345697df7eb20c9aba1ab6980cae8f">retval</a> = this-&gt;<a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#a5baba955626e8da33ed5dd829a538974">real_clEnqueueNDRangeKernel</a>(command_queue, kernel, work_dim, gwo, gws, lws,</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                                                            num_events_in_wait_list, event_wait_list, &amp;tmp);</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160; </div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        <span class="comment">// Set OpenCL event</span></div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        this-&gt;<a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#a7937dca7876064401bb14b4443bf5d8d">set_cl_kernel_event</a>(tmp);</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160; </div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        <span class="keywordflow">if</span> (event != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        {</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;            <span class="comment">//return cl_event from the intercepted call</span></div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            <a class="code" href="_open_c_l_8cpp.xhtml#a434f9e0998ebb096bf09a0a6abdd5938">clRetainEvent</a>(tmp);</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            *<span class="keyword">event</span> = tmp;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        }</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacecheck__header__guards.xhtml#a7f345697df7eb20c9aba1ab6980cae8f">retval</a>;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    };</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ab5c1d962dbe252b8d6a9a3414557d194">clEnqueueNDRangeKernel_ptr</a> = interceptor;</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160; </div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="comment">// Run the kernel with default lws to be used as baseline</span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    data-&gt;do_run(kernel, queue_profiler);</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="comment">    /// Get the cached gws used by the kernel</span></div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="comment">    /// NOTE: The window configured inside configure() is usually changed in run(). Thus we should not calculate gws</span></div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="comment">    /// from this static window. Instead we get the real gws used (and cached) by run() in the previous step.</span></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment">    /// This is only a temporary workaround. An ideal solution involves decoupling the execution window from run() / run_op()</span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="comment">    /// Please see COMPMID-5934</span></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="comment"></span>    cl::NDRange gws = kernel.get_cached_gws();</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <a class="code" href="src_2common_2utils_2_log_8h.xhtml#a4771170bf901ba7933ec637e1003fcf6">ARM_COMPUTE_LOG_MSG_WITH_FORMAT_ACL</a>(</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        <a class="code" href="namespacearm__compute_1_1logging.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a551b723eafd6a31d444fcb2f5920fbd3">arm_compute::logging::LogLevel::INFO</a>,</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        <span class="stringliteral">&quot;[CLTuner] Kernel with config_id &#39;%s&#39; uses %s as the upper-bound for lws search&quot;</span>, kernel.config_id().c_str(),</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a062b90d0a8defe70b0cd19300fee2825">to_string</a>(gws).c_str());</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160; </div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    queue_profiler.finish();</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160; </div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="keyword">const</span> cl_ulong start         = _kernel_event.getProfilingInfo&lt;CL_PROFILING_COMMAND_START&gt;();</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keyword">const</span> cl_ulong <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>           = _kernel_event.getProfilingInfo&lt;CL_PROFILING_COMMAND_END&gt;();</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    cl_ulong       min_exec_time = <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a> - start;</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    _kernel_event                = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160; </div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    CLTuningParams opt_tuning_params(cl::NullRange, 0);</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160; </div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="comment">// Construct the list of tuning parameters values to be tested based on the tuner mode.</span></div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="keyword">auto</span> tuning_list = <a class="code" href="namespacearm__compute_1_1cl__tuner.xhtml#a9dd0f307a72c5d7edff6cec694e29308">cl_tuner::get_tuning_parameters_list</a>(_tuning_info, gws);</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; tuning_list-&gt;size(); ++i)</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    {</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        CLTuningParams tuning_test = (*tuning_list)[i];</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        <span class="comment">// Setting the lws</span></div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        cl::NDRange lws_test    = tuning_test.get_lws();</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        <span class="keyword">auto</span>        x           = lws_test[0];</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        <span class="keyword">auto</span>        y           = lws_test[1];</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        <span class="keyword">auto</span>        z           = lws_test[2];</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span>  invalid_lws = (x * y * z &gt; kernel.get_max_workgroup_size()) || (x == 1 &amp;&amp; y == 1 &amp;&amp; z == 1);</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160; </div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        <span class="keywordflow">if</span> (invalid_lws)</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        {</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        }</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160; </div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        kernel.set_lws_hint(lws_test);</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        <span class="keywordflow">if</span> (_tuning_info.<a class="code" href="structarm__compute_1_1_c_l_tuning_info.xhtml#a93490954be8daf7e7326c5375e122259">tune_wbsm</a> &amp;&amp; <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">CLKernelLibrary::get</a>().<a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a543610db0a6e5120dfb943e12a62909b">is_wbsm_supported</a>())</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        {</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;            cl_int wbsm_test = tuning_test.get_wbsm();</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;            kernel.set_wbsm_hint(wbsm_test);</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        }</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        <a class="code" href="src_2common_2utils_2_log_8h.xhtml#a4771170bf901ba7933ec637e1003fcf6">ARM_COMPUTE_LOG_MSG_WITH_FORMAT_ACL</a>(<a class="code" href="namespacearm__compute_1_1logging.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a551b723eafd6a31d444fcb2f5920fbd3">arm_compute::logging::LogLevel::INFO</a>, <span class="stringliteral">&quot;[CLTuner] Trying LWS: %s, WBSM: %d&quot;</span>,</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                                            <a class="code" href="namespacearm__compute.xhtml#a062b90d0a8defe70b0cd19300fee2825">to_string</a>(kernel.lws_hint()).c_str(), kernel.wbsm_hint());</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160; </div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        <span class="comment">// Run the kernel</span></div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        data-&gt;do_run(kernel, queue_profiler);</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160; </div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        queue_profiler.finish();</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160; </div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        <span class="keyword">const</span> cl_ulong start = _kernel_event.getProfilingInfo&lt;CL_PROFILING_COMMAND_START&gt;();</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        <span class="keyword">const</span> cl_ulong <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>   = _kernel_event.getProfilingInfo&lt;CL_PROFILING_COMMAND_END&gt;();</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        <span class="keyword">const</span> cl_ulong diff  = <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a> - start;</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        _kernel_event        = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160; </div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        <span class="comment">// Check the execution time</span></div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        <span class="keywordflow">if</span> (diff &lt; min_exec_time)</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        {</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;            min_exec_time = diff;</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;            opt_tuning_params.<a class="code" href="classarm__compute_1_1_c_l_tuning_params.xhtml#ab2d66c6ccbd49d09857ef55c61aa84ea">set_lws</a>(tuning_test.get_lws());</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;            <span class="keywordflow">if</span> (_tuning_info.<a class="code" href="structarm__compute_1_1_c_l_tuning_info.xhtml#a93490954be8daf7e7326c5375e122259">tune_wbsm</a>)</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;            {</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                opt_tuning_params.<a class="code" href="classarm__compute_1_1_c_l_tuning_params.xhtml#a589c67583be1aca669d760445ec131a1">set_wbsm</a>(tuning_test.get_wbsm());</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;            }</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        }</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    }</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160; </div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <span class="comment">// Restore real function</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ab5c1d962dbe252b8d6a9a3414557d194">clEnqueueNDRangeKernel_ptr</a> = <a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#a5baba955626e8da33ed5dd829a538974">real_clEnqueueNDRangeKernel</a>;</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <span class="keywordflow">return</span> opt_tuning_params;</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;}</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160; </div>
<div class="line"><a name="l00287"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_tuner.xhtml#a09f3664a934e7bb4b227fbe3a7df555f">  287</a></span>&#160;<span class="keyword">const</span> std::unordered_map&lt;std::string, CLTuningParams&gt; &amp;<a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#a09f3664a934e7bb4b227fbe3a7df555f">CLTuner::tuning_params_table</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <span class="keywordflow">return</span> _tuning_params_table;</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;}</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160; </div>
<div class="line"><a name="l00292"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_tuner.xhtml#afbcfe4307e76d284d098b1ca3f83e065">  292</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#afbcfe4307e76d284d098b1ca3f83e065">CLTuner::import_tuning_params</a>(<span class="keyword">const</span> std::unordered_map&lt;std::string, CLTuningParams&gt; &amp;tuning_params_table)</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;{</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    _tuning_params_table.clear();</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    _tuning_params_table = <a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#a09f3664a934e7bb4b227fbe3a7df555f">tuning_params_table</a>;</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;}</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160; </div>
<div class="line"><a name="l00298"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_tuner.xhtml#a5ddfa449f78e4c4d8345e37f1719cc57">  298</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#a5ddfa449f78e4c4d8345e37f1719cc57">CLTuner::load_from_file</a>(<span class="keyword">const</span> std::string &amp;filename)</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;{</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    std::ifstream fs;</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    fs.exceptions(std::ifstream::badbit);</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    fs.open(filename, std::ios::in);</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    <span class="keywordflow">if</span> (!fs.is_open())</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    {</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        <a class="code" href="_error_8h.xhtml#abd040a16dc0dbc75733e07aff93048a8">ARM_COMPUTE_ERROR_VAR</a>(<span class="stringliteral">&quot;Failed to open &#39;%s&#39; (%s [%d])&quot;</span>, filename.c_str(), strerror(errno), errno);</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    }</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    std::string line;</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    <span class="keywordtype">bool</span>        header_line = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    <span class="keywordflow">while</span> (!std::getline(fs, line).fail())</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    {</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;        <span class="keywordflow">if</span> (header_line)</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        {</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;            header_line            = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;            <span class="keywordtype">size_t</span> pos_lws         = line.find(<span class="stringliteral">&quot;lws&quot;</span>);</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;            <span class="keywordtype">size_t</span> pos_wbsm        = line.find(<span class="stringliteral">&quot;wbsm&quot;</span>);</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;            _tuning_info.<a class="code" href="structarm__compute_1_1_c_l_tuning_info.xhtml#a93490954be8daf7e7326c5375e122259">tune_wbsm</a> = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;            <span class="keywordflow">if</span> (pos_lws != std::string::npos || pos_wbsm != std::string::npos)</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;            {</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                <span class="comment">// The file has in the first line the parameters it has been tuned on</span></div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                <span class="keywordflow">if</span> (pos_wbsm != std::string::npos)</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;                {</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;                    _tuning_info.<a class="code" href="structarm__compute_1_1_c_l_tuning_info.xhtml#a93490954be8daf7e7326c5375e122259">tune_wbsm</a> = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;                }</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;                <span class="comment">// Once the line with the tuning parameter is read we can</span></div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                <span class="comment">// read the next one to start collecting the values</span></div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;                <span class="keywordflow">if</span> (std::getline(fs, line).fail())</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                {</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;                }</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;            }</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        }</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160; </div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_tuning_params.xhtml">CLTuningParams</a> tuning_params;</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;        <span class="keywordtype">size_t</span>         pos = line.find(<span class="stringliteral">&quot;;&quot;</span>);</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;        <span class="keywordflow">if</span> (pos == std::string::npos)</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;        {</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;            <a class="code" href="_error_8h.xhtml#abd040a16dc0dbc75733e07aff93048a8">ARM_COMPUTE_ERROR_VAR</a>(<span class="stringliteral">&quot;Malformed row &#39;%s&#39; in %s&quot;</span>, line.c_str(), filename.c_str());</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        }</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        std::string kernel_id = line.substr(0, pos);</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;        line.erase(0, pos + 1);</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        <span class="keywordflow">if</span> (!tuning_params.<a class="code" href="classarm__compute_1_1_c_l_tuning_params.xhtml#ab91e266c6153d568c897ca15656913de">from_string</a>(_tuning_info, line))</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;        {</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;            <a class="code" href="_error_8h.xhtml#abd040a16dc0dbc75733e07aff93048a8">ARM_COMPUTE_ERROR_VAR</a>(<span class="stringliteral">&quot;Malformed row &#39;%s&#39; in %s&quot;</span>, line.c_str(), filename.c_str());</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        }</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#a7993b367bfe0275459eafb09059da1d8">add_tuning_params</a>(kernel_id, tuning_params);</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    }</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    fs.close();</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;}</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160; </div>
<div class="line"><a name="l00350"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_c_l_tuner.xhtml#a3954437274c111b1d51ae164fbe6bb2f">  350</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1_c_l_tuner.xhtml#a3954437274c111b1d51ae164fbe6bb2f">CLTuner::save_to_file</a>(<span class="keyword">const</span> std::string &amp;filename)<span class="keyword"> const</span></div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    <span class="keywordflow">if</span> (!_tune_new_kernels || _tuning_params_table.empty() || filename.empty())</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    {</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    }</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    std::ofstream fs;</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    fs.exceptions(std::ifstream::failbit | std::ifstream::badbit);</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    fs.open(filename, std::ios::out);</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    std::string header_string = <span class="stringliteral">&quot;&quot;</span>;</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    header_string += <span class="stringliteral">&quot;lws&quot;</span>;</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    <span class="keywordflow">if</span> (_tuning_info.<a class="code" href="structarm__compute_1_1_c_l_tuning_info.xhtml#a93490954be8daf7e7326c5375e122259">tune_wbsm</a>)</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    {</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;        <span class="keywordflow">if</span> (!header_string.empty())</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        {</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;            header_string += <span class="stringliteral">&quot; &quot;</span>;</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;        }</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;        header_string += <span class="stringliteral">&quot;wbsm&quot;</span>;</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    }</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    fs &lt;&lt; header_string &lt;&lt; std::endl;</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> <span class="keyword">const</span> &amp;kernel_data : _tuning_params_table)</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    {</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_tuning_params.xhtml">CLTuningParams</a> tun_pams(kernel_data.second);</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;        fs &lt;&lt; kernel_data.first &lt;&lt; tun_pams.<a class="code" href="classarm__compute_1_1_c_l_tuning_params.xhtml#a7083e56d3e75863f33ef692b167b2caf">to_string</a>(_tuning_info) &lt;&lt; std::endl;</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    }</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    fs.close();</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;}</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;} <span class="comment">// namespace arm_compute</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="a_c_l_tuning_parameters_list_8h_xhtml"><div class="ttname"><a href="_c_l_tuning_parameters_list_8h.xhtml">CLTuningParametersList.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1support_1_1cpp11_xhtml_acc5dddee1cbe93a4eaf0a9f74ee96bb7"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">arm_compute::support::cpp11::to_string</a></div><div class="ttdeci">std::string to_string(T &amp;&amp;value)</div><div class="ttdoc">Convert integer and float values to string.</div><div class="ttdef"><b>Definition:</b> <a href="_string_support_8h_source.xhtml#l00168">StringSupport.h:168</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_c_l_tuning_info_xhtml_a249f3f713c6ea8f564e760559cf509f4"><div class="ttname"><a href="structarm__compute_1_1_c_l_tuning_info.xhtml#a249f3f713c6ea8f564e760559cf509f4">arm_compute::CLTuningInfo::tuner_mode</a></div><div class="ttdeci">CLTunerMode tuner_mode</div><div class="ttdoc">Parameter to select the level (granularity) of the tuning.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_types_8h_source.xhtml#l00045">CLTunerTypes.h:45</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_ac3d2ed16df8334b183d76d8a82dbf70f"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a></div><div class="ttdeci">static CLSymbols &amp; get()</div><div class="ttdoc">Get the static instance of CLSymbols.</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8cpp_source.xhtml#l00043">OpenCL.cpp:43</a></div></div>
<div class="ttc" id="a_string_support_8h_xhtml"><div class="ttname"><a href="_string_support_8h.xhtml">StringSupport.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_tuning_params_xhtml_a722b1a9a06026623079b291d4a6c752f"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuning_params.xhtml#a722b1a9a06026623079b291d4a6c752f">arm_compute::CLTuningParams::get_lws</a></div><div class="ttdeci">cl::NDRange get_lws() const</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuning_params_8h_source.xhtml#l00067">CLTuningParams.h:67</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_tuner_xhtml_a3954437274c111b1d51ae164fbe6bb2f"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuner.xhtml#a3954437274c111b1d51ae164fbe6bb2f">arm_compute::CLTuner::save_to_file</a></div><div class="ttdeci">bool save_to_file(const std::string &amp;filename) const</div><div class="ttdoc">Save the content of the tuning parameters table to file.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_8cpp_source.xhtml#l00350">CLTuner.cpp:350</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_abd040a16dc0dbc75733e07aff93048a8"><div class="ttname"><a href="_error_8h.xhtml#abd040a16dc0dbc75733e07aff93048a8">ARM_COMPUTE_ERROR_VAR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_VAR(msg,...)</div><div class="ttdoc">Print the given message then throw an std::runtime_error.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00348">Error.h:348</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_tuner_xhtml_a09f3664a934e7bb4b227fbe3a7df555f"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuner.xhtml#a09f3664a934e7bb4b227fbe3a7df555f">arm_compute::CLTuner::tuning_params_table</a></div><div class="ttdeci">const std::unordered_map&lt; std::string, CLTuningParams &gt; &amp; tuning_params_table() const</div><div class="ttdoc">Give read access to the tuning params table.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_8cpp_source.xhtml#l00287">CLTuner.cpp:287</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_c_l_kernel_xhtml_aa550ff0352ff2388e02f7b0a41bf5fe7"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml#aa550ff0352ff2388e02f7b0a41bf5fe7">arm_compute::ICLKernel::get_target</a></div><div class="ttdeci">GPUTarget get_target() const</div><div class="ttdoc">Get the targeted GPU architecture.</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00443">ICLKernel.h:443</a></div></div>
<div class="ttc" id="a_error_8h_xhtml"><div class="ttname"><a href="_error_8h.xhtml">Error.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_c_l_kernel_xhtml_a48bd4a8a34a8bfa14d8092efd3f3f171"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml#a48bd4a8a34a8bfa14d8092efd3f3f171">arm_compute::ICLKernel::set_wbsm_hint</a></div><div class="ttdeci">void set_wbsm_hint(const cl_int &amp;wbsm_hint)</div><div class="ttdoc">Set the workgroup batch size modifier hint.</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00394">ICLKernel.h:394</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_kernel_library_xhtml_acba005f5ce2c62cbf3f94d074d9007aa"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">arm_compute::CLKernelLibrary::get</a></div><div class="ttdeci">static CLKernelLibrary &amp; get()</div><div class="ttdoc">Access the KernelLibrary singleton.</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00041">CLKernelLibrary.cpp:41</a></div></div>
<div class="ttc" id="asrc_2common_2utils_2_log_8h_xhtml_a4771170bf901ba7933ec637e1003fcf6"><div class="ttname"><a href="src_2common_2utils_2_log_8h.xhtml#a4771170bf901ba7933ec637e1003fcf6">ARM_COMPUTE_LOG_MSG_WITH_FORMAT_ACL</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_MSG_WITH_FORMAT_ACL(log_level, fmt,...)</div><div class="ttdef"><b>Definition:</b> <a href="src_2common_2utils_2_log_8h_source.xhtml#l00031">Log.h:31</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_af7795707992825c309fe846740dc8cf8"><div class="ttname"><a href="namespacearm__compute.xhtml#af7795707992825c309fe846740dc8cf8">arm_compute::string_from_target</a></div><div class="ttdeci">const std::string &amp; string_from_target(GPUTarget target)</div><div class="ttdoc">Translates a given gpu device target to string.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_g_p_u_target_8cpp_source.xhtml#l00169">GPUTarget.cpp:169</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_ab5c1d962dbe252b8d6a9a3414557d194"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#ab5c1d962dbe252b8d6a9a3414557d194">arm_compute::CLSymbols::clEnqueueNDRangeKernel_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clEnqueueNDRangeKernel)&gt; clEnqueueNDRangeKernel_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00099">OpenCL.h:99</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_kernel_library_xhtml_a543610db0a6e5120dfb943e12a62909b"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#a543610db0a6e5120dfb943e12a62909b">arm_compute::CLKernelLibrary::is_wbsm_supported</a></div><div class="ttdeci">bool is_wbsm_supported()</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00109">CLKernelLibrary.cpp:109</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_tuner_xhtml_a52f755d664bbdcb9346cdf5cc4a7e958"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuner.xhtml#a52f755d664bbdcb9346cdf5cc4a7e958">arm_compute::CLTuner::tune_kernel_static</a></div><div class="ttdeci">void tune_kernel_static(ICLKernel &amp;kernel) override</div><div class="ttdoc">Tune OpenCL kernel statically.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_8cpp_source.xhtml#l00094">CLTuner.cpp:94</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_c_l_kernel_xhtml_ad356b88c8f61267d593d9ed99835bde9"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml#ad356b88c8f61267d593d9ed99835bde9">arm_compute::ICLKernel::set_lws_hint</a></div><div class="ttdeci">void set_lws_hint(const cl::NDRange &amp;lws_hint)</div><div class="ttdoc">Set the Local-Workgroup-Size hint.</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00373">ICLKernel.h:373</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_tuner_xhtml_ac6fe363cafdd1fcfb6179a7cceac7dad"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuner.xhtml#ac6fe363cafdd1fcfb6179a7cceac7dad">arm_compute::CLTuner::kernel_event_is_set</a></div><div class="ttdeci">bool kernel_event_is_set() const</div><div class="ttdoc">Is the kernel_event set ?</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_8cpp_source.xhtml#l00071">CLTuner.cpp:71</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_c_l_kernel_xhtml_a8f7f6ab59fc0e601d750b83e75a398eb"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml#a8f7f6ab59fc0e601d750b83e75a398eb">arm_compute::ICLKernel::config_id</a></div><div class="ttdeci">const std::string &amp; config_id() const</div><div class="ttdoc">Get the configuration ID.</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00419">ICLKernel.h:419</a></div></div>
<div class="ttc" id="a_c_l_tuner_8h_xhtml"><div class="ttname"><a href="_c_l_tuner_8h.xhtml">CLTuner.h</a></div></div>
<div class="ttc" id="acore_2_c_l_2_i_c_l_kernel_8h_xhtml"><div class="ttname"><a href="core_2_c_l_2_i_c_l_kernel_8h.xhtml">ICLKernel.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_tuning_params_xhtml_a911324ec4a6233263cccbea220d2cdb8"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuning_params.xhtml#a911324ec4a6233263cccbea220d2cdb8">arm_compute::CLTuningParams::get_wbsm</a></div><div class="ttdeci">cl_int get_wbsm() const</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuning_params_8h_source.xhtml#l00077">CLTuningParams.h:77</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_pack_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_pack.xhtml">arm_compute::ITensorPack</a></div><div class="ttdoc">Tensor packing service.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_pack_8h_source.xhtml#l00039">ITensorPack.h:39</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_tuning_params_xhtml_ab2d66c6ccbd49d09857ef55c61aa84ea"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuning_params.xhtml#ab2d66c6ccbd49d09857ef55c61aa84ea">arm_compute::CLTuningParams::set_lws</a></div><div class="ttdeci">void set_lws(cl::NDRange lws)</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuning_params_8h_source.xhtml#l00062">CLTuningParams.h:62</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cl__tuner_xhtml_a9dd0f307a72c5d7edff6cec694e29308"><div class="ttname"><a href="namespacearm__compute_1_1cl__tuner.xhtml#a9dd0f307a72c5d7edff6cec694e29308">arm_compute::cl_tuner::get_tuning_parameters_list</a></div><div class="ttdeci">std::unique_ptr&lt; ICLTuningParametersList &gt; get_tuning_parameters_list(CLTuningInfo tuning_info, const cl::NDRange &amp;gws)</div><div class="ttdoc">Construct an ICLTuningParametersList object for the given tuner mode and gws configuration.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuning_parameters_list_8cpp_source.xhtml#l00272">CLTuningParametersList.cpp:272</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_tuner_xhtml_af40cb6e89337657d0fea6a8629f69a32"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuner.xhtml#af40cb6e89337657d0fea6a8629f69a32">arm_compute::CLTuner::CLTuner</a></div><div class="ttdeci">CLTuner(bool tune_new_kernels=true, CLTuningInfo tuning_info=CLTuningInfo())</div><div class="ttdoc">Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_8cpp_source.xhtml#l00040">CLTuner.cpp:40</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_c_l_tuning_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_c_l_tuning_info.xhtml">arm_compute::CLTuningInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_types_8h_source.xhtml#l00043">CLTunerTypes.h:43</a></div></div>
<div class="ttc" id="a_c_l_scheduler_8h_xhtml"><div class="ttname"><a href="_c_l_scheduler_8h.xhtml">CLScheduler.h</a></div><div class="ttdoc">Interface to enqueue OpenCL kernels and get/set the OpenCL CommandQueue and ICLTuner.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_tuning_params_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuning_params.xhtml">arm_compute::CLTuningParams</a></div><div class="ttdoc">&lt; OpenCL tuner parameters</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuning_params_8h_source.xhtml#l00037">CLTuningParams.h:37</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_tuning_params_xhtml_a7083e56d3e75863f33ef692b167b2caf"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuning_params.xhtml#a7083e56d3e75863f33ef692b167b2caf">arm_compute::CLTuningParams::to_string</a></div><div class="ttdeci">std::string to_string(CLTuningInfo tuning_info)</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuning_params_8h_source.xhtml#l00082">CLTuningParams.h:82</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_tuner_xhtml_a7993b367bfe0275459eafb09059da1d8"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuner.xhtml#a7993b367bfe0275459eafb09059da1d8">arm_compute::CLTuner::add_tuning_params</a></div><div class="ttdeci">void add_tuning_params(const std::string &amp;kernel_id, CLTuningParams optimal_tuning_params)</div><div class="ttdoc">Manually add tuning parameters for a kernel.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_8cpp_source.xhtml#l00152">CLTuner.cpp:152</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_tuner_xhtml_a7937dca7876064401bb14b4443bf5d8d"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuner.xhtml#a7937dca7876064401bb14b4443bf5d8d">arm_compute::CLTuner::set_cl_kernel_event</a></div><div class="ttdeci">void set_cl_kernel_event(cl_event kernel_event)</div><div class="ttdoc">Set the OpenCL kernel event.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_8cpp_source.xhtml#l00075">CLTuner.cpp:75</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_tuner_xhtml_a362184f6651ae4acde05d5ce85cfd16f"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuner.xhtml#a362184f6651ae4acde05d5ce85cfd16f">arm_compute::CLTuner::tune_new_kernels</a></div><div class="ttdeci">bool tune_new_kernels() const</div><div class="ttdoc">Tune kernels that are not in the tuning parameters table.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_8cpp_source.xhtml#l00084">CLTuner.cpp:84</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a1e041dc03ff256dfc8b0bf5c5fe099e0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">arm_compute::test::validation::pack</a></div><div class="ttdeci">ITensorPack pack</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00188">Im2Col.cpp:188</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00151">Error.h:151</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_adf0dd2db07cdbb966d6e385d3cd2605c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adf0dd2db07cdbb966d6e385d3cd2605c">arm_compute::test::validation::context</a></div><div class="ttdeci">auto context</div><div class="ttdef"><b>Definition:</b> <a href="_direct_conv2d_8cpp_source.xhtml#l00167">DirectConv2d.cpp:167</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_tuning_params_xhtml_a589c67583be1aca669d760445ec131a1"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuning_params.xhtml#a589c67583be1aca669d760445ec131a1">arm_compute::CLTuningParams::set_wbsm</a></div><div class="ttdeci">void set_wbsm(cl_int wbsm)</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuning_params_8h_source.xhtml#l00072">CLTuningParams.h:72</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_c_l_kernel_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_kernel.xhtml">arm_compute::ICLKernel</a></div><div class="ttdoc">Common interface for all the OpenCL kernels.</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_i_c_l_kernel_8h_source.xhtml#l00067">ICLKernel.h:67</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_scheduler_xhtml_a9b58d0eb9a2af8e6d7908695e1557d6c"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">arm_compute::CLScheduler::get</a></div><div class="ttdeci">static CLScheduler &amp; get()</div><div class="ttdoc">Access the scheduler singleton.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00112">CLScheduler.cpp:112</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_tuner_xhtml_afbcfe4307e76d284d098b1ca3f83e065"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuner.xhtml#afbcfe4307e76d284d098b1ca3f83e065">arm_compute::CLTuner::import_tuning_params</a></div><div class="ttdeci">void import_tuning_params(const std::unordered_map&lt; std::string, CLTuningParams &gt; &amp;tuning_params_table)</div><div class="ttdoc">Import tuning parameters table.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_8cpp_source.xhtml#l00292">CLTuner.cpp:292</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2024 Arm Limited.</div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a062b90d0a8defe70b0cd19300fee2825"><div class="ttname"><a href="namespacearm__compute.xhtml#a062b90d0a8defe70b0cd19300fee2825">arm_compute::to_string</a></div><div class="ttdeci">std::string to_string(const ClComponentElementwiseBinary::Attributes::ElementwiseOp &amp;op)</div><div class="ttdoc">Formatted output of the arm_compute::experimental::dynamic_fusion::ClComponentElementwiseBinary::Attr...</div><div class="ttdef"><b>Definition:</b> <a href="components_2utils_2type__printer_2_elementwise_binary_8h_source.xhtml#l00068">ElementwiseBinary.h:68</a></div></div>
<div class="ttc" id="anamespaceclang__tidy__rules_xhtml_a1a6b6fb557d8d37d59700faf4e4c9167"><div class="ttname"><a href="namespaceclang__tidy__rules.xhtml#a1a6b6fb557d8d37d59700faf4e4c9167">clang_tidy_rules.mode</a></div><div class="ttdeci">mode</div><div class="ttdef"><b>Definition:</b> <a href="clang__tidy__rules_8py_source.xhtml#l00196">clang_tidy_rules.py:196</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_tuner_xhtml_af073b532560e2105dd22d381f5888ce7"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuner.xhtml#af073b532560e2105dd22d381f5888ce7">arm_compute::CLTuner::tune_kernel_dynamic</a></div><div class="ttdeci">void tune_kernel_dynamic(ICLKernel &amp;kernel) override</div><div class="ttdoc">Tune OpenCL kernel dynamically.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_8cpp_source.xhtml#l00099">CLTuner.cpp:99</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ae76ef5bd3ad69f7380ebb3ac6033ec5c"><div class="ttname"><a href="namespacearm__compute.xhtml#ae76ef5bd3ad69f7380ebb3ac6033ec5c">arm_compute::CLTunerMode</a></div><div class="ttdeci">CLTunerMode</div><div class="ttdoc">&lt; OpenCL tuner modes</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_types_8h_source.xhtml#l00035">CLTunerTypes.h:35</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1mlgo_1_1parser_xhtml_a9fe67a1da3e2628bade473115ecbb5be"><div class="ttname"><a href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">arm_compute::mlgo::parser::end</a></div><div class="ttdeci">void end(TokenStream &amp;in, bool &amp;valid)</div><div class="ttdef"><b>Definition:</b> <a href="_m_l_g_o_parser_8cpp_source.xhtml#l00283">MLGOParser.cpp:283</a></div></div>
<div class="ttc" id="asrc_2common_2utils_2_log_8h_xhtml"><div class="ttname"><a href="src_2common_2utils_2_log_8h.xhtml">Log.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_tuner_xhtml_a5ddfa449f78e4c4d8345e37f1719cc57"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuner.xhtml#a5ddfa449f78e4c4d8345e37f1719cc57">arm_compute::CLTuner::load_from_file</a></div><div class="ttdeci">void load_from_file(const std::string &amp;filename)</div><div class="ttdoc">Load the tuning parameters table from file.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_8cpp_source.xhtml#l00298">CLTuner.cpp:298</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_tuner_xhtml_aae485b24df65d39cb646e48317f49639"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuner.xhtml#aae485b24df65d39cb646e48317f49639">arm_compute::CLTuner::set_tuner_mode</a></div><div class="ttdeci">void set_tuner_mode(CLTunerMode mode)</div><div class="ttdoc">Set OpenCL tuner mode.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_8cpp_source.xhtml#l00089">CLTuner.cpp:89</a></div></div>
<div class="ttc" id="anamespacecheck__header__guards_xhtml_a7f345697df7eb20c9aba1ab6980cae8f"><div class="ttname"><a href="namespacecheck__header__guards.xhtml#a7f345697df7eb20c9aba1ab6980cae8f">check_header_guards.retval</a></div><div class="ttdeci">int retval</div><div class="ttdef"><b>Definition:</b> <a href="check__header__guards_8py_source.xhtml#l00188">check_header_guards.py:188</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_tuner_xhtml_a5baba955626e8da33ed5dd829a538974"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuner.xhtml#a5baba955626e8da33ed5dd829a538974">arm_compute::CLTuner::real_clEnqueueNDRangeKernel</a></div><div class="ttdeci">std::function&lt; decltype(clEnqueueNDRangeKernel)&gt; real_clEnqueueNDRangeKernel</div><div class="ttdoc">clEnqueueNDRangeKernel symbol</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_8h_source.xhtml#l00106">CLTuner.h:106</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_c_l_tuning_info_xhtml_a93490954be8daf7e7326c5375e122259"><div class="ttname"><a href="structarm__compute_1_1_c_l_tuning_info.xhtml#a93490954be8daf7e7326c5375e122259">arm_compute::CLTuningInfo::tune_wbsm</a></div><div class="ttdeci">bool tune_wbsm</div><div class="ttdoc">Flag to tune the batches of work groups distributed to compute units.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_types_8h_source.xhtml#l00046">CLTunerTypes.h:46</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_tuner_xhtml_aba10acdb2d58e3e0a96364c487a71d40"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuner.xhtml#aba10acdb2d58e3e0a96364c487a71d40">arm_compute::CLTuner::set_tune_new_kernels</a></div><div class="ttdeci">void set_tune_new_kernels(bool tune_new_kernels)</div><div class="ttdoc">Setter for tune_new_kernels option.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuner_8cpp_source.xhtml#l00080">CLTuner.cpp:80</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_scheduler_xhtml_a398a2582c746d28fc125487a44c9ed74"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a398a2582c746d28fc125487a44c9ed74">arm_compute::CLScheduler::queue</a></div><div class="ttdeci">cl::CommandQueue &amp; queue()</div><div class="ttdoc">Accessor for the associated CL command queue.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00040">CLScheduler.cpp:40</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_tuning_params_xhtml_ab91e266c6153d568c897ca15656913de"><div class="ttname"><a href="classarm__compute_1_1_c_l_tuning_params.xhtml#ab91e266c6153d568c897ca15656913de">arm_compute::CLTuningParams::from_string</a></div><div class="ttdeci">bool from_string(CLTuningInfo tuning_info, std::string tuning_params_string)</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tuning_params_8h_source.xhtml#l00094">CLTuningParams.h:94</a></div></div>
<div class="ttc" id="a_open_c_l_8cpp_xhtml_a434f9e0998ebb096bf09a0a6abdd5938"><div class="ttname"><a href="_open_c_l_8cpp.xhtml#a434f9e0998ebb096bf09a0a6abdd5938">clRetainEvent</a></div><div class="ttdeci">cl_int clRetainEvent(cl_event event)</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8cpp_source.xhtml#l00937">OpenCL.cpp:937</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1logging_xhtml_aca1fd1d8935433e6ba2e3918214e07f9a551b723eafd6a31d444fcb2f5920fbd3"><div class="ttname"><a href="namespacearm__compute_1_1logging.xhtml#aca1fd1d8935433e6ba2e3918214e07f9a551b723eafd6a31d444fcb2f5920fbd3">arm_compute::logging::LogLevel::INFO</a></div><div class="ttdeci">@ INFO</div><div class="ttdoc">Information log level.</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_bf9f26469d00835ba20ff8d80ee5a804.xhtml">runtime</a></li><li class="navelem"><a class="el" href="dir_43c3fdbf778d1fd99e2e38f09fddd920.xhtml">CL</a></li><li class="navelem"><a class="el" href="_c_l_tuner_8cpp.xhtml">CLTuner.cpp</a></li>
    <li class="footer">Generated on Mon Mar 18 2024 11:32:03 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
